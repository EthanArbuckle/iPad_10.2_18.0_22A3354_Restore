uint64_t sub_100DB26FC(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v4, *(float *)(v5 + 32), a3);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v4, *(float *)(v5 + 32), a3);
  return result;
}

uint64_t sub_100DB27AC(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      v4 += 9;
    if ((v3 & 0x10) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

double sub_100DB2828(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB228C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB2874()
{
  return 1;
}

_QWORD *sub_100DB287C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ReceiverToGpsTimeConversion");
}

double sub_100DB288C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 8914);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v6)
    return result;
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0)
      goto LABEL_6;
LABEL_10:
    *(_DWORD *)(a1 + 44) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311658 + 16);
    *(float *)&result = sub_100DB1C98(v8, v9);
    v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 44) |= 1u;
  *(_QWORD *)(a1 + 8) = v7;
  v6 = *(_DWORD *)(a2 + 44);
  if ((v6 & 2) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v6 & 4) == 0)
    goto LABEL_7;
LABEL_15:
  *(_DWORD *)(a1 + 44) |= 4u;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311658 + 24);
  result = sub_100DB1F8C(v10, v11);
  if ((*(_DWORD *)(a2 + 44) & 8) != 0)
  {
LABEL_20:
    *(_DWORD *)(a1 + 44) |= 8u;
    v12 = *(_QWORD *)(a1 + 32);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 32);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311658 + 32);
    return sub_100DB228C(v12, v13);
  }
  return result;
}

void sub_100DB2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB2A80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021859A0;
  sub_10010C3B0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB2AB0()
{
  operator new();
}

uint64_t sub_100DB2AF4(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  LOBYTE(v1) = *(_BYTE *)(result + 44);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 32))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_BYTE *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 32) = 0;
        v1 = *(_DWORD *)(result + 44);
      }
    }
    if ((v1 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 52))
        {
          *(_QWORD *)(v3 + 40) = 0;
          *(_OWORD *)(v3 + 24) = 0u;
          *(_OWORD *)(v3 + 8) = 0u;
        }
        *(_DWORD *)(v3 + 52) = 0;
        v1 = *(_DWORD *)(result + 44);
      }
    }
    if ((v1 & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 32);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 40))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 32) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 40) = 0;
      }
    }
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100DB2B7C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), (unint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311658 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    goto LABEL_13;
  }
LABEL_10:
  v8 = *(_QWORD *)(v5 + 24);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311658 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
  {
LABEL_13:
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311658 + 32);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return result;
}

uint64_t sub_100DB2C40(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  unsigned int v15;
  int v16;
  int v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_28;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 44);
    if ((v3 & 2) == 0)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0)
      goto LABEL_13;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311658 + 16);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB1ED8(v5);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v4 + v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 44);
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_28;
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311658 + 24);
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB21D8(v9);
  v11 = (int)v10;
  if (v10 >= 0x80)
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
  else
    v12 = 1;
  v4 = (v4 + v11 + v12 + 1);
  if ((*(_DWORD *)(a1 + 44) & 8) != 0)
  {
LABEL_22:
    v13 = *(_QWORD *)(a1 + 32);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311658 + 32);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB27AC(v13, a2);
    v16 = (int)v14;
    if (v14 >= 0x80)
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, v15);
    else
      v17 = 1;
    v4 = (v4 + v16 + v17 + 1);
  }
LABEL_28:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

double sub_100DB2D78(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB288C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB2DC4()
{
  return 1;
}

_QWORD *sub_100DB2DCC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.Clock");
}

double sub_100DB2DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 9132);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6);
      v8 = *(_DWORD *)(a1 + 28);
      v9 = *(int *)(a1 + 24);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v8 + 1);
          v8 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v8 + 1;
        operator new();
      }
      v10 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v9 + 1;
      sub_100DB0290(*(_QWORD *)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *(int *)(a2 + 24));
  }
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 1u;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      operator new();
    v12 = *(_QWORD *)(a2 + 8);
    if (!v12)
      v12 = *(_QWORD *)(qword_102311660 + 8);
    return sub_100DB288C(v11, v12);
  }
  return result;
}

void sub_100DB2FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB2FCC()
{
  operator new();
}

uint64_t sub_100DB300C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100DB2AF4(result);
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100DB3078(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311660 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  return result;
}

uint64_t sub_100DB30FC(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311660 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB2C40(v4, a2);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    else
      v7 = 1;
    v3 = v6 + v7 + 1;
  }
  else
  {
    v3 = 0;
  }
  v8 = *(_DWORD *)(a1 + 24);
  v9 = (v8 + v3);
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB18D4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10), a2);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      else
        v13 = 1;
      v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 24));
  }
  *(_DWORD *)(a1 + 40) = v9;
  return v9;
}

double sub_100DB31C8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB2DDC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB3214()
{
  return 1;
}

_QWORD *sub_100DB321C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MeasurementReport");
}

double sub_100DB322C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 9357);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100DB32FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB3314(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185A90;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB3324()
{
  operator new();
}

uint64_t sub_100DB3364(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100DB337C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

uint64_t sub_100DB33F4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100DB342C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB322C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB3478()
{
  return 1;
}

_QWORD *sub_100DB3480@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.Wgs84Ecef");
}

void sub_100DB3490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 9656);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (v6 >= 0xD)
        sub_10192A5B0();
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 44);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0)
          goto LABEL_10;
        goto LABEL_14;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0)
        return;
LABEL_15:
      v10 = *(_DWORD *)(a2 + 28);
      if (v10 >= 3)
        sub_10192A588();
      *(_DWORD *)(a1 + 44) |= 0x10u;
      *(_DWORD *)(a1 + 28) = v10;
      return;
    }
LABEL_14:
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_QWORD *)(a1 + 32) = v9;
    if ((*(_DWORD *)(a2 + 44) & 0x10) == 0)
      return;
    goto LABEL_15;
  }
}

void sub_100DB35B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB35CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185B08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB35DC()
{
  operator new();
}

uint64_t sub_100DB3620(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100DB363C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 28), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 28), a2, a4);
  return result;
}

uint64_t sub_100DB36EC(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 44);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x10) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      }
      else
      {
        v8 = 2;
      }
      v5 = (v8 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_100DB37AC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB3490(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB37F8()
{
  return 1;
}

_QWORD *sub_100DB3800@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SvBandCorrections");
}

double sub_100DB3810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 9876);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v7 = *(_QWORD *)(a1 + 16);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 16);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311678 + 16);
      return sub_100DB322C(v7, v8);
    }
  }
  return result;
}

void sub_100DB3904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB3920()
{
  operator new();
}

uint64_t sub_100DB3958(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 36))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100DB398C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(result + 8), a3);
    if ((*(_DWORD *)(v5 + 28) & 2) == 0)
      return result;
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311678 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_100DB39F8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = (v1 << 31 >> 31) & 9;
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (!v3)
        v3 = *(_QWORD *)(qword_102311678 + 16);
      v4 = *(unsigned __int8 *)(v3 + 36);
      v5 = (v4 << 31 >> 31) & 9;
      if ((v4 & 2) != 0)
        v5 += 9;
      if ((v4 & 4) != 0)
        v5 += 9;
      if (*(_BYTE *)(v3 + 36))
        v6 = v5;
      else
        v6 = 0;
      *(_DWORD *)(v3 + 32) = v6;
      v2 = (v2 | 2) + v6;
    }
  }
  else
  {
    v2 = 0;
  }
  *(_DWORD *)(a1 + 24) = v2;
  return v2;
}

double sub_100DB3A74(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB3810(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB3AC0()
{
  return 1;
}

_QWORD *sub_100DB3AC8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SvPositionAtTime");
}

double sub_100DB3AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 10185);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    sub_1002E60A0(a1 + 24, *(_DWORD *)(a1 + 32) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 24) + 8 * *(int *)(a1 + 32)), *(const void **)(a2 + 24), 8 * *(int *)(a2 + 32));
    *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 32);
  }
  v7 = *(_DWORD *)(a2 + 48);
  if (v7)
  {
    sub_1002E60A0(a1 + 40, *(_DWORD *)(a1 + 48) + v7);
    memcpy((void *)(*(_QWORD *)(a1 + 40) + 8 * *(int *)(a1 + 48)), *(const void **)(a2 + 40), 8 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  v8 = *(_DWORD *)(a2 + 64);
  if (v8)
  {
    sub_1002E60A0(a1 + 56, *(_DWORD *)(a1 + 64) + v8);
    memcpy((void *)(*(_QWORD *)(a1 + 56) + 8 * *(int *)(a1 + 64)), *(const void **)(a2 + 56), 8 * *(int *)(a2 + 64));
    *(_DWORD *)(a1 + 64) += *(_DWORD *)(a2 + 64);
  }
  LOBYTE(v9) = *(_BYTE *)(a2 + 76);
  if ((_BYTE)v9)
  {
    if ((*(_BYTE *)(a2 + 76) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 76) |= 1u;
      *(double *)(a1 + 8) = result;
      v9 = *(_DWORD *)(a2 + 76);
    }
    if ((v9 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 76) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100DB3C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB3C64(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_102185BF8;
  if (*((_QWORD *)this + 7))
    operator delete[]();
  if (*((_QWORD *)this + 5))
    operator delete[]();
  if (*((_QWORD *)this + 3))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100DB3CE8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100DB3C64(a1);
  operator delete();
}

void sub_100DB3D0C()
{
  operator new();
}

uint64_t sub_100DB3D58(uint64_t result)
{
  if (*(_BYTE *)(result + 76))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_100DB3D78(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  signed int v18;
  int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  signed int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  signed int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51[6];

  v5 = a1 + 56;
  v48 = a1 + 24;
  v49 = a1 + 40;
LABEL_2:
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_31;
        v51[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v51) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v51[0];
        *(_DWORD *)(a1 + 76) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
        goto LABEL_15;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_31;
LABEL_15:
        v51[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v51) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v51[0];
        *(_DWORD *)(a1 + 76) |= 2u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 33)
          goto LABEL_34;
        continue;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_35;
        if (v8 != 2)
          goto LABEL_31;
        result = sub_1002C6D44(this, v48);
        if (!(_DWORD)result)
          return result;
        while (2)
        {
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2))
          {
            v23 = *v10;
            if (v23 == 33)
            {
LABEL_34:
              *((_QWORD *)this + 1) = v10 + 1;
LABEL_35:
              v51[0] = 0;
              if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v51) & 1) == 0)
                return 0;
              v12 = v51[0];
              v13 = *(_DWORD *)(a1 + 32);
              if (v13 == *(_DWORD *)(a1 + 36))
              {
                sub_1002E60A0(v48, v13 + 1);
                v13 = *(_DWORD *)(a1 + 32);
              }
              v14 = *(_QWORD *)(a1 + 24);
              v15 = v13 + 1;
              *(_DWORD *)(a1 + 32) = v13 + 1;
              *(_QWORD *)(v14 + 8 * v13) = v12;
              v16 = *((_QWORD *)this + 1);
              v17 = *((_DWORD *)this + 4) - v16;
              if (v17 >= 1)
              {
                v18 = v17 / 9u;
                v19 = v18 >= *(_DWORD *)(a1 + 36) - v15 ? *(_DWORD *)(a1 + 36) - v15 : v18;
                if (v19 >= 1)
                {
                  for (i = 0; i != v19; ++i)
                  {
                    if (*(_BYTE *)v16 != 33)
                      goto LABEL_49;
                    v21 = *(_QWORD *)(v16 + 1);
                    if (v15 >= *(_DWORD *)(a1 + 36))
                    {
                      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v51, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                      v22 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v51, "CHECK failed: (size()) < (Capacity()): ");
                      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v50, v22);
                      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v51);
                      v15 = *(_DWORD *)(a1 + 32);
                      v14 = *(_QWORD *)(a1 + 24);
                    }
                    *(_DWORD *)(a1 + 32) = v15 + 1;
                    *(_QWORD *)(v14 + 8 * v15) = v21;
                    v16 += 9;
                    ++v15;
                  }
                  i = v19;
LABEL_49:
                  if (i)
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * i);
                  continue;
                }
              }
              continue;
            }
            if (v23 == 41)
            {
              do
              {
                *((_QWORD *)this + 1) = v10 + 1;
LABEL_55:
                v51[0] = 0;
                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v51) & 1) == 0)return 0;
                v24 = v51[0];
                v25 = *(_DWORD *)(a1 + 48);
                if (v25 == *(_DWORD *)(a1 + 52))
                {
                  sub_1002E60A0(v49, v25 + 1);
                  v25 = *(_DWORD *)(a1 + 48);
                }
                v26 = *(_QWORD *)(a1 + 40);
                v27 = v25 + 1;
                *(_DWORD *)(a1 + 48) = v25 + 1;
                *(_QWORD *)(v26 + 8 * v25) = v24;
                v28 = *((_QWORD *)this + 1);
                v29 = *((_DWORD *)this + 4) - v28;
                if (v29 >= 1)
                {
                  v30 = v29 / 9u;
                  v31 = v30 >= *(_DWORD *)(a1 + 52) - v27 ? *(_DWORD *)(a1 + 52) - v27 : v30;
                  if (v31 >= 1)
                  {
                    v32 = 0;
                    while (*(_BYTE *)v28 == 41)
                    {
                      v33 = *(_QWORD *)(v28 + 1);
                      if (v27 >= *(_DWORD *)(a1 + 52))
                      {
                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v51, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                        v34 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v51, "CHECK failed: (size()) < (Capacity()): ");
                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v50, v34);
                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v51);
                        v27 = *(_DWORD *)(a1 + 48);
                        v26 = *(_QWORD *)(a1 + 40);
                      }
                      *(_DWORD *)(a1 + 48) = v27 + 1;
                      *(_QWORD *)(v26 + 8 * v27) = v33;
                      ++v32;
                      v28 += 9;
                      ++v27;
                      if (v31 == v32)
                      {
                        v32 = v31;
                        break;
                      }
                    }
                    if (v32)
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v32);
                  }
                }
LABEL_71:
                v10 = (_BYTE *)*((_QWORD *)this + 1);
                if ((unint64_t)v10 >= *((_QWORD *)this + 2))
                  goto LABEL_2;
                v35 = *v10;
              }
              while (v35 == 41);
              if (v35 == 49)
                goto LABEL_74;
            }
          }
          goto LABEL_2;
        }
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_55;
        if (v8 != 2)
          goto LABEL_31;
        result = sub_1002C6D44(this, v49);
        if (!(_DWORD)result)
          return result;
        goto LABEL_71;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_75;
        if (v8 == 2)
        {
          result = sub_1002C6D44(this, v5);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v10 = (_BYTE *)*((_QWORD *)this + 1);
            v47 = (_BYTE *)*((_QWORD *)this + 2);
            if (v10 >= v47 || *v10 != 49)
              break;
LABEL_74:
            *((_QWORD *)this + 1) = v10 + 1;
LABEL_75:
            v51[0] = 0;
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v51) & 1) == 0)
              return 0;
            v36 = v51[0];
            v37 = *(_DWORD *)(a1 + 64);
            if (v37 == *(_DWORD *)(a1 + 68))
            {
              sub_1002E60A0(v5, v37 + 1);
              v37 = *(_DWORD *)(a1 + 64);
            }
            v38 = *(_QWORD *)(a1 + 56);
            v39 = v37 + 1;
            *(_DWORD *)(a1 + 64) = v37 + 1;
            *(_QWORD *)(v38 + 8 * v37) = v36;
            v40 = *((_QWORD *)this + 1);
            v41 = *((_DWORD *)this + 4) - v40;
            if (v41 >= 1)
            {
              v42 = v41 / 9u;
              v43 = v42 >= *(_DWORD *)(a1 + 68) - v39 ? *(_DWORD *)(a1 + 68) - v39 : v42;
              if (v43 >= 1)
              {
                v44 = 0;
                while (*(_BYTE *)v40 == 49)
                {
                  v45 = *(_QWORD *)(v40 + 1);
                  if (v39 >= *(_DWORD *)(a1 + 68))
                  {
                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v51, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                    v46 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v51, "CHECK failed: (size()) < (Capacity()): ");
                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v50, v46);
                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v51);
                    v39 = *(_DWORD *)(a1 + 64);
                    v38 = *(_QWORD *)(a1 + 56);
                  }
                  *(_DWORD *)(a1 + 64) = v39 + 1;
                  *(_QWORD *)(v38 + 8 * v39) = v45;
                  ++v44;
                  v40 += 9;
                  ++v39;
                  if (v43 == v44)
                  {
                    v44 = v43;
                    break;
                  }
                }
                if (v44)
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v44);
              }
            }
          }
          if (v10 == v47 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
LABEL_31:
        if (v8 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      default:
        v8 = TagFallback & 7;
        goto LABEL_31;
    }
  }
}

void sub_100DB436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DB4394(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  v5 = *(_DWORD *)(result + 76);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 76);
  }
  if ((v5 & 2) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 16), a3);
  if (*(int *)(v4 + 32) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(*(_QWORD *)(v4 + 24) + 8 * v6++), a3);
    while (v6 < *(int *)(v4 + 32));
  }
  if (*(int *)(v4 + 48) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(*(_QWORD *)(v4 + 40) + 8 * v7++), a3);
    while (v7 < *(int *)(v4 + 48));
  }
  if (*(int *)(v4 + 64) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(*(_QWORD *)(v4 + 56) + 8 * v8++), a3);
    while (v8 < *(int *)(v4 + 64));
  }
  return result;
}

uint64_t sub_100DB4488(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(a1 + 76);
  v2 = (v1 << 31 >> 31) & 9;
  if ((v1 & 2) != 0)
    v2 += 9;
  if (*(_BYTE *)(a1 + 76))
    v3 = v2;
  else
    v3 = 0;
  v4 = (9 * (*(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 64)) + v3);
  *(_DWORD *)(a1 + 72) = v4;
  return v4;
}

double sub_100DB44D4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB3AD8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB4520()
{
  return 1;
}

_QWORD *sub_100DB4528@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.PolynomialOrbit");
}

void sub_100DB4538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BYTE v40[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v40, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 11090);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v40, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v39, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v40);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 36);
      v8 = *(int *)(a1 + 32);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v7 + 1);
          v7 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v8 + 1;
      sub_100DB3810(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 32));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 104), *(_DWORD *)(a2 + 112) + *(_DWORD *)(a1 + 112));
  if (*(int *)(a2 + 112) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 8 * v10);
      v12 = *(_DWORD *)(a1 + 116);
      v13 = *(int *)(a1 + 112);
      if ((int)v13 >= v12)
      {
        if (v12 == *(_DWORD *)(a1 + 120))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 104), v12 + 1);
          v12 = *(_DWORD *)(a1 + 116);
        }
        *(_DWORD *)(a1 + 116) = v12 + 1;
        operator new();
      }
      v14 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 112) = v13 + 1;
      sub_100DB3490(*(_QWORD *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *(int *)(a2 + 112));
  }
  v15 = *(_DWORD *)(a2 + 172);
  if (!(_BYTE)v15)
    goto LABEL_28;
  if ((v15 & 1) != 0)
  {
    *(_DWORD *)(a1 + 172) |= 1u;
    v32 = *(_QWORD *)(a1 + 8);
    if (!v32)
      operator new();
    v33 = *(_QWORD *)(a2 + 8);
    if (!v33)
      v33 = *(_QWORD *)(qword_102311688 + 8);
    sub_100DA6E80(v32, v33);
    v15 = *(_DWORD *)(a2 + 172);
    if ((v15 & 2) == 0)
    {
LABEL_22:
      if ((v15 & 4) == 0)
        goto LABEL_23;
      goto LABEL_80;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_22;
  }
  v34 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 172) |= 2u;
  *(_QWORD *)(a1 + 16) = v34;
  v15 = *(_DWORD *)(a2 + 172);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_82;
  }
LABEL_80:
  v35 = *(_DWORD *)(a2 + 56);
  if (v35 >= 7)
    sub_10192A790();
  *(_DWORD *)(a1 + 172) |= 4u;
  *(_DWORD *)(a1 + 56) = v35;
  v15 = *(_DWORD *)(a2 + 172);
  if ((v15 & 0x10) == 0)
  {
LABEL_24:
    if ((v15 & 0x20) == 0)
      goto LABEL_25;
LABEL_83:
    v37 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 172) |= 0x20u;
    *(_QWORD *)(a1 + 64) = v37;
    v15 = *(_DWORD *)(a2 + 172);
    if ((v15 & 0x40) == 0)
    {
LABEL_26:
      if ((v15 & 0x80) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
    goto LABEL_84;
  }
LABEL_82:
  v36 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 172) |= 0x10u;
  *(_QWORD *)(a1 + 48) = v36;
  v15 = *(_DWORD *)(a2 + 172);
  if ((v15 & 0x20) != 0)
    goto LABEL_83;
LABEL_25:
  if ((v15 & 0x40) == 0)
    goto LABEL_26;
LABEL_84:
  v38 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 172) |= 0x40u;
  *(_QWORD *)(a1 + 72) = v38;
  v15 = *(_DWORD *)(a2 + 172);
  if ((v15 & 0x80) != 0)
  {
LABEL_27:
    v16 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 172) |= 0x80u;
    *(_DWORD *)(a1 + 60) = v16;
    v15 = *(_DWORD *)(a2 + 172);
  }
LABEL_28:
  if ((v15 & 0xFF00) != 0)
  {
    if ((v15 & 0x100) != 0)
    {
      v17 = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a1 + 172) |= 0x100u;
      *(_DWORD *)(a1 + 80) = v17;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x200) != 0)
    {
      v18 = *(_DWORD *)(a2 + 84);
      if (v18 >= 5)
        sub_10192A768();
      *(_DWORD *)(a1 + 172) |= 0x200u;
      *(_DWORD *)(a1 + 84) = v18;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x400) != 0)
    {
      v19 = *(_DWORD *)(a2 + 88);
      if (v19 >= 5)
        sub_10192A740();
      *(_DWORD *)(a1 + 172) |= 0x400u;
      *(_DWORD *)(a1 + 88) = v19;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x800) != 0)
    {
      v20 = *(_DWORD *)(a2 + 92);
      if (v20 >= 5)
        sub_10192A718();
      *(_DWORD *)(a1 + 172) |= 0x800u;
      *(_DWORD *)(a1 + 92) = v20;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x1000) != 0)
    {
      v21 = *(_DWORD *)(a2 + 96);
      if (v21 >= 5)
        sub_10192A6F0();
      *(_DWORD *)(a1 + 172) |= 0x1000u;
      *(_DWORD *)(a1 + 96) = v21;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x2000) != 0)
    {
      v22 = *(_DWORD *)(a2 + 100);
      if (v22 >= 5)
        sub_10192A6C8();
      *(_DWORD *)(a1 + 172) |= 0x2000u;
      *(_DWORD *)(a1 + 100) = v22;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x8000) != 0)
    {
      *(_DWORD *)(a1 + 172) |= 0x8000u;
      v23 = *(_QWORD *)(a1 + 128);
      if (!v23)
        operator new();
      v24 = *(_QWORD *)(a2 + 128);
      if (!v24)
        v24 = *(_QWORD *)(qword_102311688 + 128);
      sub_100DB3AD8(v23, v24);
      v15 = *(_DWORD *)(a2 + 172);
    }
  }
  if ((v15 & 0xFF0000) != 0)
  {
    if ((v15 & 0x10000) != 0)
    {
      v25 = *(_DWORD *)(a2 + 136);
      if (v25 >= 5)
        sub_10192A6A0();
      *(_DWORD *)(a1 + 172) |= 0x10000u;
      *(_DWORD *)(a1 + 136) = v25;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x20000) != 0)
    {
      v26 = *(_DWORD *)(a2 + 140);
      if (v26 >= 5)
        sub_10192A678();
      *(_DWORD *)(a1 + 172) |= 0x20000u;
      *(_DWORD *)(a1 + 140) = v26;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x40000) != 0)
    {
      v27 = *(_DWORD *)(a2 + 144);
      if (v27 >= 5)
        sub_10192A650();
      *(_DWORD *)(a1 + 172) |= 0x40000u;
      *(_DWORD *)(a1 + 144) = v27;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x80000) != 0)
    {
      v28 = *(_DWORD *)(a2 + 148);
      if (v28 >= 5)
        sub_10192A628();
      *(_DWORD *)(a1 + 172) |= 0x80000u;
      *(_DWORD *)(a1 + 148) = v28;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x100000) != 0)
    {
      v29 = *(_DWORD *)(a2 + 160);
      if (v29 >= 5)
        sub_10192A600();
      *(_DWORD *)(a1 + 172) |= 0x100000u;
      *(_DWORD *)(a1 + 160) = v29;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x200000) != 0)
    {
      v30 = *(_QWORD *)(a2 + 152);
      *(_DWORD *)(a1 + 172) |= 0x200000u;
      *(_QWORD *)(a1 + 152) = v30;
      v15 = *(_DWORD *)(a2 + 172);
    }
    if ((v15 & 0x400000) != 0)
    {
      v31 = *(_DWORD *)(a2 + 164);
      if (v31 >= 4)
        sub_10192A5D8();
      *(_DWORD *)(a1 + 172) |= 0x400000u;
      *(_DWORD *)(a1 + 164) = v31;
    }
  }
}

void sub_100DB4B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB4B24()
{
  operator new();
}

uint64_t sub_100DB4B7C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_DWORD *)(result + 172);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DA6FD0(result);
        v2 = *(_DWORD *)(v1 + 172);
      }
    }
    *(_QWORD *)(v1 + 16) = 0;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    *(_QWORD *)(v1 + 96) = 0;
    if ((v2 & 0x8000) != 0)
    {
      v3 = *(_QWORD *)(v1 + 128);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 76))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 76) = 0;
        v2 = *(_DWORD *)(v1 + 172);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_OWORD *)(v1 + 152) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(int *)(v1 + 112) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 104) + 8 * v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 112));
  }
  *(_DWORD *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 172) = 0;
  return result;
}

uint64_t sub_100DB4C88(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_DWORD *)(result + 172);
  if ((v6 & 1) != 0)
  {
    v11 = *(_QWORD *)(result + 8);
    if (!v11)
      v11 = *(_QWORD *)(qword_102311688 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v11, a2, a4);
    v6 = *(_DWORD *)(v5 + 172);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 172) & 4) != 0)
LABEL_4:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 56), (int)a2, a4);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 32));
  }
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x10) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 48), a3);
    v8 = *(_DWORD *)(v5 + 172);
    if ((v8 & 0x20) == 0)
    {
LABEL_10:
      if ((v8 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_10;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 64), a3);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x40) == 0)
  {
LABEL_11:
    if ((v8 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(double *)(v5 + 72), a3);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x80) == 0)
  {
LABEL_12:
    if ((v8 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(float *)(v5 + 60), a3);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (int)a2, *(float *)(v5 + 80), a3);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x200) == 0)
  {
LABEL_14:
    if ((v8 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 84), (int)a2, a4);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x400) == 0)
  {
LABEL_15:
    if ((v8 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 88), (int)a2, a4);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x800) == 0)
  {
LABEL_16:
    if ((v8 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 92), (int)a2, a4);
  v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x1000) == 0)
  {
LABEL_17:
    if ((v8 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_44:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 96), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 172) & 0x2000) != 0)
LABEL_18:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(v5 + 100), (int)a2, a4);
LABEL_19:
  if (*(int *)(v5 + 112) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(_QWORD *)(*(_QWORD *)(v5 + 104) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 112));
  }
  v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x8000) != 0)
  {
    v12 = *(_QWORD *)(v5 + 128);
    if (!v12)
      v12 = *(_QWORD *)(qword_102311688 + 128);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v12, a2, a4);
    v10 = *(_DWORD *)(v5 + 172);
    if ((v10 & 0x10000) == 0)
    {
LABEL_24:
      if ((v10 & 0x20000) == 0)
        goto LABEL_25;
      goto LABEL_50;
    }
  }
  else if ((v10 & 0x10000) == 0)
  {
    goto LABEL_24;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(_DWORD *)(v5 + 136), (int)a2, a4);
  v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x20000) == 0)
  {
LABEL_25:
    if ((v10 & 0x40000) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(_DWORD *)(v5 + 140), (int)a2, a4);
  v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x40000) == 0)
  {
LABEL_26:
    if ((v10 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(_DWORD *)(v5 + 144), (int)a2, a4);
  v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x80000) == 0)
  {
LABEL_27:
    if ((v10 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(_DWORD *)(v5 + 148), (int)a2, a4);
  v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x100000) == 0)
  {
LABEL_28:
    if ((v10 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_DWORD *)(v5 + 160), (int)a2, a4);
  v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x200000) == 0)
  {
LABEL_29:
    if ((v10 & 0x400000) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, *(_DWORD *)(v5 + 164), (int)a2, a4);
  }
LABEL_54:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, (int)a2, *(double *)(v5 + 152), a3);
  if ((*(_DWORD *)(v5 + 172) & 0x400000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, *(_DWORD *)(v5 + 164), (int)a2, a4);
  return result;
}

uint64_t sub_100DB4F8C(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  uint64_t v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v49;
  int v50;
  int v51;

  v3 = *(_DWORD *)(a1 + 172);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        v6 = *(_QWORD *)(qword_102311688 + 8);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA7078(v6, a2);
      v8 = (int)v7;
      if (v7 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      else
        v9 = 1;
      v4 = v8 + v9 + 1;
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v10 = v4 + 9;
    else
      v10 = v4;
    if ((v3 & 4) != 0)
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v3 = *(_DWORD *)(a1 + 172);
      }
      else
      {
        v12 = 1;
      }
      v10 += v12 + 1;
    }
    v13 = v10 + 9;
    if ((v3 & 0x10) == 0)
      v13 = v10;
    if ((v3 & 0x20) != 0)
      v13 += 9;
    if ((v3 & 0x40) != 0)
      v13 += 9;
    if ((v3 & 0x80) != 0)
      v5 = v13 + 5;
    else
      v5 = v13;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
      v5 += 5;
    if ((v3 & 0x200) != 0)
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 84);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 10;
      }
      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
        v3 = *(_DWORD *)(a1 + 172);
      }
      else
      {
        v15 = 1;
      }
      v5 += v15 + 1;
      if ((v3 & 0x400) == 0)
      {
LABEL_35:
        if ((v3 & 0x800) == 0)
          goto LABEL_36;
        goto LABEL_52;
      }
    }
    else if ((v3 & 0x400) == 0)
    {
      goto LABEL_35;
    }
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 88);
    if ((v16 & 0x80000000) != 0)
    {
      v17 = 10;
    }
    else if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v17 = 1;
    }
    v5 += v17 + 1;
    if ((v3 & 0x800) == 0)
    {
LABEL_36:
      if ((v3 & 0x1000) == 0)
        goto LABEL_37;
      goto LABEL_58;
    }
LABEL_52:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 92);
    if ((v18 & 0x80000000) != 0)
    {
      v19 = 10;
    }
    else if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v19 = 1;
    }
    v5 += v19 + 1;
    if ((v3 & 0x1000) == 0)
    {
LABEL_37:
      if ((v3 & 0x2000) == 0)
        goto LABEL_38;
      goto LABEL_64;
    }
LABEL_58:
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 96);
    if ((v20 & 0x80000000) != 0)
    {
      v21 = 10;
    }
    else if (v20 >= 0x80)
    {
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v21 = 1;
    }
    v5 += v21 + 1;
    if ((v3 & 0x2000) == 0)
    {
LABEL_38:
      if ((v3 & 0x8000) == 0)
        goto LABEL_76;
LABEL_70:
      v24 = *(_QWORD *)(a1 + 128);
      if (!v24)
        v24 = *(_QWORD *)(qword_102311688 + 128);
      v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB4488(v24);
      v26 = (int)v25;
      if (v25 >= 0x80)
        v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
      else
        v27 = 1;
      v5 += v26 + v27 + 2;
      v3 = *(_DWORD *)(a1 + 172);
      goto LABEL_76;
    }
LABEL_64:
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 100);
    if ((v22 & 0x80000000) != 0)
    {
      v23 = 10;
    }
    else if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v23 = 1;
    }
    v5 += v23 + 1;
    if ((v3 & 0x8000) == 0)
      goto LABEL_76;
    goto LABEL_70;
  }
LABEL_76:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_122;
  if ((v3 & 0x10000) != 0)
  {
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 136);
    if ((v28 & 0x80000000) != 0)
    {
      v29 = 10;
    }
    else if (v28 >= 0x80)
    {
      v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v29 = 1;
    }
    v5 += v29 + 2;
    if ((v3 & 0x20000) == 0)
    {
LABEL_79:
      if ((v3 & 0x40000) == 0)
        goto LABEL_80;
      goto LABEL_95;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_79;
  }
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 140);
  if ((v30 & 0x80000000) != 0)
  {
    v31 = 10;
  }
  else if (v30 >= 0x80)
  {
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    v3 = *(_DWORD *)(a1 + 172);
  }
  else
  {
    v31 = 1;
  }
  v5 += v31 + 2;
  if ((v3 & 0x40000) == 0)
  {
LABEL_80:
    if ((v3 & 0x80000) == 0)
      goto LABEL_81;
LABEL_101:
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 148);
    if ((v34 & 0x80000000) != 0)
    {
      v35 = 12;
    }
    else if (v34 >= 0x80)
    {
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2) + 2;
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v35 = 3;
    }
    v5 += v35;
    if ((v3 & 0x100000) == 0)
      goto LABEL_113;
    goto LABEL_107;
  }
LABEL_95:
  v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 144);
  if ((v32 & 0x80000000) != 0)
  {
    v33 = 12;
  }
  else if (v32 >= 0x80)
  {
    v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2) + 2;
    v3 = *(_DWORD *)(a1 + 172);
  }
  else
  {
    v33 = 3;
  }
  v5 += v33;
  if ((v3 & 0x80000) != 0)
    goto LABEL_101;
LABEL_81:
  if ((v3 & 0x100000) != 0)
  {
LABEL_107:
    v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 160);
    if ((v36 & 0x80000000) != 0)
    {
      v37 = 12;
    }
    else if (v36 >= 0x80)
    {
      v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2) + 2;
      v3 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v37 = 3;
    }
    v5 += v37;
  }
LABEL_113:
  if ((v3 & 0x200000) != 0)
    v5 += 10;
  if ((v3 & 0x400000) != 0)
  {
    v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 164);
    if ((v38 & 0x80000000) != 0)
    {
      v39 = 12;
    }
    else if (v38 >= 0x80)
    {
      v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2) + 2;
    }
    else
    {
      v39 = 3;
    }
    v5 += v39;
  }
LABEL_122:
  v40 = *(_DWORD *)(a1 + 32);
  v41 = v40 + v5;
  if (v40 >= 1)
  {
    v42 = 0;
    do
    {
      v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB39F8(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v42));
      v44 = (int)v43;
      if (v43 >= 0x80)
        v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43, a2);
      else
        v45 = 1;
      v41 += v44 + v45;
      ++v42;
    }
    while (v42 < *(int *)(a1 + 32));
  }
  v46 = *(_DWORD *)(a1 + 112);
  v47 = (v46 + v41);
  if (v46 >= 1)
  {
    v48 = 0;
    do
    {
      v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB36EC(*(_QWORD *)(*(_QWORD *)(a1 + 104)+ 8 * v48), a2);
      v50 = (int)v49;
      if (v49 >= 0x80)
        v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49, a2);
      else
        v51 = 1;
      v47 = (v50 + v47 + v51);
      ++v48;
    }
    while (v48 < *(int *)(a1 + 112));
  }
  *(_DWORD *)(a1 + 168) = v47;
  return v47;
}

void sub_100DB5404(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB4538(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB5450()
{
  return 1;
}

_QWORD *sub_100DB5458@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SvInfo");
}

float sub_100DB5468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 11435);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if (!(_BYTE)v6)
    return *(float *)&v5;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 16);
    if (v7 >= 0xD)
      sub_10192A7B8();
    *(_DWORD *)(a1 + 32) |= 1u;
    *(_DWORD *)(a1 + 16) = v7;
    v6 = *(_DWORD *)(a2 + 32);
  }
  if ((v6 & 2) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_9;
LABEL_13:
    LODWORD(v5) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 20) = v5;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0)
      return *(float *)&v5;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) |= 2u;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_DWORD *)(a2 + 32);
  if ((v6 & 4) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v6 & 8) != 0)
  {
LABEL_10:
    LODWORD(v5) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 24) = v5;
  }
  return *(float *)&v5;
}

void sub_100DB5560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB5578(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185CE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB5588()
{
  operator new();
}

uint64_t sub_100DB55C4(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DB55DC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(float *)(v5 + 24), a3);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(float *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100DB5670(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 32);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_100DB56FC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB5468(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB5748()
{
  return 1;
}

_QWORD *sub_100DB5750@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ReceiverBandCorrections");
}

void sub_100DB5760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 11645);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
}

void sub_100DB5808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB5820(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185D60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB5830(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185D60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DB5860()
{
  operator new();
}

uint64_t sub_100DB589C(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DB58B4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_24:
        v16 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 24) |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100DB5A5C(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), v4, a4);
  return result;
}

uint64_t sub_100DB5AB4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      if ((*(_DWORD *)(a1 + 24) & 2) == 0)
        goto LABEL_13;
    }
    else
    {
      v3 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_13;
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
    {
      v5 = 11;
    }
    else if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      v5 = 2;
    }
    v3 = (v5 + v3);
  }
  else
  {
    v3 = 0;
  }
LABEL_13:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_100DB5B38(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB5760(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB5B84()
{
  return 1;
}

_QWORD *sub_100DB5B8C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.LeapSecondChange");
}

void sub_100DB5B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 11889);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 5)
        sub_10192A7E0();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023116A0 + 16);
      sub_100DB5760(v8, v9);
    }
  }
}

void sub_100DB5CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB5CD0()
{
  operator new();
}

uint64_t sub_100DB5D08(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100DB5D3C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116A0 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100DB5DC4(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_16;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023116A0 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB5AB4(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_23:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100DB5EAC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB5B9C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB5EF8()
{
  return 1;
}

_QWORD *sub_100DB5F00@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.LeapSecondInfo");
}

double sub_100DB5F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 12151);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 44);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_12:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0)
      return result;
LABEL_8:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

void sub_100DB6000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB6018(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185E50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB6028()
{
  operator new();
}

uint64_t sub_100DB606C(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100DB6088(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(double *)(v5 + 32), a3);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(double *)(v5 + 32), a3);
  return result;
}

uint64_t sub_100DB611C(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

double sub_100DB618C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB5F10(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB61D8()
{
  return 1;
}

_QWORD *sub_100DB61E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GpsToUtcConversion");
}

double sub_100DB61F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 12408);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v7;
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_14;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 32) |= 2u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 8);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023116B0 + 8);
    sub_100DB5B9C(v8, v9);
    if ((*(_DWORD *)(a2 + 32) & 4) != 0)
    {
LABEL_14:
      *(_DWORD *)(a1 + 32) |= 4u;
      v10 = *(_QWORD *)(a1 + 16);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 16);
      if (!v11)
        v11 = *(_QWORD *)(qword_1023116B0 + 16);
      return sub_100DB5F10(v10, v11);
    }
  }
  return result;
}

void sub_100DB6354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB636C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185EC8;
  sub_10010CF00(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB639C()
{
  operator new();
}

uint64_t sub_100DB63D8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 32);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 24) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DB5D08(result);
        v2 = *(_DWORD *)(v1 + 32);
      }
    }
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 44))
        {
          *(_OWORD *)(v3 + 24) = 0u;
          *(_OWORD *)(v3 + 8) = 0u;
        }
        *(_DWORD *)(v3 + 44) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_100DB643C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116B0 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
  {
LABEL_9:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023116B0 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  }
  return result;
}

uint64_t sub_100DB64D4(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  unsigned int v12;
  int v13;
  int v14;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_16;
LABEL_10:
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023116B0 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB5DC4(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = (v4 + v8 + v9 + 1);
    v3 = *(_DWORD *)(a1 + 32);
    goto LABEL_16;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v5 >= 0x80)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 2) == 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  v4 = 2;
  if ((v3 & 2) != 0)
    goto LABEL_10;
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_1023116B0 + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB611C(v10, a2);
    v13 = (int)v11;
    if (v11 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, v12);
    else
      v14 = 1;
    v4 = (v4 + v13 + v14 + 1);
  }
LABEL_23:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

double sub_100DB65D0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB61F0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB661C()
{
  return 1;
}

_QWORD *sub_100DB6624@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GpsTimeInfo");
}

double sub_100DB6634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 12612);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100DB66DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB66F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185F40;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB6704()
{
  operator new();
}

uint64_t sub_100DB673C(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100DB6750(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  return result;
}

uint64_t sub_100DB67A8(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

double sub_100DB6800(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB6634(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB684C()
{
  return 1;
}

_QWORD *sub_100DB6854@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GlonassSubsecondConversion");
}

double sub_100DB6864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 12926);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if (!(_BYTE)v6)
    return result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 40) |= 1u;
    *(_DWORD *)(a1 + 8) = v7;
    v6 = *(_DWORD *)(a2 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 4) == 0)
        goto LABEL_7;
LABEL_12:
      v9 = *(_DWORD *)(a2 + 32);
      if (v9 >= 6)
        sub_10192A808();
      *(_DWORD *)(a1 + 40) |= 4u;
      *(_DWORD *)(a1 + 32) = v9;
      v6 = *(_DWORD *)(a2 + 40);
      if ((v6 & 8) == 0)
      {
LABEL_8:
        if ((v6 & 0x10) == 0)
          return result;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) == 0)
  {
    goto LABEL_6;
  }
  v8 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 40) |= 2u;
  *(_DWORD *)(a1 + 12) = v8;
  v6 = *(_DWORD *)(a2 + 40);
  if ((v6 & 4) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v6 & 8) == 0)
    goto LABEL_8;
LABEL_14:
  *(_DWORD *)(a1 + 40) |= 8u;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023116C0 + 16);
  result = sub_100DB6634(v10, v11);
  if ((*(_DWORD *)(a2 + 40) & 0x10) != 0)
  {
LABEL_19:
    *(_DWORD *)(a1 + 40) |= 0x10u;
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023116C0 + 24);
    return sub_100DB6634(v12, v13);
  }
  return result;
}

void sub_100DB6A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB6A20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185FB8;
  sub_10010CB6C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB6A50()
{
  operator new();
}

uint64_t sub_100DB6A94(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 40);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 28))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        v1 = *(_DWORD *)(result + 40);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 28))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100DB6AE8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 32), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    goto LABEL_13;
  }
LABEL_10:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116C0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
  {
LABEL_13:
    v8 = *(_QWORD *)(v5 + 24);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023116C0 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, a2, a4);
  }
  return result;
}

uint64_t sub_100DB6BB8(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  unsigned int v16;
  int v17;
  int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_36;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0)
        goto LABEL_36;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023116C0 + 16);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB67A8(v10, a2);
  v12 = (int)v11;
  if (v11 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
  if ((*(_DWORD *)(a1 + 40) & 0x10) != 0)
  {
LABEL_30:
    v14 = *(_QWORD *)(a1 + 24);
    if (!v14)
      v14 = *(_QWORD *)(qword_1023116C0 + 24);
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB67A8(v14, a2);
    v17 = (int)v15;
    if (v15 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
    else
      v18 = 1;
    v4 = (v4 + v17 + v18 + 1);
  }
LABEL_36:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

double sub_100DB6D1C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB6864(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB6D68()
{
  return 1;
}

_QWORD *sub_100DB6D70@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GlonassTimeInfo");
}

double sub_100DB6D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 13167);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100DB6E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB6E68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186030;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB6E78()
{
  operator new();
}

uint64_t sub_100DB6EB8(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100DB6ED0(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100DB6F48(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

double sub_100DB6FAC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB6D80(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB6FF8()
{
  return 1;
}

_QWORD *sub_100DB7000@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SubSecondConversion");
}

double sub_100DB7010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 13537);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 56);
  if (!(_BYTE)v6)
    return result;
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(_DWORD *)(a1 + 48) = v7;
    v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 4) == 0)
        goto LABEL_7;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 56) |= 2u;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023116D0 + 8);
  sub_100DB5B9C(v8, v9);
  v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
LABEL_22:
    *(_DWORD *)(a1 + 56) |= 8u;
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023116D0 + 24);
    result = sub_100DB6D80(v12, v13);
    v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0)
        return result;
      goto LABEL_32;
    }
    goto LABEL_27;
  }
LABEL_17:
  *(_DWORD *)(a1 + 56) |= 4u;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023116D0 + 16);
  result = sub_100DB6D80(v10, v11);
  v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 8) != 0)
    goto LABEL_22;
LABEL_8:
  if ((v6 & 0x10) == 0)
    goto LABEL_9;
LABEL_27:
  *(_DWORD *)(a1 + 56) |= 0x10u;
  v14 = *(_QWORD *)(a1 + 32);
  if (!v14)
    operator new();
  v15 = *(_QWORD *)(a2 + 32);
  if (!v15)
    v15 = *(_QWORD *)(qword_1023116D0 + 32);
  result = sub_100DB6D80(v14, v15);
  if ((*(_DWORD *)(a2 + 56) & 0x20) != 0)
  {
LABEL_32:
    *(_DWORD *)(a1 + 56) |= 0x20u;
    v16 = *(_QWORD *)(a1 + 40);
    if (!v16)
      operator new();
    v17 = *(_QWORD *)(a2 + 40);
    if (!v17)
      v17 = *(_QWORD *)(qword_1023116D0 + 40);
    return sub_100DB6D80(v16, v17);
  }
  return result;
}

void sub_100DB72B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB72CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021860A8;
  sub_10010CD50(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB72FC()
{
  operator new();
}

uint64_t sub_100DB7344(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 56);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 48) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DB5D08(result);
        v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 8) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      v5 = *(_QWORD *)(v1 + 32);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 36))
        {
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
        }
        *(_DWORD *)(v5 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      v6 = *(_QWORD *)(v1 + 40);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 36))
        {
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
        }
        *(_DWORD *)(v6 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t sub_100DB7410(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 48), a2, a4);
    v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116D0 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023116D0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023116D0 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    goto LABEL_21;
  }
LABEL_18:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023116D0 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  if ((*(_DWORD *)(v5 + 56) & 0x20) != 0)
  {
LABEL_21:
    v11 = *(_QWORD *)(v5 + 40);
    if (!v11)
      v11 = *(_QWORD *)(qword_1023116D0 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  }
  return result;
}

uint64_t sub_100DB752C(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  unsigned int v25;
  int v26;
  int v27;

  LOBYTE(v3) = *(_BYTE *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_45;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 56) & 2) == 0)
      goto LABEL_16;
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116D0 + 8);
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB5DC4(v7, a2);
  v9 = (int)v8;
  if (v8 >= 0x80)
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
  else
    v10 = 1;
  v4 = (v4 + v9 + v10 + 1);
  v3 = *(_DWORD *)(a1 + 56);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
      v11 = *(_QWORD *)(qword_1023116D0 + 16);
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v11, a2);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    else
      v14 = 1;
    v4 = (v4 + v13 + v14 + 1);
    v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_33;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (!v15)
    v15 = *(_QWORD *)(qword_1023116D0 + 24);
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v15, a2);
  v17 = (int)v16;
  if (v16 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
  else
    v18 = 1;
  v4 = (v4 + v17 + v18 + 1);
  v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_45;
    goto LABEL_39;
  }
LABEL_33:
  v19 = *(_QWORD *)(a1 + 32);
  if (!v19)
    v19 = *(_QWORD *)(qword_1023116D0 + 32);
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v19, a2);
  v21 = (int)v20;
  if (v20 >= 0x80)
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
  else
    v22 = 1;
  v4 = (v4 + v21 + v22 + 1);
  if ((*(_DWORD *)(a1 + 56) & 0x20) != 0)
  {
LABEL_39:
    v23 = *(_QWORD *)(a1 + 40);
    if (!v23)
      v23 = *(_QWORD *)(qword_1023116D0 + 40);
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v23, a2);
    v26 = (int)v24;
    if (v24 >= 0x80)
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, v25);
    else
      v27 = 1;
    v4 = (v4 + v26 + v27 + 1);
  }
LABEL_45:
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

double sub_100DB770C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB7010(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB7758()
{
  return 1;
}

_QWORD *sub_100DB7760@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.BeidouTimeInfo");
}

double sub_100DB7770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 13841);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if (!(_BYTE)v6)
    return result;
  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0)
      goto LABEL_6;
LABEL_10:
    *(_DWORD *)(a1 + 40) |= 2u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 8);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023116D8 + 8);
    sub_100DB5B9C(v8, v9);
    v6 = *(_DWORD *)(a2 + 40);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) |= 1u;
  *(_DWORD *)(a1 + 32) = v7;
  v6 = *(_DWORD *)(a2 + 40);
  if ((v6 & 2) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v6 & 4) == 0)
    goto LABEL_7;
LABEL_15:
  *(_DWORD *)(a1 + 40) |= 4u;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023116D8 + 16);
  result = sub_100DB6D80(v10, v11);
  if ((*(_DWORD *)(a2 + 40) & 8) != 0)
  {
LABEL_20:
    *(_DWORD *)(a1 + 40) |= 8u;
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023116D8 + 24);
    return sub_100DB6D80(v12, v13);
  }
  return result;
}

void sub_100DB793C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB7954(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186120;
  sub_10010CC3C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB7984()
{
  operator new();
}

uint64_t sub_100DB79C8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 40);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 32) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DB5D08(result);
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 8) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_100DB7A4C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116D8 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    goto LABEL_13;
  }
LABEL_10:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023116D8 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_13:
    v9 = *(_QWORD *)(v5 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023116D8 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return result;
}

uint64_t sub_100DB7B10(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  unsigned int v16;
  int v17;
  int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_1023116D8 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB5DC4(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *(_DWORD *)(a1 + 40);
LABEL_16:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_31;
    goto LABEL_25;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023116D8 + 16);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v10, a2);
  v12 = (int)v11;
  if (v11 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_25:
    v14 = *(_QWORD *)(a1 + 24);
    if (!v14)
      v14 = *(_QWORD *)(qword_1023116D8 + 24);
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v14, a2);
    v17 = (int)v15;
    if (v15 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
    else
      v18 = 1;
    v4 = (v4 + v17 + v18 + 1);
  }
LABEL_31:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

double sub_100DB7C5C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB7770(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB7CA8()
{
  return 1;
}

_QWORD *sub_100DB7CB0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GalileoTimeInfo");
}

void sub_100DB7CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 14059);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_1023116E0 + 8);
      sub_100DB6D80(v6, v7);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_100DB7DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB7DD0()
{
  operator new();
}

uint64_t sub_100DB7E0C(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DB7E40(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023116E0 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  return result;
}

uint64_t sub_100DB7EAC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = 0;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_1023116E0 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6F48(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 24) & 2) != 0)
  {
LABEL_12:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v3 = (v9 + v3);
  }
LABEL_16:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_100DB7F54(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB7CC0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB7FA0()
{
  return 1;
}

_QWORD *sub_100DB7FA8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.NavicTimeInfo");
}

void sub_100DB7FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 14394);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    *(_DWORD *)(a1 + 52) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023116E8 + 8);
    sub_100DB61F0(v6, v7);
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
LABEL_20:
      *(_DWORD *)(a1 + 52) |= 4u;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        v11 = *(_QWORD *)(qword_1023116E8 + 24);
      sub_100DB7010(v10, v11);
      v5 = *(_DWORD *)(a2 + 52);
      if ((v5 & 8) == 0)
      {
LABEL_8:
        if ((v5 & 0x10) == 0)
          return;
        goto LABEL_30;
      }
      goto LABEL_25;
    }
  }
  else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 52) |= 2u;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023116E8 + 16);
  sub_100DB6864(v8, v9);
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 4) != 0)
    goto LABEL_20;
LABEL_7:
  if ((v5 & 8) == 0)
    goto LABEL_8;
LABEL_25:
  *(_DWORD *)(a1 + 52) |= 8u;
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    operator new();
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_1023116E8 + 32);
  sub_100DB7770(v12, v13);
  if ((*(_DWORD *)(a2 + 52) & 0x10) != 0)
  {
LABEL_30:
    *(_DWORD *)(a1 + 52) |= 0x10u;
    v14 = *(_QWORD *)(a1 + 40);
    if (!v14)
      operator new();
    v15 = *(_QWORD *)(a2 + 40);
    if (!v15)
      v15 = *(_QWORD *)(qword_1023116E8 + 40);
    sub_100DB7CC0(v14, v15);
  }
}

void sub_100DB824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB8264(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186210;
  sub_10010CA30(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB8294()
{
  operator new();
}

uint64_t sub_100DB82D8(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 52);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 52) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DB63D8(result);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_100DB6A94(result);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 24);
      if (result)
      {
        result = sub_100DB7344(result);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_100DB79C8(result);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
        result = sub_100DB7E0C(result);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t sub_100DB8360(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023116E8 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023116E8 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_13:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023116E8 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    goto LABEL_19;
  }
LABEL_16:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023116E8 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
  {
LABEL_19:
    v11 = *(_QWORD *)(v5 + 40);
    if (!v11)
      v11 = *(_QWORD *)(qword_1023116E8 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  }
  return result;
}

uint64_t sub_100DB8460(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  unsigned int v23;
  int v24;
  int v25;

  LOBYTE(v3) = *(_BYTE *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_40;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_1023116E8 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB64D4(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023116E8 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB6BB8(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *(_DWORD *)(a1 + 52);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023116E8 + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB752C(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
    v3 = *(_DWORD *)(a1 + 52);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (!v17)
    v17 = *(_QWORD *)(qword_1023116E8 + 32);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB7B10(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  if ((*(_DWORD *)(a1 + 52) & 0x10) != 0)
  {
LABEL_34:
    v21 = *(_QWORD *)(a1 + 40);
    if (!v21)
      v21 = *(_QWORD *)(qword_1023116E8 + 40);
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB7EAC(v21, a2);
    v24 = (int)v22;
    if (v22 >= 0x80)
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, v23);
    else
      v25 = 1;
    v4 = (v4 + v24 + v25 + 1);
  }
LABEL_40:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

void sub_100DB8614(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB7FB8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB8660()
{
  return 1;
}

_QWORD *sub_100DB8668@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.TimeConversionInfo");
}

float sub_100DB8678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 14813);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  v6 = *(_DWORD *)(a2 + 52);
  if (!(_BYTE)v6)
    goto LABEL_13;
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(_QWORD *)(a1 + 8) = v7;
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 4) == 0)
        goto LABEL_7;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_6;
  }
  result = *(float *)(a2 + 16);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(float *)(a1 + 16) = result;
  v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = *(float *)(a2 + 20);
  *(_DWORD *)(a1 + 52) |= 4u;
  *(float *)(a1 + 20) = result;
  v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = *(float *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 8u;
  *(float *)(a1 + 24) = result;
  v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    result = *(float *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 0x20u;
    *(float *)(a1 + 32) = result;
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  result = *(float *)(a2 + 28);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  *(float *)(a1 + 28) = result;
  v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v6 & 0x40) == 0)
    goto LABEL_11;
LABEL_22:
  result = *(float *)(a2 + 36);
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(float *)(a1 + 36) = result;
  v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    result = *(float *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x80u;
    *(float *)(a1 + 40) = result;
    v6 = *(_DWORD *)(a2 + 52);
  }
LABEL_13:
  if ((v6 & 0x100) != 0)
  {
    result = *(float *)(a2 + 44);
    *(_DWORD *)(a1 + 52) |= 0x100u;
    *(float *)(a1 + 44) = result;
  }
  return result;
}

void sub_100DB8808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB8820(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186288;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB8830()
{
  operator new();
}

uint64_t sub_100DB8874(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 52);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
    *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_100DB88A4(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(float *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v4, *(float *)(v5 + 28), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v4, *(float *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v4, *(float *)(v5 + 36), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v4, *(float *)(v5 + 44), a3);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v4, *(float *)(v5 + 40), a3);
  if ((*(_DWORD *)(v5 + 52) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v4, *(float *)(v5 + 44), a3);
  return result;
}

uint64_t sub_100DB89C4(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 52);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 52);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      v4 += 5;
    if ((v3 & 0x10) != 0)
      v4 += 5;
    if ((v3 & 0x20) != 0)
      v4 += 5;
    if ((v3 & 0x40) != 0)
      v4 += 5;
    if ((v3 & 0x80) != 0)
      v4 += 5;
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 0x100) != 0)
    result = v4 + 5;
  else
    result = v4;
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

float sub_100DB8A74(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB8678(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB8AC0()
{
  return 1;
}

_QWORD *sub_100DB8AC8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.KlobucharModelParameters");
}

double sub_100DB8AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 15070);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100DB8BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB8BC0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186300;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB8BD0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186300;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DB8C00()
{
  operator new();
}

uint64_t sub_100DB8C40(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100DB8C58(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100DB8E1C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

uint64_t sub_100DB8E94(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100DB8ECC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB8AD8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB8F18()
{
  return 1;
}

_QWORD *sub_100DB8F20@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SfcfXyz");
}

double sub_100DB8F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 15360);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311700 + 8);
      sub_100DA6E80(v7, v8);
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 2) != 0)
    {
      v9 = *(_DWORD *)(a2 + 16);
      if (v9 >= 0xD)
        sub_10192A858();
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v9;
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 4) != 0)
    {
      v10 = *(_DWORD *)(a2 + 20);
      if (v10 >= 4)
        sub_10192A830();
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 20) = v10;
      v6 = *(_DWORD *)(a2 + 36);
    }
    if ((v6 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      v11 = *(_QWORD *)(a1 + 24);
      if (!v11)
        operator new();
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        v12 = *(_QWORD *)(qword_102311700 + 24);
      return sub_100DB8AD8(v11, v12);
    }
  }
  return result;
}

void sub_100DB90BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DB90D4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311700 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100DB9130(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186378;
  sub_100DB90D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB9160(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186378;
  sub_100DB90D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DB91A4()
{
  operator new();
}

uint64_t sub_100DB91E4(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 36);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DA6FD0(result);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    *(_QWORD *)(v1 + 16) = 0;
    if ((v2 & 8) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100DB9244(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t result;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        *(_DWORD *)(a1 + 36) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v35 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35))return 0;
        }
        else
        {
          v35 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
        if (!sub_1000F909C(v8, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v21 >= v10 || *v21 != 16)
          continue;
        v11 = v21 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_31;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_31:
        v35 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35);
          if (!(_DWORD)result)
            return result;
          v22 = v35;
        }
        else
        {
          v22 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v22 <= 0xC)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v22;
        }
        v24 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 >= v12 || *v24 != 24)
          continue;
        v13 = v24 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_41:
        v35 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35);
          if (!(_DWORD)result)
            return result;
          v25 = v35;
        }
        else
        {
          v25 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v25 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 4u;
          *(_DWORD *)(a1 + 20) = v25;
        }
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 34)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
LABEL_51:
        *(_DWORD *)(a1 + 36) |= 8u;
        v27 = *(_QWORD *)(a1 + 24);
        if (!v27)
          operator new();
        v35 = 0;
        v28 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35))return 0;
        }
        else
        {
          v35 = *v28;
          *((_QWORD *)this + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)this + 14);
        v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 < v30)
        {
          v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
          if (sub_100DB8C58(v27, this, v32))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
              v33 = *((_DWORD *)this + 14);
              v19 = __OFSUB__(v33, 1);
              v34 = v33 - 1;
              if (v34 < 0 == v19)
                *((_DWORD *)this + 14) = v34;
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_41;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        goto LABEL_51;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100DB9640(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311700 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_10:
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0)
        return result;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_10;
LABEL_4:
  if ((v6 & 8) == 0)
    return result;
LABEL_11:
  v8 = *(_QWORD *)(v5 + 24);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311700 + 24);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
}

uint64_t sub_100DB96F4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_36;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311700 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA7078(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 11;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v12 = 2;
    }
    v4 = (v12 + v4);
    if ((v3 & 8) == 0)
      goto LABEL_36;
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_36;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311700 + 24);
  v14 = *(unsigned __int8 *)(v13 + 36);
  if (*(_BYTE *)(v13 + 36))
  {
    v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0)
      v15 += 9;
    if ((v14 & 4) != 0)
      v14 = v15 + 9;
    else
      v14 = v15;
  }
  *(_DWORD *)(v13 + 32) = v14;
  v4 = (v4 + v14 + 2);
LABEL_36:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

double sub_100DB9838(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB8F30(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB9884()
{
  return 1;
}

_QWORD *sub_100DB988C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.AntennaPhaseCenterSvOffset");
}

double sub_100DB989C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 15595);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100DB996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB9984(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021863F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB9994()
{
  operator new();
}

uint64_t sub_100DB99D4(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100DB99EC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

uint64_t sub_100DB9A64(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100DB9A9C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB989C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB9AE8()
{
  return 1;
}

_QWORD *sub_100DB9AF0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ReceivedTimeStamp");
}

float sub_100DB9B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  _BYTE v32[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v32, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 16046);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v31, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 36);
      v8 = *(int *)(a1 + 32);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v7 + 1);
          v7 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v8 + 1;
      sub_100DB4538(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 32));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), *(_DWORD *)(a2 + 56) + *(_DWORD *)(a1 + 56));
  if (*(int *)(a2 + 56) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v10);
      v12 = *(_DWORD *)(a1 + 60);
      v13 = *(int *)(a1 + 56);
      if ((int)v13 >= v12)
      {
        if (v12 == *(_DWORD *)(a1 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), v12 + 1);
          v12 = *(_DWORD *)(a1 + 60);
        }
        *(_DWORD *)(a1 + 60) = v12 + 1;
        operator new();
      }
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 56) = v13 + 1;
      sub_100DB5468(*(_QWORD *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *(int *)(a2 + 56));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 104), *(_DWORD *)(a2 + 112) + *(_DWORD *)(a1 + 112));
  if (*(int *)(a2 + 112) >= 1)
  {
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 8 * v16);
      v18 = *(_DWORD *)(a1 + 116);
      v19 = *(int *)(a1 + 112);
      if ((int)v19 >= v18)
      {
        if (v18 == *(_DWORD *)(a1 + 120))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 104), v18 + 1);
          v18 = *(_DWORD *)(a1 + 116);
        }
        *(_DWORD *)(a1 + 116) = v18 + 1;
        operator new();
      }
      v20 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 112) = v19 + 1;
      v15 = sub_100DB8F30(*(_QWORD *)(v20 + 8 * v19), v17);
      ++v16;
    }
    while (v16 < *(int *)(a2 + 112));
  }
  LOBYTE(v21) = *(_BYTE *)(a2 + 132);
  if ((_BYTE)v21)
  {
    if ((*(_BYTE *)(a2 + 132) & 1) != 0)
    {
      *(_DWORD *)(a1 + 132) |= 1u;
      v22 = *(_QWORD *)(a1 + 8);
      if (!v22)
        operator new();
      v23 = *(_QWORD *)(a2 + 8);
      if (!v23)
        v23 = *(_QWORD *)(qword_102311710 + 8);
      v15 = sub_100DB989C(v22, v23);
      v21 = *(_DWORD *)(a2 + 132);
      if ((v21 & 2) == 0)
      {
LABEL_30:
        if ((v21 & 0x10) == 0)
          goto LABEL_31;
        goto LABEL_45;
      }
    }
    else if ((*(_BYTE *)(a2 + 132) & 2) == 0)
    {
      goto LABEL_30;
    }
    *(_DWORD *)(a1 + 132) |= 2u;
    v24 = *(_QWORD *)(a1 + 16);
    if (!v24)
      operator new();
    v25 = *(_QWORD *)(a2 + 16);
    if (!v25)
      v25 = *(_QWORD *)(qword_102311710 + 16);
    v15 = sub_100DB2DDC(v24, v25);
    v21 = *(_DWORD *)(a2 + 132);
    if ((v21 & 0x10) == 0)
    {
LABEL_31:
      if ((v21 & 0x20) == 0)
        goto LABEL_32;
      goto LABEL_50;
    }
LABEL_45:
    *(_DWORD *)(a1 + 132) |= 0x10u;
    v26 = *(_QWORD *)(a1 + 72);
    if (!v26)
      operator new();
    v27 = *(_QWORD *)(a2 + 72);
    if (!v27)
      v27 = *(_QWORD *)(qword_102311710 + 72);
    sub_100DB7FB8(v26, v27);
    v21 = *(_DWORD *)(a2 + 132);
    if ((v21 & 0x20) == 0)
    {
LABEL_32:
      if ((v21 & 0x40) == 0)
        goto LABEL_33;
      goto LABEL_51;
    }
LABEL_50:
    v15 = *(double *)(a2 + 80);
    *(_DWORD *)(a1 + 132) |= 0x20u;
    *(double *)(a1 + 80) = v15;
    v21 = *(_DWORD *)(a2 + 132);
    if ((v21 & 0x40) == 0)
    {
LABEL_33:
      if ((v21 & 0x80) == 0)
        return *(float *)&v15;
LABEL_52:
      *(_DWORD *)(a1 + 132) |= 0x80u;
      v28 = *(_QWORD *)(a1 + 96);
      if (!v28)
        operator new();
      v29 = *(_QWORD *)(a2 + 96);
      if (!v29)
        v29 = *(_QWORD *)(qword_102311710 + 96);
      *(float *)&v15 = sub_100DB8678(v28, v29);
      return *(float *)&v15;
    }
LABEL_51:
    v15 = *(double *)(a2 + 88);
    *(_DWORD *)(a1 + 132) |= 0x40u;
    *(double *)(a1 + 88) = v15;
    if ((*(_DWORD *)(a2 + 132) & 0x80) == 0)
      return *(float *)&v15;
    goto LABEL_52;
  }
  return *(float *)&v15;
}

void sub_100DBA008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DBA024(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311710;
  if (!qword_102311710)
  {
    sub_100DA4728(0, a2, a3, a4);
    return qword_102311710;
  }
  return result;
}

void sub_100DBA050()
{
  operator new();
}

uint64_t sub_100DBA0B0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 132);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 132) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(result + 132);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = sub_100DB300C(result);
        v2 = *(_DWORD *)(v1 + 132);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 72);
      if (result)
      {
        result = sub_100DB82D8(result);
        v2 = *(_DWORD *)(v1 + 132);
      }
    }
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    if ((v2 & 0x80) != 0)
    {
      v4 = *(_QWORD *)(v1 + 96);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 52);
        if ((_BYTE)v5)
        {
          *(_DWORD *)(v4 + 40) = 0;
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        if ((v5 & 0xFF00) != 0)
          *(_DWORD *)(v4 + 44) = 0;
        *(_DWORD *)(v4 + 52) = 0;
      }
    }
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(int *)(v1 + 56) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  if (*(int *)(v1 + 112) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v1 + 104) + 8 * v10);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      ++v10;
    }
    while (v10 < *(int *)(v1 + 112));
  }
  *(_DWORD *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 132) = 0;
  return result;
}

uint64_t sub_100DBA208(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 132);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311710 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 132);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311710 + 16);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    v10 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 56));
  }
  v11 = *(_DWORD *)(v5 + 132);
  if ((v11 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v5 + 72);
    if (!v12)
      v12 = *(_QWORD *)(qword_102311710 + 72);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v12, a2, a4);
    v11 = *(_DWORD *)(v5 + 132);
    if ((v11 & 0x20) == 0)
    {
LABEL_17:
      if ((v11 & 0x40) == 0)
        goto LABEL_18;
      goto LABEL_24;
    }
  }
  else if ((v11 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 80), a3);
  v11 = *(_DWORD *)(v5 + 132);
  if ((v11 & 0x40) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(double *)(v5 + 88), a3);
  if ((*(_DWORD *)(v5 + 132) & 0x80) == 0)
    goto LABEL_28;
LABEL_25:
  v13 = *(_QWORD *)(v5 + 96);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311710 + 96);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
LABEL_28:
  if (*(int *)(v5 + 112) >= 1)
  {
    v14 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(*(_QWORD *)(v5 + 104) + 8 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 112));
  }
  return result;
}

uint64_t sub_100DBA3AC(uint64_t a1, unint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;
  int v39;

  LOBYTE(v3) = *(_BYTE *)(a1 + 132);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_40;
  }
  if ((*(_BYTE *)(a1 + 132) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311710 + 8);
    v7 = *(unsigned __int8 *)(v6 + 36);
    if (*(_BYTE *)(v6 + 36))
    {
      v8 = (v7 << 31 >> 31) & 9;
      if ((v7 & 2) != 0)
        v8 += 9;
      if ((v7 & 4) != 0)
        v7 = v8 + 9;
      else
        v7 = v8;
    }
    *(_DWORD *)(v6 + 32) = v7;
    v4 = v7 + 2;
    v3 = *(_DWORD *)(a1 + 132);
    if ((v3 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = 0;
  if ((*(_BYTE *)(a1 + 132) & 2) != 0)
  {
LABEL_15:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311710 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB30FC(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 += v11 + v12 + 1;
    v3 = *(_DWORD *)(a1 + 132);
  }
LABEL_21:
  if ((v3 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(a1 + 72);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311710 + 72);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB8460(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 += v15 + v16 + 1;
    v3 = *(_DWORD *)(a1 + 132);
  }
  v17 = v4 + 9;
  if ((v3 & 0x20) == 0)
    v17 = v4;
  if ((v3 & 0x40) != 0)
    v5 = v17 + 9;
  else
    v5 = v17;
  if ((v3 & 0x80) != 0)
  {
    v18 = *(_QWORD *)(a1 + 96);
    if (!v18)
      v18 = *(_QWORD *)(qword_102311710 + 96);
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB89C4(v18, a2);
    v20 = (int)v19;
    if (v19 >= 0x80)
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
    else
      v21 = 1;
    v5 += v20 + v21 + 1;
  }
LABEL_40:
  v22 = *(_DWORD *)(a1 + 32);
  v23 = v22 + v5;
  if (v22 >= 1)
  {
    v24 = 0;
    do
    {
      v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB4F8C(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v24), a2);
      v26 = (int)v25;
      if (v25 >= 0x80)
        v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
      else
        v27 = 1;
      v23 += v26 + v27;
      ++v24;
    }
    while (v24 < *(int *)(a1 + 32));
  }
  v28 = *(_DWORD *)(a1 + 56);
  v29 = v28 + v23;
  if (v28 >= 1)
  {
    v30 = 0;
    do
    {
      v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB5670(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v30), a2);
      v32 = (int)v31;
      if (v31 >= 0x80)
        v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2);
      else
        v33 = 1;
      v29 += v32 + v33;
      ++v30;
    }
    while (v30 < *(int *)(a1 + 56));
  }
  v34 = *(_DWORD *)(a1 + 112);
  v35 = (v34 + v29);
  if (v34 >= 1)
  {
    v36 = 0;
    do
    {
      v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DB96F4(*(_QWORD *)(*(_QWORD *)(a1 + 104)+ 8 * v36), a2);
      v38 = (int)v37;
      if (v37 >= 0x80)
        v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2);
      else
        v39 = 1;
      v35 = (v38 + v35 + v39);
      ++v36;
    }
    while (v36 < *(int *)(a1 + 112));
  }
  *(_DWORD *)(a1 + 128) = v35;
  return v35;
}

float sub_100DBA62C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB9B00(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DBA678()
{
  return 1;
}

_QWORD *sub_100DBA680@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MeasurementReportCallbackContents");
}

uint64_t sub_100DBA690(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_100DBA698(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

void sub_100DBA6A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  double v6;
  _BOOL4 v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  NSObject *v12;
  int v13;
  double v14;
  uint64_t v15;
  int v16;
  double v17;
  uint64_t v18;
  char *v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BOOL4 v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _BOOL4 v50;

  v4 = a1 + 5092;
  sub_100131230((_DWORD *)a2, a1);
  if (*(_BYTE *)(v4 + 1356) && *(int *)(a1 + 6472) >= 1)
  {
    if (*(_BYTE *)(v4 + 1359))
    {
      v5 = *(_DWORD *)(a1 + 6440) - 1;
      v6 = *(double *)(a1 + 6456) - *(double *)v4;
      v7 = v6 < 300.0 && *(double *)(a1 + 6024) < *(double *)v4;
      v8 = sub_100182290(a1 + 5016);
      if (v5 < 2)
        v9 = v8;
      else
        v9 = 0;
      *(_BYTE *)(a2 + 6032) = 0;
      if (*(_BYTE *)(v4 + 940))
        v10 = 0;
      else
        v10 = v7;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v11 = v10 & v9;
      v12 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned __int8 *)(v4 + 940);
        v14 = *(double *)v4;
        v15 = *(_QWORD *)(a1 + 6024);
        *(_DWORD *)buf = 67241984;
        v36 = v11;
        v37 = 1026;
        v38 = v13;
        v39 = 1026;
        v40 = v7;
        v41 = 2050;
        v42 = v14;
        v43 = 2050;
        v44 = v15;
        v45 = 2050;
        v46 = v6;
        v47 = 1026;
        v48 = v9;
        v49 = 1026;
        v50 = v5 < 2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiTimer, reissue, %{public}d, force, %{public}d, time, %{public}d, %{public}.1f, %{public}.1f, %{public}.1f, place, %{public}d, %{public}d", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v16 = *(unsigned __int8 *)(v4 + 940);
        v17 = *(double *)v4;
        v18 = *(_QWORD *)(a1 + 6024);
        v20[0] = 67241984;
        v20[1] = v11;
        v21 = 1026;
        v22 = v16;
        v23 = 1026;
        v24 = v7;
        v25 = 2050;
        v26 = v17;
        v27 = 2050;
        v28 = v18;
        v29 = 2050;
        v30 = v6;
        v31 = 1026;
        v32 = v9;
        v33 = 1026;
        v34 = v5 < 2;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, reissue, %{public}d, force, %{public}d, time, %{public}d, %{public}.1f, %{public}.1f, %{public}.1f, place, %{public}d, %{public}d", v20, 62);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      *(_BYTE *)(a2 + 810) = v11;
    }
    else
    {
      *(_QWORD *)(a2 + 6232) = 0x4018000000000000;
    }
  }
}

void sub_100DBA9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DBA9C4(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  NSObject *v8;
  double v9;
  double v10;
  char *v11;
  int v12;
  double v13;
  uint8_t buf[4];
  double v15;

  v6 = (_BYTE *)(a1 + 6244);
  v7 = (_BYTE *)(a3 + 6032);
  sub_100131230((_DWORD *)a3, a1);
  *(_BYTE *)(a3 + 6451) = *a2 == 0;
  if (*v6)
  {
    *(_OWORD *)(a3 + 6256) = *(_OWORD *)(a1 + 6256);
    *(_OWORD *)(a3 + 6240) = *(_OWORD *)(a1 + 6240);
    *(_OWORD *)(a3 + 6288) = *(_OWORD *)(a1 + 6288);
    *(_OWORD *)(a3 + 6304) = *(_OWORD *)(a1 + 6304);
    *(_OWORD *)(a3 + 6320) = *(_OWORD *)(a1 + 6320);
    *(_OWORD *)(a3 + 6272) = *(_OWORD *)(a1 + 6272);
    *(_OWORD *)(a3 + 6329) = *(_OWORD *)(a1 + 6329);
    if (*(double *)(a3 + 6264) <= *(double *)(a3 + 6248))
    {
      *(_QWORD *)(a3 + 6264) = *(_QWORD *)(a1 + 6456);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v8 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(double *)(a3 + 6264) - *(double *)(a3 + 6248);
        *(_DWORD *)buf = 134349056;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@EmerTick, wifi, %{public}.1f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v10 = *(double *)(a3 + 6264) - *(double *)(a3 + 6248);
        v12 = 134349056;
        v13 = v10;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, wifi, %{public}.1f", &v12, 12);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Power &) const", "%s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
    }
  }
  if (v6[204])
  {
    *v7 = 0;
    *(_QWORD *)(a3 + 6232) = 0x4018000000000000;
  }
}

void sub_100DBAC38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DBAC50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  _BYTE v7[8];
  void *v8;
  char v9;
  char v10;
  _BYTE v11[8];
  void *__p;
  char v13;
  char v14;
  int v15;
  void *v16;
  char v17;
  char v18;
  __int16 v19;

  sub_100131230((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    sub_10031F08C(v7, a2);
    sub_100EFF320(v11, v7);
    sub_10031F08C(&v16, a2);
    v15 = 5;
    v6 = sub_100134FD4(&v15);
    sub_100029620(a3 + 3248, (uint64_t)v11, (uint64_t)v6);
    sub_100126D5C((uint64_t)&v15);
    if (v14 && v13 < 0)
      operator delete(__p);
    if (v10 && v9 < 0)
      operator delete(v8);
    sub_10031F08C(v11, a2);
    sub_100EFF320(&v15, v11);
    sub_1005C7FFC(a3 + 3248, (uint64_t)&v15);
    *(_WORD *)(a3 + 3344) = v19;
    if (v18 && v17 < 0)
      operator delete(v16);
    if (v14)
    {
      if (v13 < 0)
        operator delete(__p);
    }
  }
}

void sub_100DBADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100DBAE40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  _BYTE v7[8];
  void *v8;
  char v9;
  char v10;
  _BYTE v11[8];
  void *__p;
  char v13;
  char v14;
  int v15;
  void *v16;
  char v17;
  char v18;
  __int16 v19;

  sub_100131230((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    sub_10031F08C(v7, a2);
    sub_100EFF320(v11, v7);
    sub_10031F08C(&v16, a2);
    v15 = 6;
    v6 = sub_100134FD4(&v15);
    sub_100029620(a3 + 3248, (uint64_t)v11, (uint64_t)v6);
    sub_100126D5C((uint64_t)&v15);
    if (v14 && v13 < 0)
      operator delete(__p);
    if (v10 && v9 < 0)
      operator delete(v8);
    sub_10031F08C(v11, a2);
    sub_100EFF320(&v15, v11);
    sub_1005C7FFC(a3 + 3248, (uint64_t)&v15);
    *(_WORD *)(a3 + 3344) = v19;
    if (v18 && v17 < 0)
      operator delete(v16);
    if (v14)
    {
      if (v13 < 0)
        operator delete(__p);
    }
  }
}

void sub_100DBAF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100DBB030(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  _WORD v11[8];
  uint8_t buf[8];
  char v13;
  std::string v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  std::string __p[63];

  sub_100131230((_DWORD *)a2, a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WifiFlow, scanreply, warn, error", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v11[0] = 0;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiFlow, scanreply, warn, error", v11, 2);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::ScanError &) const", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  *(_BYTE *)(a2 + 6224) = 0;
  if (*(_BYTE *)(a1 + 6448))
  {
    ++*(_DWORD *)(*(_QWORD *)(a2 + 6496) + 208);
    v5 = (_QWORD *)(a1 + 6040);
    if (sub_10007099C((_DWORD *)(a1 + 6040)))
    {
      *(_BYTE *)(a2 + 6032) = 1;
      *(_QWORD *)buf = *v5;
      v13 = *(_BYTE *)(a1 + 6048);
      if (*(char *)(a1 + 6079) < 0)
        sub_100115CE4(&v14, *(void **)(a1 + 6056), *(_QWORD *)(a1 + 6064));
      else
        v14 = *(std::string *)(a1 + 6056);
      v16 = *(_OWORD *)(a1 + 6096);
      v17 = *(_OWORD *)(a1 + 6112);
      v18[0] = *(_OWORD *)(a1 + 6128);
      v15 = *(_OWORD *)(a1 + 6080);
      *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a1 + 6140);
      if (*(char *)(a1 + 6183) < 0)
        sub_100115CE4(__p, *(void **)(a1 + 6160), *(_QWORD *)(a1 + 6168));
      else
        __p[0] = *(std::string *)(a1 + 6160);
      if (sub_1000709AC(buf))
        *(_DWORD *)(a2 + 6184) = sub_100217A98((unsigned int *)buf);
      if (sub_100217A84((uint64_t)buf))
        sub_10003A974(a2 + 6040, 5, 8u, *(double *)(a1 + 6456));
      *(_QWORD *)(a2 + 816) = *v5;
      *(_BYTE *)(a2 + 824) = *(_BYTE *)(a1 + 6048);
      std::string::operator=((std::string *)(a2 + 832), (const std::string *)(a1 + 6056));
      v6 = *(_OWORD *)(a1 + 6128);
      *(_OWORD *)(a2 + 888) = *(_OWORD *)(a1 + 6112);
      *(_OWORD *)(a2 + 904) = v6;
      *(_OWORD *)(a2 + 916) = *(_OWORD *)(a1 + 6140);
      v7 = *(_OWORD *)(a1 + 6096);
      *(_OWORD *)(a2 + 856) = *(_OWORD *)(a1 + 6080);
      *(_OWORD *)(a2 + 872) = v7;
      std::string::operator=((std::string *)(a2 + 936), (const std::string *)(a1 + 6160));
      sub_10001ECE4((int *)buf);
      *(_BYTE *)(a2 + 6048) = v13;
      *(_QWORD *)(a2 + 6040) = *(_QWORD *)buf;
      std::string::operator=((std::string *)(a2 + 6056), &v14);
      *(_OWORD *)(a2 + 6140) = *(_OWORD *)((char *)v18 + 12);
      v8 = v15;
      *(_OWORD *)(a2 + 6096) = v16;
      v9 = v18[0];
      *(_OWORD *)(a2 + 6112) = v17;
      *(_OWORD *)(a2 + 6128) = v9;
      *(_OWORD *)(a2 + 6080) = v8;
      std::string::operator=((std::string *)(a2 + 6160), __p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100DBB3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  sub_10055829C(v20);
  _Unwind_Resume(a1);
}

void sub_100DBB430(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  unsigned int *v9;
  _BOOL4 v10;
  char *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  sub_100131230((_DWORD *)a3, a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiFlow, scanreply, warn, busy", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v13[0] = 0;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiFlow, scanreply, warn, busy", v13, 2);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::ScanBusy &) const", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  if (*(_BYTE *)(a1 + 6448))
  {
    ++*(_DWORD *)(*(_QWORD *)(a3 + 6496) + 212);
    *(_QWORD *)(a3 + 816) = *(_QWORD *)(a1 + 6040);
    *(_BYTE *)(a3 + 824) = *(_BYTE *)(a1 + 6048);
    std::string::operator=((std::string *)(a3 + 832), (const std::string *)(a1 + 6056));
    v7 = *(_OWORD *)(a1 + 6096);
    v8 = *(_OWORD *)(a1 + 6128);
    *(_OWORD *)(a3 + 888) = *(_OWORD *)(a1 + 6112);
    *(_OWORD *)(a3 + 904) = v8;
    *(_OWORD *)(a3 + 856) = *(_OWORD *)(a1 + 6080);
    *(_OWORD *)(a3 + 872) = v7;
    *(_OWORD *)(a3 + 916) = *(_OWORD *)(a1 + 6140);
    std::string::operator=((std::string *)(a3 + 936), (const std::string *)(a1 + 6160));
    v9 = (unsigned int *)(a1 + 6040);
    *(_BYTE *)(a3 + 6032) = 1;
    if (sub_10007099C(v9))
    {
      v10 = sub_1000709AC(v9);
      if (*a2 == 10 && v10)
      {
        *(_DWORD *)(a3 + 6184) = sub_100217A98(v9);
        sub_10001ECE4((int *)(a3 + 6040));
      }
    }
  }
}

void sub_100DBB6A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DBB6C4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  unint64_t i;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[4];
  int v43;
  _QWORD v44[4];
  int v45;
  _QWORD v46[5];
  _QWORD v47[5];
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  double v62;
  _BYTE buf[12];
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  double v67;

  sub_100131230((_DWORD *)a3, a1);
  if (!*(_BYTE *)(a1 + 6448))
    return;
  *(_BYTE *)(a3 + 1096) = *(_QWORD *)(a1 + 6400) == 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    goto LABEL_77;
  v8 = 0;
  do
  {
    if (v8 >= v56)
    {
      v8 = sub_100279DEC(&v54, v6);
    }
    else
    {
      sub_100279D64((uint64_t)&v54, v6);
      v8 += 88;
    }
    v55 = v8;
    v6 += 88;
  }
  while (v6 != v7);
  v9 = v54;
  if (v54 == v8)
    goto LABEL_77;
  v10 = 0;
  v11 = *(double *)(v54 + 56);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  do
  {
    if (vabdd_f64(v11, *(double *)(v9 + 56)) <= 4.0)
    {
      if (v10 < v53)
      {
        sub_100279D64((uint64_t)&v51, v9);
        v10 += 88;
        goto LABEL_31;
      }
    }
    else
    {
      v12 = v51;
      sub_100933C5C((uint64_t *)&v48, (uint64_t)&v51);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - v12) >> 3);
      v14 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v49 - v48);
        v64 = 2050;
        v65 = v13;
        v66 = 2050;
        v67 = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v57 = 134349568;
        v58 = 0xAAAAAAAAAAAAAAABLL * (v49 - v48);
        v59 = 2050;
        v60 = v13;
        v61 = 2050;
        v62 = v11;
        LODWORD(v41) = 32;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f", &v57, v41);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v18);
        if (v18 != buf)
          free(v18);
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v15 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WsbMetric, scanaps, %{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v57 = 134349056;
        v58 = v13;
        LODWORD(v41) = 12;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, scanaps, %{public}lu", &v57, v41);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v19);
        if (v19 != buf)
          free(v19);
      }
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_100DBC3D0;
      v47[3] = &unk_102131FE8;
      v47[4] = v13;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.scanaps"), v47);
      v11 = *(double *)(v9 + 56);
      v16 = v51;
      for (i = v52; i != v16; i -= 88)
      {
        if (*(char *)(i - 57) < 0)
          operator delete(*(void **)(i - 80));
      }
      v52 = v16;
      if (v16 < v53)
      {
        sub_100279D64((uint64_t)&v51, v9);
        v10 = v16 + 88;
        goto LABEL_31;
      }
    }
    v10 = sub_100279DEC((uint64_t *)&v51, v9);
LABEL_31:
    v52 = v10;
    v9 += 88;
  }
  while (v9 != v8);
  v20 = v51;
  sub_100933C5C((uint64_t *)&v48, (uint64_t)&v51);
  v21 = (uint64_t)(v10 - v20) >> 3;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v22 = 0x2E8BA2E8BA2E8BA3 * v21;
  v23 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v49 - v48);
    v64 = 2050;
    v65 = v22;
    v66 = 2050;
    v67 = v11;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v57 = 134349568;
    v58 = 0xAAAAAAAAAAAAAAABLL * (v49 - v48);
    v59 = 2050;
    v60 = v22;
    v61 = 2050;
    v62 = v11;
    LODWORD(v41) = 32;
    v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f", &v57, v41);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v38);
    if (v38 != buf)
      free(v38);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v24 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WsbMetric, scanaps, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v57 = 134349056;
    v58 = v22;
    LODWORD(v41) = 12;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, scanaps, %{public}lu", &v57, v41);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v39);
    if (v39 != buf)
      free(v39);
  }
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_100DBC450;
  v46[3] = &unk_102131FE8;
  v46[4] = v22;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.scanaps"), v46);
  v25 = v48;
  v26 = v49;
  if (v48 != v49)
  {
    v27 = 0;
    do
    {
      v28 = *(double *)(*v25 + 56) - *(double *)(a1 + 6216);
      if (v28 > 0.0 && *(_BYTE *)(a1 + 6448))
      {
        v29 = *(_QWORD *)(a3 + 1080);
        if (v29 >= *(_QWORD *)(a3 + 1088))
        {
          v30 = sub_100DC4DFC((uint64_t *)(a3 + 1072), v25);
        }
        else
        {
          sub_100DC4D98(a3 + 1072, v25);
          v30 = v29 + 24;
        }
        *(_QWORD *)(a3 + 1080) = v30;
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v31 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v32 = *(_QWORD *)(*v25 + 56);
          v33 = 0x2E8BA2E8BA2E8BA3 * ((v25[1] - *v25) >> 3);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v32;
          v64 = 2050;
          v65 = v33;
          v66 = 2050;
          v67 = v28;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld, delta, %{public}.1f", buf, 0x20u);
        }
        ++v27;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v34 = *(_QWORD *)(*v25 + 56);
          v35 = 0x2E8BA2E8BA2E8BA3 * ((v25[1] - *v25) >> 3);
          v57 = 134349568;
          v58 = v34;
          v59 = 2050;
          v60 = v35;
          v61 = 2050;
          v62 = v28;
          LODWORD(v41) = 32;
          v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld, delta, %{public}.1f", &v57, v41);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v36);
          if (v36 != buf)
            free(v36);
        }
      }
      v25 += 3;
    }
    while (v25 != v26);
    if (v27 > 0)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v37 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, privacy, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v57 = 67240192;
        LODWORD(v58) = v27;
        LODWORD(v41) = 8;
        v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, privacy, %{public}d", &v57, v41);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v40);
        if (v40 != buf)
          free(v40);
      }
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_100DBC4D0;
      v44[3] = &unk_102146830;
      v45 = v27;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v44);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_100DBC564;
      v42[3] = &unk_102146830;
      v43 = v27;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v42);
    }
  }
  *(_QWORD *)buf = &v48;
  sub_10055C824((void ***)buf);
  *(_QWORD *)buf = &v51;
  sub_100279AA4((void ***)buf);
LABEL_77:
  *(_QWORD *)buf = &v54;
  sub_100279AA4((void ***)buf);
}

void sub_100DBC360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  uint64_t v51;

  a51 = (void **)&a38;
  sub_10055C824(&a51);
  a51 = (void **)&a41;
  sub_100279AA4(&a51);
  a51 = (void **)&a44;
  sub_100279AA4(&a51);
  sub_10055829C(v51);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DBC3D0(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("aps");
  v3 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

NSDictionary *sub_100DBC450(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("aps");
  v3 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

NSDictionary *sub_100DBC4D0(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_100DBC564(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard:privacy");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void sub_100DBC5F8(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;

  sub_100131230((_DWORD *)a3, a1);
  v6 = *a2;
  *(_DWORD *)(a3 + 6440) = *a2;
  v7 = sub_100182290(a1 + 5016);
  *(double *)(a3 + 6232) = sub_10000B544(a1, v6, v7);
  if ((*(_DWORD *)(a1 + 6440) - 3) <= 0xFFFFFFFD && (*a2 - 1) <= 1)
    *(_QWORD *)(a3 + 6024) = *(_QWORD *)(a1 + 6456);
}

void sub_100DBC67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DBC690(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  double v18;
  uint64_t v19;
  char *v20;
  double v21;
  char *v22;
  double v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[4];
  int v28;
  _QWORD v29[4];
  int v30;
  _BYTE buf[12];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  sub_100131230((_DWORD *)a3, a1);
  v5 = *(uint64_t **)(a1 + 6352);
  v6 = *(uint64_t **)(a1 + 6360);
  if (v5 == v6)
  {
    v11 = *(_QWORD *)(a1 + 6352);
  }
  else
  {
    do
    {
      v38 = 0uLL;
      v39 = 0;
      sub_10055A7B8(&v38, *v5, v5[1], 0x2E8BA2E8BA2E8BA3 * ((v5[1] - *v5) >> 3));
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v7 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(v38 + 56);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v8;
        v32 = 2050;
        v33 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 3);
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v9 = *(_QWORD *)(v38 + 56);
        v34 = 134349312;
        v35 = v9;
        v36 = 2050;
        v37 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 3);
        LODWORD(v25) = 22;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld", &v34, v25);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v10);
        if (v10 != buf)
          free(v10);
      }
      *(_QWORD *)buf = &v38;
      sub_100279AA4((void ***)buf);
      v5 += 3;
    }
    while (v5 != v6);
    v11 = *(_QWORD *)(a1 + 6360);
    v5 = *(uint64_t **)(a1 + 6352);
  }
  v12 = -1431655765 * ((unint64_t)(v11 - (_QWORD)v5) >> 3);
  if (v12 > 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v13 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, privacy, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      LODWORD(v38) = 67240192;
      DWORD1(v38) = v12;
      LODWORD(v25) = 8;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, privacy, %{public}d", &v38, v25);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v20);
      if (v20 != buf)
        free(v20);
    }
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100DBCEF8;
    v29[3] = &unk_102146830;
    v30 = v12;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v29);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100DBCF8C;
    v27[3] = &unk_102146830;
    v28 = v12;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v27);
  }
  sub_100DBD020(a1 + 3016, (uint64_t)buf);
  sub_100132064(a3 + 3016, (uint64_t)buf);
  sub_100126B34((uint64_t)buf);
  v14 = *a2;
  if (*a2 != 2)
  {
    *(_BYTE *)(a3 + 6448) = v14 == 1;
    if (v14 == 1)
    {
      *(_OWORD *)(a3 + 6240) = *(_OWORD *)(a1 + 6240);
      *(_OWORD *)(a3 + 6288) = *(_OWORD *)(a1 + 6288);
      *(_OWORD *)(a3 + 6304) = *(_OWORD *)(a1 + 6304);
      *(_OWORD *)(a3 + 6320) = *(_OWORD *)(a1 + 6320);
      *(_OWORD *)(a3 + 6256) = *(_OWORD *)(a1 + 6256);
      *(_OWORD *)(a3 + 6272) = *(_OWORD *)(a1 + 6272);
      *(_OWORD *)(a3 + 6329) = *(_OWORD *)(a1 + 6329);
      *(_DWORD *)(a3 + 6240) = 0;
      sub_10031F180(a3 + 3248, a1 + 3248);
      *(_WORD *)(a3 + 3344) = *(_WORD *)(a1 + 3344);
      if (*(_BYTE *)(a1 + 6244))
      {
        if (*(double *)(a3 + 6256) <= *(double *)(a3 + 6248))
        {
          *(_QWORD *)(a3 + 6256) = *(_QWORD *)(a1 + 6456);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v15 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            v16 = *(double *)(a3 + 6256) - *(double *)(a3 + 6248);
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@EmerTick, toggle, %{public}.1f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021869E0);
            v23 = *(double *)(a3 + 6256) - *(double *)(a3 + 6248);
            LODWORD(v38) = 134349056;
            *(double *)((char *)&v38 + 4) = v23;
            LODWORD(v25) = 12;
            v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, toggle, %{public}.1f", &v38, v25);
            sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v24);
            if (v24 != buf)
              free(v24);
          }
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v17 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(double *)(a3 + 6256) - *(double *)(a3 + 6248);
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ToggleOn, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v21 = *(double *)(a3 + 6256) - *(double *)(a3 + 6248);
          LODWORD(v38) = 134349056;
          *(double *)((char *)&v38 + 4) = v21;
          LODWORD(v25) = 12;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, ToggleOn, %{public}.1f", &v38, v25);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v22);
          if (v22 != buf)
            free(v22);
        }
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 6456);
  *(_QWORD *)(a3 + 3428) = v19;
  *(_QWORD *)(a3 + 6216) = v19;
}

void sub_100DBCE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10055829C(a13);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DBCEF8(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_100DBCF8C(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard:privacy");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

__n128 sub_100DBD020@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v3 = sub_100129E88(a2);
  *(_QWORD *)(v3 + 3440) = *(_QWORD *)(a1 + 3440);
  *(_QWORD *)(v3 + 3192) = *(_QWORD *)(a1 + 3192);
  *(_OWORD *)(v3 + 3456) = *(_OWORD *)(a1 + 3456);
  *(_DWORD *)(v3 + 3472) = *(_DWORD *)(a1 + 3472);
  *(_BYTE *)(v3 + 3228) = *(_BYTE *)(a1 + 3228);
  *(_BYTE *)(v3 + 3328) = *(_BYTE *)(a1 + 3328);
  *(_DWORD *)(v3 + 3432) = *(_DWORD *)(a1 + 3432);
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 112) = v4;
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 80) = v5;
  v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 48) = v6;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(__n128 *)(v3 + 16) = result;
  *(_BYTE *)(v3 + 136) = *(_BYTE *)(a1 + 136);
  return result;
}

_DWORD *sub_100DBD0AC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *result;
  BOOL v6;

  result = sub_100131230(a3, a1);
  *((_BYTE *)result + 6032) = 1;
  v6 = *a2 != 2 || a2[1] == 2;
  if (!v6 && *(int *)(a1 + 6484) >= 1)
  {
    if (*(_QWORD *)(a1 + 6400))
    {
      *((_BYTE *)result + 1656) = 1;
      *((_QWORD *)result + 803) = 0x402E000000000000;
    }
  }
  return result;
}

uint64_t sub_100DBD118@<X0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;

  sub_100131230((_DWORD *)a3, a1);
  sub_100DC45C8((_QWORD *)(a3 + 3200), a2);
  v6 = a2->n128_u64[1];
  return sub_100223918(a3 + 3192, (double *)&v6);
}

void sub_100DBD16C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DBD180(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  _BYTE v22[808];
  uint64_t v23;
  _QWORD v24[443];
  int v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  _BYTE v32[20];
  _QWORD v33[202];

  sub_100131230((_DWORD *)a3, a1);
  if (*a2 == -1)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsreply, aps, 0, tag, -1", (uint8_t *)&v31, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v31, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      LOWORD(v25) = 0;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, &v31, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, alsreply, aps, 0, tag, -1", &v25, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsRequestResult &) const", "%s\n", v17);
      if (v17 != (char *)&v31)
        free(v17);
    }
  }
  v7 = a2[1];
  if (v7 == 1)
  {
    if (*a2 == -1)
    {
      *(_BYTE *)(a3 + 1656) = 1;
      *(_QWORD *)(a3 + 6424) = 0x4082C00000000000;
    }
    else
    {
      v8 = sub_100182520(a1 + 3248);
      if (*(_DWORD *)(a1 + 6420))
        v9 = "reproc";
      else
        v9 = "live";
      if (v8)
        v10 = "Wifi";
      else
        v10 = "Cell";
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v11 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a3 + 6400);
        v31 = 136446722;
        *(_QWORD *)v32 = v10;
        *(_WORD *)&v32[8] = 2082;
        *(_QWORD *)&v32[10] = v9;
        *(_WORD *)&v32[18] = 2050;
        v33[0] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WsbMetric, als, %{public}s, %{public}s, %{public}ld", (uint8_t *)&v31, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v31, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v18 = *(_QWORD *)(a3 + 6400);
        v25 = 136446722;
        v26 = v10;
        v27 = 2082;
        v28 = v9;
        v29 = 2050;
        v30 = v18;
        LODWORD(v20) = 32;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, &v31, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, als, %{public}s, %{public}s, %{public}ld", &v25, v20);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsRequestResult &) const", "%s\n", v19);
        if (v19 != (char *)&v31)
          free(v19);
      }
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3321888768;
      v21[2] = sub_100DBD728;
      v21[3] = &unk_102186980;
      sub_100130C4C((uint64_t)v22, a3);
      v24[441] = v9;
      v24[442] = v10;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.als"), v21);
      *(_DWORD *)(a3 + 6416) = *a2;
      if (*(_QWORD *)(a3 + 6400))
        sub_10001BB9C((_QWORD *)(a3 + 6376));
      v13 = *(_QWORD *)(a1 + 6360);
      if (v13 != *(_QWORD *)(a1 + 6352))
        *(_QWORD *)(a3 + 6432) = *(_QWORD *)(*(_QWORD *)(v13 - 24) + 56);
      sub_100126B34((uint64_t)v24);
      sub_100126A1C((uint64_t)&v23);
      sub_100126D5C((uint64_t)v22);
    }
  }
  else if (!v7 && *a2 != -1)
  {
    *(_QWORD *)(a3 + 6200) = *(_QWORD *)(a1 + 6456);
    *(_BYTE *)(a3 + 6032) = 1;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v14 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v15 = *a2;
    if (a2[1])
      v16 = "wsb";
    else
      v16 = "normal";
    v31 = 68289538;
    *(_DWORD *)v32 = 0;
    *(_WORD *)&v32[4] = 2082;
    *(_QWORD *)&v32[6] = "";
    *(_WORD *)&v32[14] = 1026;
    *(_DWORD *)&v32[16] = v15;
    LOWORD(v33[0]) = 2082;
    *(_QWORD *)((char *)v33 + 2) = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#pre-wifi-position-calculation-state-update, als request results indicate success\", \"tag\":%{public}d, \"requestType\":%{public, location:escape_only}s}", (uint8_t *)&v31, 0x22u);
  }
}

void sub_100DBD6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DBD728(_QWORD *a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("aps");
  v4[0] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a1[804]);
  v3[1] = CFSTR("pass");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1[822]);
  v3[2] = CFSTR("reachability");
  v4[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1[823]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

uint64_t sub_100DBD7EC(uint64_t a1, uint64_t a2)
{
  return sub_100130C4C(a1 + 32, a2 + 32);
}

void sub_100DBD7F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 32;
  sub_100126B34(a1 + 3048);
  sub_100126A1C(a1 + 840);
  sub_100126D5C(v2);
}

void sub_100DBD82C(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  double v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  double v24;
  char *v25;
  int v26;
  NSObject *v27;
  double v28;
  NSObject *v29;
  const char *v30;
  int v31;
  int v32;
  int v33;
  double v34;
  double v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  int v42;
  char *v43;
  uint64_t v44;
  _BOOL4 v45;
  int v46;
  int v47;
  char *v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  double v53;
  double v54;
  char *v55;
  double v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59[2];
  int v60;
  _BYTE v61[10];
  _BYTE v62[6];
  _BYTE v63[10];
  __int16 v64;
  double v65;
  uint8_t buf[4];
  _BYTE v67[10];
  _BYTE v68[6];
  _BYTE v69[10];
  __int16 v70;
  double v71;

  sub_100131230((_DWORD *)a3, a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a2;
    v7 = a2[1];
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v67 = v7;
    *(_WORD *)&v67[4] = 1026;
    *(_DWORD *)&v67[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsreply, aps, %{public}d, tag, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v42 = *a2;
    v41 = a2[1];
    v60 = 67240448;
    *(_DWORD *)v61 = v41;
    *(_WORD *)&v61[4] = 1026;
    *(_DWORD *)&v61[6] = v42;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, alsreply, aps, %{public}d, tag, %{public}d", &v60, 14);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
  if (sub_1000709AC((_DWORD *)(a1 + 6040)) || *(_BYTE *)(a1 + 6244))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v10 = sub_1000709AC((_DWORD *)(a1 + 6040));
      v11 = *(unsigned __int8 *)(a1 + 6244);
      v12 = *(_DWORD *)(a1 + 6240);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v67 = v10;
      *(_WORD *)&v67[4] = 1026;
      *(_DWORD *)&v67[6] = v11;
      *(_WORD *)v68 = 1026;
      *(_DWORD *)&v68[2] = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "EmerCheck, als, top, highinteg, %{public}d, emer, %{public}d, state, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v44 = qword_1022A0058;
      v45 = sub_1000709AC((_DWORD *)(a1 + 6040));
      v46 = *(unsigned __int8 *)(a1 + 6244);
      v47 = *(_DWORD *)(a1 + 6240);
      v60 = 67240704;
      *(_DWORD *)v61 = v45;
      *(_WORD *)&v61[4] = 1026;
      *(_DWORD *)&v61[6] = v46;
      *(_WORD *)v62 = 1026;
      *(_DWORD *)&v62[2] = v47;
      LODWORD(v58) = 20;
      v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "EmerCheck, als, top, highinteg, %{public}d, emer, %{public}d, state, %{public}d", &v60, v58);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
    *(_DWORD *)(a3 + 6228) = 0;
    v13 = *(_DWORD *)(a1 + 6240);
    if (v13 == 3 || v13 == 5)
    {
      if (v13 == 5)
        v26 = 6;
      else
        v26 = 4;
      *(_DWORD *)(a3 + 6240) = v26;
      if (*(double *)(a3 + 6296) < *(double *)(a3 + 6248))
      {
        *(_QWORD *)(a3 + 6296) = *(_QWORD *)(a1 + 6456);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v27 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v28 = *(double *)(a3 + 6296) - *(double *)(a3 + 6248);
          *(_DWORD *)buf = 134349056;
          *(double *)v67 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@EmerTick, preliminaryAlsReplyTick, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v54 = *(double *)(a3 + 6296) - *(double *)(a3 + 6248);
          v60 = 134349056;
          *(double *)v61 = v54;
          LODWORD(v58) = 12;
          v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, preliminaryAlsReplyTick, %{public}.1f", &v60, v58);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v55);
          if (v55 != (char *)buf)
            free(v55);
        }
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v29 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v30 = "ScanRequest5GHzWithAlsReply";
        if (v13 == 5)
          v30 = "ScanReply5GHzWithAlsReply";
        v32 = *a2;
        v31 = a2[1];
        v33 = *(_DWORD *)(a3 + 6228);
        v34 = *(double *)(a3 + 6320) - *(double *)(a3 + 6248);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)v67 = v30;
        *(_WORD *)&v67[8] = 1026;
        *(_DWORD *)v68 = v31;
        *(_WORD *)&v68[4] = 1026;
        *(_DWORD *)v69 = v32;
        *(_WORD *)&v69[4] = 1026;
        *(_DWORD *)&v69[6] = v33;
        v70 = 2050;
        v71 = v34;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@EmerFlow, %{public}s, aps, %{public}d, tag, %{public}d, queryType, %{public}d, tte, %{public}.1f", buf, 0x28u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v49 = "ScanRequest5GHzWithAlsReply";
        if (v13 == 5)
          v49 = "ScanReply5GHzWithAlsReply";
        v51 = *a2;
        v50 = a2[1];
        v52 = *(_DWORD *)(a3 + 6228);
        v53 = *(double *)(a3 + 6320) - *(double *)(a3 + 6248);
        v60 = 136447234;
        *(_QWORD *)v61 = v49;
        *(_WORD *)&v61[8] = 1026;
        *(_DWORD *)v62 = v50;
        *(_WORD *)&v62[4] = 1026;
        *(_DWORD *)v63 = v51;
        *(_WORD *)&v63[4] = 1026;
        *(_DWORD *)&v63[6] = v52;
        v64 = 2050;
        v65 = v53;
        LODWORD(v58) = 40;
        v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, %{public}s, aps, %{public}d, tag, %{public}d, queryType, %{public}d, tte, %{public}.1f", &v60, v58);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v25);
        goto LABEL_68;
      }
    }
    else if (v13 == 7)
    {
      *(_DWORD *)(a3 + 6240) = 8;
      if (*(double *)(a3 + 6320) < *(double *)(a3 + 6248))
      {
        *(_QWORD *)(a3 + 6320) = *(_QWORD *)(a1 + 6456);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v14 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *(double *)(a3 + 6320) - *(double *)(a3 + 6248);
          *(_DWORD *)buf = 134349056;
          *(double *)v67 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@EmerTick, alsreply, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v56 = *(double *)(a3 + 6320) - *(double *)(a3 + 6248);
          v60 = 134349056;
          *(double *)v61 = v56;
          LODWORD(v58) = 12;
          v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, alsreply, %{public}.1f", &v60, v58);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v57);
          if (v57 != (char *)buf)
            free(v57);
        }
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v16 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *a2;
        v17 = a2[1];
        v19 = *(_DWORD *)(a3 + 6228);
        v20 = *(double *)(a3 + 6320) - *(double *)(a3 + 6248);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)v67 = v17;
        *(_WORD *)&v67[4] = 1026;
        *(_DWORD *)&v67[6] = v18;
        *(_WORD *)v68 = 1026;
        *(_DWORD *)&v68[2] = v19;
        *(_WORD *)v69 = 2050;
        *(double *)&v69[2] = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "@EmerFlow, AlsReply, aps, %{public}d, tag, %{public}d, queryType, %{public}d, tte, %{public}.1f", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v22 = *a2;
        v21 = a2[1];
        v23 = *(_DWORD *)(a3 + 6228);
        v24 = *(double *)(a3 + 6320) - *(double *)(a3 + 6248);
        v60 = 67240960;
        *(_DWORD *)v61 = v21;
        *(_WORD *)&v61[4] = 1026;
        *(_DWORD *)&v61[6] = v22;
        *(_WORD *)v62 = 1026;
        *(_DWORD *)&v62[2] = v23;
        *(_WORD *)v63 = 2050;
        *(double *)&v63[2] = v24;
        LODWORD(v58) = 30;
        v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, AlsReply, aps, %{public}d, tag, %{public}d, queryType, %{public}d, tte, %{public}.1f", &v60, v58);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v25);
LABEL_68:
        if (v25 != (char *)buf)
          free(v25);
      }
    }
  }
  v35 = *(double *)(a3 + 6456);
  v36 = *(std::__shared_weak_count **)(a3 + 3168);
  v59[0] = *(_QWORD **)(a3 + 3160);
  v59[1] = &v36->__vftable;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  sub_100058AD0(v59, v35);
  if (v36)
  {
    v39 = (unint64_t *)&v36->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_100DBE2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DBE314(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  NSObject *v6;
  char *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  sub_100131230(a3, a1);
  if (*(_QWORD *)(a1 + 6360) != *(_QWORD *)(a1 + 6352) && *(_DWORD *)(a1 + 6416) == *a2)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, reply, 0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v8[0] = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbAls, reply, 0", v8, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsAllUnknown &) const", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    a3[1605] = 2;
  }
}

void sub_100DBE4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DBE4F8(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("delta");
  v3[0] = CFSTR("locreq");
  v2[0] = CFSTR("trigger");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void sub_100DBE58C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  int v3;
  uint64_t **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t **v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t **v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  char v46;
  _OWORD *v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  _QWORD *v55;
  uint64_t i;
  _OWORD *v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  int v68;
  __int128 v69;
  _QWORD *v70;
  _BYTE *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  int v76;
  _QWORD *v77;
  _BYTE *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  int v83;
  NSObject *v84;
  int v85;
  _BYTE *v86;
  int v87;
  NSObject *v88;
  _BYTE *v89;
  NSObject *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int *v96;
  int v97;
  int *v98;
  int *v99;
  BOOL v100;
  int *v101;
  int v102;
  int *v103;
  int *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  NSDictionary *v109;
  NSObject *v110;
  _QWORD *v111;
  _QWORD *v112;
  int *v113;
  int v114;
  int *v115;
  int *v116;
  __int128 *v117;
  _DWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  NSObject *v121;
  int v122;
  _BYTE *v123;
  _BYTE *v124;
  _BYTE *v125;
  __int128 *v126;
  __int128 *v127;
  uint64_t v128;
  int v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  char *v133;
  int *v134;
  int v135;
  int *v136;
  int *v137;
  NSObject *v138;
  int v139;
  int v140;
  NSObject *v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int *v146;
  int *v147;
  _QWORD *v148;
  _QWORD *v149;
  NSDictionary *v150;
  NSObject *v151;
  _QWORD *v152;
  int v153;
  int *v154;
  int *v155;
  int v156;
  char *v157;
  NSObject *v158;
  int v159;
  int v160;
  int v161;
  NSObject *v162;
  int v163;
  int v164;
  int v165;
  int *v166;
  int *v167;
  _QWORD *v168;
  NSDictionary *v169;
  int *v170;
  int *v171;
  NSObject *v172;
  _QWORD *v173;
  char *v174;
  _QWORD *v175;
  char *v176;
  _QWORD *v177;
  char *v178;
  _QWORD *v179;
  char *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  double v186;
  uint64_t v187;
  int v188;
  int v189;
  double v190;
  int v191;
  NSObject *v192;
  double v193;
  int v194;
  NSObject *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  char *v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  char *v220;
  uint64_t v221;
  int v222;
  void *v223;
  int v224;
  char *v225;
  uint64_t v226;
  _BYTE *v227;
  char *v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  char *v234;
  int v235;
  int v236;
  char *v237;
  int v238;
  int v239;
  int v240;
  int v241;
  char *v242;
  int v243;
  int v244;
  int v245;
  char *v246;
  char *v247;
  char *v248;
  int v249;
  int v250;
  int v251;
  char *v252;
  char *v253;
  uint64_t v254;
  _DWORD *v256;
  int *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t **v261;
  int loga;
  NSObject *logb;
  os_log_t log;
  int logc;
  uint64_t **v266;
  int v267;
  _WORD *v268;
  int v269;
  _QWORD v270[4];
  int v271;
  _QWORD v272[4];
  int v273;
  int v274;
  int v275;
  _QWORD v276[5];
  _QWORD v277[4];
  __int128 v278;
  uint64_t v279;
  int v280;
  _QWORD v281[4];
  void *v282;
  char v283;
  void *v284;
  void *v285;
  unint64_t v286;
  void *v287;
  void *v288;
  uint64_t v289;
  _QWORD v290[4];
  __int128 v291;
  uint64_t v292;
  int v293;
  _QWORD v294[5];
  _QWORD v295[4];
  __int128 v296;
  uint64_t v297;
  int v298;
  _QWORD v299[4];
  __int128 v300;
  uint64_t v301;
  int v302;
  void *v303[2];
  uint64_t v304;
  _QWORD v305[10];
  char v306;
  uint64_t v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  void *__p[2];
  char v313;
  void *v314[2];
  char v315;
  void *v316;
  _QWORD *v317;
  unint64_t v318;
  void **v319;
  _BYTE v320[32];
  NSDictionary *v321;
  void *v322;
  char v323;
  uint64_t v324;
  _BYTE __dst[20];
  __int16 v326;
  _BYTE v327[10];
  uint64_t v328;
  _QWORD v329[2];
  _QWORD v330[2];
  void *v331[2];
  __int128 v332;
  __int16 v333;
  int v334;
  __int16 v335;
  int v336;
  __int16 v337;
  int v338;
  __int16 v339;
  int v340;
  __int16 v341;
  int v342;
  __int16 v343;
  int v344;
  void *v345;
  char v346;
  uint64_t v347;
  _BYTE v348[12];
  __int16 v349;
  _BYTE *v350;
  char v351;
  _BYTE v352[22];
  char v353;
  void *v354;
  NSNumber *v355;
  uint64_t v356;
  _BYTE buf[40];
  int v358;
  __int16 v359;
  int v360;
  __int16 v361;
  int v362;
  __int16 v363;
  int v364;
  __int16 v365;
  int v366;

  v256 = sub_100131230(a2, a1);
  v2 = (int *)*((_QWORD *)v256 + 812);
  v3 = *v2;
  v266 = (uint64_t **)(v2 + 20);
  if (*v2 < 25)
    ++v3;
  *v2 = v3;
  v261 = (uint64_t **)(v2 + 44);
  sub_1015A2E04(buf, "total");
  v4 = (uint64_t **)(v2 + 2);
  v331[0] = buf;
  v5 = *((_DWORD *)sub_10006F6DC((uint64_t **)v2 + 1, (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v331) + 14);
  sub_1015A2E04(v331, "awareness");
  v303[0] = v331;
  v6 = *((_DWORD *)sub_10006F6DC((uint64_t **)v2 + 1, (const void **)v331, (uint64_t)&unk_101B9EB60, (_OWORD **)v303) + 14);
  sub_1015A2E04(v303, "geofence");
  *(_QWORD *)v320 = v303;
  v7 = *((_DWORD *)sub_10006F6DC((uint64_t **)v2 + 1, (const void **)v303, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
  sub_1015A2E04(v320, "slc");
  *(_QWORD *)__dst = v320;
  v8 = *((_DWORD *)sub_10006F6DC((uint64_t **)v2 + 1, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
  sub_1015A2E04(__dst, "speedestimator");
  v316 = __dst;
  v9 = (uint64_t **)(v2 + 2);
  v10 = *((_DWORD *)sub_10006F6DC((uint64_t **)v2 + 1, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v316)
        + 14);
  sub_1015A2E04(&v316, "cpi");
  v257 = v2;
  v354 = &v316;
  v11 = *((_DWORD *)sub_10006F6DC((uint64_t **)v2 + 1, (const void **)&v316, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354)
        + 14);
  sub_1015A2E04(&v354, "registrant");
  *(_QWORD *)v352 = &v354;
  LODWORD(v4) = *((_DWORD *)sub_10006F6DC(v4, (const void **)&v354, (uint64_t)&unk_101B9EB60, (_OWORD **)v352) + 14);
  sub_1015A2E04(v352, "scanready");
  loga = v10;
  v12 = v7;
  *(_QWORD *)v348 = v352;
  v13 = v6;
  v14 = *((_DWORD *)sub_10006F6DC(v9, (const void **)v352, (uint64_t)&unk_101B9EB60, (_OWORD **)v348) + 14);
  sub_1015A2E04(v348, "emergency");
  v15 = v5;
  v314[0] = v348;
  v16 = *((_DWORD *)sub_10006F6DC(v9, (const void **)v348, (uint64_t)&unk_101B9EB60, (_OWORD **)v314) + 14);
  sub_1015A2E04(v314, "timer");
  __p[0] = v314;
  v17 = *((_DWORD *)sub_10006F6DC(v9, (const void **)v314, (uint64_t)&unk_101B9EB60, (_OWORD **)__p) + 14);
  sub_1015A2E04(__p, "other");
  v310[0] = __p;
  *((_DWORD *)sub_10006F6DC(v9, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)v310) + 14) = v15 - (v16 + v17) - (v13 + v12 + v8 + loga + v11 + (_DWORD)v4 + v14);
  if (v313 < 0)
    operator delete(__p[0]);
  v18 = (uint64_t **)v257;
  v19 = v9;
  if (v315 < 0)
    operator delete(v314[0]);
  if (v351 < 0)
    operator delete(*(void **)v348);
  if (v353 < 0)
    operator delete(*(void **)v352);
  if (SHIBYTE(v356) < 0)
    operator delete(v354);
  if (SHIBYTE(v318) < 0)
    operator delete(v316);
  if ((v327[1] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if ((v320[23] & 0x80000000) != 0)
    operator delete(*(void **)v320);
  if (SHIBYTE(v304) < 0)
    operator delete(v303[0]);
  if (SBYTE7(v332) < 0)
    operator delete(v331[0]);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v20 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    sub_1015A2E04(v331, "total");
    v303[0] = v331;
    v21 = *((_DWORD *)sub_10006F6DC(v9, (const void **)v331, (uint64_t)&unk_101B9EB60, (_OWORD **)v303) + 14);
    sub_1015A2E04(v303, "awareness");
    *(_QWORD *)v320 = v303;
    v22 = *((_DWORD *)sub_10006F6DC(v9, (const void **)v303, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
    sub_1015A2E04(v320, "geofence");
    *(_QWORD *)__dst = v320;
    v23 = *((_DWORD *)sub_10006F6DC(v9, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
    sub_1015A2E04(__dst, "slc");
    v316 = __dst;
    v24 = *((_DWORD *)sub_10006F6DC(v9, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v316) + 14);
    sub_1015A2E04(&v316, "speedestimator");
    v354 = &v316;
    v25 = *((_DWORD *)sub_10006F6DC(v9, (const void **)&v316, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354) + 14);
    sub_1015A2E04(&v354, "cpi");
    *(_QWORD *)v352 = &v354;
    v26 = *((_DWORD *)sub_10006F6DC(v9, (const void **)&v354, (uint64_t)&unk_101B9EB60, (_OWORD **)v352) + 14);
    sub_1015A2E04(v352, "registrant");
    *(_QWORD *)v348 = v352;
    v267 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v352, (uint64_t)&unk_101B9EB60, (_OWORD **)v348) + 14);
    sub_1015A2E04(v348, "scanready");
    v314[0] = v348;
    v27 = v19;
    logb = v20;
    v28 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v348, (uint64_t)&unk_101B9EB60, (_OWORD **)v314) + 14);
    sub_1015A2E04(v314, "emergency");
    __p[0] = v314;
    v29 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v314, (uint64_t)&unk_101B9EB60, (_OWORD **)__p) + 14);
    sub_1015A2E04(__p, "timer");
    v310[0] = __p;
    v30 = *((_DWORD *)sub_10006F6DC(v19, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)v310) + 14);
    sub_1015A2E04(v310, "other");
    v308[0] = v310;
    v31 = *((_DWORD *)sub_10006F6DC(v27, (const void **)v310, (uint64_t)&unk_101B9EB60, (_OWORD **)v308) + 14);
    *(_DWORD *)buf = 67242752;
    *(_DWORD *)&buf[4] = v21;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v22;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v23;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v24;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v25;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v26;
    *(_WORD *)&buf[38] = 1026;
    v358 = v267;
    v359 = 1026;
    v360 = v28;
    v361 = 1026;
    v362 = v29;
    v363 = 1026;
    v364 = v30;
    v365 = 1026;
    v366 = v31;
    _os_log_impl((void *)&_mh_execute_header, logb, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, requesters, %{public}d, aware, %{public}d, gf, %{public}d, slc, %{public}d, speedest, %{public}d, cpi, %{public}d, registrant, %{public}d, scanready, %{public}d, emer, %{public}d, timer, %{public}d, other, %{public}d", buf, 0x44u);
    if (v311 < 0)
      operator delete(v310[0]);
    v18 = (uint64_t **)v257;
    v19 = v27;
    if (v313 < 0)
      operator delete(__p[0]);
    if (v315 < 0)
      operator delete(v314[0]);
    if (v351 < 0)
      operator delete(*(void **)v348);
    if (v353 < 0)
      operator delete(*(void **)v352);
    if (SHIBYTE(v356) < 0)
      operator delete(v354);
    if (SHIBYTE(v318) < 0)
      operator delete(v316);
    if ((v327[1] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if (SHIBYTE(v304) < 0)
      operator delete(v303[0]);
    if (SBYTE7(v332) < 0)
      operator delete(v331[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v199 = qword_1022A0058;
    sub_1015A2E04(v303, "total");
    *(_QWORD *)v320 = v303;
    v200 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v303, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
    sub_1015A2E04(v320, "awareness");
    *(_QWORD *)__dst = v320;
    v201 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
    sub_1015A2E04(__dst, "geofence");
    v316 = __dst;
    v202 = *((_DWORD *)sub_10006F6DC(v19, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v316) + 14);
    sub_1015A2E04(&v316, "slc");
    v354 = &v316;
    v203 = *((_DWORD *)sub_10006F6DC(v19, (const void **)&v316, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354) + 14);
    sub_1015A2E04(&v354, "speedestimator");
    *(_QWORD *)v352 = &v354;
    v204 = *((_DWORD *)sub_10006F6DC(v19, (const void **)&v354, (uint64_t)&unk_101B9EB60, (_OWORD **)v352) + 14);
    sub_1015A2E04(v352, "cpi");
    *(_QWORD *)v348 = v352;
    v205 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v352, (uint64_t)&unk_101B9EB60, (_OWORD **)v348) + 14);
    sub_1015A2E04(v348, "registrant");
    v314[0] = v348;
    v206 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v348, (uint64_t)&unk_101B9EB60, (_OWORD **)v314) + 14);
    sub_1015A2E04(v314, "scanready");
    __p[0] = v314;
    v269 = v206;
    logc = *((_DWORD *)sub_10006F6DC(v19, (const void **)v314, (uint64_t)&unk_101B9EB60, (_OWORD **)__p) + 14);
    sub_1015A2E04(__p, "emergency");
    v207 = v204;
    v310[0] = __p;
    v208 = v202;
    v209 = v201;
    v210 = *((_DWORD *)sub_10006F6DC(v19, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)v310) + 14);
    sub_1015A2E04(v310, "timer");
    v308[0] = v310;
    v211 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v310, (uint64_t)&unk_101B9EB60, (_OWORD **)v308) + 14);
    sub_1015A2E04(v308, "other");
    v319 = v308;
    v212 = *((_DWORD *)sub_10006F6DC(v19, (const void **)v308, (uint64_t)&unk_101B9EB60, (_OWORD **)&v319) + 14);
    LODWORD(v331[0]) = 67242752;
    HIDWORD(v331[0]) = v200;
    LOWORD(v331[1]) = 1026;
    *(_DWORD *)((char *)&v331[1] + 2) = v209;
    HIWORD(v331[1]) = 1026;
    LODWORD(v332) = v208;
    WORD2(v332) = 1026;
    *(_DWORD *)((char *)&v332 + 6) = v203;
    WORD5(v332) = 1026;
    HIDWORD(v332) = v207;
    v333 = 1026;
    v334 = v205;
    v335 = 1026;
    v336 = v269;
    v337 = 1026;
    v338 = logc;
    v339 = 1026;
    v340 = v210;
    v341 = 1026;
    v342 = v211;
    v343 = 1026;
    v344 = v212;
    v213 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v199, 2, "WlpMetric, heartbeat, requesters, %{public}d, aware, %{public}d, gf, %{public}d, slc, %{public}d, speedest, %{public}d, cpi, %{public}d, registrant, %{public}d, scanready, %{public}d, emer, %{public}d, timer, %{public}d, other, %{public}d", v331, 68);
    if (v309 < 0)
      operator delete(v308[0]);
    v18 = (uint64_t **)v257;
    if (v311 < 0)
      operator delete(v310[0]);
    if (v313 < 0)
      operator delete(__p[0]);
    if (v315 < 0)
      operator delete(v314[0]);
    if (v351 < 0)
      operator delete(*(void **)v348);
    if (v353 < 0)
      operator delete(*(void **)v352);
    if (SHIBYTE(v356) < 0)
      operator delete(v354);
    if (SHIBYTE(v318) < 0)
      operator delete(v316);
    if ((v327[1] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if (SHIBYTE(v304) < 0)
      operator delete(v303[0]);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v213);
    if (v213 != buf)
      free(v213);
  }
  sub_1015A2E04(buf, "total");
  v32 = v18 + 4;
  v331[0] = buf;
  v33 = *((_DWORD *)sub_10006F6DC(v18 + 4, (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v331) + 14);
  sub_1015A2E04(v331, "cpi");
  v303[0] = v331;
  v34 = *((unsigned int *)sub_10006F6DC(v18 + 4, (const void **)v331, (uint64_t)&unk_101B9EB60, (_OWORD **)v303) + 14);
  sub_1015A2E04(v303, "lowpower");
  *(_QWORD *)v320 = v303;
  v35 = *((_DWORD *)sub_10006F6DC(v32, (const void **)v303, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
  sub_1015A2E04(v320, "clientupdate");
  *(_QWORD *)__dst = v320;
  v36 = *((_DWORD *)sub_10006F6DC(v32, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
  sub_1015A2E04(__dst, "emergency");
  v316 = __dst;
  v37 = *((_DWORD *)sub_10006F6DC(v32, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v316) + 14);
  sub_1015A2E04(&v316, "other");
  v354 = &v316;
  *((_DWORD *)sub_10006F6DC(v32, (const void **)&v316, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354) + 14) = v33 - (v34 + v35 + v36 + v37);
  if (SHIBYTE(v318) < 0)
    operator delete(v316);
  if ((v327[1] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if ((v320[23] & 0x80000000) != 0)
    operator delete(*(void **)v320);
  if (SHIBYTE(v304) < 0)
    operator delete(v303[0]);
  if (SBYTE7(v332) < 0)
    operator delete(v331[0]);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v38 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    sub_1015A2E04(v331, "total");
    v303[0] = v331;
    v34 = *((unsigned int *)sub_10006F6DC(v32, (const void **)v331, (uint64_t)&unk_101B9EB60, (_OWORD **)v303) + 14);
    sub_1015A2E04(v303, "cpi");
    *(_QWORD *)v320 = v303;
    v39 = *((_DWORD *)sub_10006F6DC(v32, (const void **)v303, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
    sub_1015A2E04(v320, "lowpower");
    *(_QWORD *)__dst = v320;
    v40 = *((_DWORD *)sub_10006F6DC(v32, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
    sub_1015A2E04(__dst, "clientupdate");
    v316 = __dst;
    v41 = *((_DWORD *)sub_10006F6DC(v32, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v316) + 14);
    sub_1015A2E04(&v316, "emergency");
    v354 = &v316;
    v42 = *((_DWORD *)sub_10006F6DC(v32, (const void **)&v316, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354) + 14);
    sub_1015A2E04(&v354, "other");
    *(_QWORD *)v352 = &v354;
    v43 = *((_DWORD *)sub_10006F6DC(v32, (const void **)&v354, (uint64_t)&unk_101B9EB60, (_OWORD **)v352) + 14);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = v34;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v39;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v40;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v41;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v42;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v43;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, locreqtypes, %{public}d, cpi, %{public}d, lowpower, %{public}d, clientupdate, %{public}d, emergency, %{public}d, other, %{public}d", buf, 0x26u);
    if (SHIBYTE(v356) < 0)
      operator delete(v354);
    if (SHIBYTE(v318) < 0)
      operator delete(v316);
    if ((v327[1] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if (SHIBYTE(v304) < 0)
      operator delete(v303[0]);
    if (SBYTE7(v332) < 0)
      operator delete(v331[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v214 = qword_1022A0058;
    sub_1015A2E04(v303, "total");
    *(_QWORD *)v320 = v303;
    v34 = *((unsigned int *)sub_10006F6DC(v32, (const void **)v303, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
    sub_1015A2E04(v320, "cpi");
    *(_QWORD *)__dst = v320;
    v215 = *((_DWORD *)sub_10006F6DC(v32, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
    sub_1015A2E04(__dst, "lowpower");
    v316 = __dst;
    v216 = *((_DWORD *)sub_10006F6DC(v32, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v316) + 14);
    sub_1015A2E04(&v316, "clientupdate");
    v354 = &v316;
    v217 = *((_DWORD *)sub_10006F6DC(v32, (const void **)&v316, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354) + 14);
    sub_1015A2E04(&v354, "emergency");
    *(_QWORD *)v352 = &v354;
    v218 = *((_DWORD *)sub_10006F6DC(v32, (const void **)&v354, (uint64_t)&unk_101B9EB60, (_OWORD **)v352) + 14);
    sub_1015A2E04(v352, "other");
    *(_QWORD *)v348 = v352;
    v219 = *((_DWORD *)sub_10006F6DC(v32, (const void **)v352, (uint64_t)&unk_101B9EB60, (_OWORD **)v348) + 14);
    LODWORD(v331[0]) = 67241472;
    HIDWORD(v331[0]) = v34;
    LOWORD(v331[1]) = 1026;
    *(_DWORD *)((char *)&v331[1] + 2) = v215;
    HIWORD(v331[1]) = 1026;
    LODWORD(v332) = v216;
    WORD2(v332) = 1026;
    *(_DWORD *)((char *)&v332 + 6) = v217;
    WORD5(v332) = 1026;
    HIDWORD(v332) = v218;
    v333 = 1026;
    v334 = v219;
    LODWORD(v254) = 38;
    v220 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v214, 2, "WlpMetric, heartbeat, locreqtypes, %{public}d, cpi, %{public}d, lowpower, %{public}d, clientupdate, %{public}d, emergency, %{public}d, other, %{public}d", v331, v254);
    if (v353 < 0)
      operator delete(*(void **)v352);
    if (SHIBYTE(v356) < 0)
      operator delete(v354);
    if (SHIBYTE(v318) < 0)
      operator delete(v316);
    if ((v327[1] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if (SHIBYTE(v304) < 0)
      operator delete(v303[0]);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v220);
    if (v220 != buf)
      free(v220);
  }
  v44 = operator new(6uLL);
  LODWORD(v44->isa) = 151521030;
  log = v44;
  WORD2(v44->isa) = 3082;
  v45 = 0;
  v268 = operator new(2uLL);
  *v268 = 256;
  v317 = 0;
  v316 = 0;
  v318 = 0;
  do
  {
    v46 = *((_BYTE *)&log->isa + v45);
    sub_100558AC8(v46, 0, v331);
    v47 = v317;
    if ((unint64_t)v317 >= v318)
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v317 - (_BYTE *)v316) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      if (0x5555555555555556 * ((uint64_t)(v318 - (_QWORD)v316) >> 3) > v50)
        v50 = 0x5555555555555556 * ((uint64_t)(v318 - (_QWORD)v316) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v318 - (_QWORD)v316) >> 3) >= 0x555555555555555)
        v51 = 0xAAAAAAAAAAAAAAALL;
      else
        v51 = v50;
      *(_QWORD *)&buf[32] = &v318;
      if (v51)
        v52 = (char *)sub_1002596A8((uint64_t)&v318, v51);
      else
        v52 = 0;
      v53 = &v52[24 * v49];
      *(_QWORD *)buf = v52;
      *(_QWORD *)&buf[8] = v53;
      *(_QWORD *)&buf[24] = &v52[24 * v51];
      v54 = *(_OWORD *)v331;
      *((_QWORD *)v53 + 2) = v332;
      *(_OWORD *)v53 = v54;
      *(_QWORD *)&v332 = 0;
      v331[1] = 0;
      v331[0] = 0;
      *(_QWORD *)&buf[16] = v53 + 24;
      sub_100074D44((uint64_t *)&v316, buf);
      v55 = v317;
      sub_100074DB8((uint64_t)buf);
      v317 = v55;
      if (SBYTE7(v332) < 0)
        operator delete(v331[0]);
    }
    else
    {
      v48 = *(_OWORD *)v331;
      v317[2] = v332;
      *v47 = v48;
      v317 = (_QWORD *)v47 + 3;
    }
    if (v46 == 12)
    {
      for (i = 0; i != 2; ++i)
      {
        v34 = v34 & 0xFFFFFFFFFFFF0000 | *((unsigned __int8 *)v268 + i) | 0x100;
        sub_100558AC8(0xCu, v34, v331);
        v57 = v317;
        if ((unint64_t)v317 >= v318)
        {
          v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v317 - (_BYTE *)v316) >> 3);
          v60 = v59 + 1;
          if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)(v318 - (_QWORD)v316) >> 3) > v60)
            v60 = 0x5555555555555556 * ((uint64_t)(v318 - (_QWORD)v316) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v318 - (_QWORD)v316) >> 3) >= 0x555555555555555)
            v61 = 0xAAAAAAAAAAAAAAALL;
          else
            v61 = v60;
          *(_QWORD *)&buf[32] = &v318;
          if (v61)
            v62 = (char *)sub_1002596A8((uint64_t)&v318, v61);
          else
            v62 = 0;
          v63 = &v62[24 * v59];
          *(_QWORD *)buf = v62;
          *(_QWORD *)&buf[8] = v63;
          *(_QWORD *)&buf[24] = &v62[24 * v61];
          v64 = *(_OWORD *)v331;
          *((_QWORD *)v63 + 2) = v332;
          *(_OWORD *)v63 = v64;
          *(_QWORD *)&v332 = 0;
          v331[1] = 0;
          v331[0] = 0;
          *(_QWORD *)&buf[16] = v63 + 24;
          sub_100074D44((uint64_t *)&v316, buf);
          v65 = v317;
          sub_100074DB8((uint64_t)buf);
          v317 = v65;
          if (SBYTE7(v332) < 0)
            operator delete(v331[0]);
        }
        else
        {
          v58 = *(_OWORD *)v331;
          v317[2] = v332;
          *v57 = v58;
          v317 = (_QWORD *)v57 + 3;
        }
      }
    }
    ++v45;
  }
  while (v45 != 6);
  sub_100263E50((uint64_t)v331);
  sub_100263E50((uint64_t)v303);
  v66 = (char *)v316;
  v67 = (char *)v317;
  if (v316 == v317)
  {
    v68 = 0;
  }
  else
  {
    v68 = 0;
    do
    {
      if (v66[23] < 0)
      {
        sub_100115CE4(buf, *(void **)v66, *((_QWORD *)v66 + 1));
      }
      else
      {
        v69 = *(_OWORD *)v66;
        *(_QWORD *)&buf[16] = *((_QWORD *)v66 + 2);
        *(_OWORD *)buf = v69;
      }
      v70 = sub_100263F7C(&v332, (uint64_t)", ", 2);
      if (buf[23] >= 0)
        v71 = buf;
      else
        v71 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v72 = buf[23];
      else
        v72 = *(_QWORD *)&buf[8];
      v73 = sub_100263F7C(v70, (uint64_t)v71, v72);
      v74 = sub_100263F7C(v73, (uint64_t)", ", 2);
      *(_QWORD *)v320 = buf;
      v75 = sub_10055D064(v266, (const void **)buf, (uint64_t)&unk_101B9EB60, (__int128 **)v320);
      std::ostream::operator<<(v74, *((unsigned int *)v75 + 14));
      *(_QWORD *)v320 = buf;
      v76 = *((_DWORD *)sub_10055D064(v266, (const void **)buf, (uint64_t)&unk_101B9EB60, (__int128 **)v320) + 14);
      v77 = sub_100263F7C(&v304, (uint64_t)", ", 2);
      if (buf[23] >= 0)
        v78 = buf;
      else
        v78 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v79 = buf[23];
      else
        v79 = *(_QWORD *)&buf[8];
      v80 = sub_100263F7C(v77, (uint64_t)v78, v79);
      v81 = sub_100263F7C(v80, (uint64_t)", ", 2);
      *(_QWORD *)v320 = buf;
      v82 = sub_10055D064(v261, (const void **)buf, (uint64_t)&unk_101B9EB60, (__int128 **)v320);
      std::ostream::operator<<(v81, *((unsigned int *)v82 + 14));
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v68 += v76;
      v66 += 24;
    }
    while (v66 != v67);
  }
  sub_1015A2E04(buf, "total");
  *(_QWORD *)v320 = buf;
  v83 = *((_DWORD *)sub_10006F6DC(v266, (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v320) + 14);
  sub_1015A2E04(v320, "other");
  *(_QWORD *)__dst = v320;
  *((_DWORD *)sub_10006F6DC(v266, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14) = v83 - v68;
  if ((v320[23] & 0x80000000) != 0)
    operator delete(*(void **)v320);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v84 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    sub_1015A2E04(v320, "total");
    *(_QWORD *)__dst = v320;
    v85 = *((_DWORD *)sub_10006F6DC(v266, (const void **)v320, (uint64_t)&unk_101B9EB60, (_OWORD **)__dst) + 14);
    v86 = __dst;
    std::stringbuf::str(__dst, (char *)&v332 + 8);
    if (v327[1] < 0)
      v86 = *(_BYTE **)__dst;
    sub_1015A2E04(&v354, "other");
    *(_QWORD *)v352 = &v354;
    v87 = *((_DWORD *)sub_10006F6DC(v266, (const void **)&v354, (uint64_t)&unk_101B9EB60, (_OWORD **)v352) + 14);
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&buf[4] = v85;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v86;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v87;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, scanreqtypes, %{public}d%{public}s, other, %{public}d", buf, 0x18u);
    if (SHIBYTE(v356) < 0)
      operator delete(v354);
    if ((v327[1] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v221 = qword_1022A0058;
    sub_1015A2E04(__dst, "total");
    v354 = __dst;
    v222 = *((_DWORD *)sub_10006F6DC(v266, (const void **)__dst, (uint64_t)&unk_101B9EB60, (_OWORD **)&v354) + 14);
    v223 = &v354;
    std::stringbuf::str(&v354, (char *)&v332 + 8);
    if (v356 < 0)
      v223 = v354;
    sub_1015A2E04(v352, "other");
    *(_QWORD *)v348 = v352;
    v224 = *((_DWORD *)sub_10006F6DC(v266, (const void **)v352, (uint64_t)&unk_101B9EB60, (_OWORD **)v348) + 14);
    *(_DWORD *)v320 = 67240706;
    *(_DWORD *)&v320[4] = v222;
    *(_WORD *)&v320[8] = 2082;
    *(_QWORD *)&v320[10] = v223;
    *(_WORD *)&v320[18] = 1026;
    *(_DWORD *)&v320[20] = v224;
    LODWORD(v254) = 24;
    v225 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v221, 2, "WlpMetric, heartbeat, scanreqtypes, %{public}d%{public}s, other, %{public}d", v320, v254);
    if (v353 < 0)
      operator delete(*(void **)v352);
    if (SHIBYTE(v356) < 0)
      operator delete(v354);
    if ((v327[1] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v225);
    if (v225 != buf)
      free(v225);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v88 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(buf, v305);
    v89 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v320 = 136446210;
    *(_QWORD *)&v320[4] = v89;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, empty scans per scanreqtypes %{public}s", v320, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v226 = qword_1022A0058;
    std::stringbuf::str(v320, v305);
    if (v320[23] >= 0)
      v227 = v320;
    else
      v227 = *(_BYTE **)v320;
    *(_DWORD *)__dst = 136446210;
    *(_QWORD *)&__dst[4] = v227;
    LODWORD(v254) = 12;
    v228 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v226, 2, "WlpMetric, heartbeat, empty scans per scanreqtypes %{public}s", __dst, v254);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v228);
    if (v228 != buf)
      free(v228);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v90 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v91 = *v257;
    v92 = v257[50];
    v93 = v257[51];
    v95 = v257[52];
    v94 = v257[53];
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = v91;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v92;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v93;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v94;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v95;
    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, misc, %{public}d, alsAps, %{public}d, fixes, %{public}d, scanErrors, %{public}d, scanBusys, %{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v229 = *v257;
    v230 = v257[50];
    v231 = v257[51];
    v233 = v257[52];
    v232 = v257[53];
    *(_DWORD *)v320 = 67241216;
    *(_DWORD *)&v320[4] = v229;
    *(_WORD *)&v320[8] = 1026;
    *(_DWORD *)&v320[10] = v230;
    *(_WORD *)&v320[14] = 1026;
    *(_DWORD *)&v320[16] = v231;
    *(_WORD *)&v320[20] = 1026;
    *(_DWORD *)&v320[22] = v232;
    *(_WORD *)&v320[26] = 1026;
    *(_DWORD *)&v320[28] = v233;
    LODWORD(v254) = 32;
    v234 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, heartbeat, misc, %{public}d, alsAps, %{public}d, fixes, %{public}d, scanErrors, %{public}d, scanBusys, %{public}d", v320, v254);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v234);
    if (v234 != buf)
      free(v234);
  }
  v96 = (int *)*((_QWORD *)v257 + 1);
  if (v96 != v257 + 4)
  {
    do
    {
      if (*((char *)v96 + 55) < 0)
      {
        sub_100115CE4(buf, *((void **)v96 + 4), *((_QWORD *)v96 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v96 + 2);
        *(_QWORD *)&buf[16] = *((_QWORD *)v96 + 6);
      }
      v97 = v96[14];
      *(_DWORD *)&buf[24] = v97;
      if (v97)
      {
        v299[0] = _NSConcreteStackBlock;
        v299[1] = 3321888768;
        v299[2] = sub_100DC2744;
        v299[3] = &unk_102173638;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_100115CE4(&v300, *(void **)buf, *(unint64_t *)&buf[8]);
          v97 = *(_DWORD *)&buf[24];
        }
        else
        {
          v300 = *(_OWORD *)buf;
          v301 = *(_QWORD *)&buf[16];
        }
        v302 = v97;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.requesters"), v299);
        if (SHIBYTE(v301) < 0)
          operator delete((void *)v300);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v98 = (int *)*((_QWORD *)v96 + 1);
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = *(int **)v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (int *)*((_QWORD *)v96 + 2);
          v100 = *(_QWORD *)v99 == (_QWORD)v96;
          v96 = v99;
        }
        while (!v100);
      }
      v96 = v99;
    }
    while (v99 != v257 + 4);
  }
  v101 = (int *)*((_QWORD *)v257 + 4);
  if (v101 != v257 + 10)
  {
    do
    {
      if (*((char *)v101 + 55) < 0)
      {
        sub_100115CE4(buf, *((void **)v101 + 4), *((_QWORD *)v101 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v101 + 2);
        *(_QWORD *)&buf[16] = *((_QWORD *)v101 + 6);
      }
      v102 = v101[14];
      *(_DWORD *)&buf[24] = v102;
      if (v102)
      {
        v295[0] = _NSConcreteStackBlock;
        v295[1] = 3321888768;
        v295[2] = sub_100DC27F4;
        v295[3] = &unk_102173638;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_100115CE4(&v296, *(void **)buf, *(unint64_t *)&buf[8]);
          v102 = *(_DWORD *)&buf[24];
        }
        else
        {
          v296 = *(_OWORD *)buf;
          v297 = *(_QWORD *)&buf[16];
        }
        v298 = v102;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.requesttypes"), v295);
        if (SHIBYTE(v297) < 0)
          operator delete((void *)v296);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v103 = (int *)*((_QWORD *)v101 + 1);
      if (v103)
      {
        do
        {
          v104 = v103;
          v103 = *(int **)v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (int *)*((_QWORD *)v101 + 2);
          v100 = *(_QWORD *)v104 == (_QWORD)v101;
          v101 = v104;
        }
        while (!v100);
      }
      v101 = v104;
    }
    while (v104 != v257 + 10);
  }
  v105 = *((_QWORD *)v256 + 812);
  v106 = *(_QWORD **)(v105 + 56);
  v107 = (_QWORD *)(v105 + 64);
  if (v106 != (_QWORD *)(v105 + 64))
  {
    do
    {
      if (*((int *)v106 + 14) >= 1)
      {
        v108 = v106 + 4;
        v329[0] = CFSTR("scanRequester");
        if (*((char *)v106 + 55) < 0)
          v108 = (_QWORD *)*v108;
        v330[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v108);
        v329[1] = CFSTR("numRequests");
        v330[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)v106 + 14));
        v109 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v330, v329, 2);
        v294[0] = _NSConcreteStackBlock;
        v294[1] = 3221225472;
        v294[2] = sub_100DC28A4;
        v294[3] = &unk_102132010;
        v294[4] = v109;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.scanrequesters"), v294);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v110 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2113;
          *(_QWORD *)&buf[20] = CFSTR("WifiLocationScanRequesters");
          *(_WORD *)&buf[28] = 2113;
          *(_QWORD *)&buf[30] = v109;
          _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wlp submitting PowerLog event\", \"eventName\":%{private, location:escape_only}@, \"dictionary\":%{private, location:escape_only}@}", buf, 0x26u);
        }
        PLLogRegisteredEvent(4, CFSTR("WifiLocationScanRequesters"), v109, 0);
      }
      v111 = (_QWORD *)v106[1];
      if (v111)
      {
        do
        {
          v112 = v111;
          v111 = (_QWORD *)*v111;
        }
        while (v111);
      }
      else
      {
        do
        {
          v112 = (_QWORD *)v106[2];
          v100 = *v112 == (_QWORD)v106;
          v106 = v112;
        }
        while (!v100);
      }
      v106 = v112;
    }
    while (v112 != v107);
  }
  v113 = (int *)*((_QWORD *)v257 + 10);
  if (v113 != v257 + 22)
  {
    do
    {
      if (*((char *)v113 + 55) < 0)
      {
        sub_100115CE4(buf, *((void **)v113 + 4), *((_QWORD *)v113 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v113 + 2);
        *(_QWORD *)&buf[16] = *((_QWORD *)v113 + 6);
      }
      v114 = v113[14];
      *(_DWORD *)&buf[24] = v114;
      if (v114)
      {
        v290[0] = _NSConcreteStackBlock;
        v290[1] = 3321888768;
        v290[2] = sub_100DC28AC;
        v290[3] = &unk_102173638;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_100115CE4(&v291, *(void **)buf, *(unint64_t *)&buf[8]);
          v114 = *(_DWORD *)&buf[24];
        }
        else
        {
          v291 = *(_OWORD *)buf;
          v292 = *(_QWORD *)&buf[16];
        }
        v293 = v114;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.scantypes"), v290);
        if (SHIBYTE(v292) < 0)
          operator delete((void *)v291);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v115 = (int *)*((_QWORD *)v113 + 1);
      if (v115)
      {
        do
        {
          v116 = v115;
          v115 = *(int **)v115;
        }
        while (v115);
      }
      else
      {
        do
        {
          v116 = (int *)*((_QWORD *)v113 + 2);
          v100 = *(_QWORD *)v116 == (_QWORD)v113;
          v113 = v116;
        }
        while (!v100);
      }
      v113 = v116;
    }
    while (v116 != v257 + 22);
  }
  v117 = (__int128 *)*((_QWORD *)v257 + 19);
  if (v117 != (__int128 *)(v257 + 40))
  {
    do
    {
      sub_100DC4990(__dst, v117 + 2);
      v355 = 0;
      v354 = 0;
      v356 = 0;
      sub_10027205C(&v354, *(const void **)&v327[2], v328, (v328 - *(_QWORD *)&v327[2]) >> 2);
      sub_100263E50((uint64_t)v320);
      v118 = v354;
      if (v355 != v354)
      {
        v119 = 0;
        do
        {
          if (v118[v119])
          {
            v281[0] = _NSConcreteStackBlock;
            v281[1] = 3321888768;
            v281[2] = sub_100DC295C;
            v281[3] = &unk_1021869B0;
            sub_100DC4990(&v282, (__int128 *)__dst);
            v286 = v119;
            v288 = 0;
            v289 = 0;
            v287 = 0;
            sub_10027205C(&v287, v354, (uint64_t)v355, ((char *)v355 - (_BYTE *)v354) >> 2);
            AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.fixapcountperscantype"), v281);
            if (v287)
            {
              v288 = v287;
              operator delete(v287);
            }
            if (v284)
            {
              v285 = v284;
              operator delete(v284);
            }
            if (v283 < 0)
              operator delete(v282);
          }
          v120 = sub_100263F7C(&v320[16], (uint64_t)", ", 2);
          std::ostream::operator<<(v120, *((unsigned int *)v354 + v119++));
          v118 = v354;
        }
        while (v119 < ((char *)v355 - (_BYTE *)v354) >> 2);
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v121 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v122 = v327[1];
        v123 = *(_BYTE **)__dst;
        std::stringbuf::str(buf, &v320[24]);
        v124 = __dst;
        if (v122 < 0)
          v124 = v123;
        v125 = buf;
        if (buf[23] < 0)
          v125 = *(_BYTE **)buf;
        *(_DWORD *)v352 = 136446466;
        *(_QWORD *)&v352[4] = v124;
        *(_WORD *)&v352[12] = 2082;
        *(_QWORD *)&v352[14] = v125;
        _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, scanreqtype, %{public}s, fix ap count per bucket %{public}s", v352, 0x16u);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v128 = qword_1022A0058;
        v129 = v327[1];
        v130 = *(_BYTE **)__dst;
        std::stringbuf::str(v352, &v320[24]);
        v131 = __dst;
        if (v129 < 0)
          v131 = v130;
        v132 = v352;
        if (v353 < 0)
          v132 = *(_BYTE **)v352;
        *(_DWORD *)v348 = 136446466;
        *(_QWORD *)&v348[4] = v131;
        v349 = 2082;
        v350 = v132;
        LODWORD(v254) = 22;
        v133 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v128, 2, "WlpMetric, heartbeat, scanreqtype, %{public}s, fix ap count per bucket %{public}s", v348, v254);
        if (v353 < 0)
          operator delete(*(void **)v352);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v133);
        if (v133 != buf)
          free(v133);
      }
      *(_QWORD *)v320 = v260;
      *(_QWORD *)&v320[*(_QWORD *)(v260 - 24)] = v259;
      *(_QWORD *)&v320[16] = v258;
      if (v323 < 0)
        operator delete(v322);
      std::streambuf::~streambuf(&v320[24]);
      std::ios::~ios(&v324);
      if (v354)
      {
        v355 = (NSNumber *)v354;
        operator delete(v354);
      }
      if (*(_QWORD *)&v327[2])
      {
        v328 = *(_QWORD *)&v327[2];
        operator delete(*(void **)&v327[2]);
      }
      if ((v327[1] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      v126 = (__int128 *)*((_QWORD *)v117 + 1);
      if (v126)
      {
        do
        {
          v127 = v126;
          v126 = *(__int128 **)v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          v127 = (__int128 *)*((_QWORD *)v117 + 2);
          v100 = *(_QWORD *)v127 == (_QWORD)v117;
          v117 = v127;
        }
        while (!v100);
      }
      v117 = v127;
    }
    while (v127 != (__int128 *)(v257 + 40));
  }
  v134 = (int *)*((_QWORD *)v257 + 22);
  if (v134 != v257 + 46)
  {
    do
    {
      if (*((char *)v134 + 55) < 0)
      {
        sub_100115CE4(buf, *((void **)v134 + 4), *((_QWORD *)v134 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v134 + 2);
        *(_QWORD *)&buf[16] = *((_QWORD *)v134 + 6);
      }
      v135 = v134[14];
      *(_DWORD *)&buf[24] = v135;
      if (v135)
      {
        v277[0] = _NSConcreteStackBlock;
        v277[1] = 3321888768;
        v277[2] = sub_100DC2AEC;
        v277[3] = &unk_102173638;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_100115CE4(&v278, *(void **)buf, *(unint64_t *)&buf[8]);
          v135 = *(_DWORD *)&buf[24];
        }
        else
        {
          v278 = *(_OWORD *)buf;
          v279 = *(_QWORD *)&buf[16];
        }
        v280 = v135;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.fixapcountperscantype"), v277);
        if (SHIBYTE(v279) < 0)
          operator delete((void *)v278);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v136 = (int *)*((_QWORD *)v134 + 1);
      if (v136)
      {
        do
        {
          v137 = v136;
          v136 = *(int **)v136;
        }
        while (v136);
      }
      else
      {
        do
        {
          v137 = (int *)*((_QWORD *)v134 + 2);
          v100 = *(_QWORD *)v137 == (_QWORD)v134;
          v134 = v137;
        }
        while (!v100);
      }
      v134 = v137;
    }
    while (v137 != v257 + 46);
  }
  v276[0] = _NSConcreteStackBlock;
  v276[1] = 3221225472;
  v276[2] = sub_100DC2BB0;
  v276[3] = &unk_102131FE8;
  v276[4] = v257;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.heartbeat"), v276);
  *(_QWORD *)v320 = _NSConcreteStackBlock;
  *(_QWORD *)&v320[8] = 3221225472;
  *(_QWORD *)&v320[16] = sub_100DC4A14;
  *(_QWORD *)&v320[24] = &unk_102131FE8;
  v321 = (NSDictionary *)v257;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifi1.yield"), v320);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v138 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v139 = v257[57];
    v140 = v257[58];
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v139;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v140;
    _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "WlpMetric, numWifi1YieldValid, %{public}d, numWifi1YieldInvalid, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v235 = v257[57];
    v236 = v257[58];
    *(_DWORD *)__dst = 67240448;
    *(_DWORD *)&__dst[4] = v235;
    *(_WORD *)&__dst[8] = 1026;
    *(_DWORD *)&__dst[10] = v236;
    LODWORD(v254) = 14;
    v237 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WlpMetric, numWifi1YieldValid, %{public}d, numWifi1YieldInvalid, %{public}d", __dst, v254);
    sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1YieldMetrics(Types::HeartbeatMetrics &)", "%s\n", v237);
    if (v237 != buf)
      free(v237);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v141 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v142 = v257[59];
    v143 = v257[60];
    v144 = v257[61];
    v145 = v257[62];
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v142;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v143;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v144;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v145;
    _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "WlpMetric, numNotifyLocationAvailable, %{public}d, numNotifyLocationUnavailable, %{public}d, numNotifyBatchedLocations, %{public}d, numNotifyWsbLocations, %{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v238 = v257[59];
    v239 = v257[60];
    v240 = v257[61];
    v241 = v257[62];
    *(_DWORD *)__dst = 67240960;
    *(_DWORD *)&__dst[4] = v238;
    *(_WORD *)&__dst[8] = 1026;
    *(_DWORD *)&__dst[10] = v239;
    *(_WORD *)&__dst[14] = 1026;
    *(_DWORD *)&__dst[16] = v240;
    v326 = 1026;
    *(_DWORD *)v327 = v241;
    LODWORD(v254) = 26;
    v242 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WlpMetric, numNotifyLocationAvailable, %{public}d, numNotifyLocationUnavailable, %{public}d, numNotifyBatchedLocations, %{public}d, numNotifyWsbLocations, %{public}d", __dst, v254);
    sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1YieldMetrics(Types::HeartbeatMetrics &)", "%s\n", v242);
    if (v242 != buf)
      free(v242);
  }
  *(_QWORD *)(v257 + 59) = 0;
  *(_QWORD *)(v257 + 57) = 0;
  *(_QWORD *)(v257 + 61) = 0;
  v146 = (int *)*((_QWORD *)v257 + 32);
  v147 = v257 + 66;
  if (v146 != v257 + 66)
  {
    do
    {
      v148 = v146 + 8;
      *(_QWORD *)v352 = CFSTR("wifi1UnavailableReason");
      v149 = v146 + 8;
      if (*((char *)v146 + 55) < 0)
        v149 = (_QWORD *)*v148;
      v354 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v149);
      *(_QWORD *)&v352[8] = CFSTR("wifi1UnavailableReasonCount");
      v355 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v146[14]);
      v150 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v354, v352, 2);
      *(_QWORD *)v320 = _NSConcreteStackBlock;
      *(_QWORD *)&v320[8] = 3221225472;
      *(_QWORD *)&v320[16] = sub_100DC4B40;
      *(_QWORD *)&v320[24] = &unk_102132010;
      v321 = v150;
      AnalyticsSendEventLazy(CFSTR("com.apple.locationd.wifi1UnavailableReason"), v320);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v151 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v152 = v146 + 8;
        if (*((char *)v146 + 55) < 0)
          v152 = (_QWORD *)*v148;
        v153 = v146[14];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v152;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v153;
        _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "WlpMetric, notifyLocationUnavailableReason, %{public}s, count, %{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        if (*((char *)v146 + 55) < 0)
          v148 = (_QWORD *)*v148;
        v156 = v146[14];
        *(_DWORD *)__dst = 136446466;
        *(_QWORD *)&__dst[4] = v148;
        *(_WORD *)&__dst[12] = 1026;
        *(_DWORD *)&__dst[14] = v156;
        LODWORD(v254) = 18;
        v157 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WlpMetric, notifyLocationUnavailableReason, %{public}s, count, %{public}d", __dst, v254);
        sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1UnavailableReasonMetrics(Types::HeartbeatMetrics &)", "%s\n", v157);
        if (v157 != buf)
          free(v157);
      }
      v154 = (int *)*((_QWORD *)v146 + 1);
      if (v154)
      {
        do
        {
          v155 = v154;
          v154 = *(int **)v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          v155 = (int *)*((_QWORD *)v146 + 2);
          v100 = *(_QWORD *)v155 == (_QWORD)v146;
          v146 = v155;
        }
        while (!v100);
      }
      v146 = v155;
    }
    while (v155 != v147);
  }
  sub_100090AE4((uint64_t)(v257 + 64), *((char **)v257 + 33));
  *((_QWORD *)v257 + 33) = 0;
  *((_QWORD *)v257 + 34) = 0;
  *((_QWORD *)v257 + 32) = v147;
  if (v257[54] + v257[55])
  {
    *(_QWORD *)v320 = _NSConcreteStackBlock;
    *(_QWORD *)&v320[8] = 3221225472;
    *(_QWORD *)&v320[16] = sub_100DC4B48;
    *(_QWORD *)&v320[24] = &unk_102131FE8;
    v321 = (NSDictionary *)v257;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiFixWithAssociatedAp"), v320);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v158 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v159 = v257[54];
      v160 = v257[55];
      v161 = v257[56];
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v159;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v160;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v161;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "WlpMetric, wifiFixWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociatedAp, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v249 = v257[54];
      v250 = v257[55];
      v251 = v257[56];
      *(_DWORD *)__dst = 67240704;
      *(_DWORD *)&__dst[4] = v249;
      *(_WORD *)&__dst[8] = 1026;
      *(_DWORD *)&__dst[10] = v250;
      *(_WORD *)&__dst[14] = 1026;
      *(_DWORD *)&__dst[16] = v251;
      LODWORD(v254) = 20;
      v252 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WlpMetric, wifiFixWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociatedAp, %{public}d", __dst, v254);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1WithAssociatedApMetrics(Types::HeartbeatMetrics &)", "%s\n", v252);
      if (v252 != buf)
        free(v252);
    }
    *((_QWORD *)v257 + 27) = 0;
    v257[56] = 0;
  }
  *(_QWORD *)v320 = _NSConcreteStackBlock;
  *(_QWORD *)&v320[8] = 3221225472;
  *(_QWORD *)&v320[16] = sub_100DC4C14;
  *(_QWORD *)&v320[24] = &unk_102131FE8;
  v321 = (NSDictionary *)v257;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiFixWithReachIntersection"), v320);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v162 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v163 = v257[71];
    v164 = v257[70];
    v165 = v257[72];
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v163;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v164;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v165;
    _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEBUG, "WlpMetric, wifiFixwithReachIntersection, numReachIntersectionYield, %{public}d, numWifi1Yield, %{public}d, numReachIntersectionConservativeUsed, , %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v243 = v257[71];
    v244 = v257[70];
    v245 = v257[72];
    *(_DWORD *)__dst = 67240704;
    *(_DWORD *)&__dst[4] = v243;
    *(_WORD *)&__dst[8] = 1026;
    *(_DWORD *)&__dst[10] = v244;
    *(_WORD *)&__dst[14] = 1026;
    *(_DWORD *)&__dst[16] = v245;
    LODWORD(v254) = 20;
    v246 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, wifiFixwithReachIntersection, numReachIntersectionYield, %{public}d, numWifi1Yield, %{public}d, numReachIntersectionConservativeUsed, , %{public}d", __dst, v254);
    sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1WithReachIntersectionMetrics(Types::HeartbeatMetrics &)", "%s\n", v246);
    if (v246 != buf)
      free(v246);
  }
  *((_QWORD *)v257 + 35) = 0;
  v257[72] = 0;
  if (*((_QWORD *)v257 + 15))
  {
    v166 = (int *)*((_QWORD *)v257 + 13);
    v167 = v257 + 28;
    if (v166 != v257 + 28)
    {
      do
      {
        v168 = v166 + 8;
        *(_QWORD *)__dst = CFSTR("reason");
        if (*((char *)v166 + 55) < 0)
          v168 = (_QWORD *)*v168;
        *(_QWORD *)v320 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v168);
        *(_QWORD *)&__dst[8] = CFSTR("tally");
        *(_QWORD *)&v320[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v166[14]);
        v169 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v320, __dst, 2);
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100DC4CE0;
        *(_QWORD *)&buf[24] = &unk_102132010;
        *(_QWORD *)&buf[32] = v169;
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.alsrequestreasontally"), buf);
        v170 = (int *)*((_QWORD *)v166 + 1);
        if (v170)
        {
          do
          {
            v171 = v170;
            v170 = *(int **)v170;
          }
          while (v170);
        }
        else
        {
          do
          {
            v171 = (int *)*((_QWORD *)v166 + 2);
            v100 = *(_QWORD *)v171 == (_QWORD)v166;
            v166 = v171;
          }
          while (!v100);
        }
        v166 = v171;
      }
      while (v171 != v167);
    }
    sub_100090AE4((uint64_t)(v257 + 26), *((char **)v257 + 14));
    *((_QWORD *)v257 + 14) = 0;
    *((_QWORD *)v257 + 15) = 0;
    *((_QWORD *)v257 + 13) = v167;
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v172 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_INFO, "alsRequestReasonsTally metrics nothing to submit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      *(_WORD *)v320 = 0;
      LODWORD(v254) = 2;
      v253 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "alsRequestReasonsTally metrics nothing to submit", v320, v254);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitAlsRequestReasonsTally(Types::HeartbeatMetrics &)", "%s\n", v253);
      if (v253 != buf)
        free(v253);
    }
  }
  v173 = (_QWORD *)*((_QWORD *)v256 + 812);
  v174 = (char *)v173[2];
  v173 += 2;
  sub_100090AE4((uint64_t)(v173 - 1), v174);
  *(v173 - 1) = v173;
  *v173 = 0;
  v173[1] = 0;
  v175 = (_QWORD *)*((_QWORD *)v256 + 812);
  v176 = (char *)v175[5];
  v175 += 5;
  sub_100090AE4((uint64_t)(v175 - 1), v176);
  *(v175 - 1) = v175;
  *v175 = 0;
  v175[1] = 0;
  v177 = (_QWORD *)*((_QWORD *)v256 + 812);
  v178 = (char *)v177[8];
  v177 += 8;
  sub_100090AE4((uint64_t)(v177 - 1), v178);
  *(v177 - 1) = v177;
  *v177 = 0;
  v177[1] = 0;
  v179 = (_QWORD *)*((_QWORD *)v256 + 812);
  v180 = (char *)v179[11];
  v179 += 11;
  sub_100090AE4((uint64_t)(v179 - 1), v180);
  *(v179 - 1) = v179;
  *v179 = 0;
  v179[1] = 0;
  v181 = (_QWORD *)*((_QWORD *)v256 + 812);
  v182 = (_QWORD *)v181[20];
  v181 += 20;
  sub_1001275FC((uint64_t)(v181 - 1), v182);
  *(v181 - 1) = v181;
  *v181 = 0;
  v181[1] = 0;
  v183 = (_QWORD *)*((_QWORD *)v256 + 812);
  v184 = (char *)v183[23];
  v183 += 23;
  sub_100090AE4((uint64_t)(v183 - 1), v184);
  *(v183 - 1) = v183;
  *v183 = 0;
  v183[1] = 0;
  v185 = *((_QWORD *)v256 + 812);
  *(_QWORD *)(v185 + 200) = 0;
  *(_QWORD *)(v185 + 208) = 0;
  v186 = *(double *)(a1 + 6456);
  v187 = *(_QWORD *)(a1 + 6496);
  v188 = *(_DWORD *)(v187 + 292);
  v189 = (unint64_t)(2290649225 * (int)(v186 - *(double *)(v187 + 296) + 30.0)) >> 32;
  v190 = v186 - *(double *)(v187 + 304);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v191 = (v189 >> 5) + (v189 >> 31);
  v192 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v188;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v191;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = (int)v190;
    _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEBUG, "WlpMetric, clients, beat, %{public}d, sum, %{public}d, bin, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    *(_DWORD *)v320 = 67240704;
    *(_DWORD *)&v320[4] = v188;
    *(_WORD *)&v320[8] = 1026;
    *(_DWORD *)&v320[10] = v191;
    *(_WORD *)&v320[14] = 1026;
    *(_DWORD *)&v320[16] = (int)v190;
    LODWORD(v254) = 20;
    v247 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, clients, beat, %{public}d, sum, %{public}d, bin, %{public}d", v320, v254);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v247);
    if (v247 != buf)
      free(v247);
  }
  v272[0] = _NSConcreteStackBlock;
  v272[1] = 3221225472;
  v272[2] = sub_100DC2CBC;
  v272[3] = &unk_10215F390;
  v273 = v188;
  v274 = v191;
  v275 = (int)v190;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.clients"), v272);
  v193 = *(double *)(*(_QWORD *)(a1 + 6496) + 312);
  if (v193 <= 0.0)
    v194 = -1;
  else
    v194 = (int)(v186 - v193);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v195 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v194;
    _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEBUG, "WlpMetric, locreq, heartbeat, dt, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    *(_DWORD *)v320 = 67240192;
    *(_DWORD *)&v320[4] = v194;
    LODWORD(v254) = 8;
    v248 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, locreq, heartbeat, dt, %{public}d", v320, v254);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v248);
    if (v248 != buf)
      free(v248);
  }
  v270[0] = _NSConcreteStackBlock;
  v270[1] = 3221225472;
  v270[2] = sub_100DC2D8C;
  v270[3] = &unk_102146830;
  v271 = v194;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.locreq"), v270);
  *(void **)((char *)v303
  v304 = v197;
  if (v306 < 0)
    operator delete((void *)v305[8]);
  std::streambuf::~streambuf(v305);
  std::ios::~ios(&v307);
  v331[0] = v196;
  *(void **)((char *)v331 + *((_QWORD *)v196 - 3)) = v198;
  *(_QWORD *)&v332 = v197;
  if (v346 < 0)
    operator delete(v345);
  std::streambuf::~streambuf((char *)&v332 + 8);
  std::ios::~ios(&v347);
  *(_QWORD *)buf = &v316;
  sub_100259608((void ***)buf);
  operator delete(v268);
  operator delete(log);
}

void sub_100DC2088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p)
{
  sub_1018B38B4((uint64_t)&STACK[0x2B0]);
  sub_1018B38B4((uint64_t)&STACK[0x5C0]);
  STACK[0x5C0] = (unint64_t)&STACK[0x428];
  sub_100259608((void ***)&STACK[0x5C0]);
  operator delete(__p);
  operator delete(a24);
  sub_10055829C(a13);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DC2744(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("name");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v4[1] = CFSTR("requests");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

NSDictionary *sub_100DC27F4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("name");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v4[1] = CFSTR("requests");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

uint64_t sub_100DC28A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

NSDictionary *sub_100DC28AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("name");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v4[1] = CFSTR("requests");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

NSDictionary *sub_100DC295C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v4[0] = CFSTR("scantype");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4[1] = CFSTR("fixApsBucketed");
  v5[1] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 80));
  v4[2] = CFSTR("wifiFixes");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 88) + 4 * *(_QWORD *)(a1 + 80)));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

_QWORD *sub_100DC2A30(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  sub_100DC4990(a1 + 4, (__int128 *)(a2 + 32));
  v3[11] = 0;
  v3[12] = 0;
  v3 += 11;
  v3[2] = 0;
  return sub_10027205C(v3, *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
}

void sub_100DC2A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D86FBC(v1);
  _Unwind_Resume(a1);
}

void sub_100DC2A98(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

NSDictionary *sub_100DC2AEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v4[0] = CFSTR("scantype");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = &off_10221C038;
  v4[1] = CFSTR("fixApsBucketed");
  v4[2] = CFSTR("wifiFixes");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

NSDictionary *sub_100DC2BB0(uint64_t a1)
{
  _QWORD v3[5];
  _QWORD v4[5];

  v3[0] = CFSTR("beats");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 32));
  v3[1] = CFSTR("alsAps");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v3[2] = CFSTR("fixes");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v3[3] = CFSTR("scanErrors");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v3[4] = CFSTR("scanBusys");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 212));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 5);
}

NSDictionary *sub_100DC2CBC(unsigned int *a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("clients");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]);
  v4[1] = CFSTR("heartbeat");
  v3[1] = CFSTR("trigger");
  v3[2] = CFSTR("sum");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]);
  v3[3] = CFSTR("bin");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_100DC2D8C(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("delta");
  v3[0] = CFSTR("heartbeat");
  v2[0] = CFSTR("trigger");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_100DC2E20(unsigned int *a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("clients");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]);
  v4[1] = CFSTR("register");
  v3[1] = CFSTR("trigger");
  v3[2] = CFSTR("sum");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]);
  v3[3] = CFSTR("bin");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_100DC2EF0(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  uint64_t v7;
  int v8;
  double v9;
  int v10;
  double v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int *v16;
  char v17;
  char v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[4];
  int v29;
  int v30;
  int v31;
  int v32;
  _BYTE v33[10];
  const char *v34;
  uint8_t buf[4];
  _BYTE v36[10];
  const char *v37;

  sub_100131230((_DWORD *)a3, a1);
  *(_QWORD *)(a3 + 6232) = 0x4018000000000000;
  if (*a2)
    return;
  v6 = *(double *)(a1 + 6456);
  v7 = *(_QWORD *)(a1 + 6496);
  v8 = *(_DWORD *)(v7 + 292);
  v9 = *(double *)(v7 + 296);
  if (v9 <= 0.0)
  {
    v10 = -1;
    if (!v8)
    {
LABEL_8:
      v12 = -1;
      goto LABEL_9;
    }
  }
  else
  {
    v10 = (int)(v6 - v9 + 30.0) / 60;
    if (!v8)
      goto LABEL_8;
  }
  v11 = *(double *)(v7 + 304);
  if (v11 <= 0.0)
    goto LABEL_8;
  v12 = (int)(v6 - v11);
LABEL_9:
  v13 = *(_DWORD *)(a1 + 6472);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v14 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)v36 = v8;
    *(_WORD *)&v36[4] = 1026;
    *(_DWORD *)&v36[6] = v10;
    LOWORD(v37) = 1026;
    *(_DWORD *)((char *)&v37 + 2) = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WlpMetric, clients, unreg, %{public}d, sum, %{public}d, bin, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v32 = 67240704;
    *(_DWORD *)v33 = v8;
    *(_WORD *)&v33[4] = 1026;
    *(_DWORD *)&v33[6] = v10;
    LOWORD(v34) = 1026;
    *(_DWORD *)((char *)&v34 + 2) = v12;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, clients, unreg, %{public}d, sum, %{public}d, bin, %{public}d", &v32, 20);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Unregistration &) const", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100DC33A4;
  v28[3] = &unk_10215F390;
  v29 = v8;
  v30 = v10;
  v31 = v12;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.clients"), v28);
  v15 = *(_QWORD *)(a3 + 6496);
  if (v8)
    *(double *)(v15 + 304) = v6;
  *(double *)(v15 + 296) = v6;
  *(_DWORD *)(v15 + 292) = v13;
  if (*(int *)(a1 + 6472) <= 0)
  {
    v16 = (int *)(a3 + 6516);
    *(_QWORD *)(a3 + 6516) = sub_10012A3B0();
    *(_BYTE *)(a3 + 6524) = v17;
    *(_QWORD *)(a3 + 6528) = sub_10012A3B0();
    *(_BYTE *)(a3 + 6536) = v18;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v19 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v20 = sub_10006F774(*v16);
      v21 = sub_10006F774(*(_DWORD *)(a3 + 6528));
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v36 = v20;
      *(_WORD *)&v36[8] = 2082;
      v37 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@WifiFlow, reset inter-locreq state, current, %{public}s, staging, %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v23 = qword_1022A0058;
      v24 = sub_10006F774(*v16);
      v25 = sub_10006F774(*(_DWORD *)(a3 + 6528));
      v32 = 136446466;
      *(_QWORD *)v33 = v24;
      *(_WORD *)&v33[8] = 2082;
      v34 = v25;
      LODWORD(v27) = 22;
      v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 1, "@WifiFlow, reset inter-locreq state, current, %{public}s, staging, %{public}s", &v32, v27);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Unregistration &) const", "%s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
  }
}

void sub_100DC3378(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DC33A4(unsigned int *a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("clients");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]);
  v4[1] = CFSTR("unregister");
  v3[1] = CFSTR("trigger");
  v3[2] = CFSTR("sum");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]);
  v3[3] = CFSTR("bin");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_100DC3474(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  double v9;
  __int128 v10;
  __int128 v11;
  int v12;
  NSObject *v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[10];
  uint64_t v30;
  uint8_t buf[4];
  _BYTE v32[10];
  uint64_t v33;

  v6 = (unsigned __int8 *)(a1 + 6244);
  sub_100131230((_DWORD *)a3, a1);
  v7 = *v6;
  v8 = *a2;
  v9 = *(double *)(a1 + 6456);
  v10 = *(_OWORD *)(a1 + 6304);
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)(a1 + 6288);
  *(_OWORD *)(a3 + 1024) = v10;
  *(_OWORD *)(a3 + 1040) = *(_OWORD *)(a1 + 6320);
  *(_OWORD *)(a3 + 1049) = *(_OWORD *)(a1 + 6329);
  v11 = *(_OWORD *)(a1 + 6256);
  *(_OWORD *)(a3 + 960) = *(_OWORD *)(a1 + 6240);
  *(_OWORD *)(a3 + 976) = v11;
  *(_OWORD *)(a3 + 992) = *(_OWORD *)(a1 + 6272);
  *(_BYTE *)(a3 + 6244) = v8;
  v12 = v6[100];
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v13 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v32 = v7;
    *(_WORD *)&v32[4] = 1026;
    *(_DWORD *)&v32[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@EmerFlow, StateChange, wasEmer, %{public}d, nowEmer, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v28 = 67240448;
    *(_DWORD *)v29 = v7;
    *(_WORD *)&v29[4] = 1026;
    *(_DWORD *)&v29[6] = v8;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, StateChange, wasEmer, %{public}d, nowEmer, %{public}d", &v28, 14);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  *(_OWORD *)(a3 + 6328) = 0u;
  *(_OWORD *)(a3 + 6312) = 0u;
  *(_OWORD *)(a3 + 6296) = 0u;
  *(_OWORD *)(a3 + 6280) = 0u;
  *(_OWORD *)(a3 + 6264) = 0u;
  *(_OWORD *)(a3 + 6248) = 0u;
  if (v8)
  {
    *(double *)(a3 + 6248) = v9;
    *(double *)(a3 + 6256) = v9;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v14 = (uint64_t *)(a3 + 6248);
    v15 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *v14;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@EmerTick, on, %{public}.1f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v22 = *v14;
      v28 = 134349056;
      *(_QWORD *)v29 = v22;
      LODWORD(v27) = 12;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, on, %{public}.1f", &v28, v27);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    if (v7)
    {
      v17 = v12 != 0;
    }
    else
    {
      *(double *)(a3 + 6248) = v9;
      *(double *)(a3 + 6256) = v9;
      *(double *)(a3 + 6264) = v9;
      v17 = v12 != 0;
      if (!v6[207])
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v20 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@EmerFlow, RequestWifiOn", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          LOWORD(v28) = 0;
          LODWORD(v27) = 2;
          v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, RequestWifiOn", &v28, v27);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v26);
          if (v26 != (char *)buf)
            free(v26);
        }
        v17 = 1;
      }
    }
  }
  else
  {
    if (v7)
    {
      *(_DWORD *)(a3 + 6240) = 0;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v18 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)v32 = fmax(v9, 0.0);
        *(_WORD *)&v32[8] = 2050;
        v33 = *(_QWORD *)v32;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Off, any, %{public}.1f, sufficient, %{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v28 = 134349312;
        *(_QWORD *)v29 = fmax(v9, 0.0);
        *(_WORD *)&v29[8] = 2050;
        v30 = *(_QWORD *)v29;
        LODWORD(v27) = 22;
        v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, Off, any, %{public}.1f, sufficient, %{public}.1f", &v28, v27);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v24);
        if (v24 != (char *)buf)
          free(v24);
      }
    }
    if (v12)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v19 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@EmerFlow, RequestWifiOff", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        LOWORD(v28) = 0;
        LODWORD(v27) = 2;
        v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, RequestWifiOff", &v28, v27);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v25);
        if (v25 != (char *)buf)
          free(v25);
      }
    }
    v17 = 0;
  }
  *(_BYTE *)(a3 + 6344) = v17;
}

void sub_100DC3C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100DC3C60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t **v25;
  _QWORD v26[4];
  unsigned int v27;
  _QWORD v28[4];
  unsigned int v29;
  int v30;
  _BYTE v31[14];
  __int16 v32;
  int v33;
  uint8_t buf[4];
  _BYTE v35[14];
  __int16 v36;
  int v37;

  sub_100131230((_DWORD *)a2, a1);
  *(_DWORD *)(a2 + 6420) = *(_DWORD *)(a1 + 6420) + 1;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a2 + 6420);
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 6360) - *(_QWORD *)(a1 + 6352)) >> 3);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v35 = v5;
    *(_WORD *)&v35[4] = 2050;
    *(_QWORD *)&v35[6] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbReproc, pass, %{public}d, groups, %{public}ld", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v18 = *(_DWORD *)(a2 + 6420);
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 6360) - *(_QWORD *)(a1 + 6352)) >> 3);
    v30 = 67240448;
    *(_DWORD *)v31 = v18;
    *(_WORD *)&v31[4] = 2050;
    *(_QWORD *)&v31[6] = v19;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbReproc, pass, %{public}d, groups, %{public}ld", &v30, 18);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  v7 = *(_QWORD *)(a2 + 6352);
  v8 = *(_QWORD *)(a2 + 6360);
  if (v7 != v8)
  {
    v9 = 0;
    v25 = (uint64_t **)(a2 + 6352);
    while (1)
    {
      v10 = *(double *)(a1 + 6456) - *(double *)(*(_QWORD *)v7 + 56);
      if (v10 < 14400.0)
        break;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v11 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(*(_QWORD *)v7 + 56);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)v35 = v12;
        *(_WORD *)&v35[8] = 1026;
        *(_DWORD *)&v35[10] = v9 + 1;
        v36 = 1026;
        v37 = (int)v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, age, %{public}.1f, aps, %{public}d, delta, %{public}d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v13 = *(_QWORD *)(*(_QWORD *)v7 + 56);
        v30 = 134349568;
        *(_QWORD *)v31 = v13;
        *(_WORD *)&v31[8] = 1026;
        *(_DWORD *)&v31[10] = v9 + 1;
        v32 = 1026;
        v33 = (int)v10;
        LODWORD(v24) = 24;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbDiscard, age, %{public}.1f, aps, %{public}d, delta, %{public}d", &v30, v24, v25);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v14);
        if (v14 != (char *)buf)
          free(v14);
      }
      v7 += 24;
      ++v9;
      if (v7 == v8)
        goto LABEL_26;
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v15 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(*(_QWORD *)v7 + 56);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v35 = v16;
      *(_WORD *)&v35[8] = 1026;
      *(_DWORD *)&v35[10] = (int)v10;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "@WsbReproc, inrange, %{public}.1f, count, %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v22 = *(_QWORD *)(*(_QWORD *)v7 + 56);
      v30 = 134349312;
      *(_QWORD *)v31 = v22;
      *(_WORD *)&v31[8] = 1026;
      *(_DWORD *)&v31[10] = (int)v10;
      LODWORD(v24) = 18;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbReproc, inrange, %{public}.1f, count, %{public}d", &v30, v24, v25);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    if (v9)
    {
LABEL_26:
      sub_100DC43F4((uint64_t)v25, *v25, (uint64_t)&(*v25)[3 * v9]);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v17 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v35 = v9;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, aged, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v30 = 67240192;
        *(_DWORD *)v31 = v9;
        LODWORD(v24) = 8;
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, aged, %{public}d", &v30, v24);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100DC4474;
      v28[3] = &unk_102146830;
      v29 = v9;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v28);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100DC4508;
      v26[3] = &unk_102146830;
      v27 = v9;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v26);
    }
  }
}

void sub_100DC43C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10055829C(a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DC43F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void **v7;
  char v9;
  void **v10;

  if (a2 != (uint64_t *)a3)
  {
    sub_100DC4F24((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        v10 = v7;
        sub_100279AA4(&v10);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

NSDictionary *sub_100DC4474(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_100DC4508(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard:aged");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void sub_100DC459C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

__n128 sub_100DC45C8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100DC4650(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100DC4650(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100DC4918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100DC4964(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_QWORD *sub_100DC4990(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_10027205C(__dst + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return __dst;
}

void sub_100DC49F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100DC4A14(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("numWifi1YieldValid");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 228));
  v3[1] = CFSTR("numWifi1YieldInvalid");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 232));
  v3[2] = CFSTR("numNotifyLocationAvailable");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 236));
  v3[3] = CFSTR("numNotifyLocationUnavailable");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 240));
  v3[4] = CFSTR("numNotifyBatchedLocations");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 244));
  v3[5] = CFSTR("numNotifyWsbLocations");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 248));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

uint64_t sub_100DC4B40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

NSDictionary *sub_100DC4B48(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("numAssociated");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 216));
  v3[1] = CFSTR("numUnassociated");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220));
  v3[2] = CFSTR("numWifiFixesWithAssociatedAp");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 224));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_100DC4C14(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("numReachIntersectionYield");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 284));
  v3[1] = CFSTR("numWifi1Yield");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 280));
  v3[2] = CFSTR("numReachIntersectionConservativeUsed");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 288));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

uint64_t sub_100DC4CE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

_QWORD *sub_100DC4CE8@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = sub_100DC4D40(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100DC4D2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DC4D40(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_1021432B8;
  a1[1] = 0;
  sub_10012D700((uint64_t)(a1 + 3), a2);
  a1[8] = *(_QWORD *)(a2 + 40);
  return a1;
}

void sub_100DC4D84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DC4D98(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_10055A7B8(v3, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100DC4DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100DC4DFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_10055A7B8(v11, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  sub_100935C24(a1, v14);
  v12 = a1[1];
  sub_100935DB4(v14);
  return v12;
}

void sub_100DC4F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100935DB4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DC4F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_1000ADC24(a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    a4[2] = *(_QWORD *)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    a4 += 3;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

void sub_100DC4F98()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100DC5034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100DC504C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100DC50D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100DC51B0(uint64_t a1, void *a2)
{
  dispatch_time_t v3;
  _QWORD block[5];

  v3 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100DC5660;
  block[3] = &unk_10212ECA0;
  block[4] = a2;
  dispatch_after(v3, (dispatch_queue_t)objc_msgSend(objc_msgSend(a2, "silo"), "queue"), block);
}

id sub_100DC5660(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleSysTimeChanged");
}

void sub_100DC5668(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_100DC5694(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v7 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100D8FB60(a1, a2, a3, &v22, a5);
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *a1 = off_102186A50;
  v13 = (std::__shared_weak_count *)a4[1];
  v20 = *a4;
  v21 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_1014A0E08(a1 + 11, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD *))(*a1 + 152))(a1);
  return a1;
}

void sub_100DC57B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_100DC57EC(v2);
  sub_100D8FC14(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DC57EC(_QWORD *a1)
{
  void **v2;
  void **v4;

  *a1 = off_10214F110;
  v2 = (void **)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 7));
  v4 = v2;
  sub_1006DFAF4(&v4);
  return a1;
}

uint64_t sub_100DC5840(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_102186A50;
  *(_QWORD *)(a1 + 88) = off_10214F110;
  sub_100261F44(a1 + 144);
  v3 = (void **)(a1 + 96);
  sub_1006DFAF4(&v3);
  return sub_100D8FC14(a1);
}

void sub_100DC58A4(uint64_t a1)
{
  sub_100DC5840(a1);
  operator delete();
}

BOOL sub_100DC58C8(_QWORD **a1, uint64_t a2, double a3)
{
  int v5;
  int v7;
  _BYTE v8[40];

  sub_1006DFA98(v8, a2);
  v5 = ((uint64_t (*)(_QWORD **, _BYTE *))(*a1)[12])(a1, v8);
  if (v8[32])
    sub_1001FF18C((uint64_t)v8);
  if (v5)
  {
    sub_10110A330((uint64_t)a1[8], 2, 1, a3);
    return 0;
  }
  else
  {
    v7 = *((_DWORD *)a1 + 20);
    return v7 < (int)sub_100DC5978(a1);
  }
}

void sub_100DC595C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    sub_1001FF18C((uint64_t)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC5978(_QWORD **a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(*a1[6] + 128))(&v5);
  v2 = v6;
  v3 = ((unsigned int (*)(_QWORD **))(*a1)[14])(a1) * v2;
  sub_100067AC4((uint64_t)&v9);
  sub_100067AC4((uint64_t)&v8);
  sub_100067AC4((uint64_t)&v7);
  return v3;
}

void sub_100DC59F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006DEE20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100DC5A04(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;

  ++*(_DWORD *)(a1 + 80);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102186B18);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 80);
    v4[0] = 68289539;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1025;
    v8 = v3;
    v9 = 1025;
    v10 = sub_100DC5978((_QWORD **)a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update next trace eligibility\", \"collected\":%{private}d, \"cap\":%{private}d}", (uint8_t *)v4, 0x1Eu);
  }
}

id sub_100DC5B10(uint64_t a1)
{
  int v2;
  id result;
  NSSortDescriptor *v4;
  void *v5;
  NSObject *v6;
  id v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  NSSortDescriptor *v13;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = objc_msgSend(*(id *)(a1 + 8), "count");
  if ((unint64_t)result <= v2)
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    v4 = +[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("score"), 1);
    v5 = *(void **)(a1 + 8);
    v13 = v4;
    *(_QWORD *)(a1 + 24) = objc_msgSend(objc_msgSend(v5, "sortedArrayUsingDescriptors:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1)), "firstObject");
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102186B18);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "archive"), "directory"), "UTF8String");
      v8[0] = 68289283;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2081;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Next in progress archive\", \"dir\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x1Cu);
    }
    return (id)sub_10110A1F4(*(_QWORD *)(a1 + 64), 2, 2, 2, (int)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "archive"), "secondaryDataSize"));
  }
  return result;
}

uint64_t sub_100DC5C9C()
{
  return 3;
}

uint64_t sub_100DC5CA4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40));
}

void sub_100DC5CB4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  *(_DWORD *)(a1 + 80) = 0;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102186B18);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 80);
    v4[0] = 68289283;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1025;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reset trace eligibility\", \"collected\":%{private}d}", (uint8_t *)v4, 0x18u);
  }
}

uint64_t sub_100DC5DA0(uint64_t a1)
{
  sub_100D8FFC0(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

NSString *sub_100DC5DCC(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("v-%u"), a2);
}

uint64_t sub_100DC5DFC(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_100DC5E04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
}

const __CFString *sub_100DC5E14()
{
  return CFSTR("Vision Enabled");
}

void sub_100DC5E20(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100DC5E4C(double **a1, double *a2, double *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;
  int v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v44;
  double v45;
  void *v46;
  double *v47;
  uint64_t v48;
  void *v49;
  double *v50;
  double *v51;
  void *__p;
  double *v53;
  double *v54;

  v7 = (*a1)[1];
  v6 = (*a1)[2];
  v8 = **a1;
  v9 = v8 - v6;
  v10 = v8 + v6;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (v8 - v6 <= v8 + v6)
  {
    v11 = 0;
    do
    {
      if (v11 >= v54)
      {
        v13 = (double *)__p;
        v14 = ((char *)v11 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100259694();
        v16 = (char *)v54 - (_BYTE *)__p;
        if (((char *)v54 - (_BYTE *)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)sub_10025E6A0((uint64_t)&v54, v17);
          v13 = (double *)__p;
          v11 = v53;
        }
        else
        {
          v18 = 0;
        }
        v19 = (double *)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11-- - 1);
          *((_QWORD *)v19-- - 1) = v20;
        }
        __p = v19;
        v53 = v12;
        v54 = (double *)&v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      v53 = v12;
      v9 = v9 + 1.0;
      v11 = v12;
    }
    while (v9 <= v10);
  }
  v21 = v7 - v6;
  v22 = v6 + v7;
  if (v21 <= v22)
  {
    v23 = v50;
    do
    {
      if (v23 >= v51)
      {
        v25 = (double *)v49;
        v26 = ((char *)v23 - (_BYTE *)v49) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_100259694();
        v28 = (char *)v51 - (_BYTE *)v49;
        if (((char *)v51 - (_BYTE *)v49) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_10025E6A0((uint64_t)&v51, v29);
          v25 = (double *)v49;
          v23 = v50;
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23-- - 1);
          *((_QWORD *)v31-- - 1) = v32;
        }
        v49 = v31;
        v50 = v24;
        v51 = (double *)&v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      v50 = v24;
      v21 = v21 + 1.0;
      v23 = v24;
    }
    while (v21 <= v22);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v44 = 0.0;
  v45 = 0.0;
  if ((sub_100DC61F0((double **)&__p, a1, (char **)&v46, &v45, 1) & 1) == 0)
  {
    v42 = 0;
    v34 = (double *)v46;
    if (!v46)
      goto LABEL_50;
    goto LABEL_49;
  }
  v33 = sub_100DC61F0((double **)&v49, a1, (char **)&v46, &v44, 0);
  v34 = (double *)v46;
  if (!v33)
  {
    v42 = 0;
    if (!v46)
      goto LABEL_50;
LABEL_49:
    v47 = v34;
    operator delete(v34);
    goto LABEL_50;
  }
  v36 = v44;
  v35 = v45;
  *a2 = v45;
  a2[1] = v36;
  v37 = 0.0;
  if (v34 != v47)
  {
    v38 = v34;
    do
    {
      v39 = *v38;
      v40 = v38[1];
      v38 += 2;
      v41 = (v35 - v39) * (v35 - v39) + (v36 - v40) * (v36 - v40);
      if (v37 < v41)
        v37 = v41;
    }
    while (v38 != v47);
  }
  *a3 = sqrt(v37) / 3.0;
  v42 = 1;
  if (v34)
    goto LABEL_49;
LABEL_50:
  if (v49)
  {
    v50 = (double *)v49;
    operator delete(v49);
  }
  if (__p)
  {
    v53 = (double *)__p;
    operator delete(__p);
  }
  return v42;
}

void sub_100DC6174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC61C4(uint64_t a1)
{
  sub_100008848(a1 + 16, *(_QWORD **)(a1 + 24));
  return sub_100261F44(a1);
}

uint64_t sub_100DC61F0(double **a1, double **a2, char **a3, double *a4, int a5)
{
  double *v5;
  double *v6;
  char **v10;
  double v11;
  double v12;
  char *v13;
  char *v14;
  double v15;
  double v16;
  char *v17;
  double v18;
  double v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  double v34;
  double v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double v52;
  double v53;
  void *__p[3];

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
    return 0;
  v10 = a3 + 2;
  v11 = 0.0;
  v12 = 0.0;
  do
  {
    sub_100DC6624(a2, a5, (double **)__p, *v5);
    v52 = 0.0;
    v53 = 0.0;
    if (!sub_100DC6A08((float64x2_t **)a2, (float64x2_t **)__p, a5, &v52, &v53))
      goto LABEL_67;
    v14 = a3[1];
    v13 = a3[2];
    if (a5)
    {
      v15 = *v5;
      v16 = v52;
      if (v14 >= v13)
      {
        v20 = *a3;
        v21 = (v14 - *a3) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          sub_100259694();
        v23 = v13 - v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_10028E224((uint64_t)v10, v24);
          v20 = *a3;
          v14 = a3[1];
        }
        else
        {
          v25 = 0;
        }
        v32 = &v25[16 * v21];
        *(double *)v32 = v15;
        *((double *)v32 + 1) = v16;
        v33 = v32;
        if (v14 != v20)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v14 - 1);
            v33 -= 16;
            v14 -= 16;
          }
          while (v14 != v20);
          v20 = *a3;
        }
        v13 = &v25[16 * v24];
        v17 = v32 + 16;
        *a3 = v33;
        a3[1] = v32 + 16;
        a3[2] = v13;
        if (v20)
        {
          operator delete(v20);
          v13 = *v10;
        }
      }
      else
      {
        *(double *)v14 = v15;
        *((double *)v14 + 1) = v16;
        v17 = v14 + 16;
      }
      a3[1] = v17;
      v34 = *v5;
      v35 = v53;
      if (v17 >= v13)
      {
        v36 = *a3;
        v37 = (v17 - *a3) >> 4;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
          sub_100259694();
        v39 = v13 - v36;
        if (v39 >> 3 > v38)
          v38 = v39 >> 3;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)sub_10028E224((uint64_t)v10, v40);
          v36 = *a3;
          v17 = a3[1];
        }
        else
        {
          v41 = 0;
        }
        v48 = (double *)&v41[16 * v37];
        *v48 = v34;
        v48[1] = v35;
        v49 = v48;
        if (v17 == v36)
          goto LABEL_64;
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v17 - 1);
          v49 -= 2;
          v17 -= 16;
        }
        while (v17 != v36);
LABEL_63:
        v36 = *a3;
LABEL_64:
        v44 = (char *)(v48 + 2);
        *a3 = (char *)v49;
        a3[1] = (char *)(v48 + 2);
        a3[2] = &v41[16 * v40];
        if (v36)
          operator delete(v36);
        goto LABEL_66;
      }
    }
    else
    {
      v18 = v52;
      v19 = *v5;
      if (v14 >= v13)
      {
        v26 = *a3;
        v27 = (v14 - *a3) >> 4;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60)
          sub_100259694();
        v29 = v13 - v26;
        if (v29 >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)sub_10028E224((uint64_t)v10, v30);
          v26 = *a3;
          v14 = a3[1];
        }
        else
        {
          v31 = 0;
        }
        v42 = &v31[16 * v27];
        *(double *)v42 = v18;
        *((double *)v42 + 1) = v19;
        v43 = v42;
        if (v14 != v26)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v14 - 1);
            v43 -= 16;
            v14 -= 16;
          }
          while (v14 != v26);
          v26 = *a3;
        }
        v13 = &v31[16 * v30];
        v17 = v42 + 16;
        *a3 = v43;
        a3[1] = v42 + 16;
        a3[2] = v13;
        if (v26)
        {
          operator delete(v26);
          v13 = *v10;
        }
      }
      else
      {
        *(double *)v14 = v52;
        *((double *)v14 + 1) = v19;
        v17 = v14 + 16;
      }
      a3[1] = v17;
      v34 = v53;
      v35 = *v5;
      if (v17 >= v13)
      {
        v36 = *a3;
        v45 = (v17 - *a3) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          sub_100259694();
        v47 = v13 - v36;
        if (v47 >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v46;
        if (v40)
        {
          v41 = (char *)sub_10028E224((uint64_t)v10, v40);
          v36 = *a3;
          v17 = a3[1];
        }
        else
        {
          v41 = 0;
        }
        v48 = (double *)&v41[16 * v45];
        *v48 = v34;
        v48[1] = v35;
        v49 = v48;
        if (v17 == v36)
          goto LABEL_64;
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v17 - 1);
          v49 -= 2;
          v17 -= 16;
        }
        while (v17 != v36);
        goto LABEL_63;
      }
    }
    *(double *)v17 = v34;
    *((double *)v17 + 1) = v35;
    v44 = v17 + 16;
LABEL_66:
    a3[1] = v44;
    v11 = v11 + (v53 - v52) * *v5;
    v12 = v12 + v53 - v52;
LABEL_67:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v5;
  }
  while (v5 != v6);
  if (v12 != 0.0)
  {
    *a4 = v11 / v12;
    return 1;
  }
  return 0;
}

void sub_100DC65EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DC6624(double **a1@<X0>, int a2@<W1>, double **a3@<X8>, double a4@<D0>)
{
  double *v4;
  double *v5;
  double *v9;
  char **v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  char *v15;
  double v16;
  double *v17;
  double v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  double *v40;
  double *v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double *v46;
  double *v47;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v9 = 0;
    v10 = (char **)(a3 + 2);
    do
    {
      v11 = v4 + 1;
      if (a2)
        v12 = v4;
      else
        v12 = v4 + 1;
      v13 = v4[2];
      if (vabdd_f64(*v12, a4) > v13)
        goto LABEL_72;
      v14 = sqrt(v13 * v13 - (a4 - *v12) * (a4 - *v12));
      v15 = *v10;
      if (a2)
      {
        v16 = v14 + *v11;
        if (v9 >= (double *)v15)
        {
          v19 = *a3;
          v20 = ((char *)v9 - (char *)*a3) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_100259694();
          v22 = v15 - (char *)v19;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)sub_10028E224((uint64_t)v10, v23);
            v19 = *a3;
            v9 = a3[1];
          }
          else
          {
            v24 = 0;
          }
          v31 = (double *)&v24[16 * v20];
          *v31 = a4;
          v31[1] = v16;
          v32 = v31;
          if (v9 != v19)
          {
            do
            {
              *((_OWORD *)v32 - 1) = *((_OWORD *)v9 - 1);
              v32 -= 2;
              v9 -= 2;
            }
            while (v9 != v19);
            v19 = *a3;
          }
          v15 = &v24[16 * v23];
          v17 = v31 + 2;
          *a3 = v32;
          a3[1] = v31 + 2;
          a3[2] = (double *)v15;
          if (v19)
          {
            operator delete(v19);
            v15 = *v10;
          }
        }
        else
        {
          *v9 = a4;
          v9[1] = v16;
          v17 = v9 + 2;
        }
        a3[1] = v17;
        v33 = *v11 - v14;
        if (v17 >= (double *)v15)
        {
          v34 = *a3;
          v35 = ((char *)v17 - (char *)*a3) >> 4;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 60)
            sub_100259694();
          v37 = v15 - (char *)v34;
          if (v37 >> 3 > v36)
            v36 = v37 >> 3;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
            v38 = 0xFFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_10028E224((uint64_t)v10, v38);
            v34 = *a3;
            v17 = a3[1];
          }
          else
          {
            v39 = 0;
          }
          v46 = (double *)&v39[16 * v35];
          *v46 = a4;
          v46[1] = v33;
          v47 = v46;
          if (v17 != v34)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v17 - 1);
              v47 -= 2;
              v17 -= 2;
            }
            while (v17 != v34);
            goto LABEL_68;
          }
          goto LABEL_69;
        }
        *v17 = a4;
        v17[1] = v33;
      }
      else
      {
        v18 = v14 + *v4;
        if (v9 >= (double *)v15)
        {
          v25 = *a3;
          v26 = ((char *)v9 - (char *)*a3) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            sub_100259694();
          v28 = v15 - (char *)v25;
          if (v28 >> 3 > v27)
            v27 = v28 >> 3;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)sub_10028E224((uint64_t)v10, v29);
            v25 = *a3;
            v9 = a3[1];
          }
          else
          {
            v30 = 0;
          }
          v40 = (double *)&v30[16 * v26];
          *v40 = v18;
          v40[1] = a4;
          v41 = v40;
          if (v9 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v9 - 1);
              v41 -= 2;
              v9 -= 2;
            }
            while (v9 != v25);
            v25 = *a3;
          }
          v15 = &v30[16 * v29];
          v17 = v40 + 2;
          *a3 = v41;
          a3[1] = v40 + 2;
          a3[2] = (double *)v15;
          if (v25)
          {
            operator delete(v25);
            v15 = *v10;
          }
        }
        else
        {
          *v9 = v18;
          v9[1] = a4;
          v17 = v9 + 2;
        }
        a3[1] = v17;
        v42 = *v4 - v14;
        if (v17 >= (double *)v15)
        {
          v34 = *a3;
          v43 = ((char *)v17 - (char *)*a3) >> 4;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60)
            sub_100259694();
          v45 = v15 - (char *)v34;
          if (v45 >> 3 > v44)
            v44 = v45 >> 3;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
            v38 = 0xFFFFFFFFFFFFFFFLL;
          else
            v38 = v44;
          if (v38)
          {
            v39 = (char *)sub_10028E224((uint64_t)v10, v38);
            v34 = *a3;
            v17 = a3[1];
          }
          else
          {
            v39 = 0;
          }
          v46 = (double *)&v39[16 * v43];
          *v46 = v42;
          v46[1] = a4;
          v47 = v46;
          if (v17 != v34)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v17 - 1);
              v47 -= 2;
              v17 -= 2;
            }
            while (v17 != v34);
LABEL_68:
            v34 = *a3;
          }
LABEL_69:
          v9 = v46 + 2;
          *a3 = v47;
          a3[1] = v46 + 2;
          a3[2] = (double *)&v39[16 * v38];
          if (v34)
            operator delete(v34);
          goto LABEL_71;
        }
        *v17 = v42;
        v17[1] = a4;
      }
      v9 = v17 + 2;
LABEL_71:
      a3[1] = v9;
LABEL_72:
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_100DC69D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC6A08(float64x2_t **a1, float64x2_t **a2, int a3, double *a4, double *a5)
{
  float64x2_t *v5;
  float64x2_t *v6;
  char v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v11;
  double *v12;
  double v13;
  double v14;

  *a5 = -1.79769313e308;
  *a4 = 1.79769313e308;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    v9 = a1[1];
    do
    {
      if (v8 == v9)
      {
LABEL_7:
        v12 = &v5->f64[1];
        if (!a3)
          v12 = (double *)v5;
        v13 = *v12;
        v14 = *a5;
        if (*a5 < *v12)
          v14 = *v12;
        *a5 = v14;
        if (v13 >= *a4)
          v13 = *a4;
        *a4 = v13;
        v7 = 1;
      }
      else
      {
        v10 = v8;
        while (1)
        {
          v11 = vsubq_f64(*v10, *v5);
          if (vaddvq_f64(vmulq_f64(v11, v11)) - v10[1].f64[0] * v10[1].f64[0] >= 0.01)
            break;
          v10 = (float64x2_t *)((char *)v10 + 24);
          if (v10 == v9)
            goto LABEL_7;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return v7 & 1;
}

void sub_100DC6AC4(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

__n128 sub_100DC6AF0(__n128 *a1, __n128 *a2, __n128 *a3)
{
  signed __int32 v3;
  signed __int32 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 result;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;

  v3 = a2[3].n128_i32[0];
  v4 = a3[3].n128_i32[0];
  if (v3 >= (signed __int32)a1[3].n128_u32[0])
  {
    if (v4 < v3)
    {
      v35 = a2[2];
      v39 = a2[3];
      v43 = a2[4];
      v47 = a2[5];
      v27 = *a2;
      v31 = a2[1];
      v9 = a3[1];
      *a2 = *a3;
      a2[1] = v9;
      v10 = a3[5];
      v12 = a3[2];
      v11 = a3[3];
      a2[4] = a3[4];
      a2[5] = v10;
      a2[2] = v12;
      a2[3] = v11;
      a3[4] = v43;
      a3[5] = v47;
      a3[2] = v35;
      a3[3] = v39;
      result = v27;
      *a3 = v27;
      a3[1] = v31;
      if ((signed __int32)a2[3].n128_u32[0] < (signed __int32)a1[3].n128_u32[0])
      {
        v36 = a1[2];
        v40 = a1[3];
        v44 = a1[4];
        v48 = a1[5];
        v28 = *a1;
        v32 = a1[1];
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        v15 = a2[5];
        v17 = a2[2];
        v16 = a2[3];
        a1[4] = a2[4];
        a1[5] = v15;
        a1[2] = v17;
        a1[3] = v16;
        a2[4] = v44;
        a2[5] = v48;
        a2[2] = v36;
        a2[3] = v40;
        result = v28;
        *a2 = v28;
        a2[1] = v32;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v37 = a1[2];
      v41 = a1[3];
      v45 = a1[4];
      v49 = a1[5];
      v29 = *a1;
      v33 = a1[1];
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      v19 = a2[5];
      v21 = a2[2];
      v20 = a2[3];
      a1[4] = a2[4];
      a1[5] = v19;
      a1[2] = v21;
      a1[3] = v20;
      a2[4] = v45;
      a2[5] = v49;
      a2[2] = v37;
      a2[3] = v41;
      result = v29;
      *a2 = v29;
      a2[1] = v33;
      if ((signed __int32)a3[3].n128_u32[0] >= (signed __int32)a2[3].n128_u32[0])
        return result;
      v34 = a2[2];
      v38 = a2[3];
      v42 = a2[4];
      v46 = a2[5];
      v26 = *a2;
      v30 = a2[1];
      v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      v23 = a3[5];
      v25 = a3[2];
      v24 = a3[3];
      a2[4] = a3[4];
      a2[5] = v23;
      a2[2] = v25;
      a2[3] = v24;
    }
    else
    {
      v34 = a1[2];
      v38 = a1[3];
      v42 = a1[4];
      v46 = a1[5];
      v26 = *a1;
      v30 = a1[1];
      v5 = a3[1];
      *a1 = *a3;
      a1[1] = v5;
      v6 = a3[5];
      v8 = a3[2];
      v7 = a3[3];
      a1[4] = a3[4];
      a1[5] = v6;
      a1[2] = v8;
      a1[3] = v7;
    }
    a3[4] = v42;
    a3[5] = v46;
    a3[2] = v34;
    a3[3] = v38;
    result = v26;
    *a3 = v26;
    a3[1] = v30;
  }
  return result;
}

BOOL sub_100DC6C98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[28];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 48))
      {
        v49 = *(_OWORD *)(a1 + 32);
        v55 = *(_OWORD *)(a1 + 48);
        v60 = *(_OWORD *)(a1 + 64);
        v65 = *(_OWORD *)(a1 + 80);
        v37 = *(__n128 *)a1;
        v43 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        v7 = *(_OWORD *)(a2 - 16);
        v9 = *(_OWORD *)(a2 - 64);
        v8 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a2 - 64) = v49;
        *(_OWORD *)(a2 - 48) = v55;
        *(_OWORD *)(a2 - 32) = v60;
        *(_OWORD *)(a2 - 16) = v65;
        *(__n128 *)(a2 - 96) = v37;
        *(_OWORD *)(a2 - 80) = v43;
      }
      return result;
    case 3uLL:
      sub_100DC6AF0((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a2 - 96));
      return 1;
    case 4uLL:
      sub_100DC704C((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192), (__n128 *)(a2 - 96));
      return 1;
    case 5uLL:
      v21 = (__n128 *)(a1 + 96);
      v22 = (__n128 *)(a1 + 192);
      v23 = (__n128 *)(a1 + 288);
      sub_100DC704C((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192), (__n128 *)(a1 + 288));
      if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(a1 + 336))
        return 1;
      v51 = *(_OWORD *)(a1 + 320);
      v56 = *(_OWORD *)(a1 + 336);
      v61 = *(_OWORD *)(a1 + 352);
      v66 = *(_OWORD *)(a1 + 368);
      v39 = *v23;
      v45 = *(_OWORD *)(a1 + 304);
      v24 = *(_OWORD *)(a2 - 80);
      *v23 = *(__n128 *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      v25 = *(_OWORD *)(a2 - 16);
      v27 = *(_OWORD *)(a2 - 64);
      v26 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 368) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a2 - 64) = v51;
      *(_OWORD *)(a2 - 48) = v56;
      *(_OWORD *)(a2 - 32) = v61;
      *(_OWORD *)(a2 - 16) = v66;
      *(__n128 *)(a2 - 96) = v39;
      *(_OWORD *)(a2 - 80) = v45;
      if (*(_DWORD *)(a1 + 336) >= *(_DWORD *)(a1 + 240))
        return 1;
      v52 = *(_OWORD *)(a1 + 224);
      v57 = *(_OWORD *)(a1 + 240);
      v62 = *(_OWORD *)(a1 + 256);
      v67 = *(_OWORD *)(a1 + 272);
      v40 = *v22;
      v46 = *(_OWORD *)(a1 + 208);
      v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      v29 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 272) = v29;
      v30 = *(_OWORD *)(a1 + 304);
      *v22 = *v23;
      *(_OWORD *)(a1 + 208) = v30;
      *v23 = v40;
      *(_OWORD *)(a1 + 304) = v46;
      *(_OWORD *)(a1 + 352) = v62;
      *(_OWORD *)(a1 + 368) = v67;
      *(_OWORD *)(a1 + 320) = v52;
      *(_OWORD *)(a1 + 336) = v57;
      if (*(_DWORD *)(a1 + 240) >= *(_DWORD *)(a1 + 144))
        return 1;
      v53 = *(_OWORD *)(a1 + 128);
      v58 = *(_OWORD *)(a1 + 144);
      v63 = *(_OWORD *)(a1 + 160);
      v68 = *(_OWORD *)(a1 + 176);
      v41 = *v21;
      v47 = *(_OWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      v32 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 176) = v32;
      v33 = *(_OWORD *)(a1 + 208);
      *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v33;
      *v22 = v41;
      *(_OWORD *)(a1 + 208) = v47;
      *(_OWORD *)(a1 + 256) = v63;
      *(_OWORD *)(a1 + 272) = v68;
      *(_OWORD *)(a1 + 224) = v53;
      *(_OWORD *)(a1 + 240) = v58;
      if (*(_DWORD *)(a1 + 144) >= *(_DWORD *)(a1 + 48))
        return 1;
      v54 = *(_OWORD *)(a1 + 32);
      v59 = *(_OWORD *)(a1 + 48);
      v64 = *(_OWORD *)(a1 + 64);
      v69 = *(_OWORD *)(a1 + 80);
      v42 = *(__n128 *)a1;
      v48 = *(_OWORD *)(a1 + 16);
      v34 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v34;
      v35 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 80) = v35;
      v36 = *(_OWORD *)(a1 + 112);
      *(__n128 *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v36;
      *v21 = v42;
      *(_OWORD *)(a1 + 112) = v48;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v69;
      result = 1;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 144) = v59;
      return result;
    default:
      v10 = a1 + 192;
      sub_100DC6AF0((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192));
      v11 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_DWORD *)(v11 + 48);
    if (v14 < *(_DWORD *)(v10 + 48))
    {
      v38 = *(_OWORD *)v11;
      v44 = *(_OWORD *)(v11 + 16);
      v50 = *(_OWORD *)(v11 + 32);
      v70 = *(_OWORD *)(v11 + 52);
      *(_OWORD *)v71 = *(_OWORD *)(v11 + 68);
      v15 = v12;
      *(_OWORD *)&v71[12] = *(_OWORD *)(v11 + 80);
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 240);
        *(_OWORD *)(v16 + 320) = *(_OWORD *)(a1 + v15 + 224);
        *(_OWORD *)(v16 + 336) = v17;
        v18 = *(_OWORD *)(a1 + v15 + 272);
        *(_OWORD *)(v16 + 352) = *(_OWORD *)(a1 + v15 + 256);
        *(_OWORD *)(v16 + 368) = v18;
        v19 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 288) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 304) = v19;
        if (v15 == -192)
          break;
        v15 -= 96;
        if (v14 >= *(_DWORD *)(v16 + 144))
        {
          v20 = a1 + v15 + 288;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_OWORD *)v20 = v38;
      *(_OWORD *)(v20 + 16) = v44;
      *(_OWORD *)(v20 + 32) = v50;
      *(_OWORD *)(v20 + 52) = v70;
      *(_DWORD *)(v20 + 48) = v14;
      *(_OWORD *)(v20 + 68) = *(_OWORD *)v71;
      ++v13;
      *(_OWORD *)(v20 + 80) = *(_OWORD *)&v71[12];
      if (v13 == 8)
        return v11 + 96 == a2;
    }
    v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_100DC704C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;

  result.n128_u64[0] = sub_100DC6AF0(a1, a2, a3).n128_u64[0];
  if ((signed __int32)a4[3].n128_u32[0] < (signed __int32)a3[3].n128_u32[0])
  {
    v27 = a3[2];
    v30 = a3[3];
    v33 = a3[4];
    v36 = a3[5];
    v21 = *a3;
    v24 = a3[1];
    v9 = a4[1];
    *a3 = *a4;
    a3[1] = v9;
    v10 = a4[5];
    v12 = a4[2];
    v11 = a4[3];
    a3[4] = a4[4];
    a3[5] = v10;
    a3[2] = v12;
    a3[3] = v11;
    a4[4] = v33;
    a4[5] = v36;
    a4[2] = v27;
    a4[3] = v30;
    result = v21;
    *a4 = v21;
    a4[1] = v24;
    if ((signed __int32)a3[3].n128_u32[0] < (signed __int32)a2[3].n128_u32[0])
    {
      v28 = a2[2];
      v31 = a2[3];
      v34 = a2[4];
      v37 = a2[5];
      v22 = *a2;
      v25 = a2[1];
      v13 = a3[1];
      *a2 = *a3;
      a2[1] = v13;
      v14 = a3[5];
      v16 = a3[2];
      v15 = a3[3];
      a2[4] = a3[4];
      a2[5] = v14;
      a2[2] = v16;
      a2[3] = v15;
      a3[4] = v34;
      a3[5] = v37;
      a3[2] = v28;
      a3[3] = v31;
      result = v22;
      *a3 = v22;
      a3[1] = v25;
      if ((signed __int32)a2[3].n128_u32[0] < (signed __int32)a1[3].n128_u32[0])
      {
        v29 = a1[2];
        v32 = a1[3];
        v35 = a1[4];
        v38 = a1[5];
        v23 = *a1;
        v26 = a1[1];
        v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        v18 = a2[5];
        v20 = a2[2];
        v19 = a2[3];
        a1[4] = a2[4];
        a1[5] = v18;
        a1[2] = v20;
        a1[3] = v19;
        a2[4] = v35;
        a2[5] = v38;
        a2[2] = v29;
        a2[3] = v32;
        result = v23;
        *a2 = v23;
        a2[1] = v26;
      }
    }
  }
  return result;
}

uint64_t *sub_100DC7190(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100DC71E4(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100DC71CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100DC71E4(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002104A0(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *sub_100DC7268(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_10025E660(result, a4);
    return (_QWORD *)sub_100DC72D4(v6, a2, a3);
  }
  return result;
}

void sub_100DC72B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC72D4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_QWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = a2[4];
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *sub_100DC732C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = sub_100DC7384(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100DC7370(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DC7384(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_102186B68;
  a1[1] = 0;
  sub_10022BEF4(a1 + 3, a2);
  return a1;
}

void sub_100DC73BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100DC73D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102186B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DC73E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102186B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100DC7418(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void sub_100DC745C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100DC74F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100DC7510()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100DC759C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100DC75B4(char *a1, int *a2, uint64_t a3)
{
  int v4;
  BOOL v5;
  char v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  NSObject *v11;
  int v12;
  int v13;
  uint8_t *v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  v4 = *a2;
  if ((*a2 & 0xFFFFFFFE) == 6
    && (*(_BYTE *)(a3 + 96) ? (v5 = *(_DWORD *)(a3 + 48) <= 0) : (v5 = 1),
        v5 ? (v6 = 0) : (v6 = 1),
        *a1 = v6,
        a1[1] = 0,
        v4 == 7))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102186BA8);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a1;
      v9 = a1[1];
      *(_DWORD *)buf = 67109376;
      v17 = v8;
      v18 = 1024;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "LocationController,WifiAssoc,%d,AssocLoc,%d,Roam", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102186BA8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,WifiAssoc,%d,AssocLoc,%d,Roam", &v15);
LABEL_26:
      v14 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerWiFiAssociationTracker::updateWithWifiService(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v10);
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102186BA8);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a1;
      v13 = a1[1];
      *(_DWORD *)buf = 67109376;
      v17 = v12;
      v18 = 1024;
      v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "LocationController,WifiAssoc,%d,AssocLoc,%d,LinkStatus", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102186BA8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,WifiAssoc,%d,AssocLoc,%d,LinkStatus", &v15);
      goto LABEL_26;
    }
  }
}

void sub_100DC78CC(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  v3 = *(unsigned __int8 *)(a2 + 768);
  a1[1] = v3;
  if (v3)
    v4 = *a1 == 0;
  else
    v4 = 0;
  if (v4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102186BA8);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "LocationController,Associated WiFi location without association", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102186BA8);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "LocationController,Associated WiFi location without association", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationControllerWiFiAssociationTracker::updateWithWifiLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a1 = 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102186BA8);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a1;
    v8 = a1[1];
    *(_DWORD *)buf = 67109376;
    v19 = v7;
    v20 = 1024;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "LocationController,WifiAssoc,%d,AssocLoc,%d,Location", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102186BA8);
    v9 = *a1;
    v10 = a1[1];
    v15[0] = 67109376;
    v15[1] = v9;
    v16 = 1024;
    v17 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,WifiAssoc,%d,AssocLoc,%d,Location", v15, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerWiFiAssociationTracker::updateWithWifiLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_100DC7BE4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100DC7CB4(id a1)
{
  qword_102308598 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLRunningAggregatorAWDSilo"));
}

id sub_100DC7E34(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5;
  _BYTE v7[320];

  v5 = *a2;
  memcpy(v7, __src, sizeof(v7));
  return objc_msgSend(a4, "onStepNotification:data:", v5, v7);
}

uint64_t sub_100DC7F88(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = 32 * (v6 - v7) - 1;
  v9 = a1[4];
  v10 = a1[5];
  v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_100DC83B8(a1);
    v9 = a1[4];
    v10 = a1[5];
    v7 = a1[1];
    v11 = v9 + v10;
  }
  v12 = (_QWORD *)(*(_QWORD *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11);
  *v12 = *a2;
  v12[1] = *a3;
  v13 = v10 + 1;
  a1[5] = v13;
  v14 = v9 + v13;
  v15 = (_QWORD *)(v7 + 8 * (v14 >> 8));
  if ((_BYTE)v14)
    v16 = *v15 + 16 * v14;
  else
    v16 = *(v15 - 1) + 4096;
  return v16 - 16;
}

void sub_100DC83B8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100DC8680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100DC86CC()
{
  sub_1015A2E04(qword_102308580, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308580, (void *)&_mh_execute_header);
}

void sub_100DC87B4(id a1)
{
  qword_1023085A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLGatheringServiceSilo"));
}

void sub_100DC8824(id a1)
{
  int v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_100197040();
  v1 = sub_1000C4240();
  sub_100197040();
  v2 = sub_1001AA9A8();
  if ((v2 - 68) < 6 || v2 == 175 || !v1)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_102186C28);
    v3 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_102186C28);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "not supported on this platform", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "+[CLGatheringService isSupported]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    byte_1023085B8 = 1;
  }
}

void sub_100DC8FF4(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

_QWORD *sub_100DC9020(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100DC90EC((uint64_t)a1, "CLSwimPersistence", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102186C58;
  a1[9] = off_102186D08;
  sub_100E81598(a1 + 57, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100DC90C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC90EC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102187398;
  *(_QWORD *)(a1 + 72) = off_102187440;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102187398;
  *(_QWORD *)(a1 + 72) = off_102187440;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 376) = 12000;
  *(_QWORD *)(a1 + 384) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 392));
  *(_QWORD *)(a1 + 392) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100DC9494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[48] = off_10213DEB0;
  sub_100427950(v27);
  sub_10047F6F4(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100DC9538()
{
  JUMPOUT(0x100DC9518);
}

_QWORD *sub_100DC9540(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102187440;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102187398;
  a1[48] = off_10213DEB0;
  sub_100427950(a1 + 49);
  sub_10047F6F4(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100DC95C0(uint64_t a1)
{
  return sub_100DC9540((_QWORD *)(a1 - 72));
}

void sub_100DC95C8(_QWORD *a1)
{
  sub_100DC9540(a1);
  operator delete();
}

void sub_100DC95EC(uint64_t a1)
{
  sub_100DC9540((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100DC9614@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM SwimDistributions ORDER BY id DESC");
  return result;
}

void sub_100DC9964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC99A8(uint64_t a1)
{
  if (sub_100DC99E4(a1))
    sub_100DC9D74(a1, 100, 75);
}

uint64_t sub_100DC99E4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO SwimDistributions (loiUuid, poolLength, style, mean, median, min, max, stddev, samples, prctile10, prctile90, uuid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return 0;
}

void sub_100DC9D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_100DC9D74(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (a3 >= a2)
  {
    sub_10192A880();
    __break(1u);
    dispatch_once(&qword_10229FCA0, &stru_102186D98);
    v8 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Unable to purge old records.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (*(_QWORD *)(v4 + 3232) != -1)
        dispatch_once(&qword_10229FCA0, &stru_102186D98);
      v12[0] = 0;
      v11 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 17, "Unable to purge old records.", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLSwimPersistence::purgeDistributions(int, int)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v7 = sub_100DC9FC4(a1);
    if (sub_10008950C(a1 + 72))
    {
      if (v7 >= a2)
        sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE From SwimDistributions WHERE id <= (SELECT MAX(id) From SwimDistributions) - ?");
    }
  }
}

void sub_100DC9F98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC9FC4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM SwimDistributions");
  return 0xFFFFFFFFLL;
}

void sub_100DCA1CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCA1F8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM SwimDistributions");
  return result;
}

void sub_100DCA3DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCA408(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SwimHistory ORDER by rowid DESC limit ?");
  return 109;
}

void sub_100DCA74C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCA778(uint64_t a1, uint64_t *a2, void **a3)
{
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  sub_10001E638(*(_QWORD *)(a1 + 80));
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  v40[0] = 0;
  v40[1] = 0;
  sub_100681850(a1, (unsigned __int8 *)v40);
  for (; !sub_100DCB830(a2, (uint64_t)&v41); a3[1] = v15)
  {
    uuid_copy((unsigned __int8 *)&v42 + 8, (const unsigned __int8 *)v40);
    v6 = (char *)a3[1];
    v7 = (char *)a3[2];
    if (v6 >= v7)
    {
      v16 = 0x86BCA1AF286BCA1BLL * ((v6 - (_BYTE *)*a3) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0x1AF286BCA1AF286)
        sub_100259694();
      v18 = 0x86BCA1AF286BCA1BLL * ((v7 - (_BYTE *)*a3) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0xD79435E50D7943)
        v19 = 0x1AF286BCA1AF286;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)sub_100808E8C((uint64_t)(a3 + 2), v19);
      else
        v20 = 0;
      v21 = &v20[152 * v16];
      v22 = v42;
      *(_OWORD *)v21 = v41;
      *((_OWORD *)v21 + 1) = v22;
      v23 = v43;
      v24 = v44;
      v25 = v46;
      *((_OWORD *)v21 + 4) = v45;
      *((_OWORD *)v21 + 5) = v25;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      v26 = v47;
      v27 = v48;
      v28 = v49;
      *((_QWORD *)v21 + 18) = v50;
      *((_OWORD *)v21 + 7) = v27;
      *((_OWORD *)v21 + 8) = v28;
      *((_OWORD *)v21 + 6) = v26;
      v30 = (char *)*a3;
      v29 = (char *)a3[1];
      v31 = v21;
      if (v29 != *a3)
      {
        do
        {
          v32 = *(_OWORD *)(v29 - 152);
          *(_OWORD *)(v31 - 136) = *(_OWORD *)(v29 - 136);
          *(_OWORD *)(v31 - 152) = v32;
          v33 = *(_OWORD *)(v29 - 120);
          v34 = *(_OWORD *)(v29 - 104);
          v35 = *(_OWORD *)(v29 - 88);
          *(_OWORD *)(v31 - 72) = *(_OWORD *)(v29 - 72);
          *(_OWORD *)(v31 - 88) = v35;
          *(_OWORD *)(v31 - 104) = v34;
          *(_OWORD *)(v31 - 120) = v33;
          v36 = *(_OWORD *)(v29 - 56);
          v37 = *(_OWORD *)(v29 - 40);
          v38 = *(_OWORD *)(v29 - 24);
          *((_QWORD *)v31 - 1) = *((_QWORD *)v29 - 1);
          *(_OWORD *)(v31 - 24) = v38;
          *(_OWORD *)(v31 - 40) = v37;
          *(_OWORD *)(v31 - 56) = v36;
          v31 -= 152;
          v29 -= 152;
        }
        while (v29 != v30);
        v29 = (char *)*a3;
      }
      v15 = v21 + 152;
      *a3 = v31;
      a3[1] = v21 + 152;
      a3[2] = &v20[152 * v19];
      if (v29)
        operator delete(v29);
    }
    else
    {
      v8 = v42;
      *(_OWORD *)v6 = v41;
      *((_OWORD *)v6 + 1) = v8;
      v9 = v43;
      v10 = v44;
      v11 = v46;
      *((_OWORD *)v6 + 4) = v45;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 2) = v9;
      *((_OWORD *)v6 + 3) = v10;
      v12 = v47;
      v13 = v48;
      v14 = v49;
      *((_QWORD *)v6 + 18) = v50;
      *((_OWORD *)v6 + 7) = v13;
      *((_OWORD *)v6 + 8) = v14;
      *((_OWORD *)v6 + 6) = v12;
      v15 = v6 + 152;
    }
  }
  return sub_10001E99C(*(_QWORD *)(a1 + 80));
}

uint64_t sub_100DCAA08(uint64_t a1, const unsigned __int8 *a2)
{
  uuid_string_t out;

  if (sub_10008950C(a1 + 72))
  {
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SwimHistory WHERE uuid = ?");
  }
  return 109;
}

void sub_100DCAC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCAC78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 uu1[8];
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_100681850((uint64_t)a1, (unsigned __int8 *)v10);
  if (!sub_10008950C(a1 + 9))
    return 109;
  *(_QWORD *)uu1 = 0;
  v9 = 0;
  sub_100681850((uint64_t)a1, uu1);
  if (!uuid_is_null((const unsigned __int8 *)(a2 + 24)) && !uuid_compare(uu1, (const unsigned __int8 *)(a2 + 24)))
    sub_1000CDA68(a1[10], "SELECT * from SwimHistory WHERE id >= ?");
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
  return 100;
}

void sub_100DCAF04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCAF30(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  uint8_t buf[1640];

  v5 = a1 + 14;
  v4 = a1[14];
  v13 = a1 + 14;
  (*(void (**)(_QWORD *))(v4 + 16))(a1 + 14);
  v14 = 256;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_QWORD *)(a2 + 144) = 0;
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2);
  if (v6)
  {
    if (v6 != 1)
    {
      v8 = 109;
      goto LABEL_10;
    }
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102186D98);
    v7 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#Warning returning default entry after querying empty db for most recent lap", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102186D98);
      v12 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "#Warning returning default entry after querying empty db for most recent lap", &v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CMError CLSwimPersistence::getMostRecentLap(CLSwimEntry &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v8 = 100;
LABEL_10:
  (*(void (**)(_QWORD *))(*v5 + 24))(v5);
  return v8;
}

void sub_100DCB140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DCB168(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v41[2];
  uuid_t dst;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uuid_t uu;

  if (!sub_10008950C(a1 + 9))
    return 109;
  memset(uu, 0, sizeof(uu));
  uuid_parse("00000000-0000-0000-0000-000000000000", uu);
  if (uuid_is_null((const unsigned __int8 *)(a2 + 24)) && uuid_compare(uu, (const unsigned __int8 *)(a2 + 8)))
  {
    memset(dst, 0, sizeof(dst));
    uuid_copy(dst, (const unsigned __int8 *)(a2 + 8));
    return sub_100DCAA08((uint64_t)a1, dst);
  }
  else
  {
    v6 = sub_100DCAC78(a1, a2, (uint64_t)a3);
    if ((_DWORD)v6 == 100)
    {
      if (*a3 == a3[1])
      {
        v51 = 0;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        *(_OWORD *)dst = 0u;
        v6 = sub_100DCAF30(a1, (uint64_t)dst);
        if ((_DWORD)v6 == 100)
        {
          v41[0] = 0;
          v41[1] = 0;
          sub_100681850((uint64_t)a1, (unsigned __int8 *)v41);
          uuid_copy((unsigned __int8 *)&v43 + 8, (const unsigned __int8 *)v41);
          v7 = (char *)a3[2];
          v8 = (char *)a3[1];
          if (v8 >= v7)
          {
            v17 = 0x86BCA1AF286BCA1BLL * ((v8 - (_BYTE *)*a3) >> 3);
            v18 = v17 + 1;
            if (v17 + 1 > 0x1AF286BCA1AF286)
              sub_100259694();
            v19 = 0x86BCA1AF286BCA1BLL * ((v7 - (_BYTE *)*a3) >> 3);
            if (2 * v19 > v18)
              v18 = 2 * v19;
            if (v19 >= 0xD79435E50D7943)
              v20 = 0x1AF286BCA1AF286;
            else
              v20 = v18;
            if (v20)
              v21 = (char *)sub_100808E8C((uint64_t)(a3 + 2), v20);
            else
              v21 = 0;
            v22 = &v21[152 * v17];
            v23 = &v21[152 * v20];
            v24 = v43;
            *(_OWORD *)v22 = *(_OWORD *)dst;
            *((_OWORD *)v22 + 1) = v24;
            v25 = v44;
            v26 = v45;
            v27 = v47;
            *((_OWORD *)v22 + 4) = v46;
            *((_OWORD *)v22 + 5) = v27;
            *((_OWORD *)v22 + 2) = v25;
            *((_OWORD *)v22 + 3) = v26;
            v28 = v48;
            v29 = v49;
            v30 = v50;
            *((_QWORD *)v22 + 18) = v51;
            *((_OWORD *)v22 + 7) = v29;
            *((_OWORD *)v22 + 8) = v30;
            *((_OWORD *)v22 + 6) = v28;
            v16 = v22 + 152;
            v32 = (char *)*a3;
            v31 = (char *)a3[1];
            if (v31 != *a3)
            {
              do
              {
                v33 = *(_OWORD *)(v31 - 152);
                *(_OWORD *)(v22 - 136) = *(_OWORD *)(v31 - 136);
                *(_OWORD *)(v22 - 152) = v33;
                v34 = *(_OWORD *)(v31 - 120);
                v35 = *(_OWORD *)(v31 - 104);
                v36 = *(_OWORD *)(v31 - 88);
                *(_OWORD *)(v22 - 72) = *(_OWORD *)(v31 - 72);
                *(_OWORD *)(v22 - 88) = v36;
                *(_OWORD *)(v22 - 104) = v35;
                *(_OWORD *)(v22 - 120) = v34;
                v37 = *(_OWORD *)(v31 - 56);
                v38 = *(_OWORD *)(v31 - 40);
                v39 = *(_OWORD *)(v31 - 24);
                *((_QWORD *)v22 - 1) = *((_QWORD *)v31 - 1);
                *(_OWORD *)(v22 - 24) = v39;
                *(_OWORD *)(v22 - 40) = v38;
                *(_OWORD *)(v22 - 56) = v37;
                v22 -= 152;
                v31 -= 152;
              }
              while (v31 != v32);
              v31 = (char *)*a3;
            }
            *a3 = v22;
            a3[1] = v16;
            a3[2] = v23;
            if (v31)
              operator delete(v31);
          }
          else
          {
            v9 = v43;
            *(_OWORD *)v8 = *(_OWORD *)dst;
            *((_OWORD *)v8 + 1) = v9;
            v10 = v44;
            v11 = v45;
            v12 = v47;
            *((_OWORD *)v8 + 4) = v46;
            *((_OWORD *)v8 + 5) = v12;
            *((_OWORD *)v8 + 2) = v10;
            *((_OWORD *)v8 + 3) = v11;
            v13 = v48;
            v14 = v49;
            v15 = v50;
            *((_QWORD *)v8 + 18) = v51;
            *((_OWORD *)v8 + 7) = v14;
            *((_OWORD *)v8 + 8) = v15;
            *((_OWORD *)v8 + 6) = v13;
            v16 = v8 + 152;
          }
          a3[1] = v16;
        }
      }
      else
      {
        return 100;
      }
    }
  }
  return v6;
}

uint64_t sub_100DCB460(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10001E638(a1[10]);
    v5 = *a2;
    v6 = a2[1];
    while (v5 != v6)
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 120))(a1, v5, 0);
      v5 += 152;
    }
    return sub_10001E99C(a1[10]);
  }
  return result;
}

uint64_t sub_100DCB4DC(uint64_t a1, _QWORD *a2)
{
  CFAbsoluteTimeGetCurrent();
  sub_100DCB510(a1, a2);
  return 0;
}

uint64_t sub_100DCB510(uint64_t a1, _QWORD *a2)
{
  if (*a2 != a2[1] && sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE from SwimHistory WHERE startTime < ?");
  return 0;
}

void sub_100DCB734(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCB760(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a1 - 72;
  CFAbsoluteTimeGetCurrent();
  sub_100DCB510(v3, a2);
  return 0;
}

uint64_t sub_100DCB794(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SwimHistory");
  return result;
}

void sub_100DCB810(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCB830(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const unsigned __int8 *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  double v23;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int64(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 8));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 2);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 3);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 4);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 5);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 6);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v14, 7);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 96) = sqlite3_column_int(v15, 8);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 100) = sqlite3_column_int(v16, 9);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v17, 10);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 108) = sqlite3_column_int(v18, 11);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 120) = sqlite3_column_int(v19, 12);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v20, 13);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 136) = sqlite3_column_double(v21, 14);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v23 = sqlite3_column_double(v22, 15);
  result = 0;
  *(_DWORD *)(a2 + 144) = (int)v23;
  return result;
}

uint64_t sub_100DCB9C8(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100DCBA54((uint64_t)a1);
    sub_100634364(a1[10], "SwimHistory", (const char **)&off_102186DB8, (const std::string::value_type **)&off_1022FB970, 0);
    sub_100634364(a1[10], "SwimDistributions", (const char **)&off_1021870E8, (const std::string::value_type **)&off_1022FB980, 0);
    result = sub_10063D314(a1[10], "SELECT * from SwimHistory ORDER BY rowid DESC LIMIT 1");
    a1[57] = result;
    a1[58] = v3;
  }
  return result;
}

BOOL sub_100DCBA54(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "SwimHistory");
  if (result)
  {
    v3 = "segment";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "SwimHistory", (uint64_t)"segment", (uint64_t)&v3);
  }
  return result;
}

void sub_100DCBE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  if (a21 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_1018B38B4((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_100DCBED0(uint64_t a1)
{
  sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM SwimHistory");
}

void sub_100DCBF38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_100DCBF58(uint64_t a1)
{
  sub_100DCBED0(a1 - 72);
}

void sub_100DCBF68(uint64_t a1)
{
  sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO SwimHistory (uuid, startTime, endTime, timestamp, pace, distance, poolLength, entryType, style, numberOfStrokes, totalLaps, segment, SWOLF, segmentSWOLF, kickCount) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
}

void sub_100DCC2C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCC2F0()
{
  return 0;
}

uint64_t sub_100DCC2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[1640];

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 456), &v11);
  if (v11)
  {
    v4 = sub_100DCB830(&v11, a2);
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102186D98);
    v5 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "SwimPersistence: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102186D98);
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 17, "SwimPersistence: failed to prepare getMostRecent #InvalidPreparedSQLStatement", &v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLSwimPersistence::getMostRecentRecordUL(CLSwimEntry &) const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v4 = 2;
  }
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_100DCC4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DCC510(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102187480);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187480);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLSwimEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100DCD6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void sub_100DCD9C8(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  char out[48];
  uint8_t buf[1640];

  v6 = a1 + 112;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if ((sub_10008950C(v6 - 40) & 1) != 0)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SwimHistory WHERE uuid = ? ORDER BY id ASC");
  }
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102186D98);
  v7 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102186D98);
    *(_WORD *)out = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "DB, not accessible", out, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "std::pair<CMError, std::vector<CLSwimEntry>> CLSwimPersistence::getAllRecordsForSessionId(unsigned char *) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_DWORD *)a3 = 109;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  sub_100DCF0D0((_QWORD *)(a3 + 8), 0, 0, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_100DCDE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_10187E514((uint64_t)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DCDE70(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_10192AA10(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100DCE27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100DCE2EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102187480);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102187480);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187480);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSwimEntry>::setDatabaseAccessible() [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100DCE8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100DCE90C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  id v38[2];
  int v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  uint64_t v46;
  _BYTE v47[40];
  double v48;

  v38[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v38[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v38);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v47);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187480);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102187480);
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v39, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 40);
    v8 = v48;
    v9 = v7 - v48;
    if (v7 - v48 < 0.0)
      v9 = -(v7 - v48);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187480);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 40);
        *(_DWORD *)buf = 134349312;
        v44 = v48;
        v45 = 2050;
        v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102187480);
        v29 = *(_QWORD *)(a2 + 40);
        v39 = 134349312;
        v40 = v48;
        v41 = 2050;
        v42 = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v39, 22);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 40);
      v8 = v48;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102187480);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 40);
          *(_DWORD *)buf = 134217984;
          v44 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102187480);
          v32 = *(double *)(a2 + 40);
          v39 = 134217984;
          v40 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v39));
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v37 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102187480);
        v18 = v37;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v44 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102187480);
        v39 = 134217984;
        v40 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v39));
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v47, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  v25 = *(_OWORD *)(a2 + 96);
  v26 = *(_OWORD *)(a2 + 112);
  v27 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
  *(_OWORD *)(a1 + 320) = v25;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v38);
}

void sub_100DCF070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DCF09C(uint64_t a1)
{
  return sub_100DCE2EC(a1 - 72);
}

void sub_100DCF0A4(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

_QWORD *sub_100DCF0D0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100DCF148(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100DCF12C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100DCF148(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1AF286BCA1AF287)
    sub_100259694();
  result = (char *)sub_100808E8C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[152 * v4];
  return result;
}

uint64_t sub_100DCF19C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10192AB7C(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100DCF560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DCF5D0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10192ACE8(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100DCF830(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192AE54(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100DCFA68(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192AFC0(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100DCFC90(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

BOOL sub_100DCFCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD4A44(v2, a2);
}

void sub_100DCFCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  sub_100DD6C64(v2, a2);
}

BOOL sub_100DCFCDC(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  return *(_BYTE *)(v1 + 1389) && *(_DWORD *)(v1 + 400) == 0;
}

_QWORD *sub_100DCFD08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if (a1)
    v2 = (_QWORD *)(a1 - 8);
  else
    v2 = 0;
  return sub_100DDA7E0(v2, a2);
}

void sub_100DCFD18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  sub_100DDA994(v2, a2);
}

void sub_100DCFD28(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (a1)
    v3 = (_QWORD *)(a1 - 8);
  else
    v3 = 0;
  sub_100DDB5E0(v3);
  sub_100DDA994((uint64_t)v3, a2);
}

BOOL sub_100DCFD60(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD5024(v2, a2);
}

uint64_t (***sub_100DCFD70(uint64_t a1, uint64_t a2))(_QWORD, uint8_t *)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD712C(v2, a2);
}

void sub_100DCFD80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  sub_100DD72D4(v2, a2);
}

uint64_t sub_100DCFD90(uint64_t a1, int *a2)
{
  uint64_t *v2;

  if (a1)
    v2 = (uint64_t *)(a1 - 8);
  else
    v2 = 0;
  return sub_100DDD3B0(v2, a2);
}

BOOL sub_100DCFDA0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  return *(_BYTE *)(v1 + 1388) && *(_DWORD *)(v1 + 400) == 0;
}

uint64_t sub_100DCFDCC(uint64_t a1)
{
  if (a1)
    return sub_100DDCE98(a1 - 8);
  else
    return sub_100DDCE98(0);
}

uint64_t sub_100DCFDDC(uint64_t a1)
{
  if (a1)
    return sub_100DDD81C(a1 - 8);
  else
    return sub_100DDD81C(0);
}

uint64_t sub_100DCFDEC(uint64_t a1)
{
  if (a1)
    return sub_100DDD04C(a1 - 8);
  else
    return sub_100DDD04C(0);
}

double sub_100DCFDFC(uint64_t a1, double *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD8748(v2, a2);
}

void sub_100DCFE0C(uint64_t a1, double *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  sub_100DD898C(v2, a2);
}

void sub_100DCFE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  sub_100DD9DE4(v2, a2);
}

uint64_t sub_100DCFE2C(uint64_t a1)
{
  if (a1)
    return sub_100DD55B4((_QWORD *)(a1 - 8));
  else
    return sub_100DD55B4(0);
}

uint64_t sub_100DCFE3C(uint64_t a1)
{
  if (a1)
    return sub_100DDDC48(a1 - 8);
  else
    return sub_100DDDC48(0);
}

BOOL sub_100DCFE4C(uint64_t a1)
{
  if (a1)
    return sub_100DD6460(a1 - 8);
  else
    return sub_100DD6460(0);
}

void sub_100DCFE5C(uint64_t a1)
{
  if (a1)
    sub_100DD74F0((_QWORD *)(a1 - 8));
  else
    sub_100DD74F0(0);
}

BOOL sub_100DCFE6C(uint64_t a1)
{
  if (a1)
    return sub_100DD6644(a1 - 8);
  else
    return sub_100DD6644(0);
}

uint64_t sub_100DCFE7C(uint64_t a1)
{
  if (a1)
    return sub_100DD5714(a1 - 8);
  else
    return sub_100DD5714(0);
}

_QWORD *sub_100DCFE8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (a1)
    v3 = (_QWORD *)(a1 - 8);
  else
    v3 = 0;
  sub_100DD8578((uint64_t)v3);
  return sub_100DDA7E0(v3, a2);
}

uint64_t sub_100DCFEC4(uint64_t a1, _QWORD *a2)
{
  return CLMotionActivity::isTypePedestrian(+[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", *a2)) ^ 1;
}

void sub_100DCFEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  sub_100DD9C14(v2, a2);
}

uint64_t sub_100DCFEFC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  if (a1)
    v2 = (uint64_t *)(a1 - 8);
  else
    v2 = 0;
  return sub_100DD8C9C(v2, a2);
}

uint64_t sub_100DCFF0C(uint64_t a1, int *a2)
{
  uint64_t *v2;

  if (a1)
    v2 = (uint64_t *)(a1 - 8);
  else
    v2 = 0;
  return sub_100DDE074(v2, a2);
}

double sub_100DCFF1C(uint64_t a1, double *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DDE4E0(v2, a2);
}

double sub_100DCFF2C(uint64_t a1, double *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DDE558(v2, a2);
}

double sub_100DCFF3C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD8E84(v2, a2);
}

void sub_100DCFF4C(uint64_t a1, double *a2)
{
  uint64_t *v2;

  if (a1)
    v2 = (uint64_t *)(a1 - 8);
  else
    v2 = 0;
  sub_100DD58C8(v2, a2);
}

BOOL sub_100DCFF5C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  return *(_BYTE *)(v1 + 1389) && *(_DWORD *)(v1 + 400) == 0;
}

uint64_t sub_100DCFF88(uint64_t a1)
{
  _QWORD *v1;

  if (a1)
    v1 = (_QWORD *)(a1 - 8);
  else
    v1 = 0;
  sub_100DD8578((uint64_t)v1);
  sub_100DDA04C((uint64_t)v1);
  return sub_100DDA20C(v1);
}

uint64_t sub_100DCFFC8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  if (a1)
    v2 = (_QWORD *)(a1 - 8);
  else
    v2 = 0;
  return sub_100DD960C(v2, a2);
}

_QWORD *sub_100DCFFD8(uint64_t a1, int *a2)
{
  _QWORD *v2;

  if (a1)
    v2 = (_QWORD *)(a1 - 8);
  else
    v2 = 0;
  return sub_100DD8094(v2, a2);
}

uint64_t sub_100DCFFE8(uint64_t a1)
{
  if (a1)
    return sub_100DDE5D0((_QWORD *)(a1 - 8));
  else
    return sub_100DDE5D0(0);
}

uint64_t sub_100DCFFF8(uint64_t a1)
{
  if (a1)
    return sub_100DDE788((_QWORD *)(a1 - 8));
  else
    return sub_100DDE788(0);
}

uint64_t sub_100DD0008(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD5E88(v2, a2);
}

uint64_t (***sub_100DD0018(uint64_t a1))(_QWORD, uint8_t *)
{
  if (a1)
    return sub_100DD68B4(a1 - 8);
  else
    return sub_100DD68B4(0);
}

uint64_t sub_100DD0028(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD5F18(v2, a2);
}

uint64_t sub_100DD0038(uint64_t a1)
{
  if (a1)
    return sub_100DDEEDC(a1 - 8);
  else
    return sub_100DDEEDC(0);
}

BOOL sub_100DD0048(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100DD627C(v2, a2);
}

uint64_t sub_100DD0058(uint64_t a1)
{
  if (a1)
    return sub_100DDF974(a1 - 8);
  else
    return sub_100DDF974(0);
}

void sub_100DD0068(uint64_t a1)
{
  if (a1)
    sub_100DDFB64(a1 - 8);
  else
    sub_100DDFB64(0);
}

uint64_t sub_100DD0078(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v9;
  int64x2_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  double Current;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v31;
  uint8_t *v32;
  _OWORD v33[14];
  uint64_t v34;
  _OWORD v35[14];
  uint64_t v36;
  int v37;
  char *v38;
  uint8_t buf[4];
  char *v40;
  char out[40];
  uuid_t uu;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;

  *(_QWORD *)(a1 + 8) = &unk_1021874A0;
  *(_QWORD *)(a1 + 16) = 68;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_102187B10;
  v9 = (_QWORD *)(a1 + 32);
  sub_1010697AC(a1 + 32);
  *(_BYTE *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_OWORD *)(a1 + 640) = 0u;
  v10 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 656) = 0u;
  *(int64x2_t *)(a1 + 672) = v10;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = 3000;
  *(_QWORD *)(a1 + 696) = 0x10000000000000;
  *(_DWORD *)(a1 + 712) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0x10000000000000;
  *(_OWORD *)(a1 + 801) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(int64x2_t *)(a1 + 848) = v10;
  *(_QWORD *)(a1 + 864) = 23;
  *(_QWORD *)(a1 + 872) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 960) = 26;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1112) = 26;
  *(_QWORD *)(a1 + 1120) = 26;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_QWORD *)(a1 + 1152) = 3000;
  *(_QWORD *)(a1 + 1160) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1168) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1184) = 0x10000000000000;
  *(_DWORD *)(a1 + 1200) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1216) = 0x10000000000000;
  *(_OWORD *)(a1 + 1289) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_BYTE *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  sub_10139E250(a1 + 1368, v9);
  *(_DWORD *)(a1 + 1384) = 0;
  *(_WORD *)(a1 + 1388) = 257;
  *(_BYTE *)(a1 + 1390) = 1;
  *(_QWORD *)(a1 + 1400) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 1408) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
  *(_BYTE *)(a1 + 1416) = 0;
  *(_DWORD *)(a1 + 1420) = 0;
  *(_QWORD *)(a1 + 1424) = &_mh_execute_header;
  *(_QWORD *)(a1 + 1432) = *a4;
  v11 = a4[1];
  *(_QWORD *)(a1 + 1440) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_100270E34(a1 + 1448, a3);
  *(_QWORD *)(a1 + 1480) = 0;
  *(_BYTE *)(a1 + 1488) = 0;
  *(_QWORD *)(a1 + 1496) = 0x10000000000000;
  *(_QWORD *)(a1 + 1504) = a5;
  v49[0] = off_102187CC8;
  v49[1] = a1;
  v50 = v49;
  sub_1008FFFD0(a1 + 1512, v49);
  v14 = v50;
  if (v50 == v49)
  {
    v15 = 4;
    v14 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_9;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_9:
  *(_BYTE *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1576) = 0xBFF0000000000000;
  *(int64x2_t *)(a1 + 1584) = vdupq_n_s64(0x1AuLL);
  *(_QWORD *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1608) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1616) = -1;
  v47[0] = off_102187D48;
  v47[1] = a1;
  v48 = v47;
  sub_100DD08C0(v9, (uint64_t)v47);
  v16 = v48;
  if (v48 == v47)
  {
    v17 = 4;
    v16 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_14;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_14:
  v45[0] = off_102187DC8;
  v45[1] = a1;
  v46 = v45;
  sub_100DD09AC(v9, (uint64_t)v45);
  v18 = v46;
  if (v46 == v45)
  {
    v19 = 4;
    v18 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_19;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_19:
  v43[0] = off_102187E48;
  v43[1] = a1;
  v44 = v43;
  sub_100DD0A98(v9, (uint64_t)v43);
  v20 = v44;
  if (v44 == v43)
  {
    v21 = 4;
    v20 = v43;
    goto LABEL_23;
  }
  if (v44)
  {
    v21 = 5;
LABEL_23:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v22 = sub_1001FD94C();
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 936))(v22);
  if (sub_100DD0B84(v23, uu) && !uuid_is_null(uu))
  {
    memset(out, 0, 37);
    uuid_unparse(uu, out);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v24 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v40 = out;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Saved session id found, sending de-escalation: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v37 = 136315138;
      v38 = out;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor - Saved session id found, sending de-escalation: %s", (const char *)&v37);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutPredictor::CLWorkoutPredictor(CLWorkoutPredictorSources &, CLWorkoutPredictor_Type::OnWorkoutPrediction, std::shared_ptr<CLBackgroundEscalationManager>, CLIndoorOutdoorProtocol *)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    uuid_copy((unsigned __int8 *)(a1 + 592), uu);
    Current = CFAbsoluteTimeGetCurrent();
    sub_100DD3CCC(a1, 10, 0, (uint64_t)buf, Current);
    sub_100DD3EE0(a1, (uint64_t)buf);
    v26 = CFAbsoluteTimeGetCurrent();
    sub_100DD0DDC(a1, 10, 0, 0, v26);
    uuid_clear((unsigned __int8 *)(a1 + 592));
    sub_100DD1008();
  }
  uuid_clear((unsigned __int8 *)(a1 + 608));
  *(_QWORD *)(a1 + 1392) = 0;
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  *(_DWORD *)buf = 7;
  v27 = *(_QWORD *)(a1 + 1472);
  if (!v27
    || (v28 = (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *))(*(_QWORD *)v27 + 48))(v27, buf, v35),
        memset(v33, 0, sizeof(v33)),
        v34 = 0,
        *(_QWORD *)&v33[0] = sub_100DD11A0(v28, 1),
        *(_DWORD *)buf = 11,
        (v29 = *(_QWORD *)(a1 + 1472)) == 0))
  {
    sub_10025FD1C();
  }
  (*(void (**)(uint64_t, uint8_t *, _OWORD *))(*(_QWORD *)v29 + 48))(v29, buf, v33);
  return a1;
}

void sub_100DD0740(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  sub_100764180(v4);
  v6 = (_QWORD *)v1[184];
  if (v6 == v3)
  {
    v7 = 4;
    v6 = v3;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  sub_100261F44((uint64_t)(v1 + 179));
  v8 = v1[172];
  v1[172] = 0;
  if (v8)
    sub_1006CD618((uint64_t)(v1 + 172), v8);
  v9 = v1 + 58;
  v10 = (uint64_t *)v1[59];
  v1[59] = 0;
  if (v10)
    sub_1006CD660((uint64_t)(v1 + 59), v10);
  v11 = *v9;
  *v9 = 0;
  if (v11)
    operator delete();
  v12 = v1[54];
  v1[54] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *v2;
  *v2 = 0;
  if (v13)
    sub_1006CD6E0((uint64_t)v2, v13);
  sub_1006CD764(v1 + 5);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DD08C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  sub_100270E34((uint64_t)v6, a2);
  sub_1006D276C((_QWORD *)(v3 + 200), (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100DD096C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100DD09AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 144))(*a1);
  sub_100270E34((uint64_t)v6, a2);
  sub_1006D276C((_QWORD *)(v3 + 200), (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100DD0A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100DD0A98(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
  sub_100270E34((uint64_t)v6, a2);
  sub_1006D276C((_QWORD *)(v3 + 320), (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100DD0B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DD0B84(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  NSObject *v4;
  std::string *p_p;
  std::string *v6;
  _BOOL8 v7;
  std::string *v9;
  const char *v10;
  uint8_t *v11;
  std::string __p;
  int v13;
  std::string *v14;
  uint8_t buf[4];
  std::string *v16;

  memset(&__p, 0, sizeof(__p));
  v3 = sub_1001FD94C();
  if (sub_1000BCB64(v3, "WorkoutPredictorSessionId", &__p))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v16 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Retrieving session id: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v9 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = 136315138;
      v14 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor - Retrieving session id: %s", (const char *)&v13);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::getSessionIdFromCache(uuid_t &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &__p;
    else
      v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = uuid_parse((const char *)v6, a2) == 0;
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_100DD0DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DD0DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;

  if (a2 == 8)
  {
    v6 = 0;
    goto LABEL_5;
  }
  if (a2 == 10)
  {
    v6 = 1;
LABEL_5:
    v23 = 0u;
    v22 = 0u;
    v21 = 0u;
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(double *)v11 = a5;
    v11[1] = 1;
    v11[2] = v6;
    v11[3] = a4;
    v11[4] = a3;
    *(_DWORD *)buf = 10;
    v7 = *(_QWORD *)(a1 + 1472);
    if (!v7)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, buf, v11);
    return;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "notifyClientsWithActivityEvent - Unexpected workout event type: %ld.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v24 = 134217984;
    v25 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "notifyClientsWithActivityEvent - Unexpected workout event type: %ld.", &v24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "void CLWorkoutPredictor::notifyClientsWithActivityEvent(CFAbsoluteTime, CMWorkoutEvent, CMWorkoutType, CMActivityReason)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100DD1008()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v0 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Clearing session id from daemon cache.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor - Clearing session id from daemon cache.", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::clearSessionIdInCache() const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  v1 = sub_1001FD94C();
  sub_100525484(v1, "WorkoutPredictorSessionId", 0xFFFFFFFFLL);
}

unint64_t sub_100DD11A0(uint64_t a1, int a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  __int16 v8;
  __int16 v9;
  float v10;
  float v11;
  __int16 v12;
  __int16 v13;
  unsigned __int8 v14;
  unsigned __int8 v15[3];

  v3 = atomic_load((unsigned __int8 *)&qword_102308688);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_102308688))
  {
    v14 = _os_feature_enabled_impl("Workout", "AutostartRouteMaps");
    sub_1018BF25C(v15, "EnableEarlyWorkoutDetection", &v14, 0);
    byte_102308680 = v15[1];
    __cxa_guard_release(&qword_102308688);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_102308698);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102308698))
  {
    if (byte_102308680)
      v8 = 75;
    else
      v8 = -1;
    v13 = v8;
    sub_100DE0060(byte_102308690, "EarlyWorkoutDetectionEscalationRulesLookbackTimeInSeconds", &v13, 0);
    __cxa_guard_release(&qword_102308698);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1023086A8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1023086A8))
  {
    if (byte_102308680)
      v9 = 60;
    else
      v9 = -1;
    v12 = v9;
    sub_100DE0060(byte_1023086A0, "EarlyWorkoutDetectionEscalationRulesActiveTimeInSeconds", &v12, 0);
    __cxa_guard_release(&qword_1023086A8);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1023086C0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1023086C0))
  {
    v10 = 3.4028e38;
    if (byte_102308680)
      v10 = 2.0;
    v11 = v10;
    sub_1018C2254(byte_1023086B0, "EarlyWorkoutDetectionEscalationRulesActiveSpeedInMPH", &v11, 0);
    __cxa_guard_release(&qword_1023086C0);
  }
  if (a2)
    return (unsigned __int16)word_102308692 | ((unint64_t)(unsigned __int16)word_1023086A2 << 16) | ((unint64_t)dword_1023086B4 << 32);
  else
    return 0x7F7FFFFF7FFF0000;
}

void sub_100DD1398(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023086C0);
  _Unwind_Resume(a1);
}

uint64_t sub_100DD13E4(_QWORD *a1, int a2)
{
  if (sub_100195F08())
  {
    if (a2)
      sub_100DD1424(a1);
    else
      sub_100DD1764(a1);
  }
  return 1;
}

void sub_100DD1424(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[55];
    *(_DWORD *)buf = 134217984;
    v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to bring up TurnDetector, prevClientCount, %zu\n", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v7 = a1[55];
    v13 = 134217984;
    v14 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Trying to bring up TurnDetector, prevClientCount, %zu\n", (size_t)&v13);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTurnDetectorActivate()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v4 = a1[55] + 1;
  a1[55] = v4;
  if (v4 >= 3)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v6 = a1[55];
      *(_DWORD *)buf = 134218240;
      v18 = v6;
      v19 = 2048;
      v20 = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Turn detector client count is %zu but max is %zu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v10 = a1[55];
      v13 = 134218240;
      v14 = v10;
      v15 = 2048;
      v16 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Turn detector client count is %zu but max is %zu", (size_t)&v13, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutPredictor::onTurnDetectorActivate()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v4 = a1[55];
  }
  if (v4 == 1)
    sub_100DD54DC(a1);
}

void sub_100DD1764(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[55];
    *(_DWORD *)buf = 134217984;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to tear down TurnDetector, prevClientCount, %zu\n", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8 = a1[55];
    v11 = 134217984;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Trying to tear down TurnDetector, prevClientCount, %zu\n", (size_t)&v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTurnDetectorDeactivate()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v4 = a1[55];
  v5 = v4 != 0;
  v7 = v4 - 1;
  v6 = v7 != 0 && v5;
  if (!v5)
    v7 = 0;
  a1[55] = v7;
  if (!v6)
    sub_100DD54DC(a1);
}

id sub_100DD1930(uint64_t a1, int a2, int a3)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  double Current;
  double *v10;
  _BYTE *v11;
  char v12;
  _BOOL4 v13;
  _BYTE *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id result;
  double v20;
  BOOL v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  _QWORD v31[9];
  char v32;
  char v33;
  char v34;
  BOOL v35;
  _DWORD v36[2];
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  double v52;
  uint8_t buf[4];
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BOOL4 v68;
  __int16 v69;
  double v70;

  v6 = sub_1001FCBB4();
  Current = CFAbsoluteTimeGetCurrent();
  if (!a2)
  {
    if (a3)
    {
      v10 = (double *)(a1 + 560);
      v11 = (_BYTE *)(a1 + 568);
      v12 = *(_BYTE *)(a1 + 568);
      if (*(_BYTE *)(a1 + 536))
      {
        v13 = 0;
        v14 = (_BYTE *)(a1 + 536);
        v17 = *(double *)(a1 + 528);
LABEL_15:
        v18 = v6 - v17;
        v15 = -1.0;
        v16 = -1.0;
        goto LABEL_16;
      }
    }
    else
    {
      v10 = (double *)(a1 + 576);
      v11 = (_BYTE *)(a1 + 584);
      v12 = *(_BYTE *)(a1 + 584);
      if (*(_BYTE *)(a1 + 552))
      {
        v13 = 0;
        v14 = (_BYTE *)(a1 + 552);
        v17 = *(double *)(a1 + 544);
        goto LABEL_15;
      }
    }
LABEL_17:
    v13 = 0;
    v15 = -1.0;
    v16 = -1.0;
    goto LABEL_18;
  }
  if (a3)
  {
    v10 = (double *)(a1 + 528);
    v11 = (_BYTE *)(a1 + 536);
    v12 = *(_BYTE *)(a1 + 536);
    if (*(_BYTE *)(a1 + 568))
    {
      v13 = 0;
      v14 = (_BYTE *)(a1 + 568);
      v15 = v6 - *(double *)(a1 + 560);
      v16 = -1.0;
LABEL_12:
      v18 = -1.0;
LABEL_16:
      *v14 = 0;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  v10 = (double *)(a1 + 544);
  v11 = (_BYTE *)(a1 + 552);
  v12 = *(_BYTE *)(a1 + 552);
  v13 = *(_BYTE *)(a1 + 536) != 0;
  v15 = -1.0;
  v16 = -1.0;
  if (*(_BYTE *)(a1 + 536))
    v16 = v6 - *(double *)(a1 + 528);
  if (*(_BYTE *)(a1 + 584))
  {
    v14 = (_BYTE *)(a1 + 584);
    v15 = v6 - *(double *)(a1 + 576);
    goto LABEL_12;
  }
LABEL_18:
  v18 = -1.0;
LABEL_19:
  *v10 = v6;
  *v11 = 1;
  result = sub_1008293CC(v7, v8);
  if ((_DWORD)result)
  {
    v20 = *(double *)(a1 + 672);
    v21 = v20 > Current || v20 <= 0.0;
    v22 = Current - v20;
    if (v21)
      v23 = -1.0;
    else
      v23 = v22;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v24 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD *)(a1 + 720);
      v26 = *(_QWORD *)(a1 + 1208);
      *(_DWORD *)buf = 67242240;
      v54 = a2;
      v55 = 1026;
      v56 = a3;
      v57 = 2050;
      v58 = v18;
      v59 = 2048;
      v60 = v15;
      v61 = 2050;
      v62 = v23;
      v63 = 2050;
      v64 = v25;
      v65 = 2050;
      v66 = v26;
      v67 = 1026;
      v68 = v13;
      v69 = 2048;
      v70 = v16;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLAS,analytics,GpsEnablements,enableGps,%{public}d,isTypeIntermittentGps,%{public}d,timeSinceGpsTypeLastEnabledSeconds,%{public}.1lf,timeSinceGpsTypeLastDisabledSeconds,%.1lf,timeSinceCurrentWorkoutStartS,%{public}.1lf,currentEscalatedWorkoutType,%{public}ld,previousEscalatedWorkoutType,%{public}ld,isIntermittentTo1HzGpsTransition,%{public}d,timeSinceIntermittentGpsEnabledAtTransitionS,%.1lf", buf, 0x50u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v27 = *(_QWORD *)(a1 + 720);
      v28 = *(_QWORD *)(a1 + 1208);
      v36[0] = 67242240;
      v36[1] = a2;
      v37 = 1026;
      v38 = a3;
      v39 = 2050;
      v40 = v18;
      v41 = 2048;
      v42 = v15;
      v43 = 2050;
      v44 = v23;
      v45 = 2050;
      v46 = v27;
      v47 = 2050;
      v48 = v28;
      v49 = 1026;
      v50 = v13;
      v51 = 2048;
      v52 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,analytics,GpsEnablements,enableGps,%{public}d,isTypeIntermittentGps,%{public}d,timeSinceGpsTypeLastEnabledSeconds,%{public}.1lf,timeSinceGpsTypeLastDisabledSeconds,%.1lf,timeSinceCurrentWorkoutStartS,%{public}.1lf,currentEscalatedWorkoutType,%{public}ld,previousEscalatedWorkoutType,%{public}ld,isIntermittentTo1HzGpsTransition,%{public}d,timeSinceIntermittentGpsEnabledAtTransitionS,%.1lf", v36, 80);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::GpsEnablementAnalytics(BOOL, BOOL) const", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100DD1D34;
    v31[3] = &unk_10214FB38;
    v31[4] = a1;
    v32 = a2;
    v33 = v12;
    v34 = a3;
    *(double *)&v31[5] = v18;
    *(double *)&v31[6] = v15;
    v35 = v13;
    *(double *)&v31[7] = v23;
    *(double *)&v31[8] = v16;
    return (id)AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.WorkoutPredictor.GpsEnablements"), v31);
  }
  return result;
}

NSDictionary *sub_100DD1D34(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[10];
  _QWORD v5[10];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = CFSTR("enableGps");
  v5[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72));
  v4[1] = CFSTR("gpsTypeAlreadyInDesiredEnablementState");
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[2] = CFSTR("isTypeIntermittentGps");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[3] = CFSTR("timeSinceGpsTypeLastEnabledSeconds");
  v5[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v4[4] = CFSTR("timeSinceGpsTypeLastDisabledSeconds");
  v5[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v4[5] = CFSTR("timeSinceCurrentWorkoutStartS");
  v5[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v4[6] = CFSTR("currentEscalatedWorkoutType");
  v5[6] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v2 + 720));
  v4[7] = CFSTR("previousEscalatedWorkoutType");
  v5[7] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v2 + 1208));
  v4[8] = CFSTR("isIntermittentTo1HzGpsTransition");
  v5[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 75));
  v4[9] = CFSTR("timeSinceIntermittentGpsEnabledAtTransitionS");
  v5[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 10);
}

uint64_t sub_100DD1EC4(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __objc2_class *v9;
  NSObject *superclass;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[18];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _WORD v41[11];
  int v42;
  _BYTE v43[20];
  __int16 v44;
  int v45;
  uint8_t buf[4];
  _BYTE v47[20];
  __int16 v48;
  int v49;

  v6 = *(_QWORD *)(a1 + 448);
  v7 = v6 - 1;
  if (!v6)
    v7 = 0;
  if (a2)
    v8 = v6 + 1;
  else
    v8 = v7;
  *(_QWORD *)(a1 + 448) = v8;
  v9 = DefaultObserver;
  if (v8 >= 3)
  {
    if (qword_10229FE60 != -1)
    {
      dispatch_once(&qword_10229FE60, &stru_102187B78);
      v9 = DefaultObserver;
    }
    superclass = v9[92].superclass;
    if (os_log_type_enabled(superclass, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 448);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v47 = v11;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)&v47[10] = 2;
      _os_log_impl((void *)&_mh_execute_header, superclass, OS_LOG_TYPE_ERROR, "Gps client count is %zu but max is %zu", buf, 0x16u);
    }
    v12 = sub_1001BFF7C(115, 0);
    v9 = DefaultObserver;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v23 = *(_QWORD *)(a1 + 448);
      v42 = 134218240;
      *(_QWORD *)v43 = v23;
      *(_WORD *)&v43[8] = 2048;
      *(_QWORD *)&v43[10] = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Gps client count is %zu but max is %zu", (size_t)&v42, 22);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutPredictor::activateGps(BOOL, BOOL)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
      v9 = DefaultObserver;
    }
  }
  v13 = *(_QWORD *)(a1 + 448);
  if (v13 == 1)
    v14 = a2;
  else
    v14 = 0;
  if (qword_10229FE60 != -1)
  {
    dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = DefaultObserver;
  }
  v15 = v9[92].superclass;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 448);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v47 = a2;
    *(_WORD *)&v47[4] = 2048;
    *(_QWORD *)&v47[6] = v16;
    *(_WORD *)&v47[14] = 1024;
    *(_DWORD *)&v47[16] = v14;
    v48 = 1024;
    v49 = (v13 == 0) & ~a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Workout Predictor activateGps, enable, %d, currentClientCount, %zu, shouldActivate, %d, shouldDeactivate, %d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v20 = *(_QWORD *)(a1 + 448);
    v42 = 67109888;
    *(_DWORD *)v43 = a2;
    *(_WORD *)&v43[4] = 2048;
    *(_QWORD *)&v43[6] = v20;
    *(_WORD *)&v43[14] = 1024;
    *(_DWORD *)&v43[16] = v14;
    v44 = 1024;
    v45 = (v13 == 0) & ~a2;
    LODWORD(v26) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor activateGps, enable, %d, currentClientCount, %zu, shouldActivate, %d, shouldDeactivate, %d", &v42, v26, v27, *(_DWORD *)v28);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::activateGps(BOOL, BOOL)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v17 = v13 == 1;
  if (!a2)
    v17 = v13 == 0;
  if (v17)
  {
    memset(v41, 0, sizeof(v41));
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    *(_OWORD *)&v28[2] = 0u;
    v28[0] = a2;
    v28[1] = a3;
    *(_DWORD *)buf = 9;
    v18 = *(_QWORD *)(a1 + 1472);
    if (!v18)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v18 + 48))(v18, buf, v28);
    sub_100DD1930(a1, a2, a3);
  }
  return 1;
}

uint64_t sub_100DD2338(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  result = sub_100F72C2C(*(_QWORD *)(a1 + 632));
  if (result == 2 && *(_QWORD *)(a1 + 656) != 1 && *(_BYTE *)(a1 + 24) == 2)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Workout predictor - keeping GPS alive because we're in an outdoor run escalation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Workout predictor - keeping GPS alive because we're in an outdoor run escalation", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::keepGpsAliveIfNecessary()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
    return sub_1000E4778(v4);
  }
  return result;
}

uint64_t sub_100DD2504(int a1, unsigned __int8 *uu)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  char *v11;
  char out[40];

  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v11 = out;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Saving session id: %s to daemon cache.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8 = 136315138;
    v9 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor - Saving session id: %s to daemon cache.", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::saveSessionIdInCache(const uuid_t &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = sub_1001FD94C();
  sub_1005285B4(v3, "WorkoutPredictorSessionId", out);
  v4 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
}

uint64_t sub_100DD26E4(unsigned __int8 *a1, int a2, int a3)
{
  NSObject *v6;
  int v7;
  int v8;
  uint64_t result;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v16 = a2;
    v17 = 1026;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Workout Predictor - updating settings, start, %{public}d, stop, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v12[0] = 67240448;
    v12[1] = a2;
    v13 = 1026;
    v14 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor - updating settings, start, %{public}d, stop, %{public}d", v12, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::setEnableWorkoutAlerts(BOOL, BOOL)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = a1[1388];
  a1[1388] = a2;
  a1[1389] = a3;
  if (v7 != a2)
  {
    if (a2)
      v8 = 0;
    else
      v8 = 2;
    sub_100DD2900((uint64_t)a1, v8);
  }
  result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result)
    return sub_10023195C((uint64_t)(a1 + 8), 11, (uint64_t)buf);
  return result;
}

void sub_100DD2900(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  double v12;
  NSObject *v13;
  const char *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  unint64_t v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _WORD v55[11];
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int16 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _WORD v85[11];
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int16 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _WORD v115[11];
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint8_t buf[4];
  const char *v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  unint64_t v138;

  v2 = a1;
  if (!*(_BYTE *)(a1 + 1388) || *(_DWORD *)(a1 + 400))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLAS,Disabling early escalations and rhythmic gnss because start alerts aren't allowed", buf, 2u);
    }
    a1 = sub_1001BFF7C(115, 2);
    if ((_DWORD)a1)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v33) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,Disabling early escalations and rhythmic gnss because start alerts aren't allowed", &v33, 2);
      v31 = (uint8_t *)v30;
      a1 = sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::controlEarlyEscalation(EarlyEscalationControl) const", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
LABEL_8:
    if (*(_BYTE *)(v2 + 520))
      *(_BYTE *)(v2 + 520) = 0;
    v4 = sub_100DD11A0(a1, 0);
    LOWORD(v5) = v4;
    v57 = 0u;
    v6 = HIDWORD(v4);
    v58 = 0u;
    v7 = v4 >> 16;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v56 = v4;
    *(_DWORD *)buf = 11;
    v8 = *(_QWORD *)(v2 + 1472);
    if (v8)
    {
      (*(void (**)(uint64_t, uint8_t *, unint64_t *))(*(_QWORD *)v8 + 48))(v8, buf, &v56);
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      memset(v55, 0, sizeof(v55));
      v41 = 256;
      *(_DWORD *)buf = 9;
      v9 = *(_QWORD *)(v2 + 1472);
      if (v9)
      {
        (*(void (**)(uint64_t, uint8_t *, __int16 *))(*(_QWORD *)v9 + 48))(v9, buf, &v41);
        v10 = 0;
        v11 = 2;
LABEL_13:
        sub_100DD1930(v2, v10, 1);
        v5 = (unsigned __int16)v5;
        LODWORD(v7) = (unsigned __int16)v7;
        v12 = *(float *)&v6;
        goto LABEL_14;
      }
    }
    goto LABEL_64;
  }
  v11 = a2;
  switch(a2)
  {
    case 2:
      goto LABEL_8;
    case 1:
      v21 = sub_100DD11A0(a1, 0);
      LOWORD(v5) = v21;
      v87 = 0u;
      v6 = HIDWORD(v21);
      v88 = 0u;
      v7 = v21 >> 16;
      v89 = 0u;
      v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v98 = 0u;
      v99 = 0u;
      v100 = 0u;
      v86 = v21;
      *(_DWORD *)buf = 11;
      v22 = *(_QWORD *)(v2 + 1472);
      if (v22)
      {
        (*(void (**)(uint64_t, uint8_t *, unint64_t *))(*(_QWORD *)v22 + 48))(v22, buf, &v86);
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        v84 = 0u;
        memset(v85, 0, sizeof(v85));
        v71 = 257;
        *(_DWORD *)buf = 9;
        v23 = *(_QWORD *)(v2 + 1472);
        if (v23)
        {
          (*(void (**)(uint64_t, uint8_t *, __int16 *))(*(_QWORD *)v23 + 48))(v23, buf, &v71);
          v10 = 1;
          v11 = 1;
          goto LABEL_13;
        }
      }
      goto LABEL_64;
    case 0:
      if (*(_BYTE *)(a1 + 520))
        *(_BYTE *)(a1 + 520) = 0;
      v18 = sub_100DD11A0(a1, 1);
      LOWORD(v5) = v18;
      v117 = 0u;
      v6 = HIDWORD(v18);
      v118 = 0u;
      v7 = v18 >> 16;
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v126 = 0u;
      v127 = 0u;
      v128 = 0u;
      v129 = 0u;
      v130 = 0u;
      v116 = v18;
      *(_DWORD *)buf = 11;
      v19 = *(_QWORD *)(v2 + 1472);
      if (v19)
      {
        (*(void (**)(uint64_t, uint8_t *, unint64_t *))(*(_QWORD *)v19 + 48))(v19, buf, &v116);
        v102 = 0u;
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        v108 = 0u;
        v109 = 0u;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        v113 = 0u;
        v114 = 0u;
        memset(v115, 0, sizeof(v115));
        v101 = 256;
        *(_DWORD *)buf = 9;
        v20 = *(_QWORD *)(v2 + 1472);
        if (v20)
        {
          (*(void (**)(uint64_t, uint8_t *, __int16 *))(*(_QWORD *)v20 + 48))(v20, buf, &v101);
          v10 = 0;
          v11 = 0;
          goto LABEL_13;
        }
      }
LABEL_64:
      sub_10025FD1C();
  }
  v5 = 0;
  LODWORD(v7) = 0;
  v12 = 0.0;
LABEL_14:
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v13 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "Disable";
    if (v11 == 1)
      v14 = "Ongoing";
    *(_DWORD *)buf = 136446978;
    if (!v11)
      v14 = "Activate";
    v132 = v14;
    if (v11)
      v15 = -1;
    else
      v15 = v5;
    if (v11)
      v16 = -1;
    else
      v16 = v7;
    v133 = 1026;
    v134 = v15;
    v17 = 0xBFF0000000000000;
    if (!v11)
      v17 = *(_QWORD *)&v12;
    v135 = 1026;
    v136 = v16;
    v137 = 2050;
    v138 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLAS,controlEarlyEscalation,command,%{public}s,lookbackTimeInSeconds,%{public}d,activeTimeInSeconds,%{public}d,activeSpeedInMPH,%{public}.1lf", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v24 = "Disable";
    if (v11 == 1)
      v24 = "Ongoing";
    v33 = 136446978;
    if (!v11)
      v24 = "Activate";
    v34 = v24;
    if (v11)
      v25 = -1;
    else
      v25 = v5;
    if (v11)
      v26 = -1;
    else
      v26 = v7;
    v35 = 1026;
    v36 = v25;
    v27 = 0xBFF0000000000000;
    if (!v11)
      v27 = *(_QWORD *)&v12;
    v37 = 1026;
    v38 = v26;
    v39 = 2050;
    v40 = v27;
    LODWORD(v32) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,controlEarlyEscalation,command,%{public}s,lookbackTimeInSeconds,%{public}d,activeTimeInSeconds,%{public}d,activeSpeedInMPH,%{public}.1lf", COERCE_DOUBLE(136446978), &v33, v32);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::controlEarlyEscalation(EarlyEscalationControl) const", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
}

uint64_t sub_100DD3018(_QWORD *a1, double a2, double a3)
{
  uint64_t result;
  _QWORD v5[2];

  *(double *)v5 = a2;
  *(double *)&v5[1] = a3;
  a1[85] = 0x7FEFFFFFFFFFFFFFLL;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if ((_DWORD)result)
    return sub_10023195C((uint64_t)(a1 + 1), 12, (uint64_t)v5);
  return result;
}

uint64_t sub_100DD3068(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t result;

  v2 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 1400) = v2;
  result = *(_QWORD *)(a1 + 424);
  if (result)
    return sub_10135BF18(result, (__int128 *)a2);
  return result;
}

_QWORD *sub_100DD308C(uint64_t a1, _DWORD *a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 424);
  if (result)
    return sub_10135C178(result, a2);
  return result;
}

uint64_t sub_100DD309C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 424);
  if (result)
    result = sub_10135C790(result, a2);
  *(_DWORD *)(a1 + 1384) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t *sub_100DD30D4(uint64_t a1)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 424);
  if (result)
    return (uint64_t *)sub_10135C1AC(result);
  return result;
}

void sub_100DD30E4(uint64_t a1, unsigned int *a2)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  _BYTE v40[18];
  __int16 v41;
  uint64_t v42;

  if (!*(_BYTE *)(a1 + 520) || *(_BYTE *)(a1 + 24))
    return;
  v4 = sub_1001FCBB4();
  if (!*(_BYTE *)(a1 + 504) && (CLMotionActivity::isTypeWalking(*a2) & 1) == 0)
  {
    *(double *)(a1 + 496) = v4;
    *(_BYTE *)(a1 + 504) = 1;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 504))
        goto LABEL_66;
      v9 = *(_QWORD *)(a1 + 496);
      v10 = *a2;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v40 = v9;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLAS,user switched out of walking state,%.1lf,type,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      if (!*(_BYTE *)(a1 + 504))
        sub_10028DF3C();
      v23 = *(double *)(a1 + 496);
      v24 = *a2;
      v33 = 134218240;
      v34 = v23;
      v35 = 1024;
      LODWORD(v36) = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,user switched out of walking state,%.1lf,type,%d", COERCE_DOUBLE(&v33), 18);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    goto LABEL_22;
  }
  if (CLMotionActivity::isTypeWalking(*a2) && *(_BYTE *)(a1 + 504))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (!os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    if (*(_BYTE *)(a1 + 504))
    {
      v6 = *(_QWORD *)(a1 + 496);
      v7 = *a2;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v40 = v6;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLAS,user switched back into walking state,%.1lf,type,%d", buf, 0x12u);
LABEL_13:
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        if (!*(_BYTE *)(a1 + 504))
          sub_10028DF3C();
        v19 = *(double *)(a1 + 496);
        v20 = *a2;
        v33 = 134218240;
        v34 = v19;
        v35 = 1024;
        LODWORD(v36) = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,user switched back into walking state,%.1lf,type,%d", COERCE_DOUBLE(&v33), 18);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      if (*(_BYTE *)(a1 + 504))
        *(_BYTE *)(a1 + 504) = 0;
      goto LABEL_22;
    }
LABEL_66:
    sub_10028DF3C();
  }
LABEL_22:
  v32 = 0x4066800000000000;
  v31 = 0x408C200000000000;
  v11 = atomic_load((unsigned __int8 *)&qword_102308628);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_102308628))
  {
    sub_1018BEA14(buf, "kMaxTimeSinceLastWalkingStateBeforeResetEarlyWorkoutDetectionS", &v32, 0);
    qword_102308620 = *(_QWORD *)&v40[4];
    __cxa_guard_release(&qword_102308628);
  }
  v12 = atomic_load((unsigned __int8 *)&qword_102308638);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_102308638))
  {
    sub_1018BEA14(buf, "kMaxTimeSinceEscalationBeforeResetEarlyWorkoutDetectionS", &v31, 0);
    qword_102308630 = *(_QWORD *)&v40[4];
    __cxa_guard_release(&qword_102308638);
  }
  if (*(_BYTE *)(a1 + 504))
  {
    v13 = vabdd_f64(v4, *(double *)(a1 + 496));
    if (v13 >= *(double *)&qword_102308620)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v14 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)v40 = v13;
        *(_WORD *)&v40[8] = 2048;
        *(_QWORD *)&v40[10] = qword_102308620;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLAS,enable early workout detection due to non-walking timeout,timeSinceLastWalkingStateS,%.1lf,maxTimeSinceLastWalkingStateBeforeResetEarlyWorkoutDetectionS,%.0lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        v33 = 134218240;
        v34 = v13;
        v35 = 2048;
        v36 = qword_102308620;
        LODWORD(v30) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,enable early workout detection due to non-walking timeout,timeSinceLastWalkingStateS,%.1lf,maxTimeSinceLastWalkingStateBeforeResetEarlyWorkoutDetectionS,%.0lf", COERCE_DOUBLE(&v33), v30);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      sub_1004C0F9C(a1 + 1568, (_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), 0);
      sub_100DD2900(a1, 0);
      if (*(_BYTE *)(a1 + 504))
        *(_BYTE *)(a1 + 504) = 0;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 520))
      sub_10028DF3C();
    if (v4 - *(double *)(a1 + 512) > *(double *)&qword_102308630)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v15 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 520))
          sub_10028DF3C();
        v16 = *(_QWORD *)(a1 + 512);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)v40 = v16;
        *(_WORD *)&v40[8] = 2050;
        *(double *)&v40[10] = v4;
        v41 = 2048;
        v42 = qword_102308630;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLAS,enable early workout detection due to time out since first escalated,last update,%{public}.1lf,current time,%{public}.1lf,maxTimeInSecondsBeforeResetEarlyWorkoutDetection,%.0lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        if (!*(_BYTE *)(a1 + 520))
          sub_10028DF3C();
        v27 = *(double *)(a1 + 512);
        v33 = 134349568;
        v34 = v27;
        v35 = 2050;
        v36 = *(_QWORD *)&v4;
        v37 = 2048;
        v38 = qword_102308630;
        LODWORD(v30) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,enable early workout detection due to time out since first escalated,last update,%{public}.1lf,current time,%{public}.1lf,maxTimeInSecondsBeforeResetEarlyWorkoutDetection,%.0lf", &v33, *(_QWORD *)&v30, v31, v32);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      sub_1004C0F9C(a1 + 1568, (_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), 0);
      sub_100DD2900(a1, 0);
    }
  }
}

void sub_100DD3934(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308638);
  _Unwind_Resume(a1);
}

BOOL sub_100DD3964(uint64_t a1, uint64_t a2)
{
  int v2;
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  int v8;
  int v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  double v17;
  uint8_t buf[4];
  double v19;

  v2 = *(_DWORD *)(a2 + 80);
  if (v2 != 720912)
    return v2 == 720912;
  v4 = sub_1001FCBB4();
  if (*(_BYTE *)(a1 + 520))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      if (!*(_BYTE *)(a1 + 520))
        goto LABEL_25;
      v6 = vabdd_f64(v4, *(double *)(a1 + 512));
      *(_DWORD *)buf = 134217984;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLAS, received another early escalation when we're already tracking one, duration, %f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_9;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    if (*(_BYTE *)(a1 + 520))
    {
      v13 = vabdd_f64(v4, *(double *)(a1 + 512));
      v16 = 134217984;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "CLAS, received another early escalation when we're already tracking one, duration, %f", COERCE_DOUBLE(&v16));
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutPredictor::checkAndDisableEarlyDetection(const CLWorkoutPredictorActivity &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
      goto LABEL_9;
    }
LABEL_25:
    sub_10028DF3C();
  }
LABEL_9:
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v7 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a1 + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLAS, received early escalation, current fsm state, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v10 = *(unsigned __int8 *)(a1 + 24);
    v16 = 67109120;
    LODWORD(v17) = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS, received early escalation, current fsm state, %d", &v16);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::checkAndDisableEarlyDetection(const CLWorkoutPredictorActivity &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(double *)(a1 + 512) = v4;
  *(_BYTE *)(a1 + 520) = 1;
  sub_100DD2900(a1, 1);
  return v2 == 720912;
}

void sub_100DD3CCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _DWORD v24[2];
  __int16 v25;
  const char *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v24[0] = 68289794;
    v24[1] = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2050;
    v28 = a5;
    v29 = 2050;
    v30 = a2;
    v31 = 2050;
    v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending workout event\", \"event time\":\"%{public}f\", \"event type\":%{public}ld, \"workout type\":%{public}ld}", (uint8_t *)v24, 0x30u);
  }
  uuid_copy((unsigned __int8 *)(a4 + 64), (const unsigned __int8 *)(a1 + 592));
  uuid_copy((unsigned __int8 *)(a4 + 80), (const unsigned __int8 *)(a1 + 608));
  *(_QWORD *)(a4 + 112) = a3;
  v11 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a4 + 176) = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a4 + 192) = v11;
  *(_OWORD *)(a4 + 208) = *(_OWORD *)(a1 + 816);
  v12 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a4 + 144) = *(_OWORD *)(a1 + 752);
  *(_OWORD *)(a4 + 160) = v12;
  if (a3 == 19)
    *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 832);
  v13 = *(_QWORD *)(a1 + 656);
  if (!v13)
    v13 = sub_100F72C50(*(_QWORD *)(a1 + 632));
  v14 = *(_QWORD *)(a1 + 648);
  if (!v14)
    v14 = v13;
  *(_QWORD *)(a4 + 120) = v14;
  *(_QWORD *)(a4 + 224) = *(_QWORD *)(a1 + 744);
  v15 = *(_OWORD *)(a1 + 672);
  *(_OWORD *)a4 = v15;
  *(_QWORD *)(a4 + 16) = a2;
  *(double *)(a4 + 24) = a5;
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 736);
  *(double *)(a4 + 40) = sub_100EE1880(*(_QWORD *)(a1 + 1432), *(double *)&v15);
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 720);
  if (a3 == 14)
  {
    v16 = *(_QWORD *)(a1 + 664);
    *(_QWORD *)(a4 + 128) = v16;
  }
  else
  {
    v16 = 3000;
  }
  *(_QWORD *)(a4 + 56) = v16;
  v17 = *(_OWORD *)(a4 + 208);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a4 + 192);
  *(_OWORD *)(a1 + 1056) = v17;
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a4 + 224);
  v18 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(a1 + 992) = v18;
  v19 = *(_OWORD *)(a4 + 176);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a4 + 160);
  *(_OWORD *)(a1 + 1024) = v19;
  v20 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 928) = v20;
  v21 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 960) = v21;
  v22 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 848) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 864) = v22;
  v23 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 896) = v23;
}

double sub_100DD3EE0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v13;
  _OWORD v14[14];
  uint64_t v15;

  v3 = *(_OWORD *)(a2 + 208);
  v14[12] = *(_OWORD *)(a2 + 192);
  v14[13] = v3;
  v15 = *(_QWORD *)(a2 + 224);
  v4 = *(_OWORD *)(a2 + 144);
  v14[8] = *(_OWORD *)(a2 + 128);
  v14[9] = v4;
  v5 = *(_OWORD *)(a2 + 176);
  v14[10] = *(_OWORD *)(a2 + 160);
  v14[11] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v14[4] = *(_OWORD *)(a2 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a2 + 112);
  v14[6] = *(_OWORD *)(a2 + 96);
  v14[7] = v7;
  v8 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v8;
  v9 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v9;
  v13 = 0;
  v10 = *(_QWORD *)(a1 + 1472);
  if (!v10)
    sub_10025FD1C();
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v14);
  return sub_1004C17E0(a1 + 1568, a2);
}

uint64_t sub_100DD3FB0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;

  v3 = atomic_load((unsigned __int8 *)&qword_102308648);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_102308648))
  {
    LOWORD(v18) = 180;
    sub_100DE0060(buf, "WorkoutDetectionStartTimerDelayWorkout", &v18, 0);
    LOWORD(v14) = *(_WORD *)&buf[2];
    dword_102308640 = (int)(float)((float)v14 / 2.56);
    __cxa_guard_release(&qword_102308648);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_102308658);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102308658))
  {
    LOWORD(v18) = 600;
    sub_100DE0060(buf, "WorkoutDetectionStartTimerDelayWalking", &v18, 0);
    LOWORD(v15) = *(_WORD *)&buf[2];
    dword_102308650 = (int)(float)((float)v15 / 2.56);
    __cxa_guard_release(&qword_102308658);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_102308668);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_102308668))
  {
    LOWORD(v18) = 180;
    sub_100DE0060(buf, "WorkoutDetectionStartTimerDelayRunning", &v18, 0);
    LOWORD(v16) = *(_WORD *)&buf[2];
    dword_102308660 = (int)(float)((float)v16 / 2.56);
    __cxa_guard_release(&qword_102308668);
  }
  if ((unint64_t)(a2 - 20) < 0x2F)
  {
LABEL_6:
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to get workout start reminder delay for workout type: %{public}ld.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = 134349056;
      v19 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Failed to get workout start reminder delay for workout type: %{public}ld.", &v18, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "int CLWorkoutPredictor::getDelayInEpochsForStartRemindersForLabel(CMWorkoutType) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
LABEL_11:
    v7 = 0x7FFFFFFFLL;
  }
  else
  {
    switch(a2)
    {
      case 0:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 11:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
        goto LABEL_6;
      case 1:
        v7 = dword_102308650;
        break;
      case 2:
        v7 = dword_102308660;
        break;
      case 3:
      case 4:
      case 9:
      case 12:
      case 14:
      case 19:
        v7 = dword_102308640;
        break;
      default:
        goto LABEL_11;
    }
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    v23 = a2;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLAS,Received workout start reminder delay in epochs for workout type,%{public}ld,delay,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v18 = 134349312;
    v19 = a2;
    v20 = 1026;
    v21 = v7;
    LODWORD(v17) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,Received workout start reminder delay in epochs for workout type,%{public}ld,delay,%{public}d", &v18, v17);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "int CLWorkoutPredictor::getDelayInEpochsForStartRemindersForLabel(CMWorkoutType) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return v7;
}

void sub_100DD4458(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308668);
  _Unwind_Resume(a1);
}

uint64_t sub_100DD44E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1480) = a2;
  return result;
}

uint64_t sub_100DD44F0(uint64_t result, double a2)
{
  *(double *)(result + 1496) = a2;
  return result;
}

uint64_t sub_100DD44F8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1488) = a2;
  return result;
}

uint64_t sub_100DD4500(uint64_t a1, uint64_t *a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t *v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD v24[2];
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  _BOOL4 v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  int v50;

  v4 = sub_100DD4868(a1);
  v5 = v4;
  if (*((_BYTE *)a2 + 32))
  {
    if (*(_QWORD *)(a1 + 720) == 1)
    {
      v6 = a2 + 1;
      v7 = 1;
LABEL_10:
      v9 = 1;
      goto LABEL_12;
    }
    v7 = *(_QWORD *)(a1 + 632) == 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = a2 + 1;
  if (a2[1])
    v8 = v7;
  else
    v8 = 1;
  if (((v8 | v4) & 1) != 0)
    goto LABEL_10;
  v7 = 0;
  v9 = *(_BYTE *)(a1 + 1388) == 0;
LABEL_12:
  v10 = sub_100EE1228(*(_QWORD *)(a1 + 1432));
  v11 = *(_DWORD *)(a1 + 1384);
  if (sub_100F72C2C(*v6) == 3)
    result = MGGetBoolAnswer(CFSTR("DeviceSupportsCyclingAutoStartReminders"));
  else
    result = 1;
  v13 = result ^ 1;
  if ((v9 & v10 & 1) != 0 || v11 == 4 || v13)
  {
    if (v5 || !*(_BYTE *)(a1 + 1388))
    {
      v14 = 13;
    }
    else if (v11 == 4)
    {
      v14 = 8;
    }
    else if ((result & 1) != 0)
    {
      v14 = 7;
    }
    else
    {
      v14 = 14;
    }
    LODWORD(v22) = v14;
    v23 = *a2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v15 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(unsigned __int8 *)(a1 + 1388);
      v17 = *v6;
      *(_DWORD *)buf = 67241728;
      v38 = v5;
      v39 = 1026;
      v40 = v16;
      v41 = 2050;
      v42 = v17;
      v43 = 1026;
      v44 = v10;
      v45 = 1026;
      v46 = v7;
      v47 = 1026;
      v48 = v11 == 4;
      v49 = 1026;
      v50 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Workout Predictor Deescalating,shouldMute,%{public}d,startAlertEnabled,%{public}d,tier2,%{public}lu,backgroundDeescalate,%{public}d,isTrackingAltWalk,%{public}d,vehicular,%{public}d,supportedAlertType,%{public}d", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = *(unsigned __int8 *)(a1 + 1388);
      v19 = *v6;
      v24[0] = 67241728;
      v24[1] = v5;
      v25 = 1026;
      v26 = v18;
      v27 = 2050;
      v28 = v19;
      v29 = 1026;
      v30 = v10;
      v31 = 1026;
      v32 = v7;
      v33 = 1026;
      v34 = v11 == 4;
      v35 = 1026;
      v36 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout Predictor Deescalating,shouldMute,%{public}d,startAlertEnabled,%{public}d,tier2,%{public}lu,backgroundDeescalate,%{public}d,isTrackingAltWalk,%{public}d,vehicular,%{public}d,supportedAlertType,%{public}d", v24, 48, v22, v23);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::checkDeescalationAndSignal(CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((_DWORD)result)
      return sub_10023195C(a1 + 8, 14, (uint64_t)&v22);
  }
  return result;
}

BOOL sub_100DD4868(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 1184)) < *(double *)(a1 + 1192)
      && *(_QWORD *)(a1 + 1120) == *(_QWORD *)(a1 + 632)
      && *(_QWORD *)(a1 + 1144) == *(_QWORD *)(a1 + 656);
}

_QWORD *sub_100DD48C4(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v4;
  dispatch_queue_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (uint64_t)result;
  switch(a2)
  {
    case 8:
      v8 = 23;
      if (*(_DWORD *)a3 == 2)
        v8 = 3;
      v9 = 2;
      if (*(_DWORD *)a3 != 1)
        v9 = v8;
      if (v9 != 23 && result[108] != v9)
      {
        if (v9 == 3)
        {
          *(_QWORD *)&v11 = *(_QWORD *)(a3 + 8);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          if (!(_DWORD)result)
            return result;
          v6 = v4 + 8;
          v7 = 8;
        }
        else
        {
          *(_QWORD *)&v11 = *(_QWORD *)(a3 + 8);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          if (!(_DWORD)result)
            return result;
          v6 = v4 + 8;
          v7 = 9;
        }
        return (_QWORD *)sub_10023195C(v6, v7, (uint64_t)&v11);
      }
      break;
    case 4:
      sub_10106C850(result + 4, (__int128 *)a3);
      result = (_QWORD *)sub_100DD4500(v4, (uint64_t *)a3);
      v10 = *(_QWORD *)(a3 + 8);
      if (v10)
      {
        if (v10 != 25)
        {
          v12 = 0;
          *(_QWORD *)&v11 = v10;
          *((_QWORD *)&v11 + 1) = *(_QWORD *)(a3 + 24);
          LODWORD(v12) = *(_DWORD *)(a3 + 16);
          v13 = *(_QWORD *)a3;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
          if ((_DWORD)result)
          {
            v6 = v4 + 8;
            v7 = 2;
            return (_QWORD *)sub_10023195C(v6, v7, (uint64_t)&v11);
          }
        }
      }
      break;
    case 1:
      v5 = (dispatch_queue_t *)sub_10009EC60();
      sub_100EA5318(v5, a3);
      v11 = *(_OWORD *)a3;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if ((_DWORD)result)
      {
        v6 = v4 + 8;
        v7 = 4;
        return (_QWORD *)sub_10023195C(v6, v7, (uint64_t)&v11);
      }
      break;
  }
  return result;
}

BOOL sub_100DD4A44(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  int v5;
  double v6;
  double v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  _BOOL8 v14;
  _BOOL4 v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  BOOL v24;
  _QWORD v25[6];
  BOOL v26;
  BOOL v27;
  BOOL v28;
  char v29;
  char v30;
  BOOL v31;
  _DWORD v32[2];
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  double v46;
  uint8_t buf[4];
  _BOOL4 v48;
  __int16 v49;
  _BYTE v50[10];
  _BYTE v51[6];
  _BYTE v52[6];
  _BYTE v53[10];
  __int16 v54;
  _BOOL4 v55;
  __int16 v56;
  double v57;

  if (*(_BYTE *)(a1 + 1388))
    v4 = *(_DWORD *)(a1 + 400) == 0;
  else
    v4 = 0;
  v5 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(double *)a2;
  v7 = *(double *)(a1 + 728);
  v24 = *(double *)a2 > v7;
  v8 = sub_100EE0EDC(*(_QWORD *)(a1 + 1432), *(_QWORD *)(a2 + 16));
  if (sub_100F72C2C(*(_QWORD *)(a2 + 16)) == 3)
    v9 = MGGetBoolAnswer(CFSTR("DeviceSupportsCyclingAutoStartReminders"));
  else
    v9 = 1;
  v10 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 1184)) < *(double *)(a1 + 1192)
     && *(_QWORD *)(a2 + 16) == 3
     && *(_QWORD *)(a1 + 1120) == 4;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v11 = qword_10229FE68;
  v12 = os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    *(_DWORD *)buf = 68290562;
    v48 = 0;
    v49 = 2082;
    *(_QWORD *)v50 = "";
    *(_WORD *)&v50[8] = 1026;
    *(_DWORD *)v51 = v4;
    *(_WORD *)&v51[4] = 1026;
    *(_DWORD *)v52 = v6 > v7;
    *(_WORD *)&v52[4] = 1026;
    *(_DWORD *)v53 = v8;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v9;
    v54 = 1026;
    v55 = v10;
    v56 = 1026;
    LODWORD(v57) = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAS,check if workout should escalate.\", \"is start enabled\":%{public}hhd, \"is new\":%{public}hhd, \"allow background\":%{public}hhd, \"is allowed type\":%{public}hhd, \"should mute\":%{public}hhd, \"is early detection\":%{public}hhd}", buf, 0x36u);
  }
  if (v5)
  {
    v14 = 0;
  }
  else
  {
    v15 = v6 > v7 && v4;
    v14 = v15 & v9 & !v10 | v8;
  }
  if (sub_1008293CC(v12, v13))
  {
    if (*(_BYTE *)(a1 + 536))
    {
      v16 = sub_1001FCBB4();
      if (!*(_BYTE *)(a1 + 536))
        sub_10028DF3C();
      v17 = v16 - *(double *)(a1 + 528);
    }
    else
    {
      v17 = -1.0;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v18 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 67241984;
      v48 = v4;
      v49 = 1026;
      *(_DWORD *)v50 = v6 > v7;
      *(_WORD *)&v50[4] = 1026;
      *(_DWORD *)&v50[6] = v8;
      *(_WORD *)v51 = 1026;
      *(_DWORD *)&v51[2] = v9;
      *(_WORD *)v52 = 1026;
      *(_DWORD *)&v52[2] = v5;
      *(_WORD *)v53 = 2050;
      *(_QWORD *)&v53[2] = v19;
      v54 = 1026;
      v55 = v14;
      v56 = 2048;
      v57 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLAS,analytics,Escalations,areStartAlertsEnabled,%{public}d,isNewEscalation,%{public}d,isBackgroundEscalation,%{public}d,isAllowedWorkoutType,%{public}d,isEarlyDetection,%{public}d,workoutType,%{public}ld,shouldInitiateNonEarlyEscalation,%{public}d,timeSinceLastEarlyEscalationSeconds,%.1lf", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v21 = *(_QWORD *)(a2 + 16);
      v32[0] = 67241984;
      v32[1] = v4;
      v33 = 1026;
      v34 = v6 > v7;
      v35 = 1026;
      v36 = v8;
      v37 = 1026;
      v38 = v9;
      v39 = 1026;
      v40 = v5;
      v41 = 2050;
      v42 = v21;
      v43 = 1026;
      v44 = v14;
      v45 = 2048;
      v46 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,analytics,Escalations,areStartAlertsEnabled,%{public}d,isNewEscalation,%{public}d,isBackgroundEscalation,%{public}d,isAllowedWorkoutType,%{public}d,isEarlyDetection,%{public}d,workoutType,%{public}ld,shouldInitiateNonEarlyEscalation,%{public}d,timeSinceLastEarlyEscalationSeconds,%.1lf", v32, 58);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::shouldEscalate(const EApEscalation *) const", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100DD4ED4;
    v25[3] = &unk_102187B30;
    v26 = v4;
    v27 = v24;
    v28 = v8;
    v29 = v9;
    v30 = v5;
    v25[4] = a2;
    v31 = v14;
    *(double *)&v25[5] = v17;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.WorkoutPredictor.Escalations"), v25);
  }
  return v14;
}

NSDictionary *sub_100DD4ED4(uint64_t a1)
{
  _QWORD v3[8];
  _QWORD v4[8];

  v3[0] = CFSTR("areStartAlertsEnabled");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48));
  v3[1] = CFSTR("isNewEscalation");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 49));
  v3[2] = CFSTR("isBackgroundEscalation");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 50));
  v3[3] = CFSTR("isAllowedWorkoutType");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 51));
  v3[4] = CFSTR("isEarlyEscalation");
  v4[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 52));
  v3[5] = CFSTR("workoutType");
  v4[5] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3[6] = CFSTR("shouldInitiateNonEarlyEscalation");
  v4[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 53));
  v3[7] = CFSTR("timeSinceLastEarlyEscalationSeconds");
  v4[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 8);
}

BOOL sub_100DD5024(uint64_t a1, _QWORD *a2)
{
  _BOOL4 v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  _BOOL4 v8;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  _BOOL4 v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (CLMotionActivity::isTypePedestrian(+[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", *a2)))v3 = *(_QWORD *)(a1 + 656) == 0;
  else
    v3 = 0;
  v4 = sub_1001B7910();
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102187B98);
  v5 = v4 & 0x1000000000000;
  v6 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 1336);
    *(_DWORD *)buf = 67240704;
    v19 = v3;
    v20 = 1026;
    v21 = v7;
    v22 = 1026;
    v23 = HIWORD(v5);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "isWaitingForIndoorOutdoorDisambiguation,%{public}d,permission,%{public}d,enabled,%{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102187B98);
    v10 = *(unsigned __int8 *)(a1 + 1336);
    v13[0] = 67240704;
    v13[1] = v3;
    v14 = 1026;
    v15 = v10;
    v16 = 1026;
    v17 = HIWORD(v5);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "isWaitingForIndoorOutdoorDisambiguation,%{public}d,permission,%{public}d,enabled,%{public}d", v13, 20);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isWaitingForIndoorOutdoorDisambiguation(const ELabelerUpdate *) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (*(_BYTE *)(a1 + 1336))
    v8 = v3;
  else
    v8 = 0;
  return v5 && v8;
}

uint64_t sub_100DD5258(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  _BYTE v6[8];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v1 = *(_BYTE *)(a1 + 24);
  if (v1)
    v1 = *(_QWORD *)(a1 + 744) != 1;
  v2 = *(_QWORD *)(a1 + 720);
  v6[0] = v1;
  memset(&v6[1], 0, 7);
  v7 = v2;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v5 = 2;
  v3 = *(_QWORD *)(a1 + 1472);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v3 + 48))(v3, &v5, v6);
}

uint64_t sub_100DD531C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v5;
  _BYTE v6[8];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  memset(&v6[1], 0, 7);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v6[0] = a3;
  v7 = a2;
  v5 = 5;
  v3 = *(_QWORD *)(a1 + 1472);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v3 + 48))(v3, &v5, v6);
}

uint64_t sub_100DD53C8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  int v4;
  _OWORD v5[14];
  uint64_t v6;
  __int128 v7;
  _BYTE v8[216];

  memset(&v8[8], 0, 208);
  *(_QWORD *)v8 = a1[170];
  v5[4] = *(_OWORD *)&v8[48];
  v5[5] = *(_OWORD *)&v8[64];
  v5[2] = *(_OWORD *)&v8[16];
  v5[3] = *(_OWORD *)&v8[32];
  v5[8] = *(_OWORD *)&v8[112];
  v5[9] = *(_OWORD *)&v8[128];
  v5[6] = *(_OWORD *)&v8[80];
  v5[7] = *(_OWORD *)&v8[96];
  v5[12] = *(_OWORD *)&v8[176];
  v5[13] = *(_OWORD *)&v8[192];
  v5[10] = *(_OWORD *)&v8[144];
  v5[11] = *(_OWORD *)&v8[160];
  v7 = *((_OWORD *)a1 + 84);
  v6 = 0;
  v5[0] = v7;
  v5[1] = *(_OWORD *)v8;
  v4 = 6;
  v1 = a1[184];
  if (!v1)
    sub_10025FD1C();
  v2 = a1 + 168;
  result = (*(uint64_t (**)(_QWORD, int *, _OWORD *))(*(_QWORD *)v1 + 48))(a1[184], &v4, v5);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  return result;
}

uint64_t sub_100DD54DC(_QWORD *a1)
{
  BOOL v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  _BYTE v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];

  v1 = a1[55] != 0;
  v2 = a1[58];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v6[0] = v1;
  v6[1] = v2 != 0;
  v5 = 3;
  v3 = a1[184];
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v3 + 48))(v3, &v5, v6);
}

uint64_t sub_100DD55B4(_QWORD *a1)
{
  _BOOL4 v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;

  v2 = sub_100DD4868((uint64_t)a1);
  v3 = sub_100DD5714((uint64_t)a1);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[140];
    v6 = a1[79];
    v7 = a1[143];
    v8 = a1[82];
    v9 = a1[148];
    v10 = a1[149];
    v12[0] = 68291074;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v5;
    v17 = 2050;
    v18 = v6;
    v19 = 2050;
    v20 = v7;
    v21 = 2050;
    v22 = v8;
    v23 = 1026;
    v24 = v2;
    v25 = 2050;
    v26 = v9;
    v27 = 2050;
    v28 = v10;
    v29 = 1026;
    v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"should mute - start\", \"previous workout type\":%{public}ld, \"current workout type\":%{public}ld, \"previous workout location type\":%{public}ld, \"current workout location type\":%{public}ld, \"should mute\":%{public}d, \"previous mute time - start\":\"%{public}f\", \"previous mute interval - start\":\"%{public}f\", \"backgroundEscalationIsNotActive\":%{public}d}", (uint8_t *)v12, 0x5Au);
  }
  return v2 & v3;
}

uint64_t sub_100DD5714(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = sub_100EE1228(*(_QWORD *)(a1 + 1432));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return v1;
}

void sub_100DD58C8(uint64_t *a1, double *a2)
{
  double v3;
  _BYTE v4[232];

  v3 = *a2;
  a1[85] = *(_QWORD *)a2;
  *((double *)a1 + 91) = v3;
  sub_100DD3CCC((uint64_t)a1, 1, a1[78], (uint64_t)v4, v3);
  sub_100DD3EE0((uint64_t)a1, (uint64_t)v4);
  sub_100DD5960((uint64_t)a1);
  sub_100DD5BB0((uint64_t)a1);
}

uint64_t sub_100DD5960(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EUserEndedWorkout]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10090020C(a1 + 1512);
  sub_100DD83C8(a1);
  sub_100DD7910((_QWORD *)a1);
  sub_100DD8578(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100DD1008();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 664) = 3000;
  if (*(_QWORD *)(a1 + 1344) || *(_QWORD *)(a1 + 1352) || *(_QWORD *)(a1 + 1360))
    sub_100DD53C8((_QWORD *)a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  return sub_100DD5258(a1);
}

void sub_100DD5BB0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t **v4;
  uint64_t *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to tear down ActiveStateDetector", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Trying to tear down ActiveStateDetector", v11, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownActiveStateDetector()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_QWORD *)(a1 + 472))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tearing down ActiveStateDetector", buf, 2u);
    }
    v4 = (uint64_t **)(a1 + 472);
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v11[0] = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down ActiveStateDetector", v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownActiveStateDetector()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = *v4;
    *v4 = 0;
    if (v5)
      sub_1006CD660((uint64_t)v4, v5);
  }
}

uint64_t sub_100DD5E88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int isTypePedestrian;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 648);
  isTypePedestrian = CLMotionActivity::isTypePedestrian(+[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", *a2));
  v6 = sub_1001B7910();
  v7 = *(_QWORD *)(a1 + 624);
  v9 = v7 != 15 && v7 != 24;
  v10 = 0;
  if (isTypePedestrian && v4 && v4 != 3)
    return sub_100DD5F18(a1, a2) & HIWORD(v6) & v9;
  return v10;
}

uint64_t sub_100DD5F18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v13;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v4 = sub_100F72C2C(*(_QWORD *)(a1 + 624));
  v5 = sub_100F72C2C(*a2);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    v26 = v4;
    v27 = 2050;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Checking if resuming the same workout: confirmed=%{public}ld detected=%{public}ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v21 = 134349312;
    v22 = v4;
    v23 = 2050;
    v24 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Checking if resuming the same workout: confirmed=%{public}ld detected=%{public}ld", &v21, 22);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isSameWorkout(const ELabelerUpdate *const) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v7 = *(_QWORD *)(a1 + 624);
  if (v7 == 24 || v7 == 15)
  {
    v8 = sub_100F72C2C(v4);
    v10 = v8 == 1 || v8 == 24;
    v11 = sub_100F72C2C(v5);
    v13 = v11 == 1 || v11 == 24;
    if (v10 != v13)
      return 0;
  }
  else if (v4 != v5)
  {
    return 0;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v15 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Checking to see if we should retract stop alert. Workout is the same.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    LOWORD(v21) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Checking to see if we should retract stop alert. Workout is the same.", &v21, v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isSameWorkout(const ELabelerUpdate *const) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return 1;
}

BOOL sub_100DD627C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 648);
    v6 = *a2;
    *(_DWORD *)buf = 134349312;
    v17 = v5;
    v18 = 2050;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Checking if resuming in the same location: previous=%{public}ld new=%{public}ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8 = *(_QWORD *)(a1 + 648);
    v9 = *a2;
    v12 = 134349312;
    v13 = v8;
    v14 = 2050;
    v15 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Checking if resuming in the same location: previous=%{public}ld new=%{public}ld", &v12, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isSameLocation(const ELocationTypeUpdate *const) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return *(_QWORD *)(a1 + 648) == *a2;
}

BOOL sub_100DD6460(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  _BOOL4 v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  _BOOL4 v15;

  v2 = *(_DWORD *)(a1 + 640);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 640);
    *(_DWORD *)buf = 67240448;
    v13 = v4;
    v14 = 1026;
    v15 = v2 == 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "isPredictedWorkoutConfidenceHigh,detectedWorkoutConfidence,%{public}d,is_high,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6 = *(_DWORD *)(a1 + 640);
    v9[0] = 67240448;
    v9[1] = v6;
    v10 = 1026;
    v11 = v2 == 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "isPredictedWorkoutConfidenceHigh,detectedWorkoutConfidence,%{public}d,is_high,%{public}d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isPredictedWorkoutConfidenceHigh(const EStartReminderDelayExpired *const) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v2 == 1;
}

BOOL sub_100DD6644(uint64_t a1)
{
  unsigned __int8 v1;
  int v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  _BOOL4 v14;

  v1 = atomic_load((unsigned __int8 *)&qword_102308678);
  if ((v1 & 1) == 0)
  {
    v10 = a1;
    v11 = __cxa_guard_acquire(&qword_102308678);
    a1 = v10;
    if (v11)
    {
      v12[0] = 120;
      sub_1004AD1D8(buf, "AddedDelayInSecondsForHighConfidence", v12, 0);
      dword_102308670 = (int)(float)((float)v14 / 2.56);
      __cxa_guard_release(&qword_102308678);
      a1 = v10;
    }
  }
  v2 = *(_DWORD *)(a1 + 716);
  v3 = *(_DWORD *)(a1 + 712);
  v4 = dword_102308670;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v5 = v4 + v3;
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v14 = v2 < v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor::shouldWaitForHighConfidence,shouldWaitForHighConfidenceVar,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v12[0] = 67240192;
    v12[1] = v2 < v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutPredictor::shouldWaitForHighConfidence,shouldWaitForHighConfidenceVar,%{public}d", v12, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::shouldWaitForHighConfidence(const EStartReminderDelayExpired *const) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v2 < v5;
}

void sub_100DD6894(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308678);
  _Unwind_Resume(a1);
}

uint64_t (***sub_100DD68B4(uint64_t a1))(_QWORD, uint8_t *)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "User started activity again. Check to see if we should retract stop alert. Bringing up indoor/outdoor detector.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "User started activity again. Check to see if we should retract stop alert. Bringing up indoor/outdoor detector.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterConfirmStopRetraction(const ELabelerUpdate *const)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100DD6A4C(a1);
}

uint64_t (***sub_100DD6A4C(uint64_t a1))(_QWORD, uint8_t *)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t (***result)(_QWORD, uint8_t *);
  BOOL v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102187B98);
  v2 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 456);
    *(_DWORD *)buf = 67240192;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up Indoor/Outdoor detector,isActive,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102187B98);
    v7 = *(unsigned __int8 *)(a1 + 456);
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "Bringing up Indoor/Outdoor detector,isActive,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupIndoorOutdoor()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
  result = (uint64_t (***)(_QWORD, uint8_t *))sub_1000E4778(v4);
  if (!*(_BYTE *)(a1 + 456))
  {
    v6 = 1;
    *(_BYTE *)(a1 + 456) = 1;
    v13 = *(_QWORD *)(a1 + 1480);
    v14 = *(_QWORD *)(a1 + 1496);
    if (sub_100F72CA4(*(_QWORD *)(a1 + 624)))
      v6 = *(_QWORD *)(a1 + 648) != 3;
    buf[0] = v6;
    result = *(uint64_t (****)(_QWORD, uint8_t *))(a1 + 1504);
    if (result)
      return (uint64_t (***)(_QWORD, uint8_t *))(**result)(result, buf);
  }
  return result;
}

void sub_100DD6C64(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  double Current;
  double v13;
  double v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  v4 = (unsigned __int8 *)(a1 + 592);
  uuid_generate((unsigned __int8 *)(a1 + 592));
  sub_100DD2504(v5, v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (double *)a2;
  *(_QWORD *)(a1 + 1344) = v6;
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 8 * (v6 == 3));
  *(_QWORD *)(a1 + 632) = 25;
  if (v6 == 3)
  {
    v14 = CFAbsoluteTimeGetCurrent() + -48.6399994;
    v7 = &v14;
    if (*(double *)a2 >= v14)
      v7 = (double *)a2;
  }
  *(_DWORD *)(a1 + 716) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), *v7) / 2.55999994);
  *(_DWORD *)(a1 + 712) = sub_100DD3FB0(v8, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 736) = 3;
  sub_100DD6E9C(a1);
  sub_100EE0B34(*(_QWORD *)(a1 + 1432), *(_QWORD *)(a2 + 16));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v9 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a1 + 716);
    *(_QWORD *)&v14 = 68289538;
    v15 = 2082;
    v16 = "";
    v17 = 2050;
    v18 = v10;
    v19 = 1026;
    v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Transitioned to kWaitForLabel state.\", \"escalated workout type\":%{public}ld, \"elapsed epochs\":%{public}d}", (uint8_t *)&v14, 0x22u);
  }
  sub_100DD5258(a1);
  sub_100DD531C(a1, *(_QWORD *)(a2 + 16), 0);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC(a1, 8, *(_QWORD *)(a1 + 632), (uint64_t)&v14, Current);
  sub_100DD3EE0(a1, (uint64_t)&v14);
  v13 = CFAbsoluteTimeGetCurrent();
  sub_100DD0DDC(a1, 8, *(_QWORD *)(a1 + 632), 0, v13);
  if (*(_QWORD *)(a2 + 16) == 3)
    sub_100900424(a1 + 1512, 4, 2, 0, 0);
}

_QWORD *sub_100DD6E9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  _QWORD v14[3];
  _QWORD *v15;
  uint8_t buf[1640];

  v2 = a1 + 32;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  result = (_QWORD *)sub_1000E4778(v3);
  v5 = *(_QWORD *)(v2 + 400);
  if (v5)
  {
    *(_BYTE *)(v5 + 56) = 0;
    return result;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bringing up WorkoutLabeler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up WorkoutLabeler", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupLabeler()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v14[0] = off_102188168;
  v14[1] = a1;
  v15 = v14;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(buf, a1, v2, v14);
  v7 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v8 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v15;
  if (v15 == v14)
  {
    v10 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_100DD70EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_100DD712C(uint64_t a1, uint64_t a2))(_QWORD, uint8_t *)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kLabelAvailable state, wait for indoor/outdoor.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Transitioned to kLabelAvailable state, wait for indoor/outdoor.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterLabelAvailable_waitForIndoorOutdoor(const ELabelerUpdate *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_100DD72D4(a1, a2);
  return sub_100DD6A4C(a1);
}

void sub_100DD72D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  double Current;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kLabelAvailable state.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Transitioned to kLabelAvailable state.", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterLabelAvailable(const ELabelerUpdate *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 672) != v5)
  {
    *(double *)(a1 + 672) = v5;
    *(_DWORD *)(a1 + 716) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), v5) / 2.55999994);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 632) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 16);
  sub_100EE0B34(*(_QWORD *)(a1 + 1432), v6);
  if (sub_100F72C2C(*(_QWORD *)(a1 + 632)) == 1)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_100DD3CCC(a1, 9, *(_QWORD *)(a1 + 632), (uint64_t)buf, Current);
    sub_100DD3EE0(a1, (uint64_t)buf);
  }
}

void sub_100DD74F0(_QWORD *a1)
{
  NSObject *v2;
  double Current;
  double v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Transitioned to kWorkoutStarted.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Transitioned to kWorkoutStarted.", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStarted(const EStartReminderDelayExpired *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1004C0F9C((uint64_t)(a1 + 196), a1 + 74, a1[64], a1[65], 2);
  sub_100DD7750((uint64_t)a1);
  sub_100DD7910(a1);
  sub_100DD7AC0(a1);
  if (sub_100F72C2C(a1[79]) != 1)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_100DD3CCC((uint64_t)a1, 9, a1[79], (uint64_t)buf, Current);
    sub_100DD3EE0((uint64_t)a1, (uint64_t)buf);
  }
  if (a1[79] == 19)
  {
    a1[105] = 0;
    a1[104] = 0;
    a1[82] = 1;
    sub_100900424((uint64_t)(a1 + 189), 19, 1, 0, 0);
  }
  v4 = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC((uint64_t)a1, 11, a1[79], (uint64_t)buf, v4);
  sub_100DD3EE0((uint64_t)a1, (uint64_t)buf);
  a1[169] = a1[79];
}

double sub_100DD7750(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting mute alerts for start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Resetting mute alerts for start", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::resetMuteStartAlert(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  uuid_clear((unsigned __int8 *)(a1 + 1080));
  *(_QWORD *)(a1 + 1112) = 26;
  *(_QWORD *)(a1 + 1120) = 26;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1160) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1168) = 0x7FEFFFFFFFFFFFFFLL;
  result = 2.22507386e-308;
  *(_OWORD *)(a1 + 1184) = xmmword_101BB26B0;
  return result;
}

_QWORD *sub_100DD7910(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[54])
  {
    v1 = result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down labeler", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down labeler", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownLabeler()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = (_QWORD *)v1[54];
    v1[54] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_100DD7AC0(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  int buf;
  uint8_t buf_4[8];
  __int16 v29;
  id v30;

  if (!a1[53])
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up StopDetector", &v23, 2);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
    operator new();
  }
  v3 = a1[78];
  if (v3)
    v4 = v3 == 26;
  else
    v4 = 1;
  if (v4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[79];
      v7 = (void *)a1[82];
      buf = 134218240;
      *(_QWORD *)buf_4 = v6;
      v29 = 2048;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v12 = a1[79];
      v13 = (void *)a1[82];
      v23 = 134218240;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    result = sub_10135D46C(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[78];
      v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v10);
      buf = 134218240;
      *(_QWORD *)buf_4 = v10;
      v29 = 2048;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = qword_10229FE68;
      v19 = a1[78];
      v20 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v19);
      v23 = 134218240;
      v24 = v19;
      v25 = 2048;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v22 = (int *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v21);
      if (v22 != &buf)
        free(v22);
    }
    result = sub_10135D46C(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", a1[78]), 0);
  }
  *(_QWORD *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100DD803C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == v18)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100DD8094(_QWORD *a1, int *a2)
{
  NSObject *v4;
  double Current;
  _QWORD *result;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kWorkoutStopped (stop was detected after start confirmation).", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Transitioned to kWorkoutStopped (stop was detected after start confirmation).", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStoppedAfterStartConfirmation(const EStopDetected *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100DD8298((uint64_t)a1, a2);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC((uint64_t)a1, 4, a1[78], (uint64_t)buf, Current);
  sub_100DD3EE0((uint64_t)a1, (uint64_t)buf);
  sub_100DD83C8((uint64_t)a1);
  sub_100DD7910(a1);
  sub_100DD8578((uint64_t)a1);
  result = sub_100DD6E9C((uint64_t)a1);
  v7 = a1[78];
  if (v7 == 24 || v7 == 15)
    *(_BYTE *)(a1[54] + 56) = 1;
  return result;
}

double sub_100DD8298(uint64_t a1, int *a2)
{
  NSObject *v4;
  CFAbsoluteTime Current;
  uint64_t v6;
  int v7;
  double result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  CFAbsoluteTime v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v6 = *((_QWORD *)a2 + 1);
    v7 = *a2;
    v9[0] = 68289794;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = Current;
    v14 = 2050;
    v15 = v6;
    v16 = 1026;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Workout stop detected\", \"at\":\"%{public}f\", \"endTime\":\"%{public}f\", \"reason\":%{public}d}", (uint8_t *)v9, 0x2Cu);
  }
  *(_QWORD *)(a1 + 680) = *((_QWORD *)a2 + 1);
  result = 0.0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  return result;
}

void sub_100DD83C8(uint64_t a1)
{
  NSObject *v2;
  uint64_t **v3;
  uint64_t *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 424))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down stop detector", buf, 2u);
    }
    v3 = (uint64_t **)(a1 + 424);
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down stop detector", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownStopDetector()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v4 = *v3;
    *v3 = 0;
    if (v4)
      sub_1006CD6E0((uint64_t)v3, v4);
  }
}

void sub_100DD8578(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102187B98);
  v2 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 456);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Teardown indoor/outdoor,isActive,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102187B98);
    v5 = *(unsigned __int8 *)(a1 + 456);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "Teardown indoor/outdoor,isActive,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownIndoorOutdoor()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    *(_BYTE *)(a1 + 456) = 0;
    v4 = *(_QWORD *)(a1 + 1504);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

double sub_100DD8748(uint64_t a1, double *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v4 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a1 + 1288) = v4;
  v5 = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 1304) = *(_OWORD *)(a1 + 816);
  *(_OWORD *)(a1 + 1320) = v5;
  v6 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(a1 + 1208) = *(_OWORD *)(a1 + 720);
  *(_OWORD *)(a1 + 1224) = v6;
  v7 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a1 + 1240) = *(_OWORD *)(a1 + 752);
  *(_OWORD *)(a1 + 1256) = v7;
  v8 = *(_OWORD *)(a1 + 672);
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)(a1 + 656);
  *(_OWORD *)(a1 + 1160) = v8;
  v9 = *(_OWORD *)(a1 + 704);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a1 + 688);
  *(_OWORD *)(a1 + 1192) = v9;
  v10 = *(_OWORD *)(a1 + 608);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a1 + 592);
  *(_OWORD *)(a1 + 1096) = v10;
  v11 = *(_OWORD *)(a1 + 640);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a1 + 624);
  *(_OWORD *)(a1 + 1128) = v11;
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)a2;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v12 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 1192);
    v14 = *(_QWORD *)(a1 + 1120);
    *(_DWORD *)buf = 134349312;
    v25 = v13;
    v26 = 2050;
    v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Start alerts will be muted for %{public}f seconds for type %{public}ld.", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v16 = *(_QWORD *)(a1 + 1192);
    v17 = *(_QWORD *)(a1 + 1120);
    v20 = 134349312;
    v21 = v16;
    v22 = 2050;
    v23 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Start alerts will be muted for %{public}f seconds for type %{public}ld.", &v20, 22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::muteStartAlert(const EMuteAlert *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  sub_100DD3CCC(a1, 6, *(_QWORD *)(a1 + 1120), (uint64_t)buf, *a2);
  return sub_100DD3EE0(a1, (uint64_t)buf);
}

void sub_100DD898C(uint64_t a1, double *a2)
{
  sub_100DD8748(a1, a2);
  sub_100DD89C4(a1);
  sub_100DD2900(a1, 0);
}

uint64_t sub_100DD89C4(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction. Notifying clients.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction. Notifying clients.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC(a1, 10, 0, (uint64_t)buf, Current);
  sub_100DD3EE0(a1, (uint64_t)buf);
  v4 = CFAbsoluteTimeGetCurrent();
  sub_100DD0DDC(a1, 10, 0, 22, v4);
  return sub_100DE09B8(a1);
}

uint64_t sub_100DD8BA0(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  result = a1[58];
  if (result)
  {
    result = sub_1007B4F9C(result, a2, (uint64_t *)&v5);
    if ((_DWORD)result)
    {
      sub_10106C54C(a1 + 4, &v5);
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v11[0] = v5;
      v11[1] = v6;
      v12 = v7;
      v13 = v8;
      v14 = v9;
      v15 = 0;
      v10 = 12;
      v4 = a1[184];
      if (!v4)
        sub_10025FD1C();
      return (*(uint64_t (**)(uint64_t, int *, _QWORD *))(*(_QWORD *)v4 + 48))(v4, &v10, v11);
    }
  }
  return result;
}

uint64_t sub_100DD8C9C(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  double Current;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received indoor/outdoor update.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Received indoor/outdoor update.", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::updateIndoorOutdoorState(const ELocationTypeUpdate *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (a1[82] != *a2)
  {
    a1[82] = *a2;
    if (sub_100F72C2C(a1[79]) == 1)
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100DD3CCC((uint64_t)a1, 9, a1[79], (uint64_t)buf, Current);
      sub_100DD3EE0((uint64_t)a1, (uint64_t)buf);
    }
  }
  return sub_100EE0B08(a1[179], *a2);
}

double sub_100DD8E84(uint64_t a1, _QWORD *a2)
{
  double result;
  NSObject *v5;
  uint64_t v6;
  double Current;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  *(_QWORD *)(a1 + 648) = *a2;
  *(_QWORD *)(a1 + 624) = sub_100DD9080(a1, *(_QWORD *)(a1 + 624));
  sub_100DD8578(a1);
  if (*a2)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      *(_DWORD *)buf = 134349056;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received indoor/outdoor disambiguation for a one button workout, new location update %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v8 = *a2;
      v11 = 134349056;
      v12 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Received indoor/outdoor disambiguation for a one button workout, new location update %{public}ld", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::workoutConfirmedLocationUpdate(const ELocationTypeUpdate *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_100DD3CCC(a1, 7, *(_QWORD *)(a1 + 624), (uint64_t)buf, Current);
    return sub_100DD3EE0(a1, (uint64_t)buf);
  }
  return result;
}

uint64_t sub_100DD9080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  if (a2 == 2)
  {
    v4 = *(_QWORD *)(a1 + 648);
    if (v4 == 1)
    {
      v2 = 18;
    }
    else if (v4 == 2)
    {
      v2 = 17;
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v9 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Indoor/outdoor detector unable to disambiguate location for running", buf, 2u);
      }
      v2 = 2;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        LOWORD(v19) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Indoor/outdoor detector unable to disambiguate location for running", &v19, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
        v2 = 2;
      }
    }
  }
  else
  {
    v2 = a2;
    if (a2 == 1)
    {
      v3 = *(_QWORD *)(a1 + 648);
      if (v3 == 1)
      {
        v2 = 16;
      }
      else if (v3 == 2)
      {
        v2 = 15;
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        v8 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Indoor/outdoor detector unable to disambiguate location for walking", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102187B78);
          LOWORD(v19) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Indoor/outdoor detector unable to disambiguate location for walking", &v19, 2);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        v2 = 1;
      }
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v5 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Called updateWorkoutTypeForOneButtonWorkouts when not in a one button workout", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        LOWORD(v19) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Called updateWorkoutTypeForOneButtonWorkouts when not in a one button workout", &v19, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v22 = v2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updated workout type for one button workout to %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v19 = 134349056;
    v20 = v2;
    LODWORD(v18) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Updated workout type for one button workout to %{public}ld", &v19, v18);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return v2;
}

uint64_t sub_100DD960C(_QWORD *a1, _QWORD *a2)
{
  sub_100DD8E84((uint64_t)a1, a2);
  sub_100DD83C8((uint64_t)a1);
  return sub_100DD9640(a1);
}

uint64_t sub_100DD9640(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  int buf;
  uint8_t buf_4[8];
  __int16 v29;
  id v30;

  if (!a1[53])
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up StopDetector", &v23, 2);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
    operator new();
  }
  v3 = a1[78];
  if (v3)
    v4 = v3 == 26;
  else
    v4 = 1;
  if (v4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[79];
      v7 = (void *)a1[82];
      buf = 134218240;
      *(_QWORD *)buf_4 = v6;
      v29 = 2048;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v12 = a1[79];
      v13 = (void *)a1[82];
      v23 = 134218240;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    result = sub_10135D46C(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[78];
      v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v10);
      buf = 134218240;
      *(_QWORD *)buf_4 = v10;
      v29 = 2048;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = qword_10229FE68;
      v19 = a1[78];
      v20 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v19);
      v23 = 134218240;
      v24 = v19;
      v25 = 2048;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v22 = (int *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v21);
      if (v22 != &buf)
        free(v22);
    }
    result = sub_10135D46C(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", a1[78]), 0);
  }
  *(_QWORD *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100DD9BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == v18)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  operator delete();
}

void sub_100DD9C14(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)buf = 134349056;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating label startTime to %{public}f and tearing down indoor/outdoor.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6 = *(_QWORD *)(a2 + 24);
    v9 = 134349056;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Updating label startTime to %{public}f and tearing down indoor/outdoor.", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::updateLabel_teardownIndoorOutdoor(const ELabelerUpdate *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 24);
  sub_100DD9DE4(a1, a2);
  sub_100DD8578(a1);
}

void sub_100DD9DE4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double Current;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)a2;
    *(_DWORD *)buf = 134349056;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updating label to %{public}ld.", buf, 0xCu);
  }
  v6 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v13 = *(_QWORD *)a2;
    v16 = 134349056;
    v17 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Updating label to %{public}ld.", &v16, 12);
    v15 = (uint8_t *)v14;
    v6 = sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::updateLabel(const ELabelerUpdate *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v7 = *(_QWORD *)(a1 + 632);
  v8 = *(_QWORD *)a2;
  v9 = *(double *)(a1 + 672);
  v10 = *(double *)(a2 + 8);
  if (v9 != v10)
  {
    *(double *)(a1 + 672) = v10;
    *(_DWORD *)(a1 + 716) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), v10) / 2.55999994);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 632) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 712) = sub_100DD3FB0(v6, v11);
  if (v7 != v8 || v9 != v10)
  {
    sub_100EE0B34(*(_QWORD *)(a1 + 1432), *(_QWORD *)a2);
    if (sub_100F72C2C(*(_QWORD *)a2) == 1)
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100DD3CCC(a1, 9, *(_QWORD *)a2, (uint64_t)buf, Current);
      sub_100DD3EE0(a1, (uint64_t)buf);
    }
  }
}

void sub_100DDA04C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (sub_100F72CA4(*(_QWORD *)(a1 + 624)) && *(_QWORD *)(a1 + 648) == 3)
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102187B98);
    v2 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Entering a one button workout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102187B98);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "Entering a one button workout", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::checkIfOneButtonWorkoutAndBringupIndoorOutdoor()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    if (!*(_BYTE *)(a1 + 1488) && (sub_1001B7910() & 0x1000000000000) != 0)
      sub_100DD6A4C(a1);
  }
}

uint64_t sub_100DDA20C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  int buf;
  uint8_t buf_4[8];
  __int16 v29;
  id v30;

  if (!a1[53])
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up StopDetector", &v23, 2);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
    operator new();
  }
  v3 = a1[78];
  if (v3)
    v4 = v3 == 26;
  else
    v4 = 1;
  if (v4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[79];
      v7 = (void *)a1[82];
      buf = 134218240;
      *(_QWORD *)buf_4 = v6;
      v29 = 2048;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v12 = a1[79];
      v13 = (void *)a1[82];
      v23 = 134218240;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    result = sub_10135D46C(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[78];
      v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v10);
      buf = 134218240;
      *(_QWORD *)buf_4 = v10;
      v29 = 2048;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = qword_10229FE68;
      v19 = a1[78];
      v20 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v19);
      v23 = 134218240;
      v24 = v19;
      v25 = 2048;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v22 = (int *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v21);
      if (v22 != &buf)
        free(v22);
    }
    result = sub_10135D46C(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", a1[78]), 0);
  }
  *(_QWORD *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100DDA788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == v18)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100DDA7E0(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User confirmed start of a workout (and stop is enabled).", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "User confirmed start of a workout (and stop is enabled).", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutConfirmedStopEnabled(const EUserStartedWorkout *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_100DDA994((uint64_t)a1, a2);
  sub_100DDB00C(a1);
  return sub_100DD7910(a1);
}

void sub_100DDA994(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint8_t buf[48];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User confirmed start of a workout.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "User confirmed start of a workout.", &v29, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  sub_100DDB798(a1);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 160);
  v5 = *(double *)(a2 + 32);
  if (v5 >= *(double *)(a1 + 672))
    v5 = *(double *)(a1 + 672);
  *(double *)(a1 + 672) = v5;
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  v6 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 816) = v6;
  *(_OWORD *)(a1 + 768) = v8;
  *(_OWORD *)(a1 + 784) = v7;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 144);
  uuid_copy((unsigned __int8 *)(a1 + 608), (const unsigned __int8 *)(a2 + 16));
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592))
    || uuid_compare((const unsigned __int8 *)(a1 + 592), (const unsigned __int8 *)a2))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a2 + 40);
      v11 = *(_QWORD *)(a1 + 632);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "User started workout (%{public}ld) that differs from prediction (%{public}ld).", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v24 = *(_QWORD *)(a2 + 40);
      v25 = *(_QWORD *)(a1 + 632);
      v29 = 134349312;
      v30 = v24;
      v31 = 2050;
      v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "User started workout (%{public}ld) that differs from prediction (%{public}ld).", &v29, v28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    *(_DWORD *)(a1 + 736) = 1;
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 32);
    uuid_copy((unsigned __int8 *)(a1 + 592), (const unsigned __int8 *)a2);
    sub_100DD2504(v12, (unsigned __int8 *)(a1 + 592));
    sub_1004C0F9C(a1 + 1568, (_QWORD *)(a1 + 592), *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), 3);
  }
  else
  {
    *(_DWORD *)(a1 + 736) = 2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v19 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "User started workout based on prediction.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v29) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "User started workout based on prediction.", &v29, v28);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
  v13 = *(_QWORD *)(a1 + 656);
  if (v13 && v13 != *(_QWORD *)(a1 + 648))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v14 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 656);
      v16 = *(_QWORD *)(a1 + 648);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v15;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Location type differs\", \"Detected\":%{public}ld, \"User specified\":%{public}ld}", buf, 0x26u);
    }
  }
  sub_100DDA04C(a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  v17 = sub_100F72BB4(*(_QWORD *)(a1 + 632), *(_QWORD *)(a1 + 656));
  v18 = sub_100F72BB4(*(_QWORD *)(a1 + 624), *(_QWORD *)(a1 + 648));
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_100DD3CCC(a1, 0, *(_QWORD *)(a1 + 624), (uint64_t)buf, *(double *)(a2 + 32));
  if (v17 == v18)
  {
    sub_100900120(a1 + 1512, v38, *((uint64_t *)&v38 + 1), v39, *((uint64_t *)&v39 + 1));
    sub_1009004D0((_QWORD *)(a1 + 1512));
  }
  else
  {
    sub_10090020C(a1 + 1512);
  }
  sub_100DD3EE0(a1, (uint64_t)buf);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a2 + 40);
  sub_100DD53C8((_QWORD *)a1);
  sub_100DDB958((_QWORD *)a1);
}

uint64_t sub_100DDB00C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  int buf;
  uint8_t buf_4[8];
  __int16 v29;
  id v30;

  if (!a1[53])
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up StopDetector", &v23, 2);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
    operator new();
  }
  v3 = a1[78];
  if (v3)
    v4 = v3 == 26;
  else
    v4 = 1;
  if (v4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[79];
      v7 = (void *)a1[82];
      buf = 134218240;
      *(_QWORD *)buf_4 = v6;
      v29 = 2048;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v12 = a1[79];
      v13 = (void *)a1[82];
      v23 = 134218240;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    result = sub_10135D46C(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[78];
      v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v10);
      buf = 134218240;
      *(_QWORD *)buf_4 = v10;
      v29 = 2048;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = qword_10229FE68;
      v19 = a1[78];
      v20 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v19);
      v23 = 134218240;
      v24 = v19;
      v25 = 2048;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v22 = (int *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v21);
      if (v22 != &buf)
        free(v22);
    }
    result = sub_10135D46C(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", a1[78]), 0);
  }
  *(_QWORD *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100DDB588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == v18)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  operator delete();
}

uint64_t sub_100DDB5E0(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down for StopDisabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down for StopDisabled", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::partialTeardownWhenStopIsDisabled(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100DD83C8((uint64_t)a1);
  sub_100DD7910(a1);
  sub_100DD8578((uint64_t)a1);
  sub_100DDA04C((uint64_t)a1);
  return sub_100DD5258((uint64_t)a1);
}

double sub_100DDB798(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting mute alerts for start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Resetting mute alerts for start", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::resetMuteStartAlert(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  uuid_clear((unsigned __int8 *)(a1 + 1080));
  *(_QWORD *)(a1 + 1112) = 26;
  *(_QWORD *)(a1 + 1120) = 26;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1160) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1168) = 0x7FEFFFFFFFFFFFFFLL;
  result = 2.22507386e-308;
  *(_OWORD *)(a1 + 1184) = xmmword_101BB26B0;
  return result;
}

void sub_100DDB958(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[8];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to bringup ActiveStateDetector", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Trying to bringup ActiveStateDetector", v14, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v3 = sub_100F72BB4(a1[78], a1[81]);
  v4 = (uint64_t *)a1[59];
  if (!v4)
  {
LABEL_18:
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Bringing up ActiveStateDetector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up ActiveStateDetector", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    operator new();
  }
  if (v4[2] != v3)
  {
    a1[59] = 0;
    sub_1006CD660((uint64_t)(a1 + 59), v4);
    goto LABEL_18;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v5 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to bringup ActiveStateDetector,but already running", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v14[0] = 0;
    LODWORD(v13) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Trying to bringup ActiveStateDetector,but already running", v14, v13);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_100DDBE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == v16)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  operator delete();
}

void sub_100DDBE58(uint64_t a1, _QWORD *a2)
{
  int *v3;

  *(_QWORD *)(a1 + 1424) = *a2;
  v3 = *(int **)(a1 + 464);
  if (v3)
    sub_1007B5B4C(v3, (_QWORD *)(a1 + 1424));
}

uint64_t *sub_100DDBE78(uint64_t a1, __int128 *a2)
{
  uint64_t *result;

  sub_10106CE10((_QWORD *)(a1 + 32), a2);
  result = *(uint64_t **)(a1 + 472);
  if (result)
    return (uint64_t *)sub_100794798(result);
  return result;
}

uint64_t sub_100DDBEB0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uuid_t dst;
  unsigned __int8 v11[16];
  CFAbsoluteTime Current;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  uuid_copy(dst, (const unsigned __int8 *)a2);
  uuid_copy(v11, (const unsigned __int8 *)(a2 + 16));
  Current = CFAbsoluteTimeGetCurrent();
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 160);
  v4 = *(_OWORD *)(a2 + 128);
  v17 = *(_OWORD *)(a2 + 112);
  v18 = v4;
  v19 = *(_OWORD *)(a2 + 144);
  v5 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 80);
  v16 = v5;
  if ((_QWORD)v13 == 19)
    v20 = *(_OWORD *)(a2 + 64);
  v9 = 0;
  v6 = sub_100F72F68(*(_QWORD *)(a2 + 64), &v9);
  v7 = v9;
  if (!v6)
    v7 = 3000;
  v21 = v7;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result)
    return sub_10023195C(a1 + 8, 6, (uint64_t)dst);
  return result;
}

void sub_100DDBFB0(_QWORD *a1, double a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v6[8];
  uint8_t buf[8];

  if (a1[78] == 26)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Workout, Error stopping, no active workouts", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "Workout, Error stopping, no active workouts", v6, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutPredictor::feedUserWorkoutStop(CFAbsoluteTime)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    *(double *)buf = a2;
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
      sub_10023195C((uint64_t)(a1 + 1), 7, (uint64_t)buf);
  }
}

void sub_100DDC168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a2 + 16) && !*(_QWORD *)(a1 + 744))
  {
    v2 = *(_QWORD *)(a1 + 472);
    if (v2)
    {
      sub_100794820(v2, *(unsigned __int8 *)(a2 + 16) != 2, *(double *)(a2 + 8));
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v3 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ActiveStateDetector should be active?", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        v6[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "ActiveStateDetector should be active?", v6, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutPredictor::feedActivePedStateUpdate(const CMActivePedStateEntry &)", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
    }
  }
}

void sub_100DDC340(uint64_t a1, int a2)
{
  uint64_t v2;
  double Current;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_100794820(v2, a2, Current);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ActiveStateDetector should be active?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "ActiveStateDetector should be active?", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkoutPredictor::feedSkiUpdate(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100DDC508()
{
  operator new();
}

void sub_100DDC5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

uint64_t sub_100DDC62C(uint64_t result)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(result + 464))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v1 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Bringing up Tier2 Classifier", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up Tier2 Classifier", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTier2ClassifierActivate()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
    operator new();
  }
  return result;
}

void sub_100DDC810()
{
  operator delete();
}

uint64_t sub_100DDC83C(uint64_t result)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(result + 464))
  {
    v1 = (_QWORD *)result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tear down tier2 classifier", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tear down tier2 classifier", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTier2ClassifierDeactivate()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    v3 = v1[58];
    v1[58] = 0;
    if (v3)
      operator delete();
    return sub_100DD54DC(v1);
  }
  return result;
}

BOOL sub_100DDCA00(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 result;
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  const char *v13;
  char *v14;
  const char *v15;
  char *v16;
  int v17;
  _BYTE v18[10];
  __int16 v19;
  int v20;
  _BYTE buf[14];
  __int16 v22;
  int v23;

  if (sub_100F72CA4(*(_QWORD *)(a1 + 624)) && *(_QWORD *)(a1 + 648) == 3 && *(_BYTE *)(a1 + 1488))
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102187B98);
    v4 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forced location signal, new workout location: %zd", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102187B98);
      v17 = 134217984;
      *(_QWORD *)v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "Forced location signal, new workout location: %zd", (size_t)&v17);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::triggerWorkoutLocationUpdateForUserStartedWorkouts(CMWorkoutLocationType)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_QWORD *)buf = a2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      sub_10023195C(a1 + 8, 10, (uint64_t)buf);
    return 1;
  }
  else
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102187B98);
    v6 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_100F72CA4(*(_QWORD *)(a1 + 624));
      v8 = *(_QWORD *)(a1 + 648) == 3;
      v9 = *(unsigned __int8 *)(a1 + 1488);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v8;
      v22 = 1024;
      v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cannot force location signal; isValidWorkoutForLocationTbd: %d, IsLocationTbd: %d, fEnableForcedWorkoutLocationU"
        "pdatesFromSPI: %d",
        buf,
        0x14u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102187B98);
      v10 = qword_10229FF48;
      sub_100F72CA4(*(_QWORD *)(a1 + 624));
      v11 = *(_QWORD *)(a1 + 648) == 3;
      v12 = *(unsigned __int8 *)(a1 + 1488);
      *(_WORD *)&v18[4] = 1024;
      *(_DWORD *)&v18[6] = v11;
      v19 = 1024;
      v20 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "Cannot force location signal; isValidWorkoutForLocationTbd: %d, IsLocationTbd: %d, fEnableForcedWorkoutLocationU"
        "pdatesFromSPI: %d",
        &v17,
        20,
        67109632);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::triggerWorkoutLocationUpdateForUserStartedWorkouts(CMWorkoutLocationType)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

void sub_100DDCDA4(uint64_t a1, uint64_t a2)
{
  sub_100EE1870(*(_QWORD *)(a1 + 1432), a2);
}

void sub_100DDCDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    sub_10023195C(a1 + 8, 10, (uint64_t)&v3);
  sub_100DD8578(a1);
}

uint64_t sub_100DDCDFC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1390) = a2;
  return result;
}

uint64_t sub_100DDCE04(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = (a2 - 1);
  if (v2 >= 0xE)
    return 0;
  else
    return v2 + 8;
}

void sub_100DDCE1C(_QWORD *a1)
{
  sub_1006CD4F4(a1);
  operator delete();
}

void sub_100DDCE40(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100DDCE6C(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_100DDCE98(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = sub_100EE1228(*(_QWORD *)(a1 + 1432));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return v1;
}

uint64_t sub_100DDD04C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = sub_100DDD1FC(a1) ^ 1;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsActive,is_active,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutPredictor,backgroundEscalationIsActive,is_active,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsActive(const T *) const [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return v1;
}

uint64_t sub_100DDD1FC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = sub_100EE1228(*(_QWORD *)(a1 + 1432));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return v1;
}

uint64_t sub_100DDD3B0(uint64_t *a1, int *a2)
{
  NSObject *v4;
  double Current;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kInit (stop was detected prior to start confirmation).", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Transitioned to kInit (stop was detected prior to start confirmation).", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStoppedBeforeStartConfirmation(const T *) [T = CLWorkoutPredictor::EDeescalate]", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1004C0F9C((uint64_t)(a1 + 196), a1 + 74, a1[64], a1[65], 1);
  sub_100DD8298((uint64_t)a1, a2);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC((uint64_t)a1, 10, 0, (uint64_t)buf, Current);
  sub_100DD3EE0((uint64_t)a1, (uint64_t)buf);
  v7 = sub_100DDCE04(v6, *a2);
  v8 = CFAbsoluteTimeGetCurrent();
  sub_100DD0DDC((uint64_t)a1, 10, 0, v7, v8);
  sub_100DD531C((uint64_t)a1, a1[90], 1);
  return sub_100DDD5CC((uint64_t)a1);
}

uint64_t sub_100DDD5CC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EDeescalate]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10090020C(a1 + 1512);
  sub_100DD83C8(a1);
  sub_100DD7910((_QWORD *)a1);
  sub_100DD8578(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100DD1008();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 664) = 3000;
  if (*(_QWORD *)(a1 + 1344) || *(_QWORD *)(a1 + 1352) || *(_QWORD *)(a1 + 1360))
    sub_100DD53C8((_QWORD *)a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  return sub_100DD5258(a1);
}

uint64_t sub_100DDD81C(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction. Notifying clients.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction. Notifying clients.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC(a1, 10, 0, (uint64_t)buf, Current);
  sub_100DD3EE0(a1, (uint64_t)buf);
  v4 = CFAbsoluteTimeGetCurrent();
  sub_100DD0DDC(a1, 10, 0, 22, v4);
  return sub_100DDD9F8(a1);
}

uint64_t sub_100DDD9F8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10090020C(a1 + 1512);
  sub_100DD83C8(a1);
  sub_100DD7910((_QWORD *)a1);
  sub_100DD8578(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100DD1008();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 664) = 3000;
  if (*(_QWORD *)(a1 + 1344) || *(_QWORD *)(a1 + 1352) || *(_QWORD *)(a1 + 1360))
    sub_100DD53C8((_QWORD *)a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  return sub_100DD5258(a1);
}

uint64_t sub_100DDDC48(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction. Notifying clients.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction. Notifying clients.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC(a1, 10, 0, (uint64_t)buf, Current);
  sub_100DD3EE0(a1, (uint64_t)buf);
  v4 = CFAbsoluteTimeGetCurrent();
  sub_100DD0DDC(a1, 10, 0, 22, v4);
  return sub_100DDDE24(a1);
}

uint64_t sub_100DDDE24(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10090020C(a1 + 1512);
  sub_100DD83C8(a1);
  sub_100DD7910((_QWORD *)a1);
  sub_100DD8578(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100DD1008();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 664) = 3000;
  if (*(_QWORD *)(a1 + 1344) || *(_QWORD *)(a1 + 1352) || *(_QWORD *)(a1 + 1360))
    sub_100DD53C8((_QWORD *)a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  return sub_100DD5258(a1);
}

uint64_t sub_100DDE074(uint64_t *a1, int *a2)
{
  NSObject *v4;
  double Current;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kInit (stop was detected prior to start confirmation).", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Transitioned to kInit (stop was detected prior to start confirmation).", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStoppedBeforeStartConfirmation(const T *) [T = CLWorkoutPredictor::EStopDetected]", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1004C0F9C((uint64_t)(a1 + 196), a1 + 74, a1[64], a1[65], 1);
  sub_100DD8298((uint64_t)a1, a2);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC((uint64_t)a1, 10, 0, (uint64_t)buf, Current);
  sub_100DD3EE0((uint64_t)a1, (uint64_t)buf);
  v7 = sub_100DDCE04(v6, *a2);
  v8 = CFAbsoluteTimeGetCurrent();
  sub_100DD0DDC((uint64_t)a1, 10, 0, v7, v8);
  sub_100DD531C((uint64_t)a1, a1[90], 1);
  return sub_100DDE290((uint64_t)a1);
}

uint64_t sub_100DDE290(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EStopDetected]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10090020C(a1 + 1512);
  sub_100DD83C8(a1);
  sub_100DD7910((_QWORD *)a1);
  sub_100DD8578(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100DD1008();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 664) = 3000;
  if (*(_QWORD *)(a1 + 1344) || *(_QWORD *)(a1 + 1352) || *(_QWORD *)(a1 + 1360))
    sub_100DD53C8((_QWORD *)a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  return sub_100DD5258(a1);
}

double sub_100DDE4E0(uint64_t a1, double *a2)
{
  double result;
  _BYTE v4[232];

  if (*(_BYTE *)(a1 + 1390))
  {
    sub_100DD3CCC(a1, 2, *(_QWORD *)(a1 + 624), (uint64_t)v4, *a2);
    return sub_100DD3EE0(a1, (uint64_t)v4);
  }
  return result;
}

double sub_100DDE558(uint64_t a1, double *a2)
{
  double result;
  _BYTE v4[232];

  if (*(_BYTE *)(a1 + 1390))
  {
    sub_100DD3CCC(a1, 3, *(_QWORD *)(a1 + 624), (uint64_t)v4, *a2);
    return sub_100DD3EE0(a1, (uint64_t)v4);
  }
  return result;
}

uint64_t sub_100DDE5D0(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down for StopDisabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down for StopDisabled", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::partialTeardownWhenStopIsDisabled(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100DD83C8((uint64_t)a1);
  sub_100DD7910(a1);
  sub_100DD8578((uint64_t)a1);
  sub_100DDA04C((uint64_t)a1);
  return sub_100DD5258((uint64_t)a1);
}

uint64_t sub_100DDE788(_QWORD *a1)
{
  sub_100DD8578((uint64_t)a1);
  sub_100DD7910(a1);
  sub_100DDA04C((uint64_t)a1);
  sub_100DD83C8((uint64_t)a1);
  return sub_100DDE7CC(a1);
}

uint64_t sub_100DDE7CC(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  int buf;
  uint8_t buf_4[8];
  __int16 v29;
  id v30;

  if (!a1[53])
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up StopDetector", &v23, 2);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
    operator new();
  }
  v3 = a1[78];
  if (v3)
    v4 = v3 == 26;
  else
    v4 = 1;
  if (v4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[79];
      v7 = (void *)a1[82];
      buf = 134218240;
      *(_QWORD *)buf_4 = v6;
      v29 = 2048;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v12 = a1[79];
      v13 = (void *)a1[82];
      v23 = 134218240;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    result = sub_10135D46C(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[78];
      v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v10);
      buf = 134218240;
      *(_QWORD *)buf_4 = v10;
      v29 = 2048;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = qword_10229FE68;
      v19 = a1[78];
      v20 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v19);
      v23 = 134218240;
      v24 = v19;
      v25 = 2048;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v22 = (int *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v21);
      if (v22 != &buf)
        free(v22);
    }
    result = sub_10135D46C(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", a1[78]), 0);
  }
  *(_QWORD *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100DDED48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == v18)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100DDEDA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187BC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DDEDD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187BC8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DDEDF8(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DDEE94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDEED0()
{
}

uint64_t sub_100DDEEDC(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retracting stop alert.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Retracting stop alert.", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::retractStopAlert(const T *const) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592)))
    sub_10192B12C();
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC(a1, 12, *(_QWORD *)(a1 + 624), (uint64_t)buf, Current);
  sub_100DD3EE0(a1, (uint64_t)buf);
  sub_100DDF0CC(a1);
  sub_100DDA04C(a1);
  sub_100DD7910((_QWORD *)a1);
  return sub_100DDF264((_QWORD *)a1);
}

void sub_100DDF0CC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down StopDetector and IndoorOutdoor detector.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down StopDetector and IndoorOutdoor detector.", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownCheckingLocationForStopRetractionState(const T *const) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100DD8578(a1);
}

uint64_t sub_100DDF264(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  int *v15;
  const char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  int buf;
  uint8_t buf_4[8];
  __int16 v29;
  id v30;

  if (!a1[53])
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up StopDetector", &v23, 2);
      v17 = (int *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
    operator new();
  }
  v3 = a1[78];
  if (v3)
    v4 = v3 == 26;
  else
    v4 = 1;
  if (v4)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[79];
      v7 = (void *)a1[82];
      buf = 134218240;
      *(_QWORD *)buf_4 = v6;
      v29 = 2048;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v12 = a1[79];
      v13 = (void *)a1[82];
      v23 = 134218240;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v15 = (int *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v14);
      if (v15 != &buf)
        free(v15);
    }
    result = sub_10135D46C(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[78];
      v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v10);
      buf = 134218240;
      *(_QWORD *)buf_4 = v10;
      v29 = 2048;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v18 = qword_10229FE68;
      v19 = a1[78];
      v20 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", v19);
      v23 = 134218240;
      v24 = v19;
      v25 = 2048;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", &v23, 22);
      v22 = (int *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v21);
      if (v22 != &buf)
        free(v22);
    }
    result = sub_10135D46C(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:](CMWorkout, "workoutLocationTypeFromCMWorkoutType:", a1[78]), 0);
  }
  *(_QWORD *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100DDF7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == v18)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100DDF838(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187C48;
  result[1] = v3;
  return result;
}

uint64_t sub_100DDF870(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187C48;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DDF890(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DDF92C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDF968()
{
}

uint64_t sub_100DDF974(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retracting stop alert.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Retracting stop alert.", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::retractStopAlert(const T *const) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592)))
    sub_10192B12C();
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3CCC(a1, 12, *(_QWORD *)(a1 + 624), (uint64_t)buf, Current);
  sub_100DD3EE0(a1, (uint64_t)buf);
  sub_100DDFB64(a1);
  sub_100DDA04C(a1);
  sub_100DD7910((_QWORD *)a1);
  return sub_100DD9640((_QWORD *)a1);
}

void sub_100DDFB64(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down StopDetector and IndoorOutdoor detector.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down StopDetector and IndoorOutdoor detector.", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownCheckingLocationForStopRetractionState(const T *const) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100DD8578(a1);
}

void sub_100DDFD00()
{
  operator delete();
}

_QWORD *sub_100DDFD14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DDFD48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187CC8;
  a2[1] = v2;
  return result;
}

double sub_100DDFD64(uint64_t a1, uint64_t a2)
{
  return sub_100DD3EE0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100DDFD6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDFDA8()
{
}

void sub_100DDFDB8()
{
  operator delete();
}

_QWORD *sub_100DDFDCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187D48;
  result[1] = v3;
  return result;
}

uint64_t sub_100DDFE00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187D48;
  a2[1] = v2;
  return result;
}

uint64_t sub_100DDFE1C(uint64_t a1, unsigned __int8 *a2)
{
  sub_100DD13E4(*(_QWORD **)(a1 + 8), *a2);
  return 1;
}

uint64_t sub_100DDFE3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDFE78()
{
}

void sub_100DDFE88()
{
  operator delete();
}

_QWORD *sub_100DDFE9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187DC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DDFED0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187DC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100DDFEEC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    sub_100DDC62C(v2);
  else
    sub_100DDC83C(v2);
  return 1;
}

uint64_t sub_100DDFF18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDFF54()
{
}

void sub_100DDFF64()
{
  operator delete();
}

_QWORD *sub_100DDFF78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187E48;
  result[1] = v3;
  return result;
}

uint64_t sub_100DDFFAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187E48;
  a2[1] = v2;
  return result;
}

uint64_t sub_100DDFFC8(uint64_t a1, unsigned __int8 *a2)
{
  sub_100DD1EC4(*(_QWORD *)(a1 + 8), *a2, 0);
  return 1;
}

uint64_t sub_100DDFFEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE0028()
{
}

void sub_100DE0034(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_100DE0060(unsigned __int8 *a1, const char *a2, _WORD *a3, unsigned __int8 a4)
{
  _WORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  void **v21;
  char *v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  NSObject *v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  void **v34;
  char *v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  _BYTE __p[12];
  __int16 v44;
  int v45;
  __int16 v46;
  void **v47;
  _BYTE buf[18];
  __int16 v49;
  _BYTE *v50;

  *a1 = 0;
  *((_WORD *)a1 + 1) = *a3;
  v6 = a1 + 2;
  a1[4] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_100525CE4(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v38);
  std::ostream::operator<<(&v39, (unsigned __int16)*v6);
  if (!a1[4])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187EB8);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *a1;
        std::stringbuf::str(__p, v40);
        v18 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v17;
        v49 = 2080;
        v50 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187EB8);
      v19 = qword_10229FC78;
      v20 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v21 = v36;
      else
        v21 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v20;
      v46 = 2080;
      v47 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v22;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187EB8);
      v27 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v28 = *a1;
        std::stringbuf::str(__p, v40);
        v29 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        v49 = 2080;
        v50 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187EB8);
      v32 = qword_10229FC78;
      v33 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v34 = v36;
      else
        v34 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v33;
      v46 = 2080;
      v47 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v35;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]", "%s\n", v15);
    if (v15 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102187EB8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187EB8);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102187EB8);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v24 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102187EB8);
      v25 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]", "%s\n", v26);
LABEL_42:
      if (v15 == buf)
        goto LABEL_53;
LABEL_64:
      free(v15);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v38
  v39 = v30;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf(v40);
  std::ios::~ios(&v42);
  return a1;
}

void sub_100DE0830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DE087C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187EE8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE08B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187EE8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DE08D4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DE0970(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE09AC()
{
}

uint64_t sub_100DE09B8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down. Resetting workout prediction.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10090020C(a1 + 1512);
  sub_100DD83C8(a1);
  sub_100DD7910((_QWORD *)a1);
  sub_100DD8578(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100DD1008();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 664) = 3000;
  if (*(_QWORD *)(a1 + 1344) || *(_QWORD *)(a1 + 1352) || *(_QWORD *)(a1 + 1360))
    sub_100DD53C8((_QWORD *)a1);
  sub_100EE0F98(*(_QWORD *)(a1 + 1432));
  return sub_100DD5258(a1);
}

_QWORD *sub_100DE0C08(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187F68;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE0C40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187F68;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DE0C60(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DE0CFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE0D38()
{
}

_QWORD *sub_100DE0D44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102187FE8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE0D7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102187FE8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DE0D9C(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DE0E38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE0E74()
{
}

_QWORD *sub_100DE0E80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102188068;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE0EB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102188068;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DE0ED8(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DE0F74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE0FB0()
{
}

void sub_100DE0FC0()
{
  operator delete();
}

_QWORD *sub_100DE0FD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021880E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE1008(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021880E8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DE1024(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DE10C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100DE10FC()
{
}

void sub_100DE110C()
{
  operator delete();
}

_QWORD *sub_100DE1120(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102188168;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE1154(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102188168;
  a2[1] = v2;
  return result;
}

_QWORD *sub_100DE1170(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100DD48C4(*(_QWORD **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100DE120C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100DE1248()
{
}

BOOL sub_100DE1254()
{
  return os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT);
}

BOOL sub_100DE1268()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3688), OS_LOG_TYPE_INFO);
}

BOOL sub_100DE1278()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3688));
}

uint64_t sub_100DE1284()
{
  sub_1015A2E04(qword_1023085C8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023085C8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023085E0, "Acc800Fp");
  dword_1023085F8 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_1023085E0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102308600, "DmFp");
  dword_102308618 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102308600, (void *)&_mh_execute_header);
}

void sub_100DE1340(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLCoverState", 1);
}

_QWORD *sub_100DE1374(_QWORD *a1)
{
  *a1 = off_102188208;
  sub_100DE13C0((uint64_t)a1, 0, 0);
  sub_100261F44((uint64_t)(a1 + 4));
  return sub_1009BAD18(a1);
}

void sub_100DE13C0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD v17[2];
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  if (!a2)
  {
    v20 = v3;
    v21 = v4;
    v7 = (uint64_t **)(a1 + 32);
    if (!*(_QWORD *)(a1 + 32))
    {
      sub_100197040();
      v10 = sub_1000C4240();
      v11 = v10 ? 41 : 1;
      v12 = v10 ? 65280 : 11;
      v13 = (uint64_t *)sub_100A07FA0();
      v17[0] = v12;
      v17[1] = v11;
      v18 = 0;
      sub_1018E4078(v13, (uint64_t)v17, (uint64_t *)&v19);
      sub_1002B7674((uint64_t)v7, &v19);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    if (a3)
    {
      v8 = sub_100DE14B0;
      v9 = a1;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    sub_100A0A4BC(*v7, (uint64_t)v8, v9);
  }
}

uint64_t sub_100DE14B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int IntegerValue;
  BOOL v8;
  unint64_t TimeStamp;
  BOOL v10;

  result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 3)
  {
    IntegerValue = IOHIDEventGetIntegerValue(a4, 196608);
    result = IOHIDEventGetIntegerValue(a4, 196609);
    if (IntegerValue == 65289 && result == 1)
    {
      v8 = IOHIDEventGetIntegerValue(a4, 196610) == 0;
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      sub_100127828(TimeStamp);
      v10 = v8;
      return sub_10012AC18(a1, 0, (uint64_t)&v10, 1);
    }
  }
  return result;
}

void sub_100DE1570(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = a2;
  sub_100E4F1B4(a1 + 8, "MotionCalibration", a2);
  *(_QWORD *)(a1 + 200) = 0;
  sub_10023CFD8(a1 + 208, (uint64_t)"CLEphemeralGNSSController", a1, 0.0);
  *(_QWORD *)(a1 + 264) = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x403E000000000000;
  *(_QWORD *)(a1 + 288) = 0x404E000000000000;
  *(_BYTE *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 328) = 0x6400000000;
  *(_QWORD *)(a1 + 320) = 0x3FB0000000000000;
  sub_100E4F1B8();
}

void sub_100DE1670(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_100E3E6C8(v3);
  v5 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100BCD638(v2);
  _Unwind_Resume(a1);
}

void sub_100DE16B0(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  _BOOL8 v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLEphemeralGNSSController::onLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102188260);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEphemeralGNSSController::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102188260);
    v9 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEphemeralGNSSController::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100DE23A8(v6, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100DE185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DE1880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 272))
    sub_100DE18FC((double *)a1);
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  sub_100E3E6C8(a1 + 208);
  v3 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100BCD638(a1 + 8);
  return a1;
}

double *sub_100DE18FC(double *result)
{
  double *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5[8];
  uint8_t buf[1640];

  if (*((_BYTE *)result + 272))
  {
    v1 = result;
    sub_100DE2210((uint64_t)result);
    v1[32] = sub_1001FCBB4();
    if (*((int *)v1 + 54) >= 1)
    {
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102188280);
      v2 = qword_1022A0308;
      if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLEphemeralGNSSController] Releasing power assertion and disabling proactive GPS", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102188280);
        v5[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLEphemeralGNSSController] Releasing power assertion and disabling proactive GPS", v5, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::stopEphemeralUpdates()", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
      sub_100E3E6F0((uint64_t)(v1 + 26));
    }
    result = (double *)objc_msgSend(*(id *)(*((_QWORD *)v1 + 25) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 25) + 8), 0);
    *((_BYTE *)v1 + 272) = 0;
  }
  return result;
}

void sub_100DE1AD0(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  BOOL v5;
  double v6;
  double v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  void *__p[2];
  char v22;
  int v23;
  double v24;
  uint8_t buf[4];
  double v26;

  if (!*(_BYTE *)(a1 + 272))
  {
    v2 = sub_1001FCBB4();
    v3 = *(double *)(a1 + 256);
    v4 = v2 - v3;
    v5 = v3 <= 0.0;
    v6 = 0.0;
    if (!v5)
      v6 = v4;
    if (v6 == 0.0 || v6 > *(double *)(a1 + 280))
    {
      if (*(_DWORD *)(a1 + 332) == *(unsigned __int16 *)(a1 + 330)
        && (!*(_WORD *)(a1 + 330) ? (v7 = 0.0) : (v7 = *(double *)sub_1000E2B78((unsigned __int16 *)(a1 + 328), 0)),
            v11 = v2 - v7,
            v2 - v7 < 86400.0))
      {
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102188280);
        v12 = qword_1022A0308;
        if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          v26 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Attempt to start a new session denied: hit the escalation event backstop, timeSinceBackstop %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_102188280);
          v23 = 134217984;
          v24 = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLEphemeralGNSSController] Attempt to start a new session denied: hit the escalation event backstop, timeSinceBackstop %f", COERCE_DOUBLE(&v23));
          v10 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startEphemeralUpdates()", "%s\n", v13);
LABEL_27:
          if (v10 != buf)
            free(v10);
        }
      }
      else
      {
        sub_100DE2020(a1);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 200) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8), 0, 0);
        if (*(int *)(a1 + 216) <= 0)
        {
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_102188280);
          v14 = qword_1022A0308;
          if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[CLEphemeralGNSSController] Taking power assertion and enabling proactive GPS.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0300 != -1)
              dispatch_once(&qword_1022A0300, &stru_102188280);
            LOWORD(v23) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLEphemeralGNSSController] Taking power assertion and enabling proactive GPS.", &v23, 2);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startEphemeralUpdates()", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
          sub_1015A2E04(__p, "starting ephemeral GNSS session");
          sub_10002B684(a1 + 208, (uint64_t *)__p);
          if (v22 < 0)
            operator delete(__p[0]);
          v15 = *(unsigned __int16 *)(a1 + 330);
          v16 = *(unsigned int *)(a1 + 332);
          v17 = *(unsigned __int16 *)(a1 + 328);
          if (v17 + v15 >= v16)
            v18 = *(unsigned int *)(a1 + 332);
          else
            v18 = 0;
          *(double *)(a1 + 328 + 8 * (v17 + v15 - v18) + 8) = v2;
          if (v16 <= v15)
          {
            if (v17 + 1 < v16)
              LOWORD(v16) = 0;
            *(_WORD *)(a1 + 328) = v17 + 1 - v16;
          }
          else
          {
            *(_WORD *)(a1 + 330) = v15 + 1;
          }
          *(_BYTE *)(a1 + 296) = 1;
        }
        *(_BYTE *)(a1 + 272) = 1;
      }
    }
    else
    {
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102188280);
      v8 = qword_1022A0308;
      if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Attempt to start a new session denied: too soon since last session ended.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102188280);
        LOWORD(v23) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLEphemeralGNSSController] Attempt to start a new session denied: too soon since last session ended.", &v23, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startEphemeralUpdates()", "%s\n", v9);
        goto LABEL_27;
      }
    }
  }
}

void sub_100DE1FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100DE2020(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[5];
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_102188280);
  v2 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Starting auto stop timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102188280);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLEphemeralGNSSController] Starting auto stop timer", v7, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startAutoStopTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (objc_msgSend(*(id *)(a1 + 264), "handler"))
    sub_10192B298();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100DE2590;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  objc_msgSend(*(id *)(a1 + 264), "setHandler:", v6);
  return objc_msgSend(*(id *)(a1 + 264), "setNextFireDelay:interval:", *(double *)(a1 + 288), 1.79769313e308);
}

id sub_100DE2210(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_102188280);
  v2 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Stopping auto stop timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102188280);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLEphemeralGNSSController] Stopping auto stop timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::stopAutoStopTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 264), "invalidate");
}

void sub_100DE23A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*a3)
    sub_10192B2C0();
  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_102188280);
  v3 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Received location notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102188280);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLEphemeralGNSSController] Received location notification", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_100DE2538(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100DE2564(id a1)
{
  qword_1022A0308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionCues");
}

double *sub_100DE2590(uint64_t a1)
{
  double *v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(double **)(a1 + 32);
  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_102188280);
  v2 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLEphemeralGNSSController] Auto stop timer expired; stopping session",
      buf,
      2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102188280);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLEphemeralGNSSController] Auto stop timer expired; stopping session",
      v6,
      2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startAutoStopTimer()_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100DE18FC(v1);
}

id *sub_100DE2728(id *a1, uint64_t a2)
{
  *a1 = objc_msgSend(objc_alloc((Class)GEOMapFeatureAccess), "initWithQueue:", a2);
  sub_100DE2784(a1);
  objc_msgSend(*a1, "setFlipNegativeTravelDirectionRoads:", 1);
  objc_msgSend(*a1, "setAllowStaleData:", 1);
  return a1;
}

uint64_t sub_100DE2784(id *a1)
{
  uint64_t v2;
  _QWORD v4[2];

  sub_100119F3C(v4);
  v2 = sub_1001FD94C();
  sub_100006BB4(v2, "Kappa", v4);
  objc_msgSend(*a1, "setAllowNetworkTileLoad:", objc_msgSend(objc_msgSend((id)sub_10011A5AC((uint64_t)v4), "valueForKey:", CFSTR("roadDisableNetwork")), "BOOLValue") ^ 1);
  return sub_10011A5A8(v4);
}

void sub_100DE27F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

id *sub_100DE2814(id *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102188310);
  v2 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,~CLKappaMapTiles()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102188310);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGCZ,destroy geocodec malloc zone,~CLKappaMapTiles()", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLKappaMapTiles::~CLKappaMapTiles()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  GEOResetGeoCodecsAllocator(objc_msgSend(*a1, "clearRoadTiles"));

  return a1;
}

void sub_100DE29BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100DE29CC(id *a1, uint64_t a2, double a3, double a4, float a5, double a6)
{
  void *v12;
  CLOSTransaction *v13;
  NSObject *v14;
  _BOOL4 v15;
  NSObject *v16;
  uint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[12];
  std::__shared_weak_count *v37;
  float v38;
  _QWORD v39[7];
  std::__shared_weak_count *v40;
  double v41;
  double v42;
  uint64_t v43;
  _BYTE v44[22];
  __int16 v45;
  double v46;
  _BYTE buf[24];
  double v48;

  v12 = objc_autoreleasePoolPush();
  v13 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLKappaMapTiles.getDistanceToClosestRoad");
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_102188330);
  v14 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Kappa,GEO,getDistanceToClosestRoad", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    *(_WORD *)v44 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Kappa,GEO,getDistanceToClosestRoad", v44, 2);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (!sub_10011CE88(a3, a4))
    goto LABEL_10;
  v15 = !sub_10011CE64(a3, a4);
  if (a6 < 0.0)
    LOBYTE(v15) = 0;
  if (v15)
  {
    v18 = (char *)operator new(0x78uLL);
    *((_QWORD *)v18 + 1) = 0;
    v19 = (unint64_t *)(v18 + 8);
    *((_QWORD *)v18 + 2) = 0;
    *(_QWORD *)v18 = off_102188360;
    *((_QWORD *)v18 + 3) = 0;
    *((_OWORD *)v18 + 2) = 0u;
    *((_OWORD *)v18 + 3) = 0u;
    *((_OWORD *)v18 + 4) = 0u;
    *((_OWORD *)v18 + 5) = 0u;
    *((_OWORD *)v18 + 6) = 0u;
    *(_QWORD *)v44 = v18 + 24;
    *(_QWORD *)&v44[8] = v18;
    *((_DWORD *)v18 + 8) = 2139095039;
    v18[36] = 9;
    *((float *)v18 + 10) = a5;
    *((_QWORD *)v18 + 14) = 0;
    *(_OWORD *)(v18 + 44) = 0u;
    *(_OWORD *)(v18 + 60) = 0u;
    *(_OWORD *)(v18 + 76) = 0u;
    *(_OWORD *)(v18 + 92) = 0u;
    *((_WORD *)v18 + 54) = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    LODWORD(v48) = 0;
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3321888768;
    v39[2] = sub_100DE3038;
    v39[3] = &unk_1021882A8;
    v39[4] = v13;
    v39[6] = v18 + 24;
    v40 = (std::__shared_weak_count *)v18;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v39[5] = buf;
    v41 = a3;
    v42 = a4;
    sub_100DE2784(a1);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3321888768;
    v36[2] = sub_100DE3610;
    v36[3] = &unk_1021882E0;
    v36[7] = a1;
    v36[4] = v13;
    *(double *)&v36[8] = a3;
    *(double *)&v36[9] = a4;
    *(double *)&v36[10] = a6;
    v38 = a5;
    v36[11] = v18 + 24;
    v37 = (std::__shared_weak_count *)v18;
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 1, v19));
    v36[5] = a2;
    v36[6] = buf;
    objc_msgSend(*a1, "findRoadsNear:radius:handler:completionHandler:", v39, v36, a3, a4, a6);
    v22 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v40;
    if (v40)
    {
      v26 = (unint64_t *)&v40->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    _Block_object_dispose(buf, 8);
    v28 = *(std::__shared_weak_count **)&v44[8];
    if (*(_QWORD *)&v44[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&v44[8] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
LABEL_10:
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v16 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284033;
      *(double *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = a4;
      *(_WORD *)&buf[22] = 2050;
      v48 = a6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Kappa,GEO,invalid coordinate,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102188330);
      *(_DWORD *)v44 = 134284033;
      *(double *)&v44[4] = a3;
      *(_WORD *)&v44[12] = 2049;
      *(double *)&v44[14] = a4;
      v45 = 2050;
      v46 = a6;
      LODWORD(v35) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Kappa,GEO,invalid coordinate,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf", v44, v35);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    v43 = 0;
    (*(void (**)(uint64_t, uint64_t *, NSError *))(a2 + 16))(a2, &v43, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, 0));
    v17 = v43;
    v43 = 0;
    if (v17)
      operator delete();
  }
  objc_autoreleasePoolPop(v12);
}

void sub_100DE2FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  sub_100261F44(v41);
  sub_100261F44(v42);
  _Block_object_dispose(&a41, 8);
  sub_100261F44((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_100DE3038(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  double v6;
  double v7;
  unsigned __int8 v8;
  uint64_t v9;
  float v10;
  NSObject *v11;
  double v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint8_t buf[4];
  _BYTE v23[10];
  double v24;

  v3 = a2;
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_102188330);
  v4 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v23 = objc_msgSend(v3, "roadClass");
    *(_WORD *)&v23[4] = 1024;
    *(_DWORD *)&v23[6] = objc_msgSend(v3, "isDrivable");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Kappa,GEO,GEOMapFeatureRoadHandler class:%d drivable:%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v15 = qword_10229FDA8;
    LODWORD(v20) = 67109376;
    DWORD1(v20) = objc_msgSend(v3, "roadClass");
    WORD4(v20) = 1024;
    *(_DWORD *)((char *)&v20 + 10) = objc_msgSend(v3, "isDrivable");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "Kappa,GEO,GEOMapFeatureRoadHandler class:%d drivable:%d", &v20, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  ++*(_WORD *)(*(_QWORD *)(a1 + 48) + 20);
  if (!v3 || (unint64_t)objc_msgSend(v3, "coordinateCount") <= 1)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v5 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Kappa,GEO,malformed road tile", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    LOWORD(v20) = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Kappa,GEO,malformed road tile", &v20, v19, v20, v21);
LABEL_42:
    v18 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v13);
    if (v18 != buf)
      free(v18);
    return;
  }
  if ((objc_msgSend(v3, "isDrivable") & 1) != 0)
  {
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    objc_msgSend(v3, "closestDistance2DFromCoordinate:", *(double *)(a1 + 64), *(double *)(a1 + 72), 0.0);
    v7 = v6;
    if (v6 >= 0.0 && v6 != 1.79769313e308 && v6 < *(float *)(*(_QWORD *)(a1 + 48) + 8))
    {
      v8 = objc_msgSend(v3, "roadClass");
      v9 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(v9 + 12) = v8;
      v10 = v7;
      *(float *)(v9 + 8) = v10;
    }
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v11 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(float *)(*(_QWORD *)(a1 + 48) + 8);
      *(_DWORD *)buf = 134218240;
      *(double *)v23 = v7;
      *(_WORD *)&v23[8] = 2048;
      v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Kappa,GEO,distanceToRoad:%f, distanceToClosestRoad:%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102188330);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Kappa,GEO,distanceToRoad:%f, distanceToClosestRoad:%f");
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v14 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Kappa,GEO,Roads,ignoring non-drivable road", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102188330);
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Kappa,GEO,Roads,ignoring non-drivable road", &v20, v19, v20, v21);
      goto LABEL_42;
    }
  }
}

uint64_t sub_100DE35E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100DE3608(uint64_t a1)
{
  return sub_100261F44(a1 + 48);
}

void sub_100DE3610(uint64_t a1, void *a2)
{
  id *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  unsigned int v49;
  const char *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  int v58;
  _BYTE v59[10];
  id v60;
  _BYTE v61[10];
  _BYTE v62[10];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  double v68;
  __int16 v69;
  unsigned int v70;
  uint8_t buf[4];
  _BYTE v72[10];
  id v73;
  _BYTE v74[10];
  _BYTE v75[10];
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  double v81;
  __int16 v82;
  unsigned int v83;

  v4 = *(id **)(a1 + 56);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102188310);
  v5 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,CLKappaMapTiles::getDistanceToClosestRoad", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102188310);
    LOWORD(v58) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGCZ,destroy geocodec malloc zone,CLKappaMapTiles::getDistanceToClosestRoad", &v58, 2);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  GEOResetGeoCodecsAllocator(objc_msgSend(*v4, "clearRoadTiles"));
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_102188330);
  v6 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Kappa,GEO,GEOMapFeatureAccessCompletionHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    LOWORD(v58) = 0;
    LODWORD(v57) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 2, "Kappa,GEO,GEOMapFeatureAccessCompletionHandler", &v58, v57);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (a2)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v7 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      v8 = objc_msgSend(a2, "code");
      v9 = objc_msgSend(a2, "domain");
      v10 = objc_msgSend(a2, "localizedDescription");
      v12 = *(_QWORD *)(a1 + 64);
      v11 = *(_QWORD *)(a1 + 72);
      v13 = *(_QWORD *)(a1 + 80);
      v14 = *(float *)(a1 + 104);
      v15 = objc_msgSend(*v4, "allowNetworkTileLoad");
      *(_DWORD *)buf = 134350851;
      *(_QWORD *)v72 = v8;
      *(_WORD *)&v72[8] = 2114;
      v73 = v9;
      *(_WORD *)v74 = 2113;
      *(_QWORD *)&v74[2] = v10;
      *(_WORD *)v75 = 2049;
      *(_QWORD *)&v75[2] = v12;
      v76 = 2049;
      v77 = v11;
      v78 = 2050;
      v79 = v13;
      v80 = 2049;
      v81 = v14;
      v82 = 1026;
      v83 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Kappa,GEO,Roads,GEOMapFeatureAccessRequest reported error,%{public}lld,domain,%{public}@,description, \"%{private}@\",LL,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf,accuracy,%{private}.7lf,networkAllowed,%{public}d", buf, 0x4Eu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102188330);
      v41 = qword_10229FDA8;
      v42 = objc_msgSend(a2, "code");
      v43 = objc_msgSend(a2, "domain");
      v44 = objc_msgSend(a2, "localizedDescription");
      v46 = *(_QWORD *)(a1 + 64);
      v45 = *(_QWORD *)(a1 + 72);
      v47 = *(_QWORD *)(a1 + 80);
      v48 = *(float *)(a1 + 104);
      v49 = objc_msgSend(*v4, "allowNetworkTileLoad");
      v58 = 134350851;
      *(_QWORD *)v59 = v42;
      *(_WORD *)&v59[8] = 2114;
      v60 = v43;
      *(_WORD *)v61 = 2113;
      *(_QWORD *)&v61[2] = v44;
      *(_WORD *)v62 = 2049;
      *(_QWORD *)&v62[2] = v46;
      v63 = 2049;
      v64 = v45;
      v65 = 2050;
      v66 = v47;
      v67 = 2049;
      v68 = v48;
      v69 = 1026;
      v70 = v49;
      LODWORD(v57) = 78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 16, "Kappa,GEO,Roads,GEOMapFeatureAccessRequest reported error,%{public}lld,domain,%{public}@,description, \"%{private}@\",LL,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf,accuracy,%{private}.7lf,networkAllowed,%{public}d", &v58, v57);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 0, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    v16 = a1 + 88;
    strncpy((char *)(*(_QWORD *)(a1 + 88) + 22), (const char *)objc_msgSend(objc_msgSend(a2, "domain"), "UTF8String"), 0x40uLL);
    *(_BYTE *)(*(_QWORD *)v16 + 85) = 0;
    *(_QWORD *)(*(_QWORD *)v16 + 88) = objc_msgSend(a2, "code");
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v17 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 88);
      v19 = v18 + 22;
      v20 = *(_QWORD *)(v18 + 88);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v72 = v19;
      *(_WORD *)&v72[8] = 1024;
      LODWORD(v73) = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "failed to fetch road info %s %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_102188330);
      v52 = *(_QWORD *)(a1 + 88);
      v53 = v52 + 22;
      v54 = *(_QWORD *)(v52 + 88);
      v58 = 136315394;
      *(_QWORD *)v59 = v53;
      *(_WORD *)&v59[8] = 1024;
      LODWORD(v60) = v54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 0, "failed to fetch road info %s %d", (const char *)&v58, 18);
      v56 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_102188330);
  v21 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v23 = objc_msgSend(*v4, "allowNetworkTileLoad");
    v24 = *(_QWORD *)(a1 + 88);
    v25 = *(unsigned __int8 *)(v24 + 12);
    v26 = *(float *)(v24 + 8);
    v27 = *(float *)(a1 + 104);
    *(_DWORD *)buf = 67241217;
    *(_DWORD *)v72 = v22;
    *(_WORD *)&v72[4] = 1026;
    *(_DWORD *)&v72[6] = v23;
    LOWORD(v73) = 1026;
    *(_DWORD *)((char *)&v73 + 2) = v25;
    HIWORD(v73) = 2050;
    *(double *)v74 = v26;
    *(_WORD *)&v74[8] = 2049;
    *(double *)v75 = v27;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Kappa,GEO,GEOMapFeatureAccessCompletionHandler Completed query with %{public}d roads evaluated, network status is: %{public}d, calling handler with road class:%{public}d distance:%{public}f accuracy:%{private}f", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_102188330);
    v32 = qword_10229FDA8;
    v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v34 = objc_msgSend(*v4, "allowNetworkTileLoad");
    v35 = *(_QWORD *)(a1 + 88);
    v36 = *(unsigned __int8 *)(v35 + 12);
    v37 = *(float *)(v35 + 8);
    v38 = *(float *)(a1 + 104);
    v58 = 67241217;
    *(_DWORD *)v59 = v33;
    *(_WORD *)&v59[4] = 1026;
    *(_DWORD *)&v59[6] = v34;
    LOWORD(v60) = 1026;
    *(_DWORD *)((char *)&v60 + 2) = v36;
    HIWORD(v60) = 2050;
    *(double *)v61 = v37;
    *(_WORD *)&v61[8] = 2049;
    *(double *)v62 = v38;
    LODWORD(v57) = 40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "Kappa,GEO,GEOMapFeatureAccessCompletionHandler Completed query with %{public}d roads evaluated, network status is: %{public}d, calling handler with road class:%{public}d distance:%{public}f accuracy:%{private}f", &v58, v57);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  operator new();
}

void sub_100DE3FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DE3FD4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100DE3FF8(uint64_t a1)
{
  return sub_100261F44(a1 + 88);
}

void sub_100DE4000(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100DE402C(id a1)
{
  qword_10229FDA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

void sub_100DE4058(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102188360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DE406C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102188360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

BOOL sub_100DE40A8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == 20 && *(_QWORD *)(a2 + 112) == 4;
}

uint64_t sub_100DE40CC(_QWORD *a1, uint64_t a2)
{
  a1[7] = *(_QWORD *)(a2 + 112);
  a1[4] = a1[3];
  return sub_100DE49D4((uint64_t)a1, 1);
}

uint64_t sub_100DE40E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  if (*(_QWORD *)(a2 + 16))
    return 0;
  v3 = *(_QWORD *)(a2 + 112);
  v4 = v3 > 0x2E;
  v5 = (0x405800300010uLL >> v3) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

void sub_100DE4118(_QWORD *a1, uint64_t a2)
{
  a1[7] = *(_QWORD *)(a2 + 112);
  a1[4] = a1[3];
  sub_100DE49D4((uint64_t)a1, 1);
  sub_100DE4B98((uint64_t)a1);
}

BOOL sub_100DE4154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  return (v2 == 11 || v2 == 0) && *(_QWORD *)(a2 + 112) == 4;
}

BOOL sub_100DE4180(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == 21 && *(_QWORD *)(a2 + 112) == 4;
}

uint64_t sub_100DE41A4(_QWORD *a1)
{
  a1[7] = 0;
  a1[4] = a1[3];
  return sub_100DE49D4((uint64_t)a1, 0);
}

BOOL sub_100DE41C0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == 1 && *(_QWORD *)(a2 + 112) == *(_QWORD *)(a1 + 56);
}

uint64_t sub_100DE41EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &unk_1021883A0;
  *(_QWORD *)(result + 8) = 8;
  *(_WORD *)(result + 16) = 512;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = a2;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_100DE421C(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[12];

  v2 = a2[9];
  v9[8] = a2[8];
  v9[9] = v2;
  v3 = a2[11];
  v9[10] = a2[10];
  v9[11] = v3;
  v4 = a2[5];
  v9[4] = a2[4];
  v9[5] = v4;
  v5 = a2[7];
  v9[6] = a2[6];
  v9[7] = v5;
  v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  v7 = a2[3];
  v9[2] = a2[2];
  v9[3] = v7;
  return sub_10023195C(a1, 1, (uint64_t)v9);
}

void sub_100DE4270(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _DWORD v26[4];
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102188460);
  v4 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 112);
    v7 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 134349568;
    v42 = v5;
    v43 = 2050;
    v44 = v6;
    v45 = 1026;
    v46 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, received event, %{public}ld, workout, %{public}ld, current state, %{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102188460);
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 112);
    v19 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)v27 = 134349568;
    *(_QWORD *)&v27[4] = v17;
    *(_WORD *)&v27[12] = 2050;
    *(_QWORD *)&v27[14] = v18;
    *(_WORD *)&v27[22] = 1026;
    *(_DWORD *)&v27[24] = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "CLWorkoutDistanceController, received event, %{public}ld, workout, %{public}ld, current state, %{public}d", v27, 28);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v8 = *(_OWORD *)(a2 + 208);
  v38 = *(_OWORD *)(a2 + 192);
  v39 = v8;
  v40 = *(_QWORD *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 144);
  v34 = *(_OWORD *)(a2 + 128);
  v35 = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v36 = *(_OWORD *)(a2 + 160);
  v37 = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v30 = *(_OWORD *)(a2 + 64);
  v31 = v11;
  v12 = *(_OWORD *)(a2 + 112);
  v32 = *(_OWORD *)(a2 + 96);
  v33 = v12;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v27 = *(_OWORD *)a2;
  *(_OWORD *)&v27[16] = v13;
  v14 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v14;
  sub_10023195C(a1, 2, (uint64_t)v27);
  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102188460);
  v15 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67240192;
    LODWORD(v42) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, state after workout event, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102188460);
    v22 = *(unsigned __int8 *)(a1 + 16);
    v26[0] = 67240192;
    v26[1] = v22;
    LODWORD(v25) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "CLWorkoutDistanceController, state after workout event, %{public}d", v26, v25);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

uint64_t sub_100DE4608(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    sub_100DE464C(a1, (unint64_t **)(a1 + 24));
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  }
  return sub_100DE49D4(a1, 1);
}

uint64_t sub_100DE464C(uint64_t result, unint64_t **a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  NSObject *v17;
  uint8_t *v18;
  _BYTE v19[24];
  uint64_t v20;
  uint8_t buf[4];
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  uint64_t v26;

  v2 = *(_QWORD *)(result + 56);
  v3 = v2 > 0x15;
  v4 = (1 << v2) & 0x300010;
  if (!v3 && v4 != 0)
  {
    v7 = result;
    v8 = *a2;
    v9 = a2[1];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)*a2) >> 6) < 2)
    {
      if (v8 == v9)
        v16 = 0;
      else
        v16 = *v8;
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102188460);
      v17 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLWorkoutDistanceController, sending update, %{public}f", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return (*(uint64_t (**)(_QWORD, unint64_t **))(**(_QWORD **)(v7 + 64) + 8))(*(_QWORD *)(v7 + 64), a2);
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102188460);
      *(_DWORD *)v19 = 134349056;
      *(_QWORD *)&v19[4] = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 1, "CLWorkoutDistanceController, sending update, %{public}f", v19, 12, *(_QWORD *)v19, *(_OWORD *)&v19[8], v20);
    }
    else
    {
      v10 = *v8;
      v11 = *(v9 - 24);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102188460);
      v12 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 6);
        *(_DWORD *)buf = 134349568;
        v22 = v13;
        v23 = 2050;
        v24 = v10;
        v25 = 2050;
        v26 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, notifying clients with num updates, %{public}lu, start, %{public}f, end, %{public}f", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return (*(uint64_t (**)(_QWORD, unint64_t **))(**(_QWORD **)(v7 + 64) + 8))(*(_QWORD *)(v7 + 64), a2);
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102188460);
      v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 6);
      *(_DWORD *)v19 = 134349568;
      *(_QWORD *)&v19[4] = v14;
      *(_WORD *)&v19[12] = 2050;
      *(_QWORD *)&v19[14] = v10;
      *(_WORD *)&v19[22] = 2050;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "CLWorkoutDistanceController, notifying clients with num updates, %{public}lu, start, %{public}f, end, %{public}f", v19, 32, *(_OWORD *)v19, *(_QWORD *)&v19[16], v11);
    }
    v18 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceController::sendOdometerData(const std::vector<CLOdometerEntry> &) const", "%s\n", v15);
    if (v18 != buf)
      free(v18);
    return (*(uint64_t (**)(_QWORD, unint64_t **))(**(_QWORD **)(v7 + 64) + 8))(*(_QWORD *)(v7 + 64), a2);
  }
  return result;
}

uint64_t sub_100DE49D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102188460);
  v4 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, toggling gps, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102188460);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "CLWorkoutDistanceController, toggling gps, %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceController::toggleGps(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_BYTE *)(a1 + 48) = a2;
  return (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 64))(*(_QWORD *)(a1 + 64), a2);
}

void sub_100DE4B98(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72))
    sub_1007B4430((uint64_t *)(a1 + 72), 0);
  operator new();
}

void sub_100DE5138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100848540(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE520C(_QWORD *a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;

  a1[7] = 0;
  a1[4] = a1[3];
  result = sub_100DE49D4((uint64_t)a1, 0);
  v4 = a1[9];
  v3 = a1 + 9;
  if (v4)
    return sub_1007B4430(v3, 0);
  return result;
}

void sub_100DE5258(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double Current;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v18 = (void **)(v4 - 16);
    v19 = *(_QWORD *)(v4 - 16);
    v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v19) >> 6);
    v21 = v20 + 1;
    if (v20 + 1 > 0x155555555555555)
      sub_100259694();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v19) >> 6);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0xAAAAAAAAAAAAAALL)
      v23 = 0x155555555555555;
    else
      v23 = v21;
    if (v23)
      v24 = (char *)sub_1002746CC(v4, v23);
    else
      v24 = 0;
    v25 = &v24[192 * v20];
    v26 = &v24[192 * v23];
    v27 = *a2;
    v28 = a2[1];
    v29 = a2[3];
    *((_OWORD *)v25 + 2) = a2[2];
    *((_OWORD *)v25 + 3) = v29;
    *(_OWORD *)v25 = v27;
    *((_OWORD *)v25 + 1) = v28;
    v30 = a2[4];
    v31 = a2[5];
    v32 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + 7) = v32;
    *((_OWORD *)v25 + 4) = v30;
    *((_OWORD *)v25 + 5) = v31;
    v33 = a2[8];
    v34 = a2[9];
    v35 = a2[11];
    *((_OWORD *)v25 + 10) = a2[10];
    *((_OWORD *)v25 + 11) = v35;
    *((_OWORD *)v25 + 8) = v33;
    *((_OWORD *)v25 + 9) = v34;
    v17 = v25 + 192;
    v37 = (char *)a1[3];
    v36 = (char *)a1[4];
    if (v36 != v37)
    {
      do
      {
        v38 = *((_OWORD *)v36 - 12);
        v39 = *((_OWORD *)v36 - 11);
        v40 = *((_OWORD *)v36 - 9);
        *((_OWORD *)v25 - 10) = *((_OWORD *)v36 - 10);
        *((_OWORD *)v25 - 9) = v40;
        *((_OWORD *)v25 - 12) = v38;
        *((_OWORD *)v25 - 11) = v39;
        v41 = *((_OWORD *)v36 - 8);
        v42 = *((_OWORD *)v36 - 7);
        v43 = *((_OWORD *)v36 - 5);
        *((_OWORD *)v25 - 6) = *((_OWORD *)v36 - 6);
        *((_OWORD *)v25 - 5) = v43;
        *((_OWORD *)v25 - 8) = v41;
        *((_OWORD *)v25 - 7) = v42;
        v44 = *((_OWORD *)v36 - 4);
        v45 = *((_OWORD *)v36 - 3);
        v46 = *((_OWORD *)v36 - 1);
        *((_OWORD *)v25 - 2) = *((_OWORD *)v36 - 2);
        *((_OWORD *)v25 - 1) = v46;
        *((_OWORD *)v25 - 4) = v44;
        *((_OWORD *)v25 - 3) = v45;
        v25 -= 192;
        v36 -= 192;
      }
      while (v36 != v37);
      v36 = (char *)*v18;
    }
    a1[3] = v25;
    a1[4] = v17;
    a1[5] = v26;
    if (v36)
      operator delete(v36);
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[3];
    v7[2] = a2[2];
    v7[3] = v10;
    *v7 = v8;
    v7[1] = v9;
    v11 = a2[4];
    v12 = a2[5];
    v13 = a2[7];
    v7[6] = a2[6];
    v7[7] = v13;
    v7[4] = v11;
    v7[5] = v12;
    v14 = a2[8];
    v15 = a2[9];
    v16 = a2[11];
    v7[10] = a2[10];
    v7[11] = v16;
    v7[8] = v14;
    v7[9] = v15;
    v17 = v7 + 12;
  }
  a1[4] = v17;
  Current = CFAbsoluteTimeGetCurrent();
  v49 = (__int128 *)a1[3];
  v48 = (__int128 *)a1[4];
  if (v49 != v48)
  {
    while (vabdd_f64(Current, *(double *)v49) <= 300.0)
    {
      v49 += 12;
      if (v49 == v48)
        return;
    }
    if (v49 != v48)
    {
      v50 = v49 + 12;
      if (v49 + 12 != v48)
      {
        do
        {
          if (vabdd_f64(Current, *(double *)v50) <= 300.0)
          {
            v51 = *v50;
            v52 = v50[1];
            v53 = v50[3];
            v49[2] = v50[2];
            v49[3] = v53;
            *v49 = v51;
            v49[1] = v52;
            v54 = v50[4];
            v55 = v50[5];
            v56 = v50[7];
            v49[6] = v50[6];
            v49[7] = v56;
            v49[4] = v54;
            v49[5] = v55;
            v57 = v50[8];
            v58 = v50[9];
            v59 = v50[11];
            v49[10] = v50[10];
            v49[11] = v59;
            v49[8] = v57;
            v49[9] = v58;
            v49 += 12;
          }
          v50 += 12;
        }
        while (v50 != v48);
        v48 = (__int128 *)a1[4];
      }
    }
    if (v49 != v48)
      a1[4] = v49;
  }
}

void sub_100DE54AC(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  void *__p;
  void *v13;
  _OWORD *v14;

  v4 = operator new(0xC0uLL);
  v14 = v4 + 12;
  v5 = *(_OWORD *)(a2 + 144);
  v4[8] = *(_OWORD *)(a2 + 128);
  v4[9] = v5;
  v6 = *(_OWORD *)(a2 + 176);
  v4[10] = *(_OWORD *)(a2 + 160);
  v4[11] = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v4[4] = *(_OWORD *)(a2 + 64);
  v4[5] = v7;
  v8 = *(_OWORD *)(a2 + 112);
  v4[6] = *(_OWORD *)(a2 + 96);
  v4[7] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v9;
  v10 = *(_OWORD *)(a2 + 48);
  v4[2] = *(_OWORD *)(a2 + 32);
  v4[3] = v10;
  __p = v4;
  v13 = v4 + 12;
  v11 = *(_QWORD **)(a1 + 72);
  if (v11)
    sub_100F5B3F8(v11, (uint64_t *)a2);
  sub_100DE464C(a1, (unint64_t **)&__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_100DE5544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DE5560(id a1)
{
  qword_10229FDF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100DE558C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100DE55BC()
{
  operator delete();
}

_QWORD *sub_100DE55D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021884B0;
  return result;
}

void sub_100DE55F4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021884B0;
}

double sub_100DE560C(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;

  v2 = *a2;
  result = **a2;
  v4 = 0.0;
  while (v2 != a2[1])
  {
    v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_100DE5638(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100DE5674()
{
}

void sub_100DE5684()
{
  operator delete();
}

_QWORD *sub_100DE5698()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102188530;
  return result;
}

void sub_100DE56BC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102188530;
}

double sub_100DE56D4(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;
  double *v5;

  v2 = a2[1];
  result = **a2;
  v4 = 0.0;
  if (*a2 != v2)
  {
    v5 = *a2;
    do
    {
      v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_100DE5724(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100DE5760()
{
}

void sub_100DE5770()
{
  operator delete();
}

_QWORD *sub_100DE5784()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021885B0;
  return result;
}

void sub_100DE57A8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021885B0;
}

BOOL sub_100DE57C0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_100DE57D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100DE580C()
{
}

void sub_100DE581C()
{
  operator delete();
}

_QWORD *sub_100DE5830()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102188630;
  return result;
}

void sub_100DE5854(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102188630;
}

BOOL sub_100DE586C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_100DE5884(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100DE58C0()
{
}

uint64_t sub_100DE58CC()
{
  qword_1023086D0 = (uint64_t)off_1021884B0;
  qword_1023086E8 = (uint64_t)&qword_1023086D0;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_1023086D0, (void *)&_mh_execute_header);
  qword_1023086F0 = (uint64_t)off_102188530;
  qword_102308708 = (uint64_t)&qword_1023086F0;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_1023086F0, (void *)&_mh_execute_header);
  qword_102308710 = (uint64_t)off_1021885B0;
  qword_102308728 = (uint64_t)&qword_102308710;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_102308710, (void *)&_mh_execute_header);
  qword_102308730 = (uint64_t)off_102188630;
  qword_102308748 = (uint64_t)&qword_102308730;
  return __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_102308730, (void *)&_mh_execute_header);
}

uint64_t sub_100DE5988(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 850045863;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_DWORD *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_QWORD *)(a1 + 312) = a1 + 312;
  *(_QWORD *)(a1 + 320) = a1 + 312;
  *(_QWORD *)(a1 + 328) = 0;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100DE5BC0(a1);
  return a1;
}

void sub_100DE5B98(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;
  _QWORD *v3;

  sub_1000F34E0(v3);
  std::mutex::~mutex(v2);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

double sub_100DE5BC0(uint64_t a1)
{
  NSObject *v2;
  double result;
  _OWORD *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: resetCoreAnalytics()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer: resetCoreAnalytics()", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::resetCoreAnalytics()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 216) = 0u;
  v4 = (_OWORD *)(a1 + 216);
  *((_BYTE *)v4 - 8) = 0;
  *((_QWORD *)v4 - 2) = 0xBFF0000000000000;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  return result;
}

void sub_100DE5D74(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  std::mutex::unlock(v4);
}

void sub_100DE5DC4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 328) >= 0xBuLL)
    sub_1000F34E0((_QWORD *)(a1 + 312));
  sub_100DE5BC0(a1);
  *(_BYTE *)(a1 + 208) = 1;
}

void sub_100DE5E04(std::mutex *a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t sig;
  unint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v6 = a2[2];
    *(_DWORD *)buf = 67109376;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::feedSession: MotionOverride: action,%d,type,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v11 = *a2;
    v12 = a2[2];
    v15[0] = 67109376;
    v15[1] = v11;
    v16 = 1024;
    v17 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer::feedSession: MotionOverride: action,%d,type,%d", v15, 14);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::feedSession(const CLMotionStateMediator_Type::MotionOverride &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  std::mutex::lock(a1);
  if (*a2 == 1)
  {
    sig = a1[3].__m_.__sig;
    if (sig > 0x18 || ((1 << sig) & 0x1028000) == 0)
    {
      v10 = *((_QWORD *)a2 + 18);
      if (v10 <= 0x18 && ((1 << v10) & 0x1028000) != 0)
        sub_100DE5DC4((uint64_t)a1);
    }
  }
  else if (!*a2)
  {
    v7 = a1[3].__m_.__sig;
    if (v7 <= 0x18 && ((1 << v7) & 0x1028000) != 0)
    {
      v8 = *((_QWORD *)a2 + 18);
      if (v8 > 0x18 || ((1 << v8) & 0x1028000) == 0)
        sub_100DE60C4((uint64_t)a1);
    }
  }
  a1[3].__m_.__sig = *((_QWORD *)a2 + 18);
  std::mutex::unlock(a1);
}

void sub_100DE60A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100DE60C4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  double Current;
  int v7;
  int v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double *v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  int v41;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: processFinishedWorkout()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    LOWORD(v35[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer: processFinishedWorkout()", v35, 2);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::processFinishedWorkout()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v3 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_DWORD *)(a1 + 284);
      v5 = *(_DWORD *)(a1 + 280);
      *(_DWORD *)buf = 67109376;
      v39 = v4;
      v40 = 1024;
      v41 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "fCA_stepCounts_current: %d, fCA_stepCounts_begin: %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v27 = *(_DWORD *)(a1 + 284);
      v28 = *(_DWORD *)(a1 + 280);
      v35[0] = 67109376;
      v35[1] = v27;
      v36 = 1024;
      v37 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "fCA_stepCounts_current: %d, fCA_stepCounts_begin: %d", v35, 14);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::processFinishedWorkout()", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    Current = CFAbsoluteTimeGetCurrent();
    v7 = *(_DWORD *)(a1 + 288);
    v8 = *(_DWORD *)(a1 + 292) + v7;
    v9 = -1.0;
    v10 = -1.0;
    if (v8 >= 1)
      v10 = (double)v7 / (double)v8;
    v32 = v10;
    v34 = Current;
    v11 = *(_DWORD *)(a1 + 212);
    v12 = -1.0;
    if (v11 >= 1)
    {
      v9 = *(double *)(a1 + 296) / (double)v11;
      v12 = *(double *)(a1 + 304) / (double)v11;
    }
    v31 = v12;
    v33 = v9;
    v14 = *(double *)(a1 + 216);
    v13 = *(double *)(a1 + 224);
    v16 = *(double *)(a1 + 232);
    v15 = *(double *)(a1 + 240);
    v18 = *(double *)(a1 + 248);
    v17 = *(double *)(a1 + 256);
    v20 = *(double *)(a1 + 264);
    v19 = *(double *)(a1 + 272);
    v21 = *(_DWORD *)(a1 + 284);
    v22 = *(_DWORD *)(a1 + 280);
    v23 = (double *)operator new(0x60uLL);
    v23[2] = *(double *)(a1 + 200);
    v23[3] = v34;
    v23[4] = v13 - v14;
    v23[5] = v15 - v16;
    v23[6] = v17 - v18;
    v23[7] = v19 - v20;
    v23[8] = v32;
    v23[9] = v33;
    v23[10] = v31;
    *((_DWORD *)v23 + 22) = v21 - v22;
    v24 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)v23 = v24;
    *((_QWORD *)v23 + 1) = a1 + 312;
    *(_QWORD *)(v24 + 8) = v23;
    *(_QWORD *)(a1 + 312) = v23;
    ++*(_QWORD *)(a1 + 328);
    sub_100DE5BC0(a1);
  }
}

void sub_100DE64CC(std::mutex *a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t sig;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  CFAbsoluteTime v12;
  uint8_t buf[4];
  CFAbsoluteTime Current;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(), time: %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v8 = qword_10229FCD8;
    v11 = 134217984;
    v12 = CFAbsoluteTimeGetCurrent();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(), time: %f", COERCE_DOUBLE(&v11));
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(const CLWorkoutUpdate &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  std::mutex::lock(a1);
  v5 = (unint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)(a2 + 8));
  v6 = v5;
  sig = a1[3].__m_.__sig;
  if (sig > 0x18 || ((1 << sig) & 0x1028000) == 0)
    goto LABEL_12;
  if (v5 > 0x18 || ((1 << v5) & 0x1028000) == 0)
  {
    sub_100DE60C4((uint64_t)a1);
    goto LABEL_15;
  }
  if (((1 << sig) & 0x1028000) == 0)
  {
LABEL_12:
    if (v5 <= 0x18 && ((1 << v5) & 0x1028000) != 0)
      sub_100DE5DC4((uint64_t)a1);
  }
LABEL_15:
  a1[3].__m_.__sig = v6;
  std::mutex::unlock(a1);
}

void sub_100DE6744(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100DE6760(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  NSObject *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;

  std::mutex::lock((std::mutex *)a1);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(double *)(a1 + 200) < 0.0)
    {
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + 216) = a4;
      *(double *)(a1 + 232) = a5;
      *(double *)(a1 + 248) = a6;
      *(double *)(a1 + 264) = a7;
      *(_DWORD *)(a1 + 280) = a2;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v18 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_QWORD *)(a1 + 200);
        *(_DWORD *)buf = 134217984;
        v27 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics: Initializing core analytics time: %f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021886C0);
        v21 = *(_QWORD *)(a1 + 200);
        v24 = 134217984;
        v25 = v21;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics: Initializing core analytics time: %f", COERCE_DOUBLE(&v24));
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics(double, double, double, double, double, double, int, BOOL)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
    }
    *(double *)(a1 + 224) = a4;
    *(double *)(a1 + 240) = a5;
    *(double *)(a1 + 256) = a6;
    *(double *)(a1 + 272) = a7;
    *(_DWORD *)(a1 + 284) = a2;
    v20 = *(double *)(a1 + 304) + a9;
    *(double *)(a1 + 296) = *(double *)(a1 + 296) + a8;
    *(double *)(a1 + 304) = v20;
    *(_DWORD *)(a1 + 288) += a3;
    *(_DWORD *)(a1 + 292) += a3 ^ 1;
    ++*(_DWORD *)(a1 + 212);
  }
  std::mutex::unlock((std::mutex *)a1);
}

void sub_100DE69D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

NSData *sub_100DE69F0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  CLWorkoutDistanceCoreAnalytics *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  unsigned int v14;
  NSData *v15;
  NSObject *v16;
  NSData *v17;
  NSObject *v18;
  unsigned int v19;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  void *v34;
  int v35;
  id v36;
  uint8_t buf[4];
  id v38;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v2 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: getSerializedCoreAnalytics()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    LOWORD(v35) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer: getSerializedCoreAnalytics()", &v35, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  std::mutex::lock((std::mutex *)a1);
  if (!*(_QWORD *)(a1 + 328))
    goto LABEL_30;
  v3 = +[NSMutableArray array](NSMutableArray, "array");
  v4 = (_QWORD *)(a1 + 312);
  v5 = *(_QWORD **)(a1 + 320);
  if (v5 != (_QWORD *)(a1 + 312))
  {
    do
    {
      v6 = -[CLWorkoutDistanceCoreAnalytics initWithWorkoutDistanceMeasures:]([CLWorkoutDistanceCoreAnalytics alloc], "initWithWorkoutDistanceMeasures:", v5 + 2);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v7 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        v8 = -[CLWorkoutDistanceCoreAnalytics description](v6, "description");
        *(_DWORD *)buf = 138412290;
        v38 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Workout distance core analytics: %@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021886C0);
        v9 = qword_10229FCD8;
        v10 = -[CLWorkoutDistanceCoreAnalytics description](v6, "description");
        v35 = 138412290;
        v36 = v10;
        LODWORD(v33) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "Workout distance core analytics: %@", &v35, v33);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      objc_msgSend(v3, "addObject:", v6);
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != v4);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v13 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v14 = objc_msgSend(v3, "count");
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Attempt to serialize core analytics array of %d entries.", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v23 = qword_10229FCD8;
    v24 = objc_msgSend(v3, "count");
    v35 = 67109120;
    LODWORD(v36) = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "CLWorkoutDistanceCoreAnalyzer: Attempt to serialize core analytics array of %d entries.", &v35);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  v34 = 0;
  v15 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v34);
  if (v34)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v16 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v34;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLWorkoutDistanceCoreAnalyzer: Error serializing the message: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v35 = 138412290;
      v36 = v34;
      LODWORD(v33) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CLWorkoutDistanceCoreAnalyzer: Error serializing the message: %@", &v35, v33);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
LABEL_30:
    v17 = 0;
    goto LABEL_37;
  }
  v17 = v15;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v18 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v19 = -[NSData length](v17, "length");
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Serialization complete, message size: %d bytes.", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v29 = qword_10229FCD8;
    v30 = -[NSData length](v17, "length");
    v35 = 67109120;
    LODWORD(v36) = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "CLWorkoutDistanceCoreAnalyzer: Serialization complete, message size: %d bytes.", &v35);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  sub_1000F34E0(v4);
LABEL_37:
  std::mutex::unlock((std::mutex *)a1);
  return v17;
}

void sub_100DE7190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE71DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  unsigned int v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[2];
  _BYTE v61[128];
  _DWORD v62[4];
  uint8_t buf[4];
  unsigned int v64;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: getDeserializedCoreAnalytics()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    LOWORD(v60[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer: getDeserializedCoreAnalytics()", v60, 2);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  sub_1000F34E0(a2);
  if (a3)
  {
    v60[0] = 0;
    v7 = objc_opt_class(NSArray, v6);
    v9 = objc_opt_class(CLWorkoutDistanceCoreAnalytics, v8);
    v11 = objc_opt_class(NSString, v10);
    v13 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, v9, v11, objc_opt_class(NSNumber, v12), 0), a3, v60);
    if (v60[0])
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v14 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLWorkoutDistanceCoreAnalyzer: Error unserializing the message.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021886C0);
        LOWORD(v62[0]) = 0;
        LODWORD(v54) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "CLWorkoutDistanceCoreAnalyzer: Error unserializing the message.", v62, v54);
        v46 = (uint8_t *)v45;
        sub_100512490("Generic", 1, 0, 0, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
      NSLog(CFSTR("Error: %@"), v60[0]);
      return 103;
    }
    else
    {
      v17 = v13;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v18 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        v19 = objc_msgSend(v17, "count");
        *(_DWORD *)buf = 67109120;
        v64 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Message deserialized to %d samples.", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021886C0);
        v49 = qword_10229FCD8;
        v50 = objc_msgSend(v17, "count");
        v62[0] = 67109120;
        v62[1] = v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "CLWorkoutDistanceCoreAnalyzer: Message deserialized to %d samples.", v62);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
      if (v20)
      {
        v21 = *(_QWORD *)v57;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v57 != v21)
              objc_enumerationMutation(v17);
            v23 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
            objc_msgSend(v23, "beginTime");
            v55 = v24;
            objc_msgSend(v23, "endTime");
            v26 = v25;
            objc_msgSend(v23, "totalDistanceStepCount");
            v28 = v27;
            objc_msgSend(v23, "totalDistanceStepCountMobility");
            v30 = v29;
            objc_msgSend(v23, "totalDistanceOdometer");
            v32 = v31;
            objc_msgSend(v23, "totalDistanceFused");
            v34 = v33;
            objc_msgSend(v23, "percentageRemoteGPSSource");
            v36 = v35;
            objc_msgSend(v23, "meanPaceStepCount");
            v38 = v37;
            objc_msgSend(v23, "meanPaceFinalFused");
            v40 = v39;
            LODWORD(v23) = objc_msgSend(v23, "totalStepCount");
            v41 = operator new(0x60uLL);
            v41[2] = v55;
            v41[3] = v26;
            v41[4] = v28;
            v41[5] = v30;
            v41[6] = v32;
            v41[7] = v34;
            v41[8] = v36;
            v41[9] = v38;
            v41[10] = v40;
            *((_DWORD *)v41 + 22) = (_DWORD)v23;
            v42 = *a2;
            *v41 = *a2;
            v41[1] = a2;
            *(_QWORD *)(v42 + 8) = v41;
            *a2 = (uint64_t)v41;
            ++a2[2];
          }
          v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
        }
        while (v20);
      }
      return 100;
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v16 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Empty message received for deserialization.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      LOWORD(v60[0]) = 0;
      LODWORD(v53) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "CLWorkoutDistanceCoreAnalyzer: Empty message received for deserialization.", v60, v53);
      v48 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
    return 112;
  }
}

void sub_100DE7930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  int v33;
  float v34;
  float v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  float v42;
  double v43;
  float v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int v57;
  double v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  NSObject *v74;
  float v75;
  unsigned int v76;
  uint64_t v77;
  NSObject *v78;
  const char *v79;
  char *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  const char *v91;
  char *v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  const char *v103;
  char *v104;
  const char *v105;
  char *v106;
  const char *v107;
  char *v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  void **v115;
  uint64_t v116;
  NSDictionary *(*v117)(uint64_t, double);
  void *v118;
  float v119;
  float v120;
  float v121;
  int v122;
  float v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  BOOL v132;
  float *v133;
  float *v134;
  uint64_t v135;
  float *v136;
  float *v137;
  uint64_t v138;
  float *v139;
  float *v140;
  uint64_t v141;
  float *v142;
  float *v143;
  uint64_t v144;
  int v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  _BYTE v160[10];
  uint64_t v161;
  _BYTE v162[6];
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  unsigned int v167;
  _BYTE buf[44];
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  _BYTE v175[10];
  uint64_t v176;
  _BYTE v177[6];
  int v178;
  __int16 v179;
  int v180;
  __int16 v181;
  unsigned int v182;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Attempt to send core anaytics from CLWorkoutDistanceCoreAnalyzer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    LOWORD(v145) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Attempt to send core anaytics from CLWorkoutDistanceCoreAnalyzer", &v145, 2);
    v80 = (char *)v79;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v79);
    if (v80 != buf)
      free(v80);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v7 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    v8 = *(double *)a2;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(double *)(a2 + 32);
    v13 = *(double *)(a2 + 40);
    v14 = *(double *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    v16 = *(_QWORD *)(a2 + 64);
    v17 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)buf = 134220288;
    *(double *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v10;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v11;
    *(_WORD *)&buf[42] = 2048;
    v169 = v12;
    v170 = 2048;
    v171 = v13;
    v172 = 2048;
    v173 = v14;
    v174 = 2048;
    *(_QWORD *)v175 = v15;
    *(_WORD *)&v175[8] = 2048;
    v176 = v16;
    *(_WORD *)v177 = 1024;
    *(_DWORD *)&v177[2] = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Phone measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d", buf, 0x62u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v81 = *(double *)a2;
    v82 = *(double *)(a2 + 8);
    v83 = *(double *)(a2 + 16);
    v84 = *(double *)(a2 + 24);
    v85 = *(double *)(a2 + 32);
    v86 = *(double *)(a2 + 40);
    v87 = *(double *)(a2 + 48);
    v88 = *(_QWORD *)(a2 + 56);
    v89 = *(_QWORD *)(a2 + 64);
    v90 = *(_DWORD *)(a2 + 72);
    v145 = 134220288;
    v146 = v81;
    v147 = 2048;
    v148 = v82;
    v149 = 2048;
    v150 = v83;
    v151 = 2048;
    v152 = v84;
    v153 = 2048;
    v154 = v85;
    v155 = 2048;
    v156 = v86;
    v157 = 2048;
    v158 = v87;
    v159 = 2048;
    *(_QWORD *)v160 = v88;
    *(_WORD *)&v160[8] = 2048;
    v161 = v89;
    *(_WORD *)v162 = 1024;
    *(_DWORD *)&v162[2] = v90;
    LODWORD(v109) = 98;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Phone measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d", COERCE_DOUBLE(&v145), v109, v110, v112, v114, *(double *)&v115, *(double *)&v116, *(double *)&v117, *(double *)&v118, LODWORD(v119));
    v92 = (char *)v91;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v91);
    if (v92 != buf)
      free(v92);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v18 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    v19 = *(double *)a3;
    v20 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a3 + 16);
    v22 = *(_QWORD *)(a3 + 24);
    v23 = *(double *)(a3 + 32);
    v24 = *(double *)(a3 + 40);
    v25 = *(double *)(a3 + 48);
    v26 = *(_QWORD *)(a3 + 56);
    v27 = *(_QWORD *)(a3 + 64);
    v28 = *(_DWORD *)(a3 + 72);
    *(_DWORD *)buf = 134220288;
    *(double *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v20;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v21;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v22;
    *(_WORD *)&buf[42] = 2048;
    v169 = v23;
    v170 = 2048;
    v171 = v24;
    v172 = 2048;
    v173 = v25;
    v174 = 2048;
    *(_QWORD *)v175 = v26;
    *(_WORD *)&v175[8] = 2048;
    v176 = v27;
    *(_WORD *)v177 = 1024;
    *(_DWORD *)&v177[2] = v28;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Watch measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d", buf, 0x62u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v93 = *(double *)a3;
    v94 = *(double *)(a3 + 8);
    v95 = *(double *)(a3 + 16);
    v96 = *(double *)(a3 + 24);
    v97 = *(double *)(a3 + 32);
    v98 = *(double *)(a3 + 40);
    v99 = *(double *)(a3 + 48);
    v100 = *(_QWORD *)(a3 + 56);
    v101 = *(_QWORD *)(a3 + 64);
    v102 = *(_DWORD *)(a3 + 72);
    v145 = 134220288;
    v146 = v93;
    v147 = 2048;
    v148 = v94;
    v149 = 2048;
    v150 = v95;
    v151 = 2048;
    v152 = v96;
    v153 = 2048;
    v154 = v97;
    v155 = 2048;
    v156 = v98;
    v157 = 2048;
    v158 = v99;
    v159 = 2048;
    *(_QWORD *)v160 = v100;
    *(_WORD *)&v160[8] = 2048;
    v161 = v101;
    *(_WORD *)v162 = 1024;
    *(_DWORD *)&v162[2] = v102;
    LODWORD(v109) = 98;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Watch measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d", COERCE_DOUBLE(&v145), v109, v110, v112, v114, *(double *)&v115, *(double *)&v116, *(double *)&v117, *(double *)&v118, LODWORD(v119));
    v104 = (char *)v103;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v103);
    if (v104 != buf)
      free(v104);
  }
  v29 = atomic_load((unsigned __int8 *)&qword_102308768);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_102308768))
  {
    *(_OWORD *)buf = xmmword_101C274CC;
    *(_QWORD *)&buf[16] = 0x4280000042440000;
    sub_10041C4B4(qword_102308750, buf, 6uLL);
    __cxa_atexit((void (*)(void *))sub_10041C534, qword_102308750, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102308768);
  }
  v30 = atomic_load((unsigned __int8 *)&qword_102308788);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_102308788))
  {
    *(_OWORD *)buf = xmmword_101C274E4;
    *(_QWORD *)&buf[16] = 0x46C35000469C4000;
    sub_10041C4B4(qword_102308770, buf, 6uLL);
    __cxa_atexit((void (*)(void *))sub_10041C534, qword_102308770, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102308788);
  }
  v31 = atomic_load((unsigned __int8 *)&qword_1023087A8);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1023087A8))
  {
    *(_OWORD *)buf = xmmword_101C274FC;
    *(_OWORD *)&buf[16] = unk_101C2750C;
    *(_OWORD *)&buf[28] = unk_101C27518;
    sub_10041C4B4(qword_102308790, buf, 0xBuLL);
    __cxa_atexit((void (*)(void *))sub_10041C534, qword_102308790, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023087A8);
  }
  v32 = atomic_load((unsigned __int8 *)qword_1023087C8);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(qword_1023087C8))
  {
    *(_DWORD *)&buf[16] = 1108056474;
    *(_OWORD *)buf = xmmword_101C27528;
    sub_10041C4B4(qword_1023087B0, buf, 5uLL);
    __cxa_atexit((void (*)(void *))sub_10041C534, qword_1023087B0, (void *)&_mh_execute_header);
    __cxa_guard_release(qword_1023087C8);
  }
  std::mutex::lock((std::mutex *)(a1 + 64));
  v33 = *(_DWORD *)(a1 + 132);
  v34 = *(float *)(a1 + 136);
  LODWORD(v111) = *(_DWORD *)(a1 + 140);
  v35 = *(float *)(a1 + 148);
  std::mutex::unlock((std::mutex *)(a1 + 64));
  v36 = *(double *)(a2 + 40);
  v37 = -1.0;
  v38 = -1.0;
  if (v36 > 0.001)
    v38 = *(double *)(a3 + 32) / v36;
  v39 = *(double *)(a2 + 64);
  if (v39 > 0.001)
    v37 = *(double *)(a2 + 56) / v39;
  v40 = -1.0;
  if (v36 > 0.001)
    v40 = *(double *)(a2 + 16) / v36;
  v41 = *(_DWORD *)(a3 + 72);
  if (v41 < 1)
    v42 = -1.0;
  else
    v42 = (float)*(int *)(a2 + 72) / (float)v41;
  *((float *)&v111 + 1) = v42;
  v43 = -1.0;
  if (v39 > 0.001)
    v43 = *(double *)(a3 + 56) / v39;
  v113 = v38;
  HIDWORD(v114) = -1.0;
  if (v36 > 0.001)
  {
    v44 = *(double *)(a3 + 16) / v36;
    *((float *)&v114 + 1) = v44;
  }
  v45 = *(double *)a2;
  v46 = *(double *)(a2 + 8);
  v142 = 0;
  v143 = 0;
  v144 = 0;
  sub_10027205C(&v142, (const void *)qword_102308750[0], unk_102308758, (unk_102308758 - qword_102308750[0]) >> 2);
  v47 = (char *)v143 - (char *)v142;
  if (v143 == v142)
  {
    LODWORD(v48) = 0;
    v50 = 0;
    if (!v143)
      goto LABEL_41;
  }
  else
  {
    v48 = 0;
    v49 = v47 >> 2;
    if ((unint64_t)(v47 >> 2) <= 1)
      v49 = 1;
    while (v142[v48] < v35)
    {
      if (v49 == ++v48)
      {
        LODWORD(v48) = v49;
        break;
      }
    }
  }
  v143 = v142;
  operator delete(v142);
  v50 = v48;
LABEL_41:
  v51 = *(double *)(a2 + 40);
  v140 = 0;
  v141 = 0;
  v139 = 0;
  sub_10027205C(&v139, (const void *)qword_102308770[0], unk_102308778, (unk_102308778 - qword_102308770[0]) >> 2);
  v52 = v46 - v45;
  v53 = (char *)v140 - (char *)v139;
  if (v140 == v139)
  {
    LODWORD(v54) = 0;
    v57 = 0;
    if (!v140)
      goto LABEL_49;
  }
  else
  {
    v54 = 0;
    v56 = v53 >> 2;
    if ((unint64_t)(v53 >> 2) <= 1)
      v56 = 1;
    while (1)
    {
      v55 = v51;
      if (v139[v54] >= v55)
        break;
      if (v56 == ++v54)
      {
        LODWORD(v54) = v56;
        break;
      }
    }
  }
  v140 = v139;
  operator delete(v139);
  v57 = v54;
LABEL_49:
  v58 = *(double *)(a3 + 48);
  v59 = -1.0;
  if (v52 > 0.001)
    v59 = *(double *)(a2 + 40) / v52;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  sub_10027205C(&v136, (const void *)qword_102308790[0], unk_102308798, (unk_102308798 - qword_102308790[0]) >> 2);
  v60 = (char *)v137 - (char *)v136;
  if (v137 == v136)
  {
    LODWORD(v61) = 0;
    v63 = 0;
    if (!v137)
      goto LABEL_59;
  }
  else
  {
    v61 = 0;
    v62 = v60 >> 2;
    if ((unint64_t)(v60 >> 2) <= 1)
      v62 = 1;
    while (v136[v61] < v59)
    {
      if (v62 == ++v61)
      {
        LODWORD(v61) = v62;
        break;
      }
    }
  }
  v137 = v136;
  operator delete(v136);
  v63 = v61;
LABEL_59:
  v64 = 0.0;
  if (v34 != 0.0)
    v64 = *(float *)&v111 / (float)(v34 * v34);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  sub_10027205C(&v133, (const void *)qword_1023087B0[0], unk_1023087B8, (unk_1023087B8 - qword_1023087B0[0]) >> 2);
  v65 = (char *)v134 - (char *)v133;
  if (v134 == v133)
  {
    LODWORD(v66) = 0;
    v69 = 0;
    v68 = v37;
    if (!v134)
      goto LABEL_70;
  }
  else
  {
    v66 = 0;
    v67 = v65 >> 2;
    if ((unint64_t)(v65 >> 2) <= 1)
      v67 = 1;
    v68 = v37;
    while (v133[v66] < v64)
    {
      if (v67 == ++v66)
      {
        LODWORD(v66) = v67;
        break;
      }
    }
  }
  v134 = v133;
  operator delete(v133);
  v69 = v66;
LABEL_70:
  v70 = v34 / 0.1;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v71 = v113;
  v72 = v68;
  v73 = v40;
  v74 = qword_10229FCD8;
  v75 = v43;
  v76 = vcvtps_s32_f32(v70);
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134221312;
    *(double *)&buf[4] = v71;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v72;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v73;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = *((float *)&v111 + 1);
    *(_WORD *)&buf[42] = 2048;
    v169 = v75;
    v170 = 2048;
    v171 = *((float *)&v114 + 1);
    v172 = 2048;
    v173 = *((float *)&v114 + 1);
    v174 = 1024;
    *(_DWORD *)v175 = v50;
    *(_WORD *)&v175[4] = 1024;
    *(_DWORD *)&v175[6] = v57;
    LOWORD(v176) = 1024;
    *(_DWORD *)((char *)&v176 + 2) = v33;
    HIWORD(v176) = 1024;
    *(_DWORD *)v177 = v58 >= 0.5;
    *(_WORD *)&v177[4] = 1024;
    v178 = v63;
    v179 = 1024;
    v180 = v69;
    v181 = 1024;
    v182 = v76;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "CLWorkoutDistanceCoreAnalyzer: Core analytics: %f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d", buf, 0x72u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v145 = 134221312;
    v146 = v71;
    v147 = 2048;
    v148 = v72;
    v149 = 2048;
    v150 = v73;
    v151 = 2048;
    v152 = *((float *)&v111 + 1);
    v153 = 2048;
    v154 = v75;
    v155 = 2048;
    v156 = *((float *)&v114 + 1);
    v157 = 2048;
    v158 = *((float *)&v114 + 1);
    v159 = 1024;
    *(_DWORD *)v160 = v50;
    *(_WORD *)&v160[4] = 1024;
    *(_DWORD *)&v160[6] = v57;
    LOWORD(v161) = 1024;
    *(_DWORD *)((char *)&v161 + 2) = v33;
    HIWORD(v161) = 1024;
    *(_DWORD *)v162 = v58 >= 0.5;
    *(_WORD *)&v162[4] = 1024;
    v163 = v63;
    v164 = 1024;
    v165 = v69;
    v166 = 1024;
    v167 = v76;
    LODWORD(v109) = 114;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "CLWorkoutDistanceCoreAnalyzer: Core analytics: %f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d", COERCE_DOUBLE(&v145), v109, v111, v113, v114, *(double *)&v115, *(double *)&v116, (_DWORD)v117, (_DWORD)v118, LODWORD(v119), LODWORD(v121),
      LODWORD(v123),
      v125,
      v127);
    v106 = (char *)v105;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v105);
    if (v106 != buf)
      free(v106);
  }
  if (objc_opt_class(MCProfileConnection, v77)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*(double *)(a2 + 40) > 0.01)
    {
      v115 = _NSConcreteStackBlock;
      v116 = 3221225472;
      v117 = sub_100DE8900;
      v118 = &unk_1021886A0;
      v119 = v71;
      v120 = v72;
      v121 = v73;
      v122 = HIDWORD(v111);
      v123 = v43;
      v124 = HIDWORD(v114);
      v125 = HIDWORD(v114);
      v126 = v50;
      v127 = v57;
      v132 = v58 >= 0.5;
      v128 = v33;
      v129 = v63;
      v130 = v69;
      v131 = v76;
      AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.Pedometer.PedestrianDistanceEval"), &v115);
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v78 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "CLWorkoutDistanceCoreAnalyzer: Not authorized to submit analytics without IHA", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      LOWORD(v145) = 0;
      LODWORD(v109) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "CLWorkoutDistanceCoreAnalyzer: Not authorized to submit analytics without IHA", &v145, *(_QWORD *)&v109);
      v108 = (char *)v107;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v107);
      if (v108 != buf)
        free(v108);
    }
  }
}

void sub_100DE88B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_1023087C8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100DE8900(uint64_t a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  _QWORD v10[14];
  _QWORD v11[14];

  v10[0] = CFSTR("normGPSDistance");
  LODWORD(a2) = *(_DWORD *)(a1 + 32);
  v11[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2);
  v10[1] = CFSTR("normPhonePace");
  LODWORD(v3) = *(_DWORD *)(a1 + 36);
  v11[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v10[2] = CFSTR("normPhonePedCalDistance");
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  v11[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4);
  v10[3] = CFSTR("normStepCount");
  LODWORD(v5) = *(_DWORD *)(a1 + 44);
  v11[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5);
  v10[4] = CFSTR("normWatchPace");
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  v11[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6);
  v10[5] = CFSTR("normWatchPedCalDistance");
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  v11[5] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7);
  v10[6] = CFSTR("normWatchPedMobDistance");
  LODWORD(v8) = *(_DWORD *)(a1 + 56);
  v11[6] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  v10[7] = CFSTR("ageGroup");
  v11[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v10[8] = CFSTR("distanceBin");
  v11[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v10[9] = CFSTR("gender");
  v11[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  v10[10] = CFSTR("phoneGPS");
  v11[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 84));
  v10[11] = CFSTR("speedBin");
  v11[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v10[12] = CFSTR("userBMIBin");
  v11[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 76));
  v10[13] = CFSTR("userHeightBin");
  v11[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 14);
}

_QWORD *sub_100DE8AFC@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double *v20;
  double v21;
  NSObject *v22;
  double v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  double v47;
  const char *v48;
  char *v49;
  const char *v51;
  char *v52;
  double v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  double v57;
  __int128 v58;
  int v59;
  double v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  _BYTE buf[32];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Attempt to sync workout distance metric between watch and phone.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    LOWORD(v59) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Attempt to sync workout distance metric between watch and phone.", &v59, 2);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v7 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    v8 = *((_QWORD *)a1 + 41);
    v9 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Workout distance: Phone buffer size: %lu, Watch buffer size: %lu,", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v53 = a1[41];
    v54 = *(_QWORD *)(a2 + 16);
    v59 = 134218240;
    v60 = v53;
    v61 = 2048;
    v62 = v54;
    LODWORD(v57) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Workout distance: Phone buffer size: %lu, Watch buffer size: %lu,", &v59, *(_QWORD *)&v57);
    v56 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  if (*((_QWORD *)a1 + 41) && *(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)&v10 = 134217984;
    v58 = v10;
    do
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v11 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        v12 = *((_QWORD *)a1 + 40);
        v13 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(v12 + 16);
        v14 = *(_QWORD *)(v12 + 24);
        v17 = *(_QWORD *)(v13 + 16);
        v16 = *(_QWORD *)(v13 + 24);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v17;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v14;
        LOWORD(v68) = 2048;
        *(_QWORD *)((char *)&v68 + 2) = v16;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Attempt to sync phone begin time (%f) with watch begin time (%f) and phone end time (%f) with watch end time (%f)", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021886C0);
        v39 = *((_QWORD *)a1 + 40);
        v40 = *(_QWORD *)(a2 + 8);
        v42 = *(double *)(v39 + 16);
        v41 = *(_QWORD *)(v39 + 24);
        v44 = *(_QWORD *)(v40 + 16);
        v43 = *(_QWORD *)(v40 + 24);
        v59 = 134218752;
        v60 = v42;
        v61 = 2048;
        v62 = v44;
        v63 = 2048;
        v64 = v41;
        v65 = 2048;
        v66 = v43;
        LODWORD(v57) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Attempt to sync phone begin time (%f) with watch begin time (%f) and phone end time (%f) with watch end time (%f)", COERCE_DOUBLE(&v59), v57, *(double *)&v58, *((double *)&v58 + 1));
        v46 = (char *)v45;
        sub_100512490("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
      v18 = (double *)*((_QWORD *)a1 + 40);
      v19 = v18[2];
      v20 = *(double **)(a2 + 8);
      v21 = v20[2];
      if (vabdd_f64(v19, v21) >= 15.0 || vabdd_f64(v18[3], v20[3]) >= 15.0)
      {
        if (v19 >= v21)
        {
          v38 = *(_QWORD *)v20;
          *(double *)(v38 + 8) = v20[1];
          **((_QWORD **)v20 + 1) = v38;
          --*(_QWORD *)(a2 + 16);
          v18 = v20;
        }
        else
        {
          v37 = *v18;
          *(double *)(*(_QWORD *)&v37 + 8) = v18[1];
          **((double **)v18 + 1) = v37;
          --*((_QWORD *)a1 + 41);
        }
      }
      else
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021886C0);
        v22 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + 8) + 24) - *(double *)(*(_QWORD *)(a2 + 8) + 16);
          *(_DWORD *)buf = v58;
          *(double *)&buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Workout synced. Total duration %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021886C0);
          v47 = *(double *)(*(_QWORD *)(a2 + 8) + 24) - *(double *)(*(_QWORD *)(a2 + 8) + 16);
          v59 = v58;
          v60 = v47;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Workout synced. Total duration %f", COERCE_DOUBLE(&v59));
          v49 = (char *)v48;
          sub_100512490("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v48);
          if (v49 != buf)
            free(v49);
        }
        v24 = *(_OWORD **)(a2 + 8);
        v25 = (_OWORD *)*((_QWORD *)a1 + 40);
        v26 = v24[3];
        *(_OWORD *)&buf[16] = v24[2];
        v68 = v26;
        v27 = v24[5];
        v69 = v24[4];
        v70 = v27;
        *(_OWORD *)buf = v24[1];
        v72 = v25[2];
        v73 = v25[3];
        v74 = v25[4];
        v75 = v25[5];
        v71 = v25[1];
        v28 = operator new(0xB0uLL);
        v29 = v73;
        v28[7] = v72;
        v28[8] = v29;
        v30 = v75;
        v28[9] = v74;
        v28[10] = v30;
        v31 = v69;
        v28[3] = v68;
        v28[4] = v31;
        v32 = v71;
        v28[5] = v70;
        v28[6] = v32;
        v33 = *(_OWORD *)&buf[16];
        v28[1] = *(_OWORD *)buf;
        v28[2] = v33;
        v34 = *a3;
        *(_QWORD *)v28 = *a3;
        *((_QWORD *)v28 + 1) = a3;
        *(_QWORD *)(v34 + 8) = v28;
        *a3 = (uint64_t)v28;
        ++a3[2];
        v35 = *(_QWORD *)v25;
        *(_QWORD *)(v35 + 8) = *((_QWORD *)v25 + 1);
        **((_QWORD **)v25 + 1) = v35;
        --*((_QWORD *)a1 + 41);
        operator delete(v25);
        v18 = *(double **)(a2 + 8);
        v36 = *v18;
        *(double *)(*(_QWORD *)&v36 + 8) = v18[1];
        **((double **)v18 + 1) = v36;
        --*(_QWORD *)(a2 + 16);
      }
      operator delete(v18);
    }
    while (*((_QWORD *)a1 + 41) && *(_QWORD *)(a2 + 16));
  }
  return sub_1000F34E0((_QWORD *)a1 + 39);
}

void sub_100DE929C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1000F34E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE92C4(std::mutex *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  _OWORD v21[5];
  _OWORD v22[5];
  _WORD v23[8];
  __int128 v24;
  uint64_t v25;
  uint8_t buf[4];
  _BYTE v27[12];

  std::mutex::lock(a1);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021886C0);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v27 = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch, time: %f", buf, 0xCu);
  }
  v5 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v16 = qword_10229FCD8;
    LODWORD(v24) = 134217984;
    *(_QWORD *)((char *)&v24 + 4) = CFAbsoluteTimeGetCurrent();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch, time: %f", COERCE_DOUBLE(&v24));
    v18 = (uint8_t *)v17;
    v5 = sub_100512490("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch(NSData * _Nullable)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (a1[3].__m_.__opaque[8])
    sub_100DE60C4((uint64_t)a1);
  *(_QWORD *)&v24 = &v24;
  *((_QWORD *)&v24 + 1) = &v24;
  v25 = 0;
  v6 = sub_100DE71DC(v5, (uint64_t *)&v24, a2);
  if ((_DWORD)v6 == 100)
  {
    if (v25)
    {
      sub_100DE8AFC((double *)&a1->__m_.__sig, (uint64_t)&v24, (uint64_t *)buf);
      for (i = *(_QWORD *)&v27[4]; (uint8_t *)i != buf; i = *(_QWORD *)(i + 8))
      {
        v8 = *(_OWORD *)(i + 64);
        v22[2] = *(_OWORD *)(i + 48);
        v22[3] = v8;
        v9 = *(_OWORD *)(i + 96);
        v22[4] = *(_OWORD *)(i + 80);
        v10 = *(_OWORD *)(i + 32);
        v22[0] = *(_OWORD *)(i + 16);
        v22[1] = v10;
        v11 = *(_OWORD *)(i + 112);
        v12 = *(_OWORD *)(i + 144);
        v13 = *(_OWORD *)(i + 160);
        v21[2] = *(_OWORD *)(i + 128);
        v21[3] = v12;
        v21[4] = v13;
        v21[0] = v9;
        v21[1] = v11;
        sub_100DE7930((uint64_t)a1, (uint64_t)v22, (uint64_t)v21);
      }
      sub_1000F34E0(buf);
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021886C0);
    v14 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Something went wrong with the workout distance core analytics received from the watch. Abort submission.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021886C0);
      v23[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "Something went wrong with the workout distance core analytics received from the watch. Abort submission.", v23, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "CMError CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch(NSData * _Nullable)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  sub_1000F34E0(&v24);
  std::mutex::unlock(a1);
  return v6;
}

void sub_100DE967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::mutex *v33;

  sub_1000F34E0(&a33);
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

void sub_100DE96C4(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_100DE9778(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021808E0;
  *(_QWORD *)(a1 + 8) = 0x19000000000;
  *(_QWORD *)(a1 + 4816) = 0x19000000000;
  *(_QWORD *)(a1 + 8024) = 0;
  *(_DWORD *)(a1 + 8032) = 0;
  *(_QWORD *)(a1 + 8036) = 0xBF8000003F800000;
  result = 0.0;
  *(_OWORD *)(a1 + 8048) = 0u;
  *(_QWORD *)(a1 + 8064) = 0x3F80000000000000;
  return result;
}

__n128 sub_100DE97C8(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4)
{
  __n128 result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100687774((unsigned __int16 *)(a1 + 8), a2);
  v8 = *(unsigned __int16 *)(a1 + 4818);
  v9 = *(unsigned int *)(a1 + 4820);
  v10 = *(unsigned __int16 *)(a1 + 4816);
  if (v10 + v8 >= v9)
    v11 = *(unsigned int *)(a1 + 4820);
  else
    v11 = 0;
  *(_QWORD *)(a1 + 4816 + 8 * (v10 + v8 - v11) + 8) = a4;
  if (v9 <= v8)
  {
    if (v10 + 1 < v9)
      LOWORD(v9) = 0;
    *(_WORD *)(a1 + 4816) = v10 + 1 - v9;
  }
  else
  {
    *(_WORD *)(a1 + 4818) = v8 + 1;
  }
  if ((__n128 *)(a1 + 8056) != a3)
  {
    result = *a3;
    *(__n128 *)(a1 + 8056) = *a3;
  }
  return result;
}

BOOL sub_100DE9868(uint64_t a1, void *a2, float a3)
{
  __double2 v6;
  double sinval;
  unsigned __int8 v8;
  float64x2_t v13;
  __double2 v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  __double2 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned __int8 v26;
  uint64_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t *v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  double v53;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  _BOOL8 result;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  float32x4_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float32x2_t *v89;
  float32x2_t *v90;
  float32_t v91;
  float32x4_t v92;
  unint64_t v93;
  float v94;
  int v95;
  int v96;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  _OWORD v113[6];
  _OWORD v114[12];
  _OWORD v115[6];
  float64x2_t v116;
  float64_t v117;
  float64x2_t v118;
  float64_t v119;
  float64x2_t v120;
  float64_t v121;
  float64x2_t v122;
  float64_t v123;
  float64x2_t v124;
  float64_t v125;
  float64x2_t v126;
  float64_t v127;
  int64x2_t v128;
  __int128 v129;
  float64x2_t v130;
  float64x2_t v131;
  int64x2_t v132;
  double v133[3];
  uint64_t v134;
  double v135;
  double v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  long double v143;
  long double v144;
  long double v145;

  if (!a2)
    return 0;
  objc_msgSend(a2, "transform");
  v135 = 0.0;
  v136 = 0.0;
  v134 = 0;
  sub_100615BEC(&v136, &v135, (double *)&v134, v143, v144, v145);
  v6 = __sincos_stret(a3 * 3.14159265 / -180.0);
  sinval = v6.__sinval;
  v8 = atomic_load((unsigned __int8 *)qword_102308840);
  __asm { FMOV            V0.2D, #1.0 }
  v107 = _Q0;
  if ((v8 & 1) == 0)
  {
    v95 = __cxa_guard_acquire(qword_102308840);
    sinval = v6.__sinval;
    if (v95)
    {
      xmmword_1023087E0 = xmmword_101BAFEE0;
      *(_OWORD *)algn_1023087F0 = 0u;
      xmmword_102308800 = xmmword_101BAFDC0;
      unk_102308810 = 0u;
      xmmword_102308820 = 0uLL;
      xmmword_102308830 = (__int128)v107;
      __cxa_guard_release(qword_102308840);
      sinval = v6.__sinval;
    }
  }
  v106 = -sinval;
  v14 = __sincos_stret(v136 * 3.14159265 / 180.0);
  v13.f64[0] = v14.__sinval;
  v105 = v13;
  v19 = __sincos_stret(v135 * 3.14159265 / 180.0);
  v16.f64[0] = v19.__cosval;
  v15.f64[0] = v19.__sinval;
  v21 = v137;
  v20 = v138;
  v23 = v139;
  v22 = v140;
  v25 = v141;
  v24 = v142;
  v26 = atomic_load((unsigned __int8 *)&qword_1023088C0);
  if ((v26 & 1) == 0)
  {
    v103 = v138;
    v104 = v16;
    v101 = v142;
    v102 = v140;
    v99 = v139;
    v100 = v137;
    v98 = v141;
    v96 = __cxa_guard_acquire(&qword_1023088C0);
    v25 = v98;
    v23 = v99;
    v21 = v100;
    v24 = v101;
    v22 = v102;
    v20 = v103;
    v16.f64[0] = v104.f64[0];
    v15.f64[0] = v19.__sinval;
    if (v96)
    {
      xmmword_102308860 = 0uLL;
      __asm { FMOV            V0.2D, #-1.0 }
      xmmword_102308870 = _Q0;
      xmmword_102308880 = xmmword_101BAFEE0;
      xmmword_102308890 = 0u;
      xmmword_1023088A0 = xmmword_101BAFC90;
      unk_1023088B0 = 0u;
      __cxa_guard_release(&qword_1023088C0);
      v25 = v98;
      v23 = v99;
      v21 = v100;
      v24 = v101;
      v22 = v102;
      v20 = v103;
      v16.f64[0] = v104.f64[0];
      v15.f64[0] = v19.__sinval;
    }
  }
  v27 = 0;
  v28.f64[0] = -v15.f64[0];
  v132 = 0u;
  *(_OWORD *)v133 = 0u;
  v29 = -(v15.f64[0] * v105.f64[0]);
  v15.f64[0] = v14.__cosval * v15.f64[0];
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v115[2] = xmmword_102308800;
  v115[3] = unk_102308810;
  v115[4] = xmmword_102308820;
  v115[5] = xmmword_102308830;
  v115[0] = xmmword_1023087E0;
  v115[1] = *(_OWORD *)algn_1023087F0;
  v30.f64[0] = v6.__cosval;
  v30.f64[1] = v106;
  v18.f64[0] = 0.0;
  do
  {
    v32 = (float64x2_t)v115[v27];
    v31 = (float64x2_t)v115[v27 + 1];
    v33 = (float64x2_t *)((char *)&v116 + v27 * 16);
    *v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v32.f64[0]), (float64x2_t)v6, v32, 1), (float64x2_t)0, v31.f64[0]);
    v33[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v18, v32), v18, v32, 1), v107, v31);
    v27 += 2;
  }
  while (v27 != 6);
  v34 = 0;
  v114[0] = v21;
  v114[1] = v20;
  v114[2] = v23;
  v114[3] = v22;
  v114[4] = v25;
  v114[5] = v24;
  v16.f64[1] = v29;
  v18.f64[1] = v14.__cosval;
  do
  {
    v36 = (float64x2_t)v114[v34];
    v35 = (float64x2_t)v114[v34 + 1];
    v17.f64[0] = v14.__cosval * v16.f64[0];
    v37 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v17, v36), v15, v36, 1), v35, v105);
    v38 = &v114[v34 + 6];
    v28.f64[1] = -(v16.f64[0] * v105.f64[0]);
    *v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v36.f64[0]), v16, v36, 1), v18, v35.f64[0]);
    v38[1] = v37;
    v34 += 2;
  }
  while (v34 != 6);
  v39 = 0;
  v40 = v116;
  v41 = v118;
  v42 = v120;
  v35.f64[0] = v117;
  v36.f64[0] = v119;
  v37.f64[0] = v121;
  *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
  do
  {
    v44 = (float64x2_t)v114[v39 + 6];
    v43 = (float64x2_t)v114[v39 + 7];
    v45 = (float64x2_t *)((char *)&v122 + v39 * 16);
    *v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v44.f64[0]), v41, v44, 1), v42, v43.f64[0]);
    v45[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v35, v44), v36, v44, 1), v43, v37);
    v39 += 2;
  }
  while (v39 != 6);
  v46 = 0;
  v113[2] = xmmword_102308880;
  v113[3] = xmmword_102308890;
  v113[4] = xmmword_1023088A0;
  v113[5] = unk_1023088B0;
  v113[0] = xmmword_102308860;
  v113[1] = xmmword_102308870;
  v47 = v122;
  v48 = v124;
  v49 = v126;
  v35.f64[0] = v123;
  v36.f64[0] = v125;
  v37.f64[0] = v127;
  *(_QWORD *)&v47.f64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
  *(_QWORD *)&v48.f64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  *(_QWORD *)&v49.f64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  do
  {
    v51 = (float64x2_t)v113[v46];
    v50 = (float64x2_t)v113[v46 + 1];
    v52 = (float64x2_t *)&v128.i8[v46 * 16];
    *v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v51.f64[0]), v48, v51, 1), v49, v50.f64[0]);
    v52[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v35, v51), v36, v51, 1), v50, v37);
    v46 += 2;
  }
  while (v46 != 6);
  v53 = *(double *)v128.i64 + v130.f64[1] + v133[0];
  if (v53 >= 0.0)
  {
    v69 = sqrt(v53 + 1.0);
    v70 = v69 + v69;
    v73 = 1.0 / v70 * vsubq_f64(v131, (float64x2_t)vdupq_laneq_s64(v132, 1)).f64[0];
    v74 = (*(double *)v132.i64 - *(double *)&v129) * (1.0 / v70);
    v75 = 1.0 / v70 * vsubq_f64((float64x2_t)vdupq_laneq_s64(v128, 1), v130).f64[0];
    v76 = v70 * 0.25;
  }
  else if (*(double *)v128.i64 < v130.f64[1] || *(double *)v128.i64 < v133[0])
  {
    v55 = sqrt(1.0 - *(double *)v128.i64 - v130.f64[1] + v133[0]);
    v56 = v55 + v55;
    v57 = 1.0 / v56;
    v58 = (*(double *)&v129 + *(double *)v132.i64) * (1.0 / v56);
    v59 = vaddq_f64(v131, (float64x2_t)vdupq_laneq_s64(v132, 1)).f64[0];
    v60 = 1.0 / v56 * v59;
    v61 = (float64x2_t)vdupq_laneq_s64(v128, 1);
    v62 = v56 * 0.25;
    v63 = v57 * vsubq_f64(v61, v130).f64[0];
    v64 = sqrt(v130.f64[1] + 1.0 - *(double *)v128.i64 - v133[0]);
    v65 = v64 + v64;
    v66 = 1.0 / v65 * vaddq_f64(v61, v130).f64[0];
    v67 = 1.0 / v65 * v59;
    if (v130.f64[1] >= v133[0])
      v73 = v66;
    else
      v73 = v58;
    if (v130.f64[1] >= v133[0])
      v74 = v65 * 0.25;
    else
      v74 = v60;
    if (v130.f64[1] >= v133[0])
      v75 = v67;
    else
      v75 = v62;
    if (v130.f64[1] >= v133[0])
      v76 = (*(double *)v132.i64 - *(double *)&v129) * (1.0 / v65);
    else
      v76 = v63;
  }
  else
  {
    v71 = sqrt(*(double *)v128.i64 + 1.0 - v130.f64[1] - v133[0]);
    v72 = v71 + v71;
    v73 = v72 * 0.25;
    v74 = 1.0 / v72 * vaddq_f64((float64x2_t)vdupq_laneq_s64(v128, 1), v130).f64[0];
    v75 = (*(double *)&v129 + *(double *)v132.i64) * (1.0 / v72);
    v76 = 1.0 / v72 * vsubq_f64(v131, (float64x2_t)vdupq_laneq_s64(v132, 1)).f64[0];
  }
  objc_msgSend(a2, "timestamp", v98, v99, v100, v101, v102, v103, *(_OWORD *)&v104);
  *(double *)v78.i64 = v77 * 1000000.0;
  v79 = (unint64_t)*(double *)v78.i64;
  v78.f32[0] = v73;
  *(float *)&v80 = v74;
  *(float *)&v81 = v75;
  v112.i64[0] = __PAIR64__(v80, v78.u32[0]);
  v78.f32[0] = v76;
  v112.i64[1] = __PAIR64__(v78.u32[0], v81);
  sub_10012C97C(&v112, v78);
  v111 = v112;
  v82 = *(unsigned __int16 *)(a1 + 4818);
  v83 = *(unsigned int *)(a1 + 4820);
  v84 = *(unsigned __int16 *)(a1 + 4816);
  if ((_DWORD)v83 == (_DWORD)v82 && *(_QWORD *)(a1 + 4824 + 8 * v84) < v79)
  {
    v85 = v82 + v84 - 1;
    v86 = v85 >= v82 ? *(unsigned __int16 *)(a1 + 4818) : 0;
    if (*(_QWORD *)(a1 + 4824 + 8 * (v85 - v86)) > v79)
    {
      if (v82 >= 2)
      {
        v87 = 1;
        v88 = v79;
        do
        {
          if (v88 >= *(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 4816), v87 - 1)
            && v88 < *(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 4816), v87))
          {
            v108 = (float)(*(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 4816), v87) - v88) * 0.000001;
            v89 = (float32x2_t *)sub_100687A34((unsigned __int16 *)(a1 + 8), v87 - 1);
            v90 = (float32x2_t *)sub_100687A34((unsigned __int16 *)(a1 + 8), v87);
            v91 = v108 * (float)((float)(v89[1].f32[0] + v90[1].f32[0]) * 0.5);
            *(float32x2_t *)v109.f32 = vmul_n_f32(vmul_f32(vadd_f32(*v89, *v90), (float32x2_t)0x3F0000003F000000), v108);
            v109.f32[2] = v91;
            *(double *)v92.i64 = sub_100B61FD0(&v110, v109.f32);
            sub_100B61EC4((uint64_t)&v110, v111.f32, &v109, v92);
            v111 = v109;
            v88 = *(_QWORD *)sub_100B27E9C((unsigned __int16 *)(a1 + 4816), v87);
          }
          ++v87;
        }
        while (v87 < *(unsigned __int16 *)(a1 + 4818));
      }
LABEL_48:
      if ((float32x4_t *)(a1 + 8024) != &v111)
        *(float32x4_t *)(a1 + 8024) = v111;
      *(_DWORD *)(a1 + 8040) = 989432550;
      *(_QWORD *)(a1 + 8048) = v79;
      objc_msgSend(a2, "confidence");
      return v94 >= 0.85;
    }
  }
  v93 = v82 + v84 - 1;
  if (v93 < v83)
    v83 = 0;
  if (*(_QWORD *)(a1 + 8 * (v93 - v83) + 4824) == v79)
    goto LABEL_48;
  if ((float32x4_t *)(a1 + 8024) != &v111)
    *(float32x4_t *)(a1 + 8024) = v112;
  result = 0;
  *(_DWORD *)(a1 + 8040) = 989432550;
  *(_QWORD *)(a1 + 8048) = v79;
  return result;
}

uint64_t sub_100DE9FE4(uint64_t a1, void *a2)
{
  NSObject *v3;
  double v4;
  int v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  int v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  int v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  int v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  _QWORD v33[5];
  double v34;
  uint8_t buf[8];
  _QWORD v36[2];

  *(_QWORD *)a1 = a2;
  sub_1002433B8(a1 + 8);
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x4044000000000000;
  *(_DWORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_101C27550;
  *(_QWORD *)(a1 + 256) = 1;
  *(_QWORD *)(a1 + 264) = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
  *(_QWORD *)(a1 + 272) = 0x3FC3333333333333;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x406A400000000000;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v3 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v36[0]) = 2082;
    *(_QWORD *)((char *)v36 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Constructor\"}", buf, 0x12u);
  }
  sub_1001E4804(buf);
  v4 = *(double *)(a1 + 88);
  v34 = 0.0;
  v5 = sub_1001FD98C(*(uint64_t *)buf, "MinimumDistanceForRayTracingTileQuery", &v34);
  v6 = v34;
  if (!v5)
    v6 = v4;
  *(double *)(a1 + 88) = v6;
  v7 = (std::__shared_weak_count *)v36[0];
  if (v36[0])
  {
    v8 = (unint64_t *)(v36[0] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  CLMotionActivity::init((CLMotionActivity *)(a1 + 96));
  sub_1001E4804(buf);
  v10 = *(_BYTE *)(a1 + 232);
  LOBYTE(v34) = 0;
  v11 = sub_1001E4874(*(uint64_t *)buf, "EnableRavenBuildingDataAndRayTracingTileQueryForOnlyPedestrianActivity", (BOOL *)&v34);
  v12 = LOBYTE(v34);
  if (!v11)
    v12 = v10;
  *(_BYTE *)(a1 + 232) = v12;
  v13 = (std::__shared_weak_count *)v36[0];
  if (v36[0])
  {
    v14 = (unint64_t *)(v36[0] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_1001E4804(buf);
  v16 = *(_BYTE *)(a1 + 233);
  LOBYTE(v34) = 0;
  v17 = sub_1001E4874(*(uint64_t *)buf, "EnableRayTracingTileQueryInNonDUSignalEnvironment", (BOOL *)&v34);
  v18 = LOBYTE(v34);
  if (!v17)
    v18 = v16;
  *(_BYTE *)(a1 + 233) = v18;
  v19 = (std::__shared_weak_count *)v36[0];
  if (v36[0])
  {
    v20 = (unint64_t *)(v36[0] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_1001E4804(buf);
  v22 = *(_BYTE *)(a1 + 234);
  LOBYTE(v34) = 0;
  v23 = sub_1001E4874(*(uint64_t *)buf, "UseCLRayTracingTileManager", (BOOL *)&v34);
  v24 = LOBYTE(v34);
  if (!v23)
    v24 = v22;
  *(_BYTE *)(a1 + 234) = v24;
  v25 = (std::__shared_weak_count *)v36[0];
  if (v36[0])
  {
    v26 = (unint64_t *)(v36[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    v24 = *(_BYTE *)(a1 + 234);
  }
  if (!v24)
  {
    v28 = objc_msgSend(objc_alloc((Class)GEOMapFeatureAccess), "initWithQueue:", objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "queue"));
    *(_QWORD *)(a1 + 360) = v28;
    if (v28)
    {
      objc_msgSend(v28, "setAllowStaleData:", 1);
      objc_msgSend(*(id *)(a1 + 360), "setAllowNetworkTileLoad:", 1);
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v29 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v36[0]) = 2082;
        *(_QWORD *)((char *)v36 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Constructor,failed to create fGEOMapFeatureAccess\"}", buf, 0x12u);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
      }
      v30 = qword_1022A00A8;
      if (os_signpost_enabled((os_log_t)qword_1022A00A8))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        LOWORD(v36[0]) = 2082;
        *(_QWORD *)((char *)v36 + 2) = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,Constructor,failed to create fGEOMapFeatureAccess", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Constructor,failed to create fGEOMapFeatureAccess\"}", buf, 0x12u);
      }
    }
  }
  v31 = *(void **)(a1 + 264);
  if (v31)
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100DEA58C;
    v33[3] = &unk_10212ECA0;
    v33[4] = a1;
    objc_msgSend(v31, "setHandler:", v33);
    v31 = *(void **)(a1 + 264);
  }
  objc_msgSend(v31, "setNextFireDelay:", 1.79769313e308);
  sub_10001BB9C((_QWORD *)(a1 + 376));
  sub_10001BB9C((_QWORD *)(a1 + 416));
  return a1;
}

void sub_100DEA50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v11;
  void *v12;
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  v11 = *(std::__shared_weak_count **)(v7 + 464);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  sub_100067AC4(v9);
  sub_100067AC4(v8);
  v12 = *(void **)(v7 + 328);
  if (v12)
  {
    *(_QWORD *)(v7 + 336) = v12;
    operator delete(v12);
  }
  if (*(char *)(v7 + 327) < 0)
    operator delete(*(void **)(v7 + 304));
  sub_100259608((void ***)va);
  _Unwind_Resume(a1);
}

id sub_100DEA58C(uint64_t a1)
{
  id *v1;
  NSObject *v2;
  id v3;
  _QWORD v5[5];
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;

  v1 = *(id **)(a1 + 32);
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"HandleSerializeAndSendTimer\"}", buf, 0x12u);
  }
  v3 = objc_msgSend(*v1, "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100DEA6A4;
  v5[3] = &unk_10212ECA0;
  v5[4] = v1;
  return objc_msgSend(v3, "async:", v5);
}

void sub_100DEA6A4(uint64_t a1)
{
  sub_100DEA6AC(*(_QWORD *)(a1 + 32));
}

void sub_100DEA6AC(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,HandleSerializeAndSendTimer\"}", buf, 0x12u);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 464);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 456);
      if (v5)
      {
        sub_100C8C810(v5);
LABEL_15:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,localRCSharedPtr,null\"}", buf, 0x12u);
  }
  if (v4)
    goto LABEL_15;
}

void sub_100DEA874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100DEA88C(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 68289026;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Destructor\"}", (uint8_t *)&v6, 0x12u);
  }
  sub_100DEA9C8(a1);
  v3 = *(std::__shared_weak_count **)(a1 + 464);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  sub_100067AC4(a1 + 416);
  sub_100067AC4(a1 + 376);
  v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(_QWORD *)(a1 + 336) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  v6 = a1 + 280;
  sub_100259608((void ***)&v6);
  return a1;
}

void sub_100DEA9BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_100DEA9C8(uint64_t a1)
{
  NSObject *v2;
  id *v3;
  id *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Reset\"}", buf, 0x12u);
  }
  v3 = *(id **)(a1 + 328);
  v4 = *(id **)(a1 + 336);
  if (v3 != v4)
  {
    do
    {

      *v3++ = 0;
    }
    while (v3 != v4);
    v3 = *(id **)(a1 + 328);
  }
  *(_QWORD *)(a1 + 336) = v3;
  v5 = *(void **)(a1 + 352);
  if (v5)
  {

    *(_QWORD *)(a1 + 352) = 0;
  }
  v6 = *(void **)(a1 + 264);
  if (v6)
  {
    objc_msgSend(v6, "invalidate");

    *(_QWORD *)(a1 + 264) = 0;
  }
  if (*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 80))
    *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 235) = 0;
  sub_100259648((uint64_t *)(a1 + 280));
  if (*(char *)(a1 + 327) < 0)
  {
    **(_BYTE **)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 304) = 0;
    *(_BYTE *)(a1 + 327) = 0;
  }
  *(_DWORD *)(a1 + 260) = 0;
  if (*(_QWORD *)(a1 + 360))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102188720);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,CLRavenRayTracingTileClient::Reset()", buf, 2u);
    }
    v8 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102188720);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGCZ,destroy geocodec malloc zone,CLRavenRayTracingTileClient::Reset()", v12, 2);
      v11 = (uint8_t *)v10;
      v8 = sub_100512490("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::Reset()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    GEOResetGeoCodecsAllocator(v8);

    *(_QWORD *)(a1 + 360) = 0;
  }
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
  sub_10001BB9C((_QWORD *)(a1 + 376));
  return sub_10001BB9C((_QWORD *)(a1 + 416));
}

BOOL sub_100DEACC0(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  _BOOL8 result;
  const char *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  NSObject *v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  _BOOL4 v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 68289026;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded\"}", (uint8_t *)&v22, 0x12u);
  }
  v5 = sub_1001FCBB4();
  if (*(_BYTE *)(a1 + 235))
  {
    v6 = v5;
    v7 = *(double *)(a1 + 248);
    if (v7 > v6 || v6 - v7 > *(double *)(a1 + 240))
    {
      *(_BYTE *)(a1 + 235) = 0;
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v8 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 248);
        v22 = 68289538;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2050;
        v27 = v9;
        v28 = 2050;
        v29 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,Query Timeout\", \"fQueryTimestampMCT\":\"%{public}f\", \"currentMCTTime\":\"%{public}f\"}", (uint8_t *)&v22, 0x26u);
      }
    }
    if (*(_BYTE *)(a1 + 235))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v10 = qword_1022A00A8;
      v11 = os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v11)
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v13 = "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,QueryInProgress\"}";
LABEL_47:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v22, 0x12u);
        return 0;
      }
      return result;
    }
  }
  if (!*(_BYTE *)(a1 + 233) && (*(_DWORD *)(a1 + 260) - 3) >= 2)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v10 = qword_1022A00A8;
    v21 = os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v21)
    {
      v22 = 68289026;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v13 = "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,QueryRejectedInSigEnv\"}";
      goto LABEL_47;
    }
    return result;
  }
  v14 = (int *)(a1 + 96);
  if (!*(_DWORD *)(a1 + 96)
    || (CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 96)) & 1) != 0
    || (CLMotionActivity::isRunning((CLMotionActivity *)(a1 + 96)) & 1) != 0
    || (v15 = *v14, *v14 == 3)
    || v15 == 11805
    || v15 == 90603
    || !*(_BYTE *)(a1 + 232))
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v20 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,FirstQuery\"}", (uint8_t *)&v22, 0x12u);
      }
      return 1;
    }
    *(long double *)(a1 + 48) = sub_10011E634((double *)(a1 + 8), *a2, a2[1], *(double *)(a1 + 64), *(double *)(a1 + 72), 0.0);
    *(_BYTE *)(a1 + 56) = 1;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v17 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 56))
        goto LABEL_49;
      v18 = *(_QWORD *)(a1 + 48);
      v19 = *(double *)(a1 + 88);
      v22 = 68289538;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2050;
      v27 = v18;
      v28 = 2050;
      v29 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded\", \"DistanceFromLastQuery\":\"%{public}f\", \"MinimumDistanceThreshold\":\"%{public}f\"}", (uint8_t *)&v22, 0x26u);
    }
    if (*(_BYTE *)(a1 + 56))
      return *(double *)(a1 + 48) >= *(double *)(a1 + 88);
LABEL_49:
    sub_10028DF3C();
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v10 = qword_1022A00A8;
  v16 = os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v16)
  {
    v22 = 68289026;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v13 = "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,isNonPedestrian\"}";
    goto LABEL_47;
  }
  return result;
}

uint64_t sub_100DEB1E0(uint64_t result)
{
  *(_BYTE *)(result + 235) = 0;
  return result;
}

void sub_100DEB1E8(uint64_t a1, double *a2, uint64_t *a3)
{
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,QueryRayTracingTile\"}", (uint8_t *)&v14, 0x12u);
  }
  if (sub_100DEACC0(a1, a2))
  {
    *(_BYTE *)(a1 + 235) = 1;
    *(double *)(a1 + 248) = sub_1001FCBB4();
    v7 = *(std::__shared_weak_count **)(a1 + 464);
    if (!v7 || v7->__shared_owners_ == -1)
    {
      v9 = *a3;
      v8 = a3[1];
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v7 = *(std::__shared_weak_count **)(a1 + 464);
      }
      *(_QWORD *)(a1 + 456) = v9;
      *(_QWORD *)(a1 + 464) = v8;
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
    }
    v12 = *(unsigned __int8 *)(a1 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
    if (!v12)
      *(_BYTE *)(a1 + 80) = 1;
    if (*(_BYTE *)(a1 + 234))
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLRayTracingTileManager")), "requestRTTiles:longitude:numberOfTiles:", *(unsigned int *)(a1 + 256), *a2, a2[1]);
    else
      sub_100DEB410(a1, a2);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v13 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,QueryRayTracingTile,IsQueryNeeded,FALSE\"}", (uint8_t *)&v14, 0x12u);
    }
  }
}

void sub_100DEB410(uint64_t a1, double *a2)
{
  _QWORD *v4;
  void *v5;
  double v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;

  v4 = (_QWORD *)(a1 + 376);
  sub_1000A6464(a1 + 416, (uint64_t *)(a1 + 376));
  sub_10001BB9C(v4);
  if (*(_QWORD *)(a1 + 360))
  {
    v5 = objc_autoreleasePoolPush();
    v12[4] = a1;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100DEB6D4;
    v13[3] = &unk_1021886E0;
    v13[4] = a1;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100DEC578;
    v12[3] = &unk_102130FC8;
    v7 = *(_QWORD *)a2;
    v6 = a2[1];
    objc_msgSend(*(id *)(a1 + 360), "findRaytracingDataNear:radius:handler:completionHandler:", v13, v12, *a2, v6, *(double *)(a1 + 368));
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v8 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 368);
      *(_DWORD *)buf = 68289795;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2049;
      v19 = v7;
      v20 = 2049;
      v21 = v6;
      v22 = 2049;
      v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GEORayTracingTileQuery,generated\", \"QueryLat\":\"%{private}f\", \"QueryLon\":\"%{private}f\", \"QueryRadius_m\":\"%{private}f\"}", buf, 0x30u);
    }
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    *(_BYTE *)(a1 + 235) = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v10 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fGEOMapFeatureAccess null\"}", buf, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
    }
    v11 = qword_1022A00A8;
    if (os_signpost_enabled((os_log_t)qword_1022A00A8))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,fGEOMapFeatureAccess null", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fGEOMapFeatureAccess null\"}", buf, 0x12u);
    }
  }
}

void sub_100DEB6D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  char v9;
  NSObject *v10;
  uint8_t *v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t *v15;
  NSObject *v16;
  uint8_t *v17;
  double v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint8_t buf[4];
  unint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rayTracingTileGEOHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    LOWORD(v23) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenRayTracingTileClient,rayTracingTileGEOHandler", &v23, 2);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (a2)
  {
    v5 = objc_msgSend(a2, "boundingBox");
    v6 = v5;
    if (v5 && *(_BYTE *)(v3 + 80))
    {
      v5 = objc_msgSend(v5, "containsCoordinate:", *(double *)(v3 + 64), *(double *)(v3 + 72));
      v7 = (int)v5;
    }
    else
    {
      v7 = 0;
    }
    v23 = sub_100DEBE28((uint64_t)v5, v6);
    v24 = v8;
    if ((_BYTE)v8)
    {
      sub_1008A2874(v3 + 376, &v23, &v23);
      if ((v9 & 1) == 0)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        v10 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
        {
          if (!(_BYTE)v24)
            goto LABEL_70;
          *(_DWORD *)buf = 134283521;
          v28 = v23;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,Repeated rt tile files found in the rt tiles query,tile_id,%{private}llu", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 0))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        if ((_BYTE)v24)
        {
          v25 = 134283521;
          v26 = v23;
          LODWORD(v22) = 12;
          v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLRavenRayTracingTileClient,Repeated rt tile files found in the rt tiles query,tile_id,%{private}llu", &v25, v22, v23);
LABEL_39:
          v15 = v11;
          sub_100512490("Generic", 1, 0, 0, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n", v12);
          goto LABEL_40;
        }
        goto LABEL_70;
      }
      if (!(_BYTE)v24)
        goto LABEL_70;
      if (sub_100DED428((_QWORD *)(v3 + 416), &v23))
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        v16 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          if (!(_BYTE)v24)
            goto LABEL_70;
          *(_DWORD *)buf = 134283521;
          v28 = v23;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rt tiles dropped,%{private}llu", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        if ((_BYTE)v24)
        {
          v25 = 134283521;
          v26 = v23;
          LODWORD(v22) = 12;
          v18 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenRayTracingTileClient,rt tiles dropped,%{private}llu", &v25, v22);
LABEL_69:
          v15 = v17;
          sub_100512490("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n", v18);
LABEL_40:
          if (v15 != buf)
            free(v15);
          return;
        }
      }
      else
      {
        sub_100DEC164(v3, a2, v7);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        v19 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          if (!(_BYTE)v24)
            goto LABEL_70;
          *(_DWORD *)buf = 134283521;
          v28 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rt tiles added,%{private}llu", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        if ((_BYTE)v24)
        {
          v25 = 134283521;
          v26 = v23;
          LODWORD(v22) = 12;
          v18 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenRayTracingTileClient,rt tiles added,%{private}llu", &v25, v22);
          goto LABEL_69;
        }
      }
LABEL_70:
      sub_10028DF3C();
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v14 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient, Could not compute geo hash ID for the rt tile using its reported bounding box", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      LOWORD(v25) = 0;
      LODWORD(v22) = 2;
      v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLRavenRayTracingTileClient, Could not compute geo hash ID for the rt tile using its reported bounding box", &v25, v22, v23);
      goto LABEL_39;
    }
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v13 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,rayTracingTileGEOHandler,null geoRayTracingTile", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      LOWORD(v23) = 0;
      LODWORD(v22) = 2;
      v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLRavenRayTracingTileClient,rayTracingTileGEOHandler,null geoRayTracingTile", &v23, v22, v23);
      goto LABEL_39;
    }
  }
}

unint64_t sub_100DEBE28(uint64_t a1, void *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint8_t *v19;
  _QWORD v20[2];
  uint8_t buf[1640];

  if (!a2)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v17 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,rt tile bounding box is nil to generate tile centroid geo hash ID", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_22;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLRavenRayTracingTileClient,rt tile bounding box is nil to generate tile centroid geo hash ID", v20, 2, v20[0]);
    goto LABEL_27;
  }
  if (!objc_msgSend(a2, "hasSouthLat")
    || !objc_msgSend(a2, "hasNorthLat")
    || !objc_msgSend(a2, "hasEastLng")
    || (objc_msgSend(a2, "hasWestLng") & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v15 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,rt tile bounding box is not populated correctly to generate tile centroid geo hash ID", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_22;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "CLRavenRayTracingTileClient,rt tile bounding box is not populated correctly to generate tile centroid geo hash ID", v20, 2, v20[0]);
LABEL_27:
    v19 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "std::optional<uint64_t> CLRavenRayTracingTileClient::ComputeTileCentroidGeoHashID(const GEOMapRegion *) const", "%s\n", v16);
    if (v19 != buf)
      free(v19);
LABEL_22:
    v14 = 0;
    v13 = 0;
    return v13 | v14;
  }
  objc_msgSend(a2, "southLat");
  v4 = v3;
  objc_msgSend(a2, "northLat");
  v6 = (v4 + v5) * 0.5;
  objc_msgSend(a2, "westLng");
  v8 = v7;
  objc_msgSend(a2, "eastLng");
  v10 = (v8 + v9) * 0.5;
  v11 = 360.0;
  if (v10 >= 0.0)
    v11 = 0.0;
  v12 = vcvtad_u64_f64((v10 + v11) * 1000000.0);
  v13 = v12 & 0xFFFFFFFFFFFFFF00 | (vcvtad_u64_f64((v6 + 90.0) * 1000000.0) << 32);
  v14 = v12;
  return v13 | v14;
}

void sub_100DEC164(uint64_t a1, void *a2, int a3)
{
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  double v28;
  int v29;
  int v30;
  __int16 v31;
  const char *v32;

  if (a2)
  {
    v6 = a2;
    if (a3)
    {
      v7 = qword_1022A00A0;
      if (*(_QWORD *)(a1 + 352))
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_102188700);
        v8 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
        {
          v29 = 68289026;
          v30 = 0;
          v31 = 2082;
          v32 = "";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,second current tile received\"}", (uint8_t *)&v29, 0x12u);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_102188700);
        }
        v9 = qword_1022A00A8;
        if (os_signpost_enabled((os_log_t)qword_1022A00A8))
        {
          v29 = 68289026;
          v30 = 0;
          v31 = 2082;
          v32 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,AddTile,second current tile received", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,second current tile received\"}", (uint8_t *)&v29, 0x12u);
        }
        if (*(_QWORD *)(a1 + 352))
          goto LABEL_12;
        v7 = qword_1022A00A0;
      }
      if (v7 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v26 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v29 = 68289026;
        v30 = 0;
        v31 = 2082;
        v32 = "";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,received current tile\"}", (uint8_t *)&v29, 0x12u);
      }
      *(_QWORD *)(a1 + 352) = a2;
      goto LABEL_42;
    }
LABEL_12:
    v11 = *(_QWORD **)(a1 + 336);
    v10 = *(_QWORD *)(a1 + 344);
    if ((unint64_t)v11 >= v10)
    {
      v15 = *(_QWORD *)(a1 + 328);
      v16 = ((uint64_t)v11 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_100259694();
      v17 = v10 - v15;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)sub_10025E6A0(a1 + 344, v19);
      else
        v20 = 0;
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *(_QWORD *)v21 = a2;
      v12 = v21 + 8;
      v24 = *(char **)(a1 + 328);
      v23 = *(char **)(a1 + 336);
      if (v23 != v24)
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v21 - 1) = v25;
          v21 -= 8;
        }
        while (v23 != v24);
        v23 = *(char **)(a1 + 328);
      }
      *(_QWORD *)(a1 + 328) = v21;
      *(_QWORD *)(a1 + 336) = v12;
      *(_QWORD *)(a1 + 344) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v11 = a2;
      v12 = v11 + 1;
    }
    *(_QWORD *)(a1 + 336) = v12;
LABEL_42:
    v27 = *(void **)(a1 + 264);
    if (v27)
    {
      objc_msgSend(v27, "nextFireDelay");
      if (v28 > *(double *)(a1 + 272))
        sub_100DECF3C(a1);
    }
    return;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v13 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
  {
    v29 = 68289026;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,null pointer\"}", (uint8_t *)&v29, 0x12u);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
  }
  v14 = qword_1022A00A8;
  if (os_signpost_enabled((os_log_t)qword_1022A00A8))
  {
    v29 = 68289026;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,AddTile,null pointer", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,null pointer\"}", (uint8_t *)&v29, 0x12u);
  }
}

void sub_100DEC578(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rayTracingTileGEOCompletionHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLRavenRayTracingTileClient,rayTracingTileGEOCompletionHandler", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a2)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(a2, "code");
      v7 = objc_msgSend(objc_msgSend(a2, "domain"), "UTF8String");
      v8 = objc_msgSend(objc_msgSend(a2, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 68289795;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = v6;
      v18 = 2082;
      v19 = v7;
      v20 = 2081;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,#Warning rayTracingTileGEOCompletionHandler\", \"error\":%{public}lld, \"domain\":%{public, location:escape_only}s, \"description\":%{private, location:escape_only}s}", buf, 0x30u);
    }
  }
  *(_BYTE *)(v3 + 235) = 0;
}

__n128 sub_100DEC7E4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)(a1 + 96) = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 160) = v4;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 208) = v7;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_100DEC818(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 260);
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = v5;
    v11 = 1026;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,SetSignalEnvironmentType\", \"OldSigEnv\":%{public}d, \"NewSigEnv\":%{public}d}", (uint8_t *)v6, 0x1Eu);
  }
  *(_DWORD *)(a1 + 260) = a2;
}

uint64_t sub_100DEC918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void **v6;
  NSObject *v7;
  void *v8;
  unint64_t v9;
  uint64_t result;
  NSObject *v11;
  _BOOL4 v12;
  _BYTE v13[28];
  __int16 v14;
  unint64_t v15;

  v2 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 280) != v2)
  {
    if (*(char *)(a1 + 327) < 0)
    {
      if (*(_QWORD *)(a1 + 312))
        goto LABEL_4;
    }
    else if (*(_BYTE *)(a1 + 327))
    {
LABEL_4:
      sub_1003625F4((const void **)(a1 + 304), (const void **)(v2 - 24), (uint64_t)v13);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = *(_OWORD *)v13;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&v13[16];
      v5 = *(_QWORD *)(a1 + 288);
      v6 = (void **)(v5 - 24);
      if (*(char *)(v5 - 1) < 0)
        operator delete(*v6);
      *(_QWORD *)(a1 + 288) = v6;
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v7 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v8 = (void *)a2;
        else
          v8 = *(void **)a2;
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3);
        *(_QWORD *)v13 = 68289538;
        *(_WORD *)&v13[8] = 2082;
        *(_QWORD *)&v13[10] = "";
        *(_WORD *)&v13[18] = 2082;
        *(_QWORD *)&v13[20] = v8;
        v14 = 2050;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GetNextTile\", \"TileFilePathName\":%{public, location:escape_only}s, \"NumberOfTilesInList\":%{public}ld}", v13, 0x26u);
      }
      return 1;
    }
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v11 = qword_1022A00A8;
  v12 = os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v12)
  {
    *(_QWORD *)v13 = 68289026;
    *(_WORD *)&v13[8] = 2082;
    *(_QWORD *)&v13[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GetNextTile,no tile\"}", v13, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_100DECB48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  _BOOL4 v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  v2 = a1[42];
  v3 = a1[44];
  if (a1[41] != v2)
  {
    if (!v3)
    {
      *a2 = *(_QWORD *)(v2 - 8);
      a1[42] -= 8;
      return 1;
    }
LABEL_5:
    *a2 = v3;
    a1[44] = 0;
    return 1;
  }
  if (v3)
    goto LABEL_5;
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v5 = qword_1022A00A8;
  v6 = os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v6)
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GetNextTile,no tile\"}", (uint8_t *)v7, 0x12u);
    return 0;
  }
  return result;
}

void sub_100DECC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  std::string *v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3);
    v14 = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2050;
    v19 = v7;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddListOfTileFiles\", \"NumberOfNewTileFiles\":%{public}ld, \"NumberOfExistingTileFiles\":%{public}ld}", (uint8_t *)&v14, 0x26u);
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    if (v9)
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(_QWORD *)(a1 + 312))
        {
LABEL_12:
          v10 = (uint64_t *)(a1 + 280);
          v11 = *(std::string **)(a1 + 288);
          if (*(std::string **)(a1 + 280) == v11)
          {
            if (v10 != (uint64_t *)a2)
              sub_101892BBC((uint64_t)v10, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
          }
          else
          {
            sub_100DED4DC(v10, v11, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
          }
          return;
        }
      }
      else if (*(_BYTE *)(a1 + 327))
      {
        goto LABEL_12;
      }
      std::string::operator=((std::string *)(a1 + 304), (const std::string *)a3);
      goto LABEL_12;
    }
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102188700);
  v12 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddListOfTileFiles,insufficient information\"}", (uint8_t *)&v14, 0x12u);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
  }
  v13 = qword_1022A00A8;
  if (os_signpost_enabled((os_log_t)qword_1022A00A8))
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,AddListOfTileFiles,insufficient information", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddListOfTileFiles,insufficient information\"}", (uint8_t *)&v14, 0x12u);
  }
}

void sub_100DECF3C(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 264))
  {
    if (*(_BYTE *)(a1 + 234))
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v2 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3);
        v11 = 68289282;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2050;
        v16 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ScheduleNextSerializeAndSend\", \"SizeOfListOfTileFiles\":%{public}ld}", (uint8_t *)&v11, 0x1Cu);
      }
      v4 = *(_QWORD *)(a1 + 280);
      v5 = *(_QWORD *)(a1 + 288);
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
      v8 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 3;
        v11 = 68289282;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2050;
        v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ScheduleNextSerializeAndSend\", \"SizeOfListOfTileFiles\":%{public}ld}", (uint8_t *)&v11, 0x1Cu);
      }
      v4 = *(_QWORD *)(a1 + 328);
      v5 = *(_QWORD *)(a1 + 336);
    }
    if (v4 == v5)
      v10 = 1.79769313e308;
    else
      v10 = *(double *)(a1 + 272);
    objc_msgSend(*(id *)(a1 + 264), "setNextFireDelay:", v10);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v6 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fSerializeAndSendScheduleTimer null\"}", (uint8_t *)&v11, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
    }
    v7 = qword_1022A00A8;
    if (os_signpost_enabled((os_log_t)qword_1022A00A8))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,fSerializeAndSendScheduleTimer null", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fSerializeAndSendScheduleTimer null\"}", (uint8_t *)&v11, 0x12u);
    }
  }
}

void sub_100DED22C(uint64_t a1, void *a2)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  __int16 v6;
  const char *v7;

  if (a2)
  {

  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102188700);
    v2 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      v4 = 68289026;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ReleaseTile,null pointer\"}", (uint8_t *)&v4, 0x12u);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_102188700);
    }
    v3 = qword_1022A00A8;
    if (os_signpost_enabled((os_log_t)qword_1022A00A8))
    {
      v4 = 68289026;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,ReleaseTile,null pointer", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ReleaseTile,null pointer\"}", (uint8_t *)&v4, 0x12u);
    }
  }
}

uint64_t sub_100DED3C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 234);
}

void sub_100DED3D0(id a1)
{
  qword_1022A00A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

void sub_100DED3FC(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

_QWORD *sub_100DED428(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

std::string *sub_100DED4DC(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        a1[1] = (uint64_t)sub_10028E070(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_10028EBD4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_10028EE04(a3, (std::string *)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_1002596A8(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      sub_10028EC40(&v23, (__int128 *)a3, a5);
      v5 = (std::string *)sub_10028ECD0((uint64_t)a1, &v23, (__int128 *)v5);
      sub_100074DB8((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_100DED67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DED69C()
{
  sub_1015A2E04(qword_1023088C8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023088C8, (void *)&_mh_execute_header);
}

void sub_100DED784(id a1)
{
  qword_1023088F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSkiNotifierSilo"));
}

void sub_100DED9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DEDA54(id a1)
{
  if (sub_100C1DCF8())
  {
    sub_100197040();
    if (sub_100195F08())
    {
      sub_100197040();
      if ((sub_1001B7910() & 0x400000000) != 0)
        byte_102308908 = 1;
    }
  }
}

void sub_100DEDA90(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100DEDABC()
{
  sub_1015A2E04(qword_1023088E0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023088E0, (void *)&_mh_execute_header);
}

void sub_100DEDB00(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onForcedLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100DEDC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100DEDC24(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onCompanionConnectionNotification:data:", v4, v12);
}

void sub_100DEE2E0()
{
  operator delete();
}

BOOL sub_100DEE3D8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021887A0);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from Wifi notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021887A0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "unsubscribing from Wifi notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerAbsoluteAltimeter setupTimers]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 8), 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 0;
  return sub_100E3E6F0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));
}

BOOL sub_100DEE5A8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021887A0);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from GPS notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021887A0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "unsubscribing from GPS notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLContextManagerAbsoluteAltimeter setupTimers]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 8), 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 81) = 0;
  return sub_100E3E6F0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120));
}

void sub_100DEF290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100261F44((uint64_t)&a18);
  sub_1006F0FB8(&a26);
  _Unwind_Resume(a1);
}

void sub_100DEF8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100DF0FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_1006F0FB8((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_100DF1710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_100DF1D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8(va1);
  _Unwind_Resume(a1);
}

void sub_100DF2D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100DF3344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100DF3674(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100DF36A0()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C27598;
      v1[3] = unk_101C275A8;
      v1[4] = xmmword_101C275B8;
      v1[0] = xmmword_101C27578;
      v1[1] = unk_101C27588;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100DF3774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF378C()
{
  sub_1015A2E04(qword_102308918, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308918, (void *)&_mh_execute_header);
}

void sub_100DF38D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

BOOL sub_100DF3918(double *a1, double *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  double v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  double *v17;
  double *v18;
  double v19;
  int v20;
  uint64_t v21;
  double v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  double v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL8 result;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  double *v33;
  double v34;
  double v35;
  long double v36;
  long double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  NSObject *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  double __y[2];
  uint8_t buf[8];

  if (!*a3)
    return 0;
  sub_100349198(a1, a3);
  v6 = *a1;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v6 == 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
    }
    v10 = 0.0;
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_44;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", __y, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v13);
    goto LABEL_83;
  }
  v9 = (*(_QWORD *)(*(_QWORD *)&v6 + 144) - *(_QWORD *)(*(_QWORD *)&v6 + 136)) >> 4;
  if ((int)v9 <= 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
    }
    v10 = 0.0;
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", __y, 2);
    v14 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v16);
    goto LABEL_83;
  }
  v10 = 0.0;
  if ((_DWORD)v9 == 1)
  {
    v11 = 1;
    goto LABEL_45;
  }
  sub_1004078E0(*(_QWORD **)&v6);
  if ((_DWORD)v9 - 1 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v6 + 168) - *(_QWORD *)(*(_QWORD *)&v6 + 160)) >> 3)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", __y, 2);
    v14 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v58);
    goto LABEL_83;
  }
  sub_1004078E0(*(_QWORD **)&v6);
  v17 = *(double **)(*(_QWORD *)&v6 + 160);
  v18 = *(double **)(*(_QWORD *)&v6 + 168);
  if (v17 != v18)
  {
    v19 = 0.0;
    v20 = 2;
    v21 = 24;
    while (1)
    {
      v22 = *v17 / *(double *)(*(_QWORD *)&v6 + 40);
      if (vabdd_f64(0.5, v19 + v22) < 0.000001)
        break;
      if (v19 + v22 > 0.5)
      {
        v44 = (double *)(*(_QWORD *)(*(_QWORD *)&v6 + 136) + v21);
        v46 = *(v44 - 3);
        v45 = *(v44 - 2);
        v47 = *(v44 - 1);
        v48 = sub_1010B9110(v45, *v44);
        v49 = (0.5 - v19) / v22;
        sub_100080DCC(v45 + v48 * v49);
        v26 = v50;
        v51 = (double *)(*(_QWORD *)(*(_QWORD *)&v6 + 136) + v21);
        v52 = *(v51 - 3);
        v53 = *(v51 - 2);
        v54 = *(v51 - 1);
        v55 = *v51;
        *(double *)buf = 0.0;
        v60 = 0;
        __y[0] = 0.0;
        sub_10011E780(a2, (double *)buf, __y, (double *)&v60, v52, v53, 0.0, v54, v55, 0.0);
        v10 = v46 + (v47 - v46) * v49;
        goto LABEL_70;
      }
      ++v17;
      v21 += 16;
      ++v20;
      v19 = v19 + v22;
      if (v17 == v18)
        goto LABEL_31;
    }
    if (v20 < (int)v9)
    {
      v33 = (double *)(*(_QWORD *)(*(_QWORD *)&v6 + 136) + v21);
      v10 = *(v33 - 1);
      v26 = *v33;
      v34 = *(v33 - 3);
      v35 = *(v33 - 2);
      *(double *)buf = 0.0;
      v60 = 0;
      __y[0] = 0.0;
      sub_10011E780(a2, (double *)buf, __y, (double *)&v60, v34, v35, 0.0, v10, v26, 0.0);
      v36 = __y[0];
      v37 = *(double *)buf;
      v38 = *(_QWORD *)(*(_QWORD *)&v6 + 136) + v21;
      v39 = *(double *)(v38 + 8);
      v40 = *(double *)(v38 + 16);
      *(double *)buf = 0.0;
      v60 = 0;
      __y[0] = 0.0;
      sub_10011E780(a2, (double *)buf, __y, (double *)&v60, v10, v26, 0.0, v39, v40, 0.0);
      v41 = atan2(v36, v37);
      if (v41 < 0.0)
        v41 = v41 + 6.28318531;
      v42 = v41 * 57.2957795;
      v43 = atan2(__y[0], *(long double *)buf);
      if (v43 < 0.0)
        v43 = v43 + 6.28318531;
      sub_100512AA0(v42, v43 * 57.2957795);
LABEL_70:
      v11 = 1;
      if (v5)
        goto LABEL_46;
      goto LABEL_50;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    v56 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
    }
    v10 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
      LOWORD(__y[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", __y, 2);
      v14 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v57);
      goto LABEL_83;
    }
    goto LABEL_44;
  }
LABEL_31:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
  v23 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", __y, 2);
    v14 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v24);
LABEL_83:
    if (v14 != buf)
      free(v14);
  }
LABEL_44:
  v11 = 0;
LABEL_45:
  v26 = 0.0;
  if (v5)
  {
LABEL_46:
    v27 = (unint64_t *)&v5->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_50:
  if ((v11 & 1) != 0)
  {
    a1[3] = v10;
    a1[4] = v26;
    return 1;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
  v30 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "CLTSP,Unable to find mid-point", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    LOWORD(__y[0]) = 0;
    LODWORD(v59) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,Unable to find mid-point", __y, v59);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteRoad::initialize(CLDistanceCalc &, const CLMapRoadPtr)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
    return 0;
  }
  return result;
}

void sub_100DF4304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF4320(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t result;
  int v6;
  int v7;

  v3 = *a2;
  if (!v3)
    return 0;
  result = *a1;
  if (result)
  {
    if (*(_BYTE *)(result + 116)
      || (~*(_DWORD *)(result + 108) & 0x7FFFFFFF) == 0
      || *(_BYTE *)(result + 117)
      || (~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0
      || *(_BYTE *)(*v3 + 116))
    {
      return sub_1004089D0(result, v3);
    }
    else
    {
      v6 = *(_DWORD *)(*v3 + 108);
      result = sub_1004089D0(result, v3);
      if ((_DWORD)result && (v6 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        v7 = *(_DWORD *)(**a2 + 108);
        return *(_DWORD *)(*a1 + 108) == v7 || *(_DWORD *)(*a1 + 112) == v7;
      }
    }
  }
  return result;
}

uint64_t sub_100DF43F4(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t result;
  int v6;
  int v7;

  v3 = *a2;
  if (!v3)
    return 0;
  result = *a1;
  if (result)
  {
    if (*(_BYTE *)(result + 116)
      || (~*(_DWORD *)(result + 108) & 0x7FFFFFFF) == 0
      || *(_BYTE *)(result + 117)
      || (~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0
      || *(_BYTE *)(*v3 + 117))
    {
      return sub_100408A20(result, v3);
    }
    else
    {
      v6 = *(_DWORD *)(*v3 + 112);
      result = sub_100408A20(result, v3);
      if ((_DWORD)result && (v6 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        v7 = *(_DWORD *)(**a2 + 112);
        return *(_DWORD *)(*a1 + 108) == v7 || *(_DWORD *)(*a1 + 112) == v7;
      }
    }
  }
  return result;
}

uint64_t sub_100DF44C8(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  if (!v3)
    return 0;
  result = *a1;
  if (result)
  {
    if (*(_BYTE *)(result + 116))
      return sub_100408A70(result, v3);
    if ((~*(_DWORD *)(result + 108) & 0x7FFFFFFF) == 0)
      return sub_100408A70(result, v3);
    v6 = *v3;
    if (*(_BYTE *)(*v3 + 116) || (~*(_DWORD *)(v6 + 108) & 0x7FFFFFFF) == 0 || *(_BYTE *)(v6 + 117))
    {
      return sub_100408A70(result, v3);
    }
    else
    {
      v7 = *(_DWORD *)(v6 + 112);
      result = sub_100408A70(result, v3);
      if ((_DWORD)result && (v7 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        v8 = *(_DWORD *)(*a1 + 108);
        v9 = **a2;
        return v8 == *(_DWORD *)(v9 + 108) || v8 == *(_DWORD *)(v9 + 112);
      }
    }
  }
  return result;
}

uint64_t sub_100DF45A0(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  if (!v3)
    return 0;
  result = *a1;
  if (result)
  {
    if (*(_BYTE *)(result + 117))
      return sub_100408AC0(result, v3);
    if ((~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0)
      return sub_100408AC0(result, v3);
    v6 = *v3;
    if (*(_BYTE *)(*v3 + 116) || (~*(_DWORD *)(v6 + 108) & 0x7FFFFFFF) == 0 || *(_BYTE *)(v6 + 117))
    {
      return sub_100408AC0(result, v3);
    }
    else
    {
      v7 = *(_DWORD *)(v6 + 112);
      result = sub_100408AC0(result, v3);
      if ((_DWORD)result && (v7 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        v8 = *(_DWORD *)(*a1 + 112);
        v9 = **a2;
        return v8 == *(_DWORD *)(v9 + 108) || v8 == *(_DWORD *)(v9 + 112);
      }
    }
  }
  return result;
}

double sub_100DF4678(uint64_t a1, int a2)
{
  int v3;
  uint64_t *v4;
  double v5;
  double v6;

  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  if (v3 == a2)
    v5 = sub_100408388(v4);
  else
    v5 = sub_100408158(v4);
  v6 = 180.0;
  if (*(_BYTE *)(a1 + 16))
    v6 = 0.0;
  return v5 - v6;
}

_QWORD *sub_100DF46CC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t *v6;

  if (*a2)
  {
    v2 = *(_QWORD *)*a2;
    if (v2)
    {
      v5 = *(_QWORD *)(v2 + 8);
      v6 = &v5;
      v4 = sub_100DF79C0((uint64_t)result, &v5, (uint64_t)&unk_101B9EB60, &v6);
      return sub_100349198(v4 + 3, a2);
    }
  }
  return result;
}

_QWORD *sub_100DF4734(_QWORD *result, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;

  if (*a2)
  {
    v2 = **a2;
    if (v2)
    {
      v3 = result;
      if (result[3])
      {
        v5 = *(_QWORD *)(v2 + 8);
        result = sub_1001FF2F4(result, &v5);
        if (result)
        {
          v5 = *(_QWORD *)(**a2 + 8);
          return (_QWORD *)sub_100DF7C1C(v3, &v5);
        }
      }
    }
  }
  return result;
}

BOOL sub_100DF47A8(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  double v10;
  __int128 v12;

  v12 = 0uLL;
  sub_1002B7674((uint64_t)a2, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v8 = -1.0;
    while (1)
    {
      v9 = v7[3];
      if (v8 >= 0.0)
      {
        if (!v9)
          goto LABEL_14;
        v10 = *(double *)(v9 + 56) + *(double *)(v9 + 64);
        if (v10 >= v8)
          goto LABEL_14;
      }
      else
      {
        v10 = *(double *)(v9 + 56) + *(double *)(v9 + 64);
      }
      sub_100349198(a2, v7 + 3);
      v8 = v10;
LABEL_14:
      v7 = (_QWORD *)*v7;
      if (!v7)
        return v8 >= 0.0;
    }
  }
  v8 = -1.0;
  return v8 >= 0.0;
}

_QWORD *sub_100DF4898@<X0>(_QWORD *result@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  if (*a2
    && (v4 = **a2) != 0
    && (v6 = (uint64_t)result,
        v11 = *(unint64_t **)(v4 + 8),
        (result = sub_1001FF2F4(result, (unint64_t *)&v11)) != 0))
  {
    v10 = *(_QWORD *)(**a2 + 8);
    v11 = &v10;
    result = sub_100DF79C0(v6, &v10, (uint64_t)&unk_101B9EB60, &v11);
    v7 = result[4];
    *a3 = result[3];
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t sub_100DF494C(uint64_t a1, double *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, double *a6, uint64_t a7, unsigned __int8 a8, double a9, double a10, double a11)
{
  uint64_t v22;
  char *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  double *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  double *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  BOOL v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  _BOOL4 v52;
  _BOOL4 v53;
  char v54;
  NSObject *v55;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  uint64_t *v63;
  double *v64;
  uint64_t v65;
  double v66;
  NSObject *v67;
  double v68;
  double v69;
  uint64_t v70;
  double v71;
  double v72;
  long double v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  NSObject *v79;
  uint64_t v80;
  double v81;
  char *v82;
  uint64_t *v83;
  _QWORD *v84;
  _BOOL4 v85;
  uint64_t v86;
  double v87;
  _BOOL4 v88;
  uint64_t v89;
  double v90;
  double v91;
  double *v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  double v97;
  _QWORD *v98;
  _BOOL4 v99;
  uint64_t v100;
  double v101;
  double v102;
  double v103;
  NSObject *v104;
  const char *v105;
  char *v106;
  NSObject *v107;
  int v108;
  NSObject *v109;
  uint64_t v110;
  double v111;
  const char *v112;
  char *v113;
  int v114;
  const char *v115;
  char *v116;
  const char *v117;
  char *v118;
  NSObject *v119;
  const char *v120;
  char *v121;
  NSObject *v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  uint64_t v133;
  double v134;
  NSObject *v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unint64_t *v146;
  NSObject *v147;
  double v148;
  NSObject *v149;
  NSObject *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  NSObject *v158;
  int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  const char *v162;
  char *v163;
  const char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  char *v169;
  const char *v170;
  char *v171;
  const char *v172;
  char *v173;
  const char *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  char *v185;
  uint64_t v186;
  const char *v187;
  char *v188;
  uint64_t v189;
  const char *v190;
  char *v191;
  const char *v192;
  const char *v193;
  char *v194;
  const char *v195;
  char *v196;
  uint64_t v197;
  const char *v198;
  char *v199;
  int v200;
  const char *v201;
  char *v202;
  uint64_t v203;
  int v204;
  char *v205;
  uint64_t *v206;
  char v207;
  double v208;
  double v209;
  char *v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  _OWORD v217[2];
  int v218;
  __int128 v219;
  __int128 v220;
  int v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  __int128 v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  __int128 v227;
  int v228;
  _BYTE v229[10];
  _BYTE v230[20];
  _BYTE v231[10];
  _BYTE v232[10];
  _BYTE v233[10];
  int v234;
  _BYTE buf[14];
  _BYTE v236[20];
  _BYTE v237[10];
  _BYTE v238[10];
  _BYTE v239[10];
  int v240;

  if (*a5)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(char **)a1;
    while ((char *)v22 != v23)
      v22 = sub_100261F44(v22 - 16);
    *(_QWORD *)(a1 + 8) = v23;
    v209 = sub_1001FCBB4();
    ++*(_DWORD *)(a1 + 48);
    if (*a3 && a10 <= 1.0 && a10 >= 0.0 && a11 <= 1.0 && a11 >= 0.0 && *a4)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
      v24 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(_QWORD *)(*a3 + 8);
        v26 = *(_QWORD *)(*a4 + 8);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)v236 = v25;
        *(_WORD *)&v236[8] = 2050;
        *(_QWORD *)&v236[10] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,constructing between,start,%{public}lld,stop,%{public}lld", buf, 0x20u);
      }
      v208 = *(double *)&a7;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021887C0);
        v166 = *(_QWORD *)(*a3 + 8);
        v167 = *(_QWORD *)(*a4 + 8);
        v228 = 134349568;
        *(double *)v229 = a9;
        *(_WORD *)&v229[8] = 2050;
        *(_QWORD *)v230 = v166;
        *(_WORD *)&v230[8] = 2050;
        *(_QWORD *)&v230[10] = v167;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,constructing between,start,%{public}lld,stop,%{public}lld", &v228, 32);
        v169 = (char *)v168;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v168);
        if (v169 != buf)
          free(v169);
      }
      v27 = (char *)operator new(0x68uLL);
      *((_QWORD *)v27 + 2) = 0;
      *(_QWORD *)v27 = off_1021887F0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 3) = 0;
      v28 = (double *)(v27 + 24);
      *((_QWORD *)v27 + 4) = 0;
      *((_QWORD *)v27 + 5) = 0;
      v27[40] = 1;
      *((_OWORD *)v27 + 3) = 0u;
      *((_OWORD *)v27 + 4) = 0u;
      *((_OWORD *)v27 + 5) = 0u;
      *((_QWORD *)v27 + 12) = 0;
      *(_QWORD *)&v227 = v27 + 24;
      *((_QWORD *)&v227 + 1) = v27;
      v29 = (std::__shared_weak_count *)a3[1];
      v225 = *a3;
      v226 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      v32 = sub_100DF3918(v28, a2, &v225);
      v33 = v32;
      v34 = v226;
      if (!v226)
        goto LABEL_23;
      v35 = (unint64_t *)&v226->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (v33)
        {
LABEL_24:
          v37 = (char *)operator new(0x68uLL);
          *((_QWORD *)v37 + 1) = 0;
          *((_QWORD *)v37 + 2) = 0;
          *(_QWORD *)v37 = off_1021887F0;
          *((_QWORD *)v37 + 3) = 0;
          v38 = (double *)(v37 + 24);
          *((_QWORD *)v37 + 4) = 0;
          *((_QWORD *)v37 + 5) = 0;
          v37[40] = 1;
          *((_OWORD *)v37 + 3) = 0u;
          *((_OWORD *)v37 + 4) = 0u;
          *((_OWORD *)v37 + 5) = 0u;
          *((_QWORD *)v37 + 12) = 0;
          *(_QWORD *)&v224 = v37 + 24;
          *((_QWORD *)&v224 + 1) = v37;
          v39 = (std::__shared_weak_count *)a4[1];
          v222 = *a4;
          v223 = v39;
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v42 = sub_100DF3918(v38, a2, &v222);
          v43 = v223;
          if (v223)
          {
            v44 = (unint64_t *)&v223->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (!v42)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021887C0);
            v57 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&buf[4] = a9;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init destinationRouteRoad", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021887C0);
              v228 = 134349056;
              *(double *)v229 = a9;
              LODWORD(v203) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.3lf,unable to init destinationRouteRoad", &v228, v203);
              v173 = (char *)v172;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v172);
              if (v173 != buf)
                free(v173);
            }
            v54 = 0;
            ++*(_DWORD *)(a1 + 52);
            goto LABEL_253;
          }
          v46 = (_QWORD *)*a3;
          v47 = *a4;
          if (*(_QWORD *)*a3 == *(_QWORD *)*a4 && v46[1] == *(_QWORD *)(v47 + 8))
          {
            sub_10033F68C((char **)a1, &v227);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021887C0);
            v48 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&buf[4] = a9;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road is same as destination road", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_79;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021887C0);
            v228 = 134349056;
            *(double *)v229 = a9;
            LODWORD(v203) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,routeConstructor,start road is same as destination road", &v228, v203);
            v50 = (char *)v49;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v49);
          }
          else
          {
            v59 = v46[18];
            v60 = 0.0;
            v61 = 0.0;
            v62 = 0.0;
            v63 = &qword_1022A0000;
            if (v59 != v46[17])
            {
              v61 = *(double *)(v59 - 16);
              v62 = *(double *)(v59 - 8);
            }
            v65 = v47 + 136;
            v64 = *(double **)(v47 + 136);
            v66 = 0.0;
            if (*(double **)(v65 + 8) != v64)
            {
              v60 = *v64;
              v66 = v64[1];
            }
            if (!sub_100512A74(v61, v62, v60, v66, 0.0000001))
            {
              if (sub_10011CE64(*a6, a6[1]) && (a6 = *(double **)(*a4 + 136), a11 = 0.0, *(double **)(*a4 + 144) == a6))
              {
                v68 = 0.0;
                v69 = 0.0;
              }
              else
              {
                v68 = *a6;
                v69 = a6[1];
              }
              v70 = *(_QWORD *)(*a3 + 144);
              if (v70 == *(_QWORD *)(*a3 + 136))
              {
                v71 = 0.0;
                v72 = 0.0;
              }
              else
              {
                v71 = *(double *)(v70 - 16);
                v72 = *(double *)(v70 - 8);
              }
              v73 = sub_10011E634(a2, v71, v72, v68, v69, 0.0);
              v219 = 0u;
              v220 = 0u;
              v221 = 1065353216;
              memset(v217, 0, sizeof(v217));
              v218 = 1065353216;
              *(long double *)(v227 + 64) = v73;
              sub_100DF46CC(&v219, (uint64_t *)&v227);
              v207 = 0;
              v74 = 0;
              v216 = 0uLL;
              v75 = a8;
              while (1)
              {
                if (v74 == 1500)
                {
                  ++*(_DWORD *)(a1 + 28);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v122 = v63[27];
                  if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134349568;
                    *(double *)&buf[4] = a9;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)v236 = 1501;
                    *(_WORD *)&v236[4] = 1026;
                    *(_DWORD *)&v236[6] = 1500;
                    _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,A* Search iterations,%{public}d,exceeded max,%{public}d", buf, 0x18u);
                  }
                  if (!sub_1001BFF7C(115, 0))
                    goto LABEL_193;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v228 = 134349568;
                  *(double *)v229 = a9;
                  *(_WORD *)&v229[8] = 1026;
                  *(_DWORD *)v230 = 1501;
                  *(_WORD *)&v230[4] = 1026;
                  *(_DWORD *)&v230[6] = 1500;
                  LODWORD(v203) = 24;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.3lf,A* Search iterations,%{public}d,exceeded max,%{public}d", &v228, v203);
                  v121 = (char *)v192;
                  sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v192);
LABEL_311:
                  if (v121 != buf)
                    free(v121);
                  v207 = 1;
                  goto LABEL_314;
                }
                HIDWORD(v77) = -1775253149 * (unsigned __int16)++v74;
                LODWORD(v77) = HIDWORD(v77);
                if ((v77 >> 1) <= 0x1B4E81B)
                  sub_100CC3214(*a5);
                if (!sub_100DF47A8((uint64_t)&v219, &v216) || !(_QWORD)v216 || (v78 = *(_QWORD **)v216) == 0)
                {
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v119 = v63[27];
                  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349568;
                    *(double *)&buf[4] = a9;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)v236 = v74;
                    *(_WORD *)&v236[4] = 2050;
                    *(_QWORD *)&v236[6] = *((_QWORD *)&v220 + 1);
                    _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,did not find best path,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                    v228 = 134349568;
                    *(double *)v229 = a9;
                    *(_WORD *)&v229[8] = 1026;
                    *(_DWORD *)v230 = v74;
                    *(_WORD *)&v230[4] = 2050;
                    *(_QWORD *)&v230[6] = *((_QWORD *)&v220 + 1);
                    LODWORD(v203) = 28;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,did not find best path,iterations,%{public}d,openSet,%{public}lu", &v228, v203);
                    v121 = (char *)v120;
                    sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v120);
                    goto LABEL_311;
                  }
LABEL_193:
                  v207 = 1;
                  goto LABEL_194;
                }
                if ((_QWORD)v224 && *v78 == **(_QWORD **)v224 && v78[1] == *(_QWORD *)(*(_QWORD *)v224 + 8))
                  break;
                v213 = 0;
                v214 = 0;
                v215 = 0;
                sub_100CC6B44(*a5, (uint64_t *)v216, &v213, 1);
                v210 = 0;
                v211 = 0;
                v212 = 0;
                sub_100CC7304(*a5, (uint64_t *)v216, &v210, 1);
                sub_100CCF414((uint64_t *)&v213, (uint64_t)v214, (uint64_t *)v210, v211, ((char *)v211 - v210) >> 4);
                v205 = v214;
                v206 = (uint64_t *)v213;
                if (v213 == v214)
                {
                  ++*(_DWORD *)(a1 + 60);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v107 = v63[27];
                  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
                  {
                    v108 = *(_DWORD *)(a1 + 32);
                    *(_DWORD *)buf = 134349568;
                    *(double *)&buf[4] = a9;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)v236 = v108;
                    *(_WORD *)&v236[4] = 2050;
                    *(_QWORD *)&v236[6] = *((_QWORD *)&v220 + 1);
                    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,road connections not available,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                    v114 = *(_DWORD *)(a1 + 32);
                    v228 = 134349568;
                    *(double *)v229 = a9;
                    *(_WORD *)&v229[8] = 1026;
                    *(_DWORD *)v230 = v114;
                    *(_WORD *)&v230[4] = 2050;
                    *(_QWORD *)&v230[6] = *((_QWORD *)&v220 + 1);
                    LODWORD(v203) = 28;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,aStarConstruct,road connections not available,%{public}d,openSet,%{public}lu", &v228, v203);
                    v116 = (char *)v115;
                    sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v115);
                    if (v116 != buf)
                      free(v116);
                    v207 = 1;
                    v63 = &qword_1022A0000;
                  }
                  else
                  {
                    v207 = 1;
                  }
                }
                else
                {
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v79 = v63[27];
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
                  {
                    v80 = *(_QWORD *)(*(_QWORD *)v216 + 8);
                    v81 = *(double *)(v216 + 64);
                    *(_QWORD *)v237 = *(_QWORD *)(v216 + 56);
                    *(double *)v238 = v81;
                    *(_DWORD *)buf = 134350593;
                    *(double *)&buf[4] = a9;
                    *(_WORD *)&buf[12] = 2049;
                    *(_QWORD *)v236 = v80;
                    *(_WORD *)&v236[8] = 2050;
                    *(_QWORD *)&v236[10] = (v214 - v213) >> 4;
                    *(_WORD *)&v236[18] = 2050;
                    *(_WORD *)&v237[8] = 2050;
                    *(_WORD *)&v238[8] = 2050;
                    *(double *)v239 = *(double *)v237 + v81;
                    *(_WORD *)&v239[8] = 1026;
                    v240 = v74;
                    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d", buf, 0x44u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                    v110 = *(_QWORD *)(*(_QWORD *)v216 + 8);
                    v111 = *(double *)(v216 + 64);
                    *(_QWORD *)v231 = *(_QWORD *)(v216 + 56);
                    *(double *)v232 = v111;
                    v228 = 134350593;
                    *(double *)v229 = a9;
                    *(_WORD *)&v229[8] = 2049;
                    *(_QWORD *)v230 = v110;
                    *(_WORD *)&v230[8] = 2050;
                    *(_QWORD *)&v230[10] = (v214 - v213) >> 4;
                    *(_WORD *)&v230[18] = 2050;
                    *(_WORD *)&v231[8] = 2050;
                    *(_WORD *)&v232[8] = 2050;
                    *(double *)v233 = *(double *)v231 + v111;
                    *(_WORD *)&v233[8] = 1026;
                    v234 = v74;
                    LODWORD(v203) = 68;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d", &v228, v203);
                    v113 = (char *)v112;
                    sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v112);
                    if (v113 != buf)
                      free(v113);
                    v63 = &qword_1022A0000;
                  }
                  sub_100DF4734(&v219, (uint64_t **)&v216);
                  v204 = v74;
                  v83 = (uint64_t *)v213;
                  v82 = v214;
                  while (v83 != (uint64_t *)v82)
                  {
                    v84 = (_QWORD *)*v83;
                    if (!*v83)
                    {
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                      v109 = v63[27];
                      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(double *)&buf[4] = a9;
                        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,neighbor road is nullptr", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                        v228 = 134349056;
                        *(double *)v229 = a9;
                        LODWORD(v203) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.3lf,neighbor road is nullptr", &v228, v203);
                        v118 = (char *)v117;
                        sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v117);
                        if (v118 != buf)
                          free(v118);
                        v207 = 1;
                        v63 = &qword_1022A0000;
                      }
                      else
                      {
                        v207 = 1;
                      }
                      break;
                    }
                    if (*v84 == *(_QWORD *)*a4 && v84[1] == *(_QWORD *)(*a4 + 8))
                    {
                      v85 = sub_1004089D0(*(_QWORD *)v216, v83);
                      v86 = *a4;
                      if (v85)
                      {
                        sub_1004078E0((_QWORD *)*a4);
                        v87 = a11 * *(double *)(v86 + 40);
                      }
                      else
                      {
                        sub_1004078E0((_QWORD *)*a4);
                        v87 = (1.0 - a11) * *(double *)(v86 + 40);
                      }
                    }
                    else
                    {
                      v88 = sub_1004089D0(*(_QWORD *)v216, v83);
                      v89 = *(_QWORD *)(*v83 + 144);
                      if (v89 == *(_QWORD *)(*v83 + 136))
                      {
                        v90 = 0.0;
                        v91 = 0.0;
                      }
                      else
                      {
                        v90 = *(double *)(v89 - 16);
                        v91 = *(double *)(v89 - 8);
                      }
                      v87 = sub_10011E634(a2, v90, v91, v68, v69, 0.0);
                      v92 = *(double **)(*v83 + 136);
                      if (*(double **)(*v83 + 144) == v92)
                      {
                        v93 = 0.0;
                        v94 = 0.0;
                      }
                      else
                      {
                        v93 = *v92;
                        v94 = v92[1];
                      }
                      v95 = sub_10011E634(a2, v93, v94, v68, v69, 0.0);
                      if (!v88)
                        v87 = v95;
                    }
                    v96 = *(_QWORD *)v216;
                    sub_1004078E0(*(_QWORD **)v216);
                    v97 = *(double *)(v96 + 40);
                    if ((_QWORD)v227)
                    {
                      v98 = *(_QWORD **)v216;
                      if (*(_QWORD *)v216)
                      {
                        if (*v98 == **(_QWORD **)v227 && v98[1] == *(_QWORD *)(*(_QWORD *)v227 + 8))
                        {
                          v99 = sub_100408A70((uint64_t)v98, v83);
                          v100 = *(_QWORD *)v216;
                          if (v99)
                          {
                            sub_1004078E0(*(_QWORD **)v216);
                            v101 = *(double *)(v100 + 40);
                            v102 = a10;
                          }
                          else
                          {
                            sub_1004078E0(*(_QWORD **)v216);
                            v102 = *(double *)(v100 + 40);
                            v101 = 1.0 - a10;
                          }
                          v97 = v101 * v102;
                        }
                      }
                    }
                    v103 = v87 + v97 + *(double *)(v216 + 56);
                    if (!v75 || v103 <= v208)
                      operator new();
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                    v104 = v63[27];
                    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 134349568;
                      *(double *)&buf[4] = a9;
                      *(_WORD *)&buf[12] = 2050;
                      *(double *)v236 = v103;
                      *(_WORD *)&v236[8] = 2050;
                      *(double *)&v236[10] = v208;
                      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "CLTSP,CLRS,%{public}.1lf,Warning,cost exceeds maximum tolerable cost,cost,%{public}.1lf,maxTolerableCostInMeters,%{public}.1lf", buf, 0x20u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                      v228 = 134349568;
                      *(double *)v229 = a9;
                      *(_WORD *)&v229[8] = 2050;
                      *(double *)v230 = v103;
                      *(_WORD *)&v230[8] = 2050;
                      *(double *)&v230[10] = v208;
                      LODWORD(v203) = 32;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLTSP,CLRS,%{public}.1lf,Warning,cost exceeds maximum tolerable cost,cost,%{public}.1lf,maxTolerableCostInMeters,%{public}.1lf", &v228, v203);
                      v106 = (char *)v105;
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v105);
                      if (v106 != buf)
                        free(v106);
                      v63 = &qword_1022A0000;
                    }
                    v83 += 2;
                  }
                  sub_100DF46CC(v217, (uint64_t *)&v216);
                  v74 = v204;
                }
                *(_QWORD *)buf = &v210;
                sub_1002A3684((void ***)buf);
                *(_QWORD *)buf = &v213;
                sub_1002A3684((void ***)buf);
                if (v206 != (uint64_t *)v205)
                {
                  if (!(_QWORD)v216)
                    continue;
                  if ((a11 != 1.0 || (sub_100DF43F4((uint64_t *)v216, (uint64_t **)&v224) & 1) == 0)
                    && (a11 != 0.0 || (sub_100DF4320((uint64_t *)v216, (uint64_t **)&v224) & 1) == 0))
                  {
                    if (!(_QWORD)v224)
                      continue;
                    v76 = *(_QWORD **)v216;
                    if (!*(_QWORD *)v216 || *v76 != **(_QWORD **)v224 || v76[1] != *(_QWORD *)(*(_QWORD *)v224 + 8))
                      continue;
                  }
                }
                goto LABEL_194;
              }
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021887C0);
              v158 = v63[27];
              if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
              {
                v159 = *(_DWORD *)(a1 + 32);
                *(_DWORD *)buf = 134349568;
                *(double *)&buf[4] = a9;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)v236 = v159;
                *(_WORD *)&v236[4] = 2050;
                *(_QWORD *)&v236[6] = *((_QWORD *)&v220 + 1);
                _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstructPedestrian,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
              }
              if (!sub_1001BFF7C(115, 2))
              {
                v207 = 0;
                goto LABEL_194;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021887C0);
              v200 = *(_DWORD *)(a1 + 32);
              v228 = 134349568;
              *(double *)v229 = a9;
              *(_WORD *)&v229[8] = 1026;
              *(_DWORD *)v230 = v200;
              *(_WORD *)&v230[4] = 2050;
              *(_QWORD *)&v230[6] = *((_QWORD *)&v220 + 1);
              LODWORD(v203) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,aStarConstructPedestrian,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", &v228, v203);
              v202 = (char *)v201;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v201);
              if (v202 != buf)
                free(v202);
              v207 = 0;
LABEL_314:
              v63 = &qword_1022A0000;
LABEL_194:
              sub_100CC3214(*a5);
              v214 = 0;
              v215 = 0;
              v213 = (char *)&v214;
              v123 = v216;
              if (!(v207 & 1 | ((_QWORD)v216 == 0)))
              {
                v145 = 501;
                while (1)
                {
                  if (!*(_QWORD *)(v123 + 40))
                    goto LABEL_195;
                  if (!--v145)
                    break;
                  v146 = *(unint64_t **)v123;
                  if (!*(_QWORD *)v123)
                  {
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                    v149 = v63[27];
                    if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(double *)&buf[4] = a9;
                      _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search null road", buf, 0xCu);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                      v228 = 134349056;
                      *(double *)v229 = a9;
                      LODWORD(v203) = 12;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.1lf,A* Search null road", &v228, v203);
                      v196 = (char *)v195;
                      sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v195);
                      if (v196 != buf)
                        free(v196);
                    }
                    v148 = 0.0;
                    if (v209 < 0.0)
                      goto LABEL_251;
                    goto LABEL_250;
                  }
                  if (sub_100CCD8A4((uint64_t)&v213, *(unint64_t **)v123))
                  {
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                    v150 = v63[27];
                    if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
                    {
                      v151 = *(_QWORD *)(*(_QWORD *)v216 + 8);
                      *(_DWORD *)buf = 134349313;
                      *(double *)&buf[4] = a9;
                      *(_WORD *)&buf[12] = 2049;
                      *(_QWORD *)v236 = v151;
                      _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road already added,%{private}lld", buf, 0x16u);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                      v197 = *(_QWORD *)(*(_QWORD *)v216 + 8);
                      v228 = 134349313;
                      *(double *)v229 = a9;
                      *(_WORD *)&v229[8] = 2049;
                      *(_QWORD *)v230 = v197;
                      LODWORD(v203) = 22;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.1lf,A* Search road already added,%{private}lld", &v228, v203);
                      v199 = (char *)v198;
                      sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v198);
                      if (v199 != buf)
                        free(v199);
                    }
                    v148 = 0.0;
                    if (v209 >= 0.0)
                      goto LABEL_250;
LABEL_251:
                    v54 = 0;
                    *(double *)(a1 + 40) = v148;
                    *(double *)(a1 + 64) = v148 + *(double *)(a1 + 64);
                    goto LABEL_252;
                  }
                  sub_10033F68C((char **)a1, &v216);
                  *(_QWORD *)buf = v146;
                  *((_BYTE *)sub_100CD019C((uint64_t **)&v213, v146, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 48) = 1;
                  sub_100349198(&v216, (uint64_t *)(v216 + 40));
                  v123 = v216;
                  if (!(_QWORD)v216)
                    goto LABEL_195;
                }
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                v147 = v63[27];
                if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349568;
                  *(double *)&buf[4] = a9;
                  *(_WORD *)&buf[12] = 1026;
                  *(_DWORD *)v236 = 501;
                  *(_WORD *)&v236[4] = 1026;
                  *(_DWORD *)&v236[6] = 500;
                  _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road count,%{public}d,exceeded max,%{public}d", buf, 0x18u);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v228 = 134349568;
                  *(double *)v229 = a9;
                  *(_WORD *)&v229[8] = 1026;
                  *(_DWORD *)v230 = 501;
                  *(_WORD *)&v230[4] = 1026;
                  *(_DWORD *)&v230[6] = 500;
                  LODWORD(v203) = 24;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.1lf,A* Search road count,%{public}d,exceeded max,%{public}d", &v228, v203);
                  v194 = (char *)v193;
                  sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v193);
                  if (v194 != buf)
                    free(v194);
                }
                v148 = 0.0;
                if (v209 < 0.0)
                  goto LABEL_251;
LABEL_250:
                v148 = vabdd_f64(sub_1001FCBB4(), v209) * 1000.0;
                goto LABEL_251;
              }
LABEL_195:
              if (!sub_100CCD8A4((uint64_t)&v213, *(unint64_t **)v227))
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                v124 = v63[27];
                if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
                {
                  v125 = *(_QWORD *)(*(_QWORD *)v227 + 8);
                  *(_DWORD *)buf = 134349312;
                  *(double *)&buf[4] = a9;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)v236 = v125;
                  _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added first road,%lld", buf, 0x16u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v186 = *(_QWORD *)(*(_QWORD *)v227 + 8);
                  v228 = 134349312;
                  *(double *)v229 = a9;
                  *(_WORD *)&v229[8] = 2048;
                  *(_QWORD *)v230 = v186;
                  LODWORD(v203) = 22;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.1lf,added first road,%lld", &v228, v203);
                  v188 = (char *)v187;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v187);
                  if (v188 != buf)
                    free(v188);
                  v63 = &qword_1022A0000;
                }
                sub_10033F68C((char **)a1, &v227);
              }
              v126 = *(char **)a1;
              v127 = *(_QWORD *)(a1 + 8);
              v128 = (char *)(v127 - 16);
              if (*(_QWORD *)a1 != v127 && v128 > v126)
              {
                do
                {
                  v130 = *(_QWORD *)v126;
                  *(_QWORD *)v126 = *(_QWORD *)v128;
                  *(_QWORD *)v128 = v130;
                  v131 = *((_QWORD *)v126 + 1);
                  *((_QWORD *)v126 + 1) = *((_QWORD *)v128 + 1);
                  *((_QWORD *)v128 + 1) = v131;
                  v126 += 16;
                  v128 -= 16;
                }
                while (v126 < v128);
              }
              if (!sub_100CCD8A4((uint64_t)&v213, *(unint64_t **)v224))
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                v132 = v63[27];
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                {
                  v133 = *(_QWORD *)(*(_QWORD *)v224 + 8);
                  *(_DWORD *)buf = 134349312;
                  *(double *)&buf[4] = a9;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)v236 = v133;
                  _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added last road,%lld", buf, 0x16u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                  v189 = *(_QWORD *)(*(_QWORD *)v224 + 8);
                  v228 = 134349312;
                  *(double *)v229 = a9;
                  *(_WORD *)&v229[8] = 2048;
                  *(_QWORD *)v230 = v189;
                  LODWORD(v203) = 22;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.1lf,added last road,%lld", &v228, v203);
                  v191 = (char *)v190;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v190);
                  if (v191 != buf)
                    free(v191);
                  v63 = &qword_1022A0000;
                }
                sub_10033F68C((char **)a1, &v224);
              }
              *(_DWORD *)(a1 + 52) += v207 & 1;
              v134 = 0.0;
              if (v209 >= 0.0)
                v134 = vabdd_f64(sub_1001FCBB4(), v209) * 1000.0;
              *(double *)(a1 + 40) = v134;
              *(double *)(a1 + 64) = v134 + *(double *)(a1 + 64);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021887C0);
              v135 = v63[27];
              if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
              {
                v136 = *(_DWORD *)(a1 + 48);
                v137 = *(_DWORD *)(a1 + 52);
                v138 = *(_DWORD *)(a1 + 24);
                v139 = *(_DWORD *)(a1 + 28);
                v140 = *(_DWORD *)(a1 + 32);
                v141 = *(_DWORD *)(a1 + 56);
                v142 = *(_DWORD *)(a1 + 60);
                v143 = *(_QWORD *)(a1 + 40);
                v144 = *(_QWORD *)(a1 + 64);
                *(_DWORD *)buf = 67242240;
                *(_DWORD *)&buf[4] = v136;
                *(_WORD *)&buf[8] = 1026;
                *(_DWORD *)&buf[10] = v137;
                *(_WORD *)v236 = 1026;
                *(_DWORD *)&v236[2] = v138;
                *(_WORD *)&v236[6] = 1026;
                *(_DWORD *)&v236[8] = v139;
                *(_WORD *)&v236[12] = 1026;
                *(_DWORD *)&v236[14] = v141;
                *(_WORD *)&v236[18] = 1026;
                *(_DWORD *)v237 = v140;
                *(_WORD *)&v237[4] = 1026;
                *(_DWORD *)&v237[6] = v142;
                *(_WORD *)v238 = 2050;
                *(_QWORD *)&v238[2] = v143;
                *(_WORD *)v239 = 2050;
                *(_QWORD *)&v239[2] = v144;
                _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "CLTSP,AStar Pedestrian Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x40u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021887C0);
                v175 = *(_DWORD *)(a1 + 48);
                v176 = *(_DWORD *)(a1 + 52);
                v177 = *(_DWORD *)(a1 + 24);
                v178 = *(_DWORD *)(a1 + 28);
                v179 = *(_DWORD *)(a1 + 32);
                v180 = *(_DWORD *)(a1 + 56);
                v181 = *(_DWORD *)(a1 + 60);
                v182 = *(_QWORD *)(a1 + 40);
                v183 = *(_QWORD *)(a1 + 64);
                v228 = 67242240;
                *(_DWORD *)v229 = v175;
                *(_WORD *)&v229[4] = 1026;
                *(_DWORD *)&v229[6] = v176;
                *(_WORD *)v230 = 1026;
                *(_DWORD *)&v230[2] = v177;
                *(_WORD *)&v230[6] = 1026;
                *(_DWORD *)&v230[8] = v178;
                *(_WORD *)&v230[12] = 1026;
                *(_DWORD *)&v230[14] = v180;
                *(_WORD *)&v230[18] = 1026;
                *(_DWORD *)v231 = v179;
                *(_WORD *)&v231[4] = 1026;
                *(_DWORD *)&v231[6] = v181;
                *(_WORD *)v232 = 2050;
                *(_QWORD *)&v232[2] = v182;
                *(_WORD *)v233 = 2050;
                *(_QWORD *)&v233[2] = v183;
                LODWORD(v203) = 64;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLTSP,AStar Pedestrian Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", &v228, v203);
                v185 = (char *)v184;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v184);
                if (v185 != buf)
                  free(v185);
              }
              v54 = v207 ^ 1;
LABEL_252:
              sub_100008848((uint64_t)&v213, v214);
              sub_100261F44((uint64_t)&v216);
              sub_100090BB8((uint64_t)v217);
              sub_100090BB8((uint64_t)&v219);
              goto LABEL_253;
            }
            sub_10033F68C((char **)a1, &v227);
            sub_10033F68C((char **)a1, &v224);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021887C0);
            v67 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&buf[4] = a9;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road and destination road are neighbors", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_79;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021887C0);
            v228 = 134349056;
            *(double *)v229 = a9;
            LODWORD(v203) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLTSP,%{public}.3lf,routeConstructor,start road and destination road are neighbors", &v228, v203);
            v50 = (char *)v174;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v174);
          }
          if (v50 != buf)
            free(v50);
LABEL_79:
          v54 = 1;
LABEL_253:
          v152 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
          if (*((_QWORD *)&v224 + 1))
          {
            v153 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
LABEL_258:
          v155 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
          if (*((_QWORD *)&v227 + 1))
          {
            v156 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
          return v54 & 1;
        }
      }
      else
      {
LABEL_23:
        if (v32)
          goto LABEL_24;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
      v58 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = a9;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init startRouteRoad", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021887C0);
        v228 = 134349056;
        *(double *)v229 = a9;
        LODWORD(v203) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.3lf,unable to init startRouteRoad", &v228, v203);
        v171 = (char *)v170;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v170);
        if (v171 != buf)
          free(v171);
      }
      v54 = 0;
      ++*(_DWORD *)(a1 + 52);
      goto LABEL_258;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    v51 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v52 = *a3 != 0;
      v53 = *a4 != 0;
      *(_DWORD *)buf = 134350080;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)v236 = v52;
      *(_WORD *)&v236[4] = 1026;
      *(_DWORD *)&v236[6] = v53;
      *(_WORD *)&v236[10] = 2048;
      *(double *)&v236[12] = a10;
      *(_WORD *)v237 = 2048;
      *(double *)&v237[2] = a11;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,routeConstructor,constructPedestrian,invalid inputs,startRoad,%{public}d,destRoad,%{public}d,startRoadProjection,%.1lf,destinationRoadProjection,%.1lf", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
      v160 = *a3 != 0;
      v161 = *a4 != 0;
      v228 = 134350080;
      *(double *)v229 = a9;
      *(_WORD *)&v229[8] = 1026;
      *(_DWORD *)v230 = v160;
      *(_WORD *)&v230[4] = 1026;
      *(_DWORD *)&v230[6] = v161;
      *(_WORD *)&v230[10] = 2048;
      *(double *)&v230[12] = a10;
      *(_WORD *)v231 = 2048;
      *(double *)&v231[2] = a11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLTSP,%{public}.3lf,routeConstructor,constructPedestrian,invalid inputs,startRoad,%{public}d,destRoad,%{public}d,startRoadProjection,%.1lf,destinationRoadProjection,%.1lf", &v228, 44);
      v163 = (char *)v162;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v162);
      if (v163 != buf)
        free(v163);
    }
    v54 = 0;
    ++*(_DWORD *)(a1 + 52);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021887C0);
    v55 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021887C0);
      LOWORD(v228) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", &v228, 2);
      v165 = (char *)v164;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v164);
      if (v165 != buf)
        free(v165);
    }
    v54 = 0;
  }
  return v54 & 1;
}

void sub_100DF75AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_100261F44((uint64_t)&a37);
  sub_100090BB8((uint64_t)&a39);
  sub_100090BB8((uint64_t)&a45);
  sub_100261F44((uint64_t)&a53);
  sub_100261F44((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_100DF7724()
{
  JUMPOUT(0x100DF771CLL);
}

void sub_100DF772C(uint64_t *a1, double *a2)
{
  uint64_t v2;
  unint64_t i;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;

  v2 = *a1;
  if ((unint64_t)(a1[1] - *a1) >= 0x11)
  {
    for (i = 1; i < (a1[1] - *a1) >> 4; ++i)
    {
      v6 = *(_OWORD *)(v2 + 16 * i - 16);
      v28 = v6;
      if (*((_QWORD *)&v6 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v2 = *a1;
      }
      v26 = *(uint64_t **)(v2 + 16 * i);
      v27 = *(_OWORD *)(v2 + 16 * i);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = v6;
      if ((sub_100DF44C8((uint64_t *)v6, (uint64_t **)&v27) & 1) == 0)
      {
        if ((sub_100DF45A0((uint64_t *)v12, (uint64_t **)&v27) & 1) != 0)
        {
          v13 = 1;
          goto LABEL_14;
        }
        v19 = *(_QWORD *)v12;
        v20 = *v26;
        v21 = sub_10011E634(a2, **(double **)(*(_QWORD *)v12 + 136), *(double *)(*(_QWORD *)(*(_QWORD *)v12 + 136) + 8), **(double **)(*v26 + 136), *(double *)(*(_QWORD *)(*v26 + 136) + 8), 0.0);
        v22 = sub_10011E634(a2, **(double **)(v19 + 136), *(double *)(*(_QWORD *)(v19 + 136) + 8), *(double *)(*(_QWORD *)(v20 + 144) - 16), *(double *)(*(_QWORD *)(v20 + 144) - 8), 0.0);
        if (v22 >= v21)
          v23 = v21;
        else
          v23 = v22;
        v24 = sub_10011E634(a2, *(double *)(*(_QWORD *)(v19 + 144) - 16), *(double *)(*(_QWORD *)(v19 + 144) - 8), **(double **)(v20 + 136), *(double *)(*(_QWORD *)(v20 + 136) + 8), 0.0);
        v25 = sub_10011E634(a2, *(double *)(*(_QWORD *)(v19 + 144) - 16), *(double *)(*(_QWORD *)(v19 + 144) - 8), *(double *)(*(_QWORD *)(v20 + 144) - 16), *(double *)(*(_QWORD *)(v20 + 144) - 8), 0.0);
        if (v25 >= v24)
          v25 = v24;
        if (v23 >= v25)
          goto LABEL_15;
      }
      v13 = 0;
LABEL_14:
      *(_BYTE *)(v12 + 16) = v13;
LABEL_15:
      if (((a1[1] - *a1) >> 4) - 1 == i && sub_100DF45A0(v26, (uint64_t **)&v28))
        *((_BYTE *)v26 + 16) = 0;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v2 = *a1;
    }
  }
}

void sub_100DF7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100DF7994(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

_QWORD *sub_100DF79C0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10096EBD8((uint64_t)v24, 0);
  return v11;
}

void sub_100DF7C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10096EBD8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF7C1C(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_100DED428(a1, a2);
  if (result)
  {
    sub_1000592D8(a1, (_QWORD *)result, (uint64_t)v4);
    sub_10096EBD8((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_100DF7C68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021887F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DF7C7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021887F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100DF7CB0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_100261F44(a1 + 64);
  return sub_100261F44(v1);
}

void sub_100DF7CDC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  *a1 = a2;
  v2 = a2;
  operator new();
}

void sub_100DF7D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100DF7DF4((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_100DF7D68(uint64_t a1)
{
  sub_100DF7DB0(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_100DF7D70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100DF7DB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100261F44(a2 + 40);
    sub_100261F44(a2);
    operator delete();
  }
}

uint64_t *sub_100DF7DF4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100261F44(v2 + 40);
    sub_100261F44(v2);
    operator delete();
  }
  return result;
}

void sub_100DF7E44(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 2248);
    if (v3)
    {
      *(_QWORD *)(a2 + 2256) = v3;
      operator delete(v3);
    }
    sub_10083C9D4(a2);
    operator delete();
  }
}

_QWORD *sub_100DF7E90@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA70uLL);
  result = sub_100DF7ED8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100DF7EC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DF7ED8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021888B8;
  a1[1] = 0;
  sub_1010CDBC0((uint64_t)(a1 + 3));
  a1[3] = &off_1021991C8;
  return a1;
}

void sub_100DF7F20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100DF7F34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021888B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DF7F48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021888B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100DF7F7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100DF7F8C@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0xA78uLL);
  result = sub_10083C83C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100DF7FD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DF7FE4(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100DF8138((uint64_t)a1, "GaitMetricsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102188908;
  a1[9] = off_1021889D8;
  a1[50] = off_102188A28;
  sub_100E81598(a1 + 51, 0, 0);
  sub_100E81598(a1 + 53, 0, 0);
  sub_100E81598(a1 + 55, 0, 0);
  sub_100E81598(a1 + 57, 0, 0);
  sub_100E81598(a1 + 59, 0, 0);
  sub_100E81598(a1 + 61, 0, 0);
  sub_100E81598(a1 + 63, 0, 0);
  sub_100E81598(a1 + 65, 0, 0);
  sub_100E81598(a1 + 67, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100DF810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF8138(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102188FE0;
  *(_QWORD *)(a1 + 72) = off_102189088;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102188FE0;
  *(_QWORD *)(a1 + 72) = off_102189088;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 263) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 272) = 0x3FD9999A00000000;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 1116213084;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_DWORD *)(a1 + 320) = 12000;
  *(_QWORD *)(a1 + 328) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 336));
  *(_QWORD *)(a1 + 336) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100DF8524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[41] = off_102138DA8;
  sub_100427950(v27);
  sub_100D2C264(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100DF85C8()
{
  JUMPOUT(0x100DF85A8);
}

_QWORD *sub_100DF85D0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102189088;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102188FE0;
  a1[41] = off_102138DA8;
  sub_100427950(a1 + 42);
  sub_100D2C264(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100DF8650(uint64_t a1)
{
  return sub_100DF85D0((_QWORD *)(a1 - 72));
}

_QWORD *sub_100DF8658(uint64_t a1)
{
  return sub_100DF85D0((_QWORD *)(a1 - 400));
}

void sub_100DF8660(_QWORD *a1)
{
  sub_100DF85D0(a1);
  operator delete();
}

void sub_100DF8684(uint64_t a1)
{
  sub_100DF85D0((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_100DF86AC(uint64_t a1)
{
  sub_100DF85D0((_QWORD *)(a1 - 400));
  operator delete();
}

uint64_t sub_100DF86D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  double Current;
  sqlite3_stmt *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[3];
  __int16 v16;

  v5 = a1 + 14;
  v4 = a1[14];
  v15[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  v16 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_1000892F8((uint64_t)(a1 + 9)))
  {
    sub_10001E638(a1[10]);
    Current = CFAbsoluteTimeGetCurrent();
    sub_100087AF4(a1 + 55, v15);
    v7 = (sqlite3_stmt *)sub_100026CC8(v15[0]);
    if (sub_1000890C4(v7, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
    {
      v8 = a1[10];
      v9 = (sqlite3_stmt *)sub_100026CC8(v15[0]);
      sub_10023C9B0(v8, v9);
      v10 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }
    else
    {
      v10 = -1;
    }
    sub_10001E99C(a1[10]);
    v11 = a1[10];
    if (*(uint64_t *)(v11 + 88) <= 0)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = *(_QWORD *)(v11 + 88);
    sub_100053048(v11, v12);
    v13 = v15[0];
    v15[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    v10 = -1;
  }
  (*(void (**)(uint64_t *))(*v5 + 24))(v5);
  return v10;
}

void sub_100DF8814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF8854(uint64_t a1, uint64_t a2)
{
  return sub_100DF86D4((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100DF885C(uint64_t *a1, char **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v31[48];
  __int128 v32;
  _BYTE v33[32];
  uint64_t v34[3];
  __int16 v35;

  v5 = a1 + 14;
  v4 = a1[14];
  v6 = (uint64_t)(a1 + 9);
  v34[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  v35 = 256;
  if (sub_1000892F8(v6))
  {
    a2[1] = *a2;
    sub_100087AF4(a1 + 57, v34);
    sub_10001E638(a1[10]);
    *(_DWORD *)v31 = 0;
    memset(&v31[8], 0, 39);
    *(_QWORD *)&v32 = 0x3FD9999A00000000;
    BYTE8(v32) = 0;
    HIDWORD(v32) = 1116213084;
    v33[0] = 0;
    memset(&v33[4], 0, 24);
    while (!sub_100DF8AE4(v34, (uint64_t)v31))
    {
      v7 = a2[1];
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v8)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 5);
        v14 = v13 + 1;
        if (v13 + 1 > 0x2AAAAAAAAAAAAAALL)
          sub_100259694();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)*a2) >> 5);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x155555555555555)
          v16 = 0x2AAAAAAAAAAAAAALL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)sub_10067257C((uint64_t)(a2 + 2), v16);
        else
          v17 = 0;
        v18 = &v17[96 * v13];
        v19 = *(_OWORD *)&v31[16];
        *(_OWORD *)v18 = *(_OWORD *)v31;
        *((_OWORD *)v18 + 1) = v19;
        v20 = *(_OWORD *)&v33[16];
        *((_OWORD *)v18 + 4) = *(_OWORD *)v33;
        *((_OWORD *)v18 + 5) = v20;
        v21 = v32;
        *((_OWORD *)v18 + 2) = *(_OWORD *)&v31[32];
        *((_OWORD *)v18 + 3) = v21;
        v23 = *a2;
        v22 = a2[1];
        v24 = v18;
        if (v22 != *a2)
        {
          do
          {
            v25 = *((_OWORD *)v22 - 5);
            *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
            *((_OWORD *)v24 - 5) = v25;
            v26 = *((_OWORD *)v22 - 4);
            v27 = *((_OWORD *)v22 - 3);
            v28 = *((_OWORD *)v22 - 2);
            *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 - 20);
            *((_OWORD *)v24 - 3) = v27;
            *((_OWORD *)v24 - 2) = v28;
            *((_OWORD *)v24 - 4) = v26;
            v24 -= 96;
            v22 -= 96;
          }
          while (v22 != v23);
          v22 = *a2;
        }
        v12 = v18 + 96;
        *a2 = v24;
        a2[1] = v18 + 96;
        a2[2] = &v17[96 * v16];
        if (v22)
          operator delete(v22);
      }
      else
      {
        v9 = v32;
        *((_OWORD *)v7 + 2) = *(_OWORD *)&v31[32];
        *((_OWORD *)v7 + 3) = v9;
        v10 = *(_OWORD *)&v33[16];
        *((_OWORD *)v7 + 4) = *(_OWORD *)v33;
        *((_OWORD *)v7 + 5) = v10;
        v11 = *(_OWORD *)&v31[16];
        v12 = v7 + 96;
        *(_OWORD *)v7 = *(_OWORD *)v31;
        *((_OWORD *)v7 + 1) = v11;
      }
      a2[1] = v12;
    }
    sub_10001E99C(a1[10]);
    v29 = v34[0];
    v34[0] = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_100DF8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF8AE4(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  float v10;
  sqlite3_stmt *v11;
  float v12;
  sqlite3_stmt *v13;
  float v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  float v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  float v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  float v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  float v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  float v33;
  sqlite3_stmt *v34;
  float v35;
  sqlite3_stmt *v36;
  float v37;
  sqlite3_stmt *v38;
  float v39;
  sqlite3_stmt *v40;
  float v41;
  sqlite3_stmt *v42;
  double v43;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 16) = (unint64_t)sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v10 = sqlite3_column_double(v9, 3);
  *(float *)(a2 + 24) = v10;
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v12 = sqlite3_column_double(v11, 4);
  *(float *)(a2 + 28) = v12;
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v14 = sqlite3_column_double(v13, 5);
  *(float *)(a2 + 32) = v14;
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 40) = sqlite3_column_int(v15, 6);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v17 = sqlite3_column_double(v16, 7);
  *(float *)(a2 + 36) = v17;
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 41) = sqlite3_column_int(v18, 8);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 42) = sqlite3_column_int(v19, 9);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 43) = sqlite3_column_int(v20, 10);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 44) = sqlite3_column_int(v21, 11);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v23 = sqlite3_column_double(v22, 12);
  *(float *)(a2 + 48) = v23;
  v24 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 45) = sqlite3_column_int(v24, 13);
  v25 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 46) = sqlite3_column_int(v25, 14);
  v26 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v27 = sqlite3_column_double(v26, 15);
  *(float *)(a2 + 52) = v27;
  v28 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 56) = sqlite3_column_int(v28, 16) != 0;
  v29 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v30 = sqlite3_column_double(v29, 17);
  *(float *)(a2 + 60) = v30;
  v31 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 64) = sqlite3_column_int(v31, 18) != 0;
  v32 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v33 = sqlite3_column_double(v32, 19);
  *(float *)(a2 + 68) = v33;
  v34 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v35 = sqlite3_column_double(v34, 20);
  *(float *)(a2 + 72) = v35;
  v36 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v37 = sqlite3_column_double(v36, 21);
  *(float *)(a2 + 76) = v37;
  v38 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v39 = sqlite3_column_double(v38, 22);
  *(float *)(a2 + 80) = v39;
  v40 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v41 = sqlite3_column_double(v40, 23);
  *(float *)(a2 + 84) = v41;
  v42 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v43 = sqlite3_column_double(v42, 24);
  result = 0;
  *(float *)&v43 = v43;
  *(_DWORD *)(a2 + 88) = LODWORD(v43);
  return result;
}

uint64_t sub_100DF8D70(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_1000892F8(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 472), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_100DF8E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF8E28(uint64_t a1)
{
  return sub_100DF8D70(a1 - 72);
}

uint64_t sub_100DF8E30(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v33;
  char *v34;
  uint64_t v35[3];
  __int16 v36;
  _BYTE buf[48];
  __int128 v38;
  _BYTE v39[1568];

  v9 = a1 + 112;
  v8 = *(_QWORD *)(a1 + 112);
  v10 = a1 + 72;
  v35[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  v36 = 256;
  if (sub_1000892F8(v10))
  {
    a2[1] = *a2;
    sub_100087AF4((_QWORD *)(a1 + 488), v35);
    *(_DWORD *)buf = 0;
    memset(&buf[8], 0, 39);
    *(_QWORD *)&v38 = 0x3FD9999A00000000;
    BYTE8(v38) = 0;
    HIDWORD(v38) = 1116213084;
    v39[0] = 0;
    memset(&v39[4], 0, 24);
    if (a4 >= a3)
    {
      v11 = (sqlite3_stmt *)sub_100026CC8(v35[0]);
      if (sub_1000890C4(v11, 1, a3))
      {
        v12 = (sqlite3_stmt *)sub_100026CC8(v35[0]);
        if (sub_1000890C4(v12, 2, a4))
        {
          while (!sub_100DF8AE4(v35, (uint64_t)buf))
          {
            v13 = a2[1];
            v14 = (unint64_t)a2[2];
            if ((unint64_t)v13 >= v14)
            {
              v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 5);
              v17 = v16 + 1;
              if (v16 + 1 > 0x2AAAAAAAAAAAAAALL)
                sub_100259694();
              v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)*a2) >> 5);
              if (2 * v18 > v17)
                v17 = 2 * v18;
              if (v18 >= 0x155555555555555)
                v19 = 0x2AAAAAAAAAAAAAALL;
              else
                v19 = v17;
              if (v19)
                v20 = (char *)sub_10067257C((uint64_t)(a2 + 2), v19);
              else
                v20 = 0;
              v21 = &v20[96 * v16];
              *(_OWORD *)v21 = *(_OWORD *)buf;
              *((_OWORD *)v21 + 1) = *(_OWORD *)&buf[16];
              *((_OWORD *)v21 + 5) = *(_OWORD *)&v39[16];
              *((_OWORD *)v21 + 4) = *(_OWORD *)v39;
              *((_OWORD *)v21 + 3) = v38;
              *((_OWORD *)v21 + 2) = *(_OWORD *)&buf[32];
              v23 = *a2;
              v22 = a2[1];
              v24 = v21;
              if (v22 != *a2)
              {
                do
                {
                  v25 = *((_OWORD *)v22 - 5);
                  *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
                  *((_OWORD *)v24 - 5) = v25;
                  v26 = *((_OWORD *)v22 - 4);
                  v27 = *((_OWORD *)v22 - 3);
                  v28 = *((_OWORD *)v22 - 2);
                  *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 - 20);
                  *((_OWORD *)v24 - 3) = v27;
                  *((_OWORD *)v24 - 2) = v28;
                  *((_OWORD *)v24 - 4) = v26;
                  v24 -= 96;
                  v22 -= 96;
                }
                while (v22 != v23);
                v22 = *a2;
              }
              v15 = v21 + 96;
              *a2 = v24;
              a2[1] = v21 + 96;
              a2[2] = &v20[96 * v19];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *((_OWORD *)v13 + 2) = *(_OWORD *)&buf[32];
              *((_OWORD *)v13 + 3) = v38;
              *((_OWORD *)v13 + 4) = *(_OWORD *)v39;
              *((_OWORD *)v13 + 5) = *(_OWORD *)&v39[16];
              *(_OWORD *)v13 = *(_OWORD *)buf;
              *((_OWORD *)v13 + 1) = *(_OWORD *)&buf[16];
              v15 = v13 + 96;
            }
            a2[1] = v15;
          }
        }
      }
    }
    v31 = v35[0];
    v35[0] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v30 = 100;
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102188AD0);
    v29 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "GaitMetricsHistory not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102188AD0);
      LOWORD(v35[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "GaitMetricsHistory not accessible", v35, 2);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "virtual CMError CLMobility::GaitMetricsRecorderDb::queryGaitMetricsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<GaitMetrics> &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    v30 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return v30;
}

void sub_100DF9248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF9298(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_100DF8E30(a1 - 400, a2, a3, a4);
}

uint64_t sub_100DF92A0(_QWORD *a1, uint64_t a2)
{
  return sub_10041B300(a1, a2, 0);
}

uint64_t sub_100DF92A8(uint64_t a1, uint64_t a2)
{
  return sub_10041B300((_QWORD *)(a1 - 400), a2, 0);
}

uint64_t sub_100DF92B4(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  _WORD v21[8];
  _BYTE v22[48];
  __int128 v23;
  _OWORD v24[2];
  _QWORD *v25;
  __int16 v26;
  uint8_t buf[1640];

  v5 = a1 + 14;
  v4 = a1[14];
  v6 = (uint64_t)(a1 + 9);
  v25 = a1 + 14;
  (*(void (**)(_QWORD *))(v4 + 16))(a1 + 14);
  v26 = 256;
  if (sub_1000892F8(v6))
  {
    *(_DWORD *)v22 = 0;
    memset(&v22[8], 0, 39);
    *(_QWORD *)&v23 = 0x3FD9999A00000000;
    BYTE8(v23) = 0;
    HIDWORD(v23) = 1116213084;
    LOBYTE(v24[0]) = 0;
    memset((char *)v24 + 4, 0, 24);
    v7 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 104))(a1, v22);
    switch(v7)
    {
      case 0:
        v16 = v23;
        a2[2] = *(_OWORD *)&v22[32];
        a2[3] = v16;
        a2[4] = v24[0];
        *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)((char *)v24 + 12);
        v17 = *(_OWORD *)&v22[16];
        v12 = 1;
        *a2 = *(_OWORD *)v22;
        a2[1] = v17;
        goto LABEL_19;
      case 1:
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v14 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[GaitMetricsHistory] Most recent gait metrics: No recent records in database", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_18;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[GaitMetricsHistory] Most recent gait metrics: No recent records in database", v21, 2);
        v10 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v15);
        break;
      case 2:
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v8 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[GaitMetricsHistory] Most recent gait metrics: Query error", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_18;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[GaitMetricsHistory] Most recent gait metrics: Query error", v21, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v9);
        break;
      default:
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v18 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[GaitMetricsHistory] Most recent gait metrics: unexpected return type", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_18;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[GaitMetricsHistory] Most recent gait metrics: unexpected return type", v21, 2);
        v10 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v19);
        break;
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102188AD0);
    v11 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[GaitMetricsHistory] Database inaccessible, unable to query", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102188AD0);
    *(_WORD *)v22 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[GaitMetricsHistory] Database inaccessible, unable to query", v22, 2);
    v10 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v20);
  }
  if (v10 != buf)
    free(v10);
LABEL_18:
  v12 = 0;
LABEL_19:
  (*(void (**)(_QWORD *))(*v5 + 24))(v5);
  return v12;
}

void sub_100DF9878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_10187E514((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF98B0(uint64_t a1, _OWORD *a2)
{
  return sub_100DF92B4((_QWORD *)(a1 - 400), a2);
}

uint64_t sub_100DF98B8(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100DF99C8((uint64_t)a1);
    sub_100634364(a1[10], "GaitMetricsHistory", (const char **)&off_102188AF0, (const std::string::value_type **)&off_1022FBA50, 0);
    a1[51] = sub_10063D314(a1[10], "DELETE FROM GaitMetricsHistory WHERE startTime > ?");
    a1[52] = v3;
    a1[53] = sub_10063D314(a1[10], "DELETE FROM GaitMetricsHistory");
    a1[54] = v4;
    a1[55] = sub_10063D314(a1[10], "DELETE FROM GaitMetricsHistory WHERE startTime < ?");
    a1[56] = v5;
    a1[57] = sub_10063D314(a1[10], "SELECT * from GaitMetricsHistory ORDER BY startTime ASC");
    a1[58] = v6;
    a1[59] = sub_10063D314(a1[10], "SELECT COUNT(*) FROM GaitMetricsHistory");
    a1[60] = v7;
    a1[61] = sub_10063D314(a1[10], "SELECT * FROM GaitMetricsHistory WHERE startTime BETWEEN ? and ? ORDER BY startTime ASC");
    a1[62] = v8;
    a1[63] = sub_10063D314(a1[10], "SELECT * FROM GaitMetricsHistory ORDER BY id DESC LIMIT 1");
    a1[64] = v9;
    a1[65] = sub_10063D314(a1[10], "INSERT INTO GaitMetricsHistory (startTime, timestamp, walkingSpeed, doubleSupportPercentage, stepLength, deviceSide, asymmetryProbability, segmentsRejectedByIsSwingStanceCycle, segmentsRejectedByIsNotRunning, segmentsRejectedByIsFeasibleWalkingSpeed, segmentsRejectedByIsPendular, cycleTime, segmentsRejectedByIsSufficientVerticalTwist, segmentsRejectedByIsCadenceConcordant, userHeight, isHeightSet, userWeight, isWeightSet, stepIndexOfHarmonicityAP, stepIndexOfHarmonicityML, stepIndexOfHarmonicityVT, swingIndexOfHarmonicityAP, swingIndexOfHarmonicityML, swingIndexOfHarmonicityVT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    a1[66] = v10;
    result = sub_10063D314(a1[10], "UPDATE GaitMetricsHistory SET startTime = startTime + ?");
    a1[67] = result;
    a1[68] = v11;
  }
  return result;
}

BOOL sub_100DF99C8(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "GaitMetricsHistory");
  if (result)
  {
    v3 = "segmentsRejectedByIsSwingStanceCycle";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "GaitMetricsHistory", (uint64_t)"segmentsRejectedByIsSwingStanceCycle", (uint64_t)&v3);
  }
  return result;
}

void sub_100DF9D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF9E04(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000892F8(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 424), &v7);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v7);
    sub_10023C9B0(v3, v4);
    v5 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = *(_QWORD *)(v5 + 88);
    sub_100053048(v5, v6);
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100DF9E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF9EAC(uint64_t a1)
{
  return sub_100DF9E04(a1 - 72);
}

uint64_t sub_100DF9EB4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000892F8((uint64_t)(a1 + 9));
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100087AF4(a1 + 51, &v10);
    v5 = (sqlite3_stmt *)sub_100026CC8(v10);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = a1[10];
      v7 = (sqlite3_stmt *)sub_100026CC8(v10);
      sub_10023C9B0(v6, v7);
    }
    v8 = a1[10];
    if (*(uint64_t *)(v8 + 88) <= 0)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = *(_QWORD *)(v8 + 88);
    sub_100053048(v8, v9);
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100DF9F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF9F90(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;

  result = sub_1000892F8(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 536), &v8);
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    if (sub_1000890C4(v5, 1, a2))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v8);
      sub_10023C9B0(v6, v7);
    }
    result = v8;
    v8 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100DFA020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DFA044(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  uint64_t v31;
  sqlite3_stmt *v32;
  NSObject *v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  _WORD v40[8];
  _BYTE v41[12];
  uint8_t buf[4];
  uint64_t v43;

  result = sub_1000892F8(a1 + 72);
  if ((_DWORD)result)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102188AD0);
    v5 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      v43 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[GaitMetricsRecorderDb] Inserting record %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102188AD0);
      v34 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)v41 = 134349056;
      *(_QWORD *)&v41[4] = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[GaitMetricsRecorderDb] Inserting record %{public}f", v41, 12);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMobility::GaitMetricsRecorderDb::insertRecordUL(const GaitMetrics &, BOOL)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    sub_100087AF4((_QWORD *)(a1 + 520), v41);
    if (*(_QWORD *)v41)
    {
      v7 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
      if (sub_1000890C4(v7, 1, *(double *)(a2 + 8)))
      {
        v8 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
        if (sub_1000CC50C(v8, 2, *(_QWORD *)(a2 + 16)))
        {
          v9 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
          if (sub_1000890C4(v9, 3, *(float *)(a2 + 24)))
          {
            v10 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
            if (sub_1000890C4(v10, 4, *(float *)(a2 + 28)))
            {
              v11 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
              if (sub_1000890C4(v11, 5, *(float *)(a2 + 32)))
              {
                v12 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                if (sub_1000CD75C(v12, 6, *(unsigned __int8 *)(a2 + 40)))
                {
                  v13 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                  if (sub_1000890C4(v13, 7, *(float *)(a2 + 36)))
                  {
                    v14 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                    if (sub_1000CD75C(v14, 8, *(unsigned __int8 *)(a2 + 41)))
                    {
                      v15 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                      if (sub_1000CD75C(v15, 9, *(unsigned __int8 *)(a2 + 42)))
                      {
                        v16 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                        if (sub_1000CD75C(v16, 10, *(unsigned __int8 *)(a2 + 43)))
                        {
                          v17 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                          if (sub_1000CD75C(v17, 11, *(unsigned __int8 *)(a2 + 44)))
                          {
                            v18 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                            if (sub_1000890C4(v18, 12, *(float *)(a2 + 48)))
                            {
                              v19 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                              if (sub_1000CD75C(v19, 13, *(unsigned __int8 *)(a2 + 45)))
                              {
                                v20 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                if (sub_1000CD75C(v20, 14, *(unsigned __int8 *)(a2 + 46)))
                                {
                                  v21 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                  if (sub_1000890C4(v21, 15, *(float *)(a2 + 52)))
                                  {
                                    v22 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                    if (sub_1000CD75C(v22, 16, *(unsigned __int8 *)(a2 + 56)))
                                    {
                                      v23 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                      if (sub_1000890C4(v23, 17, *(float *)(a2 + 60)))
                                      {
                                        v24 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                        if (sub_1000CD75C(v24, 18, *(unsigned __int8 *)(a2 + 64)))
                                        {
                                          v25 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                          if (sub_1000890C4(v25, 19, *(float *)(a2 + 68)))
                                          {
                                            v26 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                            if (sub_1000890C4(v26, 20, *(float *)(a2 + 72)))
                                            {
                                              v27 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                              if (sub_1000890C4(v27, 21, *(float *)(a2 + 76)))
                                              {
                                                v28 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                                if (sub_1000890C4(v28, 22, *(float *)(a2 + 80)))
                                                {
                                                  v29 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                                  if (sub_1000890C4(v29, 23, *(float *)(a2 + 84)))
                                                  {
                                                    v30 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                                    if (sub_1000890C4(v30, 24, *(float *)(a2 + 88)))
                                                    {
                                                      v31 = *(_QWORD *)(a1 + 80);
                                                      v32 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v41);
                                                      sub_10023C9B0(v31, v32);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102188AD0);
      v33 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "GaitMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102188AD0);
        v40[0] = 0;
        LODWORD(v39) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 17, "GaitMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", v40, v39);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMobility::GaitMetricsRecorderDb::insertRecordUL(const GaitMetrics &, BOOL)", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
    }
    result = *(_QWORD *)v41;
    *(_QWORD *)v41 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100DFA5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DFA61C()
{
  return 0;
}

uint64_t sub_100DFA624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  if (!sub_1000892F8(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 504), &v12);
  v4 = v12;
  if (v12)
  {
    v5 = sub_100DF8AE4(&v12, a2);
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102188AD0);
    v6 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "GaitMetricsRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102188AD0);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 17, "GaitMetricsRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", &v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLMobility::GaitMetricsRecorderDb::getMostRecentRecordUL(GaitMetrics &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = 2;
  }
  v7 = v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v4)
    return 2;
  return v5;
}

void sub_100DFA814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DFA844(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021890C8);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021890C8);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100DFB9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100DFBCFC(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10192B4B4(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100DFC0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_100DFC118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021890C8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021890C8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021890C8);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100DFC710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100DFC740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id *sub_100DFC764(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  int v35;
  __int128 v36;
  _BYTE v37[23];
  uint64_t v38;
  char v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45[2];
  int v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  double v51;
  __int16 v52;
  uint64_t v53;

  v45[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v45[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v45);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v35 = 0;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  v38 = 0x3FD9999A00000000;
  v39 = 0;
  v40 = 1116213084;
  v41 = 0;
  v42 = 0;
  v44 = 0;
  v43 = 0;
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v35);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021890C8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021890C8);
        LOWORD(v46) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v46, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = *(double *)&v36;
    v9 = v7 - *(double *)&v36;
    if (v7 - *(double *)&v36 < 0.0)
      v9 = -(v7 - *(double *)&v36);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021890C8);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v51 = *(double *)&v36;
        v52 = 2050;
        v53 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021890C8);
        v26 = *(_QWORD *)(a2 + 8);
        v46 = 134349312;
        v47 = *(double *)&v36;
        v48 = 2050;
        v49 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v46, 22);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = *(double *)&v36;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021890C8);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v51 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021890C8);
          v29 = *(double *)(a2 + 8);
          v46 = 134217984;
          v47 = v29;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v46));
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021890C8);
        v18 = v34;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v51 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021890C8);
        v46 = 134217984;
        v47 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v46));
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v35, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 256) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v45);
}

void sub_100DFCF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DFCF30(uint64_t a1)
{
  return sub_100DFC118(a1 - 72);
}

void sub_100DFCF38(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100DFCF64(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10192B620(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100DFD2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_1018B38B4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_100DFD33C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10192B78C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100DFD59C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192B8F8(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100DFD7D4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192BA64(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100DFD9FC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100DFDA28()
{
  NSObject *v0;
  const char *v1;
  void **v2;
  __int16 v3;
  _BYTE v4[136];
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  char *__dst[33];

  sub_1015A2E04(__p, "");
  v5 = 0x200000000;
  v6 = 0;
  if (SHIBYTE(v11) < 0)
  {
    sub_100115CE4(&v7, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    v8 = v11;
    v9 = 0;
  }
  sub_100631F84(v4, &v5);
  memcpy(__dst, off_1021890E8, sizeof(__dst));
  if (sub_1000CC4F4((uint64_t)v4))
  {
    sub_10063E3C0((uint64_t)v4, __dst);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102189358);
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "consolidated database not valid; unable to drop obsolete tables",
        (uint8_t *)__p,
        2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102189358);
      v3 = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_1022A0288, 17, "consolidated database not valid; unable to drop obsolete tables",
        &v3,
        2);
      v2 = (void **)v1;
      sub_100512490("Generic", 1, 0, 0, "void SqliteDatabase_Helper_dropObsoleteTablesFromConsolidatedDatabase()", "%s\n", v1);
      if (v2 != __p)
        free(v2);
    }
  }
  sub_1006322C0(v4);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)v7);
}

void sub_100DFDC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_1006322C0(&a12);
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100DFDCB0()
{
  NSObject *v0;
  const char *v1;
  void **v2;
  __int16 v3;
  _BYTE v4[136];
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  char *__dst[45];

  memcpy(__dst, off_1021891F0, sizeof(__dst));
  sub_1015A2E04(__p, "");
  v5 = 0x100000002;
  v6 = 0;
  if (SHIBYTE(v11) < 0)
  {
    sub_100115CE4(&v7, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    v8 = v11;
    v9 = 0;
  }
  sub_100631F84(v4, &v5);
  if (sub_1000CC4F4((uint64_t)v4))
  {
    sub_10063E3C0((uint64_t)v4, __dst);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102189358);
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Class B database not valid; unable to drop obsolete tables",
        (uint8_t *)__p,
        2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102189358);
      v3 = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_1022A0288, 17, "Class B database not valid; unable to drop obsolete tables",
        &v3,
        2);
      v2 = (void **)v1;
      sub_100512490("Generic", 1, 0, 0, "void SqliteDatabase_Helper_dropObsoleteTablesFromClassBDatabase()", "%s\n", v1);
      if (v2 != __p)
        free(v2);
    }
  }
  sub_1006322C0(v4);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)v7);
}

void sub_100DFDEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_1006322C0(&a12);
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100DFDF38(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100DFDF64(_QWORD *a1, double *a2)
{
  _DWORD *v4;
  void *__p;
  void *v6;
  _DWORD *v7;
  _QWORD v8[19];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v14[6];
  char v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[25];
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _BYTE v46[11];
  int v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  unint64_t v98;
  __int16 v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 5;
  v6 = v4 + 1;
  v7 = v4 + 1;
  v9 = 0;
  *(_OWORD *)v8 = xmmword_101BB1ED0;
  memset(&v8[2], 0, 135);
  v10 = xmmword_101BB1ED0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14[0] = 0;
  *(_QWORD *)((char *)v14 + 5) = 0;
  *(_QWORD *)((char *)&v14[1] + 6) = 0;
  v15 = 0;
  memset(&v14[3], 0, 24);
  v16 = xmmword_101BB1ED0;
  v17 = 0;
  v18 = 0;
  v19 = 0xFFEFFFFFFFFFFFFFLL;
  v30 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  memset(v29, 0, sizeof(v29));
  v31 = 0;
  v32 = 0;
  v33 = 0xFFEFFFFFFFFFFFFFLL;
  v34 = 0;
  v35 = 0;
  v41 = 0;
  v42 = 0;
  v47 = 0;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v44 = 0u;
  v43 = 0u;
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v48 = 0xFFEFFFFFFFFFFFFFLL;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v68 = 0;
  v69 = 0xFFEFFFFFFFFFFFFFLL;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0xFFEFFFFFFFFFFFFFLL;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0xFFEFFFFFFFFFFFFFLL;
  v81 = 0;
  v80 = 0;
  v82 = 0x80000000800000;
  v84 = 0;
  v83 = 0;
  v85 = xmmword_101BB1EE0;
  v86 = 0x80000000800000;
  v87 = 0u;
  v88 = 0u;
  v89 = 0;
  v90 = 0xFFEFFFFFFFFFFFFFLL;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0;
  v98 = 0xFFEFFFFFFFFFFFFFLL;
  v99 = 0;
  v100 = 0;
  v101 = 0xFFEFFFFFFFFFFFFFLL;
  v102 = 7;
  v103 = 0xFFEFFFFFFFFFFFFFLL;
  v104 = 0;
  v106 = 0;
  v105 = 0;
  v107 = 0;
  if (sub_1000D03AC(a2, &__p, (uint64_t)v8))
    sub_100DFE218(a1 + 11, (uint64_t)&v69);
  else
    sub_100DFE268(a1);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_100DFE1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DFE218(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;

  sub_1005549C4(a1, a2);
  v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100554D9C((uint64_t)a1, 1);
  }
}

void sub_100DFE268(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[12];
  v3 = a1[13];
  a1[16] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[13];
      v2 = (void **)(a1[12] + 8);
      a1[12] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 28;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 56;
  }
  a1[15] = v6;
}

uint64_t sub_100DFE2DC()
{
  return 0;
}

double sub_100DFE2E4(uint64_t a1)
{
  double v1;
  int v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  double v22[5];
  double v23[5];
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;

  v2 = *(_DWORD *)(a1 + 80);
  switch(v2)
  {
    case 2:
      v6 = (_QWORD *)(a1 + 88);
      v26[0] = off_102189678;
      v26[1] = sub_100DFE628;
      v27 = v26;
      v7.n128_f64[0] = sub_100554DF8((_QWORD *)(a1 + 88), 6uLL, 0xAuLL, (uint64_t)v26, (uint64_t)v23);
      v8 = v27;
      if (v27 == v26)
      {
        v9 = 4;
        v8 = v26;
      }
      else
      {
        if (!v27)
          goto LABEL_22;
        v9 = 5;
      }
      (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_22:
      v24[0] = off_102189678;
      v24[1] = sub_100DFE648;
      v25 = v24;
      v17.n128_f64[0] = sub_100554DF8(v6, 3uLL, 5uLL, (uint64_t)v24, (uint64_t)v22);
      v18 = v25;
      if (v25 == v24)
      {
        v19 = 4;
        v18 = v24;
      }
      else
      {
        if (!v25)
        {
LABEL_32:
          if (v22[0] >= v23[0] || v23[0] == -1.0)
            return v23[0];
          else
            return v22[0];
        }
        v19 = 5;
      }
      (*(void (**)(__n128))(*v18 + 8 * v19))(v17);
      goto LABEL_32;
    case 1:
      v10 = (_QWORD *)(a1 + 88);
      v30[0] = off_102189678;
      v30[1] = sub_100DFE628;
      v31 = v30;
      v11.n128_f64[0] = sub_100554DF8((_QWORD *)(a1 + 88), 0x19uLL, 0x28uLL, (uint64_t)v30, (uint64_t)v23);
      v12 = v31;
      if (v31 == v30)
      {
        v13 = 4;
        v12 = v30;
      }
      else
      {
        if (!v31)
          goto LABEL_15;
        v13 = 5;
      }
      (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_15:
      v28[0] = off_102189678;
      v28[1] = sub_100DFE648;
      v29 = v28;
      v14.n128_f64[0] = sub_100554DF8(v10, 0xCuLL, 0x10uLL, (uint64_t)v28, (uint64_t)v22);
      v15 = v29;
      if (v29 == v28)
      {
        v16 = 4;
        v15 = v28;
      }
      else
      {
        if (!v29)
          goto LABEL_27;
        v16 = 5;
      }
      (*(void (**)(__n128))(*v15 + 8 * v16))(v14);
LABEL_27:
      if (v22[0] == -1.0)
        return v23[0];
      else
        return v22[0];
    case 0:
      v32[0] = off_102189678;
      v32[1] = sub_100DFE628;
      v33 = v32;
      v3.n128_f64[0] = sub_100554DF8((_QWORD *)(a1 + 88), 0x1EuLL, 0x24uLL, (uint64_t)v32, (uint64_t)v23);
      v1 = v23[0];
      v4 = v33;
      if (v33 == v32)
      {
        v5 = 4;
        v4 = v32;
        goto LABEL_19;
      }
      if (v33)
      {
        v5 = 5;
LABEL_19:
        (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
      }
      break;
  }
  return v1;
}

void sub_100DFE580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  char *v31;
  char *v33;
  uint64_t v34;

  v33 = a23;
  if (a23 == v31)
  {
    v34 = 4;
    v33 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DFE628(uint64_t a1)
{
  return *(float *)(a1 + 68) < 17.0 && (unint64_t)(*(_QWORD *)(a1 + 16) - 1) < 2;
}

BOOL sub_100DFE648(uint64_t a1)
{
  return *(float *)(a1 + 68) < 17.0 && *(_QWORD *)(a1 + 16) == 2;
}

double sub_100DFE664(_QWORD *a1)
{
  _QWORD *v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  double v12[5];
  double v13[5];
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;

  v2 = a1 + 11;
  v16[0] = off_102189678;
  v16[1] = sub_100DFE838;
  v17 = v16;
  v3.n128_f64[0] = sub_100554DF8(a1 + 11, 3uLL, 5uLL, (uint64_t)v16, (uint64_t)v13);
  v4 = v17;
  if (v17 == v16)
  {
    v5 = 4;
    v4 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  v6 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v3);
  sub_100DFE858(v6, (uint64_t)"notIsStraightPedEpochRun", 0, (uint64_t)v13);
  v14[0] = off_102189678;
  v14[1] = sub_100DFEA84;
  v15 = v14;
  v7.n128_f64[0] = sub_100554DF8(v2, 6uLL, 0xAuLL, (uint64_t)v14, (uint64_t)v12);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_11:
  v10 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v7);
  sub_100DFE858(v10, (uint64_t)"notIsPedEpochRun", 0, (uint64_t)v12);
  result = v13[0];
  if (v13[0] == -1.0)
    return v12[0];
  return result;
}

void sub_100DFE7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DFE838(uint64_t a1)
{
  return *(float *)(a1 + 68) >= 17.0 || (unint64_t)(*(_QWORD *)(a1 + 16) - 3) < 0xFFFFFFFFFFFFFFFELL;
}

void sub_100DFE858(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102189648);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a4 + 16);
    v10 = *(_QWORD *)(a4 + 24);
    v11 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)buf = 136316418;
    v30 = a2;
    v31 = 2048;
    v32 = a1;
    v33 = 1024;
    v34 = a3;
    v35 = 2048;
    v36 = v9;
    v37 = 2048;
    v38 = v10;
    v39 = 1024;
    v40 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Model,%s,type,%lu,active,%d,M,%lu,N,%lu,cnt,%d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102189648);
    v12 = *(_QWORD *)(a4 + 16);
    v13 = *(_QWORD *)(a4 + 24);
    v14 = *(_DWORD *)(a4 + 8);
    v17 = 136316418;
    v18 = a2;
    v19 = 2048;
    v20 = a1;
    v21 = 1024;
    v22 = a3;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 1024;
    v28 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Model,%s,type,%lu,active,%d,M,%lu,N,%lu,cnt,%d", (const char *)&v17, 54);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void logMofNResult(CMWorkoutType, const char *, BOOL, const HistoryHelper::MofNResult &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

BOOL sub_100DFEA84(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 16) - 3) < 0xFFFFFFFFFFFFFFFELL;
}

void sub_100DFEA98(_QWORD *a1, double *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  BOOL v6;
  void *v7;
  void *v8;
  _DWORD *v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[19];
  __int16 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD v24[6];
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[25];
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  _BYTE v56[11];
  int v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[72];
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  unint64_t v104;
  __int16 v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  *(_OWORD *)v18 = xmmword_101BB1ED0;
  v19 = 0;
  memset(&v18[2], 0, 135);
  v20 = xmmword_101BB1ED0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24[0] = 0;
  *(_QWORD *)((char *)v24 + 5) = 0;
  *(_QWORD *)((char *)&v24[1] + 6) = 0;
  v25 = 0;
  memset(&v24[3], 0, 24);
  v26 = xmmword_101BB1ED0;
  v27 = 0;
  v28 = 0;
  v29 = -1.79769313e308;
  v40 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  memset(v39, 0, sizeof(v39));
  v41 = 0;
  v42 = 0;
  v43 = 0xFFEFFFFFFFFFFFFFLL;
  v44 = 0;
  v45 = 0;
  v51 = 0;
  v52 = 0;
  v57 = 0;
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v54 = 0u;
  v53 = 0u;
  v55 = 0;
  memset(v56, 0, sizeof(v56));
  v58 = 0xFFEFFFFFFFFFFFFFLL;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v78 = 0;
  *(_QWORD *)v79 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v79[8], 0, 64);
  v80 = 0xFFEFFFFFFFFFFFFFLL;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0xFFEFFFFFFFFFFFFFLL;
  v87 = 0;
  v86 = 0;
  v88 = 0x80000000800000;
  v90 = 0;
  v89 = 0;
  v91 = xmmword_101BB1EE0;
  v92 = 0x80000000800000;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  v96 = 0xFFEFFFFFFFFFFFFFLL;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  v104 = 0xFFEFFFFFFFFFFFFFLL;
  v105 = 0;
  v106 = 0;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 7;
  v109 = 0xFFEFFFFFFFFFFFFFLL;
  v110 = 0;
  v112 = 0;
  v111 = 0;
  v113 = 0;
  v4 = operator new(4uLL);
  __p[0] = v4;
  *v4 = 5;
  __p[1] = v4 + 1;
  *(_QWORD *)&v11 = v4 + 1;
  sub_1000D03AC(a2, __p, (uint64_t)v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v15 = 0;
  v16 = 0;
  if (*(double *)v79 == -1.79769313e308)
  {
    sub_100DFEE68(a1);
  }
  else
  {
    v12 = *(_OWORD *)&v79[32];
    v13 = *(_OWORD *)&v79[48];
    v14 = *(_QWORD *)&v79[64];
    *(_OWORD *)__p = *(_OWORD *)v79;
    v11 = *(_OWORD *)&v79[16];
    v17 = *(_QWORD *)v79;
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1) == 2)
    {
      v5 = operator new(4uLL);
      v7 = v5;
      *v5 = 2;
      v9 = v5 + 1;
      v8 = v5 + 1;
      sub_1000D03AC(a2, &v7, (uint64_t)v18);
      if (v7)
      {
        v8 = v7;
        operator delete(v7);
      }
      v15 = v32;
      v6 = v29 != -1.79769313e308;
      if (*(double *)&v32 < 0.0)
        v6 = 0;
      v16 = v6;
    }
    sub_100DFEE18(a1 + 11, (uint64_t)__p);
  }
}

void sub_100DFEDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DFEE18(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;

  sub_100E009D4(a1, a2);
  v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_1005C9C0C((uint64_t)a1, 1);
  }
}

void sub_100DFEE68(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[12];
  v3 = a1[13];
  a1[16] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[13];
      v2 = (void **)(a1[12] + 8);
      a1[12] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 21;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 42;
  }
  a1[15] = v6;
}

uint64_t sub_100DFEEDC(uint64_t a1)
{
  __n128 v1;
  _QWORD *v2;
  uint64_t v3;
  double v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  double v9[4];
  unsigned __int8 v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;

  v11[0] = off_102189718;
  v11[1] = sub_100DFF054;
  v12 = v11;
  v13[0] = off_102189718;
  v14 = v13;
  v13[1] = sub_100DFF054;
  v1.n128_f64[0] = sub_100DFF300((_QWORD *)(a1 + 88), 2uLL, 8uLL, (uint64_t)v13, (uint64_t)v9);
  v2 = v14;
  if (v14 == v13)
  {
    v3 = 4;
    v2 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(__n128))(*v2 + 8 * v3))(v1);
LABEL_6:
  v4 = v9[0];
  v5 = v10;
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(__n128))(*v6 + 8 * v7))(v1);
LABEL_11:
  if (v4 == -1.0)
    return v5;
  else
    return 2;
}

void sub_100DFEFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DFF054(uint64_t a1)
{
  return *(float *)(a1 + 24) > 0.825 && *(_QWORD *)(a1 + 16) == 4;
}

void sub_100DFF074(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;

  v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = qword_101C27CD0[v2];
    v4 = qword_101C27D00[v2];
  }
  v21[0] = off_102189718;
  v21[1] = sub_100DFF054;
  v22 = v21;
  v5.n128_f64[0] = sub_100DFF300((_QWORD *)(a1 + 88), v3, v4, (uint64_t)v21, (uint64_t)v16);
  v6 = v22;
  if (v22 == v21)
  {
    v7 = 4;
    v6 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_9;
    v7 = 5;
  }
  (*(void (**)(__n128))(*v6 + 8 * v7))(v5);
LABEL_9:
  v19[0] = off_102189718;
  v19[1] = sub_100DFF488;
  v20 = v19;
  v8.n128_f64[0] = sub_100DFF300((_QWORD *)(a1 + 88), 1uLL, v4, (uint64_t)v19, (uint64_t)v15);
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_14;
    v10 = 5;
  }
  (*(void (**)(__n128))(*v9 + 8 * v10))(v8);
LABEL_14:
  v17[0] = off_102189718;
  v17[1] = sub_100DFF490;
  v18 = v17;
  v11.n128_f64[0] = sub_100DFF300((_QWORD *)(a1 + 88), 1uLL, v4, (uint64_t)v17, (uint64_t)v15);
  v12 = v18;
  if (v18 == v17)
  {
    v13 = 4;
    v12 = v17;
    goto LABEL_18;
  }
  if (v18)
  {
    v13 = 5;
LABEL_18:
    (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_100DFE858(v14, (uint64_t)"isOutdoorCycleEpoch", 1, (uint64_t)v16);
}

void sub_100DFF288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a23;
  if (a23 == v27)
  {
    v30 = 4;
    v29 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_100DFF300@<D0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;

  *(_QWORD *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  v10 = a1[4];
  v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  v11 = v10 + v9;
  v12 = (v10 + v9) / 0x2A;
  v13 = a1[1];
  v14 = a1[2];
  v15 = (_QWORD *)(v13 + 8 * v12);
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + 96 * (v11 - 42 * v12);
  if (a3 <= 1)
    v17 = 1;
  else
    v17 = a3;
  for (i = v17 - 1; ; --i)
  {
    v19 = v14 == v13 ? 0 : *(_QWORD *)(v13 + 8 * (a1[4] / 0x2AuLL)) + 96 * (a1[4] % 0x2AuLL);
    if (v16 == v19)
      break;
    v20 = v16;
    if (v16 == *v15)
      v20 = *(v15 - 1) + 4032;
    v21 = *(_QWORD *)(a4 + 24);
    if (!v21)
      sub_10025FD1C();
    v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v21, v20 - 96);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15)
        v16 = *(v15 - 1) + 4032;
      result = *(double *)(v16 - 8);
      *(double *)a5 = result;
      return result;
    }
    if (!i)
      return result;
    if (v16 == *v15)
    {
      v24 = *--v15;
      v16 = v24 + 4032;
    }
    v16 -= 96;
    v13 = a1[1];
    v14 = a1[2];
  }
  return result;
}

uint64_t sub_100DFF488(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

BOOL sub_100DFF490(uint64_t a1)
{
  return *(double *)(a1 + 72) > 1.72110396 && *(_BYTE *)(a1 + 80) != 0;
}

double sub_100DFF4B0(_QWORD *a1)
{
  _QWORD *v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  double result;
  _QWORD v18[5];
  double v19[5];
  double v20[5];
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;

  v2 = a1 + 11;
  v25[0] = off_102189718;
  v25[1] = sub_100DFF730;
  v26 = v25;
  v3.n128_f64[0] = sub_100DFF300(a1 + 11, 3uLL, 5uLL, (uint64_t)v25, (uint64_t)v20);
  v4 = v26;
  if (v26 == v25)
  {
    v5 = 4;
    v4 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  v6 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v3);
  sub_100DFE858(v6, (uint64_t)"notIsOutdoorCycleEpoch", 0, (uint64_t)v20);
  v23[0] = off_102189718;
  v23[1] = sub_100DFF740;
  v24 = v23;
  v7.n128_f64[0] = sub_100DFF300(v2, 1uLL, 5uLL, (uint64_t)v23, (uint64_t)v19);
  v8 = v24;
  if (v24 == v23)
  {
    v9 = 4;
    v8 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_11:
  v10 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v7);
  sub_100DFE858(v10, (uint64_t)"isPedEpochOutdoorCycle", 0, (uint64_t)v19);
  v21[0] = off_102189718;
  v21[1] = sub_100DFF730;
  v22 = v21;
  v11.n128_f64[0] = sub_100DFF300(v2, 6uLL, 0xAuLL, (uint64_t)v21, (uint64_t)v18);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_16:
  v14 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v11);
  sub_100DFE858(v14, (uint64_t)"notIsOutdoorCycleEpoch", 0, (uint64_t)v18);
  if (v19[0] >= v20[0])
    v15 = v20[0];
  else
    v15 = v19[0];
  v16 = v19[0] == -1.0 || v20[0] == -1.0;
  result = *(double *)v18;
  if (!v16)
    return v15;
  return result;
}

void sub_100DFF6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DFF730(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 4;
}

BOOL sub_100DFF740(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 16) - 1) < 2;
}

uint64_t sub_100DFF754()
{
  return 0;
}

double sub_100DFF75C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  _QWORD v11[3];
  _QWORD *v12;

  v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = qword_101C27CE8[v2];
    v4 = qword_101C27D00[v2];
  }
  v11[0] = off_102189678;
  v11[1] = sub_100DFF8A0;
  v12 = v11;
  v5.n128_f64[0] = sub_100554DF8((_QWORD *)(a1 + 88), v3, v4, (uint64_t)v11, (uint64_t)v10);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_8;
  }
  if (v12)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(__n128))(*v6 + 8 * v7))(v5);
  }
  v8 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v5);
  sub_100DFE858(v8, (uint64_t)"isIndoorCycleEpoch", 1, (uint64_t)v10);
  return *(double *)v10;
}

void sub_100DFF860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DFF8A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 5;
}

double sub_100DFF8B0(_QWORD *a1)
{
  _QWORD *v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  double result;
  _QWORD v18[5];
  double v19[5];
  double v20[5];
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;

  v2 = a1 + 11;
  v25[0] = off_102189678;
  v25[1] = sub_100DFFB30;
  v26 = v25;
  v3.n128_f64[0] = sub_100554DF8(a1 + 11, 3uLL, 5uLL, (uint64_t)v25, (uint64_t)v20);
  v4 = v26;
  if (v26 == v25)
  {
    v5 = 4;
    v4 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  v6 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v3);
  sub_100DFE858(v6, (uint64_t)"notIsIndoorCycleEpoch", 0, (uint64_t)v20);
  v23[0] = off_102189678;
  v23[1] = sub_100DFFB44;
  v24 = v23;
  v7.n128_f64[0] = sub_100554DF8(v2, 1uLL, 5uLL, (uint64_t)v23, (uint64_t)v19);
  v8 = v24;
  if (v24 == v23)
  {
    v9 = 4;
    v8 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_11:
  v10 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v7);
  sub_100DFE858(v10, (uint64_t)"isPedEpochIndoorCycle", 0, (uint64_t)v19);
  v21[0] = off_102189678;
  v21[1] = sub_100DFFB30;
  v22 = v21;
  v11.n128_f64[0] = sub_100554DF8(v2, 6uLL, 0xAuLL, (uint64_t)v21, (uint64_t)v18);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_16:
  v14 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v11);
  sub_100DFE858(v14, (uint64_t)"notIsIndoorCycleEpoch", 0, (uint64_t)v18);
  if (v19[0] >= v20[0])
    v15 = v20[0];
  else
    v15 = v19[0];
  v16 = v19[0] == -1.0 || v20[0] == -1.0;
  result = *(double *)v18;
  if (!v16)
    return v15;
  return result;
}

void sub_100DFFAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100DFFB30(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return v1 != 5 && v1 != 9;
}

BOOL sub_100DFFB44(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 16) - 1) < 2;
}

void sub_100DFFB58(_QWORD *a1, double *a2)
{
  _QWORD *v4;
  void *__p;
  void *v6;
  _QWORD *v7;
  __int128 v8[4];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[19];
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD v28[6];
  char v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[25];
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  _BYTE v60[11];
  int v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[72];
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  __int16 v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v4 = operator new(8uLL);
  __p = v4;
  *v4 = 0x900000005;
  v6 = v4 + 1;
  v7 = v4 + 1;
  v23 = 0;
  *(_OWORD *)v22 = xmmword_101BB1ED0;
  memset(&v22[2], 0, 135);
  v24 = xmmword_101BB1ED0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28[0] = 0;
  *(_QWORD *)((char *)v28 + 5) = 0;
  *(_QWORD *)((char *)&v28[1] + 6) = 0;
  v29 = 0;
  memset(&v28[3], 0, 24);
  v30 = xmmword_101BB1ED0;
  v31 = 0;
  v32 = 0;
  v33 = 0xFFEFFFFFFFFFFFFFLL;
  v44 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  v45 = 0;
  v46 = 0;
  v47 = 0xFFEFFFFFFFFFFFFFLL;
  v48 = 0;
  v49 = 0;
  v55 = 0;
  v56 = 0;
  v61 = 0;
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v58 = 0u;
  v57 = 0u;
  v59 = 0;
  memset(v60, 0, sizeof(v60));
  v62 = 0xFFEFFFFFFFFFFFFFLL;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v82 = 0;
  *(_QWORD *)v83 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v83[8], 0, 64);
  v84 = 0xFFEFFFFFFFFFFFFFLL;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0xFFEFFFFFFFFFFFFFLL;
  v91 = 0;
  v90 = 0;
  v92 = 0x80000000800000;
  v94 = 0;
  v93 = 0;
  v95 = xmmword_101BB1EE0;
  v96 = 0x80000000800000;
  v97 = 0u;
  v98 = 0u;
  *(_QWORD *)&v99 = 0;
  *((_QWORD *)&v99 + 1) = 0xFFEFFFFFFFFFFFFFLL;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  LODWORD(v106) = 0;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 0;
  v109 = 0;
  v110 = 0xFFEFFFFFFFFFFFFFLL;
  v111 = 7;
  v112 = 0xFFEFFFFFFFFFFFFFLL;
  v113 = 0;
  v115 = 0;
  v114 = 0;
  v116 = 0;
  sub_1000D03AC(a2, &__p, (uint64_t)v22);
  if (*(double *)v83 == -1.79769313e308)
  {
    sub_100DFFEF8(a1);
  }
  else
  {
    v8[2] = *(_OWORD *)&v83[32];
    v8[3] = *(_OWORD *)&v83[48];
    v9 = *(_QWORD *)&v83[64];
    v8[0] = *(_OWORD *)v83;
    v8[1] = *(_OWORD *)&v83[16];
    v16 = v103;
    v17 = v104;
    v18 = v105;
    v19 = v106;
    v20 = 0;
    v12 = v99;
    v13 = v100;
    v14 = v101;
    v15 = v102;
    v10 = v97;
    v11 = v98;
    LOBYTE(v20) = *((double *)&v99 + 1) != -1.79769313e308;
    v21 = *(_QWORD *)v83;
    sub_100DFFEA8(a1 + 11, v8);
  }
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_100DFFE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DFFEA8(_QWORD *a1, __int128 *a2)
{
  unint64_t v3;

  sub_100E00E54(a1, a2);
  v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_1006927B8((uint64_t)a1, 1);
  }
}

void sub_100DFFEF8(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[12];
  v3 = a1[13];
  a1[16] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[13];
      v2 = (void **)(a1[12] + 8);
      a1[12] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 8;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 17;
  }
  a1[15] = v6;
}

uint64_t sub_100DFFF6C(uint64_t a1)
{
  __n128 v1;
  _QWORD *v2;
  uint64_t v3;
  double v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  double v9[4];
  unsigned __int8 v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;

  v11[0] = off_1021897C8;
  v11[1] = sub_100E000E4;
  v12 = v11;
  v13[0] = off_1021897C8;
  v14 = v13;
  v13[1] = sub_100E000E4;
  v1.n128_f64[0] = sub_100E0024C((_QWORD *)(a1 + 88), 2uLL, 8uLL, (uint64_t)v13, (uint64_t)v9);
  v2 = v14;
  if (v14 == v13)
  {
    v3 = 4;
    v2 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(__n128))(*v2 + 8 * v3))(v1);
LABEL_6:
  v4 = v9[0];
  v5 = v10;
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(__n128))(*v6 + 8 * v7))(v1);
LABEL_11:
  if (v4 == -1.0)
    return v5;
  else
    return 2;
}

void sub_100E00078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

BOOL sub_100E000E4(uint64_t a1)
{
  return *(float *)(a1 + 24) > 0.775 && *(_QWORD *)(a1 + 16) == 19;
}

double sub_100E00108(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  _QWORD v11[3];
  _QWORD *v12;

  v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = qword_101C27D18[v2];
    v4 = qword_101C27D30[v2];
  }
  v11[0] = off_1021897C8;
  v11[1] = sub_100E000E4;
  v12 = v11;
  v5.n128_f64[0] = sub_100E0024C((_QWORD *)(a1 + 88), v3, v4, (uint64_t)v11, (uint64_t)v10);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_8;
  }
  if (v12)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(__n128))(*v6 + 8 * v7))(v5);
  }
  v8 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v5);
  sub_100DFE858(v8, (uint64_t)"isSwimEpoch", 1, (uint64_t)v10);
  return *(double *)v10;
}

void sub_100E0020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_100E0024C@<D0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;

  *(_QWORD *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  v10 = a1[4];
  v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  v11 = v10 + v9;
  v12 = (v10 + v9) / 0x11;
  v13 = a1[1];
  v14 = a1[2];
  v15 = (_QWORD *)(v13 + 8 * v12);
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + 240 * (v11 - 17 * v12);
  if (a3 <= 1)
    v17 = 1;
  else
    v17 = a3;
  for (i = v17 - 1; ; --i)
  {
    v19 = v14 == v13 ? 0 : *(_QWORD *)(v13 + 8 * (a1[4] / 0x11uLL)) + 240 * (a1[4] % 0x11uLL);
    if (v16 == v19)
      break;
    v20 = v16;
    if (v16 == *v15)
      v20 = *(v15 - 1) + 4080;
    v21 = *(_QWORD *)(a4 + 24);
    if (!v21)
      sub_10025FD1C();
    v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v21, v20 - 240);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15)
        v16 = *(v15 - 1) + 4080;
      result = *(double *)(v16 - 8);
      *(double *)a5 = result;
      return result;
    }
    if (!i)
      return result;
    if (v16 == *v15)
    {
      v24 = *--v15;
      v16 = v24 + 4080;
    }
    v16 -= 240;
    v13 = a1[1];
    v14 = a1[2];
  }
  return result;
}

double sub_100E003C8(_QWORD *a1)
{
  _QWORD *v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL (*v6)(uint64_t);
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  double result;
  _QWORD v22[5];
  double v23[5];
  double v24[5];
  double v25[5];
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;

  v2 = a1 + 11;
  v32[0] = off_1021897C8;
  v32[1] = sub_100E006D8;
  v33 = v32;
  v3.n128_f64[0] = sub_100E0024C(a1 + 11, 1uLL, 0xFuLL, (uint64_t)v32, (uint64_t)v25);
  v4 = v33;
  if (v33 == v32)
  {
    v5 = 4;
    v4 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  if (v25[0] == -1.0)
    v6 = sub_100E006EC;
  else
    v6 = sub_100E0072C;
  v30[0] = off_1021897C8;
  v30[1] = v6;
  v31 = v30;
  v7.n128_f64[0] = sub_100E0024C(v2, 6uLL, 0xAuLL, (uint64_t)v30, (uint64_t)v24);
  v8 = v31;
  if (v31 == v30)
  {
    v9 = 4;
    v8 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_14;
    v9 = 5;
  }
  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_14:
  v10 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v7);
  sub_100DFE858(v10, (uint64_t)"notIsSwimEpoch", 0, (uint64_t)v24);
  v28[0] = off_1021897C8;
  v28[1] = sub_100E006D8;
  v29 = v28;
  v11.n128_f64[0] = sub_100E0024C(v2, 1uLL, 0xAuLL, (uint64_t)v28, (uint64_t)v23);
  v12 = v29;
  if (v29 == v28)
  {
    v13 = 4;
    v12 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_19;
    v13 = 5;
  }
  (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_19:
  v14 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v11);
  sub_100DFE858(v14, (uint64_t)"isPedEpochSwim", 0, (uint64_t)v23);
  v26[0] = off_1021897C8;
  v26[1] = v6;
  v27 = v26;
  v15.n128_f64[0] = sub_100E0024C(v2, 0xAuLL, 0xFuLL, (uint64_t)v26, (uint64_t)v22);
  v16 = v27;
  if (v27 == v26)
  {
    v17 = 4;
    v16 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_24;
    v17 = 5;
  }
  (*(void (**)(__n128))(*v16 + 8 * v17))(v15);
LABEL_24:
  v18 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 40))(a1, v15);
  sub_100DFE858(v18, (uint64_t)"notIsSwimEpoch", 0, (uint64_t)v22);
  if (v23[0] >= v24[0])
    v19 = v24[0];
  else
    v19 = v23[0];
  v20 = v23[0] == -1.0 || v24[0] == -1.0;
  result = *(double *)v22;
  if (!v20)
    return v19;
  return result;
}

void sub_100E00644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  char *v33;
  char *v35;
  uint64_t v36;

  v35 = a33;
  if (a33 == v33)
  {
    v36 = 4;
    v35 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100E006D8(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 16) - 1) < 2;
}

BOOL sub_100E006EC(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  char v8;

  result = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 224);
  v5 = *(_DWORD *)(a1 + 196);
  if (v4)
    v6 = v5 == 6;
  else
    v6 = 0;
  v8 = v6 && v3 != 4;
  if (v3 != 19 && (v8 & 1) == 0)
    return v3 != 5 && v3 != 9;
  return result;
}

BOOL sub_100E0072C(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  _BOOL4 v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 == 4;
  v3 = v1 != 19;
  if (*(_DWORD *)(a1 + 196) != 6 || *(_BYTE *)(a1 + 224) == 0)
    return v3;
  else
    return v2;
}

_QWORD *sub_100E0075C(_QWORD *a1)
{
  *a1 = off_102189388;
  sub_10055489C(a1 + 11);
  return a1;
}

void sub_100E0078C(_QWORD *a1)
{
  *a1 = off_102189388;
  sub_10055489C(a1 + 11);
  operator delete();
}

BOOL sub_100E007CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100F72C2C(a2);
  return v3 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

_QWORD *sub_100E0080C(_QWORD *a1)
{
  *a1 = off_1021894A8;
  sub_100D2C264(a1 + 11);
  return a1;
}

void sub_100E0083C(_QWORD *a1)
{
  *a1 = off_1021894A8;
  sub_100D2C264(a1 + 11);
  operator delete();
}

uint64_t sub_100E0087C()
{
  return 4;
}

_QWORD *sub_100E00888(_QWORD *a1)
{
  *a1 = off_1021895C8;
  sub_100691160(a1 + 11);
  return a1;
}

void sub_100E008B8(_QWORD *a1)
{
  *a1 = off_1021895C8;
  sub_100691160(a1 + 11);
  operator delete();
}

void sub_100E008FC(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

_QWORD *sub_100E00928(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189678;
  result[1] = v3;
  return result;
}

uint64_t sub_100E00960(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189678;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E00980(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100E0098C(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021896E8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100E009C8()
{
  return &off_1021896E8;
}

__n128 sub_100E009D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E00A94(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  result = *(__n128 *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v11;
  ++a1[5];
  return result;
}

void sub_100E00A94(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E00D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E00DA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189718;
  result[1] = v3;
  return result;
}

uint64_t sub_100E00DE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189718;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E00E00(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100E00E0C(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_102189798))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100E00E48()
{
  return &off_102189798;
}

__n128 sub_100E00E54(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) + ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E00F30(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x11)) + 240 * (v7 % 0x11);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  v14 = a2[7];
  v15 = a2[8];
  v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  result = (__n128)a2[11];
  v18 = a2[12];
  v19 = a2[14];
  *(_OWORD *)(v8 + 208) = a2[13];
  *(_OWORD *)(v8 + 224) = v19;
  *(__n128 *)(v8 + 176) = result;
  *(_OWORD *)(v8 + 192) = v18;
  ++a1[5];
  return result;
}

void sub_100E00F30(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x11;
  v4 = v2 - 17;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E011F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E01244(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021897C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E0127C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021897C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E0129C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100E012A8(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_102189848))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100E012E4()
{
  return &off_102189848;
}

double sub_100E012F0@<D0>(uint64_t a1@<X8>)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  int v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021898B8);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v9 = 0x4014000000000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Cross Training, Compendium METS, METS, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021898B8);
    v6 = 134217984;
    v7 = 0x4014000000000000;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Cross Training, Compendium METS, METS, %f", COERCE_DOUBLE(&v6));
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCrossTrainingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_OWORD *)a1 = xmmword_101C27D60;
  *(_QWORD *)(a1 + 16) = 0x40A0000000000000;
  *(_QWORD *)(a1 + 24) = 0x40A0000000000000;
  *(_QWORD *)&result = 0x400000003;
  *(_QWORD *)(a1 + 32) = 0x400000003;
  return result;
}

void sub_100E014CC(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100E014F8(uint64_t a1, uint64_t a2)
{
  double v3[3];

  return sub_100E01518(a1, a2, v3);
}

double sub_100E01518(uint64_t a1, uint64_t a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  double v10;
  uint64_t v11;
  double v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  v5 = sub_100E0179C(a1, *(unsigned __int8 *)(a2 + 48));
  a3[2] = v5;
  v6 = *(float *)(a2 + 20) * -0.699999988 + 208.0;
  v7 = v6 + -44.0;
  if (!*(_BYTE *)(a2 + 48))
    v7 = *(float *)(a2 + 20) * -0.699999988 + 208.0;
  *a3 = v6;
  a3[1] = v7;
  if (v5 < v7)
    v5 = v7;
  if (v5 >= v6)
    v8 = v6;
  else
    v8 = v5;
  if (qword_10229FE00 != -1)
    dispatch_once(&qword_10229FE00, &stru_1021898D8);
  v9 = qword_10229FE08;
  if (os_log_type_enabled((os_log_t)qword_10229FE08, OS_LOG_TYPE_DEBUG))
  {
    v10 = a3[2];
    v11 = *((_QWORD *)a3 + 1);
    if (v10 == -1.79769313e308)
      v10 = -1.0;
    *(_DWORD *)buf = 134284289;
    v26 = v10;
    v27 = 2049;
    v28 = v11;
    v29 = 2049;
    v30 = v6;
    v31 = 2049;
    v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "HRMaxEstimator,vo2MaxObservedHRMax,%{private}f,ageAndBetaBlockerPredictedHrMax,%{private}f,hrMaxCeiling,%{private}f,estimatedHRMax,%{private}f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE00 != -1)
      dispatch_once(&qword_10229FE00, &stru_1021898D8);
    v13 = a3[2];
    if (v13 == -1.79769313e308)
      v13 = -1.0;
    v14 = *((_QWORD *)a3 + 1);
    v17 = 134284289;
    v18 = v13;
    v19 = 2049;
    v20 = v14;
    v21 = 2049;
    v22 = v6;
    v23 = 2049;
    v24 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE08, 2, "HRMaxEstimator,vo2MaxObservedHRMax,%{private}f,ageAndBetaBlockerPredictedHrMax,%{private}f,hrMaxCeiling,%{private}f,estimatedHRMax,%{private}f", &v17, 42);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "double CLHRMaxEstimator::getEstimatedHRMax(const CLBodyMetrics &, CLHRMaxFeatures &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return v8;
}

double sub_100E0179C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  NSObject *v7;
  double v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  double v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v29;
  void *__p;
  char *v31;
  char *v32;
  void *v33;
  double *v34;
  uint64_t v35;
  int v36;
  double v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  int v43;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v3 = sub_101125448();
  CFAbsoluteTimeGetCurrent();
  sub_101125E68(v3, a2, &v33);
  __p = 0;
  v31 = 0;
  v32 = 0;
  v4 = (double *)v33;
  v5 = v34;
  if (v33 == v34)
    goto LABEL_46;
  do
  {
    if (v4[10] >= 0.6 && *((_QWORD *)v4 + 6) >= 0x1EuLL)
    {
      if (qword_10229FE00 != -1)
        dispatch_once(&qword_10229FE00, &stru_1021898D8);
      v7 = qword_10229FE08;
      if (os_log_type_enabled((os_log_t)qword_10229FE08, OS_LOG_TYPE_DEBUG))
      {
        v8 = v4[9];
        v9 = *((_DWORD *)v4 + 44);
        *(_DWORD *)buf = 134283777;
        v41 = v8;
        v42 = 1025;
        v43 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "HRMaxEstimator,clusterHrMean,%{private}f,vo2MaxModelSource,%{private}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE00 != -1)
          dispatch_once(&qword_10229FE00, &stru_1021898D8);
        v20 = v4[9];
        v21 = *((_DWORD *)v4 + 44);
        v36 = 134283777;
        v37 = v20;
        v38 = 1025;
        v39 = v21;
        LODWORD(v29) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE08, 2, "HRMaxEstimator,clusterHrMean,%{private}f,vo2MaxModelSource,%{private}d", &v36, v29);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "double CLHRMaxEstimator::getObservedHRMaxFromVO2MaxClusters(BOOL) const", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      if (*((_DWORD *)v4 + 44) == 1)
      {
        v10 = v31;
        if (v31 >= v32)
        {
          v12 = (char *)__p;
          v13 = (v31 - (_BYTE *)__p) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_100259694();
          v15 = v32 - (_BYTE *)__p;
          if ((v32 - (_BYTE *)__p) >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_10025E6A0((uint64_t)&v32, v16);
            v12 = (char *)__p;
            v10 = v31;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * v13];
          *(double *)v18 = v4[9];
          v11 = v18 + 8;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *((_QWORD *)v18 - 1) = v19;
            v18 -= 8;
          }
          __p = v18;
          v31 = v11;
          v32 = &v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(double *)v31 = v4[9];
          v11 = v10 + 8;
        }
        v31 = v11;
      }
    }
    v4 += 23;
  }
  while (v4 != v5);
  if ((unint64_t)(v31 - (_BYTE *)__p) <= 0x18)
  {
LABEL_46:
    v24 = -1.79769313e308;
  }
  else
  {
    v24 = sub_1011A2EC8((uint64_t)&__p, 95);
    if (qword_10229FE00 != -1)
      dispatch_once(&qword_10229FE00, &stru_1021898D8);
    v25 = qword_10229FE08;
    if (os_log_type_enabled((os_log_t)qword_10229FE08, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      v41 = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "HRMaxEstimator,observedHRMax,%{private}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE00 != -1)
        dispatch_once(&qword_10229FE00, &stru_1021898D8);
      v36 = 134283521;
      v37 = v24;
      LODWORD(v29) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE08, 2, "HRMaxEstimator,observedHRMax,%{private}f", &v36, v29);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "double CLHRMaxEstimator::getObservedHRMaxFromVO2MaxClusters(BOOL) const", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  if (v33)
  {
    v34 = (double *)v33;
    operator delete(v33);
  }
  return v24;
}

void sub_100E01C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100E01C94(id a1)
{
  qword_10229FE08 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HeartRate");
}

void sub_100E01D64(id a1)
{
  qword_102308948 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAvengerObservationReporterServiceSilo"));
}

id sub_100E02608(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD v5[5];

  v3 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100E0266C;
  v5[3] = &unk_10212BB58;
  v5[4] = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_100E0266C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102189938);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLAvengerObservationReporterService WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102189938);
    }
    v4 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLAvengerObservationReporterService WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received", "{\"msg%{public}.0s\":\"#CLAvengerObservationReporterService WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
    }
  }
}

void sub_100E029B0(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_100E029DC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100E02A08()
{
  sub_1015A2E04(&qword_102308930, "com.apple.camera");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102308930, (void *)&_mh_execute_header);
}

void sub_100E02A8C(id a1)
{
  if (sub_100760428())
  {
    sub_100197040();
    if ((sub_1001B796C() & 8) != 0)
      byte_102308960 = 1;
  }
}

void sub_100E02B44(id a1)
{
  qword_102308970 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLGnssProviderSilo"));
}

uint64_t sub_100E02BF8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100E04A28;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102308980 != -1)
    dispatch_once(&qword_102308980, block);
  return qword_102311720;
}

void sub_100E03178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E03528(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  std::string *v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  char v9;
  NSObject *v10;
  const char *v11;
  std::string *v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  std::string *p_buf;
  std::string *v17;
  std::string *v18;
  const char *v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  std::string buf;
  int v24;
  std::string *v25;
  std::string __p[68];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102189BB8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100CD5278(a2, __p);
    v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "state,%{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102189BB8);
    v15 = qword_1022A0088;
    sub_100CD5278(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v24 = 136446210;
    v25 = p_buf;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 2, "state,%{public}s", &v24, 12);
    v18 = v17;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v18);
    if (v18 != __p)
      free(v18);
  }
  v21 = *(_OWORD *)a2;
  v22 = a2[4];
  sub_10084ADCC((uint64_t *)(a1 + 120), &v21);
  v6 = *(unsigned __int8 *)(a1 + 3304);
  v7 = *(_BYTE *)(a1 + 3304) == 0;
  v8 = sub_100CD5700((uint64_t)a2);
  *(_BYTE *)(a1 + 3304) = v8;
  v9 = v7 && v8;
  if (v7 && v8)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102189BB8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "notifyEmergencyLocationStatus(true)", (uint8_t *)__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_28;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102189BB8);
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "notifyEmergencyLocationStatus(true)", &buf, v20);
    v12 = (std::string *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v11);
LABEL_42:
    if (v12 != __p)
      free(v12);
LABEL_28:
    sub_100E048B4((_BYTE *)a1, v9);
    return;
  }
  if (v6)
    v13 = v8;
  else
    v13 = 1;
  if ((v13 & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102189BB8);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "notifyEmergencyLocationStatus(false)", (uint8_t *)__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_28;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102189BB8);
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "notifyEmergencyLocationStatus(false)", &buf, v20);
    v12 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v19);
    goto LABEL_42;
  }
}

void sub_100E03A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100857FD0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E03B04(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[4];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Provider,addRhythmicGnssClient", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Provider,addRhythmicGnssClient", v14, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::addRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if ((sub_10003EC20() & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Provider,addRhythmicGnssClient new architecture", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "Provider,addRhythmicGnssClient new architecture", v14, v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::addRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    *(_DWORD *)buf = a2;
    sub_101815770(a1 + 3352, (int *)buf);
    if (sub_100217AB4(a1 + 3352))
      sub_100848DAC(a1 + 120, 1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Provider,addRhythmicGnssClient not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "Provider,addRhythmicGnssClient not supported on this platform", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::addRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100E03F70(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[4];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Provider,removeRhythmicGnssClient", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Provider,removeRhythmicGnssClient", v14, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::removeRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if ((sub_10003EC20() & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Provider,removeRhythmicGnssClient new Architecture", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "Provider,removeRhythmicGnssClient new Architecture", v14, v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::removeRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    *(_DWORD *)buf = a2;
    sub_1018147E0(a1 + 3352, (int *)buf);
    if (!sub_100217AB4(a1 + 3352))
      sub_100848DAC(a1 + 120, 0);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Provider,removeRhythmicGnssClient not supported on this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "Provider,removeRhythmicGnssClient not supported on this platform", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::removeRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100E046D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 4);
    v6 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 134283777;
    v16 = v5;
    v17 = 2049;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "forwardRelayedLocation location,lat,%{private}+.6f,lon,%{private}.6f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v7 = *(_QWORD *)(a2 + 4);
    v8 = *(_QWORD *)(a2 + 12);
    v11 = 134283777;
    v12 = v7;
    v13 = 2049;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "forwardRelayedLocation location,lat,%{private}+.6f,lon,%{private}.6f", &v11, 22);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::forwardRelayedLocation(const CLDaemonLocation &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_1008546F4(a1 + 120, a2);
}

void sub_100E048B4(_BYTE *a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[688];
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  char v16;
  void *__p;
  char v18;
  std::__shared_weak_count *v19;
  id v20;
  int v21;

  sub_100129CA0((uint64_t)v13);
  v16 = a2;
  sub_10024233C(a1);
  v21 = 12;
  if (sub_1001B7864((uint64_t)a1, &v21, 1))
  {
    v21 = 12;
    (*(void (**)(_BYTE *, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v21, v13, 1, 0xFFFFFFFFLL, 0);
  }
  sub_100011978((uint64_t)a1);

  v4 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v18 < 0)
    operator delete(__p);
  v7 = v15;
  if (v15)
  {
    v8 = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_100E04A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1004B4F0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100E04A28()
{
  operator new();
}

void sub_100E04A70()
{
  operator delete();
}

void sub_100E04A94(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v4[4];
  _QWORD v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[4];

  v2 = (_QWORD *)sub_1006DAF10(a1, "CLGnssProvider", a2);
  *v2 = off_1021899A8;
  v3 = v2[4];
  v12[0] = off_102189C68;
  v12[1] = v2;
  v12[3] = v12;
  v11[0] = off_102189CF8;
  v11[1] = v2;
  v11[3] = v11;
  v10[0] = off_102189D78;
  v10[1] = v2;
  v10[3] = v10;
  v9[0] = off_102189DF8;
  v9[1] = v2;
  v9[3] = v9;
  v8[0] = off_102189E78;
  v8[1] = v2;
  v8[3] = v8;
  v7[0] = off_102189EF8;
  v7[1] = v2;
  v7[3] = v7;
  v6[0] = off_102189F88;
  v6[1] = v2;
  v6[3] = v6;
  v5[0] = off_10218A018;
  v5[1] = v2;
  v5[3] = v5;
  v4[0] = off_10218A098;
  v4[1] = v2;
  v4[3] = v4;
  sub_1008485C0((uint64_t)(v2 + 15), v3, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
}

void sub_100E052C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v1[462];
  v1[462] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_101814360(v3);
  sub_100E09374(v1 + 418, 0);
  v6 = v1[412];
  v1[412] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100848DA8(v2);
  sub_1006DB4AC(v1);
  _Unwind_Resume(a1);
}

void sub_100E05560(uint64_t a1)
{
  sub_100E05568(*(id **)(a1 + 32));
}

void sub_100E05568(id *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[4];

  objc_msgSend(a1[404], "setNextFireDelay:", 1.79769313e308);
  *(_DWORD *)buf = 0;
  if (sub_1001B7864((uint64_t)a1, (int *)buf, 1))
  {
    *(_DWORD *)buf = 9;
    if (sub_1001B7864((uint64_t)a1, (int *)buf, 1))
    {
      *(_DWORD *)buf = 9;
      (*((void (**)(id *, uint8_t *, uint64_t, uint64_t))*a1 + 18))(a1, buf, 1, 0xFFFFFFFFLL);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,timeout when no location clients,debouncing?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,timeout when no location clients,debouncing?", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onLocationTimeout()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_100E05758(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102189BD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102189BD8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100E07788(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100E05910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E05930(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssProvider::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102189BD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssProvider::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102189BD8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssProvider::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100E07BF4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100E05AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E05B08(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssProvider,onGnssStop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,onGnssStop", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onGnssStop()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(double *)(a1 + 3664) = sub_1001FCBB4();
  sub_100E05CAC(a1, (uint64_t *)(a1 + 3656));
}

void sub_100E05CAC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  void *__p;
  char v45;
  std::__shared_weak_count *v46;
  id v47;
  __int128 v48;
  uint64_t v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    *(_DWORD *)buf = 134284033;
    v51 = v5;
    v52 = 2049;
    v53 = v6;
    v54 = 2049;
    v55 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,gnss,notifyClientWithGnssStatusRequest,lastGnssStartTime_s,%{private}.3lf,lastGnssStopTime_s,%{private}.3lf,lastGnssYieldTime_s,%{private}.3lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v21 = *a2;
    v22 = a2[1];
    v23 = a2[2];
    v36 = 134284033;
    v37 = v21;
    v38 = 2049;
    v39 = v22;
    v40 = 2049;
    v41 = v23;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#CLGNSSStateQueryAssertion,gnss,notifyClientWithGnssStatusRequest,lastGnssStartTime_s,%{private}.3lf,lastGnssStopTime_s,%{private}.3lf,lastGnssYieldTime_s,%{private}.3lf", &v36, 32);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientWithGnssStatusRequest(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  *(_DWORD *)buf = 45;
  if (sub_1001B7864(a1, (int *)buf, 1))
  {
    sub_100129CA0((uint64_t)&v36);
    v48 = *(_OWORD *)a2;
    v49 = a2[2];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a2;
      v10 = a2[1];
      v11 = a2[2];
      *(_DWORD *)buf = 134284033;
      v51 = v9;
      v52 = 2049;
      v53 = v10;
      v54 = 2049;
      v55 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,gnss,notifyClientWithGnssStatusRequest,lastGnssStartTime_s,%{private}.3lf,lastGnssStopTime_s,%{private}.3lf,lastGnssYieldTime_s,%{private}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v25 = *a2;
      v26 = a2[1];
      v27 = a2[2];
      v30 = 134284033;
      v31 = v25;
      v32 = 2049;
      v33 = v26;
      v34 = 2049;
      v35 = v27;
      LODWORD(v29) = 32;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#CLGNSSStateQueryAssertion,gnss,notifyClientWithGnssStatusRequest,lastGnssStartTime_s,%{private}.3lf,lastGnssStopTime_s,%{private}.3lf,lastGnssYieldTime_s,%{private}.3lf", &v30, v29);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientWithGnssStatusRequest(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    *(_DWORD *)buf = 45;
    (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v36, 1, 0xFFFFFFFFLL, 0);

    v12 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v45 < 0)
      operator delete(__p);
    v15 = v43;
    if (v43)
    {
      v16 = (unint64_t *)&v43->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v42;
    if (v42)
    {
      v19 = (unint64_t *)&v42->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_100E06134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E06168(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_1021899A8;
  v2 = *(void **)(a1 + 3688);
  if (v2 && *(_QWORD *)(a1 + 3680))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGnssProvider,unsubscribe to leech visits", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,unsubscribe to leech visits", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual CLGnssProvider::~CLGnssProvider()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    objc_msgSend(*(id *)(a1 + 3688), "stopLeechingVisitsForClient:", *(_QWORD *)(a1 + 3680));
    v2 = *(void **)(a1 + 3688);
  }

  *(_QWORD *)(a1 + 3688) = 0;
  *(_QWORD *)(a1 + 3680) = 0;
  objc_msgSend(*(id *)(a1 + 3280), "stopMonitoringEmergencyState:", CLISP_ME_TOKEN);

  objc_msgSend(*(id *)(a1 + 3232), "invalidate");
  *(_QWORD *)(a1 + 3232) = 0;
  objc_msgSend(*(id *)(a1 + 3240), "invalidate");

  *(_QWORD *)(a1 + 3240) = 0;
  objc_msgSend(*(id *)(a1 + 3288), "stopMonitoringRelayLocation:", CLISP_ME_TOKEN);
  v4 = *(_QWORD *)(a1 + 3696);
  *(_QWORD *)(a1 + 3696) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_101814360(a1 + 3352);
  sub_100E09374((uint64_t *)(a1 + 3344), 0);
  v5 = *(_QWORD *)(a1 + 3296);
  *(_QWORD *)(a1 + 3296) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100848DA8((uint64_t *)(a1 + 120));
  sub_1006DB4AC(a1);
  return a1;
}

void sub_100E063E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E063F0(uint64_t a1)
{
  sub_100E06168(a1);
  operator delete();
}

void sub_100E06414()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssProvider,start", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssProvider::start()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

uint64_t sub_100E06598(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[4];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssProvider,shutdown", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssProvider::shutdown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)buf = 0;
  if ((int)sub_1001B7864(a1, (int *)buf, 1) >= 1)
  {
    sub_100E06780(a1);
    sub_1002423A0((_BYTE *)a1, 0);
  }
  sub_1006DB4DC(a1);
  sub_10084A0A0(a1 + 120);
  result = *(_QWORD *)(a1 + 3696);
  *(_QWORD *)(a1 + 3696) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100E06780(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,stopLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssProvider,stopLocation", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::stopLocation()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(*(id *)(a1 + 3232), "setNextFireDelay:", 1.79769313e308);
  objc_msgSend(*(id *)(a1 + 3240), "setNextFireDelay:", 1.79769313e308);
  if (*(_BYTE *)(a1 + 3704))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3696) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 3696) + 8), 27);
    *(_BYTE *)(a1 + 3704) = 0;
  }
  sub_100849F94(a1 + 120);
  sub_10024233C((_BYTE *)a1);
}

void sub_100E069AC(uint64_t a1)
{
  sub_100E05CAC(*(_QWORD *)(a1 + 32), (uint64_t *)(*(_QWORD *)(a1 + 32) + 3656));
}

void sub_100E06A00(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  const char *v28;
  uint8_t *v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _QWORD v38[65];
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  std::__shared_weak_count *v48;
  void *__p;
  char v50;
  std::__shared_weak_count *v51;
  id v52;
  _DWORD v53[2];
  __int16 v54;
  int v55;
  uint8_t buf[4];
  int v57;
  __int16 v58;
  int v59;

  *(_DWORD *)buf = 0;
  if (sub_1001B7864(a1, (int *)buf, 1))
    objc_msgSend(*(id *)(a1 + 3232), "setNextFireDelay:", 30.0);
  sub_100129CA0((uint64_t)&v30);
  v4 = a2[7];
  v35 = a2[6];
  v36 = v4;
  v37[0] = a2[8];
  *(_OWORD *)((char *)v37 + 12) = *(__int128 *)((char *)a2 + 140);
  v5 = a2[3];
  *(_OWORD *)v32 = a2[2];
  *(_OWORD *)&v32[16] = v5;
  v6 = a2[5];
  v33 = a2[4];
  v34 = v6;
  v7 = a2[1];
  v30 = *a2;
  v31 = v7;
  memcpy(v38, a2 + 10, 0x201uLL);
  sub_100349198(&v39, (uint64_t *)a2 + 85);
  v8 = *(__int128 *)((char *)a2 + 776);
  v45 = *(__int128 *)((char *)a2 + 760);
  v46 = v8;
  v9 = *(__int128 *)((char *)a2 + 712);
  v41 = *(__int128 *)((char *)a2 + 696);
  v42 = v9;
  v10 = *(__int128 *)((char *)a2 + 744);
  v43 = *(__int128 *)((char *)a2 + 728);
  v44 = v10;
  v47 = *((_BYTE *)a2 + 792);
  v11 = v38[43];
  v12 = *(_QWORD *)&v32[20];
  v13 = *(double *)&v32[20] <= 0.0;
  *(_QWORD *)(a1 + 3248) = v38[43];
  if (!v13 && *(double *)&v32[12] >= 0.0)
  {
    *(_QWORD *)(a1 + 3256) = *(_QWORD *)&v32[12];
    *(_QWORD *)(a1 + 3264) = v12;
    *(_QWORD *)(a1 + 3272) = v11;
  }
  *(_DWORD *)buf = 0;
  (*(void (**)(uint64_t, uint8_t *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v30, 0, 0xFFFFFFFFLL, 0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(a1 + 3328);
    *(_DWORD *)buf = 67240448;
    v57 = v15 & 1;
    v58 = 1026;
    v59 = (v15 >> 1) & 1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,notifyClientsWithFix,GnssStatus,1Hz,%{public}d,RhythmicGnss,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v27 = *(_DWORD *)(a1 + 3328);
    v53[0] = 67240448;
    v53[1] = v27 & 1;
    v54 = 1026;
    v55 = (v27 >> 1) & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssProvider,notifyClientsWithFix,GnssStatus,1Hz,%{public}d,RhythmicGnss,%{public}d", v53, 14, v30, v31, *(_OWORD *)v32);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientsWithFix(const GNSS::DaemonLocation &)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  *(_DWORD *)buf = 0;
  v16 = sub_1001B7864(a1, (int *)buf, 1);
  v17 = *(_DWORD *)(a1 + 3340);
  if (v17 != v16)
  {
    *(_DWORD *)buf = 0;
    sub_10004FFE4(a1, v16 > v17, v16, (int *)buf);
  }
  *(double *)(a1 + 3672) = sub_1001FCBB4();
  sub_100E05CAC(a1, (uint64_t *)(a1 + 3656));

  v18 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v50 < 0)
    operator delete(__p);
  v21 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_100E06DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E06E24(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  _BYTE v14[688];
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  int v17;
  void *v18;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  sub_100129CA0((uint64_t)v14);
  v17 = a2;
  v13 = 18;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v13, v14, 1, 0xFFFFFFFFLL, 0);

  v4 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v19 < 0)
    operator delete(v18);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_100E06F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E06F68(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _OWORD v21[8];
  _OWORD v22[2];
  _BYTE v23[513];
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  std::__shared_weak_count *v33;
  void *v34;
  char v35;
  std::__shared_weak_count *v36;
  id v37;

  sub_100129CA0((uint64_t)v21);
  v4 = *(_OWORD *)(a2 + 112);
  v21[6] = *(_OWORD *)(a2 + 96);
  v21[7] = v4;
  v22[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a2 + 140);
  v5 = *(_OWORD *)(a2 + 48);
  v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v21[4] = *(_OWORD *)(a2 + 64);
  v21[5] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v7;
  memcpy(v23, (const void *)(a2 + 160), sizeof(v23));
  sub_100349198(&v24, (uint64_t *)(a2 + 680));
  v8 = *(_OWORD *)(a2 + 776);
  v30 = *(_OWORD *)(a2 + 760);
  v31 = v8;
  v9 = *(_OWORD *)(a2 + 712);
  v26 = *(_OWORD *)(a2 + 696);
  v27 = v9;
  v10 = *(_OWORD *)(a2 + 744);
  v28 = *(_OWORD *)(a2 + 728);
  v29 = v10;
  v32 = *(_BYTE *)(a2 + 792);
  v20 = 30;
  (*(void (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v20, v21, 0, 0xFFFFFFFFLL, 0);

  v11 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v35 < 0)
    operator delete(v34);
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_100E07108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E0711C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  _BYTE v16[688];
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *v19;
  char v20;
  std::__shared_weak_count *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  sub_100129CA0((uint64_t)v16);
  v4 = a2[3];
  v25 = a2[2];
  v26 = v4;
  v27 = a2[4];
  v5 = a2[1];
  v23 = *a2;
  v24 = v5;
  v28 = *((_QWORD *)a2 + 10);
  v15 = 37;
  (*(void (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v15, v16, 0, 0xFFFFFFFFLL, 0);

  v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v20 < 0)
    operator delete(v19);
  v9 = v18;
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100E0726C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E07280(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18[2];
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  void *__p;
  char v28;
  std::__shared_weak_count *v29;
  id v30;
  int v31;
  int v32;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v22 = a2;
    v23 = 1024;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,notifyClientWithBasebandCausesL1InterferenceModeGnssStatus,band,%d,status,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v18[0] = 67109376;
    v18[1] = a2;
    v19 = 1024;
    v20 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,gnss,notifyClientWithBasebandCausesL1InterferenceModeGnssStatus,band,%d,status,%d", v18, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientWithBasebandCausesL1InterferenceModeGnssStatus(GNSS::BasebandCausesL1InterferenceModeGnssBand, BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_100129CA0((uint64_t)buf);
  v31 = a2;
  v32 = a3 ^ 1;
  v18[0] = 38;
  if (sub_1001B7864(a1, v18, 1))
  {
    v18[0] = 38;
    (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v18, buf, 1, 0xFFFFFFFFLL, 0);
  }

  v7 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v28 < 0)
    operator delete(__p);
  v10 = v26;
  if (v26)
  {
    v11 = (unint64_t *)&v26->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_100E0756C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E0759C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_10104BD1C(*(int **)(a2 + 800));
    *(_DWORD *)buf = 134349056;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic batched locations update,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v7 = qword_1022A0078;
    v8 = sub_10104BD1C(*(int **)(a2 + 800));
    v11 = 134349056;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "GPSODOM,Rhythmic batched locations update,size,%{public}zu", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientsWithRhythmicBatchedLocations(const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_DWORD *)buf = 43;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100E07788(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id *v6;
  NSObject *v7;
  const char *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;

  if (*a3 == 27 && (*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1 && *(_BYTE *)(a4 + 516) != 0)
  {
    v6 = (id *)result;
    *(_DWORD *)buf = 0;
    if (sub_1001B7864(result, (int *)buf, 1))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(const char **)(a4 + 76);
        v9 = *(_DWORD *)(a4 + 96);
        *(_DWORD *)buf = 134349312;
        v50 = v8;
        v51 = 1026;
        v52 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DeadReckoning,%{public}.1lf,propagated locations,%{public}d,reset timer", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v27 = *(const char **)(a4 + 76);
        v28 = *(_DWORD *)(a4 + 96);
        v31 = 134349312;
        v32 = v27;
        v33 = 1026;
        v34 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "DeadReckoning,%{public}.1lf,propagated locations,%{public}d,reset timer", &v31, 18);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      objc_msgSend(v6[404], "setNextFireDelay:", 30.0);
    }
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_102189C18);
    v10 = qword_1022A02F8;
    if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a4 + 4);
      v12 = *(_QWORD *)(a4 + 12);
      v13 = *(_QWORD *)(a4 + 20);
      v14 = *(_QWORD *)(a4 + 44);
      v15 = *(_QWORD *)(a4 + 60);
      v16 = *(_QWORD *)(a4 + 184);
      v17 = *(_DWORD *)(a4 + 128);
      *(_DWORD *)buf = 136317186;
      v50 = "CL-GnssPropagated";
      v51 = 1024;
      v52 = 1;
      v53 = 2048;
      v54 = v11;
      v55 = 2048;
      v56 = v12;
      v57 = 2048;
      v58 = v13;
      v59 = 2048;
      v60 = v14;
      v61 = 2048;
      v62 = v15;
      v63 = 2048;
      v64 = v16;
      v65 = 1024;
      v66 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d", buf, 0x54u);
    }
    if (sub_1001BFF7C(117, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_102189C18);
      v18 = *(_QWORD *)(a4 + 4);
      v19 = *(_QWORD *)(a4 + 12);
      v20 = *(_QWORD *)(a4 + 20);
      v21 = *(_QWORD *)(a4 + 44);
      v22 = *(_QWORD *)(a4 + 60);
      v23 = *(_QWORD *)(a4 + 184);
      v24 = *(_DWORD *)(a4 + 128);
      v31 = 136317186;
      v32 = "CL-GnssPropagated";
      v33 = 1024;
      v34 = 1;
      v35 = 2048;
      v36 = v18;
      v37 = 2048;
      v38 = v19;
      v39 = 2048;
      v40 = v20;
      v41 = 2048;
      v42 = v21;
      v43 = 2048;
      v44 = v22;
      v45 = 2048;
      v46 = v23;
      v47 = 1024;
      v48 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d", (const char *)&v31, 84);
      v26 = (uint8_t *)v25;
      sub_100512490("LOCATION", 1, 0, 2, "void CLGnssProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    *(_DWORD *)buf = 0;
    return (*((uint64_t (**)(id *, uint8_t *, uint64_t, _QWORD, uint64_t, _QWORD))*v6 + 19))(v6, buf, a4, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100E07BF4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint8_t buf[4];
  uint64_t v42;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v42) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v17 = *a3;
    v39 = 67240192;
    LODWORD(v40) = v17;
    LODWORD(v36) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,MA-OTA,notification,%{public}d", &v39, v36);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (*a3 == 4)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102189C38);
    v14 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v15 = sub_10011A5AC(a4);
      *(_DWORD *)buf = 138477827;
      v42 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#timingadvance Asset Harvest notification data: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102189C38);
      v20 = qword_1022A0208;
      v21 = sub_10011A5AC(a4);
      v39 = 138477827;
      v40 = v21;
      LODWORD(v36) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "#timingadvance Asset Harvest notification data: %{private}@", &v39, v36);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    sub_100119F3C(&v39);
    if (sub_100006BB4(a4, "CellHarvest", &v39))
    {
      BYTE4(v36) = 0;
      if (sub_1001E4874((uint64_t)&v39, "TimingAdvance", (BOOL *)&v36 + 4))
      {
        sub_1008550A4(a1 + 120, BYTE4(v36));
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102189C38);
        v16 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v42) = BYTE4(v36);
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#timingadvance TelephonySrvice Asset Harvest notification data: %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102189C38);
          v37 = 67109120;
          LODWORD(v38) = BYTE4(v36);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#timingadvance TelephonySrvice Asset Harvest notification data: %d", &v37);
          v35 = (uint8_t *)v34;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
      }
    }
  }
  else
  {
    if (*a3 != 2)
      return;
    sub_100119F3C(&v39);
    if (sub_100006BB4(a4, "GpsOdometrySettings", &v39))
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102189BF8);
      v9 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GpsOdometry config available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102189BF8);
        LOWORD(v37) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLGnssProvider,MA-OTA,GpsOdometry config available", &v37, v36);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      sub_1008548D8(a1 + 120, (uint64_t)&v39);
    }
    if (sub_100006BB4(a4, "GnssConstellationSettings", &v39))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GpsConst config available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v37) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,MA-OTA,GpsConst config available", &v37, v36);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      sub_1008548E8((_DWORD *)(a1 + 120), (uint64_t)&v39);
    }
    if (sub_100006BB4(a4, "GnssAssistanceFileSettings", &v39))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GnssAssistanceFile config available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v37) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,MA-OTA,GnssAssistanceFile config available", &v37, v36);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      sub_10085525C((uint64_t *)(a1 + 120), (uint64_t)&v39);
    }
    HIDWORD(v36) = 0;
    if (sub_1001E4B84(a4, "GnssCoExConfigOverride", (_DWORD *)&v36 + 1))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v42 = SHIDWORD(v36);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GnssCoExConfigOverride,%llu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v37 = 134217984;
        v38 = SHIDWORD(v36);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,MA-OTA,GnssCoExConfigOverride,%llu", &v37);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      sub_100854BE8((uint64_t *)(a1 + 120), SHIDWORD(v36));
    }
    if (sub_100006BB4(a4, "GnssKnownACSettings", &v39))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GnssKnownAC config available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v37) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,MA-OTA,GnssKnownAC config available", &v37, v36);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      sub_100854C00(a1 + 120, (uint64_t)&v39);
    }
  }
  sub_10011A5A8(&v39);
}

void sub_100E0878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100E087CC()
{
  operator new();
}

void sub_100E08874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100E088B0()
{
  operator new();
}

void sub_100E08960(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100E0899C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100E089C8(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100E089F4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E08A20(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100E08A4C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100E08A78(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E08AA4(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

void sub_100E08AD0(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100E08AFC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100E08B2C()
{
  operator delete();
}

_QWORD *sub_100E08B40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189C68;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08B74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189C68;
  a2[1] = v2;
  return result;
}

void sub_100E08B90(uint64_t a1, __int128 *a2)
{
  sub_100E06A00(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100E08B98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E08BD4()
{
}

void sub_100E08BE4()
{
  operator delete();
}

_QWORD *sub_100E08BF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189CF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08C2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189CF8;
  a2[1] = v2;
  return result;
}

void sub_100E08C48(uint64_t a1, __int128 *a2)
{
  sub_10004A1DC(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100E08C50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E08C8C()
{
}

void sub_100E08C9C()
{
  operator delete();
}

_QWORD *sub_100E08CB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189D78;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08CE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189D78;
  a2[1] = v2;
  return result;
}

void sub_100E08D00(uint64_t a1, int *a2)
{
  sub_100E06E24(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_100E08D0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E08D48()
{
}

void sub_100E08D58()
{
  operator delete();
}

_QWORD *sub_100E08D6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08DA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189DF8;
  a2[1] = v2;
  return result;
}

void sub_100E08DBC(uint64_t a1, uint64_t a2)
{
  sub_100E06F68(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100E08DC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E08E00()
{
}

void sub_100E08E10()
{
  operator delete();
}

_QWORD *sub_100E08E24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189E78;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08E58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189E78;
  a2[1] = v2;
  return result;
}

void sub_100E08E74(uint64_t a1, __int128 *a2)
{
  sub_100E0711C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100E08E7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E08EB8()
{
}

void sub_100E08EC8()
{
  operator delete();
}

_QWORD *sub_100E08EDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08F10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189EF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E08F2C(uint64_t a1, uint64_t a2)
{
  return sub_100E0759C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100E08F34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E08F70()
{
}

void sub_100E08F80()
{
  operator delete();
}

_QWORD *sub_100E08F94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102189F88;
  result[1] = v3;
  return result;
}

uint64_t sub_100E08FC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102189F88;
  a2[1] = v2;
  return result;
}

void sub_100E08FE4(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  sub_100E07280(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t sub_100E08FF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E09030()
{
}

void sub_100E09040()
{
  operator delete();
}

_QWORD *sub_100E09054(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218A018;
  result[1] = v3;
  return result;
}

uint64_t sub_100E09088(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218A018;
  a2[1] = v2;
  return result;
}

void sub_100E090A4(uint64_t a1)
{
  sub_100E05B08(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100E090AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E090E8()
{
}

void sub_100E090F8()
{
  operator delete();
}

_QWORD *sub_100E0910C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218A098;
  result[1] = v3;
  return result;
}

uint64_t sub_100E09140(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218A098;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E0915C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = 47;
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, &v4, a2, 0, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100E091A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E091DC()
{
}

void sub_100E091EC()
{
  operator delete();
}

_QWORD *sub_100E09200(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218A118;
  result[1] = v3;
  return result;
}

uint64_t sub_100E09234(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218A118;
  a2[1] = v2;
  return result;
}

void sub_100E09250(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, int *a4)
{
  sub_10000A620(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_100E09264(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E092A0()
{
}

void sub_100E092B0()
{
  operator delete();
}

_QWORD *sub_100E092C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10218A1A8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E092F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10218A1A8;
  a2[1] = v2;
  return result;
}

void sub_100E09314(uint64_t a1)
{
  sub_100855094(*(_QWORD *)(a1 + 8) + 120);
}

uint64_t sub_100E0932C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E09368()
{
}

uint64_t sub_100E09374(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101860F98();
    operator delete();
  }
  return result;
}

void sub_100E093B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218A238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E093C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218A238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100E093F8(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 18;
        sub_100E0947C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100E0947C(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = (void *)a2[14];
  if (v3)
  {
    a2[15] = v3;
    operator delete(v3);
  }
  v4 = a2[6];
  a2[6] = 0;
  if (v4)
    operator delete();
  v5 = (void *)a2[3];
  if (v5)
  {
    a2[4] = v5;
    operator delete(v5);
  }
}

void sub_100E094E0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100E09520((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

void sub_100E09520(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 2;
    do
    {
      v6 = (_QWORD *)*v5;
      *v5 = 0;
      if (v6)
        sub_100E09580((uint64_t)v5, v6);
      v7 = v5 - 20;
      v5 -= 22;
    }
    while (v7 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_100E09580(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[16];
    if (v3)
    {
      a2[17] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[12];
    if (v4)
    {
      a2[13] = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

void sub_100E095D8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C27DB0;
      v1[3] = unk_101C27DC0;
      v1[4] = xmmword_101C27DD0;
      v1[0] = xmmword_101C27D90;
      v1[1] = unk_101C27DA0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100E096AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100E096C4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v4[2];
  uint64_t v5;

  *(_OWORD *)v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_100E0976C(a1, (uint64_t)v4);
}

void sub_100E09748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018F11A0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100E0976C(uint64_t a1, uint64_t a2)
{
  void *v2[2];
  uint64_t v3;

  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  operator new();
}

void sub_100E0984C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100E0989C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1006F87D8(*(_QWORD *)(a1 + 32), a2);
}

void sub_100E098A4(uint64_t a1)
{
  sub_1006F6564(*(_QWORD *)(a1 + 32));
}

void sub_100E098AC(uint64_t a1, unint64_t a2)
{
  sub_1006F6E2C(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_100E098B4(uint64_t a1)
{
  return sub_1006F83E8(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100E098BC(uint64_t a1)
{
  return sub_10005995C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100E098C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10067D7F4(*(_QWORD *)(a1 + 32), a2);
}

void sub_100E098CC(uint64_t a1)
{
  sub_1006F9724(*(_QWORD *)(a1 + 32));
}

void sub_100E098D4(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  const char *v20;
  char *v21;
  int v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  _DWORD buf[3];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  *(_BYTE *)a1 = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 40) = 0x100000002;
  v9 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 96) = v11;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v13 = v9;
    if (*(char *)(a1 + 31) < 0)
      v13 = (_QWORD *)*v9;
    buf[0] = 136315650;
    *(_QWORD *)&buf[1] = v13;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218A2C8);
    v16 = v9;
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v9;
    v23 = 136315650;
    v24 = v16;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Creating managed location database %s (count triggers %d, use cache %d)", (const char *)&v23, 24, v22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218A2C8);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v15 = v9;
      if (*(char *)(a1 + 31) < 0)
        v15 = (_QWORD *)*v9;
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218A2C8);
      v19 = v9;
      if (*(char *)(a1 + 31) < 0)
        v19 = (_QWORD *)*v9;
      v23 = 136315138;
      v24 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Data protection is enabled, creating in-memory database for table %s", (const char *)&v23);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]", "%s\n", v20);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_100E09FC8(a1, a3);
  }
  sub_100D81E0C();
}

void sub_100E09F44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

void sub_100E09FC8(uint64_t a1, char a2)
{
  void *__p[2];
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8[3];
  uint64_t v9;

  sub_1015A2E04(__p, "");
  v6 = 0;
  v5 = 0;
  v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4(v8, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    v8[2] = v4;
    v9 = 0;
  }
  sub_100D81E0C();
}

void sub_100E0A094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E0A0E4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E0A110(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  int v5;
  void **v6;
  CLOSTransaction *v7;
  void **v8;
  void *__p[2];
  char v10;

  if (*(_QWORD *)(a1 + 88))
    sub_10192C07C();
  if (*(char *)(a1 + 31) >= 0)
    v2 = *(unsigned __int8 *)(a1 + 31);
  else
    v2 = *(_QWORD *)(a1 + 16);
  v3 = __p;
  sub_100259584((uint64_t)__p, v2 + 17);
  if (v10 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0)
      v4 = (const void *)(a1 + 8);
    else
      v4 = *(const void **)(a1 + 8);
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  v5 = v10;
  v6 = (void **)__p[0];
  v7 = [CLOSTransaction alloc];
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  *(_QWORD *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_100E0A214(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100E0A240(uint64_t a1, char *a2)
{
  void *__p;
  void *v4[2];

  sub_1015A2E04(v4, a2);
  sub_1015A2E04(&__p, "");
  sub_100E0A2EC(a1, (uint64_t)v4);
}

void sub_100E0A2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100E0A2EC(uint64_t a1, uint64_t a2)
{
  void *v2[2];
  uint64_t v3;

  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  operator new();
}

void sub_100E0A3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100E0A41C(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  const char *v20;
  char *v21;
  int v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  _DWORD buf[3];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  *(_BYTE *)a1 = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 40) = 0x100000002;
  v9 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 96) = v11;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218A358);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v13 = v9;
    if (*(char *)(a1 + 31) < 0)
      v13 = (_QWORD *)*v9;
    buf[0] = 136315650;
    *(_QWORD *)&buf[1] = v13;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218A358);
    v16 = v9;
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v9;
    v23 = 136315650;
    v24 = v16;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Creating managed location database %s (count triggers %d, use cache %d)", (const char *)&v23, 24, v22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218A358);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v15 = v9;
      if (*(char *)(a1 + 31) < 0)
        v15 = (_QWORD *)*v9;
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218A358);
      v19 = v9;
      if (*(char *)(a1 + 31) < 0)
        v19 = (_QWORD *)*v9;
      v23 = 136315138;
      v24 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Data protection is enabled, creating in-memory database for table %s", (const char *)&v23);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]", "%s\n", v20);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_100E0AB10(a1, a3);
  }
  sub_10071E3D8();
}

void sub_100E0AA8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

void sub_100E0AB10(uint64_t a1, char a2)
{
  void *__p[2];
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8[3];
  uint64_t v9;

  sub_1015A2E04(__p, "");
  v6 = 0;
  v5 = 0;
  v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4(v8, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    v8[2] = v4;
    v9 = 0;
  }
  sub_10071E3D8();
}

void sub_100E0ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E0AC2C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E0AC58(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  int v5;
  void **v6;
  CLOSTransaction *v7;
  void **v8;
  void *__p[2];
  char v10;

  if (*(_QWORD *)(a1 + 88))
    sub_10192C514();
  if (*(char *)(a1 + 31) >= 0)
    v2 = *(unsigned __int8 *)(a1 + 31);
  else
    v2 = *(_QWORD *)(a1 + 16);
  v3 = __p;
  sub_100259584((uint64_t)__p, v2 + 17);
  if (v10 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0)
      v4 = (const void *)(a1 + 8);
    else
      v4 = *(const void **)(a1 + 8);
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  v5 = v10;
  v6 = (void **)__p[0];
  v7 = [CLOSTransaction alloc];
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  *(_QWORD *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_100E0AD5C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E0AD88(double a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;

  v4 = a1;
  v1 = sub_1001FD94C();
  sub_10018A4CC(v1, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", &v4);
  v2 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 944))(v2);
}

float sub_100E0ADC8(uint64_t a1, float *a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  float v7;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  char *v11;
  BOOL v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  uint64_t v28;
  double v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  double v34;
  float v35;
  float v36;
  NSObject *v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  const char *v41;
  char *v42;
  double v43;
  NSObject *v44;
  const char *v46;
  char *v47;
  const char *v48;
  void *__p;
  char *v50;
  uint64_t v51;
  int v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  _BYTE buf[12];
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;

  *(_QWORD *)buf = 0xBFF0000000000000;
  v4 = sub_1001FD94C();
  sub_1001FD98C(v4, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", buf);
  if (*(double *)buf < 0.0)
  {
    v5 = sub_100515CB4();
    sub_100E0AD88(v5);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A398);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, begin tracking elapsed time for updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218A398);
      LOWORD(v52) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "ExerciseMinuteThresholdUpdater, begin tracking elapsed time for updates", &v52, 2);
      v47 = (char *)v46;
      sub_100512490("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
    return a2[13];
  }
  __p = 0;
  v50 = 0;
  v51 = 0;
  v8 = sub_101125448();
  v9 = sub_101125B34(v8, &__p);
  v10 = v50;
  if (__p == v50)
  {
    v10 = __p;
  }
  else
  {
    v11 = (char *)__p + 144;
    while (*(v11 - 36))
    {
      v12 = v11 == v50;
      v11 += 144;
      if (v12)
        goto LABEL_22;
    }
    v13 = v11 - 144;
    if (v11 - 144 != v50)
    {
      while (v11 != (char *)v10)
      {
        if (v11[108])
        {
          *(_OWORD *)v13 = *(_OWORD *)v11;
          v14 = *((_OWORD *)v11 + 1);
          v15 = *((_OWORD *)v11 + 2);
          v16 = *((_OWORD *)v11 + 4);
          *((_OWORD *)v13 + 3) = *((_OWORD *)v11 + 3);
          *((_OWORD *)v13 + 4) = v16;
          *((_OWORD *)v13 + 1) = v14;
          *((_OWORD *)v13 + 2) = v15;
          v17 = *((_OWORD *)v11 + 5);
          v18 = *((_OWORD *)v11 + 6);
          v19 = *((_OWORD *)v11 + 8);
          *((_OWORD *)v13 + 7) = *((_OWORD *)v11 + 7);
          *((_OWORD *)v13 + 8) = v19;
          *((_OWORD *)v13 + 5) = v17;
          *((_OWORD *)v13 + 6) = v18;
          v13 += 144;
        }
        v11 += 144;
      }
    }
    if (v13 != (char *)v10)
    {
      v10 = v13;
      v50 = v13;
    }
  }
LABEL_22:
  if (v9 != 100)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A398);
    v40 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, could not get records from VO2MaxOutputStore, CMError, %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_63;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A398);
    v52 = 67109120;
    LODWORD(v53) = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "ExerciseMinuteThresholdUpdater, could not get records from VO2MaxOutputStore, CMError, %d", &v52);
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v41);
    goto LABEL_74;
  }
  if (__p != v10)
  {
    v20 = a2[13];
    sub_1007247D0(a2);
    if (v20 == -1.0)
      v23 = v21;
    else
      v23 = v20;
    v24 = *((double *)v50 - 14);
    v25 = (float)(v24 * 0.492) / 3.5;
    if (v25 < 2.2)
      v25 = 2.2;
    v22 = v21;
    if (v25 <= v22)
      v26 = v25;
    else
      v26 = v21;
    v27 = sub_100515CB4();
    *(_QWORD *)buf = 0xBFF0000000000000;
    v28 = sub_1001FD94C();
    sub_1001FD98C(v28, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", buf);
    v29 = 0.0;
    if (v27 - *(double *)buf >= 0.0)
      v29 = (v27 - *(double *)buf) / 86400.0;
    v30 = fmin(v29, 1.0);
    v31 = a1 + 12;
    if (v26 > v23)
      v31 = a1;
    v32 = (float)(*(float *)(v31 + 4) / 100.0) * v30;
    if (v32 < 0.0)
      v32 = 0.0;
    if (v32 <= 1.0)
      v33 = v32;
    else
      v33 = 1.0;
    v34 = sub_100515CB4();
    sub_100E0AD88(v34);
    v35 = 1.0 - v33;
    v36 = v26 * v33;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A398);
    v7 = v36 + (float)(v23 * v35);
    v37 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134284545;
      *(double *)&buf[4] = v23;
      v63 = 2049;
      v64 = v26;
      v65 = 2049;
      v66 = v24;
      v67 = 2049;
      v68 = v7;
      v69 = 2050;
      v70 = v30;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, previousValue, %{private}f, targetValue, %{private}f, lastVo2max, %{private}f, updateValue, %{private}f, daysElapsed, %{public}f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218A398);
      v52 = 134284545;
      v53 = v23;
      v54 = 2049;
      v55 = v26;
      v56 = 2049;
      v57 = v24;
      v58 = 2049;
      v59 = v7;
      v60 = 2050;
      v61 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "ExerciseMinuteThresholdUpdater, previousValue, %{private}f, targetValue, %{private}f, lastVo2max, %{private}f, updateValue, %{private}f, daysElapsed, %{public}f", &v52, 52);
      v39 = (char *)v38;
      sub_100512490("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    goto LABEL_64;
  }
  v43 = sub_100515CB4();
  sub_100E0AD88(v43);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10218A398);
  v44 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, no vo2max records found for update", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A398);
    LOWORD(v52) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "ExerciseMinuteThresholdUpdater, no vo2max records found for update", &v52, 2);
    v42 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v48);
LABEL_74:
    if (v42 != buf)
      free(v42);
  }
LABEL_63:
  v7 = a2[13];
LABEL_64:
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_100E0B5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E0B608(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100E0B634(uint64_t a1, char *a2)
{
  void *__p;
  void *v4[2];

  sub_1015A2E04(v4, a2);
  sub_1015A2E04(&__p, "");
  sub_100E0B6E0(a1, (uint64_t)v4);
}

void sub_100E0B6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100E0B6E0(uint64_t a1, uint64_t a2)
{
  void *v2[2];
  uint64_t v3;

  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  operator new();
}

void sub_100E0B7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100E0B810(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  const char *v20;
  char *v21;
  int v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  _DWORD buf[3];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  *(_BYTE *)a1 = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 40) = 0x100000002;
  v9 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 96) = v11;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218A408);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v13 = v9;
    if (*(char *)(a1 + 31) < 0)
      v13 = (_QWORD *)*v9;
    buf[0] = 136315650;
    *(_QWORD *)&buf[1] = v13;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218A408);
    v16 = v9;
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v9;
    v23 = 136315650;
    v24 = v16;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Creating managed location database %s (count triggers %d, use cache %d)", (const char *)&v23, 24, v22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218A408);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v15 = v9;
      if (*(char *)(a1 + 31) < 0)
        v15 = (_QWORD *)*v9;
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218A408);
      v19 = v9;
      if (*(char *)(a1 + 31) < 0)
        v19 = (_QWORD *)*v9;
      v23 = 136315138;
      v24 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Data protection is enabled, creating in-memory database for table %s", (const char *)&v23);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]", "%s\n", v20);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_100E0BF04(a1, a3);
  }
  sub_10071E860();
}

void sub_100E0BE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

void sub_100E0BF04(uint64_t a1, char a2)
{
  void *__p[2];
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8[3];
  uint64_t v9;

  sub_1015A2E04(__p, "");
  v6 = 0;
  v5 = 0;
  v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4(v8, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    v8[2] = v4;
    v9 = 0;
  }
  sub_10071E860();
}

void sub_100E0BFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E0C020(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E0C04C(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  int v5;
  void **v6;
  CLOSTransaction *v7;
  void **v8;
  void *__p[2];
  char v10;

  if (*(_QWORD *)(a1 + 88))
    sub_10192C9AC();
  if (*(char *)(a1 + 31) >= 0)
    v2 = *(unsigned __int8 *)(a1 + 31);
  else
    v2 = *(_QWORD *)(a1 + 16);
  v3 = __p;
  sub_100259584((uint64_t)__p, v2 + 17);
  if (v10 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0)
      v4 = (const void *)(a1 + 8);
    else
      v4 = *(const void **)(a1 + 8);
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  v5 = v10;
  v6 = (void **)__p[0];
  v7 = [CLOSTransaction alloc];
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  *(_QWORD *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_100E0C150(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E0C17C(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  double v32;
  int v33;
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  int v43;
  NSObject *v44;
  NSObject *v45;
  int v46;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  const char *v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  NSObject *v62;
  const char *v64;
  uint8_t *v65;
  const char *v66;
  uint8_t *v67;
  const char *v68;
  uint8_t *v69;
  const char *v70;
  uint8_t *v71;
  const char *v72;
  uint8_t *v73;
  uint64_t v74;
  _QWORD v75[2];
  uint8_t buf[8];
  std::__shared_weak_count *v77;

  sub_100E0D094(a1);
  *(_DWORD *)(a1 + 2152) = 1;
  sub_1001E4804(buf);
  if (sub_1001E4874(*(uint64_t *)buf, "LCFusionUseLegacyProviderSelection", (BOOL *)(a1 + 157)))
  {
    v2 = *(unsigned __int8 *)(a1 + 157);
    v3 = v77;
    if (!v77)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v77->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (!v2)
        goto LABEL_22;
    }
    else
    {
LABEL_6:
      if (!v2)
        goto LABEL_22;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v6 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "LCFusion to act as passthrough and use legacy provider selection results for internal testing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion to act as passthrough and use legacy provider selection results for internal testing", v75, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = v77;
    if (v77)
    {
      v10 = (unint64_t *)&v77->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
LABEL_22:
  sub_1001E4804(buf);
  if (sub_1001E4874(*(uint64_t *)buf, "LCFusionAlwaysYieldOnReceivingLocationNotification", (BOOL *)(a1 + 165)))
  {
    v12 = *(unsigned __int8 *)(a1 + 165);
    v13 = v77;
    if (!v77)
      goto LABEL_27;
    v14 = (unint64_t *)&v77->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v12)
        goto LABEL_43;
    }
    else
    {
LABEL_27:
      if (!v12)
        goto LABEL_43;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v16 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LCFusion to always yield on receiving any location notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion to always yield on receiving any location notification", v75, v74);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  else
  {
    v19 = v77;
    if (v77)
    {
      v20 = (unint64_t *)&v77->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
LABEL_43:
  sub_1001E4804(buf);
  if (sub_1001E4874(*(uint64_t *)buf, "LCFusionGenerateProviderSpecificHypotheses", (BOOL *)(a1 + 166)))
  {
    v22 = *(unsigned __int8 *)(a1 + 166);
    v23 = v77;
    if (!v77)
      goto LABEL_48;
    v24 = (unint64_t *)&v77->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v22)
        goto LABEL_64;
    }
    else
    {
LABEL_48:
      if (!v22)
        goto LABEL_64;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v26 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "LCFusion to generate and use provider specific hypotheses", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion to generate and use provider specific hypotheses", v75, v74);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
  else
  {
    v29 = v77;
    if (v77)
    {
      v30 = (unint64_t *)&v77->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
LABEL_64:
  sub_1001E4804(buf);
  v32 = *(double *)(a1 + 2160);
  v75[0] = 0;
  v33 = sub_1001FD98C(*(uint64_t *)buf, "LCFusionGNSSHorizontalUncFloorForLowSVTracking_m", v75);
  v34 = *(double *)v75;
  if (!v33)
    v34 = v32;
  *(double *)(a1 + 2160) = v34;
  v35 = v77;
  if (v77)
  {
    v36 = (unint64_t *)&v77->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_1001E4804(buf);
  LODWORD(v75[0]) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "LCFusionAlwaysSetOutputToProviderType", v75))
    v38 = v75[0];
  else
    v38 = 0;
  v39 = v77;
  if (v77)
  {
    v40 = (unint64_t *)&v77->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v38 == 2)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v44 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "LCFusion will always set output location type to Wifi", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion will always set output location type to Wifi", v75, v74);
      v71 = (uint8_t *)v70;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v70);
      if (v71 != buf)
        free(v71);
    }
    v43 = 4;
  }
  else if (v38 == 1)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v42 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "LCFusion will always set output location type to GPS", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion will always set output location type to GPS", v75, v74);
      v69 = (uint8_t *)v68;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v68);
      if (v69 != buf)
        free(v69);
    }
    v43 = 1;
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v45 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "LCFusion output type will be determined based on max likelihood", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion output type will be determined based on max likelihood", v75, v74);
      v73 = (uint8_t *)v72;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v72);
      if (v73 != buf)
        free(v73);
    }
    v43 = 0;
  }
  *(_DWORD *)(a1 + 160) = v43;
  sub_1001E4804(buf);
  LODWORD(v75[0]) = 0;
  v46 = sub_1001E4B84(*(uint64_t *)buf, "LCFusionSetAllHypothesesLikelihoodsEqual", v75);
  if (LODWORD(v75[0]))
    v47 = v46;
  else
    v47 = 0;
  v48 = v77;
  if (!v77)
    goto LABEL_106;
  v49 = (unint64_t *)&v77->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if (!v47)
      goto LABEL_112;
  }
  else
  {
LABEL_106:
    if (!v47)
      goto LABEL_112;
  }
  *(_BYTE *)(a1 + 164) = 1;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v51 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "LCFusion will set all likelihoods equal and ignore the likelihood update method", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v75[0]) = 0;
    LODWORD(v74) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion will set all likelihoods equal and ignore the likelihood update method", v75, v74);
    v67 = (uint8_t *)v66;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v66);
    if (v67 != buf)
      free(v67);
  }
LABEL_112:
  sub_1001E4804(buf);
  if (sub_1001E4874(*(uint64_t *)buf, "LCFusionDisablePassthroughLogic", (BOOL *)(a1 + 158)))
  {
    v52 = *(unsigned __int8 *)(a1 + 158);
    v53 = v77;
    if (!v77)
      goto LABEL_117;
    v54 = (unint64_t *)&v77->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (!v52)
        goto LABEL_135;
    }
    else
    {
LABEL_117:
      if (!v52)
        goto LABEL_135;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v56 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "LCFusion to skip the driving/fitness/accessory passthrough logic for internal testing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v75[0]) = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "LCFusion to skip the driving/fitness/accessory passthrough logic for internal testing", v75, v74);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
  else
  {
    v59 = v77;
    if (v77)
    {
      v60 = (unint64_t *)&v77->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
LABEL_135:
  *(_BYTE *)(a1 + 2156) = 1;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v62 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#fusion,LC Fusion configured successfully.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v75[0]) = 0;
    LODWORD(v74) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,LC Fusion configured successfully.", v75, v74);
    v65 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v64);
    if (v65 != buf)
      free(v65);
  }
  return 1;
}

void sub_100E0D088(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E0D094(uint64_t a1)
{
  _QWORD *v2;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[6];
  _BYTE v15[536];
  __int128 v16[8];
  int v17;

  v2 = (_QWORD *)(a1 + 224);
  sub_1008AF800(a1 + 216, *(_QWORD **)(a1 + 224));
  *(_QWORD *)(a1 + 216) = v2;
  *(_QWORD *)(a1 + 232) = 0;
  *v2 = 0;
  sub_1008AF7A8((_QWORD **)(a1 + 240));
  sub_1008AF854(a1 + 192, *(_QWORD **)(a1 + 200));
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 1704) = 0;
  sub_10072859C(a1 + 1112);
  sub_1006B33E0(a1 + 1840);
  sub_100E0D284((_QWORD *)(a1 + 2016));
  *(_QWORD *)(a1 + 1984) = *(_QWORD *)(a1 + 1976);
  *(_BYTE *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2144) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 2072) = 0;
  *(_BYTE *)(a1 + 2074) = 0;
  *(_BYTE *)(a1 + 2192) = 0;
  *(_BYTE *)(a1 + 159) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  sub_1013F8DE8(a1 + 968);
  bzero(v14, 0x2D0uLL);
  sub_1008AF42C((uint64_t)v14);
  sub_100E26A40((_QWORD *)(a1 + 248), (uint64_t)v14);
  memcpy((void *)(a1 + 296), v15, 0x218uLL);
  sub_1002B7674(a1 + 832, v16);
  v8 = v16[2];
  *(_OWORD *)(a1 + 848) = v16[1];
  *(_OWORD *)(a1 + 864) = v8;
  v9 = v16[6];
  *(_OWORD *)(a1 + 912) = v16[5];
  *(_OWORD *)(a1 + 928) = v9;
  *(_OWORD *)(a1 + 944) = v16[7];
  v10 = v16[4];
  *(_OWORD *)(a1 + 880) = v16[3];
  *(_DWORD *)(a1 + 960) = v17;
  *(_OWORD *)(a1 + 896) = v10;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
  if (*((_QWORD *)&v16[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1008AF650(v14);
  *(_DWORD *)(a1 + 1104) = 0;
  *(_WORD *)(a1 + 2075) = 0;
  *(_QWORD *)(a1 + 2080) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_BYTE *)(a1 + 2088) = 0;
  *(_QWORD *)(a1 + 2096) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_QWORD *)(a1 + 2120) = 0xBFF0000000000000;
  sub_1005E4154(*(_QWORD *)(a1 + 1696));
  sub_100592F30(a1 + 2168, *(_QWORD **)(a1 + 2176));
  *(_QWORD *)(a1 + 2168) = a1 + 2176;
  *(_QWORD *)(a1 + 2184) = 0;
  *(_QWORD *)(a1 + 2176) = 0;
  *(_DWORD *)(a1 + 2152) = 1;
}

void sub_100E0D284(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 32;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 64;
  }
  a1[4] = v6;
}

uint64_t sub_100E0D2F8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  sub_100E26A40((_QWORD *)a1, a2);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x218uLL);
  sub_1002B7674(a1 + 584, (__int128 *)(a2 + 584));
  v4 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v4;
  v5 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v5;
  v7 = *(_OWORD *)(a2 + 680);
  v6 = *(_OWORD *)(a2 + 696);
  v8 = *(_OWORD *)(a2 + 664);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v7;
  *(_OWORD *)(a1 + 696) = v6;
  *(_OWORD *)(a1 + 664) = v8;
  return a1;
}

uint64_t sub_100E0D374(uint64_t a1, char **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  void **v11;
  NSObject *v12;
  const char *v14;
  _WORD v15[8];
  void *__p;
  void *v17;
  uint64_t v18;

  if (!*(_BYTE *)(a1 + 2156))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v9 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,Feed InertialOdometry,LC Fusion is not configured.", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,Feed InertialOdometry,LC Fusion is not configured.", v15, 2);
    v11 = (void **)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::setIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v10);
    goto LABEL_33;
  }
  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  v5 = *a2;
  v4 = (uint64_t)a2[1];
  if (*a2 == (char *)v4)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v12 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Feed InertialOdometry,no IO sample(s) provided.", (uint8_t *)&__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#Feed InertialOdometry,no IO sample(s) provided.", v15, 2);
    v11 = (void **)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v14);
LABEL_33:
    if (v11 != &__p)
      free(v11);
    return 0;
  }
  v6 = (v4 - (uint64_t)v5) >> 3;
  v7 = 0x8E38E38E38E38E39 * v6;
  if ((954437177 * v6) >= 5)
  {
    do
    {
      if ((unint64_t)(v7 << 32) < 0x300000001)
      {
        __p = 0;
        v17 = 0;
        v18 = 0;
        sub_100E28010(&__p, v5, v4, 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 3));
        v8 = sub_100E0DC0C(a1, &__p);
        v5 = a2[1];
        if (__p)
        {
          v17 = __p;
          operator delete(__p);
        }
      }
      else
      {
        __p = 0;
        v17 = 0;
        v18 = 0;
        sub_100E28010(&__p, v5, (uint64_t)(v5 + 288), 4uLL);
        v8 = sub_100E0DC0C(a1, &__p);
        if (__p)
        {
          v17 = __p;
          operator delete(__p);
        }
        v5 += 288;
      }
      v7 = (int)v7 - 4;
      v4 = (uint64_t)a2[1];
    }
    while (v5 != (char *)v4);
    return v8;
  }
  return sub_100E0DC0C(a1, a2);
}

void sub_100E0D780(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100E0D790(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *i;
  BOOL v14;
  NSObject *v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;

  if (!*(_BYTE *)(a1 + 2136))
  {
    v17 = *(_DWORD *)(a1 + 2152);
    if (v17 == 1)
    {
LABEL_30:
      *(_DWORD *)(a1 + 2152) = 4;
      return;
    }
    if (v17 != 2)
      return;
  }
  v2 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v3 = sub_100B30608(v2, buf);
  v26 = v3;
  v4 = *(double *)(a1 + 2144);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v5 = v3 - v4;
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100B303DC();
    v8 = sub_100B309E0(v7);
    *(_DWORD *)buf = 134349568;
    v34 = v5;
    v35 = 2050;
    v36 = v26;
    v37 = 2050;
    v38 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,data input arrived while fused state is in sleep mode for,%{public}.2f,[s],waking up to process the data,now_mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v18 = qword_1022A01B8;
    v19 = sub_100B303DC();
    v27 = 134349568;
    v28 = v5;
    v29 = 2050;
    v30 = v26;
    v31 = 2050;
    v32 = sub_100B309E0(v19);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "#fusion,data input arrived while fused state is in sleep mode for,%{public}.2f,[s],waking up to process the data,now_mct,%{public}.3f,propagation_us,%{public}.3f", &v27, 32);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::checkLCFusionState()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (*(_DWORD *)(a1 + 2152) == 2)
  {
    sub_100727B38(a1 + 1112, &v26);
    v9 = *(_QWORD **)(a1 + 216);
    if (v9 != (_QWORD *)(a1 + 224))
    {
      do
      {
        sub_100727B38((uint64_t)(v9 + 11), &v26);
        v10 = (_QWORD *)v9[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v9[2];
            v12 = *v11 == (_QWORD)v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
      }
      while (v11 != (_QWORD *)(a1 + 224));
    }
    for (i = *(_QWORD **)(a1 + 240); i; i = (_QWORD *)*i)
      sub_100727B38((uint64_t)(i + 7), &v26);
  }
  *(_DWORD *)(a1 + 2152) = 3;
  if (*(_BYTE *)(a1 + 2136))
    v14 = v5 <= 5.0;
  else
    v14 = 1;
  if (!v14)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(double *)(a1 + 2144);
      *(_DWORD *)buf = 134349568;
      v34 = v16;
      v35 = 2050;
      v36 = v26;
      v37 = 2050;
      v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,likely missing or late arrival wakeup msg,force wakeup from sleep after,%{public}.2f,[s]", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v22 = *(double *)(a1 + 2144);
      v27 = 134349568;
      v28 = v22;
      v29 = 2050;
      v30 = v26;
      v31 = 2050;
      v32 = v5;
      LODWORD(v25) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,likely missing or late arrival wakeup msg,force wakeup from sleep after,%{public}.2f,[s]", &v27, v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::checkLCFusionState()", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    *(_BYTE *)(a1 + 2136) = 0;
    *(_QWORD *)(a1 + 2144) = 0xBFF0000000000000;
    goto LABEL_30;
  }
}

void sub_100E0DC00(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E0DC0C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double *v12;
  double v13;
  BOOL v14;
  BOOL v15;
  int v16;
  NSObject *v17;
  int v18;
  _QWORD *v19;
  NSObject *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  const char *v28;
  char *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  NSObject *v41;
  double v42;
  _QWORD *v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  const char *v51;
  char *v52;
  int v53;
  const char *v54;
  char *v55;
  uint64_t *j;
  NSObject *v57;
  int v58;
  int v59;
  const char *v60;
  char *v61;
  uint64_t *i;
  NSObject *v63;
  int v64;
  NSObject *v65;
  int v66;
  int v67;
  const char *v68;
  char *v69;
  int v70;
  const char *v71;
  char *v72;
  NSObject *v73;
  const char *v74;
  char *v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  const char *v82;
  char *v83;
  int v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  char *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  char v103[8];
  double v104;
  double v105;
  double v106;
  double v107;
  uint64_t v108;
  _BYTE v109[12];
  __int16 v110;
  _BYTE v111[10];
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  double v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  unsigned int v122;
  _BYTE buf[32];
  _BYTE v124[32];
  __int128 v125;

  result = sub_1005E235C(*(_QWORD *)(a1 + 1696), a2);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(a1 + 1696);
    v6 = *(double *)(v4 + 384);
    v5 = *(_QWORD *)(v4 + 392);
    v107 = v6;
    v108 = v5;
    if (!(_DWORD)v5)
      return 0;
    if (*(_BYTE *)(a1 + 2192))
    {
      *(double *)buf = v107;
      *(_DWORD *)&buf[8] = v108;
      sub_100E0F290(v4, (uint64_t)&buf[16]);
      *(_QWORD *)v109 = &v107;
      v7 = sub_100E280DC((uint64_t **)(a1 + 2224), &v107, (uint64_t)&unk_101B9EB60, (_QWORD **)v109);
      v9 = *(_OWORD *)&v124[16];
      v8 = v125;
      v10 = *(_OWORD *)v124;
      v11 = *(_OWORD *)buf;
      *(_OWORD *)(v7 + 7) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v7 + 9) = v10;
      *(_OWORD *)(v7 + 11) = v9;
      *(_OWORD *)(v7 + 13) = v8;
      *(_OWORD *)(v7 + 5) = v11;
      return 1;
    }
    v12 = *(double **)(a1 + 240);
    if (v12)
    {
      v13 = -1.0;
      do
      {
        v14 = v12[51] <= v13 || *((_DWORD *)v12 + 167) == 0;
        if (!v14)
          v13 = v12[51];
        v12 = *(double **)v12;
      }
      while (v12);
    }
    else
    {
      v13 = -1.0;
    }
    if (v6 >= 0.0 && (v13 >= v6 ? (v15 = v13 - v6 <= 6.0) : (v15 = 1), v15))
    {
      sub_100E0F290(v4, (uint64_t)v103);
      if ((v108 - 1) > 1)
      {
        if ((_DWORD)v108 == 4 && v104 < 0.001)
        {
          v30 = *(_DWORD *)(a1 + 1912);
          if (((0x21Fu >> (v30 - 1)) & 1) != 0)
            v31 = 6;
          else
            v31 = *(_DWORD *)(a1 + 1912);
          if (v30 - 1 < 0xA)
            v30 = v31;
          if (v106 <= 0.3)
            v32 = v30;
          else
            v32 = 7;
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v33 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v34 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = v107;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v32;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived dynamics Mode update,dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v81 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)v109 = 134349568;
            *(double *)&v109[4] = v107;
            v110 = 1026;
            *(_DWORD *)v111 = v32;
            *(_WORD *)&v111[4] = 1026;
            *(_DWORD *)&v111[6] = v81;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,InertialOdometry derived dynamics Mode update,dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", v109, 24);
            v83 = (char *)v82;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v82);
            if (v83 != buf)
              free(v83);
          }
          sub_1006B3E28(a1 + 1840, (uint64_t **)&v107, v32);
          sub_100E0F448(a1, &v107);
        }
        else
        {
          sub_1005E4C1C(*(_QWORD *)(a1 + 1696), (uint64_t)&v98);
          v95 = sub_1005E4B9C(*(double **)(a1 + 1696));
          v96 = v35;
          v97 = v36;
          if (v98 >= v13
            || (v37 = *(_QWORD *)(a1 + 1696),
                *(double *)buf = v13 + 0.001,
                sub_1005E4C9C(v37, (double *)buf, (uint64_t)&v98, (uint64_t)&v95)))
          {
            if (v99 >= 5.0)
              v38 = 6;
            else
              v38 = 5;
            if (v99 >= 2.5)
              v39 = v38;
            else
              v39 = 4;
            if (v99 >= 1.0)
              v40 = v39;
            else
              v40 = 3;
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v41 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134350849;
              *(double *)&buf[4] = v98;
              *(_WORD *)&buf[12] = 2049;
              *(double *)&buf[14] = v99;
              *(_WORD *)&buf[22] = 2050;
              *(_QWORD *)&buf[24] = v100;
              *(_WORD *)v124 = 2049;
              *(_QWORD *)&v124[2] = v101;
              *(_WORD *)&v124[10] = 2050;
              *(double *)&v124[12] = v102;
              *(_WORD *)&v124[20] = 2049;
              *(_QWORD *)&v124[22] = v96;
              *(_WORD *)&v124[30] = 2050;
              *(_QWORD *)&v125 = v97;
              WORD4(v125) = 1026;
              *(_DWORD *)((char *)&v125 + 10) = v40;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived speed meas update,GSpeed_mps,%{private}.2f,GSpeedVar,%{public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f,VSpeed_mps,%{private}.2f,VSpeedVar,%{public}.2f,dynamicsMode,%{public}d", buf, 0x4Eu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              *(_DWORD *)v109 = 134350849;
              *(double *)&v109[4] = v98;
              v110 = 2049;
              *(double *)v111 = v99;
              *(_WORD *)&v111[8] = 2050;
              v112 = v100;
              v113 = 2049;
              v114 = v101;
              v115 = 2050;
              v116 = v102;
              v117 = 2049;
              v118 = v96;
              v119 = 2050;
              v120 = v97;
              v121 = 1026;
              v122 = v40;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,InertialOdometry derived speed meas update,GSpeed_mps,%{private}.2f,GSpeedVar,%{public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f,VSpeed_mps,%{private}.2f,VSpeedVar,%{public}.2f,dynamicsMode,%{public}d", v109, 78);
              v88 = (char *)v87;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v87);
              if (v88 != buf)
                free(v88);
            }
            v42 = v102;
            v43 = *(_QWORD **)(a1 + 216);
            if (v43 != (_QWORD *)(a1 + 224))
            {
              do
              {
                if (v40 > *(_DWORD *)(a1 + 1912))
                  *((_DWORD *)v43 + 108) = v40;
                if (v42 <= 0.616850275)
                {
                  if (!sub_10072BC74((uint64_t)(v43 + 11), (uint64_t)&v98))
                  {
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v44 = qword_1022A01B8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                    {
                      v45 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)buf = 134349312;
                      *(double *)&buf[4] = v98;
                      *(_WORD *)&buf[12] = 1026;
                      *(_DWORD *)&buf[14] = v45;
                      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis ground speed measurement update failed,hID,%{public}d", buf, 0x12u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01B0 != -1)
                        dispatch_once(&qword_1022A01B0, &stru_10218A448);
                      v50 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)v109 = 134349312;
                      *(double *)&v109[4] = v98;
                      v110 = 1026;
                      *(_DWORD *)v111 = v50;
                      LODWORD(v94) = 18;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,provider hypothesis ground speed measurement update failed,hID,%{public}d", v109, v94);
                      v52 = (char *)v51;
                      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v51);
                      if (v52 != buf)
                        free(v52);
                    }
                  }
                  if (!sub_10072D138((uint64_t)(v43 + 11), &v95))
                  {
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v46 = qword_1022A01B8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                    {
                      v47 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)buf = 134349312;
                      *(double *)&buf[4] = v95;
                      *(_WORD *)&buf[12] = 1026;
                      *(_DWORD *)&buf[14] = v47;
                      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d", buf, 0x12u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01B0 != -1)
                        dispatch_once(&qword_1022A01B0, &stru_10218A448);
                      v53 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)v109 = 134349312;
                      *(double *)&v109[4] = v95;
                      v110 = 1026;
                      *(_DWORD *)v111 = v53;
                      LODWORD(v94) = 18;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d", v109, v94);
                      v55 = (char *)v54;
                      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v54);
                      if (v55 != buf)
                        free(v55);
                    }
                  }
                }
                v48 = (_QWORD *)v43[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (_QWORD *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (_QWORD *)v43[2];
                    v14 = *v49 == (_QWORD)v43;
                    v43 = v49;
                  }
                  while (!v14);
                }
                v43 = v49;
              }
              while (v49 != (_QWORD *)(a1 + 224));
            }
            for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
            {
              if (v40 > *(_DWORD *)(a1 + 1912))
                *((_DWORD *)i + 100) = v40;
              if (v42 <= 0.616850275)
              {
                if (!sub_10072BC74((uint64_t)(i + 7), (uint64_t)&v98))
                {
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v63 = qword_1022A01B8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                  {
                    v64 = *((_DWORD *)i + 165);
                    *(_DWORD *)buf = 134349312;
                    *(double *)&buf[4] = v98;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v64;
                    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,fused hypothesis ground speed measurement update failed,hID,%{public}d", buf, 0x12u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v67 = *((_DWORD *)i + 165);
                    *(_DWORD *)v109 = 134349312;
                    *(double *)&v109[4] = v98;
                    v110 = 1026;
                    *(_DWORD *)v111 = v67;
                    LODWORD(v94) = 18;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,fused hypothesis ground speed measurement update failed,hID,%{public}d", v109, v94);
                    v69 = (char *)v68;
                    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v68);
                    if (v69 != buf)
                      free(v69);
                  }
                }
                if (!sub_10072D138((uint64_t)(i + 7), &v95))
                {
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v65 = qword_1022A01B8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                  {
                    v66 = *((_DWORD *)i + 165);
                    *(_DWORD *)buf = 134349312;
                    *(double *)&buf[4] = v95;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v66;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d", buf, 0x12u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v70 = *((_DWORD *)i + 165);
                    *(_DWORD *)v109 = 134349312;
                    *(double *)&v109[4] = v95;
                    v110 = 1026;
                    *(_DWORD *)v111 = v70;
                    LODWORD(v94) = 18;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d", v109, v94);
                    v72 = (char *)v71;
                    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v71);
                    if (v72 != buf)
                      free(v72);
                  }
                }
              }
            }
          }
          else
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v73 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349312;
              *(double *)&buf[4] = v13;
              *(_WORD *)&buf[12] = 2050;
              *(double *)&buf[14] = v98;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "#fusion,failed to extrapolate time-lagged InertialOdometry data,most recent filter mct,%{public}.3f,IO timeMCT,%{public}.3f", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              *(_DWORD *)v109 = 134349312;
              *(double *)&v109[4] = v13;
              v110 = 2050;
              *(double *)v111 = v98;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,failed to extrapolate time-lagged InertialOdometry data,most recent filter mct,%{public}.3f,IO timeMCT,%{public}.3f", v109, 22);
              v75 = (char *)v74;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v74);
              if (v75 != buf)
                free(v75);
            }
          }
        }
        return 1;
      }
      if (*(_BYTE *)(a1 + 2088)
        || *(_DWORD *)(a1 + 96) != 1
        || vabdd_f64(sub_1005FECEC(), *(double *)(a1 + 76)) >= *(double *)(a1 + 88)
        || *(double *)(a1 + 52) >= 5.0
        || *(double *)(a1 + 44) < 4.0
        || (*(_QWORD *)buf = 0xBFF0000000000000, sub_1006B4F00((_QWORD *)(a1 + 1840), (double *)buf))
        && !sub_100E0F358((_QWORD *)(a1 + 2016), &dbl_101C28D48))
      {
        result = sub_1006B4F00((_QWORD *)(a1 + 1840), &dbl_101C28D50);
        *(double *)(a1 + 2128) = v105 + *(double *)(a1 + 2128);
        if ((_DWORD)result)
        {
          if ((_DWORD)v108 == 2)
            v16 = 2;
          else
            v16 = 1;
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v17 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v18 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = v107;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v16;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v84 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)v109 = 134349568;
            *(double *)&v109[4] = v107;
            v110 = 1026;
            *(_DWORD *)v111 = v16;
            *(_WORD *)&v111[4] = 1026;
            *(_DWORD *)&v111[6] = v84;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", v109, 24);
            v86 = (char *)v85;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v85);
            if (v86 != buf)
              free(v86);
          }
          v19 = *(_QWORD **)(a1 + 216);
          if (v19 != (_QWORD *)(a1 + 224))
          {
            do
            {
              *((_DWORD *)v19 + 108) = v16;
              if (!sub_1007296FC((uint64_t)(v19 + 11), &v107, 1.5))
              {
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v20 = qword_1022A01B8;
                if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                {
                  v21 = *((_DWORD *)v19 + 173);
                  *(_DWORD *)buf = 134349312;
                  *(double *)&buf[4] = v107;
                  *(_WORD *)&buf[12] = 1026;
                  *(_DWORD *)&buf[14] = v21;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d", buf, 0x12u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v24 = *((_DWORD *)v19 + 173);
                  *(_DWORD *)v109 = 134349312;
                  *(double *)&v109[4] = v107;
                  v110 = 1026;
                  *(_DWORD *)v111 = v24;
                  LODWORD(v94) = 18;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d", v109, v94);
                  v26 = (char *)v25;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v25);
                  if (v26 != buf)
                    free(v26);
                }
              }
              v22 = (_QWORD *)v19[1];
              if (v22)
              {
                do
                {
                  v23 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  v23 = (_QWORD *)v19[2];
                  v14 = *v23 == (_QWORD)v19;
                  v19 = v23;
                }
                while (!v14);
              }
              v19 = v23;
            }
            while (v23 != (_QWORD *)(a1 + 224));
          }
          for (j = *(uint64_t **)(a1 + 240); j; j = (uint64_t *)*j)
          {
            *((_DWORD *)j + 100) = v16;
            if (!sub_1007296FC((uint64_t)(j + 7), &v107, 1.5))
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v57 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v58 = *((_DWORD *)j + 165);
                *(_DWORD *)buf = 134349312;
                *(double *)&buf[4] = v107;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v58;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d", buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v59 = *((_DWORD *)j + 165);
                *(_DWORD *)v109 = 134349312;
                *(double *)&v109[4] = v107;
                v110 = 1026;
                *(_DWORD *)v111 = v59;
                LODWORD(v94) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d", v109, v94);
                v61 = (char *)v60;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v60);
                if (v61 != buf)
                  free(v61);
              }
            }
          }
          return 1;
        }
      }
      else
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v76 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_INFO))
        {
          v77 = *(_QWORD *)(a1 + 76);
          v78 = *(_QWORD *)(a1 + 44);
          v79 = *(_QWORD *)(a1 + 52);
          *(_DWORD *)buf = 134349825;
          *(_QWORD *)&buf[4] = v77;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v107;
          *(_WORD *)&buf[22] = 2049;
          *(_QWORD *)&buf[24] = v78;
          *(_WORD *)v124 = 2049;
          *(_QWORD *)&v124[2] = v79;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "#fusion,iOSfix,%{public}.3f,IOmct,%{public}.3f,InertialOdometry derived zupt rejected,speed,%{private}.2f,speedAcc,%{private}.2f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v89 = *(_QWORD *)(a1 + 76);
          v90 = *(_QWORD *)(a1 + 44);
          v91 = *(_QWORD *)(a1 + 52);
          *(_DWORD *)v109 = 134349825;
          *(_QWORD *)&v109[4] = v89;
          v110 = 2050;
          *(double *)v111 = v107;
          *(_WORD *)&v111[8] = 2049;
          v112 = v90;
          v113 = 2049;
          v114 = v91;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 1, "#fusion,iOSfix,%{public}.3f,IOmct,%{public}.3f,InertialOdometry derived zupt rejected,speed,%{private}.2f,speedAcc,%{private}.2f", v109, 42);
          v93 = (char *)v92;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v92);
          if (v93 != buf)
            free(v93);
        }
        result = 0;
        v80 = *(_QWORD *)(a1 + 1696);
        *(_QWORD *)(v80 + 384) = 0xBFF0000000000000;
        *(_DWORD *)(v80 + 392) = 0;
      }
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v27 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v6;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#fusion,most recent filter update time mct,%{public}.3f,ignoring old InertialOdometry derived data with mct,%{public}.3f", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        *(_DWORD *)v109 = 134349312;
        *(double *)&v109[4] = v13;
        v110 = 2050;
        *(double *)v111 = v107;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,most recent filter update time mct,%{public}.3f,ignoring old InertialOdometry derived data with mct,%{public}.3f", v109, 22);
        v29 = (char *)v28;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
        return 0;
      }
    }
  }
  return result;
}

void sub_100E0F268(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100E0F290(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 152);
  v4 = hypotf((float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212), (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
  v5 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 376);
  *(double *)(a2 + 24) = *(double *)(a1 + 192) + *(double *)(a1 + 184);
  *(_QWORD *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
  v7 = *(double *)(a1 + 120);
  v8 = 0.0;
  if (v7 > 0.0)
    v8 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v7;
  *(double *)(a2 + 48) = v8;
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 48);
}

BOOL sub_100E0F358(_QWORD *a1, double *a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;

  v2 = a1[5];
  if (!v2)
    return 0;
  if (*a2 >= 0.0)
  {
    v8 = v2 + a1[4] - 1;
    v9 = *(_QWORD *)(a1[1] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8));
    v10 = sub_100B303DC();
    v13 = 1;
    v11 = sub_100B30608(v10, &v13);
    v12 = *(double *)(v9 + ((v8 & 0x3F) << 6) + 16);
    if (v12 < 0.0 || v11 >= v12 && v11 - v12 > *a2)
      return 0;
  }
  v5 = a1[5] + a1[4] - 1;
  v6 = *(_QWORD *)(a1[1] + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v5 & 0x3F) << 6);
  return *(_QWORD *)(v6 + 24) == 2 && *(double *)(v6 + 40) > 0.8;
}

uint64_t sub_100E0F448(uint64_t a1, double *a2)
{
  int *v4;
  BOOL v5;
  NSObject *v6;
  double v7;
  int v8;
  char v9;
  _QWORD *v10;
  NSObject *v11;
  double v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  double v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  uint64_t *i;
  NSObject *v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  double v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  v4 = (int *)(a1 + 1912);
  v5 = sub_100729214(a1 + 1112, a2, (_DWORD *)(a1 + 1912));
  if (!v5)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v6 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a2;
      v8 = *v4;
      *(_DWORD *)buf = 134349312;
      v46 = v7;
      v47 = 1026;
      v48 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,Failed to update fusion predictor filter dynamics mode,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v34 = *a2;
      v35 = *v4;
      v39 = 134349312;
      v40 = v34;
      v41 = 1026;
      v42 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,Failed to update fusion predictor filter dynamics mode,%{public}d", &v39, 18);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  v9 = !v5;
  v10 = *(_QWORD **)(a1 + 216);
  if (v10 != (_QWORD *)(a1 + 224))
  {
    do
    {
      if (!sub_100729214((uint64_t)(v10 + 11), a2, (_DWORD *)(a1 + 1912)))
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v11 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v12 = *a2;
          v13 = *v4;
          v14 = *((_DWORD *)v10 + 173);
          *(_DWORD *)buf = 134349568;
          v46 = v12;
          v47 = 1026;
          v48 = v13;
          v49 = 1026;
          v50 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,Failed to update provider hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v18 = *a2;
          v19 = *v4;
          v20 = *((_DWORD *)v10 + 173);
          v39 = 134349568;
          v40 = v18;
          v41 = 1026;
          v42 = v19;
          v43 = 1026;
          v44 = v20;
          LODWORD(v38) = 24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,Failed to update provider hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d", &v39, v38);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        v9 = 1;
      }
      v15 = (_QWORD *)v10[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v10[2];
          v17 = *v16 == (_QWORD)v10;
          v10 = v16;
        }
        while (!v17);
      }
      v10 = v16;
    }
    while (v16 != (_QWORD *)(a1 + 224));
  }
  for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
  {
    if (!sub_100729214((uint64_t)(i + 7), a2, v4))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v24 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v25 = *a2;
        v26 = *v4;
        v27 = *((_DWORD *)i + 165);
        *(_DWORD *)buf = 134349568;
        v46 = v25;
        v47 = 1026;
        v48 = v26;
        v49 = 1026;
        v50 = v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,Failed to update fused hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v28 = *a2;
        v29 = *v4;
        v30 = *((_DWORD *)i + 165);
        v39 = 134349568;
        v40 = v28;
        v41 = 1026;
        v42 = v29;
        v43 = 1026;
        v44 = v30;
        LODWORD(v38) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,Failed to update fused hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d", &v39, v38);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      v9 = 1;
    }
  }
  return v9 & 1;
}

void sub_100E0F9F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100E0FA08(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t **v20;
  uint64_t *v21;
  char *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 *v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  uint8_t *v43;
  _BOOL8 result;
  NSObject *v45;
  const char *v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t **v51;
  __int16 v52;
  double v53;
  __n128 v54[2];
  double v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  double v68;
  int v69;
  float v70;
  double v71;
  std::__shared_weak_count *v72;
  char v73;
  uint8_t buf[1640];

  v4 = (uint64_t **)(a1 + 2168);
  v5 = a1 + 2176;
  sub_100592F30(a1 + 2168, *(_QWORD **)(a1 + 2176));
  *(_QWORD *)(a1 + 2168) = v5;
  *(_QWORD *)(a1 + 2184) = 0;
  *(_QWORD *)(a1 + 2176) = 0;
  if (!*(_BYTE *)(a1 + 2156))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v41 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#Error,Feed setWiFiLocationBatched,LC Fusion is not configured.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v67) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,Feed setWiFiLocationBatched,LC Fusion is not configured.", &v67, 2);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v42);
LABEL_81:
    if (v43 != buf)
      free(v43);
    return 0;
  }
  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  v6 = *(int **)(a2 + 800);
  if (!v6)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v45 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,batch location data is nullptr,nothing to process.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v67) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,setWiFiLocationBatched,batch location data is nullptr,nothing to process.", &v67, 2);
    v43 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v46);
    goto LABEL_81;
  }
  v7 = sub_10104BD1C(v6);
  if (v7)
  {
    v8 = 0;
    v51 = (uint64_t **)(a1 + 192);
    __asm { FMOV            V0.2D, #-1.0 }
    v50 = _Q0;
    while (1)
    {
      sub_10104B598(*(_QWORD *)(a2 + 800), v8, (uint64_t)&v56);
      if (sub_100E104A8(v14, v61) && v59 > 0.0 && !sub_10011CE64(v57, v58))
        break;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v15 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v60;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,invalid wsb location is skipped,wsb_location_iosTime,%{public}.3f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v67 = 134349056;
        v68 = v60;
        LODWORD(v49) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,setWiFiLocationBatched,invalid wsb location is skipped,wsb_location_iosTime,%{public}.3f", &v67, v49);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
LABEL_15:
      if (++v8 == v7)
        return 1;
    }
    sub_10104BAA8(*(_QWORD *)(a2 + 800), v8, (uint64_t)&v67);
    v55 = v71;
    if (v71 > 0.0)
      goto LABEL_18;
    if (v60 <= 0.0)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v31 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,skipped wsb location with no valid timestamps", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_42;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v54[0].n128_u16[0] = 0;
      LODWORD(v49) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,setWiFiLocationBatched,skipped wsb location with no valid timestamps", v54, v49);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v32);
    }
    else
    {
      v30 = (__n128 *)sub_100B303DC();
      sub_100B307F4(v30, v54);
      v53 = 0.0;
      if ((sub_100AD206C((uint64_t)v54, &v53) & 1) != 0)
      {
        v55 = v60 - v53;
LABEL_18:
        v16 = (char *)operator new(0xD0uLL);
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        *(_QWORD *)v16 = off_10218A478;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 6) = 0u;
        *((_OWORD *)v16 + 7) = 0u;
        *((_OWORD *)v16 + 8) = 0u;
        *((_OWORD *)v16 + 9) = 0u;
        *((_OWORD *)v16 + 10) = 0u;
        *((_OWORD *)v16 + 11) = 0u;
        *((_OWORD *)v16 + 12) = 0u;
        *((_OWORD *)v16 + 2) = v50;
        *((_OWORD *)v16 + 3) = 0u;
        *((_QWORD *)v16 + 8) = 0xBFF0000000000000;
        *((_QWORD *)v16 + 10) = 0xBFF0000000000000;
        *(_OWORD *)(v16 + 104) = v50;
        *(_OWORD *)(v16 + 120) = v50;
        *((_QWORD *)v16 + 3) = off_10218A4C8;
        *((_QWORD *)v16 + 17) = 0xBFF0000000000000;
        *((_QWORD *)v16 + 22) = 0xBFF0000000000000;
        *((_DWORD *)v16 + 49) = 0xFFFF;
        *(_QWORD *)buf = v16 + 24;
        *(_QWORD *)&buf[8] = v16;
        sub_1013F80DC((uint64_t)(v16 + 24), (uint64_t)&v56, v59);
        v17 = *(_QWORD *)buf;
        *(_QWORD *)(*(_QWORD *)buf + 152) = v63;
        v18 = v56;
        *(_DWORD *)(v17 + 160) = v64;
        v19 = v65;
        *(_DWORD *)(v17 + 172) = v18;
        *(_DWORD *)(v17 + 176) = v19;
        *(_QWORD *)(v17 + 164) = v66;
        *(_OWORD *)(v17 + 136) = v62;
        *(double *)(v17 + 16) = v55;
        *(double *)(v17 + 64) = v70;
        *(_DWORD *)(v17 + 72) = v69;
        *(_BYTE *)(v17 + 124) = v73;
        v54[0].n128_u64[0] = (unint64_t)&v61;
        v20 = sub_100E28228(v51, &v61, (uint64_t)&unk_101B9EB60, v54);
        v21 = v20[5];
        v22 = (char *)operator new(0x18uLL);
        v23 = *(_OWORD *)buf;
        *(_QWORD *)v22 = v21;
        *(_OWORD *)(v22 + 8) = v23;
        if (*((_QWORD *)&v23 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v20[5] = (uint64_t *)v22;
        v54[0].n128_u64[0] = (unint64_t)&v55;
        v26 = sub_100E28350(v4, &v55, (uint64_t)&unk_101B9EB60, (uint64_t **)v54);
        sub_100349198(v26 + 5, (uint64_t *)buf);
        v27 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
LABEL_42:
        v35 = v72;
        if (v72)
        {
          p_shared_owners = (unint64_t *)&v72->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        goto LABEL_15;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v34 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,cannot compute fMachContinuousToCFAbsoluteOffset_s,discarding wsb sample", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_42;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v52 = 0;
      LODWORD(v49) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,setWiFiLocationBatched,cannot compute fMachContinuousToCFAbsoluteOffset_s,discarding wsb sample", &v52, v49);
      v33 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v40);
    }
    if (v33 != buf)
      free(v33);
    goto LABEL_42;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v47 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,has no location data,nothing to process.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v67) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,setWiFiLocationBatched,has no location data,nothing to process.", &v67, 2);
    v43 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v48);
    goto LABEL_81;
  }
  return result;
}

void sub_100E10498(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_100E104A8(uint64_t a1, int a2)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if ((a2 - 1) < 0xB && ((0x7EFu >> (a2 - 1)) & 1) != 0)
    return 1;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v3 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#fusion,unsupported location,type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,unsupported location,type,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::isLocationTypeSupported(CLLocationType) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

void sub_100E10670(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100E1067C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  NSObject *v20;
  _BOOL8 result;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  const char *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  _WORD v41[8];
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  _DWORD v50[5];
  unint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint8_t buf[4];
  int v57;
  __int16 v58;
  int v59;

  if (!*(_BYTE *)(a1 + 2156))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v20 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error,getFilteredWiFiLocationBatched,LC Fusion is not configured.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,getFilteredWiFiLocationBatched,LC Fusion is not configured.", &v42, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v22);
LABEL_68:
    if (v23 != buf)
      free(v23);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 2184))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v24 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatched,no filtered wsb location data to return", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getFilteredWiFiLocationBatched,no filtered wsb location data to return", &v42, 2);
    v23 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v25);
    goto LABEL_68;
  }
  v3 = a2;
  v4 = *(int **)(a2 + 800);
  if (!v4)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v29 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatched,batch location data is nullptr,nothing to process.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getFilteredWiFiLocationBatched,batch location data is nullptr,nothing to process.", &v42, 2);
    v23 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v30);
    goto LABEL_68;
  }
  v5 = sub_10104BD1C(v4);
  if (!v5)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v31 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatch,no allocated locations buffer,nothing to process.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getFilteredWiFiLocationBatch,no allocated locations buffer,nothing to process.", &v42, 2);
    v23 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v32);
    goto LABEL_68;
  }
  v38 = v3;
  v39 = v5;
  v6 = *(_QWORD **)(a1 + 2168);
  v7 = 0;
  if (v6 != (_QWORD *)(a1 + 2176))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v40 = _Q0;
    do
    {
      v42 = 0xFFFF;
      v43 = 0uLL;
      v44 = xmmword_101BAFC90;
      v45 = v40;
      v46 = v40;
      v47 = v40;
      v48 = 0;
      v49 = 0xBFF0000000000000;
      memset(v50, 0, sizeof(v50));
      v51 = 0xBFF0000000000000;
      v52 = 0x7FFFFFFF;
      v54 = 0;
      v53 = 0uLL;
      v55 = 0;
      if (sub_100E10FC8(v5, v6[5], (uint64_t)&v42))
      {
        v13 = v6[5];
        v51 = *(_QWORD *)(v13 + 152);
        v15 = *(_DWORD *)(v13 + 172);
        v14 = *(_DWORD *)(v13 + 176);
        v52 = *(_DWORD *)(v13 + 160);
        LODWORD(v53) = v14;
        v42 = v15;
        *(_QWORD *)((char *)&v53 + 4) = *(_QWORD *)(v13 + 164);
        *(_OWORD *)&v50[1] = *(_OWORD *)(v13 + 136);
        sub_10104BCAC(*(_QWORD *)(v3 + 800), (uint64_t)&v42, v7++);
        if (v7 >= v39)
          break;
      }
      else
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v16 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatch,failed to convert to daemon location,wsb location sample skipped", buf, 2u);
        }
        v5 = sub_1001BFF7C(115, 2);
        v3 = v38;
        if ((_DWORD)v5)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v41[0] = 0;
          LODWORD(v36) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getFilteredWiFiLocationBatch,failed to convert to daemon location,wsb location sample skipped", v41, v36);
          v37 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v19);
          v5 = (uint64_t)v37;
          if (v37 != buf)
            free(v37);
        }
      }
      v17 = (_QWORD *)v6[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v6[2];
          _ZF = *v18 == (_QWORD)v6;
          v6 = v18;
        }
        while (!_ZF);
      }
      v6 = v18;
    }
    while (v18 != (_QWORD *)(a1 + 2176));
  }
  v26 = v39;
  if (*(_QWORD *)(a1 + 2184) > v39)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v27 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v28 = *(_QWORD *)(a1 + 2184);
      *(_DWORD *)buf = 67240448;
      v57 = v39;
      v58 = 1026;
      v59 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#Error,getFilteredWiFiLocationBatch,output wsb batch buffer not the same size as processed wsb locations,wsbBufferSize,%{public}d,NumFilteredwsbLocations,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v33 = *(_QWORD *)(a1 + 2184);
      v42 = 67240448;
      LODWORD(v43) = v39;
      WORD2(v43) = 1026;
      *(_DWORD *)((char *)&v43 + 6) = v33;
      LODWORD(v36) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,getFilteredWiFiLocationBatch,output wsb batch buffer not the same size as processed wsb locations,wsbBufferSize,%{public}d,NumFilteredwsbLocations,%{public}d", &v42, v36);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v34);
      if (v35 != buf)
        free(v35);
      v3 = v38;
      v26 = v39;
    }
  }
  if (v7 < v26)
    sub_10104BD24(*(int **)(v3 + 800), v7);
  return 1;
}

void sub_100E10FB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_100E10FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v8;
  double v9;
  _BOOL8 result;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  v8 = *(_DWORD *)(a2 + 128);
  if (!v8)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v11 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Error,convertFusedLocationToCLDaemonLocation,fused location type is Unknown", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,convertFusedLocationToCLDaemonLocation,fused location type is Unknown", v16, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::convertFusedLocationToCLDaemonLocation(const LCFusionProviderLocation &, CLDaemonLocation &) const", "%s\n", v12);
LABEL_21:
    if (v13 != buf)
      free(v13);
    return 0;
  }
  v9 = *(double *)(a2 + 40);
  if (v9 > 0.0)
  {
    *(_DWORD *)(a3 + 96) = v8;
    *(_QWORD *)(a3 + 76) = *(_QWORD *)(a2 + 8);
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(a2 + 24);
    *(double *)(a3 + 20) = v9;
    *(_OWORD *)(a3 + 28) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a3 + 44) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a3 + 60) = *(_OWORD *)(a2 + 96);
    *(_DWORD *)(a3 + 84) = *(_DWORD *)(a2 + 120);
    *(_QWORD *)(a3 + 88) = *(_QWORD *)(a2 + 112);
    result = 1;
    *(_DWORD *)(a3 + 132) = 1;
    return result;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v14 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Error,convertFusedLocationToCLDaemonLocation,get fused location failed,hunc <= 0", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,convertFusedLocationToCLDaemonLocation,get fused location failed,hunc <= 0", v16, 2);
    v13 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::convertFusedLocationToCLDaemonLocation(const LCFusionProviderLocation &, CLDaemonLocation &) const", "%s\n", v15);
    goto LABEL_21;
  }
  return result;
}

void sub_100E11328(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E11334(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *i;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  uint64_t v28;

  if (*(_BYTE *)(a1 + 2136))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v4 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a2;
      v6 = *(_QWORD *)(a1 + 2144);
      *(_DWORD *)buf = 134349312;
      v26 = v5;
      v27 = 2050;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,already in AP sleep mode since,%{public}.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a1 + 2144);
      v21 = 134349312;
      v22 = v7;
      v23 = 2050;
      v24 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,already in AP sleep mode since,%{public}.3f", &v21, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::enteringSleepMode(const CFTimeInterval &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 2136) = 1;
    *(double *)(a1 + 2144) = *a2;
    *(_BYTE *)(a1 + 2072) = 0;
    *(_BYTE *)(a1 + 159) = 0;
    *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
    sub_100008848(a1 + 2200, *(_QWORD **)(a1 + 2208));
    *(_QWORD *)(a1 + 2200) = a1 + 2208;
    *(_QWORD *)(a1 + 2216) = 0;
    *(_QWORD *)(a1 + 2208) = 0;
    sub_100008848(a1 + 2224, *(_QWORD **)(a1 + 2232));
    *(_QWORD *)(a1 + 2224) = a1 + 2232;
    *(_QWORD *)(a1 + 2240) = 0;
    *(_QWORD *)(a1 + 2232) = 0;
    *(_BYTE *)(a1 + 2192) = 1;
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v11 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a2;
      *(_DWORD *)buf = 134349056;
      v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#fusion,entering AP sleep mode at mct,%{public}.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v18 = *(_QWORD *)a2;
      v21 = 134349056;
      v22 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,entering AP sleep mode at mct,%{public}.3f", &v21, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::enteringSleepMode(const CFTimeInterval &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    sub_1007266B4(a1 + 1112, a2);
    v13 = *(_QWORD **)(a1 + 216);
    if (v13 != (_QWORD *)(a1 + 224))
    {
      do
      {
        sub_1007266B4((uint64_t)(v13 + 11), a2);
        v14 = (_QWORD *)v13[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v13[2];
            v16 = *v15 == (_QWORD)v13;
            v13 = v15;
          }
          while (!v16);
        }
        v13 = v15;
      }
      while (v15 != (_QWORD *)(a1 + 224));
    }
    for (i = *(_QWORD **)(a1 + 240); i; i = (_QWORD *)*i)
      sub_1007266B4((uint64_t)(i + 7), a2);
    *(_DWORD *)(a1 + 2152) = 2;
  }
}

void sub_100E11740(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E1174C(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *i;
  double v21;
  const char *v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  if (*(_BYTE *)(a1 + 2136))
  {
    v4 = *a2;
    v5 = *(double *)(a1 + 2144);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v6 = v4 - v5;
    v7 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(double *)(a1 + 2144);
      v9 = *a2;
      *(_DWORD *)buf = 134349568;
      v30 = v8;
      v31 = 2050;
      v32 = v9;
      v33 = 2050;
      v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,AP sleep wakeup after,%{public}.2f,[s]", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v10 = *(double *)(a1 + 2144);
      v11 = *a2;
      v23 = 134349568;
      v24 = v10;
      v25 = 2050;
      v26 = v11;
      v27 = 2050;
      v28 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,AP sleep wakeup after,%{public}.2f,[s]", &v23, 32);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::wakeUp(const CFTimeInterval &)", "%s\n", v12);
LABEL_28:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v14 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *a2;
      *(_DWORD *)buf = 134349056;
      v30 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#fusion,now_mct,%{public}.3f,AP sleep wakeup called while fused state is not in sleep mode, waking up", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v21 = *a2;
      v23 = 134349056;
      v24 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,now_mct,%{public}.3f,AP sleep wakeup called while fused state is not in sleep mode, waking up", &v23, 12);
      v13 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::wakeUp(const CFTimeInterval &)", "%s\n", v22);
      goto LABEL_28;
    }
  }
  sub_100727B38(a1 + 1112, a2);
  v16 = *(_QWORD **)(a1 + 216);
  if (v16 != (_QWORD *)(a1 + 224))
  {
    do
    {
      sub_100727B38((uint64_t)(v16 + 11), a2);
      v17 = (_QWORD *)v16[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v16[2];
          v19 = *v18 == (_QWORD)v16;
          v16 = v18;
        }
        while (!v19);
      }
      v16 = v18;
    }
    while (v18 != (_QWORD *)(a1 + 224));
  }
  for (i = *(_QWORD **)(a1 + 240); i; i = (_QWORD *)*i)
    sub_100727B38((uint64_t)(i + 7), a2);
  *(_BYTE *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2152) = 4;
}

void sub_100E11B1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E11B28(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v8;
  double v9;
  __int128 *v10;
  double v11;
  double v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  double v29;
  uint64_t v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  unsigned int *v39;
  uint64_t **v40;
  uint64_t *v41;
  NSObject *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  double v47;
  uint64_t v48;
  const char *v49;
  double v50;
  uint64_t v51;
  const char *v52;
  double v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  uint64_t v57;
  double v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  const char *v64;
  char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  double v71;
  const char *v72;
  char *v73;
  int v74;
  double v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  _BYTE buf[12];
  __int16 v91;
  const char *v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;

  *a4 = 0;
  *a3 = 0;
  v8 = sub_100B303DC();
  *(_DWORD *)buf = 0;
  v9 = sub_100B30608(v8, buf);
  v10 = (__int128 *)(a2 + 8);
  v11 = *(double *)(a2 + 8);
  v12 = v9 - v11;
  if (v9 - v11 >= 0.0)
  {
    v22 = *(double *)(a2 + 112);
    if (v12 <= v22 || (v22 >= 0.0 ? (v23 = v9 <= v11) : (v23 = 1), v23))
    {
      if (v12 <= 300.0)
      {
        if (v12 >= 2.0)
        {
          v39 = (unsigned int *)(a2 + 128);
          *(_QWORD *)buf = a2 + 128;
          v40 = sub_100E28228((uint64_t **)(a1 + 192), (int *)(a2 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5;
          while (1)
          {
            v40 = (uint64_t **)*v40;
            *(_QWORD *)buf = a2 + 128;
            sub_100E28228((uint64_t **)(a1 + 192), (int *)(a2 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            if (!v40)
              break;
            v41 = v40[1];
            if (v41 && (*(unsigned int (**)(uint64_t *, uint64_t))(*v41 + 16))(v41, a2))
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v42 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v43 = *(double *)v10;
                v44 = sub_10014D1E0(*v39);
                v45 = *(_QWORD *)(a2 + 24);
                v46 = *(const char **)(a2 + 32);
                v47 = *(double *)(a2 + 112);
                *(_DWORD *)buf = 134350339;
                *(double *)&buf[4] = v43;
                v91 = 2082;
                v92 = v44;
                v93 = 2049;
                v94 = v45;
                v95 = 2049;
                v96 = v46;
                v97 = 2050;
                v98 = v47;
                v99 = 2050;
                v100 = v12;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Duplicate location detected in LC Fusion,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private}.7f,lon,%{private}.7f,lifespan,%{public}.1f,age,%{public}.3f", buf, 0x3Eu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v66 = qword_1022A01B8;
                v67 = *(double *)v10;
                v68 = sub_10014D1E0(*v39);
                v69 = *(_QWORD *)(a2 + 24);
                v70 = *(const char **)(a2 + 32);
                v71 = *(double *)(a2 + 112);
                v74 = 134350339;
                v75 = v67;
                v76 = 2082;
                v77 = v68;
                v78 = 2049;
                v79 = v69;
                v80 = 2049;
                v81 = v70;
                v82 = 2050;
                v83 = v71;
                v84 = 2050;
                v85 = v12;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 2, "Duplicate location detected in LC Fusion,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private}.7f,lon,%{private}.7f,lifespan,%{public}.1f,age,%{public}.3f", &v74, 62);
                v73 = (char *)v72;
                sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::ageCheckLocation(LCFusionProviderLocation &, BOOL &, BOOL &)", "%s\n", v72);
                if (v73 != buf)
                  free(v73);
              }
              *a3 = 1;
              v38 = 3;
              goto LABEL_21;
            }
          }
        }
      }
      else
      {
        *a3 = 1;
        v38 = 4;
LABEL_21:
        *(_DWORD *)(a1 + 1104) = v38;
      }
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v24 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(_QWORD *)(a2 + 8);
        v26 = sub_10014D1E0(*(_DWORD *)(a2 + 128));
        v27 = *(_QWORD *)(a2 + 24);
        v28 = *(const char **)(a2 + 32);
        v29 = *(double *)(a2 + 112);
        v30 = sub_100B303DC();
        v31 = sub_100B309E0(v30);
        *(_DWORD *)buf = 134350595;
        *(_QWORD *)&buf[4] = v25;
        v91 = 2082;
        v92 = v26;
        v93 = 2049;
        v94 = v27;
        v95 = 2049;
        v96 = v28;
        v97 = 2050;
        v98 = v29;
        v99 = 2050;
        v100 = v12;
        v101 = 2050;
        v102 = v31;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning,Got expiredLocation,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1f,age,%{public}.3f,propagation_us,%{public}.3f", buf, 0x48u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v57 = qword_1022A01B8;
        v58 = *(double *)(a2 + 8);
        v59 = sub_10014D1E0(*(_DWORD *)(a2 + 128));
        v61 = *(_QWORD *)(a2 + 24);
        v60 = *(const char **)(a2 + 32);
        v62 = *(double *)(a2 + 112);
        v63 = sub_100B303DC();
        v74 = 134350595;
        v75 = v58;
        v76 = 2082;
        v77 = v59;
        v78 = 2049;
        v79 = v61;
        v80 = 2049;
        v81 = v60;
        v82 = 2050;
        v83 = v62;
        v84 = 2050;
        v85 = v12;
        v86 = 2050;
        v87 = sub_100B309E0(v63);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 0, "#Warning,Got expiredLocation,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1f,age,%{public}.3f,propagation_us,%{public}.3f", &v74, 72);
        v65 = (char *)v64;
        sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::ageCheckLocation(LCFusionProviderLocation &, BOOL &, BOOL &)", "%s\n", v64);
        if (v65 != buf)
          free(v65);
      }
      *a4 = 1;
      v32 = *v10;
      v33 = v10[1];
      v34 = v10[3];
      *(_OWORD *)(a1 + 1008) = v10[2];
      *(_OWORD *)(a1 + 1024) = v34;
      *(_OWORD *)(a1 + 976) = v32;
      *(_OWORD *)(a1 + 992) = v33;
      v35 = v10[4];
      v36 = v10[5];
      v37 = v10[6];
      *(_OWORD *)(a1 + 1084) = *(__int128 *)((char *)v10 + 108);
      *(_OWORD *)(a1 + 1072) = v37;
      *(_OWORD *)(a1 + 1056) = v36;
      *(_OWORD *)(a1 + 1040) = v35;
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v13 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a2 + 16);
      v14 = *(const char **)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = sub_10014D1E0(*(_DWORD *)(a2 + 128));
      v18 = *(double *)v10;
      v19 = sub_100B303DC();
      v20 = sub_100B309E0(v19);
      *(_DWORD *)buf = 134350851;
      *(_QWORD *)&buf[4] = v15;
      v91 = 2049;
      v92 = v14;
      v93 = 2049;
      v94 = v16;
      v95 = 2082;
      v96 = v17;
      v97 = 2050;
      v98 = v12;
      v99 = 2050;
      v100 = v18;
      v101 = 2050;
      v102 = v9;
      v103 = 2050;
      v104 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,Got location with future timestamp,mct,%{public}.3f,lat,%{private}.7f,lon,%{private}.7f,provider,%{public}s,age,%{public}.3f,timestampiOS,%{public}.3f,correcting to,%{public}.3f,propagation_us,%{public}.3f", buf, 0x52u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v48 = qword_1022A01B8;
      v50 = *(double *)(a2 + 16);
      v49 = *(const char **)(a2 + 24);
      v51 = *(_QWORD *)(a2 + 32);
      v52 = sub_10014D1E0(*(_DWORD *)(a2 + 128));
      v53 = *(double *)v10;
      v54 = sub_100B303DC();
      v74 = 134350851;
      v75 = v50;
      v76 = 2049;
      v77 = v49;
      v78 = 2049;
      v79 = v51;
      v80 = 2082;
      v81 = v52;
      v82 = 2050;
      v83 = v12;
      v84 = 2050;
      v85 = v53;
      v86 = 2050;
      v87 = v9;
      v88 = 2050;
      v89 = sub_100B309E0(v54);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 0, "#Warning,Got location with future timestamp,mct,%{public}.3f,lat,%{private}.7f,lon,%{private}.7f,provider,%{public}s,age,%{public}.3f,timestampiOS,%{public}.3f,correcting to,%{public}.3f,propagation_us,%{public}.3f", &v74, 82);
      v56 = (char *)v55;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::ageCheckLocation(LCFusionProviderLocation &, BOOL &, BOOL &)", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    *(double *)v10 = v9;
    v21 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a2 + 16) = sub_100B30608(v21, buf);
  }
}

void sub_100E1230C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_100E1231C(uint64_t a1)
{
  _BOOL8 result;
  double v3;

  result = 0;
  if (sub_100754D84(a1 + 1712) && (sub_1006B4F00((_QWORD *)(a1 + 1840), &dbl_101C28D50) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 2073))
      return 1;
    if (*(_BYTE *)(a1 + 2074))
      return 1;
    if (sub_1006B4DE4((_QWORD *)(a1 + 1840), &dbl_101C28D50))
      return 1;
    v3 = sub_1005EEB24();
    if (sub_1008ABF50((_DWORD *)(a1 + 1968), v3)
      || (sub_1006B506C(a1 + 1840, &dbl_101C28D50) & 1) != 0
      || sub_1006B53D4(a1 + 1840)
      || sub_1006B5410(a1 + 1840)
      || (sub_1006B52B4(a1 + 1840, &dbl_101C28D50) & 1) != 0
      || (sub_1006B51A0(a1 + 1840, &dbl_101C28D50) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100E123F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  int v37;
  int v38;
  int v39;
  int v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  double v46;
  double v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  const char *v57;
  uint8_t *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint8_t *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint8_t *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  double v108;
  int v109;
  const char *v110;
  int v111;
  _BYTE v112[10];
  _BYTE v113[10];
  _BYTE v114[10];
  double v115;
  __int16 v116;
  int v117;
  uint8_t buf[4];
  _BYTE v119[10];
  _BYTE v120[10];
  _BYTE v121[10];
  double v122;
  __int16 v123;
  int v124;

  if (*(_BYTE *)(a1 + 2073) || *(_BYTE *)(a1 + 2074))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v4 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 2073);
      v6 = *(unsigned __int8 *)(a1 + 2074);
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)v119 = v5;
      *(_WORD *)&v119[4] = 1026;
      *(_DWORD *)&v119[6] = v6;
      *(_WORD *)v120 = 2050;
      *(_QWORD *)&v120[2] = v7;
      *(_WORD *)v121 = 2050;
      *(_QWORD *)&v121[2] = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,hasAirborneClient,%{public}d,hasFitnessClient,%{public}d,cfat,%{public}.3f,mct,%{public}.3f", buf, 0x22u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v59 = *(unsigned __int8 *)(a1 + 2073);
    v60 = *(unsigned __int8 *)(a1 + 2074);
    v61 = *(_QWORD *)(a2 + 8);
    v62 = *(_QWORD *)(a2 + 16);
    v111 = 67240960;
    *(_DWORD *)v112 = v59;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v60;
    *(_WORD *)v113 = 2050;
    *(_QWORD *)&v113[2] = v61;
    *(_WORD *)v114 = 2050;
    *(_QWORD *)&v114[2] = v62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,hasAirborneClient,%{public}d,hasFitnessClient,%{public}d,cfat,%{public}.3f,mct,%{public}.3f", &v111, 34);
    v64 = (uint8_t *)v63;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v63);
    if (v64 == buf)
      goto LABEL_8;
    goto LABEL_109;
  }
  if (*(_DWORD *)(a2 + 128) == 3)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v12 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v119 = v13;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,accessory,cfat,%{public}.3f,mct,%{public}.3f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v73 = *(_QWORD *)(a2 + 8);
    v74 = *(_QWORD *)(a2 + 16);
    v111 = 134349312;
    *(_QWORD *)v112 = v73;
    *(_WORD *)&v112[8] = 2050;
    *(_QWORD *)v113 = v74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,accessory,cfat,%{public}.3f,mct,%{public}.3f", &v111, 22);
    v64 = (uint8_t *)v75;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v75);
    if (v64 == buf)
      goto LABEL_8;
    goto LABEL_109;
  }
  if (sub_1006B4DE4((_QWORD *)(a1 + 1840), &dbl_101C28D50))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v119 = v16;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,vehicleConnected,cfat,%{public}.3f,mct,%{public}.3f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v76 = *(_QWORD *)(a2 + 8);
    v77 = *(_QWORD *)(a2 + 16);
    v111 = 134349312;
    *(_QWORD *)v112 = v76;
    *(_WORD *)&v112[8] = 2050;
    *(_QWORD *)v113 = v77;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,vehicleConnected,cfat,%{public}.3f,mct,%{public}.3f", &v111, 22);
    v64 = (uint8_t *)v78;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v78);
    if (v64 == buf)
      goto LABEL_8;
LABEL_109:
    free(v64);
LABEL_8:
    v9 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v10 = sub_100B30608(v9, buf);
LABEL_9:
    *(double *)(a1 + 168) = v10;
    return 1;
  }
  v18 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v19 = sub_100B30608(v18, buf);
  if (sub_1008ABF50((_DWORD *)(a1 + 1968), v19))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v20 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v119 = v21;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,MapsRoutingActive,cfat,%{public}.3f,mct,%{public}.3f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_130;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v79 = *(_QWORD *)(a2 + 8);
    v80 = *(_QWORD *)(a2 + 16);
    v111 = 134349312;
    *(_QWORD *)v112 = v79;
    *(_WORD *)&v112[8] = 2050;
    *(_QWORD *)v113 = v80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,MapsRoutingActive,cfat,%{public}.3f,mct,%{public}.3f", &v111, 22);
    v82 = (uint8_t *)v81;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v81);
    if (v82 == buf)
      goto LABEL_130;
    goto LABEL_145;
  }
  if (sub_1006B506C(a1 + 1840, &dbl_101C28D50))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v23 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(_QWORD *)(a2 + 8);
      v25 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v119 = v24;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,CM driving,cfat,%{public}.3f,mct,%{public}.3f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_130;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v89 = *(_QWORD *)(a2 + 8);
    v90 = *(_QWORD *)(a2 + 16);
    v111 = 134349312;
    *(_QWORD *)v112 = v89;
    *(_WORD *)&v112[8] = 2050;
    *(_QWORD *)v113 = v90;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,CM driving,cfat,%{public}.3f,mct,%{public}.3f", &v111, 22);
    v82 = (uint8_t *)v91;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v91);
    if (v82 == buf)
      goto LABEL_130;
    goto LABEL_145;
  }
  if (sub_1006B53D4(a1 + 1840) || sub_1006B5410(a1 + 1840))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v26 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(a2 + 8);
      v28 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v119 = v27;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,Apple fitness,cfat,%{public}.3f,mct,%{public}.3f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_130;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v92 = *(_QWORD *)(a2 + 8);
    v93 = *(_QWORD *)(a2 + 16);
    v111 = 134349312;
    *(_QWORD *)v112 = v92;
    *(_WORD *)&v112[8] = 2050;
    *(_QWORD *)v113 = v93;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,Apple fitness,cfat,%{public}.3f,mct,%{public}.3f", &v111, 22);
    v82 = (uint8_t *)v94;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v94);
    if (v82 == buf)
      goto LABEL_130;
    goto LABEL_145;
  }
  if (((sub_1006B51A0(a1 + 1840, &dbl_101C28D50) & 1) != 0 || sub_1006B52B4(a1 + 1840, &dbl_101C28D50))
    && sub_100E0F358((_QWORD *)(a1 + 2016), &dbl_101C28D48))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v29 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(_QWORD *)(a2 + 8);
      v31 = *(_QWORD *)(a2 + 16);
      v32 = sub_100E0F358((_QWORD *)(a1 + 2016), &dbl_101C28D48);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)v119 = v30;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v31;
      *(_WORD *)&v120[8] = 1026;
      *(_DWORD *)v121 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,highConfidenceOutdoorWalkingOrRunningOrCycling,cfat,%{public}.3f,mct,%{public}.3f,CLOutdoor,%{public}d", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_130;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v96 = qword_1022A01B8;
    v98 = *(_QWORD *)(a2 + 8);
    v97 = *(_QWORD *)(a2 + 16);
    v111 = 134349568;
    *(_QWORD *)v112 = v98;
    *(_WORD *)&v112[8] = 2050;
    *(_QWORD *)v113 = v97;
    *(_WORD *)&v113[8] = 1026;
    *(_DWORD *)v114 = sub_100E0F358((_QWORD *)(a1 + 2016), &dbl_101C28D48);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v96, 2, "shouldBypassFusion,highConfidenceOutdoorWalkingOrRunningOrCycling,cfat,%{public}.3f,mct,%{public}.3f,CLOutdoor,%{public}d", &v111, 28);
    v82 = (uint8_t *)v99;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v99);
    if (v82 == buf)
      goto LABEL_130;
    goto LABEL_145;
  }
  v33 = *(_QWORD *)(a1 + 1696);
  v34 = *(double *)(v33 + 384);
  if (v34 < 0.0 || (v35 = *(_QWORD *)(v33 + 392), v36 = *(double *)(a2 + 16), v36 >= v34) && v36 - v34 > 6.0)
    LODWORD(v35) = 0;
  v37 = sub_1006B4F00((_QWORD *)(a1 + 1840), &dbl_101C28D50);
  if ((_DWORD)v35 == 1)
    v38 = 1;
  else
    v38 = v37;
  if ((_DWORD)v35 == 2)
    v39 = 1;
  else
    v39 = v38;
  if ((v37 & 1) == 0 && (v35 - 1) >= 2 && !*(_BYTE *)(a1 + 2088) && *(double *)(a1 + 1776) > 20.0)
  {
    v40 = *(_DWORD *)(a1 + 1792);
    if (v40 >= 21 && *(int *)(a1 + 1788) <= 19 && (double)*(int *)(a1 + 1796) / (double)v40 > 0.5)
    {
      v41 = *(double *)(a1 + 1768);
      v42 = *(double *)(a2 + 16) - v41;
      v43 = v41 > 0.0;
      v44 = -1.0;
      if (v43)
        v44 = v42;
      if (v44 <= 5.0)
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v83 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v85 = *(_QWORD *)(a2 + 8);
          v84 = *(_QWORD *)(a2 + 16);
          v86 = *(_QWORD *)(a1 + 1776);
          v87 = *(_DWORD *)(a1 + 1792);
          if (v87)
            v88 = (double)*(int *)(a1 + 1796) / (double)v87;
          else
            v88 = 0.0;
          v95 = *(_DWORD *)(a1 + 1788);
          *(_DWORD *)buf = 134350080;
          *(_QWORD *)v119 = v85;
          *(_WORD *)&v119[8] = 2050;
          *(_QWORD *)v120 = v84;
          *(_WORD *)&v120[8] = 2050;
          *(_QWORD *)v121 = v86;
          *(_WORD *)&v121[8] = 2050;
          v122 = v88;
          v123 = 1026;
          v124 = v95;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,GNSSNavSessionDetected,cfat,%{public}.3f,mct,%{public}.3f,GNSSSessionDuration_s,%{public}.1f,ratioOfEpochsWithGoodTrakcing,%{public}.2f,consecNumEpochsPoorTracking,%{public}d", buf, 0x30u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_130;
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v105 = *(_QWORD *)(a2 + 8);
        v104 = *(_QWORD *)(a2 + 16);
        v106 = *(_QWORD *)(a1 + 1776);
        v107 = *(_DWORD *)(a1 + 1792);
        v108 = v107 ? (double)*(int *)(a1 + 1796) / (double)v107 : 0.0;
        v109 = *(_DWORD *)(a1 + 1788);
        v111 = 134350080;
        *(_QWORD *)v112 = v105;
        *(_WORD *)&v112[8] = 2050;
        *(_QWORD *)v113 = v104;
        *(_WORD *)&v113[8] = 2050;
        *(_QWORD *)v114 = v106;
        *(_WORD *)&v114[8] = 2050;
        v115 = v108;
        v116 = 1026;
        v117 = v109;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,GNSSNavSessionDetected,cfat,%{public}.3f,mct,%{public}.3f,GNSSSessionDuration_s,%{public}.1f,ratioOfEpochsWithGoodTrakcing,%{public}.2f,consecNumEpochsPoorTracking,%{public}d", &v111, 48);
        v82 = (uint8_t *)v110;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v110);
        if (v82 == buf)
          goto LABEL_130;
LABEL_145:
        free(v82);
LABEL_130:
        v10 = sub_1005EEB24();
        goto LABEL_9;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 159))
    return 0;
  v45 = sub_1005EEB24();
  v46 = *(double *)(a1 + 176);
  v47 = v45 - *(double *)(a1 + 168);
  if (v46 <= 0.0)
  {
    v46 = 5.0;
    if (!v39)
      v46 = 40.0;
    *(double *)(a1 + 176) = v46;
  }
  if (v47 <= v46)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v48 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v49 = *(_QWORD *)(a2 + 8);
      v50 = *(_QWORD *)(a2 + 16);
      v51 = *(_QWORD *)(a1 + 168);
      v52 = *(double *)(a1 + 176);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)v119 = v49;
      *(_WORD *)&v119[8] = 2050;
      *(_QWORD *)v120 = v50;
      *(_WORD *)&v120[8] = 2050;
      *(_QWORD *)v121 = v51;
      *(_WORD *)&v121[8] = 2050;
      v122 = v52;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,passthroughHysteresis,cfat,%{public}.3f,mct,%{public}.3f,last_passthrough_mct,%{public}.3f,stickinessTime_s,%{public}.1f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v53 = *(_QWORD *)(a2 + 8);
      v54 = *(_QWORD *)(a2 + 16);
      v55 = *(_QWORD *)(a1 + 168);
      v56 = *(double *)(a1 + 176);
      v111 = 134349824;
      *(_QWORD *)v112 = v53;
      *(_WORD *)&v112[8] = 2050;
      *(_QWORD *)v113 = v54;
      *(_WORD *)&v113[8] = 2050;
      *(_QWORD *)v114 = v55;
      *(_WORD *)&v114[8] = 2050;
      v115 = v56;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,passthroughHysteresis,cfat,%{public}.3f,mct,%{public}.3f,last_passthrough_mct,%{public}.3f,stickinessTime_s,%{public}.1f", &v111, 42);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    return 1;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v65 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v66 = *(_QWORD *)(a1 + 168);
    v67 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)v119 = v66;
    *(_WORD *)&v119[8] = 2050;
    *(double *)v120 = v47;
    *(_WORD *)&v120[8] = 2050;
    *(_QWORD *)v121 = v67;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "shouldBypassFusion,passthroughHysteresis expired,switching off passthrough mode,last_passthrough_mct,%{public}.3f,elapsed,%{public}.1f,stickinessTime_s,%{public}.1f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v100 = *(_QWORD *)(a1 + 168);
    v101 = *(_QWORD *)(a1 + 176);
    v111 = 134349568;
    *(_QWORD *)v112 = v100;
    *(_WORD *)&v112[8] = 2050;
    *(double *)v113 = v47;
    *(_WORD *)&v113[8] = 2050;
    *(_QWORD *)v114 = v101;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "shouldBypassFusion,passthroughHysteresis expired,switching off passthrough mode,last_passthrough_mct,%{public}.3f,elapsed,%{public}.1f,stickinessTime_s,%{public}.1f", &v111, 32);
    v103 = (uint8_t *)v102;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)", "%s\n", v102);
    if (v103 != buf)
      free(v103);
  }
  result = 0;
  *(_BYTE *)(a1 + 159) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  return result;
}

void sub_100E13608(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E13614(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  double v7;
  double v8;
  BOOL v9;
  double v10;
  int *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  const char *v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  _BOOL4 v70;
  uint8_t buf[4];
  uint64_t v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  _BOOL4 v92;

  if (*a3 != a3[1])
  {
    if (*(double *)(a1 + 1760) <= 0.0)
      goto LABEL_6;
    v7 = *(double *)(a1 + 1768);
    v8 = *(double *)(a2 + 344) - v7;
    v9 = v7 > 0.0;
    v10 = -1.0;
    if (v9)
      v10 = v8;
    if (fabs(v10) >= 20.0)
    {
LABEL_6:
      *(_QWORD *)(a1 + 1760) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 1768) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 1776) = 0;
      *(_QWORD *)(a1 + 1792) = 0;
      *(_QWORD *)(a1 + 1784) = 0;
      *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a2 + 344);
    }
    *(_QWORD *)(a1 + 1712) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 1720) = 0u;
    v11 = (int *)(a1 + 1720);
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1736) = 0u;
    sub_100754C70(a1 + 1712, a3, *(double *)(a2 + 344));
    if (*v11 <= 19 && *(_DWORD *)(a1 + 1724) == *v11)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v12 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_QWORD *)(a2 + 344);
        v14 = *(_DWORD *)(a1 + 1720);
        v15 = *(_DWORD *)(a1 + 1724);
        *(_DWORD *)buf = 134349568;
        v72 = v13;
        v73 = 1026;
        v74 = v14;
        v75 = 1026;
        v76 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,discarding wrong satellite visibility report.", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v16 = *(_QWORD *)(a2 + 344);
        v17 = *(_DWORD *)(a1 + 1720);
        v18 = *(_DWORD *)(a1 + 1724);
        v49 = 134349568;
        v50 = v16;
        v51 = 1026;
        v52 = v17;
        v53 = 1026;
        v54 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,discarding wrong satellite visibility report.", &v49, 24);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::extractGNSSSatelliteTrackingQualityMetricsAndHuncFloor(const CLDaemonLocationPrivate &, const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport &, double &)", "%s\n", v19);
LABEL_38:
        if (v20 != buf)
          free(v20);
      }
    }
    else
    {
      v21 = sub_100754D84(a1 + 1712);
      v22 = v21;
      if ((!*(_BYTE *)(a2 + 632) || *(double *)(a1 + 1776) < 10.0)
        && *v11 >= 1
        && (double)*(int *)(a1 + 1724) / (double)*v11 < 0.5)
      {
        *a4 = *(_QWORD *)(a1 + 2160);
      }
      v23 = *(double *)(a1 + 1760);
      v24 = 0.0;
      if (v23 > 0.0)
      {
        v25 = *(double *)(a2 + 344);
        v9 = v25 <= v23;
        v26 = v25 - v23;
        if (v9)
          v24 = 0.0;
        else
          v24 = v26;
      }
      *(double *)(a1 + 1776) = v24;
      *(_QWORD *)(a1 + 1768) = *(_QWORD *)(a2 + 344);
      ++*(_DWORD *)(a1 + 1792);
      if (v21)
      {
        ++*(_DWORD *)(a1 + 1784);
        *(_DWORD *)(a1 + 1788) = 0;
        ++*(_DWORD *)(a1 + 1796);
      }
      else
      {
        ++*(_DWORD *)(a1 + 1788);
        *(_DWORD *)(a1 + 1784) = 0;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v27 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v28 = *(_QWORD *)(a2 + 344);
        v29 = *(_DWORD *)(a1 + 1720);
        v30 = *(_DWORD *)(a1 + 1724);
        v31 = *(_DWORD *)(a1 + 1728);
        v32 = *(_DWORD *)(a1 + 1732);
        v33 = *(_DWORD *)(a1 + 1736);
        v34 = *(_DWORD *)(a1 + 1740);
        v35 = *(_DWORD *)(a1 + 1744);
        v36 = *(_DWORD *)(a1 + 1748);
        v37 = *(_DWORD *)(a1 + 1752);
        *(_DWORD *)buf = 134351616;
        v72 = v28;
        v73 = 1026;
        v74 = v29;
        v75 = 1026;
        v76 = v30;
        v77 = 1026;
        v78 = v31;
        v79 = 1026;
        v80 = v32;
        v81 = 1026;
        v82 = v33;
        v83 = 1026;
        v84 = v34;
        v85 = 1026;
        v86 = v35;
        v87 = 1026;
        v88 = v36;
        v89 = 1026;
        v90 = v37;
        v91 = 1026;
        v92 = v22;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,NumTrackedL5,%{public}02d,NumTrackedL1CN0_ge_20,%{public}02d,NumTrackedSVElv_ge_60,%{public}02d,NumTrackedSV_azm,%{public}02d,%{public}02d,%{public}02d,%{public}02d,isLikelygoodQualityGNSSTracking,%{public}d", buf, 0x48u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v38 = *(_QWORD *)(a2 + 344);
        v39 = *(_DWORD *)(a1 + 1720);
        v40 = *(_DWORD *)(a1 + 1724);
        v41 = *(_DWORD *)(a1 + 1728);
        v42 = *(_DWORD *)(a1 + 1732);
        v43 = *(_DWORD *)(a1 + 1736);
        v44 = *(_DWORD *)(a1 + 1740);
        v45 = *(_DWORD *)(a1 + 1744);
        v46 = *(_DWORD *)(a1 + 1748);
        v47 = *(_DWORD *)(a1 + 1752);
        v49 = 134351616;
        v50 = v38;
        v51 = 1026;
        v52 = v39;
        v53 = 1026;
        v54 = v40;
        v55 = 1026;
        v56 = v41;
        v57 = 1026;
        v58 = v42;
        v59 = 1026;
        v60 = v43;
        v61 = 1026;
        v62 = v44;
        v63 = 1026;
        v64 = v45;
        v65 = 1026;
        v66 = v46;
        v67 = 1026;
        v68 = v47;
        v69 = 1026;
        v70 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,NumTrackedL5,%{public}02d,NumTrackedL1CN0_ge_20,%{public}02d,NumTrackedSVElv_ge_60,%{public}02d,NumTrackedSV_azm,%{public}02d,%{public}02d,%{public}02d,%{public}02d,isLikelygoodQualityGNSSTracking,%{public}d", &v49, 72);
        v20 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::extractGNSSSatelliteTrackingQualityMetricsAndHuncFloor(const CLDaemonLocationPrivate &, const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport &, double &)", "%s\n", v48);
        goto LABEL_38;
      }
    }
  }
}

void sub_100E13BAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E13BB8(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double *v8;
  uint64_t *v9;
  double v10;
  double *v11;
  double *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t **v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = *(_QWORD **)(result + 2200);
  v2 = (_QWORD *)(result + 2208);
  if (v1 != (_QWORD *)(result + 2208))
  {
    v3 = result;
    v4 = result + 1840;
    v5 = (double *)(result + 2232);
    while (1)
    {
      result = CLMotionActivity::isTypeUnclassifiedMoving(*((unsigned int *)v1 + 10));
      if ((result & 1) == 0)
        break;
      if (*(_QWORD *)(v3 + 2240))
      {
        v6 = *(_QWORD *)v5;
        if (!*(_QWORD *)v5)
          goto LABEL_19;
        v7 = *((double *)v1 + 4);
        v8 = v5;
        do
        {
          v9 = (uint64_t *)(v6 + 8);
          if (*(double *)(v6 + 32) >= v7)
          {
            v9 = (uint64_t *)v6;
            v8 = (double *)v6;
          }
          v6 = *v9;
        }
        while (*v9);
        if (v8 == v5)
          goto LABEL_19;
        if (v8 != *(double **)(v3 + 2224))
        {
          v10 = *v8;
          v11 = v8;
          if (*(_QWORD *)v8)
          {
            do
            {
              v12 = *(double **)&v10;
              v10 = *(double *)(*(_QWORD *)&v10 + 8);
            }
            while (v10 != 0.0);
          }
          else
          {
            do
            {
              v12 = (double *)*((_QWORD *)v11 + 2);
              v13 = *(_QWORD *)v12 == (_QWORD)v11;
              v11 = v12;
            }
            while (v13);
          }
          if (v7 - v12[4] < v8[4] - v7)
            v8 = v12;
        }
        if (v8[4] - v7 <= 6.0)
        {
          if (v8[8] <= 0.001)
          {
            if (v8[9] <= 0.3 && *((_DWORD *)v8 + 12) != 4)
              goto LABEL_19;
LABEL_20:
            v14 = v4;
            v15 = (uint64_t **)(v1 + 4);
            v16 = 7;
          }
          else
          {
            if (*((_DWORD *)v8 + 12) == 3)
              v16 = 3;
            else
              v16 = 2;
            v14 = v4;
            v15 = (uint64_t **)(v1 + 4);
          }
          sub_1006B3E28(v14, v15, v16);
        }
        else
        {
LABEL_19:
          if ((sub_1006B4864(v4, (double *)v1 + 4, 600.0) & 1) == 0)
            goto LABEL_20;
        }
LABEL_23:
        result = sub_100E0F448(v3, (double *)v1 + 4);
      }
      v17 = (_QWORD *)v1[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v1[2];
          v13 = *v18 == (_QWORD)v1;
          v1 = v18;
        }
        while (!v13);
      }
      v1 = v18;
      if (v18 == v2)
        return result;
    }
    sub_1006B3704(v4, (double *)v1 + 4, (__int128 *)(v1 + 5));
    goto LABEL_23;
  }
  return result;
}

BOOL sub_100E13DAC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int *v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  _BOOL8 v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  uint64_t *v36;
  char *v37;
  NSObject *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  double v47;
  double v48;
  int v49;
  double v50;
  double v51;
  double v52;
  uint64_t **v53;
  double v54;
  double v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  NSObject *v63;
  uint64_t v64;
  unsigned int v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t **v105;
  __int128 v106;
  double v108;
  double v109;
  unsigned int v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  NSObject *v119;
  uint64_t v120;
  unsigned int v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  const char *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  const char *v132;
  char *v133;
  double v134;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  unsigned int v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  const char *v154;
  char *v155;
  uint64_t v156;
  unsigned int v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  const char *v164;
  const char *v165;
  char *v166;
  _QWORD *v167;
  const char *shared_weak_owners;
  uint64_t shared_owners;
  unsigned int v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  const char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218[2];
  double v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  uint64_t (**v222)();
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _BYTE v229[28];
  int v230;
  uint64_t v231;
  __int16 v232;
  const char *v233;
  __int16 v234;
  unsigned int v235;
  __int16 v236;
  const char *v237;
  __int16 v238;
  uint64_t v239;
  __int16 v240;
  uint64_t v241;
  __int16 v242;
  uint64_t v243;
  __int16 v244;
  uint64_t v245;
  __int16 v246;
  uint64_t v247;
  __int16 v248;
  uint64_t v249;
  __int16 v250;
  uint64_t v251;
  __int16 v252;
  uint64_t v253;
  __int16 v254;
  uint64_t v255;
  __int16 v256;
  _BYTE v257[20];
  double v258;
  _BYTE v259[10];
  _BYTE v260[6];
  unsigned int v261;
  __int16 v262;
  const char *v263;
  __int16 v264;
  int v265;
  __int16 v266;
  uint64_t v267;
  __int16 v268;
  uint64_t v269;
  __int16 v270;
  uint64_t v271;
  __int16 v272;
  double v273;
  _BYTE buf[22];
  __int16 v275;
  unsigned int v276;
  __int16 v277;
  const char *v278;
  __int16 v279;
  uint64_t v280;
  __int16 v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  uint64_t v286;
  __int16 v287;
  uint64_t v288;
  __int16 v289;
  uint64_t v290;
  __int16 v291;
  uint64_t v292;
  __int16 v293;
  uint64_t v294;
  __int16 v295;
  uint64_t v296;
  __int16 v297;
  _BYTE v298[20];
  double v299;
  _BYTE v300[10];
  _BYTE v301[6];
  unsigned int v302;
  __int16 v303;
  const char *v304;
  __int16 v305;
  int v306;
  __int16 v307;
  uint64_t v308;
  __int16 v309;
  uint64_t v310;
  __int16 v311;
  uint64_t v312;
  __int16 v313;
  double v314;

  *a3 = 0;
  if (!*(_BYTE *)(a1 + 2156))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v17 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Error,LC Fusion is not configured.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v230) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,LC Fusion is not configured.", &v230, 2);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  v6 = (int *)(a2 + 96);
  if (!sub_100E104A8(a1, *(_DWORD *)(a2 + 96)))
    return 0;
  if (!*(_BYTE *)(a1 + 2136) && *(_BYTE *)(a1 + 2192))
  {
    sub_100E13BB8(a1);
    sub_100008848(a1 + 2200, *(_QWORD **)(a1 + 2208));
    *(_QWORD *)(a1 + 2200) = a1 + 2208;
    *(_QWORD *)(a1 + 2216) = 0;
    *(_QWORD *)(a1 + 2208) = 0;
    sub_100008848(a1 + 2224, *(_QWORD **)(a1 + 2232));
    *(_QWORD *)(a1 + 2224) = a1 + 2232;
    *(_QWORD *)(a1 + 2240) = 0;
    *(_QWORD *)(a1 + 2232) = 0;
    *(_BYTE *)(a1 + 2192) = 0;
  }
  v227 = *(_OWORD *)(a1 + 1040);
  v228 = *(_OWORD *)(a1 + 1056);
  *(_OWORD *)v229 = *(_OWORD *)(a1 + 1072);
  v7 = *(_OWORD *)(a1 + 992);
  v223 = *(_OWORD *)(a1 + 976);
  v224 = v7;
  v8 = *(_OWORD *)(a1 + 1024);
  v225 = *(_OWORD *)(a1 + 1008);
  v222 = off_1021B4BA0;
  v226 = v8;
  *(_OWORD *)&v229[12] = *(_OWORD *)(a1 + 1084);
  sub_1013F8DE8(a1 + 968);
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a2 + 76);
      v21 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,timestamp,%{public}.3f,Invalid location update,hunc <= 0,type,%{public}s", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_29;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v59 = qword_1022A01B8;
    v60 = *(_QWORD *)(a2 + 76);
    v61 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v230 = 134349314;
    v231 = v60;
    v232 = 2082;
    v233 = v61;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 16, "#Error,timestamp,%{public}.3f,Invalid location update,hunc <= 0,type,%{public}s", &v230, 22);
    v16 = (char *)v62;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v62);
    goto LABEL_77;
  }
  if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v9 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a2 + 76);
      v11 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning,timestamp,%{public}.3f,Invalid location update,null island,type,%{public}s", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_29;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v12 = qword_1022A01B8;
    v13 = *(_QWORD *)(a2 + 76);
    v14 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v230 = 134349314;
    v231 = v13;
    v232 = 2082;
    v233 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "#Warning,timestamp,%{public}.3f,Invalid location update,null island,type,%{public}s", &v230, 22);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v15);
LABEL_77:
    if (v16 != buf)
      free(v16);
LABEL_29:
    *a3 = 1;
    *(_DWORD *)(a1 + 1104) = 2;
    sub_10094BF80(a1 + 2248, 2);
    return *a3 != 0;
  }
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  v24 = *(_OWORD *)(a2 + 32);
  v25 = *(_OWORD *)(a2 + 48);
  v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v26;
  *(_OWORD *)(a1 + 32) = v24;
  *(_OWORD *)(a1 + 48) = v25;
  v27 = *(_OWORD *)(a2 + 96);
  v28 = *(_OWORD *)(a2 + 112);
  v29 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 128) = v29;
  *(_OWORD *)(a1 + 96) = v27;
  if (*(double *)(a2 + 36) > 0.0)
    *(_QWORD *)(a1 + 1704) = *(_QWORD *)(a2 + 28);
  v220 = 0;
  v221 = 0;
  v219 = *(double *)(a2 + 20);
  if (*(_DWORD *)(a2 + 96) == 1)
  {
    v30 = (std::__shared_weak_count *)operator new(0xC0uLL);
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)off_10218A540;
    *(_OWORD *)&v30[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[3].__shared_owners_ = 0u;
    v30[4].std::__shared_count = 0u;
    *(_OWORD *)&v30[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[5].__shared_owners_ = 0u;
    v30[6].std::__shared_count = 0u;
    *(_OWORD *)&v30[6].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[7].__shared_owners_ = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *((std::__shared_count *)v30 + 2) = _Q1;
    v30[2].std::__shared_count = 0u;
    v30[2].__shared_weak_owners_ = 0xBFF0000000000000;
    v30[3].__shared_owners_ = 0xBFF0000000000000;
    *(std::__shared_count *)((char *)v30 + 104) = _Q1;
    v30[5].std::__shared_count = _Q1;
    v30[5].__shared_weak_owners_ = 0xBFF0000000000000;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)off_1021B4C10;
    HIDWORD(v30[6].__shared_weak_owners_) = -1082130432;
    v30[7].__shared_owners_ = 0;
    v30[7].__vftable = 0;
    LODWORD(v30[7].__shared_weak_owners_) = 0;
    sub_100349198(&v30[7].__vftable, (uint64_t *)(a2 + 680));
    LODWORD(v30[7].__shared_weak_owners_) = *(_DWORD *)(a2 + 696);
    *(uint64_t *)((char *)&v30[6].__shared_owners_ + 4) = *(_QWORD *)(a2 + 200);
    HIDWORD(v30[6].__shared_weak_owners_) = *(_DWORD *)(a2 + 208);
    v36 = (uint64_t *)v30[7].__vftable;
    if (!v36 || *v36 == v36[1])
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v39 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v40 = *(_QWORD *)(a2 + 504);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#GNSSTracking,mct,%{public}.3f,No satelliteAvailabilityReportPresent", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v131 = *(_QWORD *)(a2 + 504);
        v230 = 134349056;
        v231 = v131;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#GNSSTracking,mct,%{public}.3f,No satelliteAvailabilityReportPresent", &v230, 12);
        v133 = (char *)v132;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v132);
        if (v133 != buf)
          free(v133);
      }
    }
    else
    {
      sub_100E13614(a1, a2 + 160, v36, &v219);
    }
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
    v220 = v30 + 1;
    v221 = (uint64_t)v30;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    v37 = (char *)operator new(0xA0uLL);
    *((_QWORD *)v37 + 2) = 0;
    *(_QWORD *)v37 = off_10218A590;
    *((_QWORD *)v37 + 1) = 0;
    *((_OWORD *)v37 + 4) = 0u;
    *((_OWORD *)v37 + 5) = 0u;
    *((_OWORD *)v37 + 6) = 0u;
    *((_OWORD *)v37 + 7) = 0u;
    *((_QWORD *)v37 + 3) = off_1021B4BA0;
    *((_OWORD *)v37 + 8) = 0u;
    *((_OWORD *)v37 + 9) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *((_OWORD *)v37 + 2) = _Q1;
    *((_OWORD *)v37 + 3) = 0u;
    *((_QWORD *)v37 + 8) = 0xBFF0000000000000;
    *((_QWORD *)v37 + 10) = 0xBFF0000000000000;
    *(_OWORD *)(v37 + 104) = _Q1;
    *(_OWORD *)(v37 + 120) = _Q1;
    *((_QWORD *)v37 + 17) = 0xBFF0000000000000;
    v220 = (std::__shared_weak_count *)(v37 + 24);
    v221 = (uint64_t)v37;
  }
  v43 = (_OWORD *)(a1 + 1048);
  v44 = (uint64_t)v220;
  ((void (*)(std::__shared_weak_count *, uint64_t, double))v220->__get_deleter)(v220, a2, v219);
  *(double *)(v44 + 64) = *(float *)(a2 + 476);
  *(_DWORD *)(v44 + 72) = *(_DWORD *)(a2 + 472);
  v45 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(v44 + 16) = v45;
  v46 = *(unsigned __int8 *)(a2 + 768);
  *(_BYTE *)(v44 + 124) = v46;
  if (v46)
  {
    if (*(double *)(v44 + 40) <= 60.0)
    {
      *(_OWORD *)(a1 + 2104) = *(_OWORD *)(v44 + 24);
      *(_QWORD *)(a1 + 2120) = v45;
    }
    else
    {
      *(_BYTE *)(v44 + 124) = 0;
    }
  }
  LOBYTE(v217) = 0;
  sub_100E11B28(a1, v44, a3, &v217);
  v18 = (_BYTE)v217 == 0;
  if ((_BYTE)v217)
    goto LABEL_126;
  if (*a3)
    goto LABEL_125;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44))
  {
    if (*(double *)(v44 + 88) > 0.0 && *(double *)(v44 + 80) > 0.0 && (*(_DWORD *)(a1 + 1912) - 1) <= 4)
    {
      *(_QWORD *)buf = 0xBFF0000000000000;
      if ((sub_1006B52B4(a1 + 1840, (double *)buf) & 1) == 0
        && (sub_1006B506C(a1 + 1840, &dbl_101C28D50) & 1) == 0
        && !sub_1006B4DE4((_QWORD *)(a1 + 1840), &dbl_101C28D50))
      {
        v47 = *(double *)(v44 + 80);
        v48 = sub_100E15760((_DWORD *)(a1 + 1912));
        v209 = (int *)(a1 + 1912);
        v49 = *(_DWORD *)(a1 + 1912);
        if ((v49 - 2) >= 9 && v49 && *(double *)(v44 + 88) < 5.0)
          v48 = 64.0;
        *(_QWORD *)buf = v44 + 128;
        v50 = v47 * v47;
        v51 = 0.0;
        if (sub_100E28228((uint64_t **)(a1 + 192), (int *)(v44 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5]
          && (*(_QWORD *)buf = v44 + 128,
              sub_100E28228((uint64_t **)(a1 + 192), (int *)(v44 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5][1]))
        {
          *(_QWORD *)buf = v44 + 128;
          v52 = 0.0;
          if (*(double *)(sub_100E28228((uint64_t **)(a1 + 192), (int *)(v44 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5][1]+ 80) >= 0.0)
          {
            *(_QWORD *)buf = v44 + 128;
            v53 = sub_100E28228((uint64_t **)(a1 + 192), (int *)(v44 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v54 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v53[5][1] + 48))(v53[5][1], v44 + 16);
            v52 = v54;
            _ZF = v54 == 0.0;
            if (v54 <= 0.0)
            {
              v134 = fabs(v54);
              if (!_ZF && v134 <= 3.0)
                goto LABEL_81;
            }
            else
            {
              v56 = *(double *)(v44 + 80);
              *(_QWORD *)buf = v44 + 128;
              v51 = (v56
                   - *(double *)(sub_100E28228((uint64_t **)(a1 + 192), (int *)(v44 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5][1]+ 80))/ v54;
              if (v52 != 0.0 && fabs(v52) <= 3.0)
              {
                if (v51 > 19.6)
                  goto LABEL_83;
                goto LABEL_81;
              }
            }
          }
        }
        else
        {
          v52 = 0.0;
        }
        if (v50 > v48)
        {
LABEL_83:
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v63 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
          {
            v64 = *(_QWORD *)(v44 + 8);
            v212 = *(_QWORD *)(v44 + 16);
            v65 = *(_DWORD *)(v44 + 128);
            v66 = sub_10014D1E0(v65);
            v67 = *(_QWORD *)(v44 + 24);
            v68 = *(_QWORD *)(v44 + 32);
            v70 = *(_QWORD *)(v44 + 40);
            v69 = *(_QWORD *)(v44 + 48);
            v71 = *(_QWORD *)(v44 + 56);
            v72 = *(_QWORD *)(v44 + 80);
            v73 = *(_QWORD *)(v44 + 88);
            v74 = *(_QWORD *)(v44 + 96);
            v75 = *(_QWORD *)(v44 + 104);
            v76 = *v209;
            *(_DWORD *)buf = 134353411;
            *(_QWORD *)&buf[4] = v64;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v212;
            v275 = 1026;
            v276 = v65;
            v277 = 2082;
            v278 = v66;
            v279 = 2049;
            v280 = v67;
            v281 = 2049;
            v282 = v68;
            v283 = 2049;
            v284 = v69;
            v285 = 2049;
            v286 = v72;
            v287 = 2049;
            v288 = v74;
            v289 = 2050;
            v290 = v70;
            v291 = 2050;
            v292 = v71;
            v293 = 2050;
            v294 = v73;
            v295 = 2050;
            v296 = v75;
            v297 = 2050;
            *(_QWORD *)v298 = sqrt(v48);
            *(_WORD *)&v298[8] = 2050;
            *(double *)&v298[10] = v52;
            *(_WORD *)&v298[18] = 2050;
            v299 = v50;
            *(_WORD *)v300 = 2050;
            *(double *)&v300[2] = v51;
            *(_WORD *)v301 = 1026;
            *(_DWORD *)&v301[2] = v76;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#fusion Provider estimated speed rejected,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}d", buf, 0xAEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v215 = qword_1022A01B8;
            v167 = &v220->__vftable;
            shared_owners = v220->__shared_owners_;
            shared_weak_owners = (const char *)v220->__shared_weak_owners_;
            v170 = v220[5].__shared_owners_;
            v171 = sub_10014D1E0(v170);
            v172 = v167[3];
            v173 = v167[4];
            v175 = v167[5];
            v174 = v167[6];
            v176 = v167[7];
            v177 = v167[10];
            v178 = v167[11];
            v179 = v167[12];
            v180 = v167[13];
            v181 = *v209;
            v230 = 134353411;
            v231 = shared_owners;
            v232 = 2050;
            v233 = shared_weak_owners;
            v234 = 1026;
            v235 = v170;
            v236 = 2082;
            v237 = v171;
            v238 = 2049;
            v239 = v172;
            v240 = 2049;
            v241 = v173;
            v242 = 2049;
            v243 = v174;
            v244 = 2049;
            v245 = v177;
            v246 = 2049;
            v247 = v179;
            v248 = 2050;
            v249 = v175;
            v250 = 2050;
            v251 = v176;
            v252 = 2050;
            v253 = v178;
            v254 = 2050;
            v255 = v180;
            v256 = 2050;
            *(_QWORD *)v257 = sqrt(v48);
            *(_WORD *)&v257[8] = 2050;
            *(double *)&v257[10] = v52;
            *(_WORD *)&v257[18] = 2050;
            v258 = v50;
            *(_WORD *)v259 = 2050;
            *(double *)&v259[2] = v51;
            *(_WORD *)v260 = 1026;
            *(_DWORD *)&v260[2] = v181;
            LODWORD(v184) = 174;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v215, 0, "#fusion Provider estimated speed rejected,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}d", &v230, v184);
            v183 = (char *)v182;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v182);
            if (v183 != buf)
              free(v183);
          }
          v44 = (uint64_t)v220;
          v220[3].__shared_weak_owners_ = 0xBFF0000000000000;
          *(_QWORD *)(v44 + 104) = 0xBFF0000000000000;
          goto LABEL_89;
        }
LABEL_81:
        if (!*(_BYTE *)(a1 + 2088) || v50 <= v48)
          goto LABEL_89;
        goto LABEL_83;
      }
    }
  }
LABEL_89:
  *(_QWORD *)buf = v6;
  v77 = sub_100E28228((uint64_t **)(a1 + 192), v6, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v78 = v77[5];
  v79 = (uint64_t *)operator new(0x18uLL);
  *v79 = (uint64_t)v78;
  v79[1] = v44;
  v80 = v221;
  v79[2] = v221;
  if (v80)
  {
    v81 = (unint64_t *)(v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v77[5] = v79;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v83 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v84 = *(_QWORD *)(v44 + 8);
    v85 = *(_QWORD *)(v44 + 16);
    v86 = *(_DWORD *)(v44 + 128);
    v87 = sub_10014D1E0(v86);
    v88 = *(_QWORD *)(v44 + 24);
    v89 = *(_QWORD *)(v44 + 32);
    v91 = *(_QWORD *)(v44 + 40);
    v90 = *(_QWORD *)(v44 + 48);
    v92 = *(_QWORD *)(v44 + 56);
    v93 = *(_QWORD *)(v44 + 80);
    v94 = *(_QWORD *)(v44 + 88);
    v95 = *(_QWORD *)(v44 + 96);
    v96 = *(_QWORD *)(v44 + 104);
    v97 = *(_DWORD *)(v44 + 120);
    v98 = *(_QWORD *)(v44 + 112);
    v99 = *(unsigned __int8 *)(v44 + 124);
    *(_DWORD *)buf = 134352899;
    *(_QWORD *)&buf[4] = v84;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v85;
    v275 = 1026;
    v276 = v86;
    v277 = 2082;
    v278 = v87;
    v279 = 2049;
    v280 = v88;
    v281 = 2049;
    v282 = v89;
    v283 = 2049;
    v284 = v90;
    v285 = 2049;
    v286 = v93;
    v287 = 2049;
    v288 = v95;
    v289 = 2050;
    v290 = v91;
    v291 = 2050;
    v292 = v92;
    v293 = 2050;
    v294 = v94;
    v295 = 2050;
    v296 = v96;
    v297 = 1026;
    *(_DWORD *)v298 = v97;
    *(_WORD *)&v298[4] = 2050;
    *(_QWORD *)&v298[6] = v98;
    *(_WORD *)&v298[14] = 1026;
    *(_DWORD *)&v298[16] = v99;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#fusion inputLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d", buf, 0x96u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v136 = qword_1022A01B8;
    v137 = (uint64_t)v220;
    v139 = v220->__shared_owners_;
    v138 = (const char *)v220->__shared_weak_owners_;
    v140 = v220[5].__shared_owners_;
    v141 = sub_10014D1E0(v140);
    v142 = *(_QWORD *)(v137 + 24);
    v143 = *(_QWORD *)(v137 + 32);
    v145 = *(_QWORD *)(v137 + 40);
    v144 = *(_QWORD *)(v137 + 48);
    v146 = *(_QWORD *)(v137 + 56);
    v147 = *(_QWORD *)(v137 + 80);
    v148 = *(_QWORD *)(v137 + 88);
    v149 = *(_QWORD *)(v137 + 96);
    v150 = *(_QWORD *)(v137 + 104);
    v151 = *(_DWORD *)(v137 + 120);
    v152 = *(_QWORD *)(v137 + 112);
    v153 = *(unsigned __int8 *)(v137 + 124);
    v230 = 134352899;
    v231 = v139;
    v232 = 2050;
    v233 = v138;
    v234 = 1026;
    v235 = v140;
    v236 = 2082;
    v237 = v141;
    v238 = 2049;
    v239 = v142;
    v240 = 2049;
    v241 = v143;
    v242 = 2049;
    v243 = v144;
    v244 = 2049;
    v245 = v147;
    v246 = 2049;
    v247 = v149;
    v248 = 2050;
    v249 = v145;
    v250 = 2050;
    v251 = v146;
    v252 = 2050;
    v253 = v148;
    v254 = 2050;
    v255 = v150;
    v256 = 1026;
    *(_DWORD *)v257 = v151;
    *(_WORD *)&v257[4] = 2050;
    *(_QWORD *)&v257[6] = v152;
    *(_WORD *)&v257[14] = 1026;
    *(_DWORD *)&v257[16] = v153;
    LODWORD(v184) = 150;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v136, 0, "#fusion inputLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d", &v230, v184);
    v155 = (char *)v154;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v154);
    if (v155 != buf)
      free(v155);
  }
  v100 = (std::__shared_weak_count *)v221;
  v218[0] = (uint64_t)v220;
  v218[1] = v221;
  if (v221)
  {
    v101 = (unint64_t *)(v221 + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    sub_100E1578C(a1, v218, a3);
    do
      v103 = __ldaxr(v101);
    while (__stlxr(v103 - 1, v101));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  else
  {
    sub_100E1578C(a1, v218, a3);
  }
  if (!*a3)
  {
    v104 = *(_DWORD *)(a1 + 1096);
    if (v104)
    {
      if (v104 == 1
        && (v230 = 1,
            *(_QWORD *)buf = &v230,
            sub_100E28228((uint64_t **)(a1 + 192), &v230, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5])
        && (v217 = 1,
            *(_QWORD *)buf = &v217,
            sub_100E28228((uint64_t **)(a1 + 192), &v217, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5][1])
        && (v216 = 1,
            *(_QWORD *)buf = &v216,
            v105 = sub_100E28228((uint64_t **)(a1 + 192), &v216, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
            (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v105[5][1] + 48))(v105[5][1], a1 + 984) <= 5.0))
      {
        v230 = 1;
        *(_QWORD *)buf = &v230;
        v114 = sub_100E28228((uint64_t **)(a1 + 192), &v230, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
        v115 = v114[1];
        v116 = v114[2];
        *(_QWORD *)buf = v115;
        *(_QWORD *)&buf[8] = v116;
        if (v116)
        {
          v117 = (unint64_t *)(v116 + 8);
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
        }
        *v43 = *(_OWORD *)(v115 + 80);
        *(_OWORD *)(a1 + 1064) = *(_OWORD *)(v115 + 96);
        sub_100261F44((uint64_t)buf);
      }
      else
      {
        v106 = *(_OWORD *)(a1 + 60);
        *v43 = *(_OWORD *)(a1 + 44);
        *(_OWORD *)(a1 + 1064) = v106;
      }
    }
  }
  if (*((double *)&v223 + 1) >= 0.0 && *(_DWORD *)&v229[24] != 0)
  {
    v108 = sub_1013F8570((uint64_t)&v222, (double *)(a1 + 984));
    if (!*(_BYTE *)(a1 + 165))
    {
      v109 = v108;
      if (v108 >= 0.0 && v108 < 1.5 && !BYTE4(v220[5].__vftable))
      {
        v110 = *(_DWORD *)(a1 + 96);
        if (v110 <= 8 && ((1 << v110) & 0x1D0) != 0 && (*(_DWORD *)&v229[24] > 8u || ((1 << v229[24]) & 0x1D0) == 0))
        {
          *(_DWORD *)(a1 + 1104) = 8;
          *a3 = 1;
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v119 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
          {
            v120 = *(_QWORD *)(a1 + 976);
            v213 = *(_QWORD *)(a1 + 984);
            v121 = *(_DWORD *)(a1 + 96);
            v122 = sub_10014D1E0(v121);
            v123 = *(_QWORD *)(a1 + 992);
            v185 = *(_QWORD *)(a1 + 1000);
            v187 = *(_QWORD *)(a1 + 1016);
            v189 = *(_QWORD *)(a1 + 1048);
            v191 = *(_QWORD *)(a1 + 1064);
            v193 = *(_QWORD *)(a1 + 1008);
            v195 = *(_QWORD *)(a1 + 1024);
            v197 = *(_QWORD *)(a1 + 1056);
            v199 = *(_QWORD *)(a1 + 1072);
            v201 = *(_DWORD *)(a1 + 1088);
            v203 = *(_QWORD *)(a1 + 1080);
            v205 = *(unsigned __int8 *)(a1 + 1092);
            v210 = *(_DWORD *)(a1 + 1456);
            v124 = *(_QWORD *)(a1 + 1696);
            v125 = *(_QWORD *)(v124 + 392);
            v207 = *(_QWORD *)(v124 + 384);
            v126 = *(_DWORD *)(a1 + 1096);
            v127 = sub_10014D1E0(v126);
            *(_DWORD *)buf = 134355459;
            *(_QWORD *)&buf[4] = v120;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v213;
            v275 = 1026;
            v276 = v121;
            v277 = 2082;
            v278 = v122;
            v279 = 2049;
            v280 = v123;
            v281 = 2049;
            v282 = v185;
            v283 = 2049;
            v284 = v187;
            v285 = 2049;
            v286 = v189;
            v287 = 2049;
            v288 = v191;
            v289 = 2050;
            v290 = v193;
            v291 = 2050;
            v292 = v195;
            v293 = 2050;
            v294 = v197;
            v295 = 2050;
            v296 = v199;
            v297 = 1026;
            *(_DWORD *)v298 = v201;
            *(_WORD *)&v298[4] = 2050;
            *(_QWORD *)&v298[6] = v203;
            *(_WORD *)&v298[14] = 1026;
            *(_DWORD *)&v298[16] = v205;
            LOWORD(v299) = 1026;
            *(_DWORD *)((char *)&v299 + 2) = v210;
            HIWORD(v299) = 2050;
            *(_QWORD *)v300 = v207;
            *(_WORD *)&v300[8] = 1026;
            *(_DWORD *)v301 = v125;
            *(_WORD *)&v301[4] = 1026;
            v302 = v126;
            v303 = 2082;
            v304 = v127;
            v305 = 1026;
            v306 = *(_DWORD *)&v229[24];
            v307 = 2049;
            v308 = v224;
            v309 = 2049;
            v310 = *((_QWORD *)&v224 + 1);
            v311 = 2050;
            v312 = v225;
            v313 = 2050;
            v314 = v109;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "#fusion barredLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{public}.1f,%{public}.3f", buf, 0xEAu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v214 = qword_1022A01B8;
            v156 = *(_QWORD *)(a1 + 976);
            v186 = *(const char **)(a1 + 984);
            v157 = *(_DWORD *)(a1 + 96);
            v158 = sub_10014D1E0(v157);
            v159 = *(_QWORD *)(a1 + 992);
            v160 = *(_QWORD *)(a1 + 1000);
            v161 = *(_QWORD *)(a1 + 1016);
            v188 = *(_QWORD *)(a1 + 1048);
            v190 = *(_QWORD *)(a1 + 1064);
            v192 = *(_QWORD *)(a1 + 1008);
            v194 = *(_QWORD *)(a1 + 1024);
            v196 = *(_QWORD *)(a1 + 1056);
            v198 = *(_QWORD *)(a1 + 1072);
            v200 = *(_DWORD *)(a1 + 1088);
            v202 = *(_QWORD *)(a1 + 1080);
            v204 = *(unsigned __int8 *)(a1 + 1092);
            v208 = *(_DWORD *)(a1 + 1456);
            v162 = *(_QWORD *)(a1 + 1696);
            v206 = *(_QWORD *)(v162 + 384);
            v211 = *(_QWORD *)(v162 + 392);
            v163 = *(_DWORD *)(a1 + 1096);
            v164 = sub_10014D1E0(v163);
            v230 = 134355459;
            v231 = v156;
            v232 = 2050;
            v233 = v186;
            v234 = 1026;
            v235 = v157;
            v236 = 2082;
            v237 = v158;
            v238 = 2049;
            v239 = v159;
            v240 = 2049;
            v241 = v160;
            v242 = 2049;
            v243 = v161;
            v244 = 2049;
            v245 = v188;
            v246 = 2049;
            v247 = v190;
            v248 = 2050;
            v249 = v192;
            v250 = 2050;
            v251 = v194;
            v252 = 2050;
            v253 = v196;
            v254 = 2050;
            v255 = v198;
            v256 = 1026;
            *(_DWORD *)v257 = v200;
            *(_WORD *)&v257[4] = 2050;
            *(_QWORD *)&v257[6] = v202;
            *(_WORD *)&v257[14] = 1026;
            *(_DWORD *)&v257[16] = v204;
            LOWORD(v258) = 1026;
            *(_DWORD *)((char *)&v258 + 2) = v208;
            HIWORD(v258) = 2050;
            *(_QWORD *)v259 = v206;
            *(_WORD *)&v259[8] = 1026;
            *(_DWORD *)v260 = v211;
            *(_WORD *)&v260[4] = 1026;
            v261 = v163;
            v262 = 2082;
            v263 = v164;
            v264 = 1026;
            v265 = *(_DWORD *)&v229[24];
            v266 = 2049;
            v267 = v224;
            v268 = 2049;
            v269 = *((_QWORD *)&v224 + 1);
            v270 = 2050;
            v271 = v225;
            v272 = 2050;
            v273 = v109;
            LODWORD(v184) = 234;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v214, 0, "#fusion barredLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{public}.1f,%{public}.3f", &v230, v184);
            v166 = (char *)v165;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v165);
            if (v166 != buf)
              free(v166);
          }
          v128 = v228;
          *(_OWORD *)(a1 + 1040) = v227;
          *(_OWORD *)(a1 + 1056) = v128;
          *(_OWORD *)(a1 + 1072) = *(_OWORD *)v229;
          *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v229[12];
          v129 = v224;
          *(_OWORD *)(a1 + 976) = v223;
          *(_OWORD *)(a1 + 992) = v129;
          v130 = v226;
          *(_OWORD *)(a1 + 1008) = v225;
          *(_OWORD *)(a1 + 1024) = v130;
        }
      }
    }
  }
  if (!*a3)
  {
    sub_100E16B18(a1, (uint64_t *)&v220);
    goto LABEL_126;
  }
LABEL_125:
  sub_10094BF80(a1 + 2248, *(_DWORD *)(a1 + 1104));
LABEL_126:
  v111 = (std::__shared_weak_count *)v221;
  if (v221)
  {
    v112 = (unint64_t *)(v221 + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  return v18;
}

void sub_100E15754(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_100E15760(_DWORD *a1)
{
  int v1;

  v1 = *a1 - 1;
  if (v1 > 9)
    return 1600.0;
  else
    return dbl_101C28EE8[v1];
}

uint64_t sub_100E1578C(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *i;
  uint64_t v32;
  NSObject *v33;
  int v34;
  __int128 v35;
  const char *v36;
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  int v40;
  int v41;
  __int128 v42;
  const char *v43;
  unsigned int v44;
  const char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  uint64_t v51;
  _BOOL4 v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  const char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  double v66;
  _QWORD *v67;
  int v68;
  double v69;
  double v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  unsigned int v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  _BYTE *v91;
  _QWORD *v92;
  double v93;
  double v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  const char *v114;
  char *v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t *v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t (**v163)();
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  unint64_t v171;
  int v172;
  unsigned __int8 v173;
  unsigned int v174;
  __int128 v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t (**v178)();
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  unint64_t v184;
  int v185;
  char v186;
  int v187;
  __int16 v188;
  int v189;
  _BYTE v190[140];
  __int16 v191;
  unint64_t v192;
  __int16 v193;
  int v194;
  __int16 v195;
  _BYTE v196[10];
  _BYTE v197[6];
  __int16 v198;
  int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  int v209;
  __int16 v210;
  double v211;
  _BYTE buf[144];
  __int16 v213;
  unint64_t v214;
  __int16 v215;
  int v216;
  __int16 v217;
  _BYTE v218[10];
  _BYTE v219[6];
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  uint64_t v225;
  __int16 v226;
  int v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  double v233;

  sub_1013F8DE8(a1 + 968);
  v152 = a3;
  v153 = a2;
  *a3 = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v158 = _Q0;
  if (!(_NF ^ _VF | _ZF))
  {
    v11 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    if (vabdd_f64(sub_100B30608(v11, buf), *(double *)(a1 + 184)) > 40.0)
    {
      *(_BYTE *)(a1 + 159) = 0;
      *(_OWORD *)(a1 + 168) = v158;
    }
  }
  if (*(_BYTE *)(a1 + 2088) && (*(_DWORD *)(*a2 + 128) - 6) >= 3)
  {
    v12 = sub_10011E634((double *)(a1 + 1800), *(double *)(*a2 + 24), *(double *)(*a2 + 32), *(double *)(a1 + 2104), *(double *)(a1 + 2112), *(double *)(a1 + 1704));
    v13 = *(double *)(a1 + 2120);
    v14 = 0.0;
    if (v13 > 0.0)
    {
      v15 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v16 = sub_100B30608(v15, buf);
      v13 = *(double *)(a1 + 2120);
      v14 = v16 - v13;
    }
    if (v12 > 600.0 && (v13 < 0.0 || v14 > 60.0) && sub_100E1231C(a1))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v17 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = sub_1005EEB24();
        v19 = *(_QWORD *)(a1 + 2096);
        v20 = *(_QWORD *)(a1 + 2120);
        v21 = *(_QWORD *)(a1 + 2104);
        v22 = *(_QWORD *)(a1 + 2112);
        *(_DWORD *)buf = 134350593;
        *(double *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v20;
        *(_WORD *)&buf[32] = 2050;
        *(double *)&buf[34] = v14;
        *(_WORD *)&buf[42] = 2050;
        *(double *)&buf[44] = v12;
        *(_WORD *)&buf[52] = 2049;
        *(_QWORD *)&buf[54] = v21;
        *(_WORD *)&buf[62] = 2049;
        *(_QWORD *)&buf[64] = v22;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#fusion,Overrides WiFi Service AP Associated state,now_mct,%{public}.3f,time received associated state,%{public}.3f,time last APWiFiFix seen,%{public}.3f,elapsedTime,%{public}.3f,distance user moved away,%{public}.2f,AP WiFi approx location LL deg,%{private}.7f,%{private}.7f", buf, 0x48u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v116 = qword_1022A01B8;
        v117 = sub_1005EEB24();
        v118 = *(_QWORD *)(a1 + 2096);
        v119 = *(_QWORD *)(a1 + 2120);
        v120 = *(_QWORD *)(a1 + 2104);
        v121 = *(_QWORD *)(a1 + 2112);
        v189 = 134350593;
        *(double *)v190 = v117;
        *(_WORD *)&v190[8] = 2050;
        *(_QWORD *)&v190[10] = v118;
        *(_WORD *)&v190[18] = 2050;
        *(_QWORD *)&v190[20] = v119;
        *(_WORD *)&v190[28] = 2050;
        *(double *)&v190[30] = v14;
        *(_WORD *)&v190[38] = 2050;
        *(double *)&v190[40] = v12;
        *(_WORD *)&v190[48] = 2049;
        *(_QWORD *)&v190[50] = v120;
        *(_WORD *)&v190[58] = 2049;
        *(_QWORD *)&v190[60] = v121;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v116, 0, "#fusion,Overrides WiFi Service AP Associated state,now_mct,%{public}.3f,time received associated state,%{public}.3f,time last APWiFiFix seen,%{public}.3f,elapsedTime,%{public}.3f,distance user moved away,%{public}.2f,AP WiFi approx location LL deg,%{private}.7f,%{private}.7f", &v189, 72);
        v123 = (char *)v122;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v122);
        if (v123 != buf)
          free(v123);
      }
      *(_BYTE *)(a1 + 2088) = 0;
    }
  }
  v23 = (double *)(*a2 + 16);
  *(double *)(a1 + 184) = *v23;
  sub_100E16CC0(a1, v23);
  v175 = v158;
  v176 = 0;
  v177 = 0;
  v179 = v158;
  v180 = xmmword_101BAFC90;
  v181 = xmmword_101BAFC90;
  v182 = v158;
  v183 = v158;
  v178 = off_1021B4BA0;
  v184 = 0xBFF0000000000000;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v25 = *a2;
  v24 = (std::__shared_weak_count *)a2[1];
  if (v24)
  {
    p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
    v176 = v25;
    v177 = v24;
  }
  else
  {
    v176 = *a2;
    v177 = 0;
  }
  v28 = *a2;
  v175 = *(_OWORD *)(*a2 + 8);
  if (*(_BYTE *)(a1 + 166))
  {
    *(_QWORD *)buf = v28 + 128;
    if (!*((_DWORD *)sub_100E284E4((uint64_t **)(a1 + 216), (int *)(v28 + 128), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)
          + 173))
    {
      *(_QWORD *)buf = *a2 + 128;
      v29 = sub_100E284E4((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_10125A374((uint64_t)(v29 + 5), *(_DWORD *)(*a2 + 128));
      *(_QWORD *)buf = *a2 + 128;
      *((_DWORD *)sub_100E284E4((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 108) = *(_DWORD *)(a1 + 1912);
    }
    *(_QWORD *)buf = *a2 + 128;
    v30 = sub_100E284E4((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10125A4B0((int64x2_t *)(v30 + 5), (uint64_t)&v175);
  }
  sub_100E17658(a1, (uint64_t)&v175);
  sub_100E18B6C(a1, *a2);
  sub_100E1A97C(a1);
  for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 167)
      && (v32 = i[6]) != 0
      && *(_BYTE *)(*(_QWORD *)(i[2] + 8 * ((v32 + i[5] - 1) / 0x17uLL)) + 176 * ((v32 + i[5] - 1) % 0x17uLL) + 168))
    {
      v163 = off_1021B4BA0;
      v164 = v158;
      v167 = xmmword_101BAFC90;
      v168 = xmmword_101BAFC90;
      v169 = v158;
      v170 = v158;
      v171 = 0xBFF0000000000000;
      v172 = 0;
      v173 = 0;
      v174 = 0;
      if (!sub_100727EB0((uint64_t)(i + 7), (uint64_t)&v163))
        continue;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v33 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *((_DWORD *)i + 165);
        v35 = v164;
        v36 = sub_10014D1E0(v174);
        v37 = sub_10125D9DC((uint64_t)(i + 1), (double *)&v164 + 1);
        v38 = sub_10014D1E0(v37);
        v39 = i[80];
        v40 = *((_DWORD *)i + 167);
        *(_DWORD *)buf = 67244803;
        *(_DWORD *)&buf[4] = v34;
        *(_WORD *)&buf[8] = 2050;
        *(_QWORD *)&buf[10] = v35;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = *((_QWORD *)&v35 + 1);
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = v36;
        *(_WORD *)&buf[38] = 2082;
        *(_QWORD *)&buf[40] = v38;
        *(_WORD *)&buf[48] = 2049;
        *(_QWORD *)&buf[50] = v165;
        *(_WORD *)&buf[58] = 2049;
        *(_QWORD *)&buf[60] = v166;
        *(_WORD *)&buf[68] = 2049;
        *(_QWORD *)&buf[70] = *((_QWORD *)&v167 + 1);
        *(_WORD *)&buf[78] = 2049;
        *(_QWORD *)&buf[80] = v169;
        *(_WORD *)&buf[88] = 2049;
        *(_QWORD *)&buf[90] = v170;
        *(_WORD *)&buf[98] = 2050;
        *(_QWORD *)&buf[100] = v167;
        *(_WORD *)&buf[108] = 2050;
        *(_QWORD *)&buf[110] = v168;
        *(_WORD *)&buf[118] = 2050;
        *(_QWORD *)&buf[120] = *((_QWORD *)&v169 + 1);
        *(_WORD *)&buf[128] = 2050;
        *(_QWORD *)&buf[130] = *((_QWORD *)&v170 + 1);
        *(_WORD *)&buf[138] = 1026;
        *(_DWORD *)&buf[140] = v172;
        v213 = 2050;
        v214 = v171;
        v215 = 1026;
        v216 = v173;
        v217 = 2050;
        *(_QWORD *)v218 = v39;
        *(_WORD *)&v218[8] = 1026;
        *(_DWORD *)v219 = v40;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#fusion hypothesis,%{public}d,%{public}.3f,%{public}.3f,%{public}s,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}.3f,%{public}d", buf, 0xB0u);
      }
      if (!sub_1001BFF7C(115, 2))
        continue;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v145 = qword_1022A01B8;
      v41 = *((_DWORD *)i + 165);
      v42 = v164;
      v43 = sub_10014D1E0(v174);
      v44 = sub_10125D9DC((uint64_t)(i + 1), (double *)&v164 + 1);
      v45 = sub_10014D1E0(v44);
      v46 = i[80];
      v47 = *((_DWORD *)i + 167);
      v189 = 67244803;
      *(_DWORD *)v190 = v41;
      *(_WORD *)&v190[4] = 2050;
      *(_QWORD *)&v190[6] = v42;
      *(_WORD *)&v190[14] = 2050;
      *(_QWORD *)&v190[16] = *((_QWORD *)&v42 + 1);
      *(_WORD *)&v190[24] = 2082;
      *(_QWORD *)&v190[26] = v43;
      *(_WORD *)&v190[34] = 2082;
      *(_QWORD *)&v190[36] = v45;
      *(_WORD *)&v190[44] = 2049;
      *(_QWORD *)&v190[46] = v165;
      *(_WORD *)&v190[54] = 2049;
      *(_QWORD *)&v190[56] = v166;
      *(_WORD *)&v190[64] = 2049;
      *(_QWORD *)&v190[66] = *((_QWORD *)&v167 + 1);
      *(_WORD *)&v190[74] = 2049;
      *(_QWORD *)&v190[76] = v169;
      *(_WORD *)&v190[84] = 2049;
      *(_QWORD *)&v190[86] = v170;
      *(_WORD *)&v190[94] = 2050;
      *(_QWORD *)&v190[96] = v167;
      *(_WORD *)&v190[104] = 2050;
      *(_QWORD *)&v190[106] = v168;
      *(_WORD *)&v190[114] = 2050;
      *(_QWORD *)&v190[116] = *((_QWORD *)&v169 + 1);
      *(_WORD *)&v190[124] = 2050;
      *(_QWORD *)&v190[126] = *((_QWORD *)&v170 + 1);
      *(_WORD *)&v190[134] = 1026;
      *(_DWORD *)&v190[136] = v172;
      v191 = 2050;
      v192 = v171;
      v193 = 1026;
      v194 = v173;
      v195 = 2050;
      *(_QWORD *)v196 = v46;
      *(_WORD *)&v196[8] = 1026;
      *(_DWORD *)v197 = v47;
      LODWORD(v124) = 176;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v145, 0, "#fusion hypothesis,%{public}d,%{public}.3f,%{public}.3f,%{public}s,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}.3f,%{public}d", &v189, v124);
      v49 = (char *)v48;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v48);
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v50 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
      {
        v51 = i[6];
        v52 = v51 == 0;
        if (v51)
          LODWORD(v51) = *(unsigned __int8 *)(*(_QWORD *)(i[2] + 8 * ((v51 + i[5] - 1) / 0x17uLL))
                                            + 176 * ((v51 + i[5] - 1) % 0x17uLL)
                                            + 168);
        v53 = *((_DWORD *)i + 165);
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)&buf[4] = v53;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v52;
        *(_WORD *)&buf[14] = 1026;
        *(_DWORD *)&buf[16] = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#fusion,Invalid hypothesis,hID,%{public}d,bufferEmpty,%{public}d,fused,%{public}d", buf, 0x14u);
      }
      if (!sub_1001BFF7C(115, 2))
        continue;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v54 = *((_DWORD *)i + 165);
      v55 = i[6];
      v56 = v55 == 0;
      if (v55)
        LODWORD(v55) = *(unsigned __int8 *)(*(_QWORD *)(i[2] + 8 * ((v55 + i[5] - 1) / 0x17uLL))
                                          + 176 * ((v55 + i[5] - 1) % 0x17uLL)
                                          + 168);
      v189 = 67240704;
      *(_DWORD *)v190 = v54;
      *(_WORD *)&v190[4] = 1026;
      *(_DWORD *)&v190[6] = v56;
      *(_WORD *)&v190[10] = 1026;
      *(_DWORD *)&v190[12] = v55;
      LODWORD(v124) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#fusion,Invalid hypothesis,hID,%{public}d,bufferEmpty,%{public}d,fused,%{public}d", &v189, v124);
      v49 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v57);
    }
    if (v49 != buf)
      free(v49);
  }
  sub_100E1AB9C(a1, *a2);
  sub_100E1BE14(a1);
  sub_100E1C6E8(a1);
  *v152 = 1;
  if (*(_BYTE *)(a1 + 157))
  {
    if (*(_BYTE *)(a1 + 156))
    {
      *(_QWORD *)buf = *a2 + 128;
      v58 = sub_100E28228((uint64_t **)(a1 + 192), *(int **)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5][1];
      v59 = *(_OWORD *)(v58 + 88);
      v60 = *(_OWORD *)(v58 + 104);
      v61 = *(_OWORD *)(v58 + 116);
      *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v58 + 72);
      *(_OWORD *)(a1 + 1084) = v61;
      *(_OWORD *)(a1 + 1072) = v60;
      *(_OWORD *)(a1 + 1056) = v59;
      v62 = *(_OWORD *)(v58 + 8);
      v63 = *(_OWORD *)(v58 + 24);
      v64 = *(_OWORD *)(v58 + 56);
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v58 + 40);
      *(_OWORD *)(a1 + 1024) = v64;
      *(_OWORD *)(a1 + 976) = v62;
      *(_OWORD *)(a1 + 992) = v63;
      *v152 = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 1104) = 1;
    }
  }
  else
  {
    if (sub_100E1DD54(a1, *a2))
    {
      *v152 = 0;
      v65 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v66 = sub_100B30608(v65, buf);
      v67 = *(_QWORD **)(a1 + 240);
      if (v67)
      {
        v68 = 0;
        do
        {
          ++v68;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        v68 = 0;
      }
      v69 = *(double *)(a1 + 976);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v70 = v66 - v69;
      v71 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
      {
        v72 = *(_QWORD *)(a1 + 992);
        v73 = *(_QWORD *)(a1 + 1000);
        v161 = *(_QWORD *)(a1 + 1008);
        v74 = *(_DWORD *)(a1 + 1096);
        v75 = sub_10014D1E0(v74);
        v76 = *(_QWORD *)(a1 + 1048);
        v77 = *(_QWORD *)(a1 + 1064);
        v78 = *(_DWORD *)(a1 + 1088);
        v125 = *(_QWORD *)(a1 + 1080);
        v127 = *(_QWORD *)(a1 + 976);
        v129 = *(_QWORD *)(a1 + 1016);
        v131 = *(_QWORD *)(a1 + 1024);
        v133 = *(_QWORD *)(a1 + 1056);
        v135 = *(_QWORD *)(a1 + 1072);
        v137 = *(_QWORD *)(a1 + 984);
        v139 = *(unsigned __int8 *)(a1 + 1092);
        v141 = *(unsigned __int8 *)(a1 + 2088);
        v143 = *(unsigned __int8 *)(a1 + 2075);
        v146 = *(unsigned __int8 *)(a1 + 159);
        v148 = *(_DWORD *)(a1 + 1456);
        v79 = *(_QWORD *)(a1 + 1696);
        v156 = *(_QWORD *)(v79 + 384);
        v150 = *(_QWORD *)(v79 + 392);
        v154 = *(_DWORD *)(a1 + 96);
        v159 = *(_DWORD *)(a1 + 2152);
        v80 = sub_100B303DC();
        v81 = sub_100B309E0(v80);
        *(_DWORD *)buf = 134290179;
        *(_QWORD *)&buf[4] = v72;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v73;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v161;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v74;
        *(_WORD *)&buf[38] = 2082;
        *(_QWORD *)&buf[40] = v75;
        *(_WORD *)&buf[48] = 2049;
        *(_QWORD *)&buf[50] = v76;
        *(_WORD *)&buf[58] = 2049;
        *(_QWORD *)&buf[60] = v77;
        *(_WORD *)&buf[68] = 1026;
        *(_DWORD *)&buf[70] = v78;
        *(_WORD *)&buf[74] = 2050;
        *(_QWORD *)&buf[76] = v125;
        *(_WORD *)&buf[84] = 2050;
        *(_QWORD *)&buf[86] = v127;
        *(_WORD *)&buf[94] = 2050;
        *(double *)&buf[96] = v70;
        *(_WORD *)&buf[104] = 2049;
        *(_QWORD *)&buf[106] = v129;
        *(_WORD *)&buf[114] = 2050;
        *(_QWORD *)&buf[116] = v131;
        *(_WORD *)&buf[124] = 2050;
        *(_QWORD *)&buf[126] = v133;
        *(_WORD *)&buf[134] = 2050;
        *(_QWORD *)&buf[136] = v135;
        v213 = 2050;
        v214 = v137;
        v215 = 1026;
        v216 = v139;
        v217 = 1026;
        *(_DWORD *)v218 = v141;
        *(_WORD *)&v218[4] = 1026;
        *(_DWORD *)&v218[6] = v143;
        *(_WORD *)v219 = 1026;
        *(_DWORD *)&v219[2] = v146;
        v220 = 1026;
        v221 = v148;
        v222 = 1026;
        v223 = v150;
        v224 = 2050;
        v225 = v156;
        v226 = 1026;
        v227 = v154;
        v228 = 1026;
        v229 = v68;
        v230 = 1026;
        v231 = v159;
        v232 = 2050;
        v233 = v81;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "CL-fusion,Pos,0,%{private}.7f,%{private}.7f,Accuracy,%{public}.3f,Type,%{public}d,%{public}s,Speed,%{private}.2f,Course,%{private}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.1f,AltitudeAccuracy,%{public}.1f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampMCT,%{public}.3f,fixIsWiFiAP,%{public}d,linkIsAssociated,%{public}d,inVisit,%{public}d,isPassthrough,%{public}d,dynamicsMode,%{public}d,IO_Context,%{public}d,IO_mct,%{public}.3f,origProviderType,%{public}d,numHypothesis,%{public}d,FusionExeState,%{public}d,propagation_us,%{public}.3f", buf, 0xE4u);
      }
      a2 = v153;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v162 = qword_1022A01B8;
        v103 = *(_QWORD *)(a1 + 992);
        v104 = *(_QWORD *)(a1 + 1000);
        v126 = *(_QWORD *)(a1 + 1008);
        v105 = *(_DWORD *)(a1 + 1096);
        v106 = sub_10014D1E0(v105);
        v107 = *(_QWORD *)(a1 + 1048);
        v108 = *(_QWORD *)(a1 + 1064);
        v109 = *(_DWORD *)(a1 + 1088);
        v110 = *(_QWORD *)(a1 + 1080);
        v128 = *(_QWORD *)(a1 + 976);
        v130 = *(_QWORD *)(a1 + 1016);
        v132 = *(_QWORD *)(a1 + 1024);
        v134 = *(_QWORD *)(a1 + 1056);
        v136 = *(_QWORD *)(a1 + 1072);
        v138 = *(_QWORD *)(a1 + 984);
        v140 = *(unsigned __int8 *)(a1 + 1092);
        v142 = *(unsigned __int8 *)(a1 + 2088);
        v144 = *(unsigned __int8 *)(a1 + 2075);
        v147 = *(unsigned __int8 *)(a1 + 159);
        v149 = *(_DWORD *)(a1 + 1456);
        v111 = *(_QWORD *)(a1 + 1696);
        v157 = *(_QWORD *)(v111 + 384);
        v151 = *(_QWORD *)(v111 + 392);
        v155 = *(_DWORD *)(a1 + 96);
        v160 = *(_DWORD *)(a1 + 2152);
        v112 = sub_100B303DC();
        v113 = sub_100B309E0(v112);
        v189 = 134290179;
        *(_QWORD *)v190 = v103;
        *(_WORD *)&v190[8] = 2049;
        *(_QWORD *)&v190[10] = v104;
        *(_WORD *)&v190[18] = 2050;
        *(_QWORD *)&v190[20] = v126;
        *(_WORD *)&v190[28] = 1026;
        *(_DWORD *)&v190[30] = v105;
        *(_WORD *)&v190[34] = 2082;
        *(_QWORD *)&v190[36] = v106;
        *(_WORD *)&v190[44] = 2049;
        *(_QWORD *)&v190[46] = v107;
        *(_WORD *)&v190[54] = 2049;
        *(_QWORD *)&v190[56] = v108;
        *(_WORD *)&v190[64] = 1026;
        *(_DWORD *)&v190[66] = v109;
        *(_WORD *)&v190[70] = 2050;
        *(_QWORD *)&v190[72] = v110;
        *(_WORD *)&v190[80] = 2050;
        *(_QWORD *)&v190[82] = v128;
        *(_WORD *)&v190[90] = 2050;
        *(double *)&v190[92] = v70;
        *(_WORD *)&v190[100] = 2049;
        *(_QWORD *)&v190[102] = v130;
        *(_WORD *)&v190[110] = 2050;
        *(_QWORD *)&v190[112] = v132;
        *(_WORD *)&v190[120] = 2050;
        *(_QWORD *)&v190[122] = v134;
        *(_WORD *)&v190[130] = 2050;
        *(_QWORD *)&v190[132] = v136;
        v191 = 2050;
        v192 = v138;
        v193 = 1026;
        v194 = v140;
        v195 = 1026;
        *(_DWORD *)v196 = v142;
        *(_WORD *)&v196[4] = 1026;
        *(_DWORD *)&v196[6] = v144;
        *(_WORD *)v197 = 1026;
        *(_DWORD *)&v197[2] = v147;
        v198 = 1026;
        v199 = v149;
        v200 = 1026;
        v201 = v151;
        v202 = 2050;
        v203 = v157;
        v204 = 1026;
        v205 = v155;
        v206 = 1026;
        v207 = v68;
        v208 = 1026;
        v209 = v160;
        v210 = 2050;
        v211 = v113;
        LODWORD(v124) = 228;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v162, 0, "CL-fusion,Pos,0,%{private}.7f,%{private}.7f,Accuracy,%{public}.3f,Type,%{public}d,%{public}s,Speed,%{private}.2f,Course,%{private}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.1f,AltitudeAccuracy,%{public}.1f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampMCT,%{public}.3f,fixIsWiFiAP,%{public}d,linkIsAssociated,%{public}d,inVisit,%{public}d,isPassthrough,%{public}d,dynamicsMode,%{public}d,IO_Context,%{public}d,IO_mct,%{public}.3f,origProviderType,%{public}d,numHypothesis,%{public}d,FusionExeState,%{public}d,propagation_us,%{public}.3f", &v189, v124);
        v115 = (char *)v114;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v114);
        if (v115 != buf)
          free(v115);
        a2 = v153;
      }
    }
    else
    {
      if (!*(_DWORD *)(a1 + 1104))
        *(_DWORD *)(a1 + 1104) = 9;
      *v152 = 1;
    }
    if (!*(_BYTE *)(a1 + 158) && sub_100E123F4(a1, *a2))
    {
      if (*(_BYTE *)(a1 + 156))
      {
        v82 = *(_DWORD *)(a1 + 96);
        if (v82 > 8 || ((1 << v82) & 0x1D0) == 0)
        {
          *(_QWORD *)buf = *a2 + 128;
          v83 = sub_100E28228((uint64_t **)(a1 + 192), *(int **)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5][1];
          v84 = *(_OWORD *)(v83 + 88);
          v85 = *(_OWORD *)(v83 + 104);
          v86 = *(_OWORD *)(v83 + 116);
          *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v83 + 72);
          *(_OWORD *)(a1 + 1084) = v86;
          *(_OWORD *)(a1 + 1072) = v85;
          *(_OWORD *)(a1 + 1056) = v84;
          v87 = *(_OWORD *)(v83 + 8);
          v88 = *(_OWORD *)(v83 + 24);
          v89 = *(_OWORD *)(v83 + 56);
          *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v83 + 40);
          *(_OWORD *)(a1 + 1024) = v89;
          *(_OWORD *)(a1 + 976) = v87;
          *(_OWORD *)(a1 + 992) = v88;
          *v152 = 0;
        }
      }
      else
      {
        *v152 = 1;
        *(_DWORD *)(a1 + 1104) = 1;
      }
      *(_BYTE *)(a1 + 159) = 1;
    }
  }
  *(_BYTE *)(a1 + 156) = 0;
  if (!*v152)
    *(_QWORD *)(a1 + 2128) = 0;
  v90 = *(_QWORD **)(a1 + 192);
  if (v90 != (_QWORD *)(a1 + 200))
  {
    do
    {
      v91 = v90 + 5;
      v92 = (_QWORD *)v90[5];
      if (v92)
      {
        do
        {
          v93 = *(double *)(a1 + 184);
          v94 = *(double *)(v92[1] + 16);
          if (v93 > v94 && v93 - v94 > 300.0)
            sub_100346F9C(v92 + 1);
          v92 = (_QWORD *)*v92;
        }
        while (v92);
        v95 = *(_QWORD **)v91;
        for (*(_QWORD *)buf = 0; v95; v95 = (_QWORD *)*v95)
        {
          v96 = v95[2];
          if (!v96 || *(_QWORD *)(v96 + 8) == -1)
          {
            while (1)
            {
              v95 = (_QWORD *)*v95;
              if (!v95)
                break;
              v97 = v95[2];
              if (v97)
              {
                if (*(_QWORD *)(v97 + 8) != -1)
                  break;
              }
            }
            if (buf != v91 && v91 != (_BYTE *)v95)
            {
              v98 = v91;
              do
              {
                v99 = v98;
                v98 = (_QWORD *)*v98;
              }
              while (v98 != v95);
              if (v99 != (_QWORD *)v91)
              {
                *v99 = *(_QWORD *)buf;
                *(_QWORD *)buf = *(_QWORD *)v91;
                *(_QWORD *)v91 = v95;
              }
            }
            if (!v95)
              break;
          }
          v91 = v95;
        }
      }
      else
      {
        *(_QWORD *)buf = 0;
      }
      sub_1008AF89C((_QWORD **)buf);
      v100 = (_QWORD *)v90[1];
      if (v100)
      {
        do
        {
          v101 = v100;
          v100 = (_QWORD *)*v100;
        }
        while (v100);
      }
      else
      {
        do
        {
          v101 = (_QWORD *)v90[2];
          _ZF = *v101 == (_QWORD)v90;
          v90 = v101;
        }
        while (!_ZF);
      }
      v90 = v101;
    }
    while (v101 != (_QWORD *)(a1 + 200));
  }
  if (v177)
    std::__shared_weak_count::__release_weak(v177);
  return 1;
}

void sub_100E16B08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100E16B18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unsigned int v24;

  v24 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v4 = a1 + 2248;
  sub_10094BCF4(a1 + 2248, *(_DWORD *)(a1 + 1912));
  sub_10094BE14(v4, *(_DWORD *)(*(_QWORD *)(a1 + 1696) + 392));
  sub_100E26030(a1, &v24, (char **)&v21, (double **)&v18);
  sub_10094BED4(v4, v24);
  sub_10094C214(v4, (double **)&v18);
  sub_10094C550(v4, &v21);
  v5 = *(_DWORD **)(a1 + 1696);
  v6 = v5[106];
  v7 = v5[107];
  v8 = v5[108];
  v9 = v5[109];
  *((_QWORD *)v5 + 53) = 0;
  *((_QWORD *)v5 + 54) = 0;
  sub_10094C1A4(v4, v8, v9, v6, v7);
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_DWORD *)(v10 + 128);
    if (v11 == 4)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      __p = 0;
      v13 = 0;
      v14 = 0;
      sub_100E266E0(a1, (double *)v10, (char **)&v15, (char **)&__p);
      sub_10094C75C(v4, (double **)&v15);
      sub_10094C448(v4, (double **)&__p);
      if (__p)
      {
        v13 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
    }
    else if (v11 == 1)
    {
      sub_100E263E0(a1, (double *)v10, (char **)&v21, (double **)&v18);
      sub_10094C678(v4, &v21, *(double *)(*a2 + 40));
      sub_10094C344(v4, (double **)&v18, *(double *)(*a2 + 40));
      if (*(_DWORD *)(a1 + 1096) != 1)
        sub_10094C090(v4);
    }
  }
  sub_100949EBC(v4);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

uint64_t sub_100E16CC0(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  char v20;
  NSObject *v21;
  double v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  int v28;
  int v29;
  const char *v30;
  char *v31;
  uint64_t *j;
  NSObject *v33;
  double v34;
  int v35;
  int v36;
  double v37;
  int v38;
  int v39;
  const char *v40;
  char *v41;
  uint64_t *i;
  NSObject *v43;
  int v44;
  int v45;
  const char *v46;
  char *v47;
  int v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  int v55;
  double v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  _BYTE buf[12];
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;

  v4 = *(_QWORD *)(a1 + 1696);
  v5 = *(_QWORD *)(v4 + 392);
  v53 = *(double *)(v4 + 384);
  v54 = v5;
  *(_QWORD *)buf = 0xBFF0000000000000;
  if (sub_1006B4F00((_QWORD *)(a1 + 1840), (double *)buf) && (v5 - 1) <= 1)
  {
    v6 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v53 = sub_100B30608(v6, buf);
    if ((v54 - 1) <= 1)
    {
      if ((_DWORD)v54 == 2)
        v7 = 2;
      else
        v7 = 1;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v8 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)(a1 + 1912);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = v53;
        v62 = 1026;
        v63 = v7;
        v64 = 1026;
        v65 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v49 = *(_DWORD *)(a1 + 1912);
        v55 = 134349568;
        v56 = v53;
        v57 = 1026;
        v58 = v7;
        v59 = 1026;
        v60 = v49;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", &v55, 24);
        v51 = (char *)v50;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      v10 = *(_QWORD **)(a1 + 216);
      if (v10 != (_QWORD *)(a1 + 224))
      {
        do
        {
          *((_DWORD *)v10 + 108) = v7;
          if (!sub_1007296FC((uint64_t)(v10 + 11), &v53, 1.5))
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v11 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v12 = *((_DWORD *)v10 + 173);
              *(_DWORD *)buf = 134349312;
              *(double *)&buf[4] = v53;
              v62 = 1026;
              v63 = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v16 = *((_DWORD *)v10 + 173);
              v55 = 134349312;
              v56 = v53;
              v57 = 1026;
              v58 = v16;
              LODWORD(v52) = 18;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d", &v55, v52);
              v18 = (char *)v17;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)", "%s\n", v17);
              if (v18 != buf)
                free(v18);
            }
          }
          v13 = (_QWORD *)v10[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v10[2];
              v15 = *v14 == (_QWORD)v10;
              v10 = v14;
            }
            while (!v15);
          }
          v10 = v14;
        }
        while (v14 != (_QWORD *)(a1 + 224));
      }
      for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
      {
        *((_DWORD *)i + 100) = v7;
        if (!sub_1007296FC((uint64_t)(i + 7), &v53, 1.5))
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v43 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v44 = *((_DWORD *)i + 165);
            *(_DWORD *)buf = 134349312;
            *(double *)&buf[4] = v53;
            v62 = 1026;
            v63 = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v45 = *((_DWORD *)i + 165);
            v55 = 134349312;
            v56 = v53;
            v57 = 1026;
            v58 = v45;
            LODWORD(v52) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d", &v55, v52);
            v47 = (char *)v46;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)", "%s\n", v46);
            if (v47 != buf)
              free(v47);
          }
        }
      }
    }
    v20 = 0;
  }
  else
  {
    v19 = *(_QWORD **)(a1 + 216);
    if (v19 == (_QWORD *)(a1 + 224))
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      do
      {
        if (!sub_1007268C4((uint64_t)(v19 + 11), a2))
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v21 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v22 = *a2;
            v23 = *(_DWORD *)(a1 + 1912);
            v24 = *((_DWORD *)v19 + 173);
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = v22;
            v62 = 1026;
            v63 = v23;
            v64 = 1026;
            v65 = v24;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis prediction failed,%{public}d,hID,%{public}d", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v27 = *a2;
            v28 = *(_DWORD *)(a1 + 1912);
            v29 = *((_DWORD *)v19 + 173);
            v55 = 134349568;
            v56 = v27;
            v57 = 1026;
            v58 = v28;
            v59 = 1026;
            v60 = v29;
            LODWORD(v52) = 24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,provider hypothesis prediction failed,%{public}d,hID,%{public}d", &v55, v52);
            v31 = (char *)v30;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)", "%s\n", v30);
            if (v31 != buf)
              free(v31);
          }
          v20 = 1;
        }
        v25 = (_QWORD *)v19[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v19[2];
            v15 = *v26 == (_QWORD)v19;
            v19 = v26;
          }
          while (!v15);
        }
        v19 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 224));
    }
    for (j = *(uint64_t **)(a1 + 240); j; j = (uint64_t *)*j)
    {
      if (!sub_1007268C4((uint64_t)(j + 7), a2))
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v33 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v34 = *a2;
          v35 = *(_DWORD *)(a1 + 1912);
          v36 = *((_DWORD *)j + 165);
          *(_DWORD *)buf = 134349568;
          *(double *)&buf[4] = v34;
          v62 = 1026;
          v63 = v35;
          v64 = 1026;
          v65 = v36;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,fused hypothesis prediction failed,%{public}d,hID,%{public}d", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v37 = *a2;
          v38 = *(_DWORD *)(a1 + 1912);
          v39 = *((_DWORD *)j + 165);
          v55 = 134349568;
          v56 = v37;
          v57 = 1026;
          v58 = v38;
          v59 = 1026;
          v60 = v39;
          LODWORD(v52) = 24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,fused hypothesis prediction failed,%{public}d,hID,%{public}d", &v55, v52);
          v41 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        v20 = 1;
      }
    }
  }
  return v20 & 1;
}

void sub_100E17630(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E17658(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  double *v9;
  double v10;
  double v11;
  float64x2_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  double i;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  int v48;
  int8x16_t v49;
  double v50;
  double v51;
  double v52;
  int8x16_t v53;
  long double v54;
  int8x16_t v55;
  double v56;
  int8x16_t v57;
  double v58;
  double v59;
  double v60;
  int8x16_t v61;
  long double v62;
  int8x16_t v63;
  uint64_t *v64;
  unsigned int v65;
  double v66;
  int v67;
  NSObject *v69;
  int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int8x16_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  unsigned int v81;
  double v82;
  double v83;
  double v84;
  int v85;
  int v86;
  const char *v87;
  char *v88;
  std::__shared_weak_count *v89;
  NSObject *v90;
  uint64_t v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  NSObject *v95;
  const char *v96;
  char *v97;
  uint64_t *v98;
  double v99;
  double v100;
  long double *v101;
  double v102;
  NSObject *v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  const char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  int v127;
  int v128;
  _BOOL4 v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  const char *v138;
  char *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  char *v145;
  int v146;
  int v147;
  const char *v148;
  char *v149;
  double v150;
  uint64_t v151;
  int8x16_t v152;
  int8x16_t v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  double v157;
  double v158;
  int8x16_t v159;
  std::__shared_weak_count *v160;
  unsigned int v161;
  char v162;
  uint64_t v163;
  __int128 v164;
  uint64_t *v165;
  double v166;
  double v167;
  double v168;
  std::__shared_weak_count *v169;
  double v170;
  _BYTE v171[40];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  unint64_t v176;
  int v177;
  char v178;
  int v179;
  _BYTE buf[584];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  int v189;

  v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && *(double *)(v6 + 40) > 0.0)
    {
      v160 = v5;
      v166 = 0.0;
      v167 = 0.0;
      v163 = a1;
      v161 = sub_1000F3890((double *)(a1 + 1800), &v167, &v166, *(double *)(v6 + 24), *(double *)(a1 + 1704));
      if ((v161 & 1) != 0)
      {
        v7 = a1;
        v8 = *(uint64_t **)(a1 + 240);
        if (v8)
        {
          v162 = 0;
          v165 = 0;
          v9 = (double *)(v6 + 16);
          v158 = v167 * 0.0174532925;
          v10 = 1.79769313e308;
          v11 = v166 * 0.0174532925;
          __asm { FMOV            V3.2D, #-1.0 }
          v16.f64[0] = NAN;
          v16.f64[1] = NAN;
          v159 = (int8x16_t)vnegq_f64(v16);
          v164 = _Q3;
          do
          {
            v17 = v8[5];
            v18 = v17 / 0x17;
            v19 = v8[2];
            v20 = v8[3];
            if (v20 == v19)
            {
              v22 = 0;
              v25 = 0;
              v24 = (_QWORD *)(v19 + 8 * ((v8[6] + v17) / 0x17));
              v21 = v17 % 0x17;
            }
            else
            {
              v21 = v17 % 0x17;
              v22 = *(_QWORD *)(v19 + 8 * v18) + 176 * (v17 % 0x17);
              v23 = v8[6] + v17;
              v24 = (_QWORD *)(v19 + 8 * (v23 / 0x17));
              v25 = *v24 + 176 * (v23 % 0x17);
            }
            for (i = 1.79769313e308; ; i = v29)
            {
              v27 = v25;
              v28 = v20 == v19 ? 0 : *(_QWORD *)(v19 + 8 * v18) + 176 * v21;
              if (v27 == v28)
                break;
              if (v27 == *v24)
              {
                v31 = *(v24 - 1);
                if (!*(_BYTE *)(v31 + 4040))
                {
LABEL_26:
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v33 = qword_1022A01B8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
                  {
                    v34 = v27;
                    if (v27 == *v24)
                      v34 = *(v24 - 1) + 4048;
                    v35 = *((_DWORD *)v8 + 165);
                    v36 = *(_QWORD *)(v34 - 168);
                    *(_DWORD *)buf = 67240448;
                    *(_DWORD *)&buf[4] = v35;
                    *(_WORD *)&buf[8] = 2050;
                    *(_QWORD *)&buf[10] = v36;
                    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#Error,fusion data association, found no fused location, hID,%{public}d,mct,%{public}.3f", buf, 0x12u);
                  }
                  if (sub_1001BFF7C(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v37 = *((_DWORD *)v8 + 165);
                    if (v27 == *v24)
                      v27 = *(v24 - 1) + 4048;
                    v38 = *(_QWORD *)(v27 - 168);
                    *(_DWORD *)v171 = 67240448;
                    *(_DWORD *)&v171[4] = v37;
                    *(_WORD *)&v171[8] = 2050;
                    *(_QWORD *)&v171[10] = v38;
                    LODWORD(v150) = 18;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,fusion data association, found no fused location, hID,%{public}d,mct,%{public}.3f", v171, *(_QWORD *)&v150);
                    v40 = (char *)v39;
                    sub_100512490("Generic", 1, 0, 0, "auto cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)::(anonymous class)::operator()(LCFusionLocationHypothesis &) const", "%s\n", v39);
                    if (v40 != buf)
                      free(v40);
                  }
                  goto LABEL_56;
                }
                v29 = vabdd_f64(*(double *)(v31 + 3880), *v9);
                if (v29 > i)
                  break;
                v30 = v31 + 4048;
                --v24;
              }
              else
              {
                if (!*(_BYTE *)(v27 - 8))
                  goto LABEL_26;
                v29 = vabdd_f64(*(double *)(v27 - 168), *v9);
                v30 = v27;
                if (v29 > i)
                  break;
              }
              v25 = v30 - 176;
              v22 = v27;
            }
            if (v20 == v19)
              v32 = 0;
            else
              v32 = *(_QWORD *)(v19 + 8 * v18) + 176 * v21;
            if (v22 == v32)
            {
              v56 = 1.79769313e308;
              goto LABEL_57;
            }
            *(_OWORD *)&buf[8] = _Q3;
            *(_OWORD *)&buf[40] = xmmword_101BAFC90;
            *(_OWORD *)&buf[56] = xmmword_101BAFC90;
            *(_OWORD *)&buf[80] = _Q3;
            *(_OWORD *)&buf[96] = _Q3;
            *(_QWORD *)buf = off_1021B4BA0;
            *(_QWORD *)&buf[112] = 0xBFF0000000000000;
            *(_DWORD *)&buf[120] = 0;
            buf[124] = 0;
            *(_DWORD *)&buf[128] = 0;
            if (!sub_100727EB0((uint64_t)(v8 + 7), (uint64_t)buf))
              goto LABEL_56;
            v41 = *(double *)(v6 + 40);
            v42 = *(double *)&buf[40];
            *(_OWORD *)&v171[8] = v164;
            v172 = xmmword_101BAFC90;
            v173 = xmmword_101BAFC90;
            v174 = v164;
            v175 = v164;
            v176 = 0xBFF0000000000000;
            v177 = 0;
            v178 = 0;
            v179 = 0;
            v43 = *((double *)v8 + 51);
            v44 = *(double *)(v6 + 16);
            *(_QWORD *)v171 = off_1021B4BA0;
            if (v43 <= v44)
            {
              if (!sub_1007268C4((uint64_t)(v8 + 7), (double *)(v6 + 16))
                || !sub_100727EB0((uint64_t)(v8 + 7), (uint64_t)v171))
              {
                goto LABEL_56;
              }
              v58 = *(double *)&v171[24];
              *(double *)v57.i64 = *(double *)&v171[32] * 0.0174532925;
              v60 = *(double *)(v6 + 24);
              v59 = *(double *)(v6 + 32);
              v61 = (int8x16_t)0x400921FB54442D18uLL;
              if (fabs(*(double *)&v171[32] * 0.0174532925) <= 3.14159265)
              {
                v63 = (int8x16_t)0x400921FB54442D18uLL;
              }
              else
              {
                v153 = vbslq_s8(v159, (int8x16_t)0x400921FB54442D18uLL, v57);
                v62 = fmod(*(double *)v57.i64 + *(double *)v153.i64, 6.28318531);
                v63 = (int8x16_t)0x400921FB54442D18uLL;
                v61.i64[1] = v153.i64[1];
                *(double *)v57.i64 = v62 - *(double *)v153.i64;
              }
              *(double *)v61.i64 = v59 * 0.0174532925;
              v75.i64[1] = v63.i64[1];
              if (fabs(v59 * 0.0174532925) > *(double *)v63.i64)
              {
                v156 = v57.i64[0];
                COERCE_DOUBLE(v151 = vbslq_s8(v159, v63, v61).i64[0]);
                *(double *)v75.i64 = fmod(*(double *)v61.i64 + *(double *)&v151, 6.28318531);
                v63 = (int8x16_t)0x400921FB54442D18uLL;
                v57.i64[0] = v156;
                *(double *)v61.i64 = *(double *)v75.i64 - *(double *)&v151;
              }
              v76 = 0.5;
              *(double *)v75.i64 = *(double *)v57.i64 - *(double *)v61.i64;
              if (vabdd_f64(*(double *)v57.i64, *(double *)v61.i64) > *(double *)v63.i64)
              {
                v157 = *(double *)vbslq_s8(v159, v63, v75).i64;
                *(double *)v75.i64 = fmod(*(double *)v75.i64 + v157, 6.28318531) - v157;
              }
              v79 = v41 * v41;
              v78 = v58 - v60;
              v77 = *(double *)&v172 * *(double *)&v172;
            }
            else
            {
              v170 = v43;
              v45 = *(std::__shared_weak_count **)(a2 + 24);
              v168 = *(double *)(a2 + 16);
              v169 = v45;
              if (v45)
              {
                p_shared_weak_owners = (unint64_t *)&v45->__shared_weak_owners_;
                do
                  v47 = __ldxr(p_shared_weak_owners);
                while (__stxr(v47 + 1, p_shared_weak_owners));
              }
              v48 = sub_10072A9DC(v163 + 1112, &v170, (uint64_t *)&v168, (uint64_t)v171);
              if (v169)
                std::__shared_weak_count::__release_weak(v169);
              if (!v48)
              {
LABEL_56:
                v56 = 1.79769313e308;
                goto LABEL_57;
              }
              v50 = *(double *)&buf[24];
              *(double *)v49.i64 = *(double *)&buf[32] * 0.0174532925;
              v52 = *(double *)&v171[24];
              v51 = *(double *)&v171[32];
              v53 = (int8x16_t)0x400921FB54442D18uLL;
              if (fabs(*(double *)&buf[32] * 0.0174532925) <= 3.14159265)
              {
                v55 = (int8x16_t)0x400921FB54442D18uLL;
              }
              else
              {
                v152 = vbslq_s8(v159, (int8x16_t)0x400921FB54442D18uLL, v49);
                v54 = fmod(*(double *)v49.i64 + *(double *)v152.i64, 6.28318531);
                v55 = (int8x16_t)0x400921FB54442D18uLL;
                v53.i64[1] = v152.i64[1];
                *(double *)v49.i64 = v54 - *(double *)v152.i64;
              }
              *(double *)v53.i64 = v51 * 0.0174532925;
              v75.i64[1] = v55.i64[1];
              if (fabs(v51 * 0.0174532925) > *(double *)v55.i64)
              {
                v154 = v49.i64[0];
                COERCE_DOUBLE(v151 = vbslq_s8(v159, v55, v53).i64[0]);
                *(double *)v75.i64 = fmod(*(double *)v53.i64 + *(double *)&v151, 6.28318531);
                v55 = (int8x16_t)0x400921FB54442D18uLL;
                v49.i64[0] = v154;
                *(double *)v53.i64 = *(double *)v75.i64 - *(double *)&v151;
              }
              v76 = 0.5;
              *(double *)v75.i64 = *(double *)v49.i64 - *(double *)v53.i64;
              if (vabdd_f64(*(double *)v49.i64, *(double *)v53.i64) > *(double *)v55.i64)
              {
                v155 = *(double *)vbslq_s8(v159, v55, v75).i64;
                *(double *)v75.i64 = fmod(*(double *)v75.i64 + v155, 6.28318531) - v155;
              }
              v77 = v42 * v42;
              v78 = v50 - v52;
              v79 = *(double *)&v172 * *(double *)&v172;
            }
            v80 = v77 * v76;
            v81 = *((_DWORD *)v8 + 100);
            if ((v81 - 1 >= 5 && v81 != 10 || v81 < 3 || *(double *)&buf[80] < 1.0) && *(_DWORD *)(v6 + 128) == 1)
            {
              v82 = *(double *)(v6 + 88);
              if (v82 > 0.0 && v82 < 5.0)
              {
                v83 = *(double *)(v6 + 80);
                _NF = v83 < 2.0;
                v84 = v80 + v83 * v83;
                if (!_NF)
                  v80 = v84;
              }
            }
            v56 = v158 * v78 * (v158 * v78) * (1.0 / (v79 * v76 + v80))
                + v11
                * (*(double *)v75.i64
                 * 57.2957795)
                * (v11
                 * (*(double *)v75.i64
                  * 57.2957795))
                * (1.0
                 / (v79 * v76 + v80));
LABEL_57:
            v64 = v165;
            if (v56 < v10)
              v64 = v8;
            v165 = v64;
            if (v56 < v10)
              v10 = v56;
            v65 = *((_DWORD *)v8 + 100) - 1;
            if (v65 < 0xA && ((0x21Fu >> v65) & 1) != 0 || *(_BYTE *)(v163 + 2088))
            {
              v66 = 6.18007;
            }
            else
            {
              v67 = *(_DWORD *)(v6 + 128);
              if ((v67 & 0xFFFFFFFE) == 6 || v67 == 8)
                v66 = 6.18007;
              else
                v66 = 11.8292;
            }
            if (v56 <= v66)
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v69 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v70 = *((_DWORD *)v8 + 165);
                v71 = *((_DWORD *)v8 + 167);
                *(_DWORD *)buf = 134349824;
                *(double *)&buf[4] = v56;
                *(_WORD *)&buf[12] = 2050;
                *(double *)&buf[14] = v66;
                *(_WORD *)&buf[22] = 1026;
                *(_DWORD *)&buf[24] = v70;
                *(_WORD *)&buf[28] = 1026;
                *(_DWORD *)&buf[30] = v71;
                _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "#fusion,data association success,mahalanobis distance (squared),%{public}.2f,GatingThreshold,%{public}.2f,hID,%{public}d,hypothesisState,%{public}d", buf, 0x22u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v85 = *((_DWORD *)v8 + 165);
                v86 = *((_DWORD *)v8 + 167);
                *(_DWORD *)v171 = 134349824;
                *(double *)&v171[4] = v56;
                *(_WORD *)&v171[12] = 2050;
                *(double *)&v171[14] = v66;
                *(_WORD *)&v171[22] = 1026;
                *(_DWORD *)&v171[24] = v85;
                *(_WORD *)&v171[28] = 1026;
                *(_DWORD *)&v171[30] = v86;
                LODWORD(v150) = 34;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,data association success,mahalanobis distance (squared),%{public}.2f,GatingThreshold,%{public}.2f,hID,%{public}d,hypothesisState,%{public}d", v171, *(_QWORD *)&v150);
                v88 = (char *)v87;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v87);
                if (v88 != buf)
                  free(v88);
              }
              v72 = v8[6] + v8[5] - 1;
              v73 = *(_QWORD *)(v8[2] + 8 * (v72 / 0x17));
              v74 = v72 % 0x17;
              if (*(_BYTE *)(v73 + 176 * v74 + 168))
                sub_1013F8ADC(v73 + 176 * v74 + 32, (uint64_t)"data association success", *((_DWORD *)v8 + 165));
              sub_10125A4B0((int64x2_t *)(v8 + 1), a2);
              v162 = 1;
            }
            else
            {
              if (*((_DWORD *)v8 + 167) == 2)
                *((_DWORD *)v8 + 167) = 3;
              ++*((_DWORD *)v8 + 166);
            }
            _Q3 = v164;
            v8 = (uint64_t *)*v8;
          }
          while (v8);
          if ((v162 & 1) != 0)
            goto LABEL_168;
          v7 = v163;
          v98 = *(uint64_t **)(v163 + 240);
          if (v98)
          {
            do
            {
              v99 = sub_101259E10(*(_QWORD *)(v98[2] + 8 * (v98[5] / 0x17uLL)) + 176 * (v98[5] % 0x17uLL));
              if (v99 < 15.0)
              {
                v100 = v99;
                v168 = v99 / 15.0 * 0.2 + 0.00000001;
                v101 = (long double *)(v98 + 80);
                v102 = *((double *)v98 + 80);
                if (v168 < v102)
                  v101 = &v168;
                if (v102 < 0.00000001)
                  v101 = (long double *)&unk_101C28D68;
                sub_10125E050((uint64_t)(v98 + 1), *v101);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v103 = qword_1022A01B8;
                if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                {
                  v104 = *((_DWORD *)v98 + 165);
                  v105 = v98[80];
                  *(_DWORD *)buf = 67240704;
                  *(_DWORD *)&buf[4] = v104;
                  *(_WORD *)&buf[8] = 2050;
                  *(double *)&buf[10] = v100;
                  *(_WORD *)&buf[18] = 2050;
                  *(_QWORD *)&buf[20] = v105;
                  _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "Provisional hypothesis likelihood restricted hID,%{public}d,age,%{public}.3f,likelihood,%{public}.3f", buf, 0x1Cu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v106 = *((_DWORD *)v98 + 165);
                  v107 = v98[80];
                  *(_DWORD *)v171 = 67240704;
                  *(_DWORD *)&v171[4] = v106;
                  *(_WORD *)&v171[8] = 2050;
                  *(double *)&v171[10] = v100;
                  *(_WORD *)&v171[18] = 2050;
                  *(_QWORD *)&v171[20] = v107;
                  LODWORD(v150) = 28;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "Provisional hypothesis likelihood restricted hID,%{public}d,age,%{public}.3f,likelihood,%{public}.3f", v171, *(_QWORD *)&v150);
                  v109 = (char *)v108;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v108);
                  if (v109 != buf)
                    free(v109);
                }
              }
              v98 = (uint64_t *)*v98;
            }
            while (v98);
            v7 = v163;
          }
        }
        else
        {
          v165 = 0;
          v10 = 1.79769313e308;
        }
        bzero(buf, 0x2D0uLL);
        sub_1008AF42C((uint64_t)buf);
        v110 = *(_QWORD *)(v7 + 240);
        v111 = (char *)operator new(0x2D8uLL);
        *(_QWORD *)v111 = v110;
        *(_OWORD *)(v111 + 8) = *(_OWORD *)buf;
        v112 = *(_QWORD *)&buf[24];
        *((_QWORD *)v111 + 3) = *(_QWORD *)&buf[16];
        *((_QWORD *)v111 + 4) = v112;
        memset(buf, 0, 32);
        *(_OWORD *)(v111 + 40) = *(_OWORD *)&buf[32];
        *(_OWORD *)&buf[32] = 0u;
        memcpy(v111 + 56, &buf[48], 0x218uLL);
        v113 = v181;
        v181 = 0u;
        v114 = v182;
        v115 = v183;
        *((_OWORD *)v111 + 37) = v113;
        *((_OWORD *)v111 + 38) = v114;
        v116 = v186;
        v117 = v188;
        *((_OWORD *)v111 + 43) = v187;
        *((_OWORD *)v111 + 44) = v117;
        v118 = v184;
        v119 = v185;
        *((_OWORD *)v111 + 39) = v115;
        *((_OWORD *)v111 + 40) = v118;
        *((_DWORD *)v111 + 180) = v189;
        *((_OWORD *)v111 + 41) = v119;
        *((_OWORD *)v111 + 42) = v116;
        *(_QWORD *)(v163 + 240) = v111;
        sub_1008AF650(buf);
        sub_10094C148(v163 + 2248);
        v120 = *(_QWORD *)(v163 + 240);
        *(_DWORD *)(v120 + 400) = *(_DWORD *)(v163 + 1912);
        sub_10125A4B0((int64x2_t *)(v120 + 8), a2);
        *(_OWORD *)(*(_QWORD *)(v163 + 240) + 640) = xmmword_101C28CD0;
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v121 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v122 = *(_QWORD *)(v163 + 240);
          v123 = *(_DWORD *)(v122 + 660);
          v124 = *(_QWORD *)(v122 + 640);
          v125 = *(_QWORD *)(v122 + 648);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v123;
          *(_WORD *)&buf[8] = 2048;
          *(_QWORD *)&buf[10] = v124;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v125;
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "New hypothesis created,hID,%d,Likelihood,%.5f,logLikelihood,%.5f", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v140 = *(_QWORD *)(v163 + 240);
          v141 = *(_DWORD *)(v140 + 660);
          v142 = *(_QWORD *)(v140 + 640);
          v143 = *(_QWORD *)(v140 + 648);
          *(_DWORD *)v171 = 67109632;
          *(_DWORD *)&v171[4] = v141;
          *(_WORD *)&v171[8] = 2048;
          *(_QWORD *)&v171[10] = v142;
          *(_WORD *)&v171[18] = 2048;
          *(_QWORD *)&v171[20] = v143;
          LODWORD(v150) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "New hypothesis created,hID,%d,Likelihood,%.5f,logLikelihood,%.5f", v171, v150, *(double *)&v151);
          v145 = (char *)v144;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v144);
          if (v145 != buf)
            free(v145);
        }
        if (v165)
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v126 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v127 = *((_DWORD *)v165 + 165);
            v128 = *(_DWORD *)(*(_QWORD *)(v163 + 240) + 660);
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = v10;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v127;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v128;
            _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "fusion data association failed,smallest mahalanobis distance (squared),%{public}.2f,hID,%{public}d,newhypothesisID,%{public}d", buf, 0x18u);
          }
          v129 = sub_1001BFF7C(115, 2);
          v130 = v165;
          if (v129)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v146 = *((_DWORD *)v165 + 165);
            v147 = *(_DWORD *)(*(_QWORD *)(v163 + 240) + 660);
            *(_DWORD *)v171 = 134349568;
            *(double *)&v171[4] = v10;
            *(_WORD *)&v171[12] = 1026;
            *(_DWORD *)&v171[14] = v146;
            *(_WORD *)&v171[18] = 1026;
            *(_DWORD *)&v171[20] = v147;
            LODWORD(v150) = 24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "fusion data association failed,smallest mahalanobis distance (squared),%{public}.2f,hID,%{public}d,newhypothesisID,%{public}d", v171, *(_QWORD *)&v150);
            v149 = (char *)v148;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v148);
            if (v149 != buf)
              free(v149);
            v130 = v165;
          }
          v131 = v130[6] + v130[5] - 1;
          v132 = *(_QWORD *)(v130[2] + 8 * (v131 / 0x17));
          v133 = v131 % 0x17;
          if (*(_BYTE *)(v132 + 176 * v133 + 168))
            sub_1013F8ADC(v132 + 176 * v133 + 32, (uint64_t)"nearest hypothesis to input location where association failed", *((_DWORD *)v130 + 165));
        }
        v134 = *(_QWORD *)(v163 + 240);
        v135 = *(_QWORD *)(v134 + 48) + *(_QWORD *)(v134 + 40) - 1;
        v136 = *(_QWORD *)(*(_QWORD *)(v134 + 16) + 8 * (v135 / 0x17));
        v137 = v135 % 0x17;
        if (*(_BYTE *)(v136 + 176 * v137 + 168))
          sub_1013F8ADC(v136 + 176 * v137 + 32, (uint64_t)"newly created fused hypothesis", *(_DWORD *)(v134 + 660));
      }
      else
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v95 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "#Error,fusion data association, calc_dNdE failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          *(_WORD *)v171 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,fusion data association, calc_dNdE failed", v171, 2);
          v97 = (char *)v96;
          sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v96);
          if (v97 != buf)
            free(v97);
        }
      }
LABEL_168:
      v91 = v161;
      v89 = v160;
LABEL_120:
      p_shared_owners = (unint64_t *)&v89->__shared_owners_;
      do
        v93 = __ldaxr(p_shared_owners);
      while (__stlxr(v93 - 1, p_shared_owners));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
      return v91;
    }
    v89 = v5;
  }
  else
  {
    v89 = 0;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v90 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "#Error,fusion data association: init failed, null or hunc <= 0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    *(_WORD *)v171 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,fusion data association: init failed, null or hunc <= 0", v171, 2);
    v139 = (char *)v138;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v138);
    if (v139 != buf)
      free(v139);
  }
  v91 = 0;
  if (v89)
    goto LABEL_120;
  return v91;
}

void sub_100E18B54(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_100E18B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  double v11;
  double v12;
  float64x2_t v13;
  int8x16_t v14;
  NSObject *v15;
  _BOOL8 result;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  const char *v20;
  float64x2_t v21;
  int8x16_t v22;
  BOOL v23;
  uint64_t *v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v33;
  char v34;
  unint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  double v38;
  double v39;
  int8x16_t v40;
  NSObject *v41;
  uint64_t v42;
  int v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  NSObject *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v61;
  int v62;
  const char *v63;
  uint8_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint8_t *v71;
  uint64_t *v72;
  float64x2_t v73;
  double v74;
  double v75;
  _BOOL4 v77;
  char v78;
  unint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  double v82;
  int8x16_t v83;
  NSObject *v84;
  uint64_t v85;
  int v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  NSObject *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  void **p_p;
  double v100;
  double v101;
  double v102;
  long double v103;
  double v104;
  NSObject *v105;
  uint64_t v106;
  int v107;
  double v108;
  uint64_t v109;
  int v110;
  double v111;
  const char *v112;
  uint8_t *v113;
  NSObject *v114;
  uint64_t v115;
  int v116;
  double v117;
  uint64_t v118;
  int v119;
  double v120;
  const char *v121;
  NSObject *v122;
  uint64_t v123;
  int v124;
  double v125;
  uint64_t v126;
  int v127;
  const char *v128;
  uint8_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint8_t *v136;
  uint64_t v137;
  int v138;
  double v139;
  const char *v140;
  uint8_t *v141;
  uint64_t *v142;
  double v143;
  double v144;
  double v145;
  double v146;
  __int32 v147;
  NSObject *v148;
  int v149;
  double v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint8_t *v156;
  __int32 *v157;
  __int32 *v158;
  __int32 *v159;
  NSObject *v160;
  int v161;
  double v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  NSObject *v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  const char *v172;
  uint8_t *v173;
  NSObject *v174;
  const char *v175;
  uint8_t *v176;
  double v177;
  double v178;
  uint64_t v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  uint64_t v187;
  double v188;
  double v189;
  int8x16_t v190;
  double v191;
  double v192;
  double v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int8x16_t v197;
  int v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  __int128 v204;
  double v205;
  __int128 v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  int8x16_t v212;
  int8x16_t v213;
  void *__p;
  __int32 *v215;
  uint64_t v216;
  double v217;
  double v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  __int16 v222;
  int v223;
  __int16 v224;
  double v225;
  __int16 v226;
  double v227;
  __int16 v228;
  int v229;
  __int16 v230;
  uint64_t v231;
  __int16 v232;
  uint64_t v233;
  uint64_t (**v234)();
  _BYTE v235[32];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  unint64_t v240;
  int v241;
  char v242;
  int v243;
  uint8_t buf[4];
  _BYTE v245[14];
  __int16 v246;
  double v247;
  __int16 v248;
  double v249;
  __int16 v250;
  _BYTE v251[14];
  __int16 v252;
  uint64_t v253;

  v2 = *(_QWORD *)(a1 + 240);
  if (v2)
  {
    v5 = 1;
    v6 = *(_QWORD **)(a1 + 240);
    do
    {
      v6 = (_QWORD *)*v6;
      --v5;
    }
    while (v6);
    if (!v5)
    {
      *(_OWORD *)(v2 + 640) = xmmword_101BAFDC0;
      return 1;
    }
    v7 = (uint64_t *)(a2 + 16);
    v219 = *(_QWORD *)(a2 + 16);
    v217 = 0.0;
    v218 = 0.0;
    if ((sub_1000F3890((double *)(a1 + 1800), &v218, &v217, *(double *)(a2 + 24), *(double *)(a1 + 1704)) & 1) != 0)
    {
      v12 = v217;
      v11 = v218;
      v9.i64[0] = *(_QWORD *)(a2 + 24);
      v8.i64[0] = 0x400921FB54442D18;
      v213 = v8;
      if (fabs(*(double *)v9.i64) > 3.14159265)
      {
        v13.f64[0] = NAN;
        v13.f64[1] = NAN;
        v210 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v13), v8, v9).i64;
        *(double *)v9.i64 = fmod(*(double *)v9.i64 + v210, 6.28318531) - v210;
      }
      if (*(double *)v9.i64 >= 1.57079633)
      {
        v14 = v213;
        *(double *)v9.i64 = *(double *)v213.i64 - *(double *)v9.i64;
      }
      else
      {
        if (*(double *)v9.i64 < -1.57079633)
          *(double *)v9.i64 = -3.14159265 - *(double *)v9.i64;
        v14 = v213;
      }
      v10.i64[0] = *(_QWORD *)(a2 + 32);
      v209 = *(double *)v9.i64;
      if (fabs(*(double *)v10.i64) <= *(double *)v14.i64)
      {
        v212 = v10;
      }
      else
      {
        v21.f64[0] = NAN;
        v21.f64[1] = NAN;
        v211 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v21), v14, v10).i64;
        *(double *)v22.i64 = fmod(*(double *)v10.i64 + v211, 6.28318531) - v211;
        v212 = v22;
      }
      v23 = sub_100E20E9C(a1);
      v207 = v12 * 0.0174532925;
      v208 = v11 * 0.0174532925;
      if (*(_DWORD *)(a2 + 128) == 1)
      {
        *(double *)&__p = 0.0;
        v215 = 0;
        v216 = 0;
        v24 = *(uint64_t **)(a1 + 240);
        if (v24)
        {
          v25.f64[0] = NAN;
          v25.f64[1] = NAN;
          v190 = (int8x16_t)vnegq_f64(v25);
          v203 = *(double *)vbslq_s8(v190, v213, v212).i64;
          v198 = 0;
          v26 = fmod(*(double *)v212.i64 + v203, 6.28318531) - v203;
          if (fabs(*(double *)v212.i64) <= *(double *)v213.i64)
            v27 = *(double *)v212.i64;
          else
            v27 = v26;
          v186 = 0.0;
          v28 = 25000000.0;
          __asm { FMOV            V0.2D, #-1.0 }
          v204 = _Q0;
          v182 = -3.14159265;
          v184 = 1.0;
          do
          {
            if ((*((_DWORD *)v24 + 167) & 0xFFFFFFFB) != 0)
            {
              v234 = off_1021B4BA0;
              *(_OWORD *)v235 = v204;
              v236 = xmmword_101BAFC90;
              v237 = xmmword_101BAFC90;
              v238 = v204;
              v239 = v204;
              v240 = 0xBFF0000000000000;
              v241 = 0;
              v242 = 0;
              v243 = 0;
              v33 = sub_1007268C4((uint64_t)(v24 + 7), (double *)&v219);
              v34 = sub_100727EB0((uint64_t)(v24 + 7), (uint64_t)&v234);
              v35 = v24[6] + v24[5] - 1;
              *(double *)v36.i64 = sub_101259E10(*(_QWORD *)(v24[2] + 8 * (v35 / 0x17)) + 176 * (v35 % 0x17));
              if (v33 && (v34 & 1) != 0)
              {
                v38 = *(double *)v36.i64;
                v39 = *(double *)&v236;
                v37.i64[0] = *(_QWORD *)&v235[16];
                if (fabs(*(double *)&v235[16]) > *(double *)v213.i64)
                {
                  v193 = *(double *)vbslq_s8(v190, v213, v37).i64;
                  *(double *)v37.i64 = fmod(*(double *)&v235[16] + v193, 6.28318531) - v193;
                }
                if (*(double *)v37.i64 >= 1.57079633)
                {
                  v40 = v213;
                  *(double *)v37.i64 = *(double *)v213.i64 - *(double *)v37.i64;
                }
                else
                {
                  if (*(double *)v37.i64 < -1.57079633)
                    *(double *)v37.i64 = v182 - *(double *)v37.i64;
                  v40 = v213;
                }
                v36.i64[0] = *(_QWORD *)&v235[24];
                if (fabs(*(double *)&v235[24]) > *(double *)v40.i64)
                {
                  v188 = *(double *)vbslq_s8(v190, v40, v36).i64;
                  v194 = v37.i64[0];
                  *(double *)v36.i64 = fmod(*(double *)&v235[24] + v188, 6.28318531);
                  v40 = v213;
                  v37.i64[0] = v194;
                  *(double *)v36.i64 = *(double *)v36.i64 - v188;
                }
                if (vabdd_f64(*(double *)v212.i64, *(double *)v36.i64) <= *(double *)v40.i64)
                {
                  v48 = *(double *)v212.i64 - *(double *)v36.i64;
                }
                else
                {
                  if (fabs(*(double *)v36.i64) > *(double *)v40.i64)
                  {
                    v189 = *(double *)vbslq_s8(v190, v40, v36).i64;
                    v195 = v37.i64[0];
                    *(double *)v36.i64 = fmod(*(double *)v36.i64 + v189, 6.28318531);
                    v40.i64[0] = v213.i64[0];
                    v37.i64[0] = v195;
                    *(double *)v36.i64 = *(double *)v36.i64 - v189;
                  }
                  v44 = *(double *)v36.i64 - v27;
                  v45 = dbl_101C28CE0[*(double *)v36.i64 - v27 > *(double *)v40.i64];
                  v46 = vabdd_f64(*(double *)v36.i64, v27) <= *(double *)v40.i64;
                  v47 = -0.0;
                  if (!v46)
                    v47 = v45;
                  v48 = *(double *)v212.i64 - (*(double *)v212.i64 + v44 + v47);
                }
                if (qword_1022A01B0 != -1)
                {
                  v196 = v37.i64[0];
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v37.i64[0] = v196;
                }
                v49 = v38 * 50.0;
                v50 = v208 * (v209 - *(double *)v37.i64) * (v208 * (v209 - *(double *)v37.i64))
                    + v207 * v48 * (v207 * v48);
                v51 = sqrt(v50);
                v52 = qword_1022A01B8;
                if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                {
                  v53 = *(_QWORD *)(a2 + 16);
                  v54 = *((_DWORD *)v24 + 165);
                  v55 = *(_DWORD *)(a2 + 128);
                  v56 = v24[80];
                  v57 = v24[81];
                  *(_DWORD *)buf = 134219520;
                  *(_QWORD *)v245 = v53;
                  *(_WORD *)&v245[8] = 1024;
                  *(_DWORD *)&v245[10] = v54;
                  v246 = 2048;
                  v247 = v51;
                  v248 = 2048;
                  v249 = v49;
                  v250 = 1024;
                  *(_DWORD *)v251 = v55;
                  *(_WORD *)&v251[4] = 2048;
                  *(_QWORD *)&v251[6] = v56;
                  v252 = 2048;
                  v253 = v57;
                  _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#selection,gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,likelihood,%.9f,logLikelihood,%.5f", buf, 0x40u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v65 = *(_QWORD *)(a2 + 16);
                  v66 = *((_DWORD *)v24 + 165);
                  v67 = *(_DWORD *)(a2 + 128);
                  v68 = v24[80];
                  v69 = v24[81];
                  v220 = 134219520;
                  v221 = v65;
                  v222 = 1024;
                  v223 = v66;
                  v224 = 2048;
                  v225 = v51;
                  v226 = 2048;
                  v227 = v49;
                  v228 = 1024;
                  v229 = v67;
                  v230 = 2048;
                  v231 = v68;
                  v232 = 2048;
                  v233 = v69;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,likelihood,%.9f,logLikelihood,%.5f", COERCE_DOUBLE(&v220), 64, v178, v180, LODWORD(v182), v184, v186);
                  v71 = (uint8_t *)v70;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v70);
                  if (v71 != buf)
                    free(v71);
                }
                v58 = 5000.0;
                if (v49 >= 5000.0)
                  v58 = v49;
                if (v51 < v58)
                {
                  *(_DWORD *)buf = *((_DWORD *)v24 + 165);
                  sub_100E23000((uint64_t)&__p, (char *)__p, buf);
                  v59 = v39 * v39 * 0.5 + *(double *)(a2 + 40) * *(double *)(a2 + 40) * 0.5;
                  if (v50 < v59 * 9.0 && v50 < v28)
                  {
                    v198 = *((_DWORD *)v24 + 165);
                    v186 = exp(v50 * -0.5 / v59);
                    v184 = 1.0 - *((double *)v24 + 80) * v186;
                    v28 = v50;
                  }
                }
              }
              else
              {
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v41 = qword_1022A01B8;
                if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                {
                  v42 = *v7;
                  v43 = *((_DWORD *)v24 + 165);
                  *(_DWORD *)buf = 134218240;
                  *(_QWORD *)v245 = v42;
                  *(_WORD *)&v245[8] = 1024;
                  *(_DWORD *)&v245[10] = v43;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate", buf, 0x12u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v61 = *v7;
                  v62 = *((_DWORD *)v24 + 165);
                  v220 = 134218240;
                  v221 = v61;
                  v222 = 1024;
                  v223 = v62;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate", COERCE_DOUBLE(&v220), 18);
                  v64 = (uint8_t *)v63;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v63);
                  if (v64 != buf)
                    free(v64);
                }
                v23 = 0;
              }
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
          v142 = *(uint64_t **)(a1 + 240);
          v144 = v184;
          v143 = v186;
          if (v142)
          {
            v145 = log(v184);
            v146 = log(v184 + v186);
            do
            {
              if ((*((_DWORD *)v142 + 167) & 0xFFFFFFFB) != 0)
              {
                v147 = *((_DWORD *)v142 + 165);
                if (v147 == v198)
                {
                  *((double *)v142 + 81) = v146 + *((double *)v142 + 81);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v148 = qword_1022A01B8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                  {
                    v149 = *((_DWORD *)v142 + 165);
                    v150 = *(double *)(a2 + 40);
                    v151 = v142[81];
                    *(_DWORD *)buf = 67110144;
                    *(_DWORD *)v245 = v149;
                    *(_WORD *)&v245[4] = 2048;
                    *(double *)&v245[6] = v143;
                    v246 = 2048;
                    v247 = v144;
                    v248 = 2048;
                    v249 = v150;
                    v250 = 2048;
                    *(_QWORD *)v251 = v151;
                    _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update gaussian aposteriori,hID,%d,gaussianProb,%.9f,uniformProb,%.9f,rootS,%.5f,loglikelihood,%.5f", buf, 0x30u);
                  }
                  if (!sub_1001BFF7C(115, 2))
                    goto LABEL_205;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v152 = *((_DWORD *)v142 + 165);
                  v153 = *(_QWORD *)(a2 + 40);
                  v154 = v142[81];
                  LODWORD(v234) = 67110144;
                  HIDWORD(v234) = v152;
                  *(_WORD *)v235 = 2048;
                  *(double *)&v235[2] = v143;
                  *(_WORD *)&v235[10] = 2048;
                  *(double *)&v235[12] = v144;
                  *(_WORD *)&v235[20] = 2048;
                  *(_QWORD *)&v235[22] = v153;
                  *(_WORD *)&v235[30] = 2048;
                  *(_QWORD *)&v236 = v154;
                  LODWORD(v177) = 48;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update gaussian aposteriori,hID,%d,gaussianProb,%.9f,uniformProb,%.9f,rootS,%.5f,loglikelihood,%.5f", &v234, v177, v178, v180, v182);
                  v156 = (uint8_t *)v155;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v155);
                  goto LABEL_197;
                }
                v157 = v215;
                v158 = wmemchr((__int32 *)__p, v147, ((char *)v215 - (_BYTE *)__p) >> 2);
                if (v158)
                  v159 = v158;
                else
                  v159 = v157;
                if (v159 == v215)
                {
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v167 = qword_1022A01B8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                  {
                    v168 = *((_DWORD *)v142 + 165);
                    v169 = v142[81];
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)v245 = v168;
                    *(_WORD *)&v245[4] = 2048;
                    *(_QWORD *)&v245[6] = v169;
                    _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update hypothesis too far from fix,hID,%d outlier rejection for this fix,loglikelihood,%.5f", buf, 0x12u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v170 = *((_DWORD *)v142 + 165);
                    v171 = v142[81];
                    LODWORD(v234) = 67109376;
                    HIDWORD(v234) = v170;
                    *(_WORD *)v235 = 2048;
                    *(_QWORD *)&v235[2] = v171;
                    LODWORD(v177) = 18;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update hypothesis too far from fix,hID,%d outlier rejection for this fix,loglikelihood,%.5f", &v234, v177);
                    v173 = (uint8_t *)v172;
                    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v172);
                    v144 = v184;
                    v143 = v186;
                    if (v173 != buf)
                      free(v173);
                  }
                  sub_10094C0EC(a1 + 2248);
                  goto LABEL_205;
                }
                *((double *)v142 + 81) = v145 + *((double *)v142 + 81);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v160 = qword_1022A01B8;
                if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                {
                  v161 = *((_DWORD *)v142 + 165);
                  v162 = *(double *)(a2 + 40);
                  v163 = *((double *)v142 + 81);
                  *(_DWORD *)buf = 67109888;
                  *(_DWORD *)v245 = v161;
                  *(_WORD *)&v245[4] = 2048;
                  *(double *)&v245[6] = v144;
                  v246 = 2048;
                  v247 = v162;
                  v248 = 2048;
                  v249 = v163;
                  _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update gaussian aposteriori,hID,%d,uniformProb,%.9f,rootS,%.5f,loglikelihood,%.5f", buf, 0x26u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v164 = *(_QWORD *)(a2 + 40);
                  v165 = v142[81];
                  v234 = (uint64_t (**)())__PAIR64__(*((_DWORD *)v142 + 165), 67109888);
                  *(_WORD *)v235 = 2048;
                  v144 = v184;
                  *(double *)&v235[2] = v184;
                  *(_WORD *)&v235[10] = 2048;
                  *(_QWORD *)&v235[12] = v164;
                  *(_WORD *)&v235[20] = 2048;
                  *(_QWORD *)&v235[22] = v165;
                  LODWORD(v177) = 38;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update gaussian aposteriori,hID,%d,uniformProb,%.9f,rootS,%.5f,loglikelihood,%.5f", &v234, v177, v178, v180);
                  v156 = (uint8_t *)v166;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v166);
                  v143 = v186;
LABEL_197:
                  if (v156 != buf)
                    free(v156);
                }
              }
LABEL_205:
              v142 = (uint64_t *)*v142;
            }
            while (v142);
          }
          if (*(double *)&__p != 0.0)
          {
            v215 = (__int32 *)__p;
            operator delete(__p);
          }
        }
LABEL_213:
        if (!v23 || !sub_100E20E9C(a1))
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v174 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update failed. Resetting all likelihoods to be equal", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            LOWORD(v234) = 0;
            LODWORD(v177) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update failed. Resetting all likelihoods to be equal", &v234, *(_QWORD *)&v177);
            v176 = (uint8_t *)v175;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v175);
            if (v176 != buf)
              free(v176);
          }
          sub_100E231A0(a1);
          return 0;
        }
        return 1;
      }
      v72 = *(uint64_t **)(a1 + 240);
      if (!v72)
        goto LABEL_213;
      v73.f64[0] = NAN;
      v73.f64[1] = NAN;
      v197 = (int8x16_t)vnegq_f64(v73);
      v205 = *(double *)vbslq_s8(v197, v213, v212).i64;
      v179 = a1 + 2248;
      v74 = fmod(*(double *)v212.i64 + v205, 6.28318531) - v205;
      if (fabs(*(double *)v212.i64) <= *(double *)v213.i64)
        v75 = *(double *)v212.i64;
      else
        v75 = v74;
      __asm { FMOV            V0.2D, #-1.0 }
      v206 = _Q0;
      v185 = -1.57079633;
      v183 = -3.14159265;
      v187 = 134218496;
      v181 = 5000.0;
      while (1)
      {
        if ((*((_DWORD *)v72 + 167) & 0xFFFFFFFB) != 0)
        {
          v234 = off_1021B4BA0;
          *(_OWORD *)v235 = v206;
          v236 = xmmword_101BAFC90;
          v237 = xmmword_101BAFC90;
          v238 = v206;
          v239 = v206;
          v240 = 0xBFF0000000000000;
          v241 = 0;
          v242 = 0;
          v243 = 0;
          v77 = sub_1007268C4((uint64_t)(v72 + 7), (double *)&v219);
          v78 = sub_100727EB0((uint64_t)(v72 + 7), (uint64_t)&v234);
          v79 = v72[6] + v72[5] - 1;
          v82 = sub_101259E10(*(_QWORD *)(v72[2] + 8 * (v79 / 0x17)) + 176 * (v79 % 0x17)) * 50.0;
          *(double *)&__p = v82;
          if (!v77 || (v78 & 1) == 0)
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v84 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v85 = *v7;
              v86 = *((_DWORD *)v72 + 165);
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)v245 = v85;
              *(_WORD *)&v245[8] = 1024;
              *(_DWORD *)&v245[10] = v86;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v126 = *v7;
              v127 = *((_DWORD *)v72 + 165);
              v220 = 134218240;
              v221 = v126;
              v222 = 1024;
              v223 = v127;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate", COERCE_DOUBLE(&v220), 18);
              v129 = (uint8_t *)v128;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v128);
              if (v129 != buf)
                free(v129);
            }
            v23 = 0;
            goto LABEL_159;
          }
          v81.i64[0] = *(_QWORD *)&v235[16];
          if (fabs(*(double *)&v235[16]) > *(double *)v213.i64)
          {
            v199 = *(double *)vbslq_s8(v197, v213, v81).i64;
            *(double *)v81.i64 = fmod(*(double *)&v235[16] + v199, 6.28318531) - v199;
          }
          if (*(double *)v81.i64 >= 1.57079633)
          {
            v83 = v213;
            *(double *)v81.i64 = *(double *)v213.i64 - *(double *)v81.i64;
          }
          else
          {
            if (*(double *)v81.i64 < v185)
              *(double *)v81.i64 = v183 - *(double *)v81.i64;
            v83 = v213;
          }
          v80.i64[0] = *(_QWORD *)&v235[24];
          if (fabs(*(double *)&v235[24]) > *(double *)v83.i64)
          {
            v191 = *(double *)vbslq_s8(v197, v83, v80).i64;
            v200 = v81.i64[0];
            *(double *)v80.i64 = fmod(*(double *)&v235[24] + v191, 6.28318531);
            v83 = v213;
            v81.i64[0] = v200;
            *(double *)v80.i64 = *(double *)v80.i64 - v191;
          }
          if (vabdd_f64(*(double *)v212.i64, *(double *)v80.i64) <= *(double *)v83.i64)
          {
            v90 = *(double *)v212.i64 - *(double *)v80.i64;
          }
          else
          {
            if (fabs(*(double *)v80.i64) > *(double *)v83.i64)
            {
              v192 = *(double *)vbslq_s8(v197, v83, v80).i64;
              v201 = v81.i64[0];
              *(double *)v80.i64 = fmod(*(double *)v80.i64 + v192, 6.28318531);
              v83.i64[0] = v213.i64[0];
              v81.i64[0] = v201;
              *(double *)v80.i64 = *(double *)v80.i64 - v192;
            }
            v87 = *(double *)v80.i64 - v75;
            v88 = dbl_101C28CE0[*(double *)v80.i64 - v75 > *(double *)v83.i64];
            v46 = vabdd_f64(*(double *)v80.i64, v75) <= *(double *)v83.i64;
            v89 = -0.0;
            if (!v46)
              v89 = v88;
            v90 = *(double *)v212.i64 - (*(double *)v212.i64 + v87 + v89);
          }
          if (qword_1022A01B0 != -1)
          {
            v202 = v81.i64[0];
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v81.i64[0] = v202;
          }
          v91 = sqrt(v208 * (v209 - *(double *)v81.i64) * (v208 * (v209 - *(double *)v81.i64)) + v207
                                                                                               * v90
                                                                                               * (v207
                                                                                                * v90));
          v92 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v93 = *(_QWORD *)(a2 + 16);
            v94 = *((_DWORD *)v72 + 165);
            v95 = *(_DWORD *)(a2 + 128);
            v96 = v72[80];
            v97 = v72[81];
            *(_DWORD *)buf = 134219520;
            *(_QWORD *)v245 = v93;
            *(_WORD *)&v245[8] = 1024;
            *(_DWORD *)&v245[10] = v94;
            v246 = 2048;
            v247 = v91;
            v248 = 2048;
            v249 = v82;
            v250 = 1024;
            *(_DWORD *)v251 = v95;
            *(_WORD *)&v251[4] = 2048;
            *(_QWORD *)&v251[6] = v96;
            v252 = 2048;
            v253 = v97;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "#selection,non-gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,likelihood,%.9f,logLikelihood,%.5f", buf, 0x40u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v130 = *(_QWORD *)(a2 + 16);
            v131 = *((_DWORD *)v72 + 165);
            v132 = *(_DWORD *)(a2 + 128);
            v133 = v72[80];
            v134 = v72[81];
            v220 = 134219520;
            v221 = v130;
            v222 = 1024;
            v223 = v131;
            v224 = 2048;
            v225 = v91;
            v226 = 2048;
            v227 = v82;
            v228 = 1024;
            v229 = v132;
            v230 = 2048;
            v231 = v133;
            v232 = 2048;
            v233 = v134;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,non-gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,likelihood,%.9f,logLikelihood,%.5f", COERCE_DOUBLE(&v220), 64, *(double *)&v179, v181, LODWORD(v183), v185, *(double *)&v187);
            v136 = (uint8_t *)v135;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v135);
            if (v136 != buf)
              free(v136);
          }
          v98 = *(double *)(a2 + 40);
          if ((*(_DWORD *)(a2 + 128) - 6) >= 3
            && (sub_10125D9DC((uint64_t)(v72 + 1), (double *)(a2 + 16)),
                v82 = *(double *)&__p,
                (*((_DWORD *)v72 + 180) - 6) > 2))
          {
            p_p = &__p;
            if (*(double *)&__p < v181)
              p_p = (void **)&unk_101C28D60;
          }
          else
          {
            p_p = (void **)&unk_101C28D58;
            if (v82 >= 10000.0)
              p_p = &__p;
          }
          v100 = fabs(v91);
          if (v100 < v98)
          {
            v101 = *(double *)&v236;
            v102 = erf((v98 - v91) / *(double *)&v236);
            v103 = erf((-v98 - v91) / v101);
            v104 = log(v102 - v103);
            *((long double *)v72 + 81) = *((double *)v72 + 81) + v104 - log((v98 + v98) * v101);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v105 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v106 = *v7;
              v107 = *((_DWORD *)v72 + 165);
              v108 = *((double *)v72 + 81);
              *(_DWORD *)buf = v187;
              *(_QWORD *)v245 = v106;
              *(_WORD *)&v245[8] = 1024;
              *(_DWORD *)&v245[10] = v107;
              v246 = 2048;
              v247 = v108;
              _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update uniform aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f", buf, 0x1Cu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_159;
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v109 = *v7;
            v110 = *((_DWORD *)v72 + 165);
            v111 = *((double *)v72 + 81);
            v220 = v187;
            v221 = v109;
            v222 = 1024;
            v223 = v110;
            v224 = 2048;
            v225 = v111;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update uniform aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f", COERCE_DOUBLE(&v220), 28, *(double *)&v179);
            v113 = (uint8_t *)v112;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v112);
            goto LABEL_151;
          }
          if (v100 >= *(double *)p_p)
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v122 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v123 = *v7;
              v124 = *((_DWORD *)v72 + 165);
              v125 = *((double *)v72 + 81);
              *(_DWORD *)buf = v187;
              *(_QWORD *)v245 = v123;
              *(_WORD *)&v245[8] = 1024;
              *(_DWORD *)&v245[10] = v124;
              v246 = 2048;
              v247 = v125;
              _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update hypothesis too far from fix,time_mct,%.3f,hID,%d,outlier rejection for this fix,logLikelihood,%.5f", buf, 0x1Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v137 = *v7;
              v138 = *((_DWORD *)v72 + 165);
              v139 = *((double *)v72 + 81);
              v220 = v187;
              v221 = v137;
              v222 = 1024;
              v223 = v138;
              v224 = 2048;
              v225 = v139;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update hypothesis too far from fix,time_mct,%.3f,hID,%d,outlier rejection for this fix,logLikelihood,%.5f", COERCE_DOUBLE(&v220), 28, *(double *)&v179);
              v141 = (uint8_t *)v140;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v140);
              if (v141 != buf)
                free(v141);
            }
            sub_10094C0EC(v179);
            goto LABEL_159;
          }
          *((double *)v72 + 81) = *((double *)v72 + 81) + fmin(-log((v98 + v98) * *(double *)&v236), -8.0);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v114 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v115 = *v7;
            v116 = *((_DWORD *)v72 + 165);
            v117 = *((double *)v72 + 81);
            *(_DWORD *)buf = v187;
            *(_QWORD *)v245 = v115;
            *(_WORD *)&v245[8] = 1024;
            *(_DWORD *)&v245[10] = v116;
            v246 = 2048;
            v247 = v117;
            _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "#selection,Likelihood update uniform walkout aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v118 = *v7;
            v119 = *((_DWORD *)v72 + 165);
            v120 = *((double *)v72 + 81);
            v220 = v187;
            v221 = v118;
            v222 = 1024;
            v223 = v119;
            v224 = 2048;
            v225 = v120;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood update uniform walkout aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f", COERCE_DOUBLE(&v220), 28, *(double *)&v179);
            v113 = (uint8_t *)v121;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v121);
LABEL_151:
            if (v113 != buf)
              free(v113);
          }
        }
LABEL_159:
        v72 = (uint64_t *)*v72;
        if (!v72)
          goto LABEL_213;
      }
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,fusion likelihood update, calc_dNdE failed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v234) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,fusion likelihood update, calc_dNdE failed", &v234, 2);
      v18 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v20);
LABEL_30:
      if (v18 != buf)
        free(v18);
      return 0;
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#selection,No valid hypothesis available for likelihood update", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v234) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,No valid hypothesis available for likelihood update", &v234, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)", "%s\n", v17);
      goto LABEL_30;
    }
  }
  return result;
}

void sub_100E1A95C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1A97C(uint64_t a1)
{
  uint64_t *i;
  unint64_t v2;
  unint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 167))
    {
      v2 = i[6];
      if (v2 >= 2)
      {
        v3 = *((unsigned int *)i + 164);
        if ((v3 & 0x80000000) == 0 && v2 > v3 && !sub_10125B528((uint64_t)(i + 1)))
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v4 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_INFO))
          {
            v5 = *((_DWORD *)i + 165);
            *(_DWORD *)buf = 67240192;
            v13 = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#fusion,hID,%{public}d,hypothesis data fusion failed.", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v6 = *((_DWORD *)i + 165);
            v11[0] = 67240192;
            v11[1] = v6;
            LODWORD(v10) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 1, "#fusion,hID,%{public}d,hypothesis data fusion failed.", v11, v10);
            v8 = (uint8_t *)v7;
            sub_100512490("Generic", 1, 0, 2, "auto cllcf::CLLCFusion::performHypothesesDataFusion()::(anonymous class)::operator()(LCFusionLocationHypothesis &) const", "%s\n", v7);
            if (v8 != buf)
              free(v8);
          }
        }
      }
    }
  }
  return 1;
}

void sub_100E1AB90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E1AB9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *i;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  NSObject *v32;
  int v33;
  uint64_t *v34;
  int v35;
  double v36;
  double v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  NSObject *v55;
  NSObject *v56;
  int v57;
  unint64_t v58;
  int v59;
  int v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  double v65;
  NSObject *v66;
  int v67;
  int v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  int v72;
  int v73;
  const char *v74;
  const char *v75;
  char *v76;
  int v77;
  const char *v78;
  char *v79;
  NSObject *v80;
  uint64_t v81;
  int v83;
  const char *v84;
  char *v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  double *v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  int v99;
  _BYTE v100[54];
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  uint64_t v106;
  _BYTE buf[58];
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;

  v2 = *(_QWORD **)(a1 + 240);
  if (!v2)
    return 1;
  v5 = 1;
  do
  {
    v2 = (_QWORD *)*v2;
    --v5;
  }
  while (v2);
  if (v5)
  {
    if (sub_100E1231C(a1)
      || *(_DWORD *)(a2 + 128) == 1
      && *(_DWORD *)(a1 + 908)
      && (v18 = *(_QWORD *)(a1 + 288) + *(_QWORD *)(a1 + 280) - 1,
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * (v18 / 0x17)),
          v20 = v18 % 0x17,
          (*(_DWORD *)(v19 + 176 * v20 + 160) - 6) <= 2)
      && *(double *)(v19 + 176 * v20 + 72) > 50.0)
    {
      v6 = *(uint64_t **)(a1 + 240);
      if (v6)
      {
        v7 = 0;
        do
        {
          v8 = *((_DWORD *)v6 + 167);
          if (v8)
          {
            v9 = v6[6];
            if (v9)
            {
              if (v8 == 1)
              {
                if (*(_BYTE *)(*(_QWORD *)(v6[2] + 8 * ((v9 + v6[5] - 1) / 0x17uLL))
                              + 176 * ((v9 + v6[5] - 1) % 0x17uLL)
                              + 168))
                {
                  sub_10125D9DC((uint64_t)(v6 + 1), (double *)(a2 + 16));
                  if (*((_DWORD *)v6 + 180) == 1)
                    v7 = v6;
                }
              }
            }
          }
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        if (v7)
        {
          for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
          {
            if (*((_DWORD *)i + 165) != *((_DWORD *)v7 + 165))
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v11 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v12 = *((_DWORD *)i + 165);
                v13 = *((_DWORD *)v7 + 165);
                *(_DWORD *)buf = 67240448;
                *(_DWORD *)&buf[4] = v12;
                *(_WORD *)&buf[8] = 1026;
                *(_DWORD *)&buf[10] = v13;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#selection,Rejecting hypothesis,hID,%{public}d,in favor of,hID,%{public}d", buf, 0xEu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v14 = *((_DWORD *)i + 165);
                v15 = *((_DWORD *)v7 + 165);
                v99 = 67240448;
                *(_DWORD *)v100 = v14;
                *(_WORD *)&v100[4] = 1026;
                *(_DWORD *)&v100[6] = v15;
                LODWORD(v89) = 14;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Rejecting hypothesis,hID,%{public}d,in favor of,hID,%{public}d", &v99, v89);
                v17 = (char *)v16;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v16);
                if (v17 != buf)
                  free(v17);
              }
              *((_DWORD *)i + 167) = 4;
            }
          }
          return 1;
        }
      }
    }
  }
  if (!*(_DWORD *)(a1 + 908))
    return 1;
  v21 = *(_QWORD *)(a1 + 288);
  if (!v21)
    return 1;
  v22 = v21 + *(_QWORD *)(a1 + 280) - 1;
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * (v22 / 0x17));
  v24 = v22 % 0x17;
  if (!*(_BYTE *)(v23 + 176 * v24 + 168))
    return 1;
  v25 = (double *)(v23 + 176 * v24);
  v94 = v25[8];
  v95 = v25[7];
  v26 = v25[10];
  v92 = v25[9];
  v93 = v25[1];
  sub_10125D9DC(a1 + 248, (double *)(a2 + 16));
  if ((*(_DWORD *)(a1 + 960) - 6) > 2)
    goto LABEL_61;
  v27 = *(_DWORD *)(a2 + 128);
  if (v27 > 8 || ((1 << v27) & 0x1D0) == 0)
    goto LABEL_61;
  v28 = sub_10011E634((double *)(a1 + 1800), *(double *)(a2 + 24), *(double *)(a2 + 32), v95, v94, v26);
  v29 = (v92 * v92 + *(double *)(a2 + 40) * *(double *)(a2 + 40)) * 0.5;
  if (v29 >= 2500000000.0)
    v30 = (v92 * v92 + *(double *)(a2 + 40) * *(double *)(a2 + 40)) * 0.5;
  else
    v30 = 2500000000.0;
  v31 = v28 * v28 / v30;
  if (v31 > 36.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v32 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_DWORD *)(a1 + 900);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)&buf[8] = 2050;
      *(double *)&buf[10] = v31;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#selection,Rejecting last yielded/selected hypothesis,hID,%{public}d,in favor of new location/hypothesis,ratio,%{public}.1f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v83 = *(_DWORD *)(a1 + 900);
      v99 = 67240448;
      *(_DWORD *)v100 = v83;
      *(_WORD *)&v100[4] = 2050;
      *(double *)&v100[6] = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Rejecting last yielded/selected hypothesis,hID,%{public}d,in favor of new location/hypothesis,ratio,%{public}.1f", &v99, 18);
      v85 = (char *)v84;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v84);
      if (v85 != buf)
        free(v85);
    }
    v34 = *(uint64_t **)(a1 + 240);
    if (v34)
    {
      v35 = *(_DWORD *)(a1 + 900);
      do
      {
        if (*((_DWORD *)v34 + 165) == v35)
          *((_DWORD *)v34 + 167) = 4;
        v34 = (uint64_t *)*v34;
      }
      while (v34);
    }
    bzero(buf, 0x2D0uLL);
    sub_1008AF42C((uint64_t)buf);
    sub_100E0D2F8(a1 + 248, (uint64_t)buf);
    sub_100261F44((uint64_t)&v114);
    sub_1008AF650(buf);
    return 1;
  }
  if ((*(_DWORD *)(a2 + 128) - 6) < 3
    || ((v36 = v28 * v28 / fmax(v29, 1.0), v37 = *(double *)(a2 + 16) - v93, v36 > 1.0) ? (v38 = v37 > 30.0) : (v38 = 1),
        v38))
  {
LABEL_61:
    v39 = *(uint64_t **)(a1 + 240);
    if (!v39)
      return 1;
    v90 = (double *)(a1 + 184);
    v91 = v26;
    while (1)
    {
      if (*((_DWORD *)v39 + 167))
      {
        v40 = v39[6];
        if (v40)
        {
          v41 = v40 + v39[5] - 1;
          v42 = *(_QWORD *)(v39[2] + 8 * (v41 / 0x17));
          v43 = v41 % 0x17;
          if (*(_BYTE *)(v42 + 176 * v43 + 168))
          {
            v44 = (double *)(v42 + 176 * v43);
            v45 = v44[6];
            v46 = sub_10011E634((double *)(a1 + 1800), v44[7], v44[8], v95, v94, v26);
            v47 = v45 - v93;
            if (v45 - v93 >= -1.0 && v47 <= 900.0)
              break;
          }
        }
      }
LABEL_103:
      v39 = (uint64_t *)*v39;
      if (!v39)
        return 1;
    }
    v48 = fabs(v47);
    v49 = fmax(v48 - *(double *)(a1 + 2128), 0.0);
    v50 = v49 * 50.0;
    v51 = fmax(v92 + v49 * 50.0, 1.0);
    v52 = v46 / v51;
    if (v46 / v51 > 1.0)
      goto LABEL_70;
    if ((sub_1006B506C(a1 + 1840, &dbl_101C28D50) & 1) != 0)
      goto LABEL_70;
    v59 = *(_DWORD *)(a1 + 1912);
    if ((v59 - 1) >= 5 && v59 != 10)
      goto LABEL_70;
    if (v48 <= 6.0 || *(_BYTE *)(a1 + 2088) == 0)
    {
      v26 = v91;
      if (*(_BYTE *)(a1 + 2088))
        goto LABEL_72;
LABEL_97:
      v61 = *(_DWORD *)(a1 + 1912);
      if ((v61 - 3) < 8 || !v61)
      {
        if ((sub_1006B506C(a1 + 1840, &dbl_101C28D50) & 1) != 0
          || (*(_QWORD *)buf = 0xBFF0000000000000, sub_1006B4DE4((_QWORD *)(a1 + 1840), (double *)buf)))
        {
          v62 = v39[6] + v39[5] - 1;
          v53 = 1.0;
          if (sub_10125A1BC(*(_QWORD *)(v39[2] + 8 * (v62 / 0x17)) + 176 * (v62 % 0x17), v90) < 30.0)
            v53 = 3.0;
          goto LABEL_73;
        }
      }
LABEL_72:
      v53 = 1.0;
LABEL_73:
      v54 = v39[6] + v39[5] - 1;
      if (*(_BYTE *)(*(_QWORD *)(v39[2] + 8 * (v54 / 0x17)) + 176 * (v54 % 0x17) + 156))
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v55 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = 0x4008000000000000;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#selection Inflating gate for associated AP to %{public}.1f", buf, 0xCu);
        }
        v53 = 3.0;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v99 = 134349056;
          *(_QWORD *)v100 = 0x4008000000000000;
          LODWORD(v89) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection Inflating gate for associated AP to %{public}.1f", &v99, v89);
          v76 = (char *)v75;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v75);
          v26 = v91;
          if (v76 != buf)
            free(v76);
        }
      }
      if (v52 <= v53)
      {
        if (*((_DWORD *)v39 + 167) == 4)
          *((_DWORD *)v39 + 167) = 1;
        v58 = v39[6] + v39[5] - 1;
        if (sub_10125A1BC(*(_QWORD *)(v39[2] + 8 * (v58 / 0x17)) + 176 * (v58 % 0x17), v90) <= 30.0)
        {
          v63 = v39[6] + v39[5] - 1;
          *(_OWORD *)(*(_QWORD *)(v39[2] + 8 * (v63 / 0x17)) + 176 * (v63 % 0x17)) = *(_OWORD *)(a2 + 8);
        }
        else
        {
          *((_DWORD *)v39 + 167) = 0;
        }
      }
      else
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v56 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v57 = *((_DWORD *)v39 + 165);
          *(_DWORD *)buf = 67110912;
          *(_DWORD *)&buf[4] = v57;
          *(_WORD *)&buf[8] = 2050;
          *(double *)&buf[10] = v52;
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v53;
          *(_WORD *)&buf[28] = 2050;
          *(double *)&buf[30] = v48;
          *(_WORD *)&buf[38] = 2050;
          *(double *)&buf[40] = v49;
          *(_WORD *)&buf[48] = 2050;
          *(double *)&buf[50] = v50;
          v108 = 2050;
          v109 = v51;
          v110 = 2050;
          v111 = v46;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#selection,Rejecting inconsistence hypothesis,hID,%d,ndis,%{public}.3f,gating,%{public}.1f,dt,%{public}.3f,dtNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,%{public}.3f", buf, 0x4Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v77 = *((_DWORD *)v39 + 165);
          v99 = 67110912;
          *(_DWORD *)v100 = v77;
          *(_WORD *)&v100[4] = 2050;
          *(double *)&v100[6] = v52;
          *(_WORD *)&v100[14] = 2050;
          *(double *)&v100[16] = v53;
          *(_WORD *)&v100[24] = 2050;
          *(double *)&v100[26] = v48;
          *(_WORD *)&v100[34] = 2050;
          *(double *)&v100[36] = v49;
          *(_WORD *)&v100[44] = 2050;
          *(double *)&v100[46] = v50;
          v101 = 2050;
          v102 = v51;
          v103 = 2050;
          v104 = v46;
          LODWORD(v89) = 78;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Rejecting inconsistence hypothesis,hID,%d,ndis,%{public}.3f,gating,%{public}.1f,dt,%{public}.3f,dtNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,%{public}.3f", &v99, v89);
          v79 = (char *)v78;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v78);
          if (v79 != buf)
            free(v79);
          v26 = v91;
        }
        *((_DWORD *)v39 + 167) = 4;
      }
      goto LABEL_103;
    }
    sub_100E216B8(*(_QWORD *)(a1 + 1696), (uint64_t)&v96);
    if (v96 >= 0.0 && (v45 >= v96 ? (v64 = v45 - v96 <= 6.0) : (v64 = 1), v64)
      || (*(_QWORD *)buf = 0xBFF0000000000000, (sub_1006B4F00((_QWORD *)(a1 + 1840), (double *)buf) & 1) != 0))
    {
      v65 = v97;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v50 = fmax(v65 * 3.0, 25.0);
      v51 = fmax(v92 + v50, 1.0);
      v52 = v46 / v51;
      v66 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v67 = *((_DWORD *)v39 + 165);
        *(_DWORD *)buf = 67111168;
        *(_DWORD *)&buf[4] = v67;
        *(_WORD *)&buf[8] = 2050;
        *(double *)&buf[10] = v46 / v51;
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v48;
        *(_WORD *)&buf[28] = 2050;
        *(double *)&buf[30] = v49;
        *(_WORD *)&buf[38] = 2050;
        *(double *)&buf[40] = v50;
        *(_WORD *)&buf[48] = 2050;
        *(double *)&buf[50] = v51;
        v108 = 2050;
        v109 = v46;
        v110 = 2050;
        v111 = v97;
        v112 = 2050;
        v113 = v98;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#selection,IO-based distance moved xCheck,hID,%d,ndis,%{public}.3f,dt,%{public}.3f,dtNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", buf, 0x58u);
      }
      v26 = v91;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v68 = *((_DWORD *)v39 + 165);
        v99 = 67111168;
        *(_DWORD *)v100 = v68;
        *(_WORD *)&v100[4] = 2050;
        *(double *)&v100[6] = v46 / v51;
        *(_WORD *)&v100[14] = 2050;
        *(double *)&v100[16] = v48;
        *(_WORD *)&v100[24] = 2050;
        *(double *)&v100[26] = v49;
        *(_WORD *)&v100[34] = 2050;
        *(double *)&v100[36] = v50;
        *(_WORD *)&v100[44] = 2050;
        *(double *)&v100[46] = v51;
        v101 = 2050;
        v102 = v46;
        v103 = 2050;
        v104 = v97;
        v105 = 2050;
        v106 = v98;
        LODWORD(v89) = 88;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,IO-based distance moved xCheck,hID,%d,ndis,%{public}.3f,dt,%{public}.3f,dtNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", &v99, v89);
        v70 = (char *)v69;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v69);
LABEL_131:
        if (v70 != buf)
          free(v70);
LABEL_70:
        v26 = v91;
      }
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v26 = v91;
      v71 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v72 = *((_DWORD *)v39 + 165);
        *(_DWORD *)buf = 67241216;
        *(_DWORD *)&buf[4] = v72;
        *(_WORD *)&buf[8] = 2050;
        *(double *)&buf[10] = v45;
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v96;
        *(_WORD *)&buf[28] = 2050;
        *(double *)&buf[30] = v97;
        *(_WORD *)&buf[38] = 2050;
        *(_QWORD *)&buf[40] = v98;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "#selection,IO data usage timed out,hID,%{public}d,hypo_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v73 = *((_DWORD *)v39 + 165);
        v99 = 67241216;
        *(_DWORD *)v100 = v73;
        *(_WORD *)&v100[4] = 2050;
        *(double *)&v100[6] = v45;
        *(_WORD *)&v100[14] = 2050;
        *(double *)&v100[16] = v96;
        *(_WORD *)&v100[24] = 2050;
        *(double *)&v100[26] = v97;
        *(_WORD *)&v100[34] = 2050;
        *(_QWORD *)&v100[36] = v98;
        LODWORD(v89) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,IO data usage timed out,hID,%{public}d,hypo_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", &v99, v89);
        v70 = (char *)v74;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v74);
        goto LABEL_131;
      }
    }
    if (*(_BYTE *)(a1 + 2088))
      goto LABEL_72;
    goto LABEL_97;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v80 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v81 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)buf = 134350080;
    *(double *)&buf[4] = v36;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v37;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v28;
    *(_WORD *)&buf[32] = 2050;
    *(double *)&buf[34] = v92;
    *(_WORD *)&buf[42] = 2050;
    *(_QWORD *)&buf[44] = v81;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "#selection,bypass outlier detection,ratio,%{public}.1f,dt,%{public}.3f,EuclidDis,%{public}.1f,prevHunc,%{public}.1f,newHunc,%{public}.1f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v86 = *(_QWORD *)(a2 + 40);
    v99 = 134350080;
    *(double *)v100 = v36;
    *(_WORD *)&v100[8] = 2050;
    *(double *)&v100[10] = v37;
    *(_WORD *)&v100[18] = 2050;
    *(double *)&v100[20] = v28;
    *(_WORD *)&v100[28] = 2050;
    *(double *)&v100[30] = v92;
    *(_WORD *)&v100[38] = 2050;
    *(_QWORD *)&v100[40] = v86;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,bypass outlier detection,ratio,%{public}.1f,dt,%{public}.3f,EuclidDis,%{public}.1f,prevHunc,%{public}.1f,newHunc,%{public}.1f", &v99, 52);
    v88 = (char *)v87;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v87);
    if (v88 != buf)
      free(v88);
  }
  return 1;
}

void sub_100E1BDFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1BE14(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _BOOL4 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  const char *v21;
  char *v22;
  _QWORD *v23;
  _BYTE *v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  const char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[28];
  _BYTE buf[1624];

  v3 = (_QWORD *)(a1 + 240);
  v2 = *(_QWORD **)(a1 + 240);
  if (v2)
  {
    do
    {
      sub_10125A388(v2 + 1, (double *)(a1 + 184));
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v4 = (_QWORD *)*v3;
    *(_QWORD *)buf = 0;
    if (v4)
    {
      v5 = v3;
      do
      {
        v6 = sub_100E285B8((uint64_t)(v4 + 1));
        v7 = *(_QWORD **)v5;
        if (v6)
        {
          do
            v7 = (_QWORD *)*v7;
          while (v7 && sub_100E285B8((uint64_t)(v7 + 1)));
          if (buf != v5 && v5 != (_BYTE *)v7)
          {
            v8 = v5;
            do
            {
              v9 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8 != v7);
            if (v9 != (_QWORD *)v5)
            {
              *v9 = *(_QWORD *)buf;
              *(_QWORD *)buf = *(_QWORD *)v5;
              *(_QWORD *)v5 = v7;
            }
          }
          if (!v7)
            break;
        }
        v4 = (_QWORD *)*v7;
        v5 = v7;
      }
      while (*v7);
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
  }
  v50 = (uint64_t)v3;
  sub_1008AF7A8((_QWORD **)buf);
  v10 = *(uint64_t **)(a1 + 216);
  v11 = (uint64_t *)(a1 + 224);
  while (v11 != v10)
  {
    sub_10125A388(v10 + 5, (double *)(a1 + 184));
    if (v10[10])
    {
      v12 = (uint64_t *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v10[2];
          v14 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v15 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v16 = *((_DWORD *)v10 + 173);
        v17 = sub_10014D1E0(*((_DWORD *)v10 + 8));
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#fusion,purging,provider specific hypothesis with empty buffer is erased,hID,%{public}d,type,%{public}s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v18 = qword_1022A01B8;
        v19 = *((_DWORD *)v10 + 173);
        v20 = sub_10014D1E0(*((_DWORD *)v10 + 8));
        *(_DWORD *)v54 = 67240450;
        *(_DWORD *)&v54[4] = v19;
        *(_WORD *)&v54[8] = 2082;
        *(_QWORD *)&v54[10] = v20;
        LODWORD(v49) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "#fusion,purging,provider specific hypothesis with empty buffer is erased,hID,%{public}d,type,%{public}s", v54, v49);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesPurging()", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      v10 = sub_100E2877C((uint64_t **)(a1 + 216), v10);
    }
  }
  v53 = a1;
  *(_QWORD *)v54 = 0;
  *(_QWORD *)buf = a1;
  v23 = *(_QWORD **)(a1 + 240);
  if (v23)
  {
    v24 = (_BYTE *)v50;
    do
    {
      v25 = sub_100E205F8((uint64_t)buf, (uint64_t)(v23 + 1));
      v26 = *(_QWORD **)v24;
      if (v25)
      {
        do
          v26 = (_QWORD *)*v26;
        while (v26 && sub_100E205F8((uint64_t)buf, (uint64_t)(v26 + 1)));
        if (v54 != v24 && v24 != (_BYTE *)v26)
        {
          v27 = v24;
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27 != v26);
          if (v28 != (_QWORD *)v24)
          {
            *v28 = *(_QWORD *)v54;
            *(_QWORD *)v54 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v26;
          }
        }
        if (!v26)
          break;
      }
      v23 = (_QWORD *)*v26;
      v24 = v26;
    }
    while (*v26);
  }
  sub_1008AF7A8((_QWORD **)v54);
  v29 = *(uint64_t **)(a1 + 216);
  while (v11 != v29)
  {
    if ((sub_100E205F8((uint64_t)&v53, (uint64_t)(v29 + 5)) & 1) != 0)
    {
      v29 = sub_100E2877C((uint64_t **)(a1 + 216), v29);
    }
    else
    {
      v30 = (uint64_t *)v29[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (uint64_t *)v29[2];
          v14 = *v31 == (_QWORD)v29;
          v29 = v31;
        }
        while (!v14);
      }
      v29 = v31;
    }
  }
  v52 = a1;
  v32 = *(_QWORD **)(a1 + 240);
  if (v32)
  {
    v33 = 0;
    do
    {
      ++v33;
      v32 = (_QWORD *)*v32;
    }
    while (v32);
    if ((unint64_t)(v33 - 1) >= 0xC)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v34 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v33;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = 12;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#fusion,purging,maximum number of fused hypotheses reached,number,%{public}zu,max,%{public}zu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        *(_DWORD *)v54 = 134349312;
        *(_QWORD *)&v54[4] = v33;
        *(_WORD *)&v54[12] = 2050;
        *(_QWORD *)&v54[14] = 12;
        LODWORD(v49) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,maximum number of fused hypotheses reached,number,%{public}zu,max,%{public}zu", v54, v49);
        v48 = (char *)v47;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesPurging()", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
      v51 = v33 - 12;
      sub_100E20B0C(&v52, &v51, 0);
      if (v51 >= 1)
      {
        sub_100E20B0C(&v52, &v51, 4);
        if (v51 >= 1)
        {
          sub_100E20B0C(&v52, &v51, 3);
          if (v51 >= 1)
          {
            sub_100E20B0C(&v52, &v51, 1);
            if (v51 >= 1)
            {
              v35 = 13;
              v36 = v50;
              do
              {
                v36 = *(_QWORD *)v36;
                --v35;
              }
              while (v35 > 1);
              for (; v36; v36 = *(_QWORD *)v36)
              {
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v37 = qword_1022A01B8;
                if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                {
                  v38 = *(_QWORD *)(v36 + 48);
                  if (v38)
                    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 16)
                                                + 8 * ((v38 + *(_QWORD *)(v36 + 40) - 1) / 0x17uLL))
                                    + 176 * ((v38 + *(_QWORD *)(v36 + 40) - 1) % 0x17uLL)
                                    + 8);
                  else
                    v39 = 0;
                  v40 = *(_DWORD *)(v36 + 660);
                  *(_DWORD *)buf = 67240704;
                  *(_DWORD *)&buf[4] = v40;
                  *(_WORD *)&buf[8] = 2050;
                  *(_QWORD *)&buf[10] = v39;
                  *(_WORD *)&buf[18] = 2050;
                  *(_QWORD *)&buf[20] = v38;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#fusion,purging,active fused hypothesis deleted,hID,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu", buf, 0x1Cu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v41 = *(_DWORD *)(v36 + 660);
                  v42 = *(_QWORD *)(v36 + 48);
                  if (v42)
                    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 16)
                                                + 8 * ((v42 + *(_QWORD *)(v36 + 40) - 1) / 0x17uLL))
                                    + 176 * ((v42 + *(_QWORD *)(v36 + 40) - 1) % 0x17uLL)
                                    + 8);
                  else
                    v43 = 0;
                  *(_DWORD *)v54 = 67240704;
                  *(_DWORD *)&v54[4] = v41;
                  *(_WORD *)&v54[8] = 2050;
                  *(_QWORD *)&v54[10] = v43;
                  *(_WORD *)&v54[18] = 2050;
                  *(_QWORD *)&v54[20] = v42;
                  LODWORD(v49) = 28;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,active fused hypothesis deleted,hID,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu", v54, v49);
                  v45 = (char *)v44;
                  sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesPurging()", "%s\n", v44);
                  if (v45 != buf)
                    free(v45);
                }
              }
              sub_100E20E30(v50, 0, 0);
            }
          }
        }
      }
    }
  }
  return 1;
}

void sub_100E1C698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

uint64_t sub_100E1C6E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  uint64_t v24;
  double *v25;
  int8x16_t v26;
  double v27;
  double v28;
  double v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  NSObject *v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  double v38;
  NSObject *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  std::__shared_count v53;
  __int128 v54;
  std::__shared_count v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  std::__shared_count v62;
  __int128 v63;
  int *v64;
  uint64_t **v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  NSObject *v81;
  void **v82;
  void **v83;
  unint64_t v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  const char *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  const char *v100;
  uint8_t *v101;
  const char *v102;
  uint8_t *v103;
  NSObject *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  std::__shared_count v114;
  __int128 v115;
  std::__shared_count v116;
  __int128 v117;
  __int128 v118;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v120;
  __int128 v121;
  std::__shared_count v122;
  __int128 v123;
  int *v124;
  uint64_t **v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t *v136;
  unint64_t v137;
  unint64_t *p_shared_weak_owners;
  unint64_t v139;
  std::__shared_weak_count *v140;
  NSObject *v141;
  void **v142;
  void **v143;
  unint64_t v144;
  void **v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  const char *v155;
  uint8_t *v156;
  const char *v157;
  uint8_t *v158;
  uint8_t *v159;
  uint8_t *v160;
  _BOOL4 v161;
  uint8_t *v162;
  uint8_t *v163;
  uint8_t *v164;
  uint64_t v166;
  uint8_t *v167;
  int8x16_t v169;
  int8x16_t v170;
  uint64_t v171;
  double v172;
  int64x2_t *v173;
  int64x2_t *v174;
  int8x16_t v175;
  uint64_t **v176;
  double *v177;
  std::__shared_weak_count *v178;
  float64x2_t v179;
  _WORD v180[8];
  double v181;
  double v182;
  uint64_t (**v183)();
  float64x2_t v184;
  double v185;
  double v186;
  __int128 v187;
  __int128 v188;
  float64x2_t v189;
  float64x2_t v190;
  unint64_t v191;
  int v192;
  char v193;
  int v194;
  uint64_t (**v195)();
  float64x2_t v196;
  double v197;
  double v198;
  _QWORD v199[10];
  int v200;
  char v201;
  int v202;
  _BYTE v203[56];
  std::__shared_count v204;
  __int128 v205;
  __int128 v206;
  std::__shared_count v207;
  __int128 v208;
  _OWORD v209[2];
  __int16 v210;
  uint8_t buf[8];
  __int16 v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  __int16 v216;
  int v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  double v223;

  v1 = *(uint64_t **)(a1 + 240);
  if (!v1)
    return 1;
  v167 = (uint8_t *)(a1 + 240);
  v177 = (double *)(a1 + 1800);
  v176 = (uint64_t **)(a1 + 192);
  __asm { FMOV            V0.2D, #-1.0 }
  v179 = _Q0;
  _Q0.f64[0] = NAN;
  _Q0.f64[1] = NAN;
  v175 = (int8x16_t)vnegq_f64(_Q0);
LABEL_3:
  if (!*((_DWORD *)v1 + 167))
    goto LABEL_115;
  v7 = v1[6];
  if (!v7
    || !*(_BYTE *)(*(_QWORD *)(v1[2] + 8 * ((v7 + v1[5] - 1) / 0x17uLL)) + 176 * ((v7 + v1[5] - 1) % 0x17uLL) + 168))
  {
    goto LABEL_115;
  }
  v8 = (uint64_t *)*v1;
  if (*v1)
  {
    v174 = (int64x2_t *)(v1 + 1);
    while (1)
    {
      if (*((_DWORD *)v8 + 167))
      {
        v9 = v8[6];
        if (v9)
        {
          v10 = v9 + v8[5] - 1;
          v11 = *(_QWORD *)(v8[2] + 8 * (v10 / 0x17));
          v12 = v10 % 0x17;
          if (*(_BYTE *)(v11 + 176 * v12 + 168))
          {
            v13 = v1[6] + v1[5] - 1;
            if (fabs(sub_10125A1BC(*(_QWORD *)(v1[2] + 8 * (v13 / 0x17)) + 176 * (v13 % 0x17), (double *)(v11 + 176 * v12 + 8))) > 0.001)
            {
              v14 = v8[6] + v8[5] - 1;
              v15 = *(_QWORD *)(v8[2] + 8 * (v14 / 0x17)) + 176 * (v14 % 0x17);
              v17 = *(double *)(v15 + 8);
              v16 = (double *)(v15 + 8);
              v18 = v17;
              v19 = v1[6] + v1[5] - 1;
              v20 = ((unint64_t)v19 * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
              v21 = *(_QWORD *)(v1[2] + 8 * ((v20 + ((unint64_t)(v19 - v20) >> 1)) >> 4))
                  + 176 * (v19 - 23 * ((v20 + ((unint64_t)(v19 - v20) >> 1)) >> 4));
              v23 = *(double *)(v21 + 8);
              v22 = (double *)(v21 + 8);
              if (v18 <= v23)
              {
                v24 = (uint64_t)(v8 + 7);
                v16 = v22;
              }
              else
              {
                v24 = (uint64_t)(v1 + 7);
              }
              sub_1007268C4(v24, v16);
            }
            v196 = v179;
            *(_OWORD *)v199 = xmmword_101BAFC90;
            *(_OWORD *)&v199[2] = xmmword_101BAFC90;
            *(float64x2_t *)&v199[5] = v179;
            *(float64x2_t *)&v199[7] = v179;
            v195 = off_1021B4BA0;
            v199[9] = 0xBFF0000000000000;
            v200 = 0;
            v201 = 0;
            v202 = 0;
            if ((sub_100727EB0((uint64_t)(v1 + 7), (uint64_t)&v195) & 1) == 0)
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v104 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "#fusion, hypotheses merging, outer loop get filter estimate failed.", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                *(_WORD *)v203 = 0;
                LODWORD(v166) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion, hypotheses merging, outer loop get filter estimate failed.", v203, v166);
                v156 = (uint8_t *)v155;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v155);
                if (v156 != buf)
                  free(v156);
              }
LABEL_115:
              v1 = (uint64_t *)*v1;
              if (!v1)
                goto LABEL_171;
              goto LABEL_3;
            }
            v183 = off_1021B4BA0;
            v184 = v179;
            v187 = xmmword_101BAFC90;
            v188 = xmmword_101BAFC90;
            v189 = v179;
            v190 = v179;
            v191 = 0xBFF0000000000000;
            v192 = 0;
            v193 = 0;
            v194 = 0;
            if ((sub_100727EB0((uint64_t)(v8 + 7), (uint64_t)&v183) & 1) == 0)
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v33 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#fusion, hypotheses merging, inner loop get filter estimate failed.", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              *(_WORD *)v203 = 0;
              LODWORD(v166) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion, hypotheses merging, inner loop get filter estimate failed.", v203, v166);
              v36 = (uint8_t *)v95;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v95);
LABEL_99:
              if (v36 != buf)
                free(v36);
              goto LABEL_94;
            }
            v181 = 0.0;
            v182 = 0.0;
            v25 = (double *)&v187 + 1;
            if (*(double *)&v188 <= 0.0)
              v25 = (double *)&v199[1];
            if ((sub_1000F3890(v177, &v182, &v181, v185, *v25) & 1) == 0)
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v34 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Error,fusion hypotheses merging, calc_dNdE failed.", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              *(_WORD *)v203 = 0;
              LODWORD(v166) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,fusion hypotheses merging, calc_dNdE failed.", v203, v166);
              v36 = (uint8_t *)v35;
              sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v35);
              goto LABEL_99;
            }
            v27 = v185;
            *(double *)v26.i64 = v186 * 0.0174532925;
            v28 = v197;
            v29 = v198;
            v30.i64[1] = 0;
            v31.i64[1] = 0;
            if (fabs(v186 * 0.0174532925) <= 3.14159265)
            {
              v32 = (int8x16_t)0x400921FB54442D18uLL;
            }
            else
            {
              v170 = vbslq_s8(v175, (int8x16_t)0x400921FB54442D18uLL, v26);
              *(double *)v31.i64 = fmod(*(double *)v26.i64 + *(double *)v170.i64, 6.28318531);
              v32 = (int8x16_t)0x400921FB54442D18uLL;
              v30.i64[1] = v170.i64[1];
              *(double *)v26.i64 = *(double *)v31.i64 - *(double *)v170.i64;
            }
            *(double *)v31.i64 = v29 * 0.0174532925;
            if (fabs(v29 * 0.0174532925) > *(double *)v32.i64)
            {
              v169 = vbslq_s8(v175, v32, v31);
              v171 = v26.i64[0];
              *(double *)v31.i64 = fmod(*(double *)v31.i64 + *(double *)v169.i64, 6.28318531);
              v32 = (int8x16_t)0x400921FB54442D18uLL;
              v30.i64[1] = v169.i64[1];
              v26.i64[0] = v171;
              *(double *)v31.i64 = *(double *)v31.i64 - *(double *)v169.i64;
            }
            *(double *)v30.i64 = *(double *)v26.i64 - *(double *)v31.i64;
            if (vabdd_f64(*(double *)v26.i64, *(double *)v31.i64) > *(double *)v32.i64)
            {
              v172 = *(double *)vbslq_s8(v175, v32, v30).i64;
              *(double *)v30.i64 = fmod(*(double *)v30.i64 + v172, 6.28318531) - v172;
            }
            v37 = 1.0 / (*(double *)v199 * *(double *)v199 * 0.5 + *(double *)&v187 * *(double *)&v187 * 0.5);
            v38 = (v27 - v28) * 0.0174532925 * v182 * ((v27 - v28) * 0.0174532925 * v182) * v37
                + *(double *)v30.i64
                * 57.2957795
                * 0.0174532925
                * v181
                * (*(double *)v30.i64
                 * 57.2957795
                 * 0.0174532925
                 * v181)
                * v37;
            if (v38 <= 6.18007)
              break;
          }
        }
      }
LABEL_94:
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_115;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v39 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v40 = *((_DWORD *)v1 + 165);
      v41 = v1[80];
      v42 = *((_DWORD *)v8 + 165);
      v43 = v8[80];
      *(_DWORD *)buf = 67241728;
      *(_DWORD *)&buf[4] = v40;
      v212 = 2050;
      v213 = v199[0];
      v214 = 2050;
      v215 = v41;
      v216 = 1026;
      v217 = v42;
      v218 = 2050;
      v219 = v187;
      v220 = 2050;
      v221 = v43;
      v222 = 2050;
      v223 = v38;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "fused hypotheses are merged,hID,%{public}d,hunc,%{public}.1f,likelihood,%{public}.1f,hID,%{public}d,hunc,%{public}.1f,likelihood,%{public}.1f,squaredMD,%{public}.3f", buf, 0x40u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v96 = *((_DWORD *)v1 + 165);
      v97 = v1[80];
      v98 = *((_DWORD *)v8 + 165);
      v99 = v8[80];
      *(_DWORD *)v203 = 67241728;
      *(_DWORD *)&v203[4] = v96;
      *(_WORD *)&v203[8] = 2050;
      *(_QWORD *)&v203[10] = v199[0];
      *(_WORD *)&v203[18] = 2050;
      *(_QWORD *)&v203[20] = v97;
      *(_WORD *)&v203[28] = 1026;
      *(_DWORD *)&v203[30] = v98;
      *(_WORD *)&v203[34] = 2050;
      *(_QWORD *)&v203[36] = v187;
      *(_WORD *)&v203[44] = 2050;
      *(_QWORD *)&v203[46] = v99;
      *(_WORD *)&v203[54] = 2050;
      *(double *)&v204.__vftable = v38;
      LODWORD(v166) = 64;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "fused hypotheses are merged,hID,%{public}d,hunc,%{public}.1f,likelihood,%{public}.1f,hID,%{public}d,hunc,%{public}.1f,likelihood,%{public}.1f,squaredMD,%{public}.3f", v203, v166);
      v101 = (uint8_t *)v100;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v100);
      if (v101 != buf)
        free(v101);
    }
    v173 = (int64x2_t *)(v8 + 1);
    if (*(double *)v199 >= *(double *)&v187)
    {
      v105 = v1[6] + v1[5] - 1;
      v106 = *(_QWORD *)(v1[2] + 8 * (v105 / 0x17));
      v107 = v105 % 0x17;
      v108 = v106 + 176 * v107;
      *(_OWORD *)v203 = *(_OWORD *)v108;
      *(_QWORD *)&v203[16] = *(_QWORD *)(v108 + 16);
      v109 = *(_QWORD *)(v108 + 24);
      *(_QWORD *)&v203[24] = v109;
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 16);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      *(_QWORD *)&v203[32] = off_1021B4BA0;
      v112 = v106 + 176 * v107;
      v113 = *(_OWORD *)(v112 + 40);
      v114 = *(std::__shared_count *)(v112 + 56);
      v115 = *(_OWORD *)(v112 + 88);
      v205 = *(_OWORD *)(v112 + 72);
      v206 = v115;
      *(_OWORD *)&v203[40] = v113;
      v204 = v114;
      v116 = *(std::__shared_count *)(v112 + 104);
      v117 = *(_OWORD *)(v112 + 120);
      v118 = *(_OWORD *)(v112 + 136);
      *(_OWORD *)((char *)v209 + 12) = *(_OWORD *)(v112 + 148);
      v208 = v117;
      v209[0] = v118;
      v207 = v116;
      v210 = *(_WORD *)(v112 + 168);
      v178 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v178->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v178->__shared_owners_;
      v178->__shared_weak_owners_ = 0;
      v178->__vftable = (std::__shared_weak_count_vtbl *)off_10218A5E0;
      v178[1].__vftable = (std::__shared_weak_count_vtbl *)off_1021B4BA0;
      v120 = v178 + 1;
      v121 = v208;
      v178[4].std::__shared_count = v207;
      *(_OWORD *)&v178[4].__shared_weak_owners_ = v121;
      *(_OWORD *)&v178[5].__shared_owners_ = v209[0];
      *(_OWORD *)((char *)&v178[5].__shared_weak_owners_ + 4) = *(_OWORD *)((char *)v209 + 12);
      v122 = v204;
      *(_OWORD *)&v178[1].__shared_owners_ = *(_OWORD *)&v203[40];
      v178[2].std::__shared_count = v122;
      v123 = v206;
      *(_OWORD *)&v178[2].__shared_weak_owners_ = v205;
      *(_OWORD *)&v178[3].__shared_owners_ = v123;
      v124 = (int *)&v178[6].__shared_owners_;
      *(_QWORD *)buf = (char *)v178 + 152;
      if (sub_100E28228(v176, (int *)&v178[6].__shared_owners_, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5])
      {
        *(_QWORD *)buf = (char *)v178 + 152;
        v125 = sub_100E28228(v176, v124, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = (char *)v178 + 152;
        v126 = sub_100E28228(v176, v124, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
        *(_QWORD *)buf = (char *)v178 + 152;
        sub_100E28228(v176, v124, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v127 = v125 + 5;
        if (v126)
        {
          v128 = 0;
          v129 = 2;
          do
          {
            v130 = v129;
            ++v128;
            v126 = (uint64_t *)*v126;
            ++v129;
          }
          while (v126);
          do
          {
            v127 = (_QWORD *)*v127;
            --v130;
          }
          while (v130 > 1);
        }
        *(_QWORD *)buf = (char *)v178 + 152;
        sub_100E28228(v176, v124, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v131 = (_QWORD *)*v127;
        v132 = operator new(0x18uLL);
        *v132 = v131;
        v132[1] = v120;
        v132[2] = v178;
        do
          v133 = __ldxr(p_shared_owners);
        while (__stxr(v133 + 1, p_shared_owners));
        *v127 = v132;
      }
      else
      {
        *(_QWORD *)buf = (char *)v178 + 152;
        v134 = sub_100E28228(v176, v124, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v135 = v134[5];
        v136 = (uint64_t *)operator new(0x18uLL);
        *v136 = (uint64_t)v135;
        v136[1] = (uint64_t)v120;
        v136[2] = (uint64_t)v178;
        do
          v137 = __ldxr(p_shared_owners);
        while (__stxr(v137 + 1, p_shared_owners));
        v134[5] = v136;
      }
      p_shared_weak_owners = (unint64_t *)&v178->__shared_weak_owners_;
      do
        v139 = __ldxr(p_shared_weak_owners);
      while (__stxr(v139 + 1, p_shared_weak_owners));
      v140 = *(std::__shared_weak_count **)&v203[24];
      *(_QWORD *)&v203[16] = v178 + 1;
      *(_QWORD *)&v203[24] = v178;
      if (v140)
        std::__shared_weak_count::__release_weak(v140);
      LOBYTE(v210) = 0;
      sub_10125A4B0(v173, (uint64_t)v203);
      sub_10125B528((uint64_t)v173);
      sub_10125E050((uint64_t)v173, *((double *)v8 + 80) + *((double *)v1 + 80));
      sub_10125E050((uint64_t)v174, 0.00000001);
      if (!sub_100E20E9C(a1))
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v141 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_ERROR, "Normalize likelihood failed from hypothesis merging", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v180[0] = 0;
          LODWORD(v166) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "Normalize likelihood failed from hypothesis merging", v180, v166);
          v158 = (uint8_t *)v157;
          sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v157);
          if (v158 != buf)
            free(v158);
        }
      }
      v142 = (void **)v1[2];
      v143 = (void **)v1[3];
      if (v143 == v142)
      {
        v143 = (void **)v1[2];
      }
      else
      {
        v144 = v1[5];
        v145 = &v142[v144 / 0x17];
        v146 = (unint64_t)*v145;
        v147 = (unint64_t)*v145 + 176 * (v144 % 0x17);
        v148 = (unint64_t)v142[(v1[6] + v144) / 0x17] + 176 * ((v1[6] + v144) % 0x17);
        if (v147 != v148)
        {
          do
          {
            v149 = *(std::__shared_weak_count **)(v147 + 24);
            if (v149)
            {
              std::__shared_weak_count::__release_weak(v149);
              v146 = (unint64_t)*v145;
            }
            v147 += 176;
            if (v147 - v146 == 4048)
            {
              v150 = (unint64_t)v145[1];
              ++v145;
              v146 = v150;
              v147 = v150;
            }
          }
          while (v147 != v148);
          v142 = (void **)v1[2];
          v143 = (void **)v1[3];
        }
      }
      v1[6] = 0;
      v151 = (char *)v143 - (char *)v142;
      if ((unint64_t)((char *)v143 - (char *)v142) >= 0x11)
      {
        do
        {
          operator delete(*v142);
          v152 = v1[3];
          v142 = (void **)(v1[2] + 8);
          v1[2] = (uint64_t)v142;
          v151 = v152 - (_QWORD)v142;
        }
        while (v151 > 0x10);
      }
      if (v151 >> 3 == 1)
      {
        v153 = 11;
LABEL_157:
        v1[5] = v153;
      }
      else if (v151 >> 3 == 2)
      {
        v153 = 23;
        goto LABEL_157;
      }
      do
        v154 = __ldaxr(p_shared_owners);
      while (__stlxr(v154 - 1, p_shared_owners));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
      if (*(_QWORD *)&v203[24])
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v203[24]);
      goto LABEL_115;
    }
    v44 = v8[6] + v8[5] - 1;
    v45 = *(_QWORD *)(v8[2] + 8 * (v44 / 0x17));
    v46 = v44 % 0x17;
    v47 = v45 + 176 * v46;
    *(_OWORD *)v203 = *(_OWORD *)v47;
    *(_QWORD *)&v203[16] = *(_QWORD *)(v47 + 16);
    v48 = *(_QWORD *)(v47 + 24);
    *(_QWORD *)&v203[24] = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 16);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    *(_QWORD *)&v203[32] = off_1021B4BA0;
    v51 = v45 + 176 * v46;
    v52 = *(_OWORD *)(v51 + 40);
    v53 = *(std::__shared_count *)(v51 + 56);
    v54 = *(_OWORD *)(v51 + 88);
    v205 = *(_OWORD *)(v51 + 72);
    v206 = v54;
    *(_OWORD *)&v203[40] = v52;
    v204 = v53;
    v55 = *(std::__shared_count *)(v51 + 104);
    v56 = *(_OWORD *)(v51 + 120);
    v57 = *(_OWORD *)(v51 + 136);
    *(_OWORD *)((char *)v209 + 12) = *(_OWORD *)(v51 + 148);
    v208 = v56;
    v209[0] = v57;
    v207 = v55;
    v210 = *(_WORD *)(v51 + 168);
    v58 = (std::__shared_weak_count *)operator new(0xA0uLL);
    v58->__shared_owners_ = 0;
    v59 = (unint64_t *)&v58->__shared_owners_;
    v58->__shared_weak_owners_ = 0;
    v58->__vftable = (std::__shared_weak_count_vtbl *)off_10218A5E0;
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)off_1021B4BA0;
    v60 = v58 + 1;
    v61 = v208;
    v58[4].std::__shared_count = v207;
    *(_OWORD *)&v58[4].__shared_weak_owners_ = v61;
    *(_OWORD *)&v58[5].__shared_owners_ = v209[0];
    *(_OWORD *)((char *)&v58[5].__shared_weak_owners_ + 4) = *(_OWORD *)((char *)v209 + 12);
    v62 = v204;
    *(_OWORD *)&v58[1].__shared_owners_ = *(_OWORD *)&v203[40];
    v58[2].std::__shared_count = v62;
    v63 = v206;
    *(_OWORD *)&v58[2].__shared_weak_owners_ = v205;
    *(_OWORD *)&v58[3].__shared_owners_ = v63;
    v64 = (int *)&v58[6].__shared_owners_;
    *(_QWORD *)buf = (char *)v58 + 152;
    if (sub_100E28228(v176, (int *)&v58[6].__shared_owners_, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5])
    {
      *(_QWORD *)buf = (char *)v58 + 152;
      v65 = sub_100E28228(v176, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      *(_QWORD *)buf = (char *)v58 + 152;
      v66 = sub_100E28228(v176, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
      *(_QWORD *)buf = (char *)v58 + 152;
      sub_100E28228(v176, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v67 = v65 + 5;
      if (v66)
      {
        v68 = 0;
        v69 = 2;
        do
        {
          v70 = v69;
          ++v68;
          v66 = (uint64_t *)*v66;
          ++v69;
        }
        while (v66);
        do
        {
          v67 = (_QWORD *)*v67;
          --v70;
        }
        while (v70 > 1);
      }
      *(_QWORD *)buf = (char *)v58 + 152;
      sub_100E28228(v176, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v71 = (_QWORD *)*v67;
      v72 = operator new(0x18uLL);
      *v72 = v71;
      v72[1] = v60;
      v72[2] = v58;
      do
        v73 = __ldxr(v59);
      while (__stxr(v73 + 1, v59));
      *v67 = v72;
    }
    else
    {
      *(_QWORD *)buf = (char *)v58 + 152;
      v74 = sub_100E28228(v176, v64, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v75 = v74[5];
      v76 = (uint64_t *)operator new(0x18uLL);
      *v76 = (uint64_t)v75;
      v76[1] = (uint64_t)v60;
      v76[2] = (uint64_t)v58;
      do
        v77 = __ldxr(v59);
      while (__stxr(v77 + 1, v59));
      v74[5] = v76;
    }
    v78 = (unint64_t *)&v58->__shared_weak_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80 = *(std::__shared_weak_count **)&v203[24];
    *(_QWORD *)&v203[16] = v58 + 1;
    *(_QWORD *)&v203[24] = v58;
    if (v80)
      std::__shared_weak_count::__release_weak(v80);
    LOBYTE(v210) = 0;
    sub_10125A4B0(v174, (uint64_t)v203);
    sub_10125B528((uint64_t)v174);
    sub_10125E050((uint64_t)v174, *((double *)v8 + 80) + *((double *)v1 + 80));
    sub_10125E050((uint64_t)v173, 0.00000001);
    if (!sub_100E20E9C(a1))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v81 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "Normalize likelihood failed from hypothesis merging", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v180[0] = 0;
        LODWORD(v166) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "Normalize likelihood failed from hypothesis merging", v180, v166);
        v103 = (uint8_t *)v102;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v102);
        if (v103 != buf)
          free(v103);
      }
    }
    v82 = (void **)v8[2];
    v83 = (void **)v8[3];
    if (v83 == v82)
    {
      v83 = (void **)v8[2];
    }
    else
    {
      v84 = v8[5];
      v85 = &v82[v84 / 0x17];
      v86 = (unint64_t)*v85;
      v87 = (unint64_t)*v85 + 176 * (v84 % 0x17);
      v88 = (unint64_t)v82[(v8[6] + v84) / 0x17] + 176 * ((v8[6] + v84) % 0x17);
      if (v87 != v88)
      {
        do
        {
          v89 = *(std::__shared_weak_count **)(v87 + 24);
          if (v89)
          {
            std::__shared_weak_count::__release_weak(v89);
            v86 = (unint64_t)*v85;
          }
          v87 += 176;
          if (v87 - v86 == 4048)
          {
            v90 = (unint64_t)v85[1];
            ++v85;
            v86 = v90;
            v87 = v90;
          }
        }
        while (v87 != v88);
        v82 = (void **)v8[2];
        v83 = (void **)v8[3];
      }
    }
    v8[6] = 0;
    v91 = (char *)v83 - (char *)v82;
    if ((unint64_t)((char *)v83 - (char *)v82) >= 0x11)
    {
      do
      {
        operator delete(*v82);
        v92 = v8[3];
        v82 = (void **)(v8[2] + 8);
        v8[2] = (uint64_t)v82;
        v91 = v92 - (_QWORD)v82;
      }
      while (v91 > 0x10);
    }
    if (v91 >> 3 == 1)
    {
      v93 = 11;
    }
    else
    {
      if (v91 >> 3 != 2)
      {
        do
LABEL_89:
          v94 = __ldaxr(v59);
        while (__stlxr(v94 - 1, v59));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
        if (*(_QWORD *)&v203[24])
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v203[24]);
        goto LABEL_94;
      }
      v93 = 23;
    }
    v8[5] = v93;
    goto LABEL_89;
  }
LABEL_171:
  *(_QWORD *)buf = 0;
  v159 = v167;
  v160 = *(uint8_t **)v167;
  if (*(_QWORD *)v167)
  {
    do
    {
      v161 = sub_100E28820((uint64_t)(v160 + 8));
      v162 = *(uint8_t **)v159;
      if (v161)
      {
        do
          v162 = *(uint8_t **)v162;
        while (v162 && sub_100E28820((uint64_t)(v162 + 8)));
        if (buf != v159 && v159 != v162)
        {
          v163 = v159;
          do
          {
            v164 = v163;
            v163 = *(uint8_t **)v163;
          }
          while (v163 != v162);
          if (v164 != v159)
          {
            *(_QWORD *)v164 = *(_QWORD *)buf;
            *(_QWORD *)buf = *(_QWORD *)v159;
            *(_QWORD *)v159 = v162;
          }
        }
        if (!v162)
          break;
      }
      v160 = *(uint8_t **)v162;
      v159 = v162;
    }
    while (*(_QWORD *)v162);
  }
  sub_1008AF7A8((_QWORD **)buf);
  return 1;
}

void sub_100E1DD20(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E1DD54(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t result;
  int v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  double v22;
  unsigned int v23;
  int v24;
  double *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  _BOOL4 v42;
  int v43;
  uint64_t v45;
  double v46;
  _BOOL4 v47;
  NSObject *v48;
  double v49;
  int v50;
  NSObject *v51;
  double v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  NSObject *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  double v64;
  const char *v65;
  char *v66;
  NSObject *v67;
  int v68;
  double v69;
  double v70;
  double v71;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  NSObject *v82;
  double v83;
  uint64_t *v84;
  NSObject *v86;
  int v87;
  double v88;
  NSObject *v89;
  int v90;
  double v91;
  const char *v92;
  char *v93;
  const char *v94;
  char *v95;
  NSObject *v96;
  double v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t *i;
  __int128 v102;
  __int128 v103;
  NSObject *v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  double v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  const char *v113;
  char *v114;
  const char *v115;
  char *v116;
  const char *v117;
  char *v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  const char *v124;
  char *v125;
  double v126;
  const char *v127;
  char *v128;
  const char *v129;
  const char *v130;
  char *v131;
  double v132;
  const char *v133;
  char *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL4 v139;
  uint64_t *v140;
  __int128 v141;
  _WORD v142[8];
  _BYTE v143[24];
  _BYTE v144[108];
  _BYTE buf[24];
  _BYTE v146[24];
  _BYTE v147[10];
  uint64_t v148;
  _DWORD v149[393];

  v4 = *(uint64_t **)(a1 + 240);
  if (!v4)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v7 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Error,#selection,No valid hypothesis available for selection,passthrough the location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      *(_WORD *)v143 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,#selection,No valid hypothesis available for selection,passthrough the location", v143, 2);
      v116 = (char *)v115;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v115);
      if (v116 != buf)
        free(v116);
    }
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 1024) = v10;
    *(_OWORD *)(a1 + 976) = v8;
    *(_OWORD *)(a1 + 992) = v9;
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 1072) = v13;
    *(_OWORD *)(a1 + 1056) = v12;
    *(_OWORD *)(a1 + 1040) = v11;
    return 1;
  }
  v5 = 1;
  v6 = *(_QWORD **)(a1 + 240);
  do
  {
    v6 = (_QWORD *)*v6;
    --v5;
  }
  while (v6);
  if (!v5)
  {
    v14 = *((_DWORD *)v4 + 167);
    if (v14
      && (v15 = v4[6]) != 0
      && *(_BYTE *)(*(_QWORD *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL)) + 176 * ((v15 + v4[5] - 1) % 0x17uLL) + 168))
    {
      if (v14 == 4)
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v16 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#selection,only available hypothesis is a gross outlier, rejecting", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          *(_WORD *)v143 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,only available hypothesis is a gross outlier, rejecting", v143, 2);
          v131 = (char *)v130;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v130);
          if (v131 != buf)
            free(v131);
        }
        result = 0;
        v18 = 5;
        goto LABEL_185;
      }
      *(_QWORD *)v143 = off_1021B4BA0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v143[8] = _Q0;
      *(_OWORD *)&v144[16] = xmmword_101BAFC90;
      *(_OWORD *)&v144[32] = xmmword_101BAFC90;
      *(_OWORD *)&v144[56] = _Q0;
      *(_OWORD *)&v144[72] = _Q0;
      *(_QWORD *)&v144[88] = 0xBFF0000000000000;
      *(_DWORD *)&v144[96] = 0;
      v144[100] = 0;
      *(_DWORD *)&v144[104] = 0;
      if (sub_1007268C4((uint64_t)(v4 + 7), (double *)(a2 + 16))
        && (sub_100727EB0((uint64_t)(v4 + 7), (uint64_t)v143) & 1) != 0)
      {
        *(_DWORD *)&v144[104] = sub_10125D9DC((uint64_t)(v4 + 1), (double *)(a2 + 16));
        sub_100E21744(a1 + 248, (uint64_t)(v4 + 1));
        v102 = *(_OWORD *)&v144[64];
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)&v144[48];
        *(_OWORD *)(a1 + 1056) = v102;
        *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v144[80];
        *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v144[92];
        v103 = *(_OWORD *)v144;
        *(_OWORD *)(a1 + 976) = *(_OWORD *)&v143[8];
        *(_OWORD *)(a1 + 992) = v103;
        v80 = *(_OWORD *)&v144[16];
        v81 = *(_OWORD *)&v144[32];
        goto LABEL_187;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v104 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "#Error,#selection,Failed to retrieve estimate from the only available hypothesis", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_184;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v142[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,#selection,Failed to retrieve estimate from the only available hypothesis", v142, 2);
      v21 = (char *)v135;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v135);
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v19 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#selection,only available hypothesis is invalid fused hypothesis, rejecting", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_184;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      *(_WORD *)v143 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,only available hypothesis is invalid fused hypothesis, rejecting", v143, 2);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v20);
    }
    if (v21 != buf)
      free(v21);
    goto LABEL_184;
  }
  v139 = 1;
  if (!*(_BYTE *)(a1 + 2088))
  {
    v22 = *(double *)(a1 + 2096);
    if (v22 <= 0.0 || v22 + 6.0 <= *(double *)(a2 + 16))
      v139 = 0;
  }
  v23 = 0;
  v24 = 0;
  v140 = 0;
  v25 = (double *)(a2 + 16);
  do
  {
    v26 = v4[5] + v4[6];
    v27 = v4[2];
    v28 = v4[3];
    v29 = (_QWORD *)(v27 + 8 * (v26 / 0x17));
    if (v28 == v27)
      v30 = 0;
    else
      v30 = *v29 + 176 * (v26 % 0x17);
    while (1)
    {
      if (v28 == v27)
        v31 = 0;
      else
        v31 = *(_QWORD *)(v27 + 8 * (v4[5] / 0x17uLL)) + 176 * (v4[5] % 0x17uLL);
      if (v30 == v31)
        goto LABEL_60;
      if (v30 == *v29)
      {
        v33 = *(v29 - 1);
        if (!*(_BYTE *)(v33 + 4040))
          goto LABEL_60;
        v32 = v33 + 4048;
      }
      else
      {
        v32 = v30;
        if (!*(_BYTE *)(v30 - 8))
          goto LABEL_60;
      }
      if (sub_10125A1BC(v32 - 176, v25) > 31.0)
      {
LABEL_60:
        v36 = *((_DWORD *)v4 + 167);
        goto LABEL_61;
      }
      if (v30 == *v29)
        break;
      v34 = v30;
      if (*(_BYTE *)(v30 - 20))
        goto LABEL_55;
LABEL_59:
      v30 -= 176;
      v27 = v4[2];
      v28 = v4[3];
    }
    v35 = *(v29 - 1);
    if (!*(_BYTE *)(v35 + 4028))
      goto LABEL_58;
    v34 = v35 + 4048;
LABEL_55:
    if (*(_DWORD *)(v34 - 16) != 4 || (v36 = *((_DWORD *)v4 + 167), v36 == 4))
    {
      if (v30 != *v29)
        goto LABEL_59;
LABEL_58:
      v37 = *--v29;
      v30 = v37 + 4048;
      goto LABEL_59;
    }
    ++v24;
    v140 = v4;
LABEL_61:
    if ((v36 & 0xFFFFFFFB) != 0)
      ++v23;
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v24 < 1)
  {
    v137 = 0;
    v38 = 0;
    v47 = 0;
    v46 = -1.0;
    v45 = 0;
    v41 = a2;
    v50 = v139;
  }
  else
  {
    v38 = sub_1006B4F00((_QWORD *)(a1 + 1840), &dbl_101C28D50);
    v39 = *(_QWORD *)(a1 + 1696);
    v40 = *(double *)(v39 + 384);
    v41 = a2;
    v42 = v139;
    if (v40 >= 0.0)
    {
      v43 = *(_QWORD *)(v39 + 392) - 1 < 2 ? 1 : v38;
      if (*v25 < v40 || *v25 - v40 <= 6.0)
        v38 = v43;
    }
    sub_100E216B8(v39, (uint64_t)buf);
    v46 = *(double *)buf;
    v45 = *(_QWORD *)&buf[8];
    v137 = *(_QWORD *)v146;
    v47 = *(double *)&buf[8] <= 25.0;
    if (*(double *)buf < 0.0 || *v25 >= *(double *)buf && *v25 - *(double *)buf > 6.0)
    {
      *(_QWORD *)buf = 0xBFF0000000000000;
      if ((sub_1006B506C(a1 + 1840, (double *)buf) & 1) == 0 && !sub_1006B5410(a1 + 1840))
      {
        *(_QWORD *)v143 = 0xBFF0000000000000;
        if ((sub_1006B4F00((_QWORD *)(a1 + 1840), (double *)v143) & 1) == 0)
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v48 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v49 = *v25;
            *(_DWORD *)buf = 134349824;
            *(double *)&buf[4] = v49;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v46;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)v146 = v45;
            *(_WORD *)&v146[8] = 2050;
            *(_QWORD *)&v146[10] = v137;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "#selection,IO data usage timed out,location_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_10218A448);
            v132 = *v25;
            *(_DWORD *)v143 = 134349824;
            *(double *)&v143[4] = v132;
            *(_WORD *)&v143[12] = 2050;
            *(double *)&v143[14] = v46;
            *(_WORD *)&v143[22] = 2050;
            *(_QWORD *)v144 = v45;
            *(_WORD *)&v144[8] = 2050;
            *(_QWORD *)&v144[10] = v137;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,IO data usage timed out,location_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", v143, 42);
            v134 = (char *)v133;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v133);
            if (v134 != buf)
              free(v134);
            v47 = 0;
            v41 = a2;
          }
          else
          {
            v47 = 0;
          }
          v42 = v139;
        }
      }
    }
    v50 = v38 | (v47 || v42);
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v51 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v52 = *v25;
    v53 = *(unsigned __int8 *)(a1 + 2075);
    v54 = *(unsigned __int8 *)(a1 + 2076);
    v55 = *(unsigned __int8 *)(a1 + 2088);
    v56 = *(_QWORD *)(a1 + 2096);
    *(_DWORD *)buf = 134351360;
    *(double *)&buf[4] = v52;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v53;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v54;
    *(_WORD *)v146 = 1026;
    *(_DWORD *)&v146[2] = v55;
    *(_WORD *)&v146[6] = 1026;
    *(_DWORD *)&v146[8] = v50;
    *(_WORD *)&v146[12] = 1026;
    *(_DWORD *)&v146[14] = v24;
    *(_WORD *)&v146[18] = 1026;
    *(_DWORD *)&v146[20] = v23;
    *(_WORD *)v147 = 2050;
    *(_QWORD *)&v147[2] = v56;
    LOWORD(v148) = 1026;
    *(_DWORD *)((char *)&v148 + 2) = v38;
    HIWORD(v148) = 1026;
    v149[0] = v47;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#selection,newLocation_mct,%{public}.3f,isInsideVisit,%{public}d,isLikelyOutOfAVisit,%{public}d,isWiFiAssociated,%{public}d,%{public}d,numHypoWithAPWiFi,%{public}d,NumNonOutlierHypo,%{public}d,LastWifiAssociatedTime,%{public}.3f,static,%{public}d,radialDistanceMovedWithinThreshold,%{public}d", buf, 0x46u);
  }
  v57 = v50;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v108 = *v25;
    v109 = *(unsigned __int8 *)(a1 + 2075);
    v110 = *(unsigned __int8 *)(a1 + 2076);
    v111 = *(unsigned __int8 *)(a1 + 2088);
    v112 = *(_QWORD *)(a1 + 2096);
    *(_DWORD *)v143 = 134351360;
    *(double *)&v143[4] = v108;
    *(_WORD *)&v143[12] = 1026;
    *(_DWORD *)&v143[14] = v109;
    *(_WORD *)&v143[18] = 1026;
    *(_DWORD *)&v143[20] = v110;
    *(_WORD *)v144 = 1026;
    *(_DWORD *)&v144[2] = v111;
    *(_WORD *)&v144[6] = 1026;
    *(_DWORD *)&v144[8] = v50;
    *(_WORD *)&v144[12] = 1026;
    *(_DWORD *)&v144[14] = v24;
    *(_WORD *)&v144[18] = 1026;
    *(_DWORD *)&v144[20] = v23;
    *(_WORD *)&v144[24] = 2050;
    *(_QWORD *)&v144[26] = v112;
    *(_WORD *)&v144[34] = 1026;
    *(_DWORD *)&v144[36] = v38;
    *(_WORD *)&v144[40] = 1026;
    *(_DWORD *)&v144[42] = v47;
    LODWORD(v136) = 70;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#selection,newLocation_mct,%{public}.3f,isInsideVisit,%{public}d,isLikelyOutOfAVisit,%{public}d,isWiFiAssociated,%{public}d,%{public}d,numHypoWithAPWiFi,%{public}d,NumNonOutlierHypo,%{public}d,LastWifiAssociatedTime,%{public}.3f,static,%{public}d,radialDistanceMovedWithinThreshold,%{public}d", v143, v136);
    v114 = (char *)v113;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v113);
    if (v114 != buf)
      free(v114);
    v57 = v50;
  }
  v58 = v57 ^ 1;
  if (v24 != 1)
    v58 = 1;
  if ((v58 & 1) == 0 && v140 && *((_DWORD *)v140 + 167) != 4)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v67 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v68 = *((_DWORD *)v140 + 165);
      v69 = sub_1005EEB24();
      v70 = sub_1005EEB24();
      v71 = *(double *)(a1 + 2096);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&buf[4] = v68;
      *(_WORD *)&buf[8] = 2050;
      *(double *)&buf[10] = v69;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v38;
      *(_WORD *)v146 = 1026;
      *(_DWORD *)&v146[2] = v47;
      *(_WORD *)&v146[6] = 1026;
      *(_DWORD *)&v146[8] = 1;
      *(_WORD *)&v146[12] = 2050;
      *(double *)&v146[14] = v70 - v71;
      *(_WORD *)&v146[22] = 2050;
      *(double *)v147 = v46 - v71;
      *(_WORD *)&v147[8] = 2050;
      v148 = v45;
      LOWORD(v149[0]) = 2050;
      *(_QWORD *)((char *)v149 + 2) = v137;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#selection,APWiFi,hID,%{public}d,now_mct,%{public}.3f,Static,%{public}d,IODistanceBelowThreshold,%{public}d,isWiFiAssociated,%{public}d,how_long,%{public}.3f,IOAgeWrtAPWiFi_s,%{public}.2f,IODistanceMoved_m,%{public}.1f,IODistanceMovedInterval_s,%{public}.1f", buf, 0x4Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v119 = qword_1022A01B8;
      v120 = *((_DWORD *)v140 + 165);
      v121 = sub_1005EEB24();
      v122 = sub_1005EEB24();
      v123 = *(double *)(a1 + 2096);
      *(_DWORD *)v143 = 67242240;
      *(_DWORD *)&v143[4] = v120;
      *(_WORD *)&v143[8] = 2050;
      *(double *)&v143[10] = v121;
      *(_WORD *)&v143[18] = 1026;
      *(_DWORD *)&v143[20] = v38;
      *(_WORD *)v144 = 1026;
      *(_DWORD *)&v144[2] = v47;
      *(_WORD *)&v144[6] = 1026;
      *(_DWORD *)&v144[8] = 1;
      *(_WORD *)&v144[12] = 2050;
      *(double *)&v144[14] = v122 - v123;
      *(_WORD *)&v144[22] = 2050;
      *(double *)&v144[24] = v46 - v123;
      *(_WORD *)&v144[32] = 2050;
      *(_QWORD *)&v144[34] = v45;
      *(_WORD *)&v144[42] = 2050;
      *(_QWORD *)&v144[44] = v137;
      LODWORD(v136) = 76;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v119, 2, "#selection,APWiFi,hID,%{public}d,now_mct,%{public}.3f,Static,%{public}d,IODistanceBelowThreshold,%{public}d,isWiFiAssociated,%{public}d,how_long,%{public}.3f,IOAgeWrtAPWiFi_s,%{public}.2f,IODistanceMoved_m,%{public}.1f,IODistanceMovedInterval_s,%{public}.1f", v143, v136);
      v125 = (char *)v124;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v124);
      if (v125 != buf)
        free(v125);
      v41 = a2;
    }
    if ((v38 | v47) == 1)
    {
      *(_QWORD *)v143 = off_1021B4BA0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v143[8] = _Q0;
      *(_OWORD *)&v144[16] = xmmword_101BAFC90;
      *(_OWORD *)&v144[32] = xmmword_101BAFC90;
      *(_OWORD *)&v144[56] = _Q0;
      *(_OWORD *)&v144[72] = _Q0;
      *(_QWORD *)&v144[88] = 0xBFF0000000000000;
      *(_DWORD *)&v144[96] = 0;
      v144[100] = 0;
      *(_DWORD *)&v144[104] = 0;
      *(_DWORD *)&v144[104] = sub_10125D9DC((uint64_t)(v140 + 1), v25);
      if (sub_1007268C4((uint64_t)(v140 + 7), v25) && sub_100727EB0((uint64_t)(v140 + 7), (uint64_t)v143))
      {
        v77 = v140[6] + v140[5] - 1;
        *(_OWORD *)(*(_QWORD *)(v140[2] + 8 * (v77 / 0x17)) + 176 * (v77 % 0x17)) = *(_OWORD *)(v41 + 8);
        sub_100E21744(a1 + 248, (uint64_t)(v140 + 1));
        v78 = *(_OWORD *)&v144[64];
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)&v144[48];
        *(_OWORD *)(a1 + 1056) = v78;
        *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v144[80];
        *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v144[92];
        v79 = *(_OWORD *)v144;
        *(_OWORD *)(a1 + 976) = *(_OWORD *)&v143[8];
        *(_OWORD *)(a1 + 992) = v79;
        v80 = *(_OWORD *)&v144[16];
        v81 = *(_OWORD *)&v144[32];
        goto LABEL_187;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v96 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "#selection,Failed to retrieve estimate from APWiFiFix hypothesis", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_162:
        v57 = v50;
        if (v23)
          goto LABEL_131;
LABEL_163:
        v97 = -1.0;
        if (*(_DWORD *)(a1 + 908))
        {
          v98 = *(_QWORD *)(a1 + 288);
          if (v98)
            v97 = sub_10125A1BC(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * ((v98 + *(_QWORD *)(a1 + 280) - 1) / 0x17uLL))+ 176 * ((v98 + *(_QWORD *)(a1 + 280) - 1) % 0x17uLL), v25);
        }
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v99 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v97;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "#selection,all hypotheses are marked as outliers,age of previously selected hypothesis,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          *(_DWORD *)v143 = 134349056;
          *(double *)&v143[4] = v97;
          LODWORD(v136) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#selection,all hypotheses are marked as outliers,age of previously selected hypothesis,%{public}.3f", v143, v136);
          v118 = (char *)v117;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v117);
          v41 = a2;
          if (v118 != buf)
            free(v118);
        }
        if (v97 > 600.0)
        {
          for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
            *((_DWORD *)i + 167) = 1;
LABEL_174:
          if ((sub_100E2180C(a1, v41) & 1) != 0)
            return 1;
        }
LABEL_184:
        result = 0;
        v18 = 9;
LABEL_185:
        *(_DWORD *)(a1 + 1104) = v18;
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v142[0] = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Failed to retrieve estimate from APWiFiFix hypothesis", v142, v136);
      v128 = (char *)v129;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v129);
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v82 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v83 = *v25;
        *(_DWORD *)buf = 134349824;
        *(double *)&buf[4] = v83;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = 0;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = 0;
        *(_WORD *)v146 = 2050;
        *(_QWORD *)&v146[2] = v45;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "#selection,mct,%{public}.3f,Selection based on APWiFiFix hypothesis is skipped,Static,%{public}d,LargeDisplacement,%{public}d,Displacement_m,%{public}.3f", buf, 0x22u);
      }
      v57 = v50;
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_130;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v126 = *v25;
      *(_DWORD *)v143 = 134349824;
      *(double *)&v143[4] = v126;
      *(_WORD *)&v143[12] = 1026;
      *(_DWORD *)&v143[14] = 0;
      *(_WORD *)&v143[18] = 1026;
      *(_DWORD *)&v143[20] = 0;
      *(_WORD *)v144 = 2050;
      *(_QWORD *)&v144[2] = v45;
      LODWORD(v136) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,mct,%{public}.3f,Selection based on APWiFiFix hypothesis is skipped,Static,%{public}d,LargeDisplacement,%{public}d,Displacement_m,%{public}.3f", v143, v136);
      v128 = (char *)v127;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v127);
    }
    if (v128 != buf)
      free(v128);
    v41 = a2;
    goto LABEL_162;
  }
  if (v24 > 0)
    v59 = 1;
  else
    v59 = v57;
  if (v23 >= 2 && v59)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v60 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v61 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v62 = sub_100B30608(v61, buf);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v62;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v50;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v24;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#selection,now_mct,%{public}.3f,APWiFiFix override skipped in favor of hypotheses mixture,Associated,%{public}d,NumHypoWithAPWiFi,%{public}d", buf, 0x18u);
    }
    v57 = v50;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v63 = qword_1022A01B8;
      v64 = sub_1005EEB24();
      v41 = a2;
      *(_DWORD *)v143 = 134349568;
      *(double *)&v143[4] = v64;
      *(_WORD *)&v143[12] = 1026;
      *(_DWORD *)&v143[14] = v50;
      *(_WORD *)&v143[18] = 1026;
      *(_DWORD *)&v143[20] = v24;
      LODWORD(v136) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, 2, "#selection,now_mct,%{public}.3f,APWiFiFix override skipped in favor of hypotheses mixture,Associated,%{public}d,NumHypoWithAPWiFi,%{public}d", v143, v136);
      v66 = (char *)v65;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v65);
      if (v66 != buf)
        free(v66);
      goto LABEL_162;
    }
  }
LABEL_130:
  if (!v23)
    goto LABEL_163;
LABEL_131:
  if (v23 != 1)
    goto LABEL_174;
  v84 = *(uint64_t **)(a1 + 240);
  if (!v84)
    goto LABEL_174;
  __asm { FMOV            V0.2D, #-1.0 }
  v141 = _Q0;
  while ((*((_DWORD *)v84 + 167) & 0xFFFFFFFB) == 0)
  {
LABEL_147:
    v84 = (uint64_t *)*v84;
    if (!v84)
      goto LABEL_174;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v86 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v87 = *((_DWORD *)v84 + 165);
    v88 = *v25;
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v87;
    *(_WORD *)&buf[8] = 2050;
    *(double *)&buf[10] = v88;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v57;
    _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#selection,yield the only non-outlier hypothesis,hID,%{public}d,location_mct,%{public}.3f,isWiFiAssociated,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v90 = *((_DWORD *)v84 + 165);
    v91 = *v25;
    *(_DWORD *)v143 = 67240704;
    *(_DWORD *)&v143[4] = v90;
    *(_WORD *)&v143[8] = 2050;
    *(double *)&v143[10] = v91;
    *(_WORD *)&v143[18] = 1026;
    *(_DWORD *)&v143[20] = v57;
    LODWORD(v136) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,yield the only non-outlier hypothesis,hID,%{public}d,location_mct,%{public}.3f,isWiFiAssociated,%{public}d", v143, v136);
    v93 = (char *)v92;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v92);
    if (v93 != buf)
      free(v93);
  }
  *(_QWORD *)v143 = off_1021B4BA0;
  *(_OWORD *)&v143[8] = v141;
  *(_OWORD *)&v144[16] = xmmword_101BAFC90;
  *(_OWORD *)&v144[32] = xmmword_101BAFC90;
  *(_OWORD *)&v144[56] = v141;
  *(_OWORD *)&v144[72] = v141;
  *(_QWORD *)&v144[88] = 0xBFF0000000000000;
  *(_DWORD *)&v144[96] = 0;
  v144[100] = 0;
  *(_DWORD *)&v144[104] = 0;
  *(_DWORD *)&v144[104] = sub_10125D9DC((uint64_t)(v84 + 1), v25);
  if (!sub_1007268C4((uint64_t)(v84 + 7), v25) || !sub_100727EB0((uint64_t)(v84 + 7), (uint64_t)v143))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v89 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "#selection,Failed to retrieve estimate from the single non-outlier hypothesis", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v142[0] = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Failed to retrieve estimate from the single non-outlier hypothesis", v142, v136);
      v95 = (char *)v94;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
    goto LABEL_147;
  }
  v105 = v84[6] + v84[5] - 1;
  *(_OWORD *)(*(_QWORD *)(v84[2] + 8 * (v105 / 0x17)) + 176 * (v105 % 0x17)) = *(_OWORD *)(v41 + 8);
  sub_100E21744(a1 + 248, (uint64_t)(v84 + 1));
  v106 = *(_OWORD *)&v144[64];
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)&v144[48];
  *(_OWORD *)(a1 + 1056) = v106;
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v144[80];
  *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v144[92];
  v107 = *(_OWORD *)v144;
  *(_OWORD *)(a1 + 976) = *(_OWORD *)&v143[8];
  *(_OWORD *)(a1 + 992) = v107;
  v80 = *(_OWORD *)&v144[16];
  v81 = *(_OWORD *)&v144[32];
LABEL_187:
  result = 1;
  *(_OWORD *)(a1 + 1008) = v80;
  *(_OWORD *)(a1 + 1024) = v81;
  return result;
}

void sub_100E1F8B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_100E1F8C8(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  _WORD v19[8];
  uint8_t buf[1640];

  if ((*(_DWORD *)(a1 + 2152) - 3) >= 2)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v10 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,get fused location failed, Fusion is not in the running state", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,get fused location failed, Fusion is not in the running state", v19, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const", "%s\n", v11);
LABEL_39:
    if (v12 != buf)
      free(v12);
    return 0;
  }
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  if (!*(_DWORD *)(a1 + 1096))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v13 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Error,getFusedLocation,fused location type is Unknown", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,getFusedLocation,fused location type is Unknown", v19, 2);
    v12 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const", "%s\n", v14);
    goto LABEL_39;
  }
  if (*(double *)(a1 + 1008) <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Error,getFusedLocation,get fused location: failed, hunc <= 0", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,getFusedLocation,get fused location: failed, hunc <= 0", v19, 2);
    v12 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const", "%s\n", v16);
    goto LABEL_39;
  }
  if (sub_100E10FC8(a1, a1 + 968, a2))
  {
    *(_DWORD *)a2 = *(_DWORD *)a1;
    *(_QWORD *)(a2 + 124) = *(_QWORD *)(a1 + 124);
    *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 100);
    *(_QWORD *)(a2 + 116) = *(_QWORD *)(a1 + 116);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
    *(_BYTE *)(a2 + 152) = *(_BYTE *)(a1 + 152);
    result = 1;
    *(_DWORD *)(a2 + 132) = 1;
    return result;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v17 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#fusion,getFusedLocation,failed to convert to daemon location", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getFusedLocation,failed to convert to daemon location", v19, 2);
    v12 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const", "%s\n", v18);
    goto LABEL_39;
  }
  return result;
}

void sub_100E1FE80(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E1FE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v9;
  _BOOL4 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  const char *v25;
  __int128 v26;
  _WORD v27[8];
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  int v35;
  char v36;
  int v37;
  double v38;
  uint8_t buf[1640];

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q1;
  *(_OWORD *)(a2 + 52) = _Q1;
  *(_OWORD *)(a2 + 68) = _Q1;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  if (!*(_DWORD *)(a1 + 908))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v14 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#fusion,invalid latest selected hypothesis in getting the latest predicted fused state", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v28) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,invalid latest selected hypothesis in getting the latest predicted fused state", &v28, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)", "%s\n", v15);
    goto LABEL_52;
  }
  v26 = _Q1;
  v9 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v38 = sub_100B30608(v9, buf);
  v28 = off_1021B4BA0;
  v29 = v26;
  v30 = xmmword_101BAFC90;
  v31 = xmmword_101BAFC90;
  v32 = v26;
  v33 = v26;
  v34 = 0xBFF0000000000000;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v10 = sub_1007268C4(a1 + 296, &v38);
  v11 = sub_100727EB0(a1 + 296, (uint64_t)&v28);
  if (!v10 || (v11 & 1) == 0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v17 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#fusion,Failed to retrieve predicted estimate from the latest selected hypothesis.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v27[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,Failed to retrieve predicted estimate from the latest selected hypothesis.", v27, 2);
    v16 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)", "%s\n", v18);
    goto LABEL_52;
  }
  v12 = sub_10125D9DC(a1 + 248, &v38);
  v37 = v12;
  if (!(_DWORD)v12)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#fusion,,getLatestPredictedFusedLocation,fused location type is Unknown", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v27[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,,getLatestPredictedFusedLocation,fused location type is Unknown", v27, 2);
    v16 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)", "%s\n", v20);
    goto LABEL_52;
  }
  if (*(double *)&v30 <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v21 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#fusion,getLatestPredictedFusedLocation failed, hunc <= 0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v27[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getLatestPredictedFusedLocation failed, hunc <= 0", v27, 2);
    v16 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)", "%s\n", v22);
    goto LABEL_52;
  }
  if (!sub_100E10FC8(v12, (uint64_t)&v28, a2))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v23 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#fusion,getLatestPredictedFusedLocation,failed to convert to daemon location", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v27[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,getLatestPredictedFusedLocation,failed to convert to daemon location", v27, 2);
    v16 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)", "%s\n", v25);
LABEL_52:
    if (v16 != buf)
      free(v16);
    return 0;
  }
  v13 = 1;
  *(_DWORD *)(a2 + 132) = 1;
  sub_1013F8ADC((uint64_t)&v28, (uint64_t)"#fusion,getLatestPredictedFusedLocation,output", 0);
  return v13;
}

void sub_100E205EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E205F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;

  v3 = *(_QWORD *)(a2 + 40);
  if (!v3)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v13 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a2 + 652);
      *(_DWORD *)buf = 67240192;
      v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#fusion,purging,hypothesis with empty buffer is erased,hID,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v15 = *(_DWORD *)(a2 + 652);
    LODWORD(v27) = 67240192;
    HIDWORD(v27) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,hypothesis with empty buffer is erased,hID,%{public}d", &v27, 8, v27, v28, v29, *(_OWORD *)v30, *(_OWORD *)&v30[16]);
    goto LABEL_31;
  }
  v4 = sub_10125A1BC(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * ((v3 + *(_QWORD *)(a2 + 32) - 1) / 0x17uLL))+ 176 * ((v3 + *(_QWORD *)(a2 + 32) - 1) % 0x17uLL), (double *)(*(_QWORD *)a1 + 184));
  if (*(_DWORD *)(a2 + 660) == 1 && v4 > 15.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v5 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a2 + 652);
      v7 = *(_DWORD *)(a2 + 660);
      v8 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)buf = 67241216;
      v32 = v6;
      v33 = 1026;
      v34 = v7;
      v35 = 2050;
      v36 = v8;
      v37 = 2050;
      v38 = v4;
      v39 = 2050;
      v40 = 0x402E000000000000;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#fusion,purging,stale tentative hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{public}.2f,maxAge,%{public}.2f", buf, 0x2Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v9 = *(_DWORD *)(a2 + 652);
    v10 = *(_DWORD *)(a2 + 660);
    v11 = *(_QWORD *)(a2 + 40);
    LODWORD(v27) = 67241216;
    HIDWORD(v27) = v9;
    LOWORD(v28) = 1026;
    *(_DWORD *)((char *)&v28 + 2) = v10;
    HIWORD(v28) = 2050;
    *(_WORD *)v30 = 2050;
    *(double *)&v30[2] = v4;
    *(_WORD *)&v30[10] = 2050;
    *(_QWORD *)&v30[12] = 0x402E000000000000;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,stale tentative hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{public}.2f,maxAge,%{public}.2f", &v27, 44, v27, v28, v11, *(_OWORD *)v30, *(_OWORD *)&v30[16]);
LABEL_31:
    v26 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(const LCFusionLocationHypothesis &) const", "%s\n", v12);
    if (v26 != buf)
      free(v26);
    return 1;
  }
  if (v4 > 30.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v16 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_DWORD *)(a2 + 652);
      v18 = *(_DWORD *)(a2 + 660);
      v19 = *(_QWORD *)(a2 + 40);
      v20 = *(_DWORD *)(a2 + 656);
      *(_DWORD *)buf = 67241472;
      v32 = v17;
      v33 = 1026;
      v34 = v18;
      v35 = 2050;
      v36 = v19;
      v37 = 2050;
      v38 = v4;
      v39 = 2050;
      v40 = 0x403E000000000000;
      v41 = 1026;
      v42 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#fusion,purging,stale hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{public}.2f,maxAge,%{public}.2f,numLostDataAssociation,%{public}u", buf, 0x32u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v22 = *(_DWORD *)(a2 + 652);
    v23 = *(_DWORD *)(a2 + 660);
    v24 = *(_QWORD *)(a2 + 40);
    v25 = *(_DWORD *)(a2 + 656);
    LODWORD(v27) = 67241472;
    HIDWORD(v27) = v22;
    LOWORD(v28) = 1026;
    *(_DWORD *)((char *)&v28 + 2) = v23;
    HIWORD(v28) = 2050;
    *(_WORD *)v30 = 2050;
    *(double *)&v30[2] = v4;
    *(_WORD *)&v30[10] = 2050;
    *(_QWORD *)&v30[12] = 0x403E000000000000;
    *(_WORD *)&v30[20] = 1026;
    *(_DWORD *)&v30[22] = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,stale hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{public}.2f,maxAge,%{public}.2f,numLostDataAssociation,%{public}u", &v27, 50, v27, v28, v24, *(_OWORD *)v30, *(_OWORD *)&v30[16]);
    goto LABEL_31;
  }
  return 0;
}

_QWORD *sub_100E20B0C(_QWORD *result, int *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  BOOL v6;
  _QWORD **v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _DWORD v23[2];
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  v4 = (_QWORD *)(*result + 240);
  v3 = (_QWORD *)*v4;
  v5 = *a2;
  if (*v4)
    v6 = v5 < 1;
  else
    v6 = 1;
  if (!v6)
  {
    v9 = (_QWORD **)(*result + 240);
    do
    {
      if (*((_DWORD *)v3 + 167) == a3)
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v10 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v11 = v3[6];
          if (v11)
            v12 = *(_QWORD *)(*(_QWORD *)(v3[2] + 8 * ((v11 + v3[5] - 1) / 0x17uLL))
                            + 176 * ((v11 + v3[5] - 1) % 0x17uLL)
                            + 8);
          else
            v12 = 0;
          v13 = *((_DWORD *)v3 + 165);
          v14 = *((_DWORD *)v3 + 167);
          *(_DWORD *)buf = 67240960;
          v31 = v13;
          v32 = 1026;
          v33 = v14;
          v34 = 2050;
          v35 = v12;
          v36 = 2050;
          v37 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#fusion,purging, fused hypothesis deleted,hID,%{public}d,type,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          v16 = *((_DWORD *)v3 + 165);
          v17 = *((_DWORD *)v3 + 167);
          v18 = v3[6];
          if (v18)
            v19 = *(_QWORD *)(*(_QWORD *)(v3[2] + 8 * ((v18 + v3[5] - 1) / 0x17uLL))
                            + 176 * ((v18 + v3[5] - 1) % 0x17uLL)
                            + 8);
          else
            v19 = 0;
          v23[0] = 67240960;
          v23[1] = v16;
          v24 = 1026;
          v25 = v17;
          v26 = 2050;
          v27 = v19;
          v28 = 2050;
          v29 = v18;
          LODWORD(v22) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging, fused hypothesis deleted,hID,%{public}d,type,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu", v23, v22);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(int &, HypothesisState) const", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        result = (_QWORD *)sub_100E26D40((uint64_t)v4, v9);
        v5 = *a2 - 1;
        *a2 = v5;
      }
      else
      {
        result = (_QWORD *)*v3;
        v9 = (_QWORD **)v3;
      }
      if (result)
        v15 = v5 <= 0;
      else
        v15 = 1;
      v3 = result;
    }
    while (!v15);
  }
  return result;
}

_QWORD *sub_100E20E30(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2 != a3)
  {
    v4 = *a2;
    if (*a2 != a3)
    {
      *a2 = a3;
      do
      {
        v5 = (_QWORD *)*v4;
        sub_100261F44((uint64_t)(v4 + 74));
        sub_1008AF650(v4 + 1);
        operator delete(v4);
        v4 = v5;
      }
      while (v5 != a3);
    }
  }
  return a3;
}

BOOL sub_100E20E9C(uint64_t a1)
{
  double *v1;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  double v6;
  uint64_t *v7;
  int v8;
  BOOL v9;
  BOOL v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  uint64_t **v15;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t *v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint8_t *v28;
  long double v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  double v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49[2];
  unsigned int v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[8];
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;

  v1 = *(double **)(a1 + 240);
  if (v1)
  {
    v3 = 1;
    v4 = *(_QWORD **)(a1 + 240);
    do
    {
      v4 = (_QWORD *)*v4;
      --v3;
    }
    while (v4);
    if (v3)
    {
      v5 = 0;
      v6 = v1[81];
      v7 = *(uint64_t **)(a1 + 240);
      do
      {
        v8 = *((_DWORD *)v7 + 167);
        v9 = (v8 & 0xFFFFFFFB) == 0;
        v10 = (v8 & 0xFFFFFFFB) != 0;
        if (!v9)
          ++v5;
        if (v10 && v6 < *((double *)v7 + 81))
          v6 = *((double *)v7 + 81);
        v7 = (uint64_t *)*v7;
      }
      while (v7);
      v11 = -18.4206807 - log((double)v5);
      v49[0] = 0;
      v49[1] = 0;
      v48 = (uint64_t *)v49;
      v12 = 0.0;
      v13 = v1;
      do
      {
        if ((*((_DWORD *)v13 + 167) & 0xFFFFFFFB) != 0)
        {
          v50 = *((_DWORD *)v13 + 165);
          v14 = v13[81] - v6;
          *(_QWORD *)buf = &v50;
          if (v14 >= v11)
          {
            v15 = sub_10021083C(&v48, &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            *((long double *)v15 + 5) = exp(v14);
          }
          else
          {
            sub_10021083C(&v48, &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = 0;
          }
          *(_QWORD *)buf = &v50;
          v12 = v12 + *((double *)sub_10021083C(&v48, &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
        }
        v13 = *(double **)v13;
      }
      while (v13);
      if (v12 != 0.0 && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v22 = *(uint64_t **)(a1 + 240);
        if (v22)
        {
          v47 = 67109632;
          do
          {
            if ((*((_DWORD *)v22 + 167) & 0xFFFFFFFB) != 0)
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v23 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v24 = *((_DWORD *)v22 + 165);
                v25 = v22[80];
                v26 = v22[81];
                *(_DWORD *)buf = v47;
                *(_DWORD *)&buf[4] = v24;
                v57 = 2048;
                v58 = v25;
                v59 = 2048;
                v60 = v26;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#selection,Likelihood normalize apriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v34 = *((_DWORD *)v22 + 165);
                v35 = v22[80];
                v36 = v22[81];
                v50 = v47;
                v51 = v34;
                v52 = 2048;
                v53 = v35;
                v54 = 2048;
                v55 = v36;
                LODWORD(v46) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood normalize apriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f", &v50, v46, *(double *)&v47);
                v38 = (uint8_t *)v37;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v37);
                if (v38 != buf)
                  free(v38);
              }
              v50 = *((_DWORD *)v22 + 165);
              *(_QWORD *)buf = &v50;
              v27 = *((double *)sub_10021083C(&v48, &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) / v12;
              v28 = (uint8_t *)(v22 + 80);
              *((double *)v22 + 80) = v27;
              *(_QWORD *)buf = 0x3FF0000000000000;
              if (v27 > 1.0)
                v28 = buf;
              if (v27 < 0.00000001)
                v28 = (uint8_t *)&unk_101C28D68;
              v29 = *(double *)v28;
              v22[80] = *(_QWORD *)v28;
              *((long double *)v22 + 81) = log(v29);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_10218A448);
              v30 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v31 = *((_DWORD *)v22 + 165);
                v32 = v22[80];
                v33 = v22[81];
                *(_DWORD *)buf = v47;
                *(_DWORD *)&buf[4] = v31;
                v57 = 2048;
                v58 = v32;
                v59 = 2048;
                v60 = v33;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#selection,Likelihood normalize aposteriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_10218A448);
                v39 = *((_DWORD *)v22 + 165);
                v40 = v22[80];
                v41 = v22[81];
                v50 = v47;
                v51 = v39;
                v52 = 2048;
                v53 = v40;
                v54 = 2048;
                v55 = v41;
                LODWORD(v46) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood normalize aposteriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f", &v50, v46, *(double *)&v47);
                v43 = (uint8_t *)v42;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v42);
                if (v43 != buf)
                  free(v43);
              }
            }
            v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
      }
      else
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v17 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#selection,Error in normalization method, invalid sum", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10218A448);
          LOWORD(v50) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Error in normalization method, invalid sum", &v50, 2);
          v45 = (uint8_t *)v44;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
        sub_100E231A0(a1);
      }
      sub_100008848((uint64_t)&v48, v49[0]);
    }
    else
    {
      *((_OWORD *)v1 + 40) = xmmword_101BAFDC0;
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v18 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#selection,Normalize method called without any valid hypotheses available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v50) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Normalize method called without any valid hypotheses available", &v50, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  return v1 != 0;
}

void sub_100E21680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  sub_100008848((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

double sub_100E216B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  double v5;
  double result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 240);
  v4 = hypotf((float)(*(float *)(a1 + 260) + *(float *)(a1 + 248)) - *(float *)(a1 + 300), (float)(*(float *)(a1 + 264) + *(float *)(a1 + 252)) - *(float *)(a1 + 304));
  v5 = (float)((float)(*(float *)(a1 + 268) + *(float *)(a1 + 256)) - *(float *)(a1 + 308));
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  result = *(double *)(a1 + 280) + *(double *)(a1 + 272);
  *(double *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 48);
  return result;
}

uint64_t sub_100E21744(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  sub_100E26D90((_QWORD *)a1, (_QWORD *)a2);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x151uLL);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  v4 = *(_OWORD *)(a2 + 524);
  v5 = *(_OWORD *)(a2 + 540);
  v6 = *(_OWORD *)(a2 + 556);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 540) = v5;
  *(_OWORD *)(a1 + 556) = v6;
  *(_OWORD *)(a1 + 524) = v4;
  v7 = *(_OWORD *)(a2 + 460);
  v8 = *(_OWORD *)(a2 + 476);
  v9 = *(_OWORD *)(a2 + 508);
  *(_OWORD *)(a1 + 492) = *(_OWORD *)(a2 + 492);
  *(_OWORD *)(a1 + 508) = v9;
  *(_OWORD *)(a1 + 460) = v7;
  *(_OWORD *)(a1 + 476) = v8;
  v10 = *(_OWORD *)(a2 + 396);
  v11 = *(_OWORD *)(a2 + 412);
  v12 = *(_OWORD *)(a2 + 444);
  *(_OWORD *)(a1 + 428) = *(_OWORD *)(a2 + 428);
  *(_OWORD *)(a1 + 444) = v12;
  *(_OWORD *)(a1 + 396) = v10;
  *(_OWORD *)(a1 + 412) = v11;
  sub_100349198((_QWORD *)(a1 + 584), (uint64_t *)(a2 + 584));
  v13 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v13;
  v14 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v14;
  v16 = *(_OWORD *)(a2 + 680);
  v15 = *(_OWORD *)(a2 + 696);
  v17 = *(_OWORD *)(a2 + 664);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v16;
  *(_OWORD *)(a1 + 696) = v15;
  *(_OWORD *)(a1 + 664) = v17;
  return a1;
}

uint64_t sub_100E2180C(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  double v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  NSObject *v18;
  int v19;
  double v20;
  int v21;
  const char *v22;
  double v23;
  int8x16_t v24;
  double v25;
  int8x16_t v26;
  long double v27;
  int8x16_t v28;
  double v29;
  long double v30;
  double v31;
  _BOOL4 v32;
  BOOL v33;
  double v34;
  int8x16_t v35;
  int8x16_t v36;
  double v37;
  double v38;
  double v39;
  long double v40;
  int8x16_t v41;
  double v42;
  long double v43;
  double v44;
  _BOOL4 v45;
  double v46;
  double v47;
  double v48;
  NSObject *v49;
  const char *v50;
  uint8_t *v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  const char *v57;
  NSObject *v58;
  const char *v59;
  NSObject *v60;
  const char *v61;
  uint64_t *v62;
  int v63;
  double v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  int v68;
  const char *v69;
  uint8_t *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  NSObject *v81;
  uint64_t v82;
  _BOOL4 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  double v89;
  double v90;
  double v91;
  double v92;
  NSObject *v93;
  const char *v94;
  uint8_t *v95;
  double v96;
  double v97;
  double v98;
  _BOOL4 v99;
  _BOOL4 v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  int v107;
  uint64_t v108;
  int v109;
  NSObject *v110;
  double v111;
  uint64_t v112;
  int v113;
  __int16 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  const char *v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  uint8_t *v144;
  double v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  int8x16_t v157;
  double v158;
  double v159;
  double v160;
  float64x2_t v161;
  char *v162;
  std::__shared_weak_count *v163;
  double v164;
  double v165[2];
  uint64_t (**v166)();
  float64x2_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[60];
  uint64_t v172;
  int v173;
  int v174;
  uint8_t buf[4];
  int v176;

  v2 = (double *)(a2 + 16);
  v172 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a1 + 240);
  if (!v3)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v49 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#selection,No valid hypothesis available for selection", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v166) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,No valid hypothesis available for selection", &v166, 2);
    v51 = (uint8_t *)v50;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v50);
    goto LABEL_199;
  }
  v6 = 1;
  v7 = *(_QWORD **)(a1 + 240);
  do
  {
    v7 = (_QWORD *)*v7;
    --v6;
  }
  while (v7);
  if (v6)
  {
    if (sub_100E20E9C(a1))
    {
      v164 = 0.0;
      v165[0] = 0.0;
      if ((sub_1000F3890((double *)(a1 + 1800), v165, &v164, *(double *)(a2 + 24), *(double *)(a1 + 1704)) & 1) != 0)
      {
        v8 = *(uint64_t **)(a1 + 240);
        if (v8)
        {
          v137 = v164 * 0.0174532925;
          v138 = v165[0] * 0.0174532925;
          v134 = v172;
          v135 = *(_QWORD *)(a2 + 8);
          v151 = 0.0;
          __asm { FMOV            V0.2D, #-1.0 }
          v161 = _Q0;
          _Q0.f64[0] = NAN;
          _Q0.f64[1] = NAN;
          v157 = (int8x16_t)vnegq_f64(_Q0);
          v154 = 0.0;
          v155 = 0.0;
          v14 = 0.0;
          v152 = 0.0;
          v153 = 0.0;
          v156 = 0.0;
          v159 = 0.0;
          v150 = 0.0;
          do
          {
            if ((*((_DWORD *)v8 + 167) & 0xFFFFFFFB) != 0)
            {
              v15 = v8[6];
              if (v15)
              {
                if (*(_BYTE *)(*(_QWORD *)(v8[2] + 8 * ((v15 + v8[5] - 1) / 0x17uLL))
                              + 176 * ((v15 + v8[5] - 1) % 0x17uLL)
                              + 168))
                {
                  v166 = off_1021B4BA0;
                  v167 = v161;
                  v169 = xmmword_101BAFC90;
                  v170 = xmmword_101BAFC90;
                  *(float64x2_t *)&v171[8] = v161;
                  *(float64x2_t *)&v171[24] = v161;
                  *(_QWORD *)&v171[40] = 0xBFF0000000000000;
                  *(_DWORD *)&v171[48] = 0;
                  v171[52] = 0;
                  *(_DWORD *)&v171[56] = 0;
                  v16 = sub_1007268C4((uint64_t)(v8 + 7), (double *)&v172);
                  v17 = sub_100727EB0((uint64_t)(v8 + 7), (uint64_t)&v166);
                  if (*(_BYTE *)(a1 + 164))
                  {
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    v18 = qword_1022A01B8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                    {
                      v19 = *((_DWORD *)v8 + 165);
                      *(_DWORD *)buf = 67109120;
                      v176 = v19;
                      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#selection,Likelihood equal override setting likelihood to 1 for hID,%d", buf, 8u);
                    }
                    v20 = 1.0;
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01B0 != -1)
                        dispatch_once(&qword_1022A01B0, &stru_10218A448);
                      v21 = *((_DWORD *)v8 + 165);
                      v173 = 67109120;
                      v174 = v21;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood equal override setting likelihood to 1 for hID,%d", &v173);
                      v144 = (uint8_t *)v22;
                      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v22);
                      if (v144 != buf)
                        free(v144);
                    }
                  }
                  else
                  {
                    v20 = *((double *)v8 + 80);
                  }
                  if (v16 && v17 && v20 > 0.00000001)
                  {
                    v23 = v14 + v20;
                    sub_100512B2C((v20 * *(double *)&v168 + v14 * v156) / (v14 + v20));
                    v156 = v25;
                    *(double *)v26.i64 = *((double *)&v168 + 1) * 0.0174532925;
                    if (fabs(*((double *)&v168 + 1) * 0.0174532925) <= 3.14159265)
                    {
                      v28 = (int8x16_t)0x400921FB54442D18uLL;
                    }
                    else
                    {
                      v145 = *(double *)vbslq_s8(v157, (int8x16_t)0x400921FB54442D18uLL, v26).i64;
                      v27 = fmod(*(double *)v26.i64 + v145, 6.28318531);
                      v28 = (int8x16_t)0x400921FB54442D18uLL;
                      *(double *)v26.i64 = v27 - v145;
                    }
                    *(double *)v24.i64 = v159 * 0.0174532925;
                    v29 = v159 * 0.0174532925;
                    if (fabs(v159 * 0.0174532925) > *(double *)v28.i64)
                    {
                      v140 = *(double *)vbslq_s8(v157, v28, v24).i64;
                      v146 = v26.i64[0];
                      v30 = fmod(*(double *)v24.i64 + v140, 6.28318531);
                      *(double *)v24.i64 = v159 * 0.0174532925;
                      v26.i64[0] = v146;
                      v28.i64[0] = 0x400921FB54442D18;
                      v29 = v30 - v140;
                    }
                    v31 = *(double *)v26.i64 - v29;
                    v32 = *(double *)v26.i64 - v29 > *(double *)v28.i64;
                    v33 = vabdd_f64(*(double *)v26.i64, v29) <= *(double *)v28.i64;
                    v34 = -0.0;
                    if (!v33)
                      v34 = dbl_101C28CE0[v32];
                    sub_100080DCC((v20 * ((*(double *)v24.i64 + v31 + v34) * 57.2957795) + v14 * v159) / v23);
                    v159 = v37;
                    if (*((double *)&v169 + 1) != -1.0)
                    {
                      v39 = v153;
                      v38 = v154;
                      if (*(double *)&v170 != -1.0)
                      {
                        v39 = (v20 * *((double *)&v169 + 1) + v154 * v153) / (v154 + v20);
                        v38 = v154 + v20;
                      }
                      v153 = v39;
                      v154 = v38;
                    }
                    if (*(double *)&v171[24] != -1.0 && *(double *)&v171[32] != -1.0)
                    {
                      *(double *)v35.i64 = *(double *)&v171[24] * 0.0174532925;
                      if (fabs(*(double *)&v171[24] * 0.0174532925) <= 3.14159265)
                      {
                        v41 = (int8x16_t)0x400921FB54442D18uLL;
                      }
                      else
                      {
                        v147 = *(double *)vbslq_s8(v157, (int8x16_t)0x400921FB54442D18uLL, v35).i64;
                        v40 = fmod(*(double *)v35.i64 + v147, 6.28318531);
                        v41 = (int8x16_t)0x400921FB54442D18uLL;
                        *(double *)v35.i64 = v40 - v147;
                      }
                      *(double *)v36.i64 = v152 * 0.0174532925;
                      v42 = v152 * 0.0174532925;
                      if (fabs(v152 * 0.0174532925) > *(double *)v41.i64)
                      {
                        v141 = *(double *)vbslq_s8(v157, v41, v36).i64;
                        v148 = v35.i64[0];
                        v43 = fmod(*(double *)v36.i64 + v141, 6.28318531);
                        *(double *)v36.i64 = v152 * 0.0174532925;
                        v35.i64[0] = v148;
                        v41.i64[0] = 0x400921FB54442D18;
                        v42 = v43 - v141;
                      }
                      v44 = *(double *)v35.i64 - v42;
                      v45 = *(double *)v35.i64 - v42 > *(double *)v41.i64;
                      v33 = vabdd_f64(*(double *)v35.i64, v42) <= *(double *)v41.i64;
                      v46 = -0.0;
                      if (!v33)
                        v46 = dbl_101C28CE0[v45];
                      v47 = v20 * ((*(double *)v36.i64 + v44 + v46) * 57.2957795) + v155 * v152;
                      v155 = v155 + v20;
                      sub_1001C6800(v47 / v155);
                      v152 = v48;
                    }
                    if (*(double *)&v171[8] != -1.0 && *(double *)&v171[16] != -1.0)
                    {
                      v150 = (v20 * *(double *)&v171[8] + v151 * v150) / (v151 + v20);
                      v151 = v151 + v20;
                    }
                  }
                  else
                  {
                    v23 = v14;
                  }
                  v14 = v23;
                }
              }
            }
            v8 = (uint64_t *)*v8;
          }
          while (v8);
          if (v14 >= 0.00000001)
          {
            v62 = *(uint64_t **)(a1 + 240);
            if (v62)
            {
              v63 = 0;
              v139 = 0.0;
              v64 = -1.0;
              v136 = 0.0;
              v142 = 0.0;
              v149 = 0.0;
              v143 = 0.0;
              do
              {
                if ((*((_DWORD *)v62 + 167) & 0xFFFFFFFB) != 0)
                {
                  v65 = v62[6];
                  if (v65)
                  {
                    if (*(_BYTE *)(*(_QWORD *)(v62[2] + 8 * ((v65 + v62[5] - 1) / 0x17uLL))
                                  + 176 * ((v65 + v62[5] - 1) % 0x17uLL)
                                  + 168))
                    {
                      v166 = off_1021B4BA0;
                      v167 = v161;
                      v169 = xmmword_101BAFC90;
                      v170 = xmmword_101BAFC90;
                      *(float64x2_t *)&v171[8] = v161;
                      *(float64x2_t *)&v171[24] = v161;
                      *(_QWORD *)&v171[40] = 0xBFF0000000000000;
                      *(_DWORD *)&v171[48] = 0;
                      v171[52] = 0;
                      *(_DWORD *)&v171[56] = 0;
                      v158 = v64;
                      if (*(_BYTE *)(a1 + 164))
                      {
                        if (qword_1022A01B0 != -1)
                          dispatch_once(&qword_1022A01B0, &stru_10218A448);
                        v66 = qword_1022A01B8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                        {
                          v67 = *((_DWORD *)v62 + 165);
                          *(_DWORD *)buf = 67109120;
                          v176 = v67;
                          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#selection,Likelihood equal override setting likelihood to 1 for hID,%d", buf, 8u);
                        }
                        v160 = 1.0;
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01B0 != -1)
                            dispatch_once(&qword_1022A01B0, &stru_10218A448);
                          v68 = *((_DWORD *)v62 + 165);
                          v173 = 67109120;
                          v174 = v68;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Likelihood equal override setting likelihood to 1 for hID,%d", &v173);
                          v70 = (uint8_t *)v69;
                          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v69);
                          if (v70 != buf)
                            free(v70);
                        }
                      }
                      else
                      {
                        v160 = *((double *)v62 + 80);
                      }
                      if (sub_100727EB0((uint64_t)(v62 + 7), (uint64_t)&v166))
                      {
                        v71 = *(double *)&v169;
                        v72 = sub_100096C00(*(double *)&v168, v156);
                        v73 = *(double *)&v169;
                        v74 = sub_100096C00(*((double *)&v168 + 1), v159);
                        v75 = v160 / v14;
                        if (*((double *)&v169 + 1) == -1.0 || *(double *)&v170 == -1.0)
                        {
                          v77 = v160 / v14;
                        }
                        else
                        {
                          v76 = v142;
                          if (v154 > 0.00000001)
                            v76 = v142
                                + v160 / v154 * ((*((double *)&v169 + 1) - v153) * (*((double *)&v169 + 1) - v153))
                                + v160 / v154 * (*(double *)&v170 * *(double *)&v170);
                          v142 = v76;
                          if (v154 > 0.00000001)
                            v77 = v160 / v154;
                          else
                            v77 = v160 / v14;
                        }
                        if (*(double *)&v171[24] != -1.0)
                        {
                          v78 = *(double *)&v171[32];
                          if (*(double *)&v171[32] != -1.0 && v155 > 0.00000001)
                          {
                            v79 = sub_100096C00(*(double *)&v171[24], v152);
                            v77 = v160 / v155;
                            v136 = v136 + v160 / v155 * (v79 * v79) + v160 / v155 * (v78 * v78);
                          }
                        }
                        if (*(double *)&v171[8] != -1.0 && *(double *)&v171[16] != -1.0)
                        {
                          v80 = v139;
                          if (v151 > 0.00000001)
                            v80 = v139
                                + v160 / v151 * ((*(double *)&v171[8] - v150) * (*(double *)&v171[8] - v150))
                                + v160 / v151 * (*(double *)&v171[16] * *(double *)&v171[16]);
                          v139 = v80;
                          if (v151 > 0.00000001)
                            v77 = v160 / v151;
                        }
                        v143 = v143 + v75 * (v138 * v72 * (v138 * v72)) + v75 * (v71 * v71) * 0.5;
                        v149 = v149 + v75 * (v137 * v74 * (v137 * v74)) + v75 * (v73 * v73) * 0.5;
                        if (v77 <= v158)
                        {
                          v77 = v158;
                        }
                        else
                        {
                          v63 = sub_10125D9DC((uint64_t)(v62 + 1), (double *)&v172);
                          sub_100E21744(a1 + 248, (uint64_t)(v62 + 1));
                        }
                      }
                      else
                      {
                        v77 = v158;
                      }
                      v64 = v77;
                    }
                  }
                }
                v62 = (uint64_t *)*v62;
              }
              while (v62);
              v89 = v143 + v149;
              v91 = v139;
              v90 = v142;
              v92 = v136;
            }
            else
            {
              v63 = 0;
              v90 = 0.0;
              v92 = 0.0;
              v91 = 0.0;
              v89 = 0.0;
            }
            v96 = sqrt(v90);
            if (v154 <= 0.00000001)
              v97 = -1.0;
            else
              v97 = v96;
            if (v154 <= 0.00000001)
              v98 = -1.0;
            else
              v98 = v153;
            v99 = v155 > 0.00000001;
            v100 = v92 < 3600.0;
            v101 = sqrt(v92);
            if (v99 && v100)
              v102 = v152;
            else
              v102 = -1.0;
            if (v99 && v100)
              v103 = v101;
            else
              v103 = -1.0;
            v104 = sqrt(v91);
            if (v151 <= 0.00000001)
              v105 = -1.0;
            else
              v105 = v150;
            if (v151 <= 0.00000001)
              v106 = -1.0;
            else
              v106 = v104;
            v107 = *(_DWORD *)(a2 + 120);
            v108 = *(_QWORD *)(a2 + 112);
            v109 = *(_DWORD *)(a1 + 160);
            if (v109)
            {
              if (v109 == 1)
              {
                v63 = 1;
              }
              else
              {
                v63 = *(_DWORD *)(a1 + 160);
                if (v109 != 4)
                {
                  if (qword_1022A01B0 != -1)
                    dispatch_once(&qword_1022A01B0, &stru_10218A448);
                  v110 = qword_1022A01B8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "#selection,Output default set to invalid type error. Setting type to unknown", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01B0 != -1)
                      dispatch_once(&qword_1022A01B0, &stru_10218A448);
                    LOWORD(v166) = 0;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,Output default set to invalid type error. Setting type to unknown", &v166, 2);
                    v133 = (uint8_t *)v132;
                    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v132);
                    if (v133 != buf)
                      free(v133);
                  }
                  v63 = 0;
                }
              }
            }
            v111 = sqrt(v89);
            v112 = *(_QWORD *)(a2 + 64);
            v113 = *(_DWORD *)(a2 + 72);
            *(_QWORD *)(a1 + 976) = v135;
            *(_QWORD *)(a1 + 984) = v134;
            *(double *)(a1 + 992) = v156;
            *(double *)(a1 + 1000) = v159;
            *(double *)(a1 + 1008) = v111;
            *(double *)(a1 + 1016) = v98;
            *(double *)(a1 + 1024) = v97;
            *(_QWORD *)(a1 + 1032) = v112;
            *(_DWORD *)(a1 + 1040) = v113;
            *(double *)(a1 + 1048) = v105;
            *(double *)(a1 + 1056) = v106;
            *(double *)(a1 + 1064) = v102;
            *(double *)(a1 + 1072) = v103;
            *(_QWORD *)(a1 + 1080) = v108;
            *(_DWORD *)(a1 + 1088) = v107;
            *(_BYTE *)(a1 + 1092) = 0;
            v114 = *(_WORD *)buf;
            *(_BYTE *)(a1 + 1095) = buf[2];
            *(_WORD *)(a1 + 1093) = v114;
            *(_DWORD *)(a1 + 1096) = v63;
            v115 = *(_QWORD *)(a1 + 288) + *(_QWORD *)(a1 + 280) - 1;
            v116 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * (v115 / 0x17)) + 176 * (v115 % 0x17);
            *(_QWORD *)(v116 + 40) = v135;
            *(_QWORD *)(v116 + 48) = v134;
            *(double *)(v116 + 56) = v156;
            *(double *)(v116 + 64) = v159;
            *(double *)(v116 + 72) = v111;
            *(double *)(v116 + 80) = v98;
            *(double *)(v116 + 88) = v97;
            *(_QWORD *)(v116 + 96) = v112;
            *(_DWORD *)(v116 + 104) = v113;
            *(double *)(v116 + 112) = v105;
            *(double *)(v116 + 120) = v106;
            *(double *)(v116 + 128) = v102;
            *(double *)(v116 + 136) = v103;
            *(_QWORD *)(v116 + 144) = v108;
            *(_DWORD *)(v116 + 152) = v107;
            *(_BYTE *)(v116 + 156) = 0;
            LOWORD(v113) = *(_WORD *)buf;
            *(_BYTE *)(v116 + 159) = buf[2];
            *(_WORD *)(v116 + 157) = v113;
            *(_DWORD *)(v116 + 160) = v63;
            v117 = *(_QWORD *)(a1 + 288) + *(_QWORD *)(a1 + 280) - 1;
            v118 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * (v117 / 0x17));
            v119 = (char *)operator new(0xA0uLL);
            *((_QWORD *)v119 + 1) = 0;
            v120 = (unint64_t *)(v119 + 8);
            *((_QWORD *)v119 + 2) = 0;
            v121 = (unint64_t *)(v119 + 16);
            *(_QWORD *)v119 = off_10218A5E0;
            *((_QWORD *)v119 + 3) = off_1021B4BA0;
            v122 = v118 + 176 * (v117 % 0x17);
            v123 = *(_OWORD *)(v122 + 40);
            v124 = *(_OWORD *)(v122 + 56);
            v125 = *(_OWORD *)(v122 + 88);
            *((_OWORD *)v119 + 4) = *(_OWORD *)(v122 + 72);
            *((_OWORD *)v119 + 5) = v125;
            *((_OWORD *)v119 + 2) = v123;
            *((_OWORD *)v119 + 3) = v124;
            v126 = *(_OWORD *)(v122 + 104);
            v127 = *(_OWORD *)(v122 + 120);
            v128 = *(_OWORD *)(v122 + 136);
            *(_OWORD *)(v119 + 140) = *(_OWORD *)(v122 + 148);
            *((_OWORD *)v119 + 7) = v127;
            *((_OWORD *)v119 + 8) = v128;
            *((_OWORD *)v119 + 6) = v126;
            v162 = v119 + 24;
            v163 = (std::__shared_weak_count *)v119;
            do
              v129 = __ldxr(v121);
            while (__stxr(v129 + 1, v121));
            sub_1007286B4(a1 + 296, v2, (uint64_t *)&v162);
            if (v163)
              std::__shared_weak_count::__release_weak(v163);
            do
              v130 = __ldaxr(v120);
            while (__stlxr(v130 - 1, v120));
            if (!v130)
            {
              (*(void (**)(char *))(*(_QWORD *)v119 + 16))(v119);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v119);
            }
            return 1;
          }
        }
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v81 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "#selection,No valid hypotheses with substantial likelihoods found", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        LOWORD(v166) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,No valid hypotheses with substantial likelihoods found", &v166, 2);
        v51 = (uint8_t *)v131;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v131);
      }
      else
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v60 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "#Error,fusion hypothesis selection, calc_dNdE failed", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        LOWORD(v166) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,fusion hypothesis selection, calc_dNdE failed", &v166, 2);
        v51 = (uint8_t *)v61;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v61);
      }
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v56 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#selection, Failed to normalize likelihoods", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v166) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#selection, Failed to normalize likelihoods", &v166, 2);
      v51 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v57);
    }
LABEL_199:
    if (v51 != buf)
      free(v51);
    return 0;
  }
  v52 = *(_DWORD *)(v3 + 668);
  if (!v52
    || (v53 = *(_QWORD *)(v3 + 48)) == 0
    || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * ((v53 + *(_QWORD *)(v3 + 40) - 1) / 0x17uLL))
                 + 176 * ((v53 + *(_QWORD *)(v3 + 40) - 1) % 0x17uLL)
                 + 168))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v58 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#selection,only available hypothesis is invalid fused hypothesis, rejecting", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v166) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#selection,only available hypothesis is invalid fused hypothesis, rejecting", &v166, 2);
    v51 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v59);
    goto LABEL_199;
  }
  if (v52 == 4)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v54 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#selection,only available hypothesis is a gross outlier, rejecting", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    LOWORD(v166) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#selection,only available hypothesis is a gross outlier, rejecting", &v166, 2);
    v51 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v55);
    goto LABEL_199;
  }
  v166 = off_1021B4BA0;
  __asm { FMOV            V0.2D, #-1.0 }
  v167 = _Q0;
  v169 = xmmword_101BAFC90;
  v170 = xmmword_101BAFC90;
  *(float64x2_t *)&v171[8] = _Q0;
  *(float64x2_t *)&v171[24] = _Q0;
  *(_QWORD *)&v171[40] = 0xBFF0000000000000;
  *(_DWORD *)&v171[48] = 0;
  v171[52] = 0;
  *(_DWORD *)&v171[56] = 0;
  v85 = sub_1007268C4(v3 + 56, (double *)&v172);
  v82 = sub_100727EB0(v3 + 56, (uint64_t)&v166) & v85;
  if ((v82 & 1) != 0)
  {
    *(_DWORD *)&v171[56] = sub_10125D9DC(v3 + 8, (double *)&v172);
    v86 = *(_OWORD *)&v171[16];
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)v171;
    *(_OWORD *)(a1 + 1056) = v86;
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v171[32];
    v87 = v168;
    *(float64x2_t *)(a1 + 976) = v167;
    *(_OWORD *)(a1 + 992) = v87;
    v88 = v170;
    *(_OWORD *)(a1 + 1008) = v169;
    *(_OWORD *)(a1 + 1024) = v88;
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v171[44];
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v93 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#selection,Failed to retrieve estimate from the only available hypothesis", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      LOWORD(v165[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#selection,Failed to retrieve estimate from the only available hypothesis", v165, 2);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
  }
  return v82;
}

void sub_100E22FE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

char *sub_100E23000(uint64_t a1, char *__src, _DWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v15 >> 62)
      sub_100259694();
    v16 = (__src - v14) >> 2;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)sub_100260634(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[4 * v16];
    v23 = v22;
    v24 = &v19[4 * v18];
    sub_100E289E4(&__p, a3);
    v4 = sub_100262220((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v10 = __src + 4;
    v11 = v6 - 4;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)v12 = v13;
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    *(_DWORD *)v4 = *a3;
  }
  return v4;
}

void sub_100E23168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100E231A0(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v1 = *(double **)(a1 + 240);
  if (v1)
  {
    v2 = 0;
    v3 = *(_QWORD **)(a1 + 240);
    do
    {
      ++v2;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    v4 = 1.0;
    v5 = 1.0 / (double)v2;
    if (v5 <= 1.0)
      v4 = 1.0 / (double)v2;
    if (v5 >= 0.00000001)
      v6 = v4;
    else
      v6 = 0.00000001;
    v7 = log(v6);
    v8 = v1;
    do
    {
      v8[80] = v6;
      v8[81] = v7;
      v8 = *(double **)v8;
    }
    while (v8);
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v9 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#selection,reset hypotheses Likelihoods is called without any valid hypotheses available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#selection,reset hypotheses Likelihoods is called without any valid hypotheses available", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::resetAllHypothesesLikelihoods()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v1 != 0;
}

void sub_100E233A0(uint64_t a1, double *a2, unsigned int *a3)
{
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  __n128 *v12;
  uint64_t **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  BOOL v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  __int128 v50;
  double v51[4];
  double v52;
  _BYTE v53[12];
  __int16 v54;
  double v55;
  _BYTE v56[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _BYTE buf[12];
  __int16 v65;
  double v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  __int16 v73;
  unsigned int v74;
  __int16 v75;
  uint64_t v76;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v5 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v6 = CLMotionActivity::activityTypeToString(*a3);
    v7 = *a2;
    v8 = *((_QWORD *)a3 + 10);
    v9 = *((_QWORD *)a3 + 5);
    v11 = *a3;
    v10 = a3[1];
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = v6;
    v65 = 2050;
    v66 = v7;
    v67 = 2050;
    v68 = v8;
    v69 = 2050;
    v70 = v9;
    v71 = 1026;
    v72 = v11;
    v73 = 1026;
    v74 = v10;
    v75 = 2080;
    v76 = CLMotionActivity::activityConfidenceToString(v10);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#fusion,received motion state,%s,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,timestamp,%{public}.3f,type,%{public}d,confidence,%{public}d,%s", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v34 = qword_1022A01B8;
    v35 = CLMotionActivity::activityTypeToString(*a3);
    v36 = *(_QWORD *)a2;
    v37 = *((_QWORD *)a3 + 10);
    v38 = *((_QWORD *)a3 + 5);
    v40 = *a3;
    v39 = a3[1];
    v41 = CLMotionActivity::activityConfidenceToString(v39);
    *(_DWORD *)v56 = 136316674;
    *(_QWORD *)&v56[4] = v35;
    *(_WORD *)&v56[12] = 2050;
    *(_QWORD *)&v56[14] = v36;
    *(_WORD *)&v56[22] = 2050;
    *(_QWORD *)&v56[24] = v37;
    LOWORD(v57) = 2050;
    *(_QWORD *)((char *)&v57 + 2) = v38;
    WORD5(v57) = 1026;
    HIDWORD(v57) = v40;
    LOWORD(v58) = 1026;
    *(_DWORD *)((char *)&v58 + 2) = v39;
    WORD3(v58) = 2080;
    *((_QWORD *)&v58 + 1) = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "#fusion,received motion state,%s,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,timestamp,%{public}.3f,type,%{public}d,confidence,%{public}d,%s", v56, 64);
    v43 = (char *)v42;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  if (!*(_BYTE *)(a1 + 2192))
  {
    v20 = *((_OWORD *)a3 + 7);
    v61 = *((_OWORD *)a3 + 6);
    v62 = v20;
    v63 = *((_QWORD *)a3 + 16);
    v21 = *((_OWORD *)a3 + 3);
    v57 = *((_OWORD *)a3 + 2);
    v58 = v21;
    v22 = *((_OWORD *)a3 + 5);
    v59 = *((_OWORD *)a3 + 4);
    v60 = v22;
    v23 = *((_OWORD *)a3 + 1);
    *(_OWORD *)v56 = *(_OWORD *)a3;
    *(_OWORD *)&v56[16] = v23;
    if (*(_BYTE *)(a1 + 2075) || *(_BYTE *)(a1 + 2088) || *a3 != 2 || (int)a3[1] < 1)
      goto LABEL_12;
    v25 = *(_QWORD *)(a1 + 1696);
    v50 = *(_OWORD *)(v25 + 384);
    sub_100E0F290(v25, (uint64_t)v51);
    if (*(double *)&v50 < 0.0
      || *a2 >= *(double *)&v50 && *a2 - *(double *)&v50 > 6.0
      || (DWORD2(v50) - 3) > 1)
    {
      if (v51[0] < 0.0)
        goto LABEL_12;
      v31 = *a2 - v51[0] <= 6.0 || *a2 < v51[0];
      if (!v31 || v51[1] >= 0.001 || v52 <= 0.3)
        goto LABEL_12;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v32 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v33 = *(_QWORD *)a2;
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v33;
        v65 = 2050;
        v66 = v52;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR delta-altitude changes,delta altitude change,%{public}.2f", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v46 = *(_QWORD *)a2;
      *(_DWORD *)v53 = 134349312;
      *(_QWORD *)&v53[4] = v46;
      v54 = 2050;
      v55 = v52;
      LODWORD(v48) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR delta-altitude changes,delta altitude change,%{public}.2f", v53, v48);
      v30 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)", "%s\n", v47);
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v26 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_QWORD *)a2;
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v27;
        v65 = 1026;
        LODWORD(v66) = DWORD2(v50);
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR/VDR data,IO derived Motion type,%{public}d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v28 = *(_QWORD *)a2;
      *(_DWORD *)v53 = 134349312;
      *(_QWORD *)&v53[4] = v28;
      v54 = 1026;
      LODWORD(v55) = DWORD2(v50);
      LODWORD(v48) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR/VDR data,IO derived Motion type,%{public}d", v53, v48);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)", "%s\n", v29);
    }
    if (v30 != buf)
      free(v30);
LABEL_47:
    *(_DWORD *)v56 = 3;
LABEL_12:
    sub_1006B3704(a1 + 1840, a2, (__int128 *)v56);
    sub_100E0F448(a1, a2);
    return;
  }
  *(_QWORD *)&v50 = 0;
  v12 = (__n128 *)sub_100B303DC();
  sub_100B307F4(v12, (__n128 *)v56);
  if ((sub_100AD206C((uint64_t)v56, (double *)&v50) & 1) != 0)
  {
    *(double *)v53 = *((double *)a3 + 10) - *(double *)&v50;
    *(_QWORD *)buf = v53;
    v13 = sub_100E28AF0((uint64_t **)(a1 + 2200), (double *)v53, (uint64_t)&unk_101B9EB60, (_QWORD **)buf);
    *(_OWORD *)(v13 + 5) = *(_OWORD *)a3;
    v14 = *((_OWORD *)a3 + 1);
    v15 = *((_OWORD *)a3 + 2);
    v16 = *((_OWORD *)a3 + 3);
    *(_OWORD *)(v13 + 13) = *((_OWORD *)a3 + 4);
    *(_OWORD *)(v13 + 11) = v16;
    *(_OWORD *)(v13 + 9) = v15;
    *(_OWORD *)(v13 + 7) = v14;
    v17 = *((_OWORD *)a3 + 5);
    v18 = *((_OWORD *)a3 + 6);
    v19 = *((_OWORD *)a3 + 7);
    v13[21] = (uint64_t *)*((_QWORD *)a3 + 16);
    *(_OWORD *)(v13 + 19) = v19;
    *(_OWORD *)(v13 + 17) = v18;
    *(_OWORD *)(v13 + 15) = v17;
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v24 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#fusion, cannot compute fMachContinuousToCFAbsoluteOffset_s to convert buffered motion activity sample time, discarding sample", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      *(_WORD *)v53 = 0;
      LODWORD(v48) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion, cannot compute fMachContinuousToCFAbsoluteOffset_s to convert buffered motion activity sample time, discarding sample", v53, v48);
      v45 = (char *)v44;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
}

void sub_100E23C34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E23C40(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t *v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  uint64_t *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  uint64_t *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    v8 = *(_DWORD *)(a3 + 8);
    v9 = *(_DWORD *)(a3 + 12);
    *(_DWORD *)buf = 134349568;
    v25 = v7;
    v26 = 1026;
    v27 = v8;
    v28 = 1026;
    v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,fitness session update,mct,%{public}.3f,type,%{public}d,predicted,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v13 = *a2;
    v14 = *(_DWORD *)(a3 + 8);
    v15 = *(_DWORD *)(a3 + 12);
    v18 = 134349568;
    v19 = v13;
    v20 = 1026;
    v21 = v14;
    v22 = 1026;
    v23 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,fitness session update,mct,%{public}.3f,type,%{public}d,predicted,%{public}d", &v18, 24);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v10 = *(double *)a3 <= 0.0;
  if (*(double *)a3 >= 1.0e11)
    v10 = 1;
  v11 = *(_DWORD *)(a3 + 8);
  if ((v10 | (v11 == 71) ^ (v11 == 0)) != 1 || v11 == 0)
  {
    sub_1006B3F0C(a1 + 1840, a2, (__int128 *)a3);
    sub_100E0F448(a1, (double *)a2);
  }
}

void sub_100E23EA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E23EB0(uint64_t a1, double *a2, uint64_t a3)
{
  NSObject *v6;
  double v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  double v15;
  uint64_t **v16;
  int v17;
  uint64_t v19;
  double v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  const char *v26;
  char *v27;
  unsigned int v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  _BOOL4 v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  _BOOL4 v39;
  _BYTE buf[12];
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  _BOOL4 v50;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    v8 = sub_1012A1B34((_QWORD *)a3);
    v9 = sub_1002199F0(a3, *a2, 6.0);
    v10 = *(_DWORD *)a3;
    v11 = *(_DWORD *)a3 == 0;
    v12 = *(_DWORD *)a3 == 3;
    *(_DWORD *)buf = 134350336;
    *(double *)&buf[4] = v7;
    v41 = 1026;
    v42 = v8;
    v43 = 1026;
    v44 = v9;
    v45 = 1026;
    v46 = v11;
    v47 = 1026;
    v48 = v12;
    v49 = 1026;
    v50 = v10 == 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,received MapsRouteHintData,mct,%{public}.3f,goodConnectivity,%{public}d,timedout,%{public}d,isPedestrian,%{public}d,isBicycle,%{public}d,isVehicular,%{public}d", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v19 = qword_1022A01B8;
    v20 = *a2;
    v21 = sub_1012A1B34((_QWORD *)a3);
    v22 = sub_1002199F0(a3, *a2, 6.0);
    v23 = *(_DWORD *)a3;
    v24 = *(_DWORD *)a3 == 0;
    v25 = *(_DWORD *)a3 == 3;
    v28 = 134350336;
    v29 = v20;
    v30 = 1026;
    v31 = v21;
    v32 = 1026;
    v33 = v22;
    v34 = 1026;
    v35 = v24;
    v36 = 1026;
    v37 = v25;
    v38 = 1026;
    v39 = v23 == 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "#fusion,received MapsRouteHintData,mct,%{public}.3f,goodConnectivity,%{public}d,timedout,%{public}d,isPedestrian,%{public}d,isBicycle,%{public}d,isVehicular,%{public}d", COERCE_DOUBLE(134350336), &v28, 42);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::routeHintUpdate(const CFTimeInterval &, const CLMapsRouteHintData &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  *(_QWORD *)(a1 + 1968) = *(_QWORD *)a3;
  if (a1 + 1968 != a3)
    sub_1008AFA64((char *)(a1 + 1976), *(char **)(a3 + 8), *(_QWORD *)(a3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a3 + 32);
  if (!sub_1002199F0(a3, *a2, 6.0))
  {
    v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 == 3)
    {
      if (*(_DWORD *)(a1 + 1912) != 6)
      {
        *(_DWORD *)(a1 + 1912) = 6;
        v15 = *a2;
        v28 = 6;
        *(_QWORD *)buf = &v28;
        v16 = sub_10021083C((uint64_t **)(a1 + 1888), &v28, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        goto LABEL_21;
      }
    }
    else if (v13 == 1)
    {
      v17 = *(_DWORD *)(a1 + 1912);
      if ((v17 - 1) < 5 || v17 == 10)
      {
        *(_DWORD *)(a1 + 1912) = 7;
        v15 = *a2;
        v28 = 7;
        *(_QWORD *)buf = &v28;
        v16 = sub_10021083C((uint64_t **)(a1 + 1888), &v28, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        goto LABEL_21;
      }
    }
    else if (!v13)
    {
      v14 = *(_DWORD *)(a1 + 1912);
      if (v14 <= 0xA && ((1 << v14) & 0x7C7) != 0)
      {
        *(_DWORD *)(a1 + 1912) = 3;
        v15 = *a2;
        v28 = 3;
        *(_QWORD *)buf = &v28;
        v16 = sub_10021083C((uint64_t **)(a1 + 1888), &v28, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
LABEL_21:
        *((double *)v16 + 5) = v15;
      }
    }
  }
  return sub_100E0F448(a1, a2);
}

void sub_100E242C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E242D0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CLMotionActivity *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  _BYTE v38[12];
  _BYTE v39[10];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  _BYTE v51[10];
  _QWORD v52[200];

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    v8 = *(_QWORD *)a3;
    v9 = *((_QWORD *)a3 + 2);
    v10 = *((_QWORD *)a3 + 3);
    v11 = *((_QWORD *)a3 + 4);
    *(_DWORD *)buf = 134350080;
    v47 = v7;
    v48 = 2050;
    v49 = v8;
    v50 = 1026;
    *(_DWORD *)v51 = v9;
    *(_WORD *)&v51[4] = 1026;
    *(_DWORD *)&v51[6] = v10;
    LOWORD(v52[0]) = 2050;
    *(_QWORD *)((char *)v52 + 2) = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,received outdoor update,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,type,%{public}d,confidence,%{public}d,prob,%{public}.2f", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v18 = *a2;
    v19 = *(_QWORD *)a3;
    v20 = *((_QWORD *)a3 + 2);
    v21 = *((_QWORD *)a3 + 3);
    v22 = *((_QWORD *)a3 + 4);
    *(_DWORD *)v38 = 134350080;
    *(_QWORD *)&v38[4] = v18;
    *(_WORD *)v39 = 2050;
    *(_QWORD *)&v39[2] = v19;
    v40 = 1026;
    v41 = v20;
    v42 = 1026;
    v43 = v21;
    v44 = 2050;
    v45 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,received outdoor update,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,type,%{public}d,confidence,%{public}d,prob,%{public}.2f", v38, 44);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::indoorOutdoorUpdate(const CFTimeInterval &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if (*((_QWORD *)a3 + 2))
  {
    v12 = (CLMotionActivity *)sub_100E2477C((_QWORD *)(a1 + 2016), a2, a3);
    *(_QWORD *)v38 = 0xBFF0000000000000;
    CLMotionActivity::getInit(v12);
    if (!*(_BYTE *)(a1 + 2192)
      && sub_1006B3E90((_QWORD *)(a1 + 1840), v38)
      && *(double *)v38 > 0.0
      && (*(double *)v38 < 0.0 || *(double *)a2 >= *(double *)v38 && *(double *)a2 - *(double *)v38 > 2.56))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v13 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v14 = *a2;
        v15 = *(_QWORD *)v38;
        v16 = CLMotionActivity::activityTypeToString(*(unsigned int *)&v38[8]);
        v17 = CLMotionActivity::activityConfidenceToString(*(unsigned int *)v39);
        *(_DWORD *)buf = 134349826;
        v47 = v14;
        v48 = 2050;
        v49 = v15;
        v50 = 2080;
        *(_QWORD *)v51 = v16;
        *(_WORD *)&v51[8] = 2080;
        v52[0] = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#fusion,re-using last known motion state,mct_now,%{public}.3f,lastMotionState_mct,%{public}.3f,type,%s,confidence,%s", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10218A448);
        v25 = qword_1022A01B8;
        v26 = *a2;
        v30 = 134349826;
        v31 = v26;
        v32 = 2050;
        v33 = *(_QWORD *)v38;
        v34 = 2080;
        v35 = CLMotionActivity::activityTypeToString(*(unsigned int *)&v38[8]);
        v36 = 2080;
        v37 = CLMotionActivity::activityConfidenceToString(*(unsigned int *)v39);
        LODWORD(v29) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "#fusion,re-using last known motion state,mct_now,%{public}.3f,lastMotionState_mct,%{public}.3f,type,%s,confidence,%s", &v30, v29);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::indoorOutdoorUpdate(const CFTimeInterval &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      *(_QWORD *)v38 = *a2;
      sub_1006B3DC4((_QWORD *)(a1 + 1840), (uint64_t)v38);
      sub_100E0F448(a1, (double *)a2);
    }
  }
}

void sub_100E24770(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E2477C(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v6 = a1[5];
  if (v6 >= 0xB)
  {
    ++a1[4];
    a1[5] = v6 - 1;
    sub_100555498((uint64_t)a1, 1);
  }
  v9 = *a2;
  v7 = a3[1];
  v10 = *a3;
  v11 = v7;
  v12 = a3[2];
  v13 = *((_QWORD *)a3 + 6);
  return sub_100E27C30(a1, (__int128 *)&v9);
}

void sub_100E2480C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  _BYTE __p[12];
  __int16 v19;
  int v20;
  __int16 v21;
  void **v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE *v30;
  __int16 v31;
  int v32;

  v17 = a3;
  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = (a3 - 1) > 5 ? "Unavailable" : off_10218A620[(int)a3 - 1];
    v8 = *a2;
    sub_1015A2E04(__p, v7);
    v9 = SBYTE3(v22) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134349826;
    v26 = v8;
    v27 = 1026;
    v28 = a3;
    v29 = 2082;
    v30 = v9;
    v31 = 1026;
    v32 = HIDWORD(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d", buf, 0x22u);
    if (SBYTE3(v22) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v10 = qword_1022A01B8;
    v11 = *a2;
    sub_100D54F84(a3, v15);
    if (v16 >= 0)
      v12 = v15;
    else
      v12 = (void **)v15[0];
    *(_DWORD *)__p = 134349826;
    *(_QWORD *)&__p[4] = v11;
    v19 = 1026;
    v20 = a3;
    v21 = 2082;
    v22 = v12;
    v23 = 1026;
    v24 = HIDWORD(a3);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "#fusion,mct,%{public}.3f,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d", __p, 34);
    v14 = v13;
    if (v16 < 0)
      operator delete(v15[0]);
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::signalEnvironmentUpdate(const CFTimeInterval &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  sub_10094CEFC(a1 + 2248, (int *)&v17);
  if ((_DWORD)v17)
    *(_QWORD *)(a1 + 2064) = v17;
}

void sub_100E24AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E24ADC(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    *(_DWORD *)buf = 134349312;
    v16 = v7;
    v17 = 1026;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f, change in locationApp foreground status,isForeGround,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v8 = *a2;
    v11 = 134349312;
    v12 = v8;
    v13 = 1026;
    v14 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f, change in locationApp foreground status,isForeGround,%{public}d", &v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::locationAppForegroundStatusUpdate(const CFTimeInterval &, BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_BYTE *)(a1 + 2072) = a3;
}

void sub_100E24CCC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100E24CD8(uint64_t a1, double *a2, int a3)
{
  NSObject *v6;
  double v7;
  unsigned int v8;
  double v9;
  uint64_t **v10;
  uint64_t v12;
  const char *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  _BYTE buf[12];
  __int16 v20;
  int v21;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v7;
    v20 = 1026;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,hasAirborneClient,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v12 = *(_QWORD *)a2;
    v15 = 134349312;
    v16 = v12;
    v17 = 1026;
    v18 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct,%{public}.3f,hasAirborneClient,%{public}d", &v15, 18);
    v14 = (char *)v13;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::airborneClientUpdate(const CFTimeInterval &, BOOL)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *(_BYTE *)(a1 + 2073) = a3;
  v8 = *(_DWORD *)(a1 + 1912);
  if (a3)
  {
    if (v8 >= 8 && v8 != 10)
      return sub_100E0F448(a1, a2);
    *(_DWORD *)(a1 + 1912) = 8;
    v9 = *a2;
    v15 = 8;
    *(_QWORD *)buf = &v15;
    v10 = sub_10021083C((uint64_t **)(a1 + 1888), &v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
LABEL_11:
    *((double *)v10 + 5) = v9;
    return sub_100E0F448(a1, a2);
  }
  if (v8 >= 8 && v8 != 10)
  {
    *(_DWORD *)(a1 + 1912) = 0;
    v9 = *a2;
    v15 = 0;
    *(_QWORD *)buf = &v15;
    v10 = sub_10021083C((uint64_t **)(a1 + 1888), &v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    goto LABEL_11;
  }
  return sub_100E0F448(a1, a2);
}

void sub_100E24F74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E24F80(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  double v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  int v17;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  *(_BYTE *)(a1 + 2074) = a2;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v6 = sub_100B30608(v5, buf);
    *(_DWORD *)buf = 134349312;
    v15 = v6;
    v16 = 1026;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,hasFitnessClient,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v7 = qword_1022A01B8;
    v10 = 134349312;
    v11 = sub_1005EEB24();
    v12 = 1026;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "#fusion,mct,%{public}.3f,hasFitnessClient,%{public}d", &v10, 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::fitnessClientUpdate(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100E25178(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E25184(uint64_t a1, char a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  double v41;
  _BYTE v42[10];
  __int16 v43;
  _BYTE v44[18];
  uint8_t buf[4];
  _BYTE v46[38];
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  *(_BYTE *)(a1 + 2088) = a2;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 2088);
    v6 = *(_QWORD *)(a1 + 2096);
    v7 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v8 = sub_100B30608(v7, buf);
    v9 = sub_100B303DC();
    v10 = sub_100B309E0(v9);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)v46 = v5;
    *(_WORD *)&v46[4] = 2050;
    *(_QWORD *)&v46[6] = v6;
    *(_WORD *)&v46[14] = 2050;
    *(double *)&v46[16] = v8;
    *(_WORD *)&v46[24] = 2050;
    *(double *)&v46[26] = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#fusion, update WiFi AP association state,associated,%{public}d,last association time mct,%{public}.3f,now_mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v16 = qword_1022A01B8;
    v17 = *(unsigned __int8 *)(a1 + 2088);
    v18 = *(_QWORD *)(a1 + 2096);
    v19 = sub_1005EEB24();
    v20 = sub_100B303DC();
    LODWORD(v41) = 67240960;
    HIDWORD(v41) = v17;
    *(_WORD *)v42 = 2050;
    *(_QWORD *)&v42[2] = v18;
    v43 = 2050;
    *(double *)v44 = v19;
    *(_WORD *)&v44[8] = 2050;
    *(_QWORD *)&v44[10] = sub_100B309E0(v20);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "#fusion, update WiFi AP association state,associated,%{public}d,last association time mct,%{public}.3f,now_mct,%{public}.3f,propagation_us,%{public}.3f", &v41, 38);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::associatedWiFiAPStateUpdate(BOOL)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  *(_QWORD *)(a1 + 2120) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2104) = 0u;
  if (*(_BYTE *)(a1 + 2088))
  {
    v11 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 2096) = sub_100B30608(v11, buf);
    *(_OWORD *)(a1 + 2104) = *(_OWORD *)(a1 + 992);
    sub_1005E2284(*(_QWORD *)(a1 + 1696) + 232);
  }
  else
  {
    sub_100E216B8(*(_QWORD *)(a1 + 1696), (uint64_t)&v41);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v12 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v13 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v14 = sub_100B30608(v13, buf);
      v15 = *(double *)(a1 + 2096);
      *(_DWORD *)buf = 134350336;
      *(double *)v46 = v14;
      *(_WORD *)&v46[8] = 2050;
      *(double *)&v46[10] = v15;
      *(_WORD *)&v46[18] = 2050;
      *(_QWORD *)&v46[20] = *(_QWORD *)v42;
      *(_WORD *)&v46[28] = 2050;
      *(_QWORD *)&v46[30] = *(_QWORD *)&v44[4];
      v47 = 2050;
      v48 = v41;
      v49 = 2050;
      v50 = v41 - v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#fusion,now_mct,%{public}.3f,WiFi AP disassociates,last association time mct,%{public}.3f,IODistanceMoved_m,%{public}.1f,IODistanceMovedInterval_s,%{public}.1f,lastIOTimestamp_mct,%{public}.3f,IOAgeSinceAssociated_s,%{public}.2f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v23 = qword_1022A01B8;
      v24 = sub_1005EEB24();
      v25 = *(double *)(a1 + 2096);
      v29 = 134350336;
      v30 = v24;
      v31 = 2050;
      v32 = v25;
      v33 = 2050;
      v34 = *(_QWORD *)v42;
      v35 = 2050;
      v36 = *(_QWORD *)&v44[4];
      v37 = 2050;
      v38 = v41;
      v39 = 2050;
      v40 = v41 - v25;
      LODWORD(v28) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "#fusion,now_mct,%{public}.3f,WiFi AP disassociates,last association time mct,%{public}.3f,IODistanceMoved_m,%{public}.1f,IODistanceMovedInterval_s,%{public}.1f,lastIOTimestamp_mct,%{public}.3f,IOAgeSinceAssociated_s,%{public}.2f", &v29, v28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::associatedWiFiAPStateUpdate(BOOL)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
}

void sub_100E2560C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E25618(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  *(_BYTE *)(a1 + 2075) = a2;
  v4 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  *(double *)(a1 + 2080) = sub_100B30608(v4, buf);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v5 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 2080);
    v7 = *(unsigned __int8 *)(a1 + 2075);
    v8 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)buf = 134349568;
    v21 = v6;
    v22 = 1026;
    v23 = v7;
    v24 = 1026;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,IsInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v9 = *(_QWORD *)(a1 + 2080);
    v10 = *(unsigned __int8 *)(a1 + 2075);
    v11 = *(unsigned __int8 *)(a1 + 2076);
    v14 = 134349568;
    v15 = v9;
    v16 = 1026;
    v17 = v10;
    v18 = 1026;
    v19 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,mct_now,%{public}.3f,IsInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", &v14, 24);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::feedInAVisit(const BOOL)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  *(_BYTE *)(a1 + 2076) = 0;
  sub_10094C844(a1 + 2248, a2);
}

void sub_100E25844(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E25850(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  double v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v2 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v4 = sub_100B30608(v3, buf);
    v5 = *(_QWORD *)(a1 + 2080);
    v6 = *(unsigned __int8 *)(a1 + 2075);
    v7 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)buf = 134349824;
    v24 = v4;
    v25 = 2050;
    v26 = v5;
    v27 = 1026;
    v28 = v6;
    v29 = 1026;
    v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,received LikelyOutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v8 = qword_1022A01B8;
    v9 = sub_1005EEB24();
    v10 = *(_QWORD *)(a1 + 2080);
    v11 = *(unsigned __int8 *)(a1 + 2075);
    v12 = *(unsigned __int8 *)(a1 + 2076);
    v15 = 134349824;
    v16 = v9;
    v17 = 2050;
    v18 = v10;
    v19 = 1026;
    v20 = v11;
    v21 = 1026;
    v22 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#fusion,mct_now,%{public}.3f,received LikelyOutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", &v15, 34);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::feedLikelyOutOfAVisit()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *(_BYTE *)(a1 + 2076) = 1;
  sub_10094CA14(a1 + 2248);
}

void sub_100E25A90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E25A9C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  double v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  if (*(_DWORD *)(a1 + 2152) != 4)
    sub_100E0D790(a1);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v2 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v4 = sub_100B30608(v3, buf);
    v5 = *(_QWORD *)(a1 + 2080);
    v6 = *(unsigned __int8 *)(a1 + 2075);
    v7 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)buf = 134349824;
    v24 = v4;
    v25 = 2050;
    v26 = v5;
    v27 = 1026;
    v28 = v6;
    v29 = 1026;
    v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,received OutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v8 = qword_1022A01B8;
    v9 = sub_1005EEB24();
    v10 = *(_QWORD *)(a1 + 2080);
    v11 = *(unsigned __int8 *)(a1 + 2075);
    v12 = *(unsigned __int8 *)(a1 + 2076);
    v15 = 134349824;
    v16 = v9;
    v17 = 2050;
    v18 = v10;
    v19 = 1026;
    v20 = v11;
    v21 = 1026;
    v22 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#fusion,mct_now,%{public}.3f,received OutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", &v15, 34);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusion::feedOutOfAVisit()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *(_WORD *)(a1 + 2075) = 0;
  sub_10094CD38(a1 + 2248);
}

void sub_100E25CDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

long double sub_100E25CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011E634((double *)(a1 + 1800), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a3 + 24), *(double *)(a3 + 32), 0.0);
}

BOOL sub_100E25D10(uint64_t a1, double *a2, double *a3, double *a4)
{
  double *v7;
  double *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  double v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  _BOOL8 result;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  double v24;
  int8x16_t v25;
  uint64_t v26;
  int8x16_t v27;
  double v28;
  _WORD v29[8];
  double v30;
  double v31;
  uint8_t buf[1640];

  v30 = 0.0;
  v31 = 0.0;
  v7 = (double *)(a1 + 1800);
  if (a2[7] <= 0.0)
    v8 = a3;
  else
    v8 = a2;
  if ((sub_1000F3890(v7, &v31, &v30, a2[3], v8[6]) & 1) != 0)
  {
    v13 = a2[3];
    *(double *)v10.i64 = a2[4] * 0.0174532925;
    v14 = a3[3];
    *(double *)v12.i64 = a3[4] * 0.0174532925;
    v11.i64[0] = 0x400921FB54442D18;
    v27 = v11;
    if (fabs(*(double *)v10.i64) > 3.14159265)
    {
      v15.f64[0] = NAN;
      v15.f64[1] = NAN;
      v23 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v15), v11, v10).i64;
      v25 = v12;
      *(double *)v9.i64 = fmod(*(double *)v10.i64 + v23, 6.28318531);
      v12 = v25;
      v11 = v27;
      *(double *)v10.i64 = *(double *)v9.i64 - v23;
    }
    if (fabs(*(double *)v12.i64) > *(double *)v11.i64)
    {
      v16.f64[0] = NAN;
      v16.f64[1] = NAN;
      v24 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v16), v11, v12).i64;
      v26 = v10.i64[0];
      *(double *)v9.i64 = fmod(*(double *)v12.i64 + v24, 6.28318531);
      v10.i64[0] = v26;
      v11 = v27;
      *(double *)v12.i64 = *(double *)v9.i64 - v24;
    }
    *(double *)v9.i64 = *(double *)v10.i64 - *(double *)v12.i64;
    if (vabdd_f64(*(double *)v10.i64, *(double *)v12.i64) > *(double *)v11.i64)
    {
      v17.f64[0] = NAN;
      v17.f64[1] = NAN;
      v28 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v17), v11, v9).i64;
      *(double *)v9.i64 = fmod(*(double *)v9.i64 + v28, 6.28318531) - v28;
    }
    v18 = a2[5] * a2[5] * 0.5 + a3[5] * a3[5] * 0.5;
    if (v18 != 0.0)
    {
      *a4 = sqrt(1.0 / v18 * ((v13 - v14) * 0.0174532925 * v31 * ((v13 - v14) * 0.0174532925 * v31))+ *(double *)v9.i64* 57.2957795* 0.0174532925* v30* (*(double *)v9.i64* 57.2957795* 0.0174532925* v30)* (1.0/ v18));
      return 1;
    }
    return 0;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10218A448);
  v20 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error, calc_dNdE failed.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v29[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error, calc_dNdE failed.", v29, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::computeInterHypothesisMahalanobisDistance(const LCFusionProviderLocation &, const LCFusionProviderLocation &, double &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
    return 0;
  }
  return result;
}

void sub_100E26024(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100E26030(uint64_t a1, _DWORD *a2, char **a3, double **a4)
{
  uint64_t *v4;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v43;
  double v44;
  uint64_t (**v45)();
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  int v52;
  char v53;
  int v54;
  uint64_t (**v55)();
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  int v62;
  char v63;
  int v64;

  *a2 = 0;
  a3[1] = *a3;
  a4[1] = *a4;
  v4 = *(uint64_t **)(a1 + 240);
  if (v4)
  {
    v39 = (uint64_t)(a3 + 2);
    v40 = (uint64_t)(a4 + 2);
    __asm { FMOV            V0.2D, #-1.0 }
    v43 = _Q0;
    do
    {
      v55 = off_1021B4BA0;
      v56 = v43;
      v57 = xmmword_101BAFC90;
      v58 = xmmword_101BAFC90;
      v59 = v43;
      v60 = v43;
      v61 = 0xBFF0000000000000;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        v12 = v4[6];
        if (v12)
        {
          if (*(_BYTE *)(*(_QWORD *)(v4[2] + 8 * ((v12 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v12 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            if (sub_100727EB0((uint64_t)(v4 + 7), (uint64_t)&v55))
            {
              if (*(double *)&v57 > 0.0)
              {
                ++*a2;
                v13 = (uint64_t *)*v4;
                if (*v4)
                {
                  do
                  {
                    while (1)
                    {
                      v45 = off_1021B4BA0;
                      v46 = v43;
                      v47 = xmmword_101BAFC90;
                      v48 = xmmword_101BAFC90;
                      v49 = v43;
                      v50 = v43;
                      v51 = 0xBFF0000000000000;
                      v52 = 0;
                      v53 = 0;
                      v54 = 0;
                      if (*((_DWORD *)v13 + 167))
                      {
                        v14 = v13[6];
                        if (v14)
                        {
                          if (*(_BYTE *)(*(_QWORD *)(v13[2] + 8 * ((v14 + v13[5] - 1) / 0x17uLL))
                                        + 176 * ((v14 + v13[5] - 1) % 0x17uLL)
                                        + 168)
                            && sub_100727EB0((uint64_t)(v13 + 7), (uint64_t)&v45)
                            && *(double *)&v47 > 0.0)
                          {
                            break;
                          }
                        }
                      }
                      v13 = (uint64_t *)*v13;
                      if (!v13)
                        goto LABEL_51;
                    }
                    v15 = sub_100E25CE8(a1, (uint64_t)&v55, (uint64_t)&v45);
                    v16 = v15;
                    v44 = v15;
                    v18 = a4[1];
                    v17 = (unint64_t)a4[2];
                    if ((unint64_t)v18 >= v17)
                    {
                      v20 = *a4;
                      v21 = v18 - *a4;
                      v22 = v21 + 1;
                      if ((unint64_t)(v21 + 1) >> 61)
                        goto LABEL_53;
                      v23 = v17 - (_QWORD)v20;
                      if (v23 >> 2 > v22)
                        v22 = v23 >> 2;
                      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                        v24 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v24 = v22;
                      if (v24)
                      {
                        v25 = (char *)sub_10025E6A0(v40, v24);
                        v20 = *a4;
                        v18 = a4[1];
                      }
                      else
                      {
                        v25 = 0;
                      }
                      v26 = (double *)&v25[8 * v21];
                      *v26 = v16;
                      v19 = v26 + 1;
                      while (v18 != v20)
                      {
                        v27 = *((_QWORD *)v18-- - 1);
                        *((_QWORD *)v26-- - 1) = v27;
                      }
                      *a4 = v26;
                      a4[1] = v19;
                      a4[2] = (double *)&v25[8 * v24];
                      if (v20)
                        operator delete(v20);
                    }
                    else
                    {
                      *v18 = v15;
                      v19 = v18 + 1;
                    }
                    a4[1] = v19;
                    if (sub_100E25D10(a1, (double *)&v55, (double *)&v45, &v44))
                    {
                      v29 = a3[1];
                      v28 = (unint64_t)a3[2];
                      if ((unint64_t)v29 >= v28)
                      {
                        v31 = *a3;
                        v32 = (v29 - *a3) >> 3;
                        v33 = v32 + 1;
                        if ((unint64_t)(v32 + 1) >> 61)
LABEL_53:
                          sub_100259694();
                        v34 = v28 - (_QWORD)v31;
                        if (v34 >> 2 > v33)
                          v33 = v34 >> 2;
                        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                          v35 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v35 = v33;
                        if (v35)
                        {
                          v36 = (char *)sub_10025E6A0(v39, v35);
                          v31 = *a3;
                          v29 = a3[1];
                        }
                        else
                        {
                          v36 = 0;
                        }
                        v37 = &v36[8 * v32];
                        *(double *)v37 = v44;
                        v30 = v37 + 8;
                        while (v29 != v31)
                        {
                          v38 = *((_QWORD *)v29 - 1);
                          v29 -= 8;
                          *((_QWORD *)v37 - 1) = v38;
                          v37 -= 8;
                        }
                        *a3 = v37;
                        a3[1] = v30;
                        a3[2] = &v36[8 * v35];
                        if (v31)
                          operator delete(v31);
                      }
                      else
                      {
                        *(double *)v29 = v44;
                        v30 = v29 + 8;
                      }
                      a3[1] = v30;
                    }
                    v13 = (uint64_t *)*v13;
                  }
                  while (v13);
                }
              }
            }
          }
        }
      }
LABEL_51:
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_100E263E0(uint64_t a1, double *a2, char **a3, double **a4)
{
  uint64_t *v4;
  __int128 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  double *v31;
  double *v32;
  double *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  double v44;
  uint64_t (**v45)();
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  int v52;
  char v53;
  int v54;

  a3[1] = *a3;
  a4[1] = *a4;
  v4 = *(uint64_t **)(a1 + 240);
  if (v4 && a2[5] > 0.0)
  {
    v41 = (uint64_t)(a3 + 2);
    v42 = (uint64_t)(a4 + 2);
    __asm { FMOV            V1.2D, #-1.0 }
    v14 = xmmword_101BAFC90;
    v43 = _Q1;
    do
    {
      v45 = off_1021B4BA0;
      v46 = _Q1;
      v47 = v14;
      v48 = v14;
      v49 = _Q1;
      v50 = _Q1;
      v51 = 0xBFF0000000000000;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        v15 = v4[6];
        if (v15)
        {
          if (*(_BYTE *)(*(_QWORD *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v15 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            v16 = sub_100727EB0((uint64_t)(v4 + 7), (uint64_t)&v45);
            v14 = xmmword_101BAFC90;
            _Q1 = v43;
            if (v16)
            {
              if (*(double *)&v47 > 0.0)
              {
                v44 = 0.0;
                if (sub_100E25D10(a1, a2, (double *)&v45, &v44))
                {
                  v18 = a3[1];
                  v17 = (unint64_t)a3[2];
                  if ((unint64_t)v18 >= v17)
                  {
                    v20 = *a3;
                    v21 = (v18 - *a3) >> 3;
                    v22 = v21 + 1;
                    if ((unint64_t)(v21 + 1) >> 61)
                      goto LABEL_46;
                    v23 = v17 - (_QWORD)v20;
                    if (v23 >> 2 > v22)
                      v22 = v23 >> 2;
                    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                      v24 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v24 = v22;
                    if (v24)
                    {
                      v25 = (char *)sub_10025E6A0(v41, v24);
                      v20 = *a3;
                      v18 = a3[1];
                    }
                    else
                    {
                      v25 = 0;
                    }
                    v26 = &v25[8 * v21];
                    *(double *)v26 = v44;
                    v19 = v26 + 8;
                    while (v18 != v20)
                    {
                      v27 = *((_QWORD *)v18 - 1);
                      v18 -= 8;
                      *((_QWORD *)v26 - 1) = v27;
                      v26 -= 8;
                    }
                    *a3 = v26;
                    a3[1] = v19;
                    a3[2] = &v25[8 * v24];
                    if (v20)
                      operator delete(v20);
                  }
                  else
                  {
                    *(double *)v18 = v44;
                    v19 = v18 + 8;
                  }
                  a3[1] = v19;
                }
                v28 = sub_100E25CE8(a1, (uint64_t)a2, (uint64_t)&v45);
                v29 = v28;
                v44 = v28;
                v31 = a4[1];
                v30 = (unint64_t)a4[2];
                if ((unint64_t)v31 >= v30)
                {
                  v33 = *a4;
                  v34 = v31 - *a4;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 61)
LABEL_46:
                    sub_100259694();
                  v36 = v30 - (_QWORD)v33;
                  if (v36 >> 2 > v35)
                    v35 = v36 >> 2;
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                    v37 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v35;
                  if (v37)
                  {
                    v38 = (char *)sub_10025E6A0(v42, v37);
                    v33 = *a4;
                    v31 = a4[1];
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = (double *)&v38[8 * v34];
                  *v39 = v29;
                  v32 = v39 + 1;
                  while (v31 != v33)
                  {
                    v40 = *((_QWORD *)v31-- - 1);
                    *((_QWORD *)v39-- - 1) = v40;
                  }
                  *a4 = v39;
                  a4[1] = v32;
                  a4[2] = (double *)&v38[8 * v37];
                  if (v33)
                    operator delete(v33);
                }
                else
                {
                  *v31 = v28;
                  v32 = v31 + 1;
                }
                v14 = xmmword_101BAFC90;
                _Q1 = v43;
                a4[1] = v32;
              }
            }
          }
        }
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_100E266E0(uint64_t a1, double *a2, char **a3, char **a4)
{
  uint64_t *v4;
  __int128 v14;
  uint64_t v15;
  int v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  double v49;
  uint64_t (**v50)();
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  int v57;
  char v58;
  int v59;

  a3[1] = *a3;
  a4[1] = *a4;
  v4 = *(uint64_t **)(a1 + 240);
  if (v4 && a2[5] > 0.0)
  {
    v46 = (uint64_t)(a3 + 2);
    v47 = (uint64_t)(a4 + 2);
    __asm { FMOV            V1.2D, #-1.0 }
    v14 = xmmword_101BAFC90;
    v48 = _Q1;
    do
    {
      v50 = off_1021B4BA0;
      v51 = _Q1;
      v52 = v14;
      v53 = v14;
      v54 = _Q1;
      v55 = _Q1;
      v56 = 0xBFF0000000000000;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        v15 = v4[6];
        if (v15)
        {
          if (*(_BYTE *)(*(_QWORD *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v15 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            v16 = sub_100727EB0((uint64_t)(v4 + 7), (uint64_t)&v50);
            v14 = xmmword_101BAFC90;
            _Q1 = v48;
            if (v16)
            {
              if (*(double *)&v52 > 0.0)
              {
                v49 = 0.0;
                if (sub_100E25D10(a1, a2, (double *)&v50, &v49))
                {
                  v17 = v49;
                  v18 = v52;
                  v20 = a3[1];
                  v19 = (unint64_t)a3[2];
                  if ((unint64_t)v20 >= v19)
                  {
                    v22 = (v20 - *a3) >> 4;
                    v23 = v22 + 1;
                    if ((unint64_t)(v22 + 1) >> 60)
                      goto LABEL_46;
                    v24 = v19 - (_QWORD)*a3;
                    if (v24 >> 3 > v23)
                      v23 = v24 >> 3;
                    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
                      v25 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v25 = v23;
                    if (v25)
                      v26 = (char *)sub_10028E224(v46, v25);
                    else
                      v26 = 0;
                    v27 = &v26[16 * v22];
                    *(double *)v27 = v17;
                    *((_QWORD *)v27 + 1) = v18;
                    v29 = *a3;
                    v28 = a3[1];
                    v30 = v27;
                    if (v28 != *a3)
                    {
                      do
                      {
                        *((_OWORD *)v30 - 1) = *((_OWORD *)v28 - 1);
                        v30 -= 16;
                        v28 -= 16;
                      }
                      while (v28 != v29);
                      v28 = *a3;
                    }
                    v21 = v27 + 16;
                    *a3 = v30;
                    a3[1] = v27 + 16;
                    a3[2] = &v26[16 * v25];
                    if (v28)
                      operator delete(v28);
                  }
                  else
                  {
                    *(double *)v20 = v49;
                    *((_QWORD *)v20 + 1) = v18;
                    v21 = v20 + 16;
                  }
                  a3[1] = v21;
                }
                v31 = sub_100E25CE8(a1, (uint64_t)a2, (uint64_t)&v50);
                v32 = v31;
                v49 = v31;
                v33 = v52;
                v35 = (unint64_t)a4[1];
                v34 = (unint64_t)a4[2];
                if (v35 >= v34)
                {
                  v37 = (uint64_t)(v35 - (_QWORD)*a4) >> 4;
                  v38 = v37 + 1;
                  if ((unint64_t)(v37 + 1) >> 60)
LABEL_46:
                    sub_100259694();
                  v39 = v34 - (_QWORD)*a4;
                  if (v39 >> 3 > v38)
                    v38 = v39 >> 3;
                  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
                    v40 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v40 = v38;
                  if (v40)
                    v41 = (char *)sub_10028E224(v47, v40);
                  else
                    v41 = 0;
                  v42 = &v41[16 * v37];
                  *(double *)v42 = v32;
                  *((_QWORD *)v42 + 1) = v33;
                  v44 = *a4;
                  v43 = a4[1];
                  v45 = v42;
                  if (v43 != *a4)
                  {
                    do
                    {
                      *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
                      v45 -= 16;
                      v43 -= 16;
                    }
                    while (v43 != v44);
                    v43 = *a4;
                  }
                  v36 = v42 + 16;
                  *a4 = v45;
                  a4[1] = v42 + 16;
                  a4[2] = &v41[16 * v40];
                  if (v43)
                    operator delete(v43);
                }
                else
                {
                  *(double *)v35 = v31;
                  *(_QWORD *)(v35 + 8) = v33;
                  v36 = (char *)(v35 + 16);
                }
                v14 = xmmword_101BAFC90;
                _Q1 = v48;
                a4[1] = v36;
              }
            }
          }
        }
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_100E26A14(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t sub_100E26A40(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = (void **)a1[2];
  if (v5 == v4)
  {
    v6 = a1 + 5;
    v5 = (void **)a1[1];
  }
  else
  {
    v6 = a1 + 5;
    v7 = a1[4];
    v8 = &v4[v7 / 0x17];
    v9 = (unint64_t)*v8;
    v10 = (unint64_t)*v8 + 176 * (v7 % 0x17);
    v11 = (unint64_t)v4[(a1[5] + v7) / 0x17] + 176 * ((a1[5] + v7) % 0x17);
    if (v10 != v11)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 + 24);
        if (v12)
        {
          std::__shared_weak_count::__release_weak(v12);
          v9 = (unint64_t)*v8;
        }
        v10 += 176;
        if (v10 - v9 == 4048)
        {
          v13 = (unint64_t)v8[1];
          ++v8;
          v9 = v13;
          v10 = v13;
        }
      }
      while (v10 != v11);
      v4 = (void **)a1[1];
      v5 = (void **)a1[2];
    }
  }
  *v6 = 0;
  v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v15 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v14 = v15 - (_QWORD)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 11;
    goto LABEL_16;
  }
  if (v14 >> 3 == 2)
  {
    v16 = 23;
LABEL_16:
    a1[4] = v16;
  }
  sub_100E26BA4(a1);
  result = sub_100E26CD4((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100E26BA4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_100A0EFD8((uint64_t)a1, 0);
    sub_100A0F034(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_100E26C14((uint64_t)a1);
}

void sub_100E26C14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_100E26CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100E26C14(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100E26D40(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *a2;
  v4 = *a2 + 1;
  *a2 = (_QWORD *)**a2;
  sub_100261F44((uint64_t)(v3 + 74));
  sub_1008AF650(v4);
  operator delete(v3);
  return (uint64_t)*a2;
}

_QWORD *sub_100E26D90(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v3 = a2[4];
    v4 = a2[1];
    if (a2[2] == v4)
    {
      v5 = 0;
      v8 = 0;
      v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0x17));
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 8 * (v3 / 0x17)) + 176 * (v3 % 0x17);
      v6 = a2[5] + v3;
      v7 = (_QWORD *)(v4 + 8 * (v6 / 0x17));
      v8 = *v7 + 176 * (v6 % 0x17);
    }
    sub_100E26E5C(a1, (uint64_t *)(v4 + 8 * (v3 / 0x17)), v5, v7, v8);
  }
  return a1;
}

_QWORD *sub_100E26E5C(_QWORD *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 23 * (a4 - a2) + 0x2E8BA2E8BA2E8BA3 * ((a5 - *a4) >> 4) - 0x2E8BA2E8BA2E8BA3 * ((a3 - *a2) >> 4);
  return sub_100E26EC0(a1, a2, a3, v5);
}

_QWORD *sub_100E26EC0(_QWORD *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v8 = a1[5];
  if (v8 >= a4)
  {
    v15 = a1[4];
    v16 = a1[1];
    v17 = (uint64_t *)(v16 + 8 * (v15 / 0x17));
    if (a1[2] == v16)
      v18 = 0;
    else
      v18 = *v17 + 176 * (v15 % 0x17);
    v22 = a2;
    v23 = a3;
    sub_10081F17C(&v22, a4);
    v20 = v22;
    v21 = v23;
    v22 = v17;
    v23 = v18;
    sub_100E27410(a2, a3, v20, v21, (uint64_t)&v22);
    return (_QWORD *)sub_100E27228((uint64_t)a1, v22, v23);
  }
  else
  {
    v22 = a2;
    v23 = a3;
    sub_10081F17C(&v22, v8);
    v9 = v22;
    v10 = v23;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (uint64_t *)(v12 + 8 * (v11 / 0x17));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *v13 + 176 * (v11 % 0x17);
    v22 = v13;
    v23 = v14;
    sub_100E27410(a2, a3, v9, v10, (uint64_t)&v22);
    return sub_100E27028(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_100E27028(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 23 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100E2766C(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x17));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 176 * (v11 % 0x17);
  v31 = (_QWORD *)(v8 + 8 * (v11 / 0x17));
  v32 = v14;
  result = sub_10081F17C(&v31, a4);
  v16 = v32;
  if (v14 != v32)
  {
    v17 = v31;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4048;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = v14;
        do
        {
          *(_OWORD *)v19 = *(_OWORD *)a3;
          *(_QWORD *)(v19 + 16) = *(_QWORD *)(a3 + 16);
          v20 = *(_QWORD *)(a3 + 24);
          *(_QWORD *)(v19 + 24) = v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 16);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          *(_QWORD *)(v19 + 32) = off_1021B4BA0;
          v23 = *(_OWORD *)(a3 + 40);
          v24 = *(_OWORD *)(a3 + 56);
          v25 = *(_OWORD *)(a3 + 72);
          *(_OWORD *)(v19 + 88) = *(_OWORD *)(a3 + 88);
          *(_OWORD *)(v19 + 72) = v25;
          *(_OWORD *)(v19 + 56) = v24;
          *(_OWORD *)(v19 + 40) = v23;
          v26 = *(_OWORD *)(a3 + 104);
          v27 = *(_OWORD *)(a3 + 120);
          v28 = *(_OWORD *)(a3 + 136);
          *(_OWORD *)(v19 + 148) = *(_OWORD *)(a3 + 148);
          *(_OWORD *)(v19 + 136) = v28;
          *(_OWORD *)(v19 + 120) = v27;
          *(_OWORD *)(v19 + 104) = v26;
          *(_WORD *)(v19 + 168) = *(_WORD *)(a3 + 168);
          a3 += 176;
          if (a3 - *a2 == 4048)
          {
            v29 = a2[1];
            ++a2;
            a3 = v29;
          }
          v19 += 176;
        }
        while (v19 != v18);
      }
      a1[5] += 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v18 - v14) >> 4);
      if (v13 == v17)
        break;
      v30 = v13[1];
      ++v13;
      v14 = v30;
    }
    while (v30 != v16);
  }
  return result;
}

uint64_t sub_100E27228(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x17));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 176 * (v5 % 0x17);
  if (v9 != a3)
  {
    v10 = (a3 - *a2) >> 4;
    v11 = 23 * (v8 - a2) + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - *v8) >> 4) - 0x2E8BA2E8BA2E8BA3 * v10;
    if (v11 >= 1)
    {
      v12 = (_QWORD *)(v6 + 8 * (v4 / 0x17));
      if (v7 == v6)
        v13 = 0;
      else
        v13 = *v12 + 176 * (v4 % 0x17);
      if (a3 == v13)
        v14 = 0;
      else
        v14 = 23 * (a2 - v12) + 0x2E8BA2E8BA2E8BA3 * v10 - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 4);
      v19 = v12;
      v20 = v13;
      sub_10081F17C(&v19, v14);
      v15 = v20;
      if (v20 != v9)
      {
        v16 = v19;
        do
        {
          v17 = *(std::__shared_weak_count **)(v15 + 24);
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          v15 += 176;
          if (v15 - *v16 == 4048)
          {
            v18 = v16[1];
            ++v16;
            v15 = v18;
          }
        }
        while (v15 != v9);
      }
      v3[5] -= v11;
      do
        result = sub_100A0F034(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double sub_100E27410(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4048; ; i = v12 + 4048)
    {
      sub_100E274A0(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100E274A0(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t sub_100E274A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  result = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - a4 + 4048) >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4) < v10)
        v10 = 0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4);
      result = sub_100E27570(result, result + 176 * v10, a4);
      if (result == v8)
        break;
      v12 = *v5++;
      v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4048 == v11)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100E27570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100E275CC(a3, v4);
      v4 += 176;
      a3 += 176;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_100E275CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_OWORD *)(a2 + 56);
  v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 120);
  v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 136) = v14;
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  return a1;
}

void sub_100E2766C(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x17)
    v6 = v5 / 0x17 + 1;
  else
    v6 = v5 / 0x17;
  v7 = a1[4];
  if (v6 >= v7 / 0x17)
    v8 = v7 / 0x17;
  else
    v8 = v6;
  if (v6 <= v7 / 0x17)
  {
    for (a1[4] = v7 - 23 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFD0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFD0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 22;
          else
            v64 = 23;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 23 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -23 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFD0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100E27BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E27C30(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E27CFC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6));
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v8[2] = a2[2];
  v8[3] = v11;
  *v8 = v9;
  v8[1] = v10;
  v12 = a1[4];
  v13 = a1[5] + 1;
  a1[5] = v13;
  v14 = v12 + v13;
  v15 = a1[1];
  v16 = (_QWORD *)(v15 + 8 * (v14 >> 6));
  v17 = *v16 + ((v14 & 0x3F) << 6);
  if (a1[2] == v15)
    v17 = 0;
  if (v17 == *v16)
    v17 = *(v16 - 1) + 4096;
  return v17 - 64;
}

void sub_100E27CFC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100E27FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E28010(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100E28088(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 6);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100E2806C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100E28088(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_100259694();
  result = (char *)sub_10029D26C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t **sub_100E280DC(uint64_t **a1, double *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  uint64_t **v9;
  double v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((double *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x78uLL);
    v11[4] = **a4;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    v11[14] = 0;
    v11[5] = 0xBFF0000000000000;
    v11[7] = 0xBFF0000000000000;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_BYTE *)v11 + 112) = 1;
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100E281BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218A478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E281D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218A478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100E28204(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100E28214()
{
  operator delete();
}

uint64_t **sub_100E28228(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x30uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_100E2830C((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_100E2830C(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1008AF89C(v2 + 5);
    operator delete(v2);
  }
}

uint64_t *sub_100E28350(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  double v10;
  double v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((double *)v6 + 4);
        if (v10 >= v11)
          break;
        v6 = (uint64_t *)*v6;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_1005931B0((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_100E28434(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218A540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E28448(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218A540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100E2847C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100E2848C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218A590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E284A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218A590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100E284D4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **sub_100E284E4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x2F8uLL);
    *((_DWORD *)v11 + 8) = **a4;
    bzero(v11 + 5, 0x2D0uLL);
    sub_1008AF42C((uint64_t)(v11 + 5));
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

BOOL sub_100E285B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v2 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)buf = 67240192;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#fusion,purging,fused hypothesis with empty buffer is erased,hID,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v5 = *(_DWORD *)(a1 + 652);
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,fused hypothesis with empty buffer is erased,hID,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(const LCFusionLocationHypothesis &) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(_QWORD *)(a1 + 40) == 0;
}

uint64_t *sub_100E2877C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, a2);
  sub_100261F44((uint64_t)(a2 + 78));
  sub_1008AF650(a2 + 5);
  operator delete(a2);
  return v3;
}

void sub_100E287C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218A5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E287DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218A5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100E28810(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_100E28820(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10218A448);
    v2 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)buf = 67240192;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#fusion,purging,merged hypothesis with empty buffer is erased,hID,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10218A448);
      v5 = *(_DWORD *)(a1 + 652);
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#fusion,purging,merged hypothesis with empty buffer is erased,hID,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "auto cllcf::CLLCFusion::performHypothesesMerging()::(anonymous class)::operator()(const LCFusionLocationHypothesis &) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(_QWORD *)(a1 + 40) == 0;
}

void sub_100E289E4(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 1;
      v17 = (char *)sub_100260634(a1[4], v16);
      v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = (int *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        v22 = 4 * (v21 >> 2);
        v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          v24 = *v20++;
          *(_DWORD *)v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-4 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[4 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)v4 = *a2;
  a1[2] = v4 + 4;
}

uint64_t **sub_100E28AF0(uint64_t **a1, double *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  uint64_t **v9;
  double v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((double *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *((_QWORD *)v11 + 21) = 0;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100E28BD4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C28D10;
      v1[3] = unk_101C28D20;
      v1[4] = xmmword_101C28D30;
      v1[0] = xmmword_101C28CF0;
      v1[1] = unk_101C28D00;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100E28CA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E28CC0(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100E28DAC((uint64_t)a1, "MaxMetsProcessingHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10218A660;
  a1[9] = off_10218A718;
  sub_100E81598(a1 + 43, 0, 0);
  sub_100E81598(a1 + 45, 0, 0);
  sub_100E81598(a1 + 47, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100E28D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E28DAC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_10218A8F8;
  *(_QWORD *)(a1 + 72) = off_10218A9A0;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10218A8F8;
  *(_QWORD *)(a1 + 72) = off_10218A9A0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 12000;
  *(_QWORD *)(a1 + 272) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 280));
  *(_QWORD *)(a1 + 280) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100E29154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[34] = off_10213DEB0;
  sub_100427950(v27);
  sub_100427A00(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100E291F8()
{
  JUMPOUT(0x100E291D8);
}

_QWORD *sub_100E29200(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10218A9A0;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10218A8F8;
  a1[34] = off_10213DEB0;
  sub_100427950(a1 + 35);
  sub_100427A00(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100E29280(uint64_t a1)
{
  return sub_100E29200((_QWORD *)(a1 - 72));
}

void sub_100E29288(_QWORD *a1)
{
  sub_100E29200(a1);
  operator delete();
}

void sub_100E292AC(uint64_t a1)
{
  sub_100E29200((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100E292D4(uint64_t *a1, uint64_t a2)
{
  double Current;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 1.79769313e308 || !sub_10008950C(a1 + 9))
    return -1;
  sub_10001E638(a1[10]);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100087AF4(a1 + 43, &v13);
  v5 = (sqlite3_stmt *)sub_100026CC8(v13);
  if (sub_1000890C4(v5, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
  {
    v6 = a1[10];
    v7 = (sqlite3_stmt *)sub_100026CC8(v13);
    sub_10023C9B0(v6, v7);
    v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    v8 = -1;
  }
  sub_10001E99C(a1[10]);
  v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = *(_QWORD *)(v9 + 88);
  sub_100053048(v9, v10);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v8;
}

void sub_100E293DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29400(uint64_t a1, uint64_t a2)
{
  return sub_100E292D4((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100E29408(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from MaxMetsProcessingHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100E295DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29604(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  double v11;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v11 = sqlite3_column_double(v10, 4);
  result = 0;
  *(double *)(a2 + 32) = v11;
  return result;
}

uint64_t sub_100E296BC(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM MaxMetsProcessingHistory");
  return 0xFFFFFFFFLL;
}

void sub_100E2975C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29780(uint64_t a1)
{
  return sub_100E296BC(a1 - 72);
}

uint64_t sub_100E29788(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100E29818((uint64_t)a1);
    sub_100634364(a1[10], "MaxMetsProcessingHistory", (const char **)&off_10218A7A8, (const std::string::value_type **)&off_1022FBBE0, 0);
    a1[43] = sub_10063D314(a1[10], "DELETE FROM MaxMetsProcessingHistory WHERE endTime < ?");
    a1[44] = v3;
    a1[45] = sub_10063D314(a1[10], "SELECT * FROM MaxMetsProcessingHistory ORDER BY id DESC LIMIT 1");
    a1[46] = v4;
    result = sub_10063D314(a1[10], "UPDATE MaxMetsProcessingHistory SET startTime = ?, endTime = ?, maxMets = ?, lastUpdateTime = ? WHERE id = ?");
    a1[47] = result;
    a1[48] = v5;
  }
  return result;
}

BOOL sub_100E29818(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "MaxMetsProcessingHistory");
  if (result)
  {
    v3 = "lastUpdateTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "MaxMetsProcessingHistory", (uint64_t)"lastUpdateTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100E29B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  sub_1018B38B4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100E29C0C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM MaxMetsProcessingHistory");
  return result;
}

void sub_100E29CA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29CC0(uint64_t a1)
{
  return sub_100E29C0C(a1 - 72);
}

uint64_t sub_100E29CC8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM MaxMetsProcessingHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100E29D90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29DB0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE MaxMetsProcessingHistory SET startTime = startTime + ?, endTime = endTime + ?, lastUpdateTime = lastUpdateTime + ?");
  return result;
}

void sub_100E29E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29E98(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO MaxMetsProcessingHistory (startTime, endTime, maxMets, lastUpdateTime) VALUES (?, ?, ?, ?)");
  return result;
}

void sub_100E29F78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E29F98()
{
  return 0;
}

uint64_t sub_100E29FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 360), &v12);
  v4 = v12;
  if (v12)
  {
    v5 = sub_100E29604(&v12, a2);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218A8C8);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "MaxMetsProcessingRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10218A8C8);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "MaxMetsProcessingRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", &v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLMaxMetsProcessingRecorderDb::getMostRecentRecordUL(MaxMetsProcessing &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = 2;
  }
  v7 = v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v4)
    return 2;
  return v5;
}

void sub_100E2A190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E2A1C0(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A9E0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218A9E0);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<MaxMetsProcessing>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100E2B358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100E2B678(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10192CB64(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100E2B9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100E2BA28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10218A9E0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218A9E0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218A9E0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<MaxMetsProcessing>::setDatabaseAccessible() [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100E2C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100E2C048(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  char v33[8];
  double v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218A9E0);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218A9E0);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v34;
    v9 = v7 - v34;
    if (v7 - v34 < 0.0)
      v9 = -(v7 - v34);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218A9E0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v41 = v34;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218A9E0);
        v24 = *((_QWORD *)a2 + 1);
        v36 = 134349312;
        v37 = v34;
        v38 = 2050;
        v39 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v34;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218A9E0);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218A9E0);
          v27 = *((double *)a2 + 1);
          v36 = 134217984;
          v37 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10218A9E0);
        v18 = v32;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218A9E0);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_100E2C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E2C7B8(uint64_t a1)
{
  return sub_100E2BA28(a1 - 72);
}

void sub_100E2C7C0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100E2C7EC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10192CCD0(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100E2CAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100E2CB58(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10192CE3C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100E2CDB8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192CFA8(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100E2CFF0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192D114(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100E2D218(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100E2D244(uint64_t a1, char *a2)
{
  void *__p;
  void *v4[2];

  sub_1015A2E04(v4, a2);
  sub_1015A2E04(&__p, "");
  sub_100E2D2F0(a1, (uint64_t)v4);
}

void sub_100E2D2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100E2D2F0(uint64_t a1, uint64_t a2)
{
  void *v2[2];
  uint64_t v3;

  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  operator new();
}

void sub_100E2D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100E2D420(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  const char *v20;
  char *v21;
  int v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  _DWORD buf[3];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  *(_BYTE *)a1 = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 40) = 0x100000002;
  v9 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 96) = v11;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218AA50);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v13 = v9;
    if (*(char *)(a1 + 31) < 0)
      v13 = (_QWORD *)*v9;
    buf[0] = 136315650;
    *(_QWORD *)&buf[1] = v13;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218AA50);
    v16 = v9;
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v9;
    v23 = 136315650;
    v24 = v16;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Creating managed location database %s (count triggers %d, use cache %d)", (const char *)&v23, 24, v22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218AA50);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v15 = v9;
      if (*(char *)(a1 + 31) < 0)
        v15 = (_QWORD *)*v9;
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218AA50);
      v19 = v9;
      if (*(char *)(a1 + 31) < 0)
        v19 = (_QWORD *)*v9;
      v23 = 136315138;
      v24 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Data protection is enabled, creating in-memory database for table %s", (const char *)&v23);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]", "%s\n", v20);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_100E2DB14(a1, a3);
  }
  sub_10071ED88();
}

void sub_100E2DA90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

void sub_100E2DB14(uint64_t a1, char a2)
{
  void *__p[2];
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8[3];
  uint64_t v9;

  sub_1015A2E04(__p, "");
  v6 = 0;
  v5 = 0;
  v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4(v8, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    v8[2] = v4;
    v9 = 0;
  }
  sub_10071ED88();
}

void sub_100E2DBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E2DC30(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E2DC5C(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  int v5;
  void **v6;
  CLOSTransaction *v7;
  void **v8;
  void *__p[2];
  char v10;

  if (*(_QWORD *)(a1 + 88))
    sub_10192D560();
  if (*(char *)(a1 + 31) >= 0)
    v2 = *(unsigned __int8 *)(a1 + 31);
  else
    v2 = *(_QWORD *)(a1 + 16);
  v3 = __p;
  sub_100259584((uint64_t)__p, v2 + 17);
  if (v10 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0)
      v4 = (const void *)(a1 + 8);
    else
      v4 = *(const void **)(a1 + 8);
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  v5 = v10;
  v6 = (void **)__p[0];
  v7 = [CLOSTransaction alloc];
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  *(_QWORD *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_100E2DD60(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100E2DD8C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, float *a7@<X8>)
{
  const float *v8;
  int64x2_t v9;
  int64x2_t v10;
  float32x4_t v11;
  uint64_t v12;
  int64x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  unint64_t v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  float v50;
  unint64_t v51;
  unint64_t i;
  unint64_t v53;
  unint64_t v54;
  float v55;
  unint64_t v56;
  float j;
  float v58;
  BOOL v59;
  float v60;
  unint64_t k;
  unint64_t v62;
  float v63;
  float v64;
  unint64_t v65;
  uint64_t m;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t n;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t ii;
  float v80;
  unsigned __int8 v81;
  unint64_t v82;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  unint64_t v88;
  unint64_t v89;
  float v90;
  float v91;
  unint64_t v92;
  float v93;
  unint64_t v94;
  float v95;
  float v96;
  unint64_t jj;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  _BYTE v105[1024];
  float v106[1];
  float v107;
  _BYTE v108[1024];

  v8 = (const float *)&dword_102308988;
  v9 = (int64x2_t)xmmword_101C29080;
  v10 = (int64x2_t)xmmword_101B9ACD0;
  v11 = vld1q_dup_f32(v8);
  v12 = -512;
  v13 = vdupq_n_s64(4uLL);
  do
  {
    *(float32x4_t *)&v108[v12 + 1024] = vmulq_f32(v11, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v10)), vcvtq_f64_u64((uint64x2_t)v9)));
    v14 = vmulq_f32(*(float32x4_t *)(a1 + v12 + 512), *(float32x4_t *)(a1 + v12 + 512));
    *(float32x4_t *)&v108[v12 + 512] = v14;
    v15 = vmulq_f32(*(float32x4_t *)(a2 + v12 + 512), *(float32x4_t *)(a2 + v12 + 512));
    v16 = vmulq_f32(*(float32x4_t *)(a3 + v12 + 512), *(float32x4_t *)(a3 + v12 + 512));
    *(float32x4_t *)&v108[v12] = vaddq_f32(v15, v16);
    *(float32x4_t *)&v105[v12 + 1024] = vaddq_f32(vaddq_f32(v14, v15), v16);
    *(float32x4_t *)&v105[v12 + 512] = vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a4 + v12 + 512), *(float32x4_t *)(a4 + v12 + 512)), vmulq_f32(*(float32x4_t *)(a5 + v12 + 512), *(float32x4_t *)(a5 + v12 + 512))), vmulq_f32(*(float32x4_t *)(a6 + v12 + 512), *(float32x4_t *)(a6 + v12 + 512)));
    v9 = vaddq_s64(v9, v13);
    v10 = vaddq_s64(v10, v13);
    v12 += 16;
  }
  while (v12);
  v17 = atomic_load((unsigned __int8 *)&qword_102308998);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_102308998))
  {
    qword_102308990 = vcvtas_u32_f32(sub_100D043B4(50, 0x80uLL, 0.59));
    __cxa_guard_release(&qword_102308998);
  }
  v18 = atomic_load((unsigned __int8 *)&qword_1023089A8);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1023089A8))
  {
    qword_1023089A0 = vcvtas_u32_f32(sub_100D043B4(50, 0x80uLL, 4.3));
    __cxa_guard_release(&qword_1023089A8);
  }
  v19 = qword_102308990;
  v20 = qword_1023089A0;
  if (qword_102308990 <= (unint64_t)qword_1023089A0)
  {
    v22 = 0.0;
    v23 = qword_102308990;
    do
      v22 = v22 + v106[v23++];
    while (v23 <= qword_1023089A0);
    *a7 = v22;
    v21 = 0.0;
    if (v22 > 0.0)
    {
      do
        v21 = v21 + *(float *)&v108[4 * v19++];
      while (v19 <= v20);
      v21 = v21 / v22;
    }
  }
  else
  {
    *a7 = 0.0;
    v21 = 0.0;
  }
  a7[1] = v21;
  v24 = atomic_load((unsigned __int8 *)&qword_1023089B8);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1023089B8))
  {
    qword_1023089B0 = vcvtas_u32_f32(sub_100D043B4(50, 0x80uLL, 0.39));
    __cxa_guard_release(&qword_1023089B8);
  }
  v25 = atomic_load((unsigned __int8 *)&qword_1023089C8);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1023089C8))
  {
    qword_1023089C0 = vcvtas_u32_f32(sub_100D043B4(50, 0x80uLL, 3.12));
    __cxa_guard_release(&qword_1023089C8);
  }
  v26 = sub_100E2E71C(qword_1023089B0, qword_1023089C0, (uint64_t)v106, 128);
  v27 = v26 - 1;
  v28 = v26 + 1;
  if (v26 - 1 <= v26 + 1)
  {
    v31 = 0.0;
    v32 = v26 - 1;
    do
      v31 = v31 + v106[v32++];
    while (v32 <= v28);
    v30 = 0.0;
    v29 = 0.0;
    if (v31 > 0.0)
    {
      v33 = 0.0;
      v34 = v26 - 1;
      do
      {
        v33 = v33 + (float)(*(float *)&v108[4 * v34 + 512] * v106[v34]);
        ++v34;
      }
      while (v34 <= v28);
      v29 = v33 / v31;
    }
    a7[2] = v29;
    v35 = v26 - 1;
    do
      v30 = v30 + v106[v35++];
    while (v35 <= v28);
  }
  else
  {
    a7[2] = 0.0;
    v29 = 0.0;
    v30 = 0.0;
  }
  a7[3] = v30;
  v36 = (float)(v29 + v29) / *(float *)&dword_102308988;
  v37 = (float)((float)(v29 * 3.0) * 0.5) / *(float *)&dword_102308988;
  v38 = vcvtas_u32_f32(v36);
  v39 = v38 - 1;
  v40 = v38 + 1;
  v41 = v38;
  if (v38 - 1 <= v38 + 1)
  {
    v42 = v38 - 1;
    v41 = v38;
    do
    {
      if (v106[v42] > v106[v41])
        v41 = v42;
      ++v42;
    }
    while (v42 <= v40);
  }
  v43 = (float)(v26 + 3);
  v44 = vcvtas_u32_f32(v37);
  v45 = v44 - 1;
  v46 = v44 + 1;
  v47 = v44;
  if (v44 - 1 <= v44 + 1)
  {
    v48 = v44 - 1;
    v47 = v44;
    do
    {
      if (v106[v48] > v106[v47])
        v47 = v48;
      ++v48;
    }
    while (v48 <= v46);
  }
  v49 = 0.0;
  v50 = 0.0;
  if (v36 > v43)
  {
    v51 = v41 - 1;
    for (i = v41 + 1; v51 <= i; ++v51)
      v50 = v50 + v106[v51];
  }
  if (v37 > v43)
  {
    v53 = v47 - 1;
    v54 = v47 + 1;
    if (v53 <= v54)
    {
      v49 = 0.0;
      do
        v49 = v49 + v106[v53++];
      while (v53 <= v54);
    }
  }
  v55 = 0.0;
  if (v30 > 0.0)
  {
    if (v50 > v49)
      v49 = v50;
    v55 = v49 / v30;
  }
  a7[4] = v55;
  if (v27 <= v28)
  {
    v56 = v26;
    do
    {
      if (*(float *)&v105[4 * v27] > *(float *)&v105[4 * v56])
        v56 = v27;
      ++v27;
    }
    while (v27 <= v28);
    v27 = v56 - 1;
    v28 = v56 + 1;
  }
  for (j = 0.0; v27 <= v28; ++v27)
    j = j + *(float *)&v105[4 * v27];
  for (a7[5] = j; v39 <= v40; ++v39)
  {
    if (*(float *)&v105[4 * v39] > *(float *)&v105[4 * v38])
      v38 = v39;
  }
  for (; v45 <= v46; ++v45)
  {
    if (*(float *)&v105[4 * v45] > *(float *)&v105[4 * v44])
      v44 = v45;
  }
  v58 = 0.0;
  v59 = v36 > v43;
  v60 = 0.0;
  if (v59)
  {
    for (k = v38 - 1; k <= v38 + 1; ++k)
      v60 = v60 + *(float *)&v105[4 * k];
  }
  if (v37 > v43)
  {
    v62 = v44 - 1;
    if (v44 - 1 <= v44 + 1)
    {
      v58 = 0.0;
      do
        v58 = v58 + *(float *)&v105[4 * v62++];
      while (v62 <= v44 + 1);
    }
  }
  v63 = 0.0;
  v64 = 0.0;
  if (j > 0.0)
  {
    if (v60 <= v58)
      v60 = v58;
    v64 = v60 / j;
  }
  v65 = v26 + 2;
  a7[6] = v64;
  for (m = 1; m != 128; ++m)
    v63 = v63 + v106[m];
  v67 = 0.0;
  v68 = v107 + 0.0;
  a7[7] = v63;
  a7[8] = v68;
  v69 = v68 / v63;
  if (v63 <= 0.0)
    v69 = 0.0;
  a7[9] = v69;
  v70 = 0.0;
  if (v63 > 0.0)
    v70 = *a7 / v63;
  a7[10] = v70;
  for (n = 4; n != 512; n += 4)
    v67 = v67 + *(float *)&v105[n + 512];
  v72 = v30 / v63;
  v73 = 0.0;
  if (v63 <= 0.0)
    v72 = 0.0;
  v74 = v30 / v67;
  if (v67 <= 0.0)
    v74 = 0.0;
  a7[13] = v67;
  a7[14] = v74;
  a7[15] = v72;
  if (v65 >= 0xFF)
    v65 = 255;
  v75 = *(float *)&v105[4 * v26 + 1016];
  v76 = 0.0;
  if (v75 > 0.0)
    v76 = v106[v26] / v75;
  v77 = v106[v65];
  if (v77 > 0.0)
    v73 = v106[v26] / v77;
  if (v76 >= v73)
    v76 = v73;
  a7[11] = v76;
  v78 = 0.0;
  for (ii = 4; ii != 512; ii += 4)
    v78 = v78 + *(float *)&v105[ii];
  v80 = v78 / v63;
  if (v63 <= 0.0)
    v80 = 0.0;
  a7[12] = v80;
  v81 = atomic_load((unsigned __int8 *)&qword_1023089D8);
  if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_1023089D8))
  {
    qword_1023089D0 = vcvtas_u32_f32(sub_100D043B4(50, 0x80uLL, 10.0));
    __cxa_guard_release(&qword_1023089D8);
  }
  v82 = qword_1023089D0;
  v83 = qword_1023089D0;
  if ((unint64_t)qword_1023089D0 <= 0x7E)
  {
    v84 = &v106[qword_1023089D0];
    v85 = qword_1023089D0;
    v86 = qword_1023089D0;
    do
    {
      v87 = *v84;
      if (*v84 <= *(v84 - 1) || v87 <= v84[1] || (v83 = v85, v87 <= v106[v86]))
        v83 = v86;
      ++v85;
      ++v84;
      v86 = v83;
    }
    while (v85 != 127);
  }
  v88 = v83 - 1;
  v89 = v83 + 1;
  if (v83 - 1 <= (unint64_t)(v83 + 1))
  {
    v91 = 0.0;
    v92 = v83 - 1;
    do
      v91 = v91 + v106[v92++];
    while (v92 <= v89);
    v90 = 0.0;
    v93 = 0.0;
    if (v91 > 0.0)
    {
      v94 = v83 - 1;
      do
      {
        v93 = v93 + (float)(*(float *)&v108[4 * v94 + 512] * v106[v94]);
        ++v94;
      }
      while (v94 <= v89);
      v93 = v93 / v91;
    }
    a7[16] = v93;
    do
      v90 = v90 + v106[v88++];
    while (v88 <= v89);
  }
  else
  {
    a7[16] = 0.0;
    v90 = 0.0;
  }
  a7[17] = v90;
  if (v82 <= 0x7F)
  {
    v96 = 0.0;
    for (jj = v82; jj != 128; ++jj)
      v96 = v96 + v106[jj];
    a7[18] = v96;
    v98 = 0.0;
    do
      v98 = v98 + *(float *)&v105[4 * v82++];
    while (v82 != 128);
    v99 = v98 / v96;
    if (v96 <= 0.0)
      v99 = 0.0;
    a7[19] = v98;
    a7[20] = v99;
    v95 = v90 / v96;
    if (v96 <= 0.0)
      v95 = 0.0;
  }
  else
  {
    *((_QWORD *)a7 + 9) = 0;
    v95 = 0.0;
    a7[20] = 0.0;
  }
  a7[21] = v95;
  v100 = v83 + 2;
  if ((unint64_t)(v83 + 2) >= 0xFF)
    v100 = 255;
  v101 = *(float *)&v105[4 * v83 + 1016];
  v102 = 0.0;
  v103 = 0.0;
  if (v101 > 0.0)
    v103 = v106[v83] / v101;
  v104 = v106[v100];
  if (v104 > 0.0)
    v102 = v106[v83] / v104;
  if (v103 < v102)
    v102 = v103;
  a7[22] = v102;
}

void sub_100E2E6BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023089D8);
  _Unwind_Resume(a1);
}

unint64_t sub_100E2E71C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;

  if (a4 - 1 <= a2)
    sub_10192D718();
  if (a1 > a2)
    return a1;
  v5 = a1;
  do
  {
    v6 = (float *)(a3 + 4 * a1);
    v7 = *v6;
    if (*v6 <= *(v6 - 1) || v7 <= v6[1] || (v4 = a1, v7 <= *(float *)(a3 + 4 * v5)))
      v4 = v5;
    ++a1;
    v5 = v4;
  }
  while (a1 <= a2);
  return v4;
}

void sub_100E2E794(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100E2E7C0()
{
  dword_102308988 = sub_100D043E4(50, 0x80uLL);
}

uint64_t sub_100E2E7E4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_1004C5730(*(_QWORD *)(a3 + 8));
      return sub_1004C5730(*(_QWORD *)(a3 + 72));
    }
  }
  return result;
}

uint64_t sub_100E2E884(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 72) + 48))(*(_QWORD *)(a3 + 72), a1);
  return result;
}

void sub_100E2E8E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  double v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  _BOOL4 v15;
  _BOOL4 v16;
  BOOL v17;
  int v18;
  int isTypeStatic;
  int v20;
  float v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;
  float v27;
  float v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  int v36;
  __int128 v37;
  _BYTE v38[20];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  double v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_DWORD *)(a3 + 36) = 0;
  v6 = *(float *)(a2 + 1368);
  v7 = *(float *)(a2 + 1372);
  v8 = *(double *)(a2 + 560);
  v9 = (*(float *)(a2 + 1380) - v8) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
  v10 = sub_100219944(a2);
  if (*(double *)(a2 + 600) < *(double *)a2)
    v11 = v10;
  else
    v11 = 0;
  v12 = v9;
  v13 = v6 * sub_10108B14C(v12, v7);
  sub_101401A58(a1 + 8, a2, (uint64_t)buf);
  v14 = *(float *)((char *)&v52 + 2);
  v15 = *(_DWORD *)(a2 + 400) != 0;
  v16 = *(_BYTE *)(a2 + 1220) != 0;
  v17 = v15 && v16;
  if (v15 && v16)
    v18 = 2;
  else
    v18 = *(_DWORD *)(a2 + 1216);
  isTypeStatic = CLMotionActivity::isTypeStatic(*(unsigned int *)(a2 + 288));
  v20 = isTypeStatic;
  *(_QWORD *)(a3 + 32) = 3;
  if (v18 == 1)
  {
    if ((v11 & 1) == 0)
    {
      v25 = 0;
      *(_QWORD *)(a3 + 20) = 1082130432;
      *(_QWORD *)(a3 + 28) = 1082130432;
      v13 = 0.0;
      v28 = 4.0;
      v24 = 4.0;
      v27 = 4.0;
      goto LABEL_34;
    }
    v24 = v13 * 0.6;
    *(float *)a3 = v13 * 0.6;
    *(float *)(a3 + 20) = v13 * 0.6;
    *(float *)(a3 + 28) = v13 * 0.6;
    v25 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 1;
    v28 = 4.0;
    v27 = *(float *)"333@";
    if ((float)(v13 * 0.6) < 2.8)
    {
      v29 = 1077097267;
LABEL_28:
      *(_QWORD *)(a3 + 20) = v29 & 0xFFFF0000FFFFFFFFLL | 0x300000000;
      v25 = 3;
      v13 = v24;
LABEL_34:
      *(float *)(a3 + 12) = v28;
      *(_DWORD *)(a3 + 36) = 7;
LABEL_35:
      v21 = v13;
      *(float *)&v22 = v24;
      if (v27 >= 2.1)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_33:
    v13 = v24;
    v27 = v24;
    goto LABEL_34;
  }
  if (v18 == 3)
  {
    if ((v11 & 1) == 0)
    {
      v25 = 0;
      *(_QWORD *)(a3 + 20) = 1084856730;
      *(_QWORD *)(a3 + 28) = 1084856730;
      v13 = 0.0;
      v28 = 5.3;
      v24 = 5.3;
      v27 = 5.3;
      goto LABEL_34;
    }
    v24 = v13 * 0.8;
    *(float *)a3 = v13 * 0.8;
    *(float *)(a3 + 20) = v13 * 0.8;
    *(float *)(a3 + 28) = v13 * 0.8;
    v25 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 1;
    v28 = 5.3;
    v27 = 3.2;
    if ((float)(v13 * 0.8) < 3.2)
    {
      v29 = 1078774989;
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  v21 = 0.0;
  *(float *)&v22 = 0.0;
  if (v18 != 2)
  {
LABEL_36:
    *(_QWORD *)(a3 + 20) = 0x340066666;
    v25 = 3;
    v27 = 2.1;
    v13 = v21;
    v24 = *(float *)&v22;
    goto LABEL_37;
  }
  *(float *)&v22 = 1.6;
  v23 = 6.5;
  if (isTypeStatic)
    v23 = 1.6;
  if (v13 >= v14)
    v24 = v13;
  else
    v24 = v14;
  *(float *)(a3 + 12) = v23;
  *(float *)a3 = v13;
  *(float *)(a3 + 20) = v24;
  *(float *)(a3 + 28) = v24;
  v25 = 1;
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 32) = 0x700000001;
  if (v8 < 100.0)
    v26 = isTypeStatic;
  else
    v26 = 0;
  if (v26 == 1)
  {
    v25 = 0;
    *(_QWORD *)(a3 + 20) = 1070386381;
    *(_QWORD *)(a3 + 28) = 1070386381;
    v24 = 1.6;
  }
  if ((v11 & 1) != 0)
  {
    v27 = v24;
    goto LABEL_35;
  }
  *(float *)(a3 + 20) = v23;
  *(float *)(a3 + 28) = v23;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  if (isTypeStatic)
  {
    v21 = v13;
    goto LABEL_36;
  }
  v25 = 0;
  v24 = 6.5;
  v27 = 6.5;
LABEL_37:
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10218AB20);
  v30 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_QWORD *)(a2 + 128);
    *(_DWORD *)buf = 67111424;
    v46 = v18;
    v47 = 2048;
    v48 = v13;
    v49 = 1024;
    v50 = v11;
    v51 = 2048;
    v52 = v27;
    v53 = 2048;
    v54 = v24;
    v55 = 2048;
    v56 = v31;
    v57 = 2048;
    v58 = v14;
    v59 = 1024;
    v60 = v25;
    v61 = 1024;
    v62 = v17;
    v63 = 1024;
    v64 = v20;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "FST, FSTMotionType, %d, metsHR, %f, useHR, %d, userMets, %f, truthMets, %f, endTime, %f, semiStatMets, %f, userMetSource, %d, isWalking, %d, isTypeStatic, %d", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218AB20);
    v32 = *(_QWORD *)(a2 + 128);
    LOWORD(v37) = 2048;
    *(double *)((char *)&v37 + 2) = v13;
    WORD5(v37) = 1024;
    HIDWORD(v37) = v11;
    *(_WORD *)v38 = 2048;
    *(double *)&v38[2] = v27;
    *(_WORD *)&v38[10] = 2048;
    *(double *)&v38[12] = v24;
    v39 = 1024;
    v40 = v25;
    v41 = 1024;
    v42 = v17;
    v43 = 1024;
    v44 = v20;
    LODWORD(v35) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "FST, FSTMotionType, %d, metsHR, %f, useHR, %d, userMets, %f, truthMets, %f, endTime, %f, semiStatMets, %f, userMetSource, %d, isWalking, %d, isTypeStatic, %d", &v36, v35, 67111424, *(double *)&v37, *((double *)&v37 + 1), *(double *)v38, *(double *)&v38[8], HIDWORD(COERCE_UNSIGNED_INT64(v24)), v32 >> 16, COERCE_UNSIGNED_INT64(v14));
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieFunctionalStrengthModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
}

void sub_100E2EE48(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100E2EE74(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100E2EF54(a1, "ColdStorageCloudKitMetadata", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_10218AB50;
  *(_QWORD *)(a1 + 72) = off_10218ABF8;
  sub_100E81598((_QWORD *)(a1 + 336), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 352), 0, 0);
  *(_BYTE *)(a1 + 368) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_100E2EF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E2EF54(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_10218ADA8;
  *(_QWORD *)(a1 + 72) = off_10218AE50;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10218ADA8;
  *(_QWORD *)(a1 + 72) = off_10218AE50;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(int64x2_t *)(a1 + 232) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100E2F310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_10213DEB0;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100E2F3B4()
{
  JUMPOUT(0x100E2F394);
}

_QWORD *sub_100E2F3BC(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10218AE50;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10218ADA8;
  a1[33] = off_10213DEB0;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100E2F43C(uint64_t a1)
{
  return sub_100E2F3BC((_QWORD *)(a1 - 72));
}

void sub_100E2F444(_QWORD *a1)
{
  sub_100E2F3BC(a1);
  operator delete();
}

void sub_100E2F468(uint64_t a1)
{
  sub_100E2F3BC((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_100E2F490(_QWORD *a1, uint64_t a2)
{
  sqlite3_int64 v4;
  int64x2_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v6 = 0;
  if (sub_10051DBC4(a1, (uint64_t)&v4))
  {
    *(_QWORD *)(a2 + 8) = v5.i64[0];
    sub_100E2F504((uint64_t)a1, a2, v4);
  }
  else
  {
    sub_10041B300(a1, a2, 1);
  }
}

void sub_100E2F504(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint8_t buf[1640];

  if (sub_10008950C(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 368) || ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1), *(_BYTE *)(a1 + 368)))
    {
      v7 = a1 + 112;
      v6 = *(_QWORD *)(a1 + 112);
      v23 = a1 + 112;
      (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
      v24 = 256;
      sub_100087AF4((_QWORD *)(a1 + 352), &v22);
      if (v22)
      {
        v8 = (sqlite3_stmt *)sub_100026CC8(v22);
        if (sub_1000890C4(v8, 1, *(double *)(a2 + 8)))
        {
          v9 = (sqlite3_stmt *)sub_100026CC8(v22);
          if (sub_1000890C4(v9, 2, *(double *)(a2 + 16)))
          {
            v10 = (sqlite3_stmt *)sub_100026CC8(v22);
            if (sub_10063FC3C(v10, 3, *(void **)(a2 + 24)))
            {
              v11 = (sqlite3_stmt *)sub_100026CC8(v22);
              if (sub_1000CC50C(v11, 4, a3))
              {
                v12 = *(_QWORD *)(a1 + 80);
                v13 = (sqlite3_stmt *)sub_100026CC8(v22);
                sub_10023C9B0(v12, v13);
              }
            }
          }
        }
      }
      else
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218AD78);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[CloudKit] Invalid SQL statement", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218AD78);
          v21 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "[CloudKit] Invalid SQL statement", &v21, 2);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 0, "void CMHealthColdStorageCloudKitMetadataDb::updateRecord(const HealthColdStorageCloudKitMetadata &, uint64_t)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
      }
      v15 = v22;
      v22 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[CloudKit], Unable to initialize CloudKit metadata DB", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218AD78);
        LOWORD(v23) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "[CloudKit], Unable to initialize CloudKit metadata DB", &v23, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 0, "void CMHealthColdStorageCloudKitMetadataDb::updateRecord(const HealthColdStorageCloudKitMetadata &, uint64_t)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
  }
}

void sub_100E2F8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a5)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E2F91C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100E2F9A0(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "ColdStorageCloudKitMetadata", (const char **)&off_10218AC88, (const std::string::value_type **)&off_1022FBBF0, 0);
    *(_QWORD *)(a1 + 336) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM ColdStorageCloudKitMetadata ORDER BY id DESC LIMIT 1");
    *(_QWORD *)(a1 + 344) = v3;
    result = sub_10063D314(*(_QWORD *)(a1 + 80), "UPDATE ColdStorageCloudKitMetadata SET startTime = ?, lastUpdateTime = ?, metadata = ? WHERE id = ?");
    *(_QWORD *)(a1 + 352) = result;
    *(_QWORD *)(a1 + 360) = v4;
    *(_BYTE *)(a1 + 368) = 1;
  }
  return result;
}

BOOL sub_100E2F9A0(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "ColdStorageCloudKitMetadata");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "ColdStorageCloudKitMetadata", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100E2FD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E2FDDC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "ColdStorageCloudKitMetadata");
}

_QWORD *sub_100E2FDEC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "ColdStorageCloudKitMetadata");
}

uint64_t sub_100E2FDFC(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO ColdStorageCloudKitMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)");
  return result;
}

void sub_100E30024(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E30048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  sqlite3_stmt *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[1640];

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 336), &v14);
  v4 = v14;
  if (!v14)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218AD78);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CloudKit] Invalid SQL statement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "[CloudKit] Invalid SQL statement", &v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CMHealthColdStorageCloudKitMetadataDb::getMostRecentRecordUL(HealthColdStorageCloudKitMetadata &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
LABEL_11:
    v7 = 2;
    goto LABEL_13;
  }
  v5 = (sqlite3_stmt *)sub_100026CC8(v14);
  v6 = sqlite3_step(v5);
  if (v6 != 101)
  {
    if (v6 == 100)
    {
      sub_100E31750(&v14, a2);
      v7 = 0;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  v7 = 1;
LABEL_13:
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!v4)
    return 2;
  return v7;
}

void sub_100E3025C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E3028C(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218AD78);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100E31424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

id sub_100E31744(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100E31750(a2, a3);
}

id sub_100E31750(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const void *v8;
  sqlite3_stmt *v9;
  id result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_blob(v7, 3);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  result = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v8, sqlite3_column_bytes(v9, 3));
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100E31800(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10192D8E4(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100E31AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100E31B3C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10192DA50(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100E31E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100E31EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10218AD78);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10218AD78);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::setDatabaseAccessible() [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100E32488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100E324B8(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v32 = 0;
  v33 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v34 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218AD78);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = *(double *)v33.i64;
    v9 = v7 - *(double *)v33.i64;
    if (v7 - *(double *)v33.i64 < 0.0)
      v9 = -(v7 - *(double *)v33.i64);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v41 = *(double *)v33.i64;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218AD78);
        v23 = *(_QWORD *)(a2 + 8);
        v36 = 134349312;
        v37 = *(double *)v33.i64;
        v38 = 2050;
        v39 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = *(double *)v33.i64;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218AD78);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218AD78);
          v26 = *(double *)(a2 + 8);
          v36 = 134217984;
          v37 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10218AD78);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10218AD78);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_100E32C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E32C34(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10192DBBC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100E32E94(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192DD28(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100E330CC(uint64_t a1)
{
  return sub_100E31EBC(a1 - 72);
}

void sub_100E330D4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100E33100(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192DE94(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100E33328(unsigned int a1)
{
  return (a1 < 0x28) & (0x800000003FuLL >> a1);
}

uint64_t sub_100E33344(uint64_t a1, char a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  int buf[410];

  *(_QWORD *)a1 = off_10218AEA0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)buf = xmmword_101B9ACD0;
  sub_100E33A00(a1 + 40, buf, 2);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 180;
  *(_BYTE *)(a1 + 92) = 1;
  *(_BYTE *)(a1 + 93) = a2;
  *(_BYTE *)(a1 + 94) = 1;
  sub_1002778C8((void **)(a1 + 64), 0xB4uLL);
  *(_BYTE *)(a1 + 94) = sub_100762924() ^ 1;
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 94);
    buf[0] = 67240192;
    buf[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ilsa,CLStreamingAwareLocationProviderStateMachine,initializer,isLocationStreamingAllowed,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v7 = *(unsigned __int8 *)(a1 + 94);
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "#ilsa,CLStreamingAwareLocationProviderStateMachine,initializer,isLocationStreamingAllowed,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLStreamingAwareLocationProviderStateMachine::CLStreamingAwareLocationProviderStateMachine(BOOL)", "%s\n", v8);
    if (v9 != (uint8_t *)buf)
      free(v9);
  }
  return a1;
}

void sub_100E3358C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  _QWORD **v5;
  void *v7;

  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 72) = v7;
    operator delete(v7);
  }
  sub_100008848(v3, *(_QWORD **)(v1 + 48));
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100E335CC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 94);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v5 = *(unsigned __int8 *)(a1 + 94);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 2, "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLStreamingAwareLocationProviderStateMachine::isLocationStreamingAllowed() const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return *(unsigned __int8 *)(a1 + 94);
}

uint64_t sub_100E33780(uint64_t a1, double a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, a2);
}

uint64_t sub_100E337C4(uint64_t a1, double a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, a2);
}

uint64_t sub_100E33808(uint64_t a1, double a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, a2);
}

uint64_t *sub_100E3384C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v11;
  void (***v12)(_QWORD, uint64_t, uint64_t, _QWORD, _BYTE *);
  uint64_t *result;
  __int128 v14;
  int v15;
  _BYTE buf[28];
  int v17;

  v15 = a2;
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Stopping location for source\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}", buf, 0x1Cu);
  }
  v5 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v14 = _Q0;
  do
  {
    v11 = dword_101C29188[v5];
    v12 = *(void (****)(_QWORD, uint64_t, uint64_t, _QWORD, _BYTE *))(a1 + 32);
    *(_QWORD *)&buf[16] = 0;
    v17 = 0;
    *(_OWORD *)buf = v14;
    *(_DWORD *)&buf[24] = 0;
    (**v12)(v12, a2, v11, 0, buf);
    ++v5;
  }
  while (v5 != 3);
  *(_QWORD *)buf = &v15;
  result = sub_100136FD4((uint64_t **)(a1 + 40), &v15, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  *((_DWORD *)result + 8) = 0;
  return result;
}

void sub_100E339D4(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_100E33A00(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_100752D04((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100E33A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100E33B20(id a1)
{
  qword_1023089E0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDataProtectionManagerSilo"));
}

uint64_t sub_100E33BD4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100E34260;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023089F0 != -1)
    dispatch_once(&qword_1023089F0, block);
  return qword_102311728;
}

uint64_t sub_100E33E9C(_DWORD *a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218B128);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[28];
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#dataprotection postDataAvailability, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v5 = a1[28];
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#dataprotection postDataAvailability, %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDataProtectionManager::postDataAvailability()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_DWORD *)buf = a1[28];
  v8[0] = 0;
  return (*(uint64_t (**)(_DWORD *, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v8, buf, 1, 0xFFFFFFFFLL, 0);
}

BOOL sub_100E340A8()
{
  int v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  int v7;

  v0 = MKBDeviceUnlockedSinceBoot();
  if (v0 < 0)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v1 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v7 = v0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#dataprotection MKBDeviceUnlockedSinceBoot returned with an error, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218B128);
      v5[0] = 67240192;
      v5[1] = v0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#dataprotection MKBDeviceUnlockedSinceBoot returned with an error, %{public}d", v5, 8);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLDataProtectionManager::deviceUnlockedSinceBoot()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  return v0 == 1;
}

void sub_100E34260()
{
  operator new();
}

void sub_100E342A8()
{
  operator delete();
}

uint64_t sub_100E342CC(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v7;
  int v8;
  CLOSTransaction *v9;
  NSObject *v10;
  _BOOL4 v11;
  NSObject *v12;
  __CFNotificationCenter *v13;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _BYTE v22[4];
  char v23;
  int v24;
  int v25;
  __int16 v26;
  _BOOL4 v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  _BOOL4 v31;

  v3 = sub_100E34864(a1, "DataProtectionManager", a2);
  *(_QWORD *)v3 = off_10218AF90;
  *(_DWORD *)(v3 + 112) = 1;
  *(_QWORD *)(v3 + 120) = 0;
  v23 = 1;
  v4 = MKBDeviceFormattedForContentProtection();
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218B128);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dataprotection init, content protection formatting, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v24 = 67240192;
    v25 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#dataprotection init, content protection formatting, %{public}d", &v24, 8);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (v4)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100E34900, kMobileKeyBagLockStatusNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v7 = MKBGetDeviceLockState(0);
    v8 = v7;
    if (v7 < 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218B128);
      v10 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v29 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_10218B128);
        v24 = 67240192;
        v25 = v8;
        LODWORD(v21) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d", &v24, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      *(_DWORD *)(a1 + 112) = 0;
    }
    else if ((v7 - 1) <= 1)
    {
      *(_DWORD *)(a1 + 112) = 0;

      if (sub_100E34B20())
        v9 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDataProtectionManager::fLockedTransaction");
      else
        v9 = 0;
      *(_QWORD *)(a1 + 120) = v9;
    }
    v11 = sub_100E340A8();
    v23 = v11;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      v29 = v8;
      v30 = 1026;
      v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#dataprotection init, lockState, %{public}d, deviceUnlockedSinceBoot, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218B128);
      v24 = 67240448;
      v25 = v8;
      v26 = 1026;
      v27 = v11;
      LODWORD(v21) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#dataprotection init, lockState, %{public}d, deviceUnlockedSinceBoot, %{public}d", &v24, v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    if (!v11)
    {
      v13 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v13, (const void *)a1, (CFNotificationCallback)sub_100E34BC8, CFSTR("com.apple.mobile.keybagd.first_unlock"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  *(_DWORD *)buf = 1;
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v22, 1, 0xFFFFFFFFLL, 0);
  sub_100E33E9C((_DWORD *)a1);
  return a1;
}

void sub_100E3483C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100E34DE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E34864(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10218B158;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100E348E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100E34900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDataProtectionManager::onKeybagStateChange");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218B0E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDataProtectionManager::onKeybagStateChange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDataProtectionManager::onKeybagStateChange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100E375B4;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100E34B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E34B20()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char v7;

  v7 = 1;
  sub_1001E4804(&v5);
  v0 = sub_1001E4874(v5, "CLDataProtectionManager.LockedTransaction", (BOOL *)&v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v7)
    return 1;
  else
    return v0 ^ 1u;
}

void sub_100E34BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E34BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDataProtectionManager::onDeviceUnlockedSinceBoot");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218B0E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDataProtectionManager::onDeviceUnlockedSinceBoot", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDataProtectionManager::onDeviceUnlockedSinceBoot\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100E375BC;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100E34DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E34DE8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218B158;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100E34E5C(id *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *a1 = off_10218AF90;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);

  a1[15] = 0;
  return sub_100E34DE8((uint64_t)a1);
}

void sub_100E34EA8(id *a1)
{
  sub_100E34E5C(a1);
  operator delete();
}

_QWORD *sub_100E34ECC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100E34F44()
{
  return 1;
}

uint64_t sub_100E34F4C()
{
  return 1;
}

void sub_100E34F54(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  CLOSTransaction *v4;
  id v5;
  void *v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  NSObject *v10;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD v24[5];
  int v25;
  _BOOL4 v26;
  __int16 v27;
  int v28;
  int v29;
  _BOOL4 v30;
  uint8_t buf[4];
  _BOOL4 v32;
  __int16 v33;
  int v34;

  v2 = MKBGetDeviceLockState(0);
  v3 = v2;
  if (!v2)
  {
    v5 = *(id *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    v6 = *(void **)(a1 + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = nullsub_1207;
    v24[3] = &unk_10212BB58;
    v24[4] = v5;
    objc_msgSend(v6, "afterInterval:async:", v24, 10.0);
    if (*(_DWORD *)(a1 + 112))
      goto LABEL_28;
    *(_DWORD *)(a1 + 112) = 1;
    goto LABEL_27;
  }
  if (v2 == 2)
  {

    if (sub_100E34B20())
      v4 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDataProtectionManager::fLockedTransaction");
    else
      v4 = 0;
    *(_QWORD *)(a1 + 120) = v4;
    *(_DWORD *)(a1 + 112) = 0;
LABEL_27:
    sub_100E33E9C((_DWORD *)a1);
    goto LABEL_28;
  }
  if (v2 < 0)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v32 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218B128);
      v25 = 67240192;
      v26 = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d", &v25, 8);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *(_DWORD *)(a1 + 112) = 0;
    sub_100E33E9C((_DWORD *)a1);
    v8 = sub_100E340A8();
    LOBYTE(v26) = v8;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#dataprotection onKeybagStateChange, deviceUnlockedSinceBoot, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218B128);
      v29 = 67240192;
      v30 = v8;
      LODWORD(v23) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#dataprotection onKeybagStateChange, deviceUnlockedSinceBoot, %{public}d", &v29, v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!v8)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218B128);
      v10 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#dataprotection #warning, reverting state back to not unlocked since first boot, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_10218B128);
        v29 = 67240192;
        v30 = 0;
        LODWORD(v23) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#dataprotection #warning, reverting state back to not unlocked since first boot, %{public}d", &v29, v23);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100E34BC8, CFSTR("com.apple.mobile.keybagd.first_unlock"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      *(_DWORD *)buf = 1;
      (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v25, 1, 0xFFFFFFFFLL, 0);
    }
  }
LABEL_28:
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218B128);
  v12 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)buf = 67240448;
    v32 = v3;
    v33 = 1026;
    v34 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#dataprotection onKeybagStateChange, lock_state, %{public}d, data_availability, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v14 = *(_DWORD *)(a1 + 112);
    v25 = 67240448;
    v26 = v3;
    v27 = 1026;
    v28 = v14;
    LODWORD(v23) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#dataprotection onKeybagStateChange, lock_state, %{public}d, data_availability, %{public}d", &v25, v23);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

uint64_t sub_100E35618(const void *a1)
{
  _BOOL4 v2;
  NSObject *v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v6;
  uint8_t *v7;
  _BYTE v8[8];
  _DWORD v9[4];
  uint8_t buf[4];
  _BOOL4 v11;

  v2 = sub_100E340A8();
  v8[4] = v2;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10218B128);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#dataprotection onDeviceUnlockedSinceBoot, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10218B128);
    v9[0] = 67240192;
    v9[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#dataprotection onDeviceUnlockedSinceBoot, %{public}d", v9, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDataProtectionManager::onDeviceUnlockedSinceBoot(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (v2)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.mobile.keybagd.first_unlock"), 0);
  }
  *(_DWORD *)buf = 1;
  return (*(uint64_t (**)(const void *, uint8_t *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v8, 1, 0xFFFFFFFFLL, 0);
}

void sub_100E35814()
{
  operator new();
}

void sub_100E358C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100E358FC()
{
  operator new();
}

void sub_100E359AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100E359E8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_10218B2A8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100E35ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B0E8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10218B0E8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100E35D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FBCC0);
}

uint64_t sub_100E35D44(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100E38420();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FBCC1;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218B0E8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100E361A0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B0E8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100E36420(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10218B0E8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10218B0E8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100E367A8(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_10218B238;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100E3687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E36890(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_10218B238;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100E375C4();
    os_activity_scope_leave(&state);
  }
}

void sub_100E36EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100E36F14(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B0E8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B0E8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10218B0E8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10218B0E8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100E374C0(uint64_t a1)
{
  sub_100E383C0(a1);
  operator delete();
}

id sub_100E374E4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100E37B74(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100E37530(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E3755C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100E37588(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100E375B4(uint64_t a1)
{
  sub_100E34F54(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100E375BC(uint64_t a1)
{
  return sub_100E35618(*(const void **)(a1 + 32));
}

void sub_100E375C4()
{
  operator new();
}

void sub_100E37654(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100E37B74(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100E37A28(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10218B0E8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10218B0E8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100E37A28(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100E37B74(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100E37B04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218B238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E37B18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218B238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100E37B54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100E37B74(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100E37BEC(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100E37F74(a1);
  else
    return 0;
}

id sub_100E37BEC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100E38320((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C29349 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C29349 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDataProtectionManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100E37F74(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C29349 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C29349 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B278);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDataProtectionManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100E38320(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221C080))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
      sub_10192E188();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100E38394(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100E383C0(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_10218B2A8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100E38420()
{
  operator new();
}

uint64_t sub_100E384B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

_QWORD *sub_100E384D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_10218B2F0;
  v15[1] = sub_100E387E8;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageARSessionState");
  sub_100BB45D8((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_10218B2F0;
  v13[1] = sub_100E38A60;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageVIOEstimation");
  sub_100BB45D8((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_10218B2F0;
  v11[1] = sub_100E38CD8;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageVLLocalizationResult");
  sub_100BB45D8((uint64_t)v22, (uint64_t)v11);
  sub_100E3911C(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_100E386DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_100E387E8(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *__p;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  v5 = sub_1002255E0(a1);
  v6 = v5;
  if (SBYTE3(v15) < 0)
  {
    operator delete(__p);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLVisionNotifier")), "sendARSessionState:fromClient:", objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageARSessionState")), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"));
    goto LABEL_12;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218B2C0);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 24);
    __p = (void *)68289282;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLARSessionState\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218B2C0);
  }
  v9 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v10 = *(_QWORD *)(a1 + 24);
    __p = (void *)68289282;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client lacks proper entitlement to hint _CLARSessionState", "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLARSessionState\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
LABEL_12:

}

void sub_100E38A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100E38A60(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *__p;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  v5 = sub_1002255E0(a1);
  v6 = v5;
  if (SBYTE3(v15) < 0)
  {
    operator delete(__p);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLVisionNotifier")), "sendVIOEstimation:fromClient:", objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageVIOEstimation")), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"));
    goto LABEL_12;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218B2C0);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 24);
    __p = (void *)68289282;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVIOEstimation\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218B2C0);
  }
  v9 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v10 = *(_QWORD *)(a1 + 24);
    __p = (void *)68289282;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client lacks proper entitlement to hint _CLVIOEstimation", "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVIOEstimation\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
LABEL_12:

}

void sub_100E38C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100E38CD8(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *__p;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  v5 = sub_1002255E0(a1);
  v6 = v5;
  if (SBYTE3(v15) < 0)
  {
    operator delete(__p);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLVisionNotifier")), "sendVLLocalizationResult:fromClient:", objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageVLLocalizationResult")), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"));
    goto LABEL_12;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218B2C0);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 24);
    __p = (void *)68289282;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVLLocalizationResult\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218B2C0);
  }
  v9 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v10 = *(_QWORD *)(a1 + 24);
    __p = (void *)68289282;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client lacks proper entitlement to hint _CLVLLocalizationResult", "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVLLocalizationResult\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
LABEL_12:

}

void sub_100E38F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100E38F50(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100E38F7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10218B2F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100E38FB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10218B2F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E38FDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100E3902C(a1 + 8, a2, a3);
}

uint64_t sub_100E38FE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E39020()
{
}

void sub_100E3902C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100E39100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3911C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100E39194(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100E39180(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100E39194(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100E39414(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100E393FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E39414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100E39488(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100E39470(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E39488(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100E394E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E394FC(unsigned int a1)
{
  return (a1 < 0x2D) & (0x10FE81F1BF80uLL >> a1);
}

void sub_100E3951C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  int v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _BYTE buf[12];
  char v40;
  int v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  if (qword_102308A00 != -1)
    dispatch_once(&qword_102308A00, &stru_10218B370);
  v2 = byte_1023089F8;
  *(_BYTE *)(a1 + 74) = byte_1023089F8;
  switch(v2)
  {
    case 1:
      *(_OWORD *)a1 = xmmword_101C29960;
      *(_OWORD *)(a1 + 16) = xmmword_101C29970;
      *(_DWORD *)(a1 + 32) = 1034147594;
      *(_OWORD *)(a1 + 36) = xmmword_101C29820;
      v9 = 0x3F4CCCCD3F99999ALL;
      goto LABEL_49;
    case 2:
      *(_OWORD *)a1 = xmmword_101C29920;
      *(_OWORD *)(a1 + 16) = xmmword_101C29930;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29820;
      *(_QWORD *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      v10 = 1056964608;
      goto LABEL_50;
    case 3:
      *(_OWORD *)a1 = xmmword_101C29900;
      *(_OWORD *)(a1 + 16) = xmmword_101C29910;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      v11 = 0x3F0000003F99999ALL;
      goto LABEL_15;
    case 4:
      *(_OWORD *)a1 = xmmword_101C29940;
      *(_OWORD *)(a1 + 16) = xmmword_101C29950;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      v9 = 0x3E8F5C293F99999ALL;
      goto LABEL_49;
    case 5:
      *(_OWORD *)a1 = xmmword_101C298E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C298F0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v11 = 0x3F07AE143F99999ALL;
LABEL_15:
      *(_QWORD *)(a1 + 52) = v11;
      v12 = 1050253722;
      goto LABEL_26;
    case 6:
      v13 = xmmword_101C29700;
      v14 = xmmword_101C298D0;
      goto LABEL_29;
    case 7:
      *(_OWORD *)a1 = xmmword_101C29890;
      *(_OWORD *)(a1 + 16) = xmmword_101C298A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29820;
      *(_QWORD *)(a1 + 52) = 0x3EB333333F99999ALL;
      *(_DWORD *)(a1 + 68) = 1056964608;
      *(_WORD *)(a1 + 72) = 0;
      v15 = 0x600000000;
      goto LABEL_98;
    case 8:
      *(_OWORD *)a1 = xmmword_101C29830;
      *(_OWORD *)(a1 + 16) = xmmword_101C29840;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29820;
      *(_QWORD *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1056964608;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0xB00000000;
      goto LABEL_98;
    case 9:
      *(_OWORD *)a1 = xmmword_101C29800;
      *(_OWORD *)(a1 + 16) = xmmword_101C29810;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29820;
      *(_QWORD *)(a1 + 52) = 0x3F3333333F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 257;
      v15 = 0xC3F028F5CLL;
      goto LABEL_98;
    case 10:
    case 11:
      *(_OWORD *)a1 = xmmword_101C29850;
      *(_OWORD *)(a1 + 16) = xmmword_101C29860;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3CCCCCCD3F99999ALL;
      v5 = 1045220557;
      goto LABEL_60;
    case 12:
      *(_OWORD *)a1 = xmmword_101C297E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C297F0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3F147AE13F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1300000000;
      goto LABEL_98;
    case 13:
      *(_OWORD *)a1 = xmmword_101C295B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C297D0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3F19999A3F99999ALL;
      v10 = 1045220557;
      goto LABEL_50;
    case 14:
      *(_OWORD *)a1 = xmmword_101C29760;
      *(_OWORD *)(a1 + 16) = xmmword_101C29770;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3E428F5C3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 0;
      goto LABEL_27;
    case 15:
      *(_OWORD *)a1 = xmmword_101C29870;
      *(_OWORD *)(a1 + 16) = xmmword_101C29880;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v16 = 0x3F3333333F99999ALL;
      goto LABEL_25;
    case 16:
      *(_OWORD *)a1 = xmmword_101C29850;
      *(_OWORD *)(a1 + 16) = xmmword_101C29860;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      v16 = 0x3CC49BA63F99999ALL;
LABEL_25:
      *(_QWORD *)(a1 + 52) = v16;
      v12 = 1045220557;
LABEL_26:
      *(_DWORD *)(a1 + 68) = v12;
      *(_WORD *)(a1 + 72) = 1;
LABEL_27:
      v15 = 0x900000000;
      goto LABEL_98;
    case 17:
      v13 = xmmword_101C29700;
      v14 = xmmword_101C298B0;
LABEL_29:
      *(_OWORD *)a1 = v13;
      *(_OWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3ED70A3D3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x500000000;
      goto LABEL_98;
    case 19:
      *(_OWORD *)a1 = xmmword_101C29700;
      *(_OWORD *)(a1 + 16) = xmmword_101C298C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v9 = 0x3ED70A3D3F99999ALL;
LABEL_49:
      *(_QWORD *)(a1 + 52) = v9;
      v10 = 1050253722;
LABEL_50:
      *(_DWORD *)(a1 + 68) = v10;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x800000000;
      goto LABEL_98;
    case 20:
      *(_OWORD *)a1 = xmmword_101C297B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C297C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3E6147AE3F99999ALL;
      v24 = 1045220557;
      goto LABEL_91;
    case 21:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C297A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v3 = 0x3E8A3D713F99999ALL;
      goto LABEL_53;
    case 22:
      *(_OWORD *)a1 = xmmword_101C29640;
      *(_OWORD *)(a1 + 16) = xmmword_101C29790;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3E19999A3F99999ALL;
      v26 = 1045220557;
      goto LABEL_84;
    case 23:
      *(_OWORD *)a1 = xmmword_101C295B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C29780;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3F19999A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1C00000000;
      goto LABEL_98;
    case 24:
      *(_OWORD *)a1 = xmmword_101C295B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C296B0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v25 = 0x3F07AE143F99999ALL;
      goto LABEL_88;
    case 25:
      *(_OWORD *)a1 = xmmword_101C29740;
      *(_OWORD *)(a1 + 16) = xmmword_101C29750;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      v26 = 1050253722;
LABEL_84:
      *(_DWORD *)(a1 + 68) = v26;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0xD00000000;
      goto LABEL_98;
    case 26:
      v27 = xmmword_101C29560;
      v28 = xmmword_101C296C0;
      goto LABEL_63;
    case 27:
      *(_OWORD *)a1 = xmmword_101C29700;
      *(_OWORD *)(a1 + 16) = xmmword_101C29710;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v29 = 0x3ED6C8B43F99999ALL;
      goto LABEL_64;
    case 28:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29730;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3E19999A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0xE00000000;
      goto LABEL_98;
    case 29:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C296C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3EA3D70A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0xA00000000;
      goto LABEL_98;
    case 30:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29720;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3EB333333F99999ALL;
      v5 = 1050253722;
LABEL_60:
      *(_DWORD *)(a1 + 68) = v5;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0xC00000000;
      goto LABEL_98;
    case 31:
      v30 = xmmword_101C295E0;
      v31 = xmmword_101C296F0;
      goto LABEL_66;
    case 32:
      v27 = xmmword_101C29560;
      v28 = xmmword_101C296E0;
LABEL_63:
      *(_OWORD *)a1 = v27;
      *(_OWORD *)(a1 + 16) = v28;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      v29 = 0x3EA3D70A3F99999ALL;
LABEL_64:
      *(_QWORD *)(a1 + 52) = v29;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1000000000;
      goto LABEL_98;
    case 33:
      v30 = xmmword_101C295E0;
      v31 = xmmword_101C296D0;
LABEL_66:
      *(_OWORD *)a1 = v30;
      *(_OWORD *)(a1 + 16) = v31;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v32 = 0x3E8000003F99999ALL;
      goto LABEL_68;
    case 34:
      *(_OWORD *)a1 = xmmword_101C295B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C296B0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v25 = 0x3E8000003F99999ALL;
LABEL_88:
      *(_QWORD *)(a1 + 52) = v25;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1600000000;
      goto LABEL_98;
    case 35:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C296A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v32 = 0x3E1EB8523F99999ALL;
LABEL_68:
      *(_QWORD *)(a1 + 52) = v32;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1700000000;
      goto LABEL_98;
    case 36:
      *(_OWORD *)a1 = xmmword_101C295B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C29630;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3E051EB83F99999ALL;
      v4 = 1040522936;
      goto LABEL_70;
    case 37:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C29620;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3E1EB8523F99999ALL;
      v38 = 1042200658;
      goto LABEL_95;
    case 38:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C29690;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v33 = 0x3E8A3D713F99999ALL;
      goto LABEL_73;
    case 39:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C29680;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      v33 = 0x3E75C28F3F99999ALL;
LABEL_73:
      *(_QWORD *)(a1 + 52) = v33;
      *(_DWORD *)(a1 + 68) = 1048576000;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1900000000;
      goto LABEL_98;
    case 40:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29670;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      v8 = 1050253722;
      goto LABEL_97;
    case 41:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29660;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      v34 = 1045220557;
      goto LABEL_82;
    case 42:
      v35 = xmmword_101C29560;
      v36 = xmmword_101C29610;
      goto LABEL_81;
    case 43:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29610;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3D8F5C293F99999ALL;
      v34 = 1032805417;
      goto LABEL_82;
    case 44:
      *(_OWORD *)a1 = xmmword_101C29640;
      *(_OWORD *)(a1 + 16) = xmmword_101C29650;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3E19999A3F99999ALL;
      v24 = 1041865114;
LABEL_91:
      *(_DWORD *)(a1 + 68) = v24;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0xF00000000;
      goto LABEL_98;
    case 45:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29610;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3DCCCCCD3F99999ALL;
      v34 = 1036831949;
      goto LABEL_82;
    case 46:
    case 54:
    case 57:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C295A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      v3 = 0x3E4CCCCD3F99999ALL;
LABEL_53:
      *(_QWORD *)(a1 + 52) = v3;
      v8 = 1045220557;
      goto LABEL_97;
    case 47:
    case 53:
    case 59:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29570;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3CA3D70A3F99999ALL;
      v4 = 1017370378;
LABEL_70:
      *(_DWORD *)(a1 + 68) = v4;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1500000000;
      goto LABEL_98;
    case 48:
    case 60:
      v6 = xmmword_101C29560;
      v7 = xmmword_101C29570;
      goto LABEL_9;
    case 49:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C29600;
      *(_DWORD *)(a1 + 32) = 1092616192;
      v37 = xmmword_101C29580;
      goto LABEL_93;
    case 50:
      *(_OWORD *)a1 = xmmword_101C295E0;
      *(_OWORD *)(a1 + 16) = xmmword_101C295F0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      v37 = xmmword_101C295D0;
LABEL_93:
      *(_OWORD *)(a1 + 36) = v37;
      *(_QWORD *)(a1 + 52) = 0x3E75C28F3F99999ALL;
      v38 = 1047904911;
      goto LABEL_95;
    case 51:
      v35 = xmmword_101C29560;
      v36 = xmmword_101C29590;
LABEL_81:
      *(_OWORD *)a1 = v35;
      *(_OWORD *)(a1 + 16) = v36;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3E19999A3F99999ALL;
      v34 = 1041865114;
LABEL_82:
      *(_DWORD *)(a1 + 68) = v34;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1200000000;
      goto LABEL_98;
    case 52:
      *(_OWORD *)a1 = xmmword_101C295B0;
      *(_OWORD *)(a1 + 16) = xmmword_101C295C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C295D0;
      *(_QWORD *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      v38 = 1045220557;
LABEL_95:
      *(_DWORD *)(a1 + 68) = v38;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1800000000;
      goto LABEL_98;
    case 55:
    case 58:
      v6 = xmmword_101C29560;
      v7 = xmmword_101C29590;
LABEL_9:
      *(_OWORD *)a1 = v6;
      *(_OWORD *)(a1 + 16) = v7;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3E19999A3F99999ALL;
      v8 = 1041865114;
      goto LABEL_97;
    case 56:
      *(_OWORD *)a1 = xmmword_101C29560;
      *(_OWORD *)(a1 + 16) = xmmword_101C29570;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101C29580;
      *(_QWORD *)(a1 + 52) = 0x3C23D70A3F99999ALL;
      v8 = 1008981770;
LABEL_97:
      *(_DWORD *)(a1 + 68) = v8;
      *(_WORD *)(a1 + 72) = 1;
      v15 = 0x1400000000;
LABEL_98:
      *(_QWORD *)(a1 + 60) = v15;
      break;
    default:
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_10218B390);
      v17 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = sub_100197040();
        sub_10075A5A0(v18, (uint64_t)__p);
        v19 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No parameters for on body is available for %s", buf, 0xCu);
        if (v44 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_10218B390);
        v20 = qword_10229FEF8;
        v21 = sub_100197040();
        sub_10075A5A0(v21, (uint64_t)buf);
        if (v40 >= 0)
          v22 = buf;
        else
          v22 = *(_BYTE **)buf;
        v41 = 136315138;
        v42 = v22;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 0, "No parameters for on body is available for %s", (const char *)&v41);
        if (v40 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier_Type::Params::init()", "%s\n", v23);
        if (v23 != (char *)__p)
          free(v23);
      }
      break;
  }
}

void sub_100E3A564(id a1)
{
  unsigned int v1;
  char v2;

  if ((sub_1001B7910() & 0x800) != 0)
  {
    sub_100197040();
    v1 = sub_1001AA9A8() - 16;
    if (v1 > 0xE1)
      v2 = 0;
    else
      v2 = asc_101C29A58[v1];
    byte_1023089F8 = v2;
  }
}

void sub_100E3A5AC(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 61) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  sub_100E3951C((uint64_t)a1);
}

void sub_100E3A5C4(uint64_t a1)
{
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  int v18;
  double v19;
  int v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  int v34;
  int v35;
  double v36;
  double v37;
  int v38;
  double v39;
  int v40;
  int v41;
  double v42;
  char *v43;
  double v44;
  int v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  int v76;
  __int16 v77;
  double v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  double v84;
  uint8_t buf[4];
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  int v116;
  __int16 v117;
  double v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  double v124;

  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10218B390);
  v2 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(float *)a1;
    v4 = *(float *)(a1 + 4);
    v5 = *(float *)(a1 + 8);
    v6 = *(float *)(a1 + 12);
    v7 = *(float *)(a1 + 16);
    v8 = *(float *)(a1 + 20);
    v9 = *(float *)(a1 + 24);
    v10 = *(float *)(a1 + 28);
    v11 = *(float *)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 36);
    v13 = *(_DWORD *)(a1 + 40);
    v14 = *(_DWORD *)(a1 + 44);
    v15 = *(_DWORD *)(a1 + 48);
    v16 = *(float *)(a1 + 52);
    v17 = *(float *)(a1 + 56);
    v18 = *(_DWORD *)(a1 + 64);
    v19 = *(float *)(a1 + 68);
    v20 = *(unsigned __int8 *)(a1 + 72);
    v21 = *(unsigned __int8 *)(a1 + 73);
    v22 = *(float *)(a1 + 60);
    *(_DWORD *)buf = 134222848;
    v86 = v3;
    v87 = 2048;
    v88 = v4;
    v89 = 2048;
    v90 = v5;
    v91 = 2048;
    v92 = v6;
    v93 = 2048;
    v94 = v7;
    v95 = 2048;
    v96 = v8;
    v97 = 2048;
    v98 = v9;
    v99 = 2048;
    v100 = v10;
    v101 = 2048;
    v102 = v11;
    v103 = 1024;
    v104 = v12;
    v105 = 1024;
    v106 = v13;
    v107 = 1024;
    v108 = v14;
    v109 = 1024;
    v110 = v15;
    v111 = 2048;
    v112 = v16;
    v113 = 2048;
    v114 = v17;
    v115 = 1024;
    v116 = v18;
    v117 = 2048;
    v118 = v19;
    v119 = 1024;
    v120 = v20;
    v121 = 1024;
    v122 = v21;
    v123 = 2048;
    v124 = v22;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Parameters: theta0, %f, theta1, %f, theta2, %f, theta3, %f, theta4, %f, theta5, %f, minLowPower, %f, maxLowPower, %f, maxHighPower, %f, lowBandStart, %d, lowBandStop, %d, highbandStart, %d, highBandStop, %d, wakeThreshold, %f, oddsThreshold, %f, medianFilterSize, %u, confidenceThreshold, %f, useHysteresis, %d, useAngleOverride, %d, angleMetricThreshold, %f", buf, 0xAEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10218B390);
    v23 = *(float *)a1;
    v24 = *(float *)(a1 + 4);
    v25 = *(float *)(a1 + 8);
    v26 = *(float *)(a1 + 12);
    v27 = *(float *)(a1 + 16);
    v28 = *(float *)(a1 + 20);
    v29 = *(float *)(a1 + 24);
    v30 = *(float *)(a1 + 28);
    v31 = *(float *)(a1 + 32);
    v32 = *(_DWORD *)(a1 + 36);
    v33 = *(_DWORD *)(a1 + 40);
    v34 = *(_DWORD *)(a1 + 44);
    v35 = *(_DWORD *)(a1 + 48);
    v36 = *(float *)(a1 + 52);
    v37 = *(float *)(a1 + 56);
    v38 = *(_DWORD *)(a1 + 64);
    v39 = *(float *)(a1 + 68);
    v40 = *(unsigned __int8 *)(a1 + 72);
    v41 = *(unsigned __int8 *)(a1 + 73);
    v42 = *(float *)(a1 + 60);
    v45 = 134222848;
    v46 = v23;
    v47 = 2048;
    v48 = v24;
    v49 = 2048;
    v50 = v25;
    v51 = 2048;
    v52 = v26;
    v53 = 2048;
    v54 = v27;
    v55 = 2048;
    v56 = v28;
    v57 = 2048;
    v58 = v29;
    v59 = 2048;
    v60 = v30;
    v61 = 2048;
    v62 = v31;
    v63 = 1024;
    v64 = v32;
    v65 = 1024;
    v66 = v33;
    v67 = 1024;
    v68 = v34;
    v69 = 1024;
    v70 = v35;
    v71 = 2048;
    v72 = v36;
    v73 = 2048;
    v74 = v37;
    v75 = 1024;
    v76 = v38;
    v77 = 2048;
    v78 = v39;
    v79 = 1024;
    v80 = v40;
    v81 = 1024;
    v82 = v41;
    v83 = 2048;
    v84 = v42;
    LODWORD(v44) = 174;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Parameters: theta0, %f, theta1, %f, theta2, %f, theta3, %f, theta4, %f, theta5, %f, minLowPower, %f, maxLowPower, %f, maxHighPower, %f, lowBandStart, %d, lowBandStop, %d, highbandStart, %d, highBandStop, %d, wakeThreshold, %f, oddsThreshold, %f, medianFilterSize, %u, confidenceThreshold, %f, useHysteresis, %d, useAngleOverride, %d, angleMetricThreshold, %f", COERCE_DOUBLE(&v45), v44);
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier_Type::Params::log() const", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
}

void sub_100E3A984(id a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSMutableDictionary *v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  uint8_t *v33;
  char *v34;
  _WORD v35[7];
  uint8_t buf[4];
  id v37;
  __int16 v38;
  id v39;

  *(_OWORD *)(a3 + 61) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100E3951C(a3);
  if (a2)
  {
    v7 = CMOnBodyStatusManagerManufacturer;
    v8 = objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerManufacturer);
    v10 = objc_opt_class(NSDictionary, v9);
    if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
    {
      v11 = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v7), "objectForKeyedSubscript:", a2);
      if (sub_100E3B0A0((uint64_t)v11, v12))
      {
        a1 = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v7), "objectForKeyedSubscript:", a2);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_10218B390);
        v13 = qword_10229FEF8;
        if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v37 = objc_msgSend(a2, "UTF8String");
          v38 = 2080;
          v39 = objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Using the manufacturer specific parameters (%s): %s", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_18;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_10218B390);
        v14 = qword_10229FEF8;
        objc_msgSend(a2, "UTF8String");
        objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
        v15 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "Using the manufacturer specific parameters (%s): %s", v35, 22);
LABEL_28:
        v33 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)", "%s\n", v15);
        if (v33 != buf)
          free(v33);
LABEL_18:
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta0), "floatValue");
        *(_DWORD *)a3 = v18;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta1), "floatValue");
        *(_DWORD *)(a3 + 4) = v19;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta2), "floatValue");
        *(_DWORD *)(a3 + 8) = v20;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta3), "floatValue");
        *(_DWORD *)(a3 + 12) = v21;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta4), "floatValue");
        *(_DWORD *)(a3 + 16) = v22;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta5), "floatValue");
        *(_DWORD *)(a3 + 20) = v23;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMinLowPower), "floatValue");
        *(_DWORD *)(a3 + 24) = v24;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxLowPower), "floatValue");
        *(_DWORD *)(a3 + 28) = v25;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxHighPower), "floatValue");
        *(_DWORD *)(a3 + 32) = v26;
        *(_DWORD *)(a3 + 36) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerLowBandStart), "intValue");
        *(_DWORD *)(a3 + 40) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerLowBandStop), "intValue");
        *(_DWORD *)(a3 + 44) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerHighBandStart), "intValue");
        *(_DWORD *)(a3 + 48) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerHighBandStop), "intValue");
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerWakeThreshold), "floatValue");
        *(_DWORD *)(a3 + 52) = v27;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerOddsThreshold), "floatValue");
        *(_DWORD *)(a3 + 56) = v28;
        *(_DWORD *)(a3 + 64) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerMedianFilterSize), "unsignedIntValue");
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerConfidenceThreshold), "floatValue");
        *(_DWORD *)(a3 + 68) = v29;
        *(_BYTE *)(a3 + 72) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerUseHysteresis), "BOOLValue");
        *(_BYTE *)(a3 + 73) = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerUseAngleOverride), "BOOLValue");
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerAngleMetricThreshold), "floatValue");
        *(_DWORD *)(a3 + 60) = v30;
        return;
      }
    }
  }
  if (sub_100E3B0A0((uint64_t)a1, v6))
  {
    v16 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a1);
    -[NSMutableDictionary removeObjectForKey:](v16, "removeObjectForKey:", CMOnBodyStatusManagerManufacturer);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10218B390);
    v17 = qword_10229FEF8;
    if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v37 = objc_msgSend(-[NSMutableDictionary description](v16, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Using the default parameters: %s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10218B390);
    v32 = qword_10229FEF8;
    objc_msgSend(-[NSMutableDictionary description](v16, "description"), "UTF8String");
    v15 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "Using the default parameters: %s", v35);
    goto LABEL_28;
  }
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10218B390);
  v31 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning Using the hardcoded parameters", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10218B390);
    v35[0] = 0;
    v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 0, "#Warning Using the hardcoded parameters", v35, 2);
    sub_100512490("Generic", 1, 0, 2, "static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)", "%s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
}

uint64_t sub_100E3B0A0(uint64_t result, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  char *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if (result)
  {
    v2 = (void *)result;
    v3 = objc_opt_class(NSDictionary, a2);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta0)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta1)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta2)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta3)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta4)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta5)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMinLowPower)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxLowPower)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxHighPower)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerLowBandStart)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerLowBandStop)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerHighBandStart)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerHighBandStop)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerWakeThreshold)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerOddsThreshold)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerMedianFilterSize)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerConfidenceThreshold)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerUseHysteresis)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerUseAngleOverride)
      && objc_msgSend(v2, "objectForKeyedSubscript:", CMOnBodyStatusManagerAngleMetricThreshold))
    {
      return 1;
    }
    else
    {
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_10218B390);
      v4 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v11 = objc_msgSend(objc_msgSend(v2, "description"), "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid parameters received:\n%{public}s", buf, 0xCu);
      }
      v5 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_10218B390);
        v6 = qword_10229FEF8;
        v8 = 136446210;
        v9 = objc_msgSend(objc_msgSend(v2, "description"), "UTF8String");
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 17, "Invalid parameters received:\n%{public}s", &v8, 12);
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLOnBodyNotifier_Type::Params::isValid(NSDictionary *)", "%s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
        return 0;
      }
    }
  }
  return result;
}

void sub_100E3B478(id a1)
{
  qword_10229FEF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

uint64_t sub_100E3B4A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = &off_10218B3C0;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a2;
  *(_WORD *)(result + 32) = 256;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

_QWORD *sub_100E3B4D0(_QWORD *a1)
{
  *a1 = &off_10218B3C0;
  sub_100E3B504((uint64_t)a1);
  return a1;
}

void sub_100E3B504(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      objc_msgSend(*(id *)(a1 + 24), "stopBackgroundInertialOdometryUpdatesForClient:");
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      v2 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession() stopping.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_25;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession() stopping.", v9, 2, v9[0]);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession() not-stopping due to uninitialized fBackgroundIntersiloDelegate.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_25;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession() not-stopping due to uninitialized fBackgroundIntersiloDelegate.", v9, 2, v9[0]);
    }
    v8 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession()", "%s\n", v3);
    if (v8 != buf)
      free(v8);
LABEL_25:
    *(_BYTE *)(a1 + 8) = 0;
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218B3E8);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession(), not currently subscribed.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218B3E8);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession(), not currently subscribed.", v9, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

BOOL sub_100E3B8D4()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 result;

  sub_100197040();
  result = 1;
  if (!sub_1000C4240() || (v0 = sub_100197040(), (sub_10075E7E4(v0) & 1) == 0))
  {
    sub_100197040();
    if (!sub_100195F08())
      return 0;
    v1 = sub_100197040();
    if ((sub_10075E7E4(v1) & 1) == 0)
      return 0;
  }
  return result;
}

void sub_100E3B920(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218B3E8);
    v1 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession(), already subscribed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession(), already subscribed.", v12, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 24), "startBackgroundInertialOdometryUpdatesForClient:withIdentifier:usingReferenceFrame:", v5, CFSTR("CLLocationControllerClientIdentifier"), 1);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession() starting with arbitrary reference frame.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10218B3E8);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession() starting with arbitrary reference frame.", v12, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218B3E8);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#pbio CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession() not-starting due to uninitialized fBackgroundIntersiloDelegate.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10218B3E8);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#pbio CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession() not-starting due to uninitialized fBackgroundIntersiloDelegate.", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
}

uint64_t sub_100E3BD44(uint64_t a1, double a2)
{
  NSObject *v4;
  _BOOL4 v5;
  uint64_t result;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (sub_100E3B8D4())
  {
    (**(void (***)(uint64_t, double))a1)(a1, a2);
    if (*(_BYTE *)(a1 + 8))
    {
      if (!*(_BYTE *)(a1 + 32))
      {
        sub_100E3B504(a1);
        return 1;
      }
    }
    else if (*(_BYTE *)(a1 + 32))
    {
      sub_100E3B920(a1);
      return 1;
    }
    return 0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218B3E8);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#pbio Proactive Inertial Odometry is not supported on this device.", buf, 2u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218B3E8);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#pbio Proactive Inertial Odometry is not supported on this device.", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLProactiveInertialOdometrySubscription::updateSubscriptionState(const CFTimeInterval)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_100E3BF30(uint64_t a1, char a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  *(double *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 33) = a2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218B3E8);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned __int8 *)(a1 + 33);
    *(_DWORD *)buf = 134349312;
    v16 = v5;
    v17 = 1026;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::onVisit, fMachContinuousTimeOfLastVisitStateChange_s, %{public}.3f s, fIsInVisit, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218B3E8);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(unsigned __int8 *)(a1 + 33);
    v11 = 134349312;
    v12 = v7;
    v13 = 1026;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio CLProactiveInertialOdometrySubscription::onVisit, fMachContinuousTimeOfLastVisitStateChange_s, %{public}.3f s, fIsInVisit, %{public}d", &v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::onVisit(const CFTimeInterval, const BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100E3C108(uint64_t a1, char a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  *(double *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 48) = a2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10218B3E8);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 134349312;
    v16 = v5;
    v17 = 1026;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::onRhythmicStatus, fMachContinuousTimeOfLastActiveWakingRhythmicStatusChange_s, %{public}.3f s, fIsActiveWakingRhythmic, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218B3E8);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(unsigned __int8 *)(a1 + 48);
    v11 = 134349312;
    v12 = v7;
    v13 = 1026;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio CLProactiveInertialOdometrySubscription::onRhythmicStatus, fMachContinuousTimeOfLastActiveWakingRhythmicStatusChange_s, %{public}.3f s, fIsActiveWakingRhythmic, %{public}d", &v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::onRhythmicStatus(const CFTimeInterval, const BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100E3C2E0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

double sub_100E3C30C()
{
  unsigned __int8 v0;
  unsigned __int8 v2[8];
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A10))
  {
    sub_1018BEA14(v2, "VO2MaxPowerBudgetEstimatorQueryLookbackInterval", &qword_101C29B68, 0);
    qword_102308A08 = v3;
    __cxa_guard_release(&qword_102308A10);
  }
  return *(double *)&qword_102308A08;
}

void sub_100E3C388(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A10);
  _Unwind_Resume(a1);
}

double sub_100E3C3A0()
{
  unsigned __int8 v0;
  unsigned __int8 v2[8];
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A20))
  {
    sub_1018BEA14(v2, "VO2MaxOutOfSessionEstimateHoldoffInterval", &qword_101C29B70, 0);
    qword_102308A18 = v3;
    __cxa_guard_release(&qword_102308A20);
  }
  return *(double *)&qword_102308A18;
}

void sub_100E3C41C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A20);
  _Unwind_Resume(a1);
}

double sub_100E3C434()
{
  unsigned __int8 v0;
  uint64_t v2;
  unsigned __int8 v3[8];
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A30))
  {
    v2 = 0x40BC200000000000;
    sub_1018BEA14(v3, "VO2MaxOutOfSessionEstimateTimeSinceLastWorkoutHoldOffInterval", &v2, 0);
    qword_102308A28 = v4;
    __cxa_guard_release(&qword_102308A30);
  }
  return *(double *)&qword_102308A28;
}

void sub_100E3C4B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A30);
  _Unwind_Resume(a1);
}

double sub_100E3C4D0()
{
  unsigned __int8 v0;
  uint64_t v2;
  unsigned __int8 v3[8];
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A40))
  {
    v2 = 0x4092C00000000000;
    sub_1018BEA14(v3, "VO2MaxPowerBudgetEstimatorBudgetAllowance", &v2, 0);
    qword_102308A38 = v4;
    __cxa_guard_release(&qword_102308A40);
  }
  return *(double *)&qword_102308A38;
}

void sub_100E3C554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A40);
  _Unwind_Resume(a1);
}

double sub_100E3C56C()
{
  unsigned __int8 v0;
  uint64_t v2;
  unsigned __int8 v3[8];
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A50))
  {
    v2 = 0x40F5180000000000;
    sub_1018BEA14(v3, "VO2MaxPowerBudgetEstimatorZeroBudgetRefreshInterval", &v2, 0);
    qword_102308A48 = v4;
    __cxa_guard_release(&qword_102308A50);
  }
  return *(double *)&qword_102308A48;
}

void sub_100E3C5F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A50);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3C608()
{
  unsigned __int8 v0;
  __int16 v2;
  unsigned __int8 v3[2];
  __int16 v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A60))
  {
    v2 = 180;
    sub_100DE0060(v3, "SensitiveWalkingEscalationRulesLookbackTimeInSeconds", &v2, 0);
    word_102308A58 = v4;
    __cxa_guard_release(&qword_102308A60);
  }
  return (unsigned __int16)word_102308A58;
}

void sub_100E3C688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A60);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3C6A0()
{
  unsigned __int8 v0;
  __int16 v2;
  unsigned __int8 v3[2];
  __int16 v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A70))
  {
    v2 = 120;
    sub_100DE0060(v3, "SensitiveWalkingEscalationRulesActiveTimeInSeconds", &v2, 0);
    word_102308A68 = v4;
    __cxa_guard_release(&qword_102308A70);
  }
  return (unsigned __int16)word_102308A68;
}

void sub_100E3C720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A70);
  _Unwind_Resume(a1);
}

float sub_100E3C738()
{
  unsigned __int8 v0;
  int v2;
  unsigned __int8 v3[4];
  int v4;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A80))
  {
    v2 = 1072064102;
    sub_1018C2254(v3, "SensitiveWalkingEscalationRulesActiveSpeedInMPH", &v2, 0);
    dword_102308A78 = v4;
    __cxa_guard_release(&qword_102308A80);
  }
  return *(float *)&dword_102308A78;
}

void sub_100E3C7BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A80);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3C7D4()
{
  unsigned __int8 v0;
  unsigned __int8 v2[4];
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_102308A90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308A90))
  {
    sub_1004AD1D8(v2, "VO2MaxDeescalatorMaxEscalationTimeSeconds", &dword_101C29B78, 0);
    dword_102308A88 = v3;
    __cxa_guard_release(&qword_102308A90);
  }
  return dword_102308A88;
}

void sub_100E3C850(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308A90);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3C868()
{
  return sub_100E3C7D4() + 30;
}

float sub_100E3C880()
{
  unsigned __int8 v0;
  unsigned __int8 v2[4];
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_102308AA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308AA0))
  {
    sub_1018C2254(v2, "VO2MaxDeescalatorMaxPercentBadSamples", &dword_101C29B7C, 0);
    dword_102308A98 = v3;
    __cxa_guard_release(&qword_102308AA0);
  }
  return *(float *)&dword_102308A98;
}

void sub_100E3C8FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308AA0);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3C914()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  v0 = atomic_load((unsigned __int8 *)&qword_102308AB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308AB0))
  {
    v2 = 0;
    sub_1018BF25C(v3, "VO2MaxDeescalatorDisableWRCheck", &v2, 0);
    byte_102308AA8 = v3[1];
    __cxa_guard_release(&qword_102308AB0);
  }
  return byte_102308AA8;
}

void sub_100E3C990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308AB0);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3C9A8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  v0 = atomic_load((unsigned __int8 *)&qword_102308AC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308AC0))
  {
    v2 = 0;
    sub_1018BF25C(v3, "VO2MaxDeescalatorDisableHRCheck", &v2, 0);
    byte_102308AB8 = v3[1];
    __cxa_guard_release(&qword_102308AC0);
  }
  return byte_102308AB8;
}

void sub_100E3CA24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308AC0);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3CA3C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  v0 = atomic_load((unsigned __int8 *)&qword_102308AD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308AD0))
  {
    v2 = 0;
    sub_1018BF25C(v3, "VO2MaxDeescalatorDisableGPSCheck", &v2, 0);
    byte_102308AC8 = v3[1];
    __cxa_guard_release(&qword_102308AD0);
  }
  return byte_102308AC8;
}

void sub_100E3CAB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308AD0);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3CAD0()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  v0 = atomic_load((unsigned __int8 *)&qword_102308AE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308AE0))
  {
    v2 = 0;
    sub_1018BF25C(v3, "VO2MaxDeescalatorDisableSessionStatsCheck", &v2, 0);
    byte_102308AD8 = v3[1];
    __cxa_guard_release(&qword_102308AE0);
  }
  return byte_102308AD8;
}

void sub_100E3CB4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308AE0);
  _Unwind_Resume(a1);
}

uint64_t sub_100E3CB64()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  v0 = atomic_load((unsigned __int8 *)&qword_102308AF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102308AF0))
  {
    v2 = 0;
    sub_1018BF25C(v3, "VO2MaxDeescalatorDisableIODisambiguationCheck", &v2, 0);
    byte_102308AE8 = v3[1];
    __cxa_guard_release(&qword_102308AF0);
  }
  return byte_102308AE8;
}

void sub_100E3CBE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308AF0);
  _Unwind_Resume(a1);
}

void sub_100E3CBF8(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  float64_t v16;
  float64_t v17;
  float64_t v18;
  float64_t v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  float64_t v24;
  float64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  float64_t v33;
  float64_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  float64_t v41;
  float64_t v42;
  float64_t v43;
  float64_t v44;
  float64_t v45;
  float64_t v46;
  int v47;
  int v48;
  int v49;
  const char *v50;
  uint8_t *v51;
  float64_t v52;
  float64_t v53;
  float64_t v54;
  float64_t v55;
  float64_t v56;
  float64_t v57;
  float64_t v58;
  float64_t v59;
  float64_t v60;
  float64_t v61;
  float64_t v62;
  float64_t v63;
  float64_t v64;
  float64_t v65;
  float64_t v66;
  float64_t v67;
  float64_t v68;
  float64_t v69;
  uint64_t v70;
  uint64_t *v71;
  const char *v72;
  uint8_t *v73;
  const char *v74;
  uint8_t *v75;
  uint64_t v76;
  int v77;
  float64_t v78;
  __int16 v79;
  float64_t v80;
  __int16 v81;
  float64_t v82;
  __int16 v83;
  float64_t v84;
  __int16 v85;
  _BYTE v86[10];
  float64_t v87;
  __int16 v88;
  float64_t v89;
  __int16 v90;
  float64_t v91;
  __int16 v92;
  float64_t v93;
  __int16 v94;
  float64_t v95;
  __int16 v96;
  float64_t v97;
  __int16 v98;
  float64_t v99;
  __int16 v100;
  float64_t v101;
  __int16 v102;
  float64_t v103;
  __int16 v104;
  float64_t v105;
  __int16 v106;
  float64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  float64_t v111;
  __int16 v112;
  float64_t v113;
  uint8_t buf[4];
  float64_t v115;
  __int16 v116;
  float64_t v117;
  __int16 v118;
  float64_t v119;
  __int16 v120;
  float64_t v121;
  __int16 v122;
  _BYTE v123[10];
  float64_t v124;
  __int16 v125;
  float64_t v126;
  __int16 v127;
  float64_t v128;
  __int16 v129;
  float64_t v130;
  __int16 v131;
  float64_t v132;
  __int16 v133;
  float64_t v134;
  __int16 v135;
  float64_t v136;
  __int16 v137;
  float64_t v138;
  __int16 v139;
  float64_t v140;
  __int16 v141;
  float64_t v142;
  __int16 v143;
  float64_t v144;
  __int16 v145;
  float64_t v146;
  __int16 v147;
  float64_t v148;
  __int16 v149;
  float64_t v150;

  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  if (sub_100E3D2AC(a2->f64))
  {
    v11 = 4;
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218B428);
    v12 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Rejection: ModelContinuousWalking missing required feature inputs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_10218B428);
      LOWORD(v77) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Rejection: ModelContinuousWalking missing required feature inputs", &v77, 2);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
    *(_DWORD *)(a5 + 48) = 8;
    v11 = 12;
  }
  if (!*(_BYTE *)(a4 + 57))
    *(_DWORD *)(a5 + 48) = v11;
  sub_100725800(a1, a5, a3);
  v13 = sub_1009FF700(a2);
  *(double *)(a5 + 24) = v13;
  *(double *)(a5 + 32) = sub_1009FF808(v13);
  *(_QWORD *)(a5 + 40) = v14;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218B428);
  v15 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(double *)(a5 + 32);
    v17 = *(double *)(a5 + 40);
    v18 = *(double *)(a5 + 16);
    v19 = *(double *)(a5 + 24);
    v20 = *(_DWORD *)(a5 + 48);
    v21 = *(_DWORD *)(a5 + 8);
    v22 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)buf = 134350593;
    v115 = v18;
    v116 = 2050;
    v117 = v16;
    v118 = 2050;
    v119 = v17;
    v120 = 2049;
    v121 = v19;
    v122 = 1026;
    *(_DWORD *)v123 = v20;
    *(_WORD *)&v123[4] = 1025;
    *(_DWORD *)&v123[6] = v21;
    LOWORD(v124) = 1025;
    *(_DWORD *)((char *)&v124 + 2) = v22;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelContinuousWalking::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218B428);
    v43 = *(double *)(a5 + 32);
    v44 = *(double *)(a5 + 40);
    v45 = *(double *)(a5 + 16);
    v46 = *(double *)(a5 + 24);
    v47 = *(_DWORD *)(a5 + 48);
    v48 = *(_DWORD *)(a5 + 8);
    v49 = *(_DWORD *)(a5 + 12);
    v77 = 134350593;
    v78 = v45;
    v79 = 2050;
    v80 = v43;
    v81 = 2050;
    v82 = v44;
    v83 = 2049;
    v84 = v46;
    v85 = 1026;
    *(_DWORD *)v86 = v47;
    *(_WORD *)&v86[4] = 1025;
    *(_DWORD *)&v86[6] = v48;
    LOWORD(v87) = 1025;
    *(_DWORD *)((char *)&v87 + 2) = v49;
    LODWORD(v76) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelContinuousWalking::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", &v77, v76);
    v51 = (uint8_t *)v50;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v50);
    if (v51 != buf)
      free(v51);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218B428);
  v23 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v24 = a2->f64[0];
    v25 = a2->f64[1];
    v26 = a2[4].f64[0];
    v27 = a2[4].f64[1];
    v28 = a2[1].f64[0];
    v29 = a2[1].f64[1];
    v31 = a2[3].f64[0];
    v30 = a2[3].f64[1];
    v32 = a2[2].f64[0];
    v33 = a2[2].f64[1];
    v35 = a2[8].f64[1];
    v34 = a2[9].f64[0];
    v36 = a2[6].f64[0];
    v37 = a2[6].f64[1];
    v39 = a2[7].f64[1];
    v38 = a2[8].f64[0];
    v40 = a2[7].f64[0];
    v42 = a2[5].f64[0];
    v41 = a2[5].f64[1];
    *(_DWORD *)buf = 134288129;
    v115 = v24;
    v116 = 2049;
    v117 = v25;
    v118 = 2049;
    v119 = v28;
    v120 = 2049;
    v121 = v26;
    v122 = 2049;
    *(float64_t *)v123 = v27;
    *(_WORD *)&v123[8] = 2049;
    v124 = v30;
    v125 = 2049;
    v126 = v29;
    v127 = 2049;
    v128 = v33;
    v129 = 2049;
    v130 = v31;
    v131 = 2049;
    v132 = v32;
    v133 = 2049;
    v134 = v35;
    v135 = 2049;
    v136 = v34;
    v137 = 2049;
    v138 = v39;
    v139 = 2049;
    v140 = v36;
    v141 = 2049;
    v142 = v37;
    v143 = 2049;
    v144 = v38;
    v145 = 2049;
    v146 = v41;
    v147 = 2049;
    v148 = v40;
    v149 = 2049;
    v150 = v42;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelContinuousWalking::Features,allBoutsBoutDurationCv,%{private}.2f,allBoutsBoutDurationMedian,%{private}.2f,allBoutsCycleTimeCv,%{private}.2f,intermediateBoutsWalkingSpeedMedian,%{private}.2f,intermediateBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,intermediateBoutsWalkingSpeedCv,%{private}.2f,intermediateBoutsCycleTimeCv,%{private}.2f,intermediateBoutsStepLengthMedian,%{private}.2f,intermediateBoutsStepLengthMedianHeightnorm,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedMedian,%{private}.2f,shortBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,shortBoutsStepLengthMedianHeightnorm,%{private}.2f,shortBoutsCycleTimeMedian,%{private}.2f,shortBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedCv,%{private}.2f,shortBoutsCycleTimeCv,%{private}.2f,shortBoutsStepLengthCv,%{private}.2f,longBoutsWalkingSpeedCountRatioLog,%{private}.2f", buf, 0xC0u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218B428);
    v52 = a2->f64[0];
    v53 = a2->f64[1];
    v54 = a2[4].f64[0];
    v55 = a2[4].f64[1];
    v56 = a2[1].f64[0];
    v57 = a2[1].f64[1];
    v59 = a2[3].f64[0];
    v58 = a2[3].f64[1];
    v61 = a2[2].f64[0];
    v60 = a2[2].f64[1];
    v63 = a2[8].f64[1];
    v62 = a2[9].f64[0];
    v64 = a2[6].f64[0];
    v65 = a2[6].f64[1];
    v67 = a2[7].f64[1];
    v66 = a2[8].f64[0];
    v68 = a2[7].f64[0];
    v71 = (uint64_t *)&a2[5];
    v69 = a2[5].f64[0];
    v70 = v71[1];
    v77 = 134288129;
    v78 = v52;
    v79 = 2049;
    v80 = v53;
    v81 = 2049;
    v82 = v56;
    v83 = 2049;
    v84 = v54;
    v85 = 2049;
    *(float64_t *)v86 = v55;
    *(_WORD *)&v86[8] = 2049;
    v87 = v58;
    v88 = 2049;
    v89 = v57;
    v90 = 2049;
    v91 = v60;
    v92 = 2049;
    v93 = v59;
    v94 = 2049;
    v95 = v61;
    v96 = 2049;
    v97 = v63;
    v98 = 2049;
    v99 = v62;
    v100 = 2049;
    v101 = v67;
    v102 = 2049;
    v103 = v64;
    v104 = 2049;
    v105 = v65;
    v106 = 2049;
    v107 = v66;
    v108 = 2049;
    v109 = v70;
    v110 = 2049;
    v111 = v68;
    v112 = 2049;
    v113 = v69;
    LODWORD(v76) = 192;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelContinuousWalking::Features,allBoutsBoutDurationCv,%{private}.2f,allBoutsBoutDurationMedian,%{private}.2f,allBoutsCycleTimeCv,%{private}.2f,intermediateBoutsWalkingSpeedMedian,%{private}.2f,intermediateBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,intermediateBoutsWalkingSpeedCv,%{private}.2f,intermediateBoutsCycleTimeCv,%{private}.2f,intermediateBoutsStepLengthMedian,%{private}.2f,intermediateBoutsStepLengthMedianHeightnorm,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedMedian,%{private}.2f,shortBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,shortBoutsStepLengthMedianHeightnorm,%{private}.2f,shortBoutsCycleTimeMedian,%{private}.2f,shortBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedCv,%{private}.2f,shortBoutsCycleTimeCv,%{private}.2f,shortBoutsStepLengthCv,%{private}.2f,longBoutsWalkingSpeedCountRatioLog,%{private}.2f", &v77, v76);
    v73 = (uint8_t *)v72;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v72);
    if (v73 != buf)
      free(v73);
  }
}

BOOL sub_100E3D2AC(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY
      && a1[10] != -INFINITY
      && a1[11] != -INFINITY
      && a1[12] != -INFINITY
      && a1[13] != -INFINITY
      && a1[14] != -INFINITY
      && a1[15] != -INFINITY
      && a1[16] != -INFINITY
      && a1[17] != -INFINITY
      && a1[18] != -INFINITY;
}

void sub_100E3D3EC(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  int64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double *v12;
  double *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  double v64;
  double *v65;
  double *v66;
  double *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  double v98;
  double *v99;
  double *v100;
  double *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  double *v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  double v111;
  double *v112;
  double *v113;
  double *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  double *v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  double v125;
  double *v126;
  double *v127;
  double *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  double *v134;
  uint64_t v135;
  int v136;
  NSObject *v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  const char *v143;
  char *v144;
  uint64_t v145;
  void *v146;
  double *v147;
  double *v148;
  void *v149;
  char *v150;
  char *v151;
  void *v152;
  char *v153;
  char *v154;
  void *v155;
  char *v156;
  char *v157;
  void *v158;
  double *v159;
  double *v160;
  void *v161;
  double *v162;
  double *v163;
  void *v164;
  double *v165;
  double *v166;
  void *v167;
  char *v168;
  char *v169;
  void *v170;
  char *v171;
  char *v172;
  void *__p;
  char *v174;
  char *v175;
  void *v176;
  double *v177;
  uint64_t v178;
  int v179;
  double v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  __int16 v203;
  unint64_t v204;
  __int16 v205;
  unint64_t v206;
  _BYTE buf[12];
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  __int16 v216;
  uint64_t v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  __int16 v224;
  uint64_t v225;
  __int16 v226;
  uint64_t v227;
  __int16 v228;
  uint64_t v229;
  __int16 v230;
  unint64_t v231;
  __int16 v232;
  unint64_t v233;

  v7 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)a3 = v7;
  *(int64x2_t *)(a3 + 16) = v7;
  *(int64x2_t *)(a3 + 32) = v7;
  *(int64x2_t *)(a3 + 48) = v7;
  *(int64x2_t *)(a3 + 64) = v7;
  *(int64x2_t *)(a3 + 80) = v7;
  *(int64x2_t *)(a3 + 96) = v7;
  *(int64x2_t *)(a3 + 112) = v7;
  *(int64x2_t *)(a3 + 128) = v7;
  *(_QWORD *)(a3 + 144) = 0xFFF0000000000000;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v9 = *a1;
  v8 = a1[1];
  *(_QWORD *)buf = &v176;
  if (v9 == v8)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    do
    {
      v10 = *(double *)(v9 + 8);
      if (v10 < a4 && v10 >= a4 + -2419200.0)
        sub_1007264EC((void ***)buf, (_OWORD *)v9);
      v9 += 224;
    }
    while (v9 != v8);
    v13 = (double *)v176;
    v12 = v177;
  }
  v145 = a2;
  __p = 0;
  v174 = 0;
  v175 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  if (v13 == v12)
  {
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v13[2] - v13[1];
      if (v16 > 600.0 || v16 <= 60.0)
      {
        v18 = *((_DWORD *)v13 + 13);
        if (v18)
          v19 = 42;
        else
          v19 = -1;
        v20 = v19 & (_DWORD)v13[24];
        if (v16 <= 60.0)
        {
          if (!v20)
          {
            v25 = v156;
            if (v156 >= v157)
            {
              v33 = (char *)v155;
              v34 = (v156 - (_BYTE *)v155) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_284;
              v36 = v157 - (_BYTE *)v155;
              if ((v157 - (_BYTE *)v155) >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_10025E6A0((uint64_t)&v157, v37);
                v33 = (char *)v155;
                v25 = v156;
              }
              else
              {
                v38 = 0;
              }
              v73 = &v38[8 * v34];
              *(double *)v73 = v13[14];
              v26 = v73 + 8;
              while (v25 != v33)
              {
                v74 = *((_QWORD *)v25 - 1);
                v25 -= 8;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              v155 = v73;
              v156 = v26;
              v157 = &v38[8 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(double *)v156 = v13[14];
              v26 = v25 + 8;
            }
            v156 = v26;
            v18 = *((_DWORD *)v13 + 13);
          }
          if (v18)
            v75 = 42;
          else
            v75 = -1;
          if ((v75 & *((_DWORD *)v13 + 49)) == 0)
          {
            v76 = v153;
            if (v153 >= v154)
            {
              v78 = (char *)v152;
              v79 = (v153 - (_BYTE *)v152) >> 3;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_284;
              v81 = v154 - (_BYTE *)v152;
              if ((v154 - (_BYTE *)v152) >> 2 > v80)
                v80 = v81 >> 2;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v80;
              if (v82)
              {
                v83 = (char *)sub_10025E6A0((uint64_t)&v154, v82);
                v78 = (char *)v152;
                v76 = v153;
              }
              else
              {
                v83 = 0;
              }
              v84 = &v83[8 * v79];
              *(double *)v84 = v13[15];
              v77 = v84 + 8;
              while (v76 != v78)
              {
                v85 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v84 - 1) = v85;
                v84 -= 8;
              }
              v152 = v84;
              v153 = v77;
              v154 = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(double *)v153 = v13[15];
              v77 = v76 + 8;
            }
            v153 = v77;
            v18 = *((_DWORD *)v13 + 13);
          }
          if (v18)
            v86 = 42;
          else
            v86 = -1;
          if ((v86 & (_DWORD)v13[25]) == 0)
          {
            v87 = v150;
            if (v150 >= v151)
            {
              v89 = (char *)v149;
              v90 = (v150 - (_BYTE *)v149) >> 3;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61)
                goto LABEL_284;
              v92 = v151 - (_BYTE *)v149;
              if ((v151 - (_BYTE *)v149) >> 2 > v91)
                v91 = v92 >> 2;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                v94 = (char *)sub_10025E6A0((uint64_t)&v151, v93);
                v89 = (char *)v149;
                v87 = v150;
              }
              else
              {
                v94 = 0;
              }
              v95 = &v94[8 * v90];
              *(double *)v95 = v13[16];
              v88 = v95 + 8;
              while (v87 != v89)
              {
                v96 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              v149 = v95;
              v150 = v88;
              v151 = &v94[8 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *(double *)v150 = v13[16];
              v88 = v87 + 8;
            }
            v150 = v88;
            v18 = *((_DWORD *)v13 + 13);
          }
          if (v18)
            v97 = 42;
          else
            v97 = -1;
          if ((v97 & (_DWORD)v13[24]) == 0)
          {
            v98 = v13[7];
            if (v98 > 0.0)
            {
              v99 = v147;
              if (v147 >= v148)
              {
                v101 = (double *)v146;
                v102 = ((char *)v147 - (_BYTE *)v146) >> 3;
                v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 61)
                  goto LABEL_284;
                v104 = (char *)v148 - (_BYTE *)v146;
                if (((char *)v148 - (_BYTE *)v146) >> 2 > v103)
                  v103 = v104 >> 2;
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
                  v105 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v105 = v103;
                if (v105)
                {
                  v106 = (char *)sub_10025E6A0((uint64_t)&v148, v105);
                  v101 = (double *)v146;
                  v99 = v147;
                  v98 = v13[7];
                }
                else
                {
                  v106 = 0;
                }
                v109 = (double *)&v106[8 * v102];
                *v109 = v98;
                v100 = v109 + 1;
                while (v99 != v101)
                {
                  v110 = *((_QWORD *)v99-- - 1);
                  *((_QWORD *)v109-- - 1) = v110;
                }
                v146 = v109;
                v147 = v100;
                v148 = (double *)&v106[8 * v105];
                if (v101)
                  operator delete(v101);
              }
              else
              {
                *v147 = v98;
                v100 = v99 + 1;
              }
              v147 = v100;
            }
          }
        }
        else if (!v20)
        {
          ++v14;
        }
      }
      else
      {
        v21 = *((_DWORD *)v13 + 13);
        if (v21)
          v22 = 42;
        else
          v22 = -1;
        if ((v22 & (_DWORD)v13[24]) == 0)
        {
          v23 = v174;
          if (v174 >= v175)
          {
            v27 = (char *)__p;
            v28 = (v174 - (_BYTE *)__p) >> 3;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61)
              goto LABEL_284;
            v30 = v175 - (_BYTE *)__p;
            if ((v175 - (_BYTE *)__p) >> 2 > v29)
              v29 = v30 >> 2;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)sub_10025E6A0((uint64_t)&v175, v31);
              v27 = (char *)__p;
              v23 = v174;
            }
            else
            {
              v32 = 0;
            }
            v39 = &v32[8 * v28];
            *(double *)v39 = v13[14];
            v24 = v39 + 8;
            while (v23 != v27)
            {
              v40 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v39 - 1) = v40;
              v39 -= 8;
            }
            __p = v39;
            v174 = v24;
            v175 = &v32[8 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(double *)v174 = v13[14];
            v24 = v23 + 8;
          }
          v174 = v24;
          v21 = *((_DWORD *)v13 + 13);
        }
        if (v21)
          v41 = 42;
        else
          v41 = -1;
        if ((v41 & *((_DWORD *)v13 + 49)) == 0)
        {
          v42 = v171;
          if (v171 >= v172)
          {
            v44 = (char *)v170;
            v45 = (v171 - (_BYTE *)v170) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
              goto LABEL_284;
            v47 = v172 - (_BYTE *)v170;
            if ((v172 - (_BYTE *)v170) >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_10025E6A0((uint64_t)&v172, v48);
              v44 = (char *)v170;
              v42 = v171;
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[8 * v45];
            *(double *)v50 = v13[15];
            v43 = v50 + 8;
            while (v42 != v44)
            {
              v51 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *((_QWORD *)v50 - 1) = v51;
              v50 -= 8;
            }
            v170 = v50;
            v171 = v43;
            v172 = &v49[8 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(double *)v171 = v13[15];
            v43 = v42 + 8;
          }
          v171 = v43;
          v21 = *((_DWORD *)v13 + 13);
        }
        if (v21)
          v52 = 42;
        else
          v52 = -1;
        if ((v52 & (_DWORD)v13[25]) == 0)
        {
          v53 = v168;
          if (v168 >= v169)
          {
            v55 = (char *)v167;
            v56 = (v168 - (_BYTE *)v167) >> 3;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 61)
              goto LABEL_284;
            v58 = v169 - (_BYTE *)v167;
            if ((v169 - (_BYTE *)v167) >> 2 > v57)
              v57 = v58 >> 2;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)sub_10025E6A0((uint64_t)&v169, v59);
              v55 = (char *)v167;
              v53 = v168;
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[8 * v56];
            *(double *)v61 = v13[16];
            v54 = v61 + 8;
            while (v53 != v55)
            {
              v62 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *((_QWORD *)v61 - 1) = v62;
              v61 -= 8;
            }
            v167 = v61;
            v168 = v54;
            v169 = &v60[8 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(double *)v168 = v13[16];
            v54 = v53 + 8;
          }
          v168 = v54;
          v21 = *((_DWORD *)v13 + 13);
        }
        if (v21)
          v63 = 42;
        else
          v63 = -1;
        if ((v63 & (_DWORD)v13[24]) == 0)
        {
          v64 = v13[7];
          if (v64 > 0.0)
          {
            v65 = v159;
            if (v159 >= v160)
            {
              v67 = (double *)v158;
              v68 = ((char *)v159 - (_BYTE *)v158) >> 3;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61)
                goto LABEL_284;
              v70 = (char *)v160 - (_BYTE *)v158;
              if (((char *)v160 - (_BYTE *)v158) >> 2 > v69)
                v69 = v70 >> 2;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71)
              {
                v72 = (char *)sub_10025E6A0((uint64_t)&v160, v71);
                v67 = (double *)v158;
                v65 = v159;
                v64 = v13[7];
              }
              else
              {
                v72 = 0;
              }
              v107 = (double *)&v72[8 * v68];
              *v107 = v64;
              v66 = v107 + 1;
              while (v65 != v67)
              {
                v108 = *((_QWORD *)v65-- - 1);
                *((_QWORD *)v107-- - 1) = v108;
              }
              v158 = v107;
              v159 = v66;
              v160 = (double *)&v72[8 * v71];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *v159 = v64;
              v66 = v65 + 1;
            }
            v159 = v66;
          }
        }
      }
      if (*((_DWORD *)v13 + 9))
      {
        v111 = v13[2] - v13[1];
        v112 = v165;
        if (v165 >= v166)
        {
          v114 = (double *)v164;
          v115 = ((char *)v165 - (_BYTE *)v164) >> 3;
          v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 61)
            sub_100259694();
          v117 = (char *)v166 - (_BYTE *)v164;
          if (((char *)v166 - (_BYTE *)v164) >> 2 > v116)
            v116 = v117 >> 2;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
            v118 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v118 = v116;
          if (v118)
          {
            v119 = (char *)sub_10025E6A0((uint64_t)&v166, v118);
            v114 = (double *)v164;
            v112 = v165;
          }
          else
          {
            v119 = 0;
          }
          v120 = (double *)&v119[8 * v115];
          *v120 = v111;
          v113 = v120 + 1;
          while (v112 != v114)
          {
            v121 = *((_QWORD *)v112-- - 1);
            *((_QWORD *)v120-- - 1) = v121;
          }
          v164 = v120;
          v165 = v113;
          v166 = (double *)&v119[8 * v118];
          if (v114)
            operator delete(v114);
        }
        else
        {
          *v165 = v111;
          v113 = v112 + 1;
        }
        v165 = v113;
      }
      v122 = *((_DWORD *)v13 + 48);
      v123 = *((_DWORD *)v13 + 13);
      if (v123)
        v124 = 42;
      else
        v124 = -1;
      if ((v124 & v122) == 0)
      {
        v125 = v13[7];
        if (v125 > 0.0)
        {
          v126 = v162;
          if (v162 >= v163)
          {
            v128 = (double *)v161;
            v129 = ((char *)v162 - (_BYTE *)v161) >> 3;
            v130 = v129 + 1;
            if ((unint64_t)(v129 + 1) >> 61)
LABEL_284:
              sub_100259694();
            v131 = (char *)v163 - (_BYTE *)v161;
            if (((char *)v163 - (_BYTE *)v161) >> 2 > v130)
              v130 = v131 >> 2;
            if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
              v132 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v132 = v130;
            if (v132)
            {
              v133 = (char *)sub_10025E6A0((uint64_t)&v163, v132);
              v128 = (double *)v161;
              v126 = v162;
              v125 = v13[7];
            }
            else
            {
              v133 = 0;
            }
            v134 = (double *)&v133[8 * v129];
            *v134 = v125;
            v127 = v134 + 1;
            while (v126 != v128)
            {
              v135 = *((_QWORD *)v126-- - 1);
              *((_QWORD *)v134-- - 1) = v135;
            }
            v161 = v134;
            v162 = v127;
            v163 = (double *)&v133[8 * v132];
            if (v128)
              operator delete(v128);
          }
          else
          {
            *v162 = v125;
            v127 = v126 + 1;
          }
          v162 = v127;
          v122 = *((_DWORD *)v13 + 48);
          v123 = *((_DWORD *)v13 + 13);
        }
      }
      if (v123)
        v136 = 42;
      else
        v136 = -1;
      if ((v136 & v122) == 0)
        ++v15;
      v13 += 28;
    }
    while (v13 != v12);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10218B428);
  v137 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134352384;
    *(double *)&buf[4] = a4;
    v208 = 2050;
    v209 = 0x6DB6DB6DB6DB6DB7 * (((char *)v177 - (_BYTE *)v176) >> 5);
    v210 = 2050;
    v211 = (v174 - (_BYTE *)__p) >> 3;
    v212 = 2050;
    v213 = (v171 - (_BYTE *)v170) >> 3;
    v214 = 2050;
    v215 = (v168 - (_BYTE *)v167) >> 3;
    v216 = 2050;
    v217 = ((char *)v165 - (_BYTE *)v164) >> 3;
    v218 = 2050;
    v219 = ((char *)v162 - (_BYTE *)v161) >> 3;
    v220 = 2050;
    v221 = ((char *)v159 - (_BYTE *)v158) >> 3;
    v222 = 2050;
    v223 = (v156 - (_BYTE *)v155) >> 3;
    v224 = 2050;
    v225 = (v153 - (_BYTE *)v152) >> 3;
    v226 = 2050;
    v227 = (v150 - (_BYTE *)v149) >> 3;
    v228 = 2050;
    v229 = ((char *)v147 - (_BYTE *)v146) >> 3;
    v230 = 2050;
    v231 = v14;
    v232 = 2050;
    v233 = v15;
    _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "SteadinessModelContinuousWalking::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateWalkingSpeeds,%{public}lu,numIntermediateDST,%{public}lu,numIntermediateStepLengths,%{public}lu,numDurations,%{public}lu,numCycleTimes,%{public}lu,numIntermediateCycleTimes,%{public}lu,numShortWalkingSpeeds,%{public}lu,numShortDST,%{public}lu,numShortStepLengths,%{public}lu,numShortCycleTimes,%{public}lu,numLongBouts,%{public}lu,numAllBouts,%{public}lu", buf, 0x8Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10218B428);
    v179 = 134352384;
    v180 = a4;
    v181 = 2050;
    v182 = 0x6DB6DB6DB6DB6DB7 * (((char *)v177 - (_BYTE *)v176) >> 5);
    v183 = 2050;
    v184 = (v174 - (_BYTE *)__p) >> 3;
    v185 = 2050;
    v186 = (v171 - (_BYTE *)v170) >> 3;
    v187 = 2050;
    v188 = (v168 - (_BYTE *)v167) >> 3;
    v189 = 2050;
    v190 = ((char *)v165 - (_BYTE *)v164) >> 3;
    v191 = 2050;
    v192 = ((char *)v162 - (_BYTE *)v161) >> 3;
    v193 = 2050;
    v194 = ((char *)v159 - (_BYTE *)v158) >> 3;
    v195 = 2050;
    v196 = (v156 - (_BYTE *)v155) >> 3;
    v197 = 2050;
    v198 = (v153 - (_BYTE *)v152) >> 3;
    v199 = 2050;
    v200 = (v150 - (_BYTE *)v149) >> 3;
    v201 = 2050;
    v202 = ((char *)v147 - (_BYTE *)v146) >> 3;
    v203 = 2050;
    v204 = v14;
    v205 = 2050;
    v206 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "SteadinessModelContinuousWalking::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateWalkingSpeeds,%{public}lu,numIntermediateDST,%{public}lu,numIntermediateStepLengths,%{public}lu,numDurations,%{public}lu,numCycleTimes,%{public}lu,numIntermediateCycleTimes,%{public}lu,numShortWalkingSpeeds,%{public}lu,numShortDST,%{public}lu,numShortStepLengths,%{public}lu,numShortCycleTimes,%{public}lu,numLongBouts,%{public}lu,numAllBouts,%{public}lu", &v179, 142);
    v144 = (char *)v143;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelContinuousWalking::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v143);
    if (v144 != buf)
      free(v144);
  }
  *(double *)a3 = sub_101081E44((double **)&v164);
  *(double *)(a3 + 8) = sub_101082068((uint64_t *)&v164);
  *(double *)(a3 + 16) = sub_101081E44((double **)&v161);
  v138 = sub_101082068((uint64_t *)&__p);
  *(double *)(a3 + 64) = v138;
  if (v138 != -INFINITY)
    *(double *)(a3 + 72) = v138 / sqrtf(*(float *)(v145 + 8) * 9.8067);
  *(double *)(a3 + 56) = sub_101081E44((double **)&__p);
  *(double *)(a3 + 24) = sub_101081E44((double **)&v158);
  v139 = sub_101082068((uint64_t *)&v167);
  *(double *)(a3 + 40) = v139;
  if (v139 != -INFINITY)
    *(double *)(a3 + 48) = v139 / *(float *)(v145 + 8);
  *(double *)(a3 + 32) = sub_101082068((uint64_t *)&v170);
  v140 = sub_101082068((uint64_t *)&v155);
  *(double *)(a3 + 136) = v140;
  if (v140 != -INFINITY)
    *(double *)(a3 + 144) = v140 / sqrtf(*(float *)(v145 + 8) * 9.8067);
  v141 = sub_101082068((uint64_t *)&v149);
  *(double *)(a3 + 120) = v141;
  if (v141 != -INFINITY)
    *(double *)(a3 + 120) = v141 / *(float *)(v145 + 8);
  *(double *)(a3 + 96) = sub_101082068((uint64_t *)&v146);
  *(double *)(a3 + 104) = sub_101082068((uint64_t *)&v152);
  *(double *)(a3 + 128) = sub_101081E44((double **)&v155);
  *(double *)(a3 + 88) = sub_101081E44((double **)&v146);
  *(double *)(a3 + 112) = sub_101081E44((double **)&v149);
  if (v15)
  {
    v142 = (double)v14;
    if (!v14)
      v142 = 0.5;
    *(long double *)(a3 + 80) = log(v142 / (double)v15);
  }
  if (v146)
  {
    v147 = (double *)v146;
    operator delete(v146);
  }
  if (v149)
  {
    v150 = (char *)v149;
    operator delete(v149);
  }
  if (v152)
  {
    v153 = (char *)v152;
    operator delete(v152);
  }
  if (v155)
  {
    v156 = (char *)v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = (double *)v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = (double *)v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = (double *)v164;
    operator delete(v164);
  }
  if (v167)
  {
    v168 = (char *)v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = (char *)v170;
    operator delete(v170);
  }
  if (__p)
  {
    v174 = (char *)__p;
    operator delete(__p);
  }
  if (v176)
  {
    v177 = (double *)v176;
    operator delete(v176);
  }
}

void sub_100E3E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);
  if (a49)
    operator delete(a49);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(exception_object);
}

void sub_100E3E44C(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

id *sub_100E3E478(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return a1;
}

uint64_t sub_100E3E4B0(id *a1, int a2, double *a3, double *a4, double *a5, int a6, double a7, double a8, double a9)
{
  uint64_t result;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;

  *a3 = a7;
  *a4 = a8;
  *a5 = a9;
  if (a2 == 2)
    return 2;
  result = sub_1001133C0(a7, a8);
  if ((_DWORD)result)
  {
    result = (uint64_t)+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", a7, a8);
    if ((_DWORD)result)
    {
      v21 = a7;
      v22 = a8;
      v20 = a9;
      if (!*a1)
        *a1 = objc_alloc_init((Class)GEOLocationShifter);
      if (a6 >= 1)
      {
        v18 = 0;
        while (!objc_msgSend(*a1, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v21, &v20, a7, a8, a9))
        {
          if (++v18 >= a6)
            return 1;
        }
        v19 = v22;
        *a3 = v21;
        *a4 = v19;
        *a5 = v20;
        return 2;
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_100E3E5C0(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _BOOL8 result;
  uint64_t v15;
  double v16;
  double v17;
  double v18;

  v17 = 0.0;
  v18 = 0.0;
  v16 = 0.0;
  result = sub_10011E780(a1, &v17, &v18, &v16, a6, a7, 0.0, a8, a9, 0.0);
  if (result)
  {
    v15 = 0;
    return sub_10008111C(a1, a2, a3, (double *)&v15, a4, a5, 0.0, v17, v18, v16);
  }
  return result;
}

uint64_t sub_100E3E66C(uint64_t a1)
{
  IOPMAssertionID v2;
  const void *v3;

  *(_QWORD *)a1 = off_10218B458;
  v2 = *(_DWORD *)(a1 + 12);
  if (v2)
  {
    IOPMAssertionRelease(v2);
    *(_DWORD *)(a1 + 12) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }

  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_100E3E6CC(uint64_t a1)
{
  sub_100E3E66C(a1);
  operator delete();
}

BOOL sub_100E3E6F0(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;
  NSObject *v5;
  int v6;
  void **v7;
  _BOOL8 result;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  char *v12;
  double Current;
  double v14;
  double v15;
  NSObject *v16;
  void **v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  const char *v21;
  double v22;
  _BYTE buf[22];
  char v24;
  int v25;
  _BYTE v26[18];
  void *__p[2];
  char v28;

  v1 = *(_DWORD *)(a1 + 8);
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v3 < 0 != v2)
    return 0;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218B498);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a1 + 8);
      sub_1001A486C(*(const __CFString **)(a1 + 16), (uint64_t)__p);
      v7 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Release power assertion, dec ref, %d, %s", buf, 0x12u);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218B498);
      v9 = qword_1022A02D8;
      v10 = *(_DWORD *)(a1 + 8);
      sub_1001A486C(*(const __CFString **)(a1 + 16), (uint64_t)buf);
      if (v24 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v25 = 67109378;
      *(_DWORD *)v26 = v10;
      *(_WORD *)&v26[4] = 2080;
      *(_QWORD *)&v26[6] = v11;
      LODWORD(v21) = 18;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 2, "Release power assertion, dec ref, %d, %s", &v25, v21);
      if (v24 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPowerAssertion::releasePowerAssertion()", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
      return 0;
    }
  }
  else
  {
    IOPMAssertionRelease(*(_DWORD *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = 0;

    *(_QWORD *)(a1 + 40) = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v14 = *(double *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (qword_1022A02D0 != -1)
    {
      v22 = Current;
      dispatch_once(&qword_1022A02D0, &stru_10218B498);
      Current = v22;
    }
    v15 = Current - v14;
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_1001A486C(*(const __CFString **)(a1 + 16), (uint64_t)__p);
      v17 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Release power assertion, %s, heldFor, %.2lf", buf, 0x16u);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218B498);
      v18 = qword_1022A02D8;
      sub_1001A486C(*(const __CFString **)(a1 + 16), (uint64_t)buf);
      if (v24 >= 0)
        v19 = buf;
      else
        v19 = *(_BYTE **)buf;
      v25 = 136315394;
      *(_QWORD *)v26 = v19;
      *(_WORD *)&v26[8] = 2048;
      *(double *)&v26[10] = v15;
      LODWORD(v21) = 22;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 2, "Release power assertion, %s, heldFor, %.2lf", (const char *)&v25, *(double *)&v21);
      if (v24 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPowerAssertion::releasePowerAssertion()", "%s\n", v20);
      if (v20 != (char *)__p)
        free(v20);
    }
    return 1;
  }
  return result;
}

void sub_100E3EB40(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100E3EB6C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E3EF14(id *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  void *String;
  uint64_t result;
  CLCKVO2MaxSessionAttributes *v14;
  CLCKVO2MaxEstimate *v15;
  CLCKVO2MaxSummary *v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        a1[3] = String;
        goto LABEL_30;
      case 2u:
        v14 = objc_alloc_init(CLCKVO2MaxSessionAttributes);

        a1[2] = v14;
        v17 = 0;
        v18 = 0;
        if (!PBReaderPlaceMark(a2, &v17) || (sub_10108A4E4((uint64_t)v14, a2) & 1) == 0)
          return 0;
        goto LABEL_29;
      case 3u:
        v15 = objc_alloc_init(CLCKVO2MaxEstimate);

        a1[1] = v15;
        v17 = 0;
        v18 = 0;
        if (!PBReaderPlaceMark(a2, &v17) || (sub_100498304((uint64_t)v15, a2) & 1) == 0)
          return 0;
        goto LABEL_29;
      case 4u:
        v16 = objc_alloc_init(CLCKVO2MaxSummary);
        objc_msgSend(a1, "addSummaries:", v16);

        v17 = 0;
        v18 = 0;
        if (PBReaderPlaceMark(a2, &v17) && (sub_100EDE230((uint64_t)v16, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark(a2, &v17);
LABEL_30:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_30;
    }
  }
}

double sub_100E3F864(uint64_t a1)
{
  double result;

  result = 7.59982549e15;
  *(_OWORD *)a1 = xmmword_101C29BB0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_100E3F878(uint64_t result, float a2)
{
  float v2;
  int v3;

  v2 = *(float *)result;
  if (*(float *)result >= 65.0)
    v3 = 1;
  else
    v3 = 4;
  *(_DWORD *)(result + 16) = v3;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = fminf(v2, 65.0);
  *(float *)(result + 12) = a2;
  return result;
}

float sub_100E3F8A4(uint64_t a1, float a2)
{
  int v2;
  int v3;
  float result;

  *(float *)a1 = a2;
  v2 = *(_DWORD *)(a1 + 4);
  if (a2 >= 65.0)
    v3 = 1;
  else
    v3 = 4;
  *(_DWORD *)(a1 + 16) = v3;
  result = fminf(a2, 65.0);
  *(float *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t sub_100E3F8D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 uu1[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  *(_QWORD *)a1 = off_10218B4C8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 24) = v10;
  }
  sub_1006D0F34(a1 + 48, (_QWORD *)(a3 + 40));
  *(_BYTE *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = a5;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 488) = 1;
  sub_100E3FA84(a1, (unsigned __int8 *)a2);
  v11 = *(_OWORD *)(a2 + 144);
  v25 = *(_OWORD *)(a2 + 128);
  v26 = v11;
  v27 = *(_QWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 80);
  v21 = *(_OWORD *)(a2 + 64);
  v22 = v12;
  v13 = *(_OWORD *)(a2 + 112);
  v23 = *(_OWORD *)(a2 + 96);
  v24 = v13;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu1 = *(_OWORD *)a2;
  v18 = v14;
  v15 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  v20 = v15;
  sub_100E40014(a1, uu1);
  sub_100E405CC(a1, *(_QWORD *)(a2 + 48));
  return a1;
}

void sub_100E3FA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  _Unwind_Resume(exception_object);
}

__n128 sub_100E3FA84(uint64_t a1, unsigned __int8 *uu2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSObject *v34;
  __n128 result;
  double v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  NSObject *v42;
  double v43;
  unsigned __int8 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _WORD v52[8];
  unsigned __int8 uu1[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = (_QWORD *)(v5 + 8 * (v4 / 0x18));
  if (v6 == v5)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 8 * (v4 / 0x18)) + 168 * (v4 % 0x18);
    v9 = *(_QWORD *)(v5 + 8 * ((*(_QWORD *)(a1 + 88) + v4) / 0x18)) + 168 * ((*(_QWORD *)(a1 + 88) + v4) % 0x18);
    if (v8 != v9)
    {
      while (1)
      {
        v10 = *(_OWORD *)v8;
        v11 = *(_OWORD *)(v8 + 32);
        v54 = *(_OWORD *)(v8 + 16);
        v55 = v11;
        *(_OWORD *)uu1 = v10;
        v12 = *(_OWORD *)(v8 + 48);
        v13 = *(_OWORD *)(v8 + 64);
        v14 = *(_OWORD *)(v8 + 96);
        v58 = *(_OWORD *)(v8 + 80);
        v59 = v14;
        v56 = v12;
        v57 = v13;
        v15 = *(_OWORD *)(v8 + 112);
        v16 = *(_OWORD *)(v8 + 128);
        v17 = *(_OWORD *)(v8 + 144);
        v63 = *(_QWORD *)(v8 + 160);
        v61 = v16;
        v62 = v17;
        v60 = v15;
        if (!uuid_compare(uu1, uu2))
          break;
        v8 += 168;
        if (v8 - *v7 == 4032)
        {
          v18 = v7[1];
          ++v7;
          v8 = v18;
        }
        if (v8 == v9)
        {
          v8 = v9;
          break;
        }
      }
      v4 = *(_QWORD *)(a1 + 80);
      v5 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 64);
    }
  }
  v19 = v4 + *(_QWORD *)(a1 + 88);
  v20 = *(_OWORD *)uu2;
  v21 = *((_OWORD *)uu2 + 1);
  *(_OWORD *)(a1 + 168) = *((_OWORD *)uu2 + 2);
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 136) = v20;
  v22 = *((_OWORD *)uu2 + 3);
  v23 = *((_OWORD *)uu2 + 4);
  v24 = *((_OWORD *)uu2 + 5);
  *(_OWORD *)(a1 + 232) = *((_OWORD *)uu2 + 6);
  *(_OWORD *)(a1 + 216) = v24;
  *(_OWORD *)(a1 + 200) = v23;
  *(_OWORD *)(a1 + 184) = v22;
  v25 = *((_OWORD *)uu2 + 7);
  v26 = *((_OWORD *)uu2 + 9);
  v27 = *((_QWORD *)uu2 + 20);
  *(_OWORD *)(a1 + 264) = *((_OWORD *)uu2 + 8);
  *(_OWORD *)(a1 + 280) = v26;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 296) = v27;
  *(_OWORD *)(a1 + 248) = v25;
  *(_QWORD *)(a1 + 472) = 0;
  v28 = (uint64_t *)(v5 + 8 * (v19 / 0x18));
  *(_OWORD *)(a1 + 312) = 0u;
  if (v6 == v5)
  {
    if (!v8)
      goto LABEL_17;
    v30 = 0;
    v29 = *v28;
  }
  else
  {
    v29 = *v28;
    v30 = *v28 + 168 * (v19 % 0x18);
    if (v8 == v30)
    {
LABEL_17:
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218B4F0);
      v34 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uu1 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLWorkoutSeriesDetectionModelController, confirmed workout is not in workout user prior list for auto-detection", uu1, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(uu1, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218B4F0);
        v52[0] = 0;
        v36 = _os_log_send_and_compose_impl(2, 0, uu1, 1628, &_mh_execute_header, qword_10229FE68, 16, "CLWorkoutSeriesDetectionModelController, confirmed workout is not in workout user prior list for auto-detection", v52, 2);
        v38 = v37;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSeriesDetectionModelController::updateWorkingModelsFromUserPrior(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v36);
LABEL_37:
        if (v38 != uu1)
          free(v38);
        return result;
      }
      return result;
    }
  }
  v31 = v30 - v29;
  v32 = 0xCF3CF3CF3CF3CF3DLL * (v31 >> 3);
  if (v31 < 169)
    v33 = v28[-((24 - v32) / 0x18)] + 168 * (24 * ((24 - v32) / 0x18) - (24 - v32)) + 3864;
  else
    v33 = v28[(v32 - 1) / 0x18] + 168 * ((v32 - 1) % 0x18);
  if (v8 == v33)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v42 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uu1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, confirmed workout is the last workout in user prior list", uu1, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(uu1, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218B4F0);
      v52[0] = 0;
      v43 = _os_log_send_and_compose_impl(2, 0, uu1, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, confirmed workout is the last workout in user prior list", v52, 2);
      v38 = v44;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateWorkingModelsFromUserPrior(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v43);
      goto LABEL_37;
    }
  }
  else
  {
    v39 = v8 - *v7;
    v40 = 0xCF3CF3CF3CF3CF3DLL * (v39 >> 3);
    if (v39 < -167)
      v41 = v7[-((22 - v40) / 0x18)] + 168 * (24 * ((22 - v40) / 0x18) - (22 - v40)) + 3864;
    else
      v41 = v7[(v40 + 1) / 0x18] + 168 * ((v40 + 1) % 0x18);
    v45 = *(_OWORD *)v41;
    v46 = *(_OWORD *)(v41 + 32);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v41 + 16);
    *(_OWORD *)(a1 + 344) = v46;
    *(_OWORD *)(a1 + 312) = v45;
    v47 = *(_OWORD *)(v41 + 48);
    v48 = *(_OWORD *)(v41 + 64);
    v49 = *(_OWORD *)(v41 + 96);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(v41 + 80);
    *(_OWORD *)(a1 + 408) = v49;
    *(_OWORD *)(a1 + 360) = v47;
    *(_OWORD *)(a1 + 376) = v48;
    result = *(__n128 *)(v41 + 112);
    v50 = *(_OWORD *)(v41 + 128);
    v51 = *(_OWORD *)(v41 + 144);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(v41 + 160);
    *(_OWORD *)(a1 + 440) = v50;
    *(_OWORD *)(a1 + 456) = v51;
    *(__n128 *)(a1 + 424) = result;
  }
  return result;
}

void sub_100E40014(uint64_t a1, unsigned __int8 *uu1)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  NSObject *v24;
  int v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  unsigned __int8 v43[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned __int8 uu2[16];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  if (*(_BYTE *)(a1 + 96))
  {
    v4 = *(_OWORD *)(a1 + 248);
    v64 = *(_QWORD *)(a1 + 296);
    v5 = *(_OWORD *)(a1 + 184);
    v6 = *(_OWORD *)(a1 + 216);
    v58 = *(_OWORD *)(a1 + 200);
    v59 = v6;
    v60 = *(_OWORD *)(a1 + 232);
    v61 = v4;
    v7 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)uu2 = *(_OWORD *)(a1 + 136);
    v55 = v7;
    v56 = *(_OWORD *)(a1 + 168);
    v57 = v5;
    v8 = *(_OWORD *)(a1 + 280);
    v62 = *(_OWORD *)(a1 + 264);
    v63 = v8;
    v9 = *(_OWORD *)(a1 + 456);
    v51 = *(_OWORD *)(a1 + 440);
    v52 = v9;
    v53 = *(_QWORD *)(a1 + 472);
    v10 = *(_OWORD *)(a1 + 392);
    v47 = *(_OWORD *)(a1 + 376);
    v48 = v10;
    v11 = *(_OWORD *)(a1 + 408);
    v50 = *(_OWORD *)(a1 + 424);
    v49 = v11;
    v12 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)v43 = *(_OWORD *)(a1 + 312);
    v44 = v12;
    v13 = *(_OWORD *)(a1 + 344);
    v46 = *(_OWORD *)(a1 + 360);
    v45 = v13;
    v14 = uuid_compare(uu1, uu2);
    v15 = *((_QWORD *)uu1 + 6);
    v16 = v15 != 14;
    if (*((_QWORD *)uu1 + 8) == (_QWORD)v58)
    {
      v16 = 1;
      v17 = 1;
    }
    else
    {
      v17 = v15 != 19;
    }
    v18 = v15 == (_QWORD)v57 && v16;
    if (v18 && v17 || !v14)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218B4F0);
      v27 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v40 = v57;
        v41 = 2048;
        v42 = v46;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, workout matches current model, high sensitivity for current model and medium sensitivity for  queued model, currentModel, %ld, queuedModel, %ld", buf, 0x16u);
      }
      v25 = 2;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218B4F0);
        v35 = 134218240;
        v36 = v57;
        v37 = 2048;
        v38 = v46;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, workout matches current model, high sensitivity for current model and medium sensitivity for  queued model, currentModel, %ld, queuedModel, %ld", &v35, 22);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      v26 = 1;
    }
    else
    {
      v19 = uuid_compare(uu1, v43);
      v20 = *((_QWORD *)uu1 + 6);
      v21 = v20 != 14;
      if (*((_QWORD *)uu1 + 8) == (_QWORD)v47)
      {
        v21 = 1;
        v22 = 1;
      }
      else
      {
        v22 = v20 != 19;
      }
      v23 = v20 == (_QWORD)v46 && v21;
      if (v23 && v22 || !v19)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218B4F0);
        v28 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v40 = v46;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, workout matches queued model, high sensitivity for queued model, queuedModel, %ld", buf, 0xCu);
        }
        v26 = 2;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10218B4F0);
          v35 = 134217984;
          v36 = v46;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, workout matches queued model, high sensitivity for queued model, queuedModel, %ld", &v35);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
          v25 = 0;
          v26 = 2;
        }
        else
        {
          v25 = 0;
        }
      }
      else
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10218B4F0);
        v24 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, workout does not match current or queued workouts, low sensitivity for all models", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10218B4F0);
          LOWORD(v35) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, workout does not match current or queued workouts, low sensitivity for all models", &v35, 2);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        v25 = 0;
        v26 = 0;
      }
    }
    *(_DWORD *)(a1 + 304) = v25;
    *(_DWORD *)(a1 + 480) = v26;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 480) = 0;
  }
  sub_100E42070(a1);
}

void sub_100E405CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[16];

  v4 = *(_QWORD **)(a1 + 112);
  v5 = *(_QWORD **)(a1 + 120);
  if (v4 == v5)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, bringing up workout detection models", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218B4F0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, bringing up workout detection models", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::bringupModels(CMWorkoutType)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    operator new();
  }
  while (v4 != v5)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 16))(*v4, a2);
    ++v4;
  }
  sub_100E42070(a1);
}

void sub_100E40C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  _Unwind_Resume(a1);
}

void sub_100E40CE0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  unsigned __int8 uu1[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218B4F0);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)buf = 134217984;
    v31 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, receieved client workout confirmation, activeWorkout,%ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v14 = *(_QWORD *)(a2 + 112);
    v28 = 134217984;
    v29 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, receieved client workout confirmation, activeWorkout,%ld", &v28);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::onWorkoutConfirmedEvent(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_100E3FA84(a1, (unsigned __int8 *)(a2 + 64));
  v8 = *(_OWORD *)(a2 + 208);
  v25 = *(_OWORD *)(a2 + 192);
  v26 = v8;
  v27 = *(_QWORD *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 144);
  v21 = *(_OWORD *)(a2 + 128);
  v22 = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v23 = *(_OWORD *)(a2 + 160);
  v24 = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)uu1 = *(_OWORD *)(a2 + 64);
  v18 = v11;
  v12 = *(_OWORD *)(a2 + 112);
  v19 = *(_OWORD *)(a2 + 96);
  v20 = v12;
  sub_100E40014(a1, uu1);
  if (a3)
  {
    v13 = *(_QWORD *)(a2 + 112);
    sub_100E42430(a1);
    sub_100E405CC(a1, v13);
  }
}

void sub_100E40F08(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, transition, resetting workout detection models", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218B4F0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, transition, resetting workout detection models", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::onTransitionConfirmedEvent(BOOL)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    sub_100E42430(a1);
    sub_100E405CC(a1, 33);
  }
}

void sub_100E410B0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  unsigned __int8 uu1[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218B4F0);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)buf = 134217984;
    v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, detected new segment, resetting models, activeWorkout,%ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v12 = *(_QWORD *)(a2 + 112);
    v26 = 134217984;
    v27 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, detected new segment, resetting models, activeWorkout,%ld", &v26);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::onSegmentDetectionEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*(_QWORD *)(a2 + 112) == 33)
  {
    v6 = 33;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 208);
    v23 = *(_OWORD *)(a2 + 192);
    v24 = v7;
    v25 = *(_QWORD *)(a2 + 224);
    v8 = *(_OWORD *)(a2 + 144);
    v19 = *(_OWORD *)(a2 + 128);
    v20 = v8;
    v9 = *(_OWORD *)(a2 + 176);
    v21 = *(_OWORD *)(a2 + 160);
    v22 = v9;
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)uu1 = *(_OWORD *)(a2 + 64);
    v16 = v10;
    v11 = *(_OWORD *)(a2 + 112);
    v17 = *(_OWORD *)(a2 + 96);
    v18 = v11;
    sub_100E40014(a1, uu1);
    v6 = *(_QWORD *)(a2 + 112);
  }
  sub_100E42430(a1);
  sub_100E405CC(a1, v6);
}

void sub_100E412D8(uint64_t a1@<X0>, uint64_t **a2@<X1>, void **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v80 = *(_OWORD *)(a1 + 136);
  v81 = *(_OWORD *)(a1 + 152);
  v82 = *(_OWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 184);
  v54 = *(_QWORD *)(a1 + 192);
  v50 = *(_QWORD *)(a1 + 208);
  v51 = *(_QWORD *)(a1 + 200);
  v76 = *(_OWORD *)(a1 + 248);
  v77 = *(_OWORD *)(a1 + 264);
  v78 = *(_OWORD *)(a1 + 280);
  v79 = *(_QWORD *)(a1 + 296);
  v74 = *(_OWORD *)(a1 + 216);
  v75 = *(_OWORD *)(a1 + 232);
  v71 = *(_OWORD *)(a1 + 312);
  v72 = *(_OWORD *)(a1 + 328);
  v73 = *(_OWORD *)(a1 + 344);
  v5 = *(_QWORD *)(a1 + 360);
  v52 = *(_QWORD *)(a1 + 368);
  v46 = *(_QWORD *)(a1 + 384);
  v47 = *(_QWORD *)(a1 + 376);
  v67 = *(_OWORD *)(a1 + 424);
  v68 = *(_OWORD *)(a1 + 440);
  v69 = *(_OWORD *)(a1 + 456);
  v70 = *(_QWORD *)(a1 + 472);
  v65 = *(_OWORD *)(a1 + 392);
  v66 = *(_OWORD *)(a1 + 408);
  v6 = *a2;
  v55 = a2[1];
  if (*a2 != v55)
  {
    v48 = (uint64_t)(a3 + 2);
    __asm { FMOV            V0.2D, #-1.0 }
    v53 = _Q0;
    while (1)
    {
      v12 = *((_DWORD *)v6 + 5);
      if (v12)
        break;
LABEL_31:
      v6 += 4;
      if (v6 == v55)
        return;
    }
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    if (v12 == 2)
      v13 = 20;
    else
      v13 = 21;
    v14 = *v6;
    if (sub_100F72BB4(v6[3], v54) == v4)
    {
      v15 = v4;
      v16 = v51;
      v62 = v80;
      v63 = v81;
      v64 = v82;
      v58 = v76;
      v59 = v77;
      v60 = v78;
      v61 = v79;
      v17 = v74;
      v18 = v75;
      v19 = v54;
      v20 = v50;
    }
    else
    {
      if (sub_100F72BB4(v6[3], v52) != v5)
      {
        v29 = v6[3];
        v19 = sub_100E41794((_QWORD *)a1, v29);
        v15 = sub_100F72BB4(v29, v19);
        if (v15 == 19)
        {
          v16 = sub_100E418E4((_QWORD *)a1, v19);
          v20 = v30;
          v15 = 19;
        }
        else
        {
          v16 = 0;
          v20 = 0;
        }
        goto LABEL_12;
      }
      v15 = v5;
      v19 = v52;
      v62 = v71;
      v63 = v72;
      v64 = v73;
      v58 = v67;
      v59 = v68;
      v60 = v69;
      v61 = v70;
      v17 = v65;
      v18 = v66;
      v20 = v46;
      v16 = v47;
    }
    v56 = v17;
    v57 = v18;
LABEL_12:
    v21 = (char *)a3[1];
    v22 = (char *)a3[2];
    if (v21 >= v22)
    {
      v24 = 0x34F72C234F72C235 * ((v21 - (_BYTE *)*a3) >> 3);
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x11A7B9611A7B961)
        sub_100259694();
      v26 = 0x34F72C234F72C235 * ((v22 - (_BYTE *)*a3) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x8D3DCB08D3DCB0)
        v27 = 0x11A7B9611A7B961;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)sub_100E42710(v48, v27);
      else
        v28 = 0;
      v31 = &v28[232 * v24];
      *(_OWORD *)v31 = v53;
      *((_QWORD *)v31 + 2) = v13;
      *((_QWORD *)v31 + 3) = v14;
      *((_OWORD *)v31 + 4) = v62;
      *((_OWORD *)v31 + 5) = v63;
      *((_OWORD *)v31 + 6) = v64;
      *((_OWORD *)v31 + 2) = 0u;
      *((_OWORD *)v31 + 3) = 0u;
      *((_QWORD *)v31 + 14) = v15;
      *((_QWORD *)v31 + 15) = v19;
      *((_QWORD *)v31 + 16) = v16;
      *((_QWORD *)v31 + 17) = v20;
      *((_OWORD *)v31 + 9) = v56;
      *((_OWORD *)v31 + 10) = v57;
      *((_QWORD *)v31 + 28) = v61;
      *((_OWORD *)v31 + 12) = v59;
      *((_OWORD *)v31 + 13) = v60;
      *((_OWORD *)v31 + 11) = v58;
      v33 = (char *)*a3;
      v32 = (char *)a3[1];
      v34 = v31;
      if (v32 != *a3)
      {
        do
        {
          v35 = *(_OWORD *)(v32 - 232);
          v36 = *(_OWORD *)(v32 - 216);
          *(_OWORD *)(v34 - 200) = *(_OWORD *)(v32 - 200);
          *(_OWORD *)(v34 - 216) = v36;
          *(_OWORD *)(v34 - 232) = v35;
          v37 = *(_OWORD *)(v32 - 184);
          v38 = *(_OWORD *)(v32 - 168);
          v39 = *(_OWORD *)(v32 - 152);
          *(_OWORD *)(v34 - 136) = *(_OWORD *)(v32 - 136);
          *(_OWORD *)(v34 - 152) = v39;
          *(_OWORD *)(v34 - 168) = v38;
          *(_OWORD *)(v34 - 184) = v37;
          v40 = *(_OWORD *)(v32 - 120);
          v41 = *(_OWORD *)(v32 - 104);
          v42 = *(_OWORD *)(v32 - 88);
          *(_OWORD *)(v34 - 72) = *(_OWORD *)(v32 - 72);
          *(_OWORD *)(v34 - 88) = v42;
          *(_OWORD *)(v34 - 104) = v41;
          *(_OWORD *)(v34 - 120) = v40;
          v43 = *(_OWORD *)(v32 - 56);
          v44 = *(_OWORD *)(v32 - 40);
          v45 = *(_OWORD *)(v32 - 24);
          *((_QWORD *)v34 - 1) = *((_QWORD *)v32 - 1);
          *(_OWORD *)(v34 - 24) = v45;
          *(_OWORD *)(v34 - 40) = v44;
          *(_OWORD *)(v34 - 56) = v43;
          v34 -= 232;
          v32 -= 232;
        }
        while (v32 != v33);
        v32 = v33;
      }
      v23 = v31 + 232;
      *a3 = v34;
      a3[1] = v31 + 232;
      a3[2] = &v28[232 * v27];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_OWORD *)v21 = v53;
      *((_QWORD *)v21 + 2) = v13;
      *((_QWORD *)v21 + 3) = v14;
      *((_OWORD *)v21 + 4) = v62;
      *((_OWORD *)v21 + 5) = v63;
      *((_OWORD *)v21 + 6) = v64;
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *((_QWORD *)v21 + 14) = v15;
      *((_QWORD *)v21 + 15) = v19;
      *((_QWORD *)v21 + 16) = v16;
      *((_QWORD *)v21 + 17) = v20;
      *((_OWORD *)v21 + 9) = v56;
      *((_OWORD *)v21 + 10) = v57;
      *((_QWORD *)v21 + 28) = v61;
      v23 = v21 + 232;
      *((_OWORD *)v21 + 12) = v59;
      *((_OWORD *)v21 + 13) = v60;
      *((_OWORD *)v21 + 11) = v58;
    }
    a3[1] = v23;
    goto LABEL_31;
  }
}

void sub_100E4176C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E41794(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  BOOL v23;

  v2 = a1[10];
  v3 = a1[7];
  v4 = a1[8];
  v5 = (_QWORD *)(v3 + 8 * (v2 / 0x18));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = (_QWORD *)(*v5 + 168 * (v2 % 0x18));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
LABEL_5:
  v11 = v6 - 504;
  while (1)
  {
    v12 = v4 == v3 ? 0 : *(_QWORD *)(v3 + 8 * ((a1[11] + v2) / 0x18)) + 168 * ((a1[11] + v2) % 0x18);
    if (v6 == (_QWORD *)v12)
      break;
    v13 = v6[6];
    if (v13 == 19)
    {
      v14 = a2 == 19;
      v15 = v6[8];
      v16 = v15 == 0;
      if (v15)
        v17 = 0;
      else
        v17 = a2 == 19;
      v18 = v15 == 1;
    }
    else
    {
      v14 = v13 == a2;
      v19 = v6[7];
      v16 = v19 == 1;
      if (v19 == 1)
        v17 = v14;
      else
        v17 = 0;
      v18 = v19 == 2;
    }
    v20 = v18;
    if (!v18)
      v14 = 0;
    v10 += v17;
    v9 += v20;
    v8 += v16;
    v7 += v14;
    v11 += 21;
    v6 += 21;
    if ((_QWORD *)*v5 == v11)
    {
      v21 = (_QWORD *)v5[1];
      ++v5;
      v6 = v21;
      goto LABEL_5;
    }
  }
  if (v10 && !v7)
    return 1;
  if (!v10 && v7)
    return 2;
  if (v8 && !v9)
    return 1;
  if (v9)
    v23 = v8 == 0;
  else
    v23 = 0;
  if (v23)
    return 2;
  else
    return 0;
}

uint64_t sub_100E418E4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) > 1)
    return 1;
  result = (uint64_t)+[CMWorkout CMSwimWorkoutLocationFromCMWorkoutLocationType:](CMWorkout, "CMSwimWorkoutLocationFromCMWorkoutLocationType:", a2);
  if (!result)
  {
    sub_100E425FC(a1);
    return 0;
  }
  return result;
}

void sub_100E41944(_QWORD *a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)a1[14];
  v3 = (_QWORD *)a1[15];
  if (v2 != v3)
  {
    v6 = (uint64_t)(a2 + 2);
    do
    {
      (**(void (***)(__int128 *__return_ptr, _QWORD, _QWORD))*v2)(&v22, *v2, a1[13]);
      v8 = a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        v11 = *a2;
        v12 = (v8 - *a2) >> 5;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59)
          sub_100259694();
        v14 = v7 - (_QWORD)v11;
        if (v14 >> 4 > v13)
          v13 = v14 >> 4;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_10025BA00(v6, v15);
          v11 = *a2;
          v8 = a2[1];
        }
        else
        {
          v16 = 0;
        }
        v17 = v23;
        v18 = &v16[32 * v12];
        *(_OWORD *)v18 = v22;
        *((_OWORD *)v18 + 1) = v17;
        if (v8 == v11)
        {
          v21 = &v16[32 * v12];
        }
        else
        {
          v19 = &v16[32 * v12];
          do
          {
            v20 = *((_OWORD *)v8 - 1);
            v21 = v19 - 32;
            *((_OWORD *)v19 - 2) = *((_OWORD *)v8 - 2);
            *((_OWORD *)v19 - 1) = v20;
            v8 -= 32;
            v19 -= 32;
          }
          while (v8 != v11);
        }
        v10 = v18 + 32;
        *a2 = v21;
        a2[1] = v18 + 32;
        a2[2] = &v16[32 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        v9 = v23;
        *(_OWORD *)v8 = v22;
        *((_OWORD *)v8 + 1) = v9;
        v10 = v8 + 32;
      }
      a2[1] = v10;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_100E41A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E41AB8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *__p;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _OWORD v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[3];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v35 = 0u;
  v76 = 0u;
  v77 = 0;
  v4 = *(_OWORD *)(a1 + 31);
  v5 = *(_OWORD *)(a1 + 35);
  v69 = *(_OWORD *)(a1 + 33);
  v70 = v5;
  v71 = a1[37];
  v6 = *(_OWORD *)(a1 + 23);
  v7 = *(_OWORD *)(a1 + 27);
  v65 = *(_OWORD *)(a1 + 25);
  v66 = v7;
  v67 = *(_OWORD *)(a1 + 29);
  v68 = v4;
  v8 = *(_OWORD *)(a1 + 19);
  v63[0] = *(_OWORD *)(a1 + 17);
  v63[1] = v8;
  v63[2] = *(_OWORD *)(a1 + 21);
  v64 = v6;
  v9 = *(_OWORD *)(a1 + 57);
  v60 = *(_OWORD *)(a1 + 55);
  v61 = v9;
  v62 = a1[59];
  v10 = *(_OWORD *)(a1 + 49);
  v56 = *(_OWORD *)(a1 + 47);
  v57 = v10;
  v11 = *(_OWORD *)(a1 + 53);
  v58 = *(_OWORD *)(a1 + 51);
  v59 = v11;
  v12 = *(_OWORD *)(a1 + 41);
  v54[0] = *(_OWORD *)(a1 + 39);
  v54[1] = v12;
  v13 = *(_OWORD *)(a1 + 45);
  v54[2] = *(_OWORD *)(a1 + 43);
  v55 = v13;
  (*(void (**)(void **__return_ptr, _QWORD *, _QWORD))(*a1 + 16))(&__p, a1, a1[13]);
  v14 = (char *)__p;
  v15 = v37;
  if (__p == v37)
  {
    v17 = 0;
    v16 = 0;
    goto LABEL_20;
  }
  v16 = 0;
  v17 = 0;
  v18 = *((_QWORD *)&v64 + 1);
  v19 = v64;
  v20 = *((_QWORD *)&v55 + 1);
  v33 = *((_QWORD *)&v64 + 1);
  v34 = v55;
  v35 = 0u;
  v32 = *((_QWORD *)&v55 + 1);
  while ((*((_DWORD *)v14 + 4) - 1) > 1)
  {
LABEL_14:
    v14 += 32;
    if (v14 == v15)
      goto LABEL_20;
  }
  if (sub_100F72BB4(*((_QWORD *)v14 + 3), v18) == v19)
  {
    sub_100E41E8C((uint64_t)a1, (uint64_t)v14, (uint64_t)v63, (uint64_t)&v38);
    goto LABEL_19;
  }
  if (sub_100F72BB4(*((_QWORD *)v14 + 3), v20) != v34)
  {
    if (!(_QWORD)v35)
    {
      v21 = v19;
      v22 = *((_QWORD *)v14 + 3);
      v23 = sub_100E41794(a1, v22);
      if (*((_DWORD *)v14 + 4) == 1)
      {
        v22 = 33;
      }
      else if (v22 == 2)
      {
        v22 = sub_100F72BB4(2, v23);
      }
      sub_100E41F84((uint64_t)a1, v22, (uint64_t)&v38, *((double *)v14 + 1), *(double *)v14);
      v82 = v42;
      v83 = v43;
      v84 = v44;
      v78 = v38;
      v79 = v39;
      v80 = v40;
      v81 = v41;
      v35 = v45;
      v16 = v46;
      v17 = v47;
      v77 = v53;
      v75 = v51;
      v76 = v52;
      v73 = v49;
      v74 = v50;
      v72 = v48;
      if (v22 == 19)
      {
        v24 = sub_100E418E4(a1, v23);
        v19 = v21;
        v20 = v32;
        v18 = v33;
        v16 = v24;
        v17 = v25;
      }
      else
      {
        v19 = v21;
        v20 = v32;
        v18 = v33;
      }
    }
    goto LABEL_14;
  }
  sub_100E41E8C((uint64_t)a1, (uint64_t)v14, (uint64_t)v54, (uint64_t)&v38);
LABEL_19:
  v82 = v42;
  v83 = v43;
  v84 = v44;
  v78 = v38;
  v79 = v39;
  v80 = v40;
  v81 = v41;
  v35 = v45;
  v16 = v46;
  v17 = v47;
  v77 = v53;
  v75 = v51;
  v76 = v52;
  v73 = v49;
  v74 = v50;
  v72 = v48;
LABEL_20:
  v26 = v83;
  *(_OWORD *)(a2 + 64) = v82;
  *(_OWORD *)(a2 + 80) = v26;
  v27 = v79;
  *(_OWORD *)a2 = v78;
  *(_OWORD *)(a2 + 16) = v27;
  v28 = v81;
  *(_OWORD *)(a2 + 32) = v80;
  *(_OWORD *)(a2 + 48) = v28;
  *(_OWORD *)(a2 + 96) = v84;
  *(_OWORD *)(a2 + 112) = v35;
  *(_QWORD *)(a2 + 128) = v16;
  *(_QWORD *)(a2 + 136) = v17;
  v29 = v73;
  *(_OWORD *)(a2 + 144) = v72;
  *(_OWORD *)(a2 + 160) = v29;
  *(_QWORD *)(a2 + 224) = v77;
  v30 = v76;
  v31 = v74;
  *(_OWORD *)(a2 + 192) = v75;
  *(_OWORD *)(a2 + 208) = v30;
  *(_OWORD *)(a2 + 176) = v31;
  sub_100E412D8((uint64_t)a1, (uint64_t **)&__p, (void **)(a2 + 232));
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100E41E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_100E41E8C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[14];
  uint64_t v19;

  v6 = *(double *)a2;
  result.n128_u64[0] = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a4 = result.n128_u64[0];
  *(_QWORD *)(a4 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 16) = 23;
  *(double *)(a4 + 24) = v6;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  v7 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a4 + 192) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a4 + 208) = v7;
  *(_QWORD *)(a4 + 224) = *(_QWORD *)(a3 + 160);
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a4 + 144) = v8;
  v9 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a4 + 160) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a4 + 176) = v9;
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 80) = v10;
  v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 112) = v11;
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    sub_100E41F84(a1, 0x21uLL, (uint64_t)v18, result.n128_f64[0], v6);
    v12 = v18[13];
    *(_OWORD *)(a4 + 192) = v18[12];
    *(_OWORD *)(a4 + 208) = v12;
    *(_QWORD *)(a4 + 224) = v19;
    v13 = v18[9];
    *(_OWORD *)(a4 + 128) = v18[8];
    *(_OWORD *)(a4 + 144) = v13;
    v14 = v18[11];
    *(_OWORD *)(a4 + 160) = v18[10];
    *(_OWORD *)(a4 + 176) = v14;
    v15 = v18[5];
    *(_OWORD *)(a4 + 64) = v18[4];
    *(_OWORD *)(a4 + 80) = v15;
    v16 = v18[7];
    *(_OWORD *)(a4 + 96) = v18[6];
    *(_OWORD *)(a4 + 112) = v16;
    v17 = v18[1];
    *(_OWORD *)a4 = v18[0];
    *(_OWORD *)(a4 + 16) = v17;
    result = (__n128)v18[3];
    *(_OWORD *)(a4 + 32) = v18[2];
    *(__n128 *)(a4 + 48) = result;
  }
  return result;
}

void sub_100E41F84(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uuid_t out;

  memset(out, 0, sizeof(out));
  uuid_generate(out);
  *(_QWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 16) = 23;
  *(double *)(a3 + 24) = a5;
  *(_QWORD *)(a3 + 112) = a2;
  *(_QWORD *)(a3 + 120) = sub_100F72C50(a2);
  uuid_copy((unsigned __int8 *)(a3 + 64), out);
  uuid_copy((unsigned __int8 *)(a3 + 80), (const unsigned __int8 *)(a1 + 8));
}

void sub_100E42070(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  const char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  _BYTE buf[28];
  __int16 v44;
  int v45;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10218B4F0);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 184);
    v4 = *(_DWORD *)(a1 + 304);
    v5 = *(_QWORD *)(a1 + 360);
    v6 = *(_DWORD *)(a1 + 480);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v5;
    v44 = 1024;
    v45 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController,configuringModels,currentWorkout,%ld,currentModelSensitivity,%d,queuedWorkout,%ld,queuedModelSensitivity,%d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v29 = *(_QWORD *)(a1 + 184);
    v30 = *(_DWORD *)(a1 + 304);
    v31 = *(_QWORD *)(a1 + 360);
    v32 = *(_DWORD *)(a1 + 480);
    v35 = 134218752;
    v36 = v29;
    v37 = 1024;
    v38 = v30;
    v39 = 2048;
    v40 = v31;
    v41 = 1024;
    v42 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController,configuringModels,currentWorkout,%ld,currentModelSensitivity,%d,queuedWorkout,%ld,queuedModelSensitivity,%d", &v35, 34);
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::configureModels()", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  memset(buf, 0, 24);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_DWORD *)(a1 + 304);
  v10 = sub_10028E224((uint64_t)&buf[16], 1uLL);
  v11 = *(char **)buf;
  v12 = *(char **)&buf[8];
  v13 = (char *)&v10[4 * v9];
  *(_QWORD *)v10 = v7;
  v10[2] = v8;
  v14 = (char *)(v10 + 4);
  v15 = v10;
  if (v12 != v11)
  {
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v12 - 1);
      v15 -= 4;
      v12 -= 16;
    }
    while (v12 != v11);
    v11 = *(char **)buf;
  }
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = v10 + 4;
  *(_QWORD *)&buf[16] = &v10[4 * v9];
  if (v11)
  {
    operator delete(v11);
    v13 = *(char **)&buf[16];
  }
  *(_QWORD *)&buf[8] = v10 + 4;
  v16 = *(_QWORD *)(a1 + 360);
  v17 = *(_DWORD *)(a1 + 480);
  if (v14 >= v13)
  {
    v19 = *(char **)buf;
    v20 = (uint64_t)&v14[-*(_QWORD *)buf] >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      sub_100259694();
    v22 = (uint64_t)&v13[-*(_QWORD *)buf];
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      v24 = (char *)sub_10028E224((uint64_t)&buf[16], v23);
      v19 = *(char **)buf;
      v14 = *(char **)&buf[8];
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[16 * v20];
    v26 = &v24[16 * v23];
    *(_QWORD *)v25 = v16;
    *((_DWORD *)v25 + 2) = v17;
    v18 = v25 + 16;
    if (v14 != v19)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
        v25 -= 16;
        v14 -= 16;
      }
      while (v14 != v19);
      v19 = *(char **)buf;
    }
    *(_QWORD *)buf = v25;
    *(_QWORD *)&buf[8] = v18;
    *(_QWORD *)&buf[16] = v26;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *((_QWORD *)v10 + 2) = v16;
    v10[6] = v17;
    v18 = (char *)(v10 + 8);
  }
  *(_QWORD *)&buf[8] = v18;
  v28 = *(_QWORD **)(a1 + 112);
  v27 = *(_QWORD **)(a1 + 120);
  while (v28 != v27)
  {
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v28 + 8))(*v28, buf);
    ++v28;
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_100E42408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

void sub_100E42430(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 120))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10218B4F0);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, tearing down workout detection models", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218B4F0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesDetectionModelController, tearing down workout detection models", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::teardownModels()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v3 = *(_QWORD **)(a1 + 112);
    v4 = *(_QWORD **)(a1 + 120);
    while (v4 != v3)
    {
      v6 = *--v4;
      v5 = v6;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    }
    *(_QWORD *)(a1 + 120) = v3;
  }
}

_QWORD *sub_100E425FC(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[10];
  v2 = result[7];
  v3 = result[8];
  v4 = (_QWORD *)(v2 + 8 * (v1 / 0x18));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = *v4 + 168 * (v1 % 0x18);
LABEL_4:
  v6 = v5 - 4032;
  while (1)
  {
    v7 = v3 == v2 ? 0 : *(_QWORD *)(v2 + 8 * ((result[11] + v1) / 0x18)) + 168 * ((result[11] + v1) % 0x18);
    if (v5 == v7)
      return result;
    v6 += 168;
    v5 += 168;
    if (*v4 == v6)
    {
      v8 = v4[1];
      ++v4;
      v5 = v8;
      goto LABEL_4;
    }
  }
}

void sub_100E426C0(uint64_t a1)
{
  sub_100544074(a1);
  operator delete();
}

void sub_100E426E4(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100E42710(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    sub_10025955C();
  return operator new(232 * a2);
}

void sub_100E427FC(id a1)
{
  qword_102308B10 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLStatusBarIconManagerSilo"));
}

void sub_100E428B0()
{
  operator new();
}

void sub_100E428F4()
{
  operator delete();
}

uint64_t sub_100E42950(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  int v8;
  const char *v10;
  uint8_t *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  int v22;

  v3 = (_BYTE *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 112);
  v13 = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v14 = 256;
  if (v3[32])
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218B728);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sbim: E911 is active; forcing icon on.",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218B728);
      v12 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#sbim: E911 is active; forcing icon on.",
        &v12,
        2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "StatusBarIconState CLStatusBarIconManager::iconState()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v5 = 2;
  }
  else if ((*(_DWORD *)(a1 + 192) & 2) != 0)
  {
    v5 = 2;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 192) & 1;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = off_10218B660[v5];
    v8 = *(unsigned __int8 *)(a1 + 148);
    *(_DWORD *)buf = 68289538;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = v7;
    v21 = 1026;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim: Location icon should now be in state\", \"IconState\":%{public, location:escape_only}s, \"SystemServiceSwitchEnabled\":%{public}hhd}", buf, 0x22u);
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v3 + 24))(v3);
  return v5;
}

void sub_100E42BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E42C34(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;

  v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  v5 = *(unsigned __int8 *)(a1 + a2 + 145);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5 != 0;
}

void sub_100E42CC0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;

  v3 = a3;
  if (a2 == 3)
    sub_100E43920(a1, a3);
  sub_100E43AA0(a1, a2, v3);
}

uint64_t sub_100E42D2C(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  *(_BYTE *)(a1 + 144) = a2;
  sub_100E43AA0(a1, 7u, a2);
  sub_100091AEC(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100E42DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E42DD0(uint64_t a1, void *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_100E430F4(a1, "CLStatusBarIconManager", a2);
  *v4 = off_10218B540;
  sub_10055D44C(v4 + 14, "CLStatusBarIconManager", 1, 1);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 192) = 0xFFFFFFFF00000000;
  objc_msgSend(a2, "silo");
  sub_1001B6A0C();
}

void sub_100E43084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v25 = *(_QWORD *)(v22 + 136);
  *(_QWORD *)(v22 + 136) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_10055D4D0(v23);
  sub_100E43808(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100E430F4(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10218B758;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100E43174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100E43190(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLStatusBarIconManager::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 128), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218B708);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStatusBarIconManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B708);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStatusBarIconManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100E43F18(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100E43340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E43360(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_activity_scope_state_s v4;
  uint8_t buf[4];
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SystemServiceSwitch Received sync darwin notification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v4);

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch Received sync darwin notification\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_100E4349C(v1);
  os_activity_scope_leave(&v4);
}

void sub_100E43488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_100E4349C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CFPreferencesSynchronize(CFSTR("com.apple.locationd.StatusBarIconManager"), CFSTR("mobile"), kCFPreferencesCurrentHost);
  v2 = (id)CFPreferencesCopyValue(CFSTR("ShowSystemServices"), CFSTR("com.apple.locationd.StatusBarIconManager"), CFSTR("mobile"), kCFPreferencesCurrentHost);
  v4 = objc_opt_class(NSNumber, v3);
  isKindOfClass = objc_opt_isKindOfClass(v2, v4);
  v6 = *(unsigned __int8 *)(a1 + 148);
  v7 = *(_BYTE *)(a1 + 148) != 0;
  if ((isKindOfClass & 1) != 0 && v2)
  {
    v7 = objc_msgSend(v2, "BOOLValue");
    goto LABEL_5;
  }
  if ((sub_100195F08() & 1) != 0)
  {
LABEL_5:
    if (v6 != v7)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218B728);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 1026;
        LODWORD(v17) = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch Detected mismatch between local state and sync state.  Deferring to sync state.\", \"newState\":%{public}hhd}", (uint8_t *)&v12, 0x18u);
      }
      sub_100E43AA0(a1, 3u, v7);
    }
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v9 = qword_1022A01D8;
  v10 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    v12 = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2114;
    v17 = objc_opt_class(v2, v11);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch invalid or missing switch sync state.  Initializing...\", \"oldValueClass\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
  }
  sub_100E43920(v10, v6 != 0);
}

uint64_t sub_100E436E0(_BYTE *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[2];

  sub_100119F3C(v11);
  sub_1001E4804(&v9);
  sub_100006BB4(v9, "StatusBarIconStates", v11);
  v2 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = 0;
  v6 = a1 + 145;
  do
  {
    if ((sub_1001E4874((uint64_t)v11, off_10218B610[v5], &v6[v5]) & 1) == 0)
      v6[v5] = 0;
    *(_DWORD *)&a1[4 * v5++ + 156] = 0;
  }
  while (v5 != 9);
  v7 = a1[148];
  a1[150] = v7;
  a1[151] = v7;
  sub_100E4349C((uint64_t)a1);
  return sub_10011A5A8(v11);
}

void sub_100E437D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E43800(uint64_t a1)
{
  return sub_100091AEC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100E43808(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218B758;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100E4387C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)a1 = off_10218B540;
  for (i = 200; i != 224; i += 8)
  {
    objc_msgSend(*(id *)(a1 + i), "invalidate");

  }
  notify_cancel(*(_DWORD *)(a1 + 196));
  v3 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10055D4D0(a1 + 112);
  return sub_100E43808(a1);
}

void sub_100E438FC(uint64_t a1)
{
  sub_100E4387C(a1);
  operator delete();
}

id sub_100E43920(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch setting sync state\", \"enabled\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  CFPreferencesSetValue(CFSTR("ShowSystemServices"), +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2), CFSTR("com.apple.locationd.StatusBarIconManager"), CFSTR("mobile"), kCFPreferencesCurrentHost);
  CFPreferencesSynchronize(CFSTR("com.apple.locationd.StatusBarIconManager"), CFSTR("mobile"), kCFPreferencesCurrentHost);
  return objc_msgSend(objc_alloc_init((Class)NPSManager), "synchronizeUserDefaultsDomain:keys:", CFSTR("com.apple.locationd.StatusBarIconManager"), +[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("ShowSystemServices")));
}

void sub_100E43AA0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  char v9;
  const char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  pthread_mutex_t *v25;
  __int16 v26;
  char v27;
  uint64_t buf;
  __int16 v29;
  const char *v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  int v34;

  v27 = a3;
  v6 = *(_QWORD *)(a1 + 112);
  v24 = a1 + 112;
  (*(void (**)(void))(v6 + 16))();
  v26 = 256;
  v7 = a1 + a2;
  *(_BYTE *)(v7 + 145) = a3;
  v8 = (unsigned __int8 *)(v7 + 145);
  v9 = *(_BYTE *)(a1 + 148);
  *(_BYTE *)(a1 + 150) = v9;
  *(_BYTE *)(a1 + 151) = v9;
  if (a2 <= 7 && ((1 << a2) & 0x98) != 0)
  {
    LODWORD(buf) = a2;
    BYTE4(buf) = a3;
    switch(a2)
    {
      case 7u:
        LODWORD(v22) = 2;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v22, &buf, 1, 0xFFFFFFFFLL, 0);
        break;
      case 4u:
        LODWORD(v22) = 1;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v22, &buf, 1, 0xFFFFFFFFLL, 0);
        break;
      case 3u:
        LODWORD(v22) = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v22, &buf, 1, 0xFFFFFFFFLL, 0);
        break;
    }
  }
  if (*v8 != a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218B728);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      buf = 68289538;
      v29 = 2082;
      v30 = "";
      v31 = 1026;
      v32 = a2;
      v33 = 1026;
      v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim: unsupported attempt to set icon visibility\", \"class\":%{public}d, \"enabled\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218B728);
    }
    v21 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      buf = 68289538;
      v29 = 2082;
      v30 = "";
      v31 = 1026;
      v32 = a2;
      v33 = 1026;
      v34 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sbim: unsupported attempt to set icon visibility", "{\"msg%{public}.0s\":\"#sbim: unsupported attempt to set icon visibility\", \"class\":%{public}d, \"enabled\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
    }
    goto LABEL_36;
  }
  if (a2 != 9)
  {
    v10 = off_10218B610[a2];
    sub_100119F3C(&buf);
    sub_1001E4804(&v22);
    sub_100006BB4(v22, "StatusBarIconStates", &buf);
    v11 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_10011B47C((uint64_t)&buf, v10, &v27);
    sub_1001E4804(&v22);
    sub_1000CADE4(v22, "StatusBarIconStates", (uint64_t)&buf);
    v14 = v23;
    if (v23)
    {
      v15 = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    sub_1001E4804(&v22);
    sub_100569514(v22);
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_10011A5A8(&buf);
  }
  sub_100091608(a1, 1);
  if (HIBYTE(v26))
  {
LABEL_36:
    if ((_BYTE)v26)
      pthread_mutex_unlock(v25);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  }
}

void sub_100E43EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E43F08(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100E43F00);
}

void sub_100E43F18(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v5;
  id v6;
  uint64_t *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sbim: Got client notification\"}", (uint8_t *)v8, 0x12u);
  }
  if (!*a3)
  {
    sub_100E44054(a1);
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_102308B0F >= 0)
      v7 = &qword_102308AF8;
    else
      v7 = (uint64_t *)qword_102308AF8;
    objc_msgSend(v6, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  }
}

void sub_100E44054(uint64_t a1)
{
  NSObject *v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint8_t buf[8];
  _QWORD v12[2];

  v10 = a1 + 112;
  (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v12[0]) = 2082;
    *(_QWORD *)((char *)v12 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Clearing status bar icon enabled states\"}", buf, 0x12u);
  }
  for (i = 0; i != 9; ++i)
  {
    sub_100E42CC0(a1, i, 0);
    *(_DWORD *)(a1 + 4 * i + 156) = 0;
  }
  sub_1001E4804(buf);
  sub_100525484(*(uint64_t *)buf, "StatusBarIconStates", 0xFFFFFFFFLL);
  v4 = (std::__shared_weak_count *)v12[0];
  if (v12[0])
  {
    v5 = (unint64_t *)(v12[0] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_1001E4804(buf);
  sub_100569514(*(uint64_t *)buf);
  v7 = (std::__shared_weak_count *)v12[0];
  if (v12[0])
  {
    v8 = (unint64_t *)(v12[0] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_100091608(a1, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
}

void sub_100E44240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E44284()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD v7[2];

  sub_100119F3C(v7);
  sub_1001E4804(&v5);
  sub_100006BB4(v5, "StatusBarIconStates", v7);
  v0 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  LOBYTE(v5) = 0;
  sub_1001E4874((uint64_t)v7, "SystemService", (BOOL *)&v5);
  v3 = v5;
  sub_10011A5A8(v7);
  return v3;
}

void sub_100E44330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100E44358()
{
  operator new();
}

void sub_100E44404(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100E44440(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10218B8A8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100E44514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B708);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10218B708);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::removeClient(int) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100E44788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FBD88);
}

uint64_t sub_100E4479C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100E46E3C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FBD89;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218B708);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B708);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100E44BF8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B708);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B708);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100E44E78(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10218B708);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10218B708);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100E45200(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_10218B838;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100E452D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E452E8(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B708);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_10218B838;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100E45FE0();
    os_activity_scope_leave(&state);
  }
}

void sub_100E45920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100E4596C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B708);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B708);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218B708);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B708);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10218B708);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10218B708);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100E45F18(uint64_t a1)
{
  sub_100E46DDC(a1);
  operator delete();
}

id sub_100E45F3C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100E46590(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100E45F88(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E45FB4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100E45FE0()
{
  operator new();
}

void sub_100E46070(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100E46590(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100E46444(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10218B708);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10218B708);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100E46444(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100E46590(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100E46520(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10218B838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E46534(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10218B838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100E46570(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100E46590(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100E46608(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100E46990(a1);
  else
    return 0;
}

id sub_100E46608(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100E46D3C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C29D47 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C29D47 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStatusBarIconManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100E46990(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C29D47 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C29D47 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218B878);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStatusBarIconManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100E46D3C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221C098))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
      sub_10192E480();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100E46DB0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100E46DDC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10218B8A8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100E46E3C()
{
  operator new();
}

uint64_t sub_100E46ECC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100E46EEC()
{
  sub_1015A2E04(&qword_102308AF8, "StatusBarIconManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102308AF8, (void *)&_mh_execute_header);
}

_QWORD *sub_100E46F30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v10;
  int v11;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
  }
  v11 = *(_DWORD *)(a3 + 24);
  sub_100B91404((uint64_t)a1, a2, (__int128 *)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  *a1 = off_10218B8D0;
  sub_100270E34((uint64_t)(a1 + 24), a4);
  return a1;
}

void sub_100E46FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_100B917A8(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_100E47004(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  double v9;
  double v10;
  uint64_t v11;
  unint64_t *v12;
  double v13;
  double v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float *v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  _QWORD *v40;
  const char *v41;
  int *v42;
  double v43;
  NSObject *v44;
  _QWORD *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _OWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  _QWORD *v65;
  const char *v66;
  int *v67;
  char *v68;
  char *v69;
  double v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  NSObject *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  NSObject *v82;
  _QWORD *v83;
  double v84;
  double v85;
  uint64_t v86;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  const char *v91;
  int *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float *v100;
  double v101;
  double v102;
  double v103;
  const char *v104;
  int *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  int *v112;
  double v113;
  double v114;
  const char *v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  char **v122;
  _QWORD *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  int v128;
  _QWORD *v129;
  __int16 v130;
  _BYTE v131[60];
  _WORD v132[10];
  double v133;
  __int16 v134;
  double v135;
  int v136;
  _QWORD *v137;
  __int16 v138;
  _BYTE v139[60];
  _WORD v140[10];
  double v141;
  __int16 v142;
  double v143;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 144);
  __chkstk_darwin(a1);
  v124 = (char *)&v118 - v4;
  v6 = sub_100B90B7C(v3 + 48, (char *)&v118 - v4, v5);
  v7 = v6;
  v123 = (_QWORD *)(v1 + 120);
  v8 = 1.0 / (float)v2;
  if ((_DWORD)v6)
  {
    v9 = (double)*(unint64_t *)(v124 + 42);
    v10 = v9 - *(double *)(v1 + 224);
    v11 = (int)v6 - 1;
    v12 = (unint64_t *)&v124[50 * v11 + 42];
    v13 = (double)*v12 - v9;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_10218B900);
    v14 = v10 / 1000000.0;
    v15 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = v123;
      if (*(char *)(v1 + 143) < 0)
        v16 = (_QWORD *)*v123;
      v17 = *(_QWORD *)(v124 + 42);
      v18 = *v12;
      v136 = 136447746;
      v137 = v16;
      v138 = 1026;
      *(_DWORD *)v139 = v7;
      *(_WORD *)&v139[4] = 2050;
      *(double *)&v139[6] = v14;
      *(_WORD *)&v139[14] = 2050;
      *(_QWORD *)&v139[16] = vabdd_f64(v14, v8);
      *(_WORD *)&v139[24] = 2050;
      *(_QWORD *)&v139[26] = v17;
      *(_WORD *)&v139[34] = 2050;
      *(_QWORD *)&v139[36] = v18;
      *(_WORD *)&v139[44] = 2050;
      *(double *)&v139[46] = v13 / 1000000.0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{public}llu], time interval %{public}f", (uint8_t *)&v136, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v136, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_10218B900);
      v88 = v123;
      if (*(char *)(v1 + 143) < 0)
        v88 = (_QWORD *)*v123;
      v89 = *(_QWORD *)(v124 + 42);
      v90 = *v12;
      v128 = 136447746;
      v129 = v88;
      v130 = 1026;
      *(_DWORD *)v131 = v7;
      *(_WORD *)&v131[4] = 2050;
      *(double *)&v131[6] = v14;
      *(_WORD *)&v131[14] = 2050;
      *(_QWORD *)&v131[16] = vabdd_f64(v14, v8);
      *(_WORD *)&v131[24] = 2050;
      *(_QWORD *)&v131[26] = v89;
      *(_WORD *)&v131[34] = 2050;
      *(_QWORD *)&v131[36] = v90;
      *(_WORD *)&v131[44] = 2050;
      *(double *)&v131[46] = v13 / 1000000.0;
      _os_log_send_and_compose_impl(2, 0, &v136, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{public}llu], time interval %{public}f", &v128, 68);
      v92 = (int *)v91;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v91);
      if (v92 != &v136)
        free(v92);
    }
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_10218B900);
    v19 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      v20 = v123;
      if (*(char *)(v1 + 143) < 0)
        v20 = (_QWORD *)*v123;
      v21 = *(_QWORD *)(v124 + 42);
      v22 = *v12;
      v23 = (double)*v12 * 0.000000999999997;
      v24 = *((float *)v124 + 7);
      v25 = *((float *)v124 + 8);
      v26 = *((float *)v124 + 9);
      v27 = (float *)&v124[50 * v11];
      v28 = v27[7];
      v29 = v27[8];
      v30 = v27[9];
      v136 = 136448770;
      v137 = v20;
      v138 = 2050;
      *(_QWORD *)v139 = v21;
      *(_WORD *)&v139[8] = 2050;
      *(_QWORD *)&v139[10] = v22;
      *(_WORD *)&v139[18] = 2050;
      *(double *)&v139[20] = (double)v21 * 0.000000999999997;
      *(_WORD *)&v139[28] = 2050;
      *(double *)&v139[30] = v23;
      *(_WORD *)&v139[38] = 2050;
      *(double *)&v139[40] = v24;
      *(_WORD *)&v139[48] = 2050;
      *(double *)&v139[50] = v25;
      *(_WORD *)&v139[58] = 2050;
      *(double *)v140 = v26;
      v140[4] = 2050;
      *(double *)&v140[5] = v28;
      v140[9] = 2050;
      v141 = v29;
      v142 = 2050;
      v143 = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f %{public}f %{public}f], last sample [%{public}f %{public}f %{public}f]", (uint8_t *)&v136, 0x70u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v136, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_10218B900);
      v93 = v123;
      if (*(char *)(v1 + 143) < 0)
        v93 = (_QWORD *)*v123;
      v94 = *(_QWORD *)(v124 + 42);
      v95 = *v12;
      v96 = (double)*v12 * 0.000000999999997;
      v97 = *((float *)v124 + 7);
      v98 = *((float *)v124 + 8);
      v99 = *((float *)v124 + 9);
      v100 = (float *)&v124[50 * v11];
      v101 = v100[7];
      v102 = v100[8];
      v103 = v100[9];
      v128 = 136448770;
      v129 = v93;
      v130 = 2050;
      *(_QWORD *)v131 = v94;
      *(_WORD *)&v131[8] = 2050;
      *(_QWORD *)&v131[10] = v95;
      *(_WORD *)&v131[18] = 2050;
      *(double *)&v131[20] = (double)v94 * 0.000000999999997;
      *(_WORD *)&v131[28] = 2050;
      *(double *)&v131[30] = v96;
      *(_WORD *)&v131[38] = 2050;
      *(double *)&v131[40] = v97;
      *(_WORD *)&v131[48] = 2050;
      *(double *)&v131[50] = v98;
      *(_WORD *)&v131[58] = 2050;
      *(double *)v132 = v99;
      v132[4] = 2050;
      *(double *)&v132[5] = v101;
      v132[9] = 2050;
      v133 = v102;
      v134 = 2050;
      v135 = v103;
      LODWORD(v117) = 112;
      _os_log_send_and_compose_impl(2, 0, &v136, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f %{public}f %{public}f], last sample [%{public}f %{public}f %{public}f]", &v128, v117);
      v105 = (int *)v104;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v104);
      if (v105 != &v136)
        free(v105);
    }
    *(double *)(v1 + 224) = (double)*v12;
  }
  v125 = 0;
  v126 = 0;
  v127 = 0;
  sub_100E48168((void **)&v125, (int)v7);
  v119 = v7;
  if ((int)v7 >= 1)
  {
    v32 = 0;
    v33 = 0;
    v122 = &v127;
    v34 = v119;
    *(_QWORD *)&v31 = 136446722;
    v121 = v31;
    *(_QWORD *)&v31 = 136446466;
    v120 = v31;
    v35 = v1;
    while (1)
    {
      v36 = &v124[50 * v32];
      v37 = *(_QWORD *)(v36 + 42);
      if (*(double *)(v1 + 152) <= (float)((float)v37 * 0.000001))
        break;
LABEL_63:
      if (++v32 == v34)
        goto LABEL_72;
    }
    if (v37 >= v33)
    {
      if (!v33)
      {
LABEL_44:
        v33 = *(_QWORD *)(v36 + 42);
        v46 = v126;
        if (v126 >= v127)
        {
          v51 = v125;
          v52 = 0x8F5C28F5C28F5C29 * ((v126 - v125) >> 1);
          v53 = v52 + 1;
          if (v52 + 1 > 0x51EB851EB851EB8)
            sub_100259694();
          if (0x1EB851EB851EB852 * ((v127 - v125) >> 1) > v53)
            v53 = 0x1EB851EB851EB852 * ((v127 - v125) >> 1);
          if (0x8F5C28F5C28F5C29 * ((v127 - v125) >> 1) >= 0x28F5C28F5C28F5CLL)
            v54 = 0x51EB851EB851EB8;
          else
            v54 = v53;
          if (v54)
          {
            v55 = (char *)sub_100E48360((uint64_t)v122, v54);
            v51 = v125;
            v46 = v126;
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[50 * v52];
          v57 = *(_OWORD *)v36;
          v58 = *((_OWORD *)v36 + 1);
          v59 = *((_OWORD *)v36 + 2);
          *((_WORD *)v56 + 24) = *((_WORD *)v36 + 24);
          *((_OWORD *)v56 + 1) = v58;
          *((_OWORD *)v56 + 2) = v59;
          *(_OWORD *)v56 = v57;
          if (v46 == v51)
          {
            v64 = &v55[50 * v52];
          }
          else
          {
            v60 = &v55[50 * v52];
            do
            {
              v61 = *(_OWORD *)((char *)v46 - 50);
              v62 = *(_OWORD *)((char *)v46 - 34);
              v63 = *(_OWORD *)((char *)v46 - 18);
              v64 = v60 - 50;
              *((_WORD *)v60 - 1) = *((_WORD *)v46 - 1);
              *(_OWORD *)(v60 - 18) = v63;
              *(_OWORD *)(v60 - 34) = v62;
              *(_OWORD *)(v60 - 50) = v61;
              v46 = (_OWORD *)((char *)v46 - 50);
              v60 -= 50;
            }
            while (v46 != v51);
          }
          v50 = v56 + 50;
          v125 = v64;
          v126 = v56 + 50;
          v127 = &v55[50 * v54];
          if (v51)
            operator delete(v51);
        }
        else
        {
          v47 = *(_OWORD *)v36;
          v48 = *((_OWORD *)v36 + 1);
          v49 = *((_OWORD *)v36 + 2);
          *((_WORD *)v126 + 24) = *((_WORD *)v36 + 24);
          v46[1] = v48;
          v46[2] = v49;
          *v46 = v47;
          v50 = (char *)v46 + 50;
        }
        v126 = v50;
        goto LABEL_63;
      }
    }
    else
    {
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_10218B900);
      v38 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v39 = v123;
        if (*(char *)(v35 + 143) < 0)
          v39 = (_QWORD *)*v123;
        v136 = v121;
        v137 = v39;
        v138 = 2048;
        *(_QWORD *)v139 = v37;
        *(_WORD *)&v139[8] = 2048;
        *(_QWORD *)&v139[10] = v33;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "[manager-%{public}s] time went backwards, current %llu, previous %llu", (uint8_t *)&v136, 0x20u);
      }
      v1 = v35;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v136, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_10218B900);
        v40 = v123;
        if (*(char *)(v35 + 143) < 0)
          v40 = (_QWORD *)*v123;
        v128 = v121;
        v129 = v40;
        v130 = 2048;
        *(_QWORD *)v131 = v37;
        *(_WORD *)&v131[8] = 2048;
        *(_QWORD *)&v131[10] = v33;
        LODWORD(v117) = 32;
        _os_log_send_and_compose_impl(2, 0, &v136, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] time went backwards, current %llu, previous %llu", &v128, v117);
        v42 = (int *)v41;
        sub_100512490("Generic", 1, 0, 0, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v41);
        if (v42 != &v136)
          free(v42);
        v1 = v35;
      }
    }
    v43 = (double)(v37 - v33) / 1000000.0;
    if (v43 > v8 * 1.5)
    {
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_10218B900);
      v44 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v45 = v123;
        if (*(char *)(v35 + 143) < 0)
          v45 = (_QWORD *)*v123;
        v136 = v120;
        v137 = v45;
        v138 = 2050;
        *(double *)v139 = 1.0 / v43;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "[manager-%{public}s] wrong frequency read, %{public}f", (uint8_t *)&v136, 0x16u);
      }
      v1 = v35;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v136, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_10218B900);
        v65 = v123;
        if (*(char *)(v35 + 143) < 0)
          v65 = (_QWORD *)*v123;
        v128 = v120;
        v129 = v65;
        v130 = 2050;
        *(double *)v131 = 1.0 / v43;
        LODWORD(v117) = 22;
        _os_log_send_and_compose_impl(2, 0, &v136, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] wrong frequency read, %{public}f", &v128, v117);
        v67 = (int *)v66;
        sub_100512490("Generic", 1, 0, 0, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v66);
        if (v67 != &v136)
          free(v67);
        v1 = v35;
      }
    }
    goto LABEL_44;
  }
LABEL_72:
  v68 = v125;
  v69 = v126;
  if (v125 == v126)
  {
    v72 = 0;
  }
  else
  {
    v70 = *(double *)(v1 + 160) * 1000000.0;
    v71 = v125;
    do
    {
      *(_QWORD *)(v71 + 42) -= (unint64_t)v70;
      v71 += 50;
    }
    while (v71 != v69);
    v72 = 0x8F5C28F5C28F5C29 * ((v69 - v68) >> 1);
    v73 = *(_QWORD *)(v1 + 176) + (int)v72;
    ++*(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 176) = v73;
    v74 = v119;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_10218B900);
    v75 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v76 = v123;
      if (*(char *)(v1 + 143) < 0)
        v76 = (_QWORD *)*v123;
      v77 = *(_QWORD *)(v125 + 42);
      v78 = *((_QWORD *)v126 - 1);
      v79 = *(_QWORD *)(v1 + 168);
      v80 = *(_QWORD *)(v1 + 176);
      v136 = 136448258;
      v137 = v76;
      v138 = 2050;
      *(_QWORD *)v139 = v77;
      *(_WORD *)&v139[8] = 2050;
      *(_QWORD *)&v139[10] = v78;
      *(_WORD *)&v139[18] = 2050;
      *(double *)&v139[20] = (double)v77 * 0.000000999999997;
      *(_WORD *)&v139[28] = 2050;
      *(double *)&v139[30] = (double)v78 * 0.000000999999997;
      *(_WORD *)&v139[38] = 1026;
      *(_DWORD *)&v139[40] = v74;
      *(_WORD *)&v139[44] = 1026;
      *(_DWORD *)&v139[46] = v72;
      *(_WORD *)&v139[50] = 2050;
      *(_QWORD *)&v139[52] = v79;
      v140[0] = 2050;
      *(_QWORD *)&v140[1] = v80;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public}d to %{public}d, batch num %{public}llu, sample num %{public}llu", (uint8_t *)&v136, 0x54u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v136, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_10218B900);
      v106 = v123;
      if (*(char *)(v1 + 143) < 0)
        v106 = (_QWORD *)*v123;
      v107 = *(_QWORD *)(v125 + 42);
      v108 = *((_QWORD *)v126 - 1);
      v109 = *(_QWORD *)(v1 + 168);
      v110 = *(_QWORD *)(v1 + 176);
      v128 = 136448258;
      v129 = v106;
      v130 = 2050;
      *(_QWORD *)v131 = v107;
      *(_WORD *)&v131[8] = 2050;
      *(_QWORD *)&v131[10] = v108;
      *(_WORD *)&v131[18] = 2050;
      *(double *)&v131[20] = (double)v107 * 0.000000999999997;
      *(_WORD *)&v131[28] = 2050;
      *(double *)&v131[30] = (double)v108 * 0.000000999999997;
      *(_WORD *)&v131[38] = 1026;
      *(_DWORD *)&v131[40] = v74;
      *(_WORD *)&v131[44] = 1026;
      *(_DWORD *)&v131[46] = v72;
      *(_WORD *)&v131[50] = 2050;
      *(_QWORD *)&v131[52] = v109;
      v132[0] = 2050;
      *(_QWORD *)&v132[1] = v110;
      LODWORD(v117) = 84;
      _os_log_send_and_compose_impl(2, 0, &v136, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public}d to %{public}d, batch num %{public}llu, sample num %{public}llu", &v128, v117);
      v112 = (int *)v111;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v111);
      if (v112 != &v136)
        free(v112);
    }
    v81 = ((double)*(unint64_t *)(v125 + 42) - *(double *)(v1 + 184)) / 1000000.0;
    if (v81 > v8 * 1.5)
    {
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_10218B900);
      v82 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v83 = v123;
        if (*(char *)(v1 + 143) < 0)
          v83 = (_QWORD *)*v123;
        v84 = *(double *)(v1 + 184) * 0.000001;
        v85 = (double)*((unint64_t *)v126 - 1) * 0.000001;
        v136 = 136446978;
        v137 = v83;
        v138 = 2050;
        *(double *)v139 = v81;
        *(_WORD *)&v139[8] = 2050;
        *(double *)&v139[10] = v84;
        *(_WORD *)&v139[18] = 2050;
        *(double *)&v139[20] = v85;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f", (uint8_t *)&v136, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v136, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_10218B900);
        if (*(char *)(v1 + 143) < 0)
          v123 = (_QWORD *)*v123;
        v113 = *(double *)(v1 + 184) * 0.000001;
        v114 = (double)*((unint64_t *)v126 - 1) * 0.000001;
        v128 = 136446978;
        v129 = v123;
        v130 = 2050;
        *(double *)v131 = v81;
        *(_WORD *)&v131[8] = 2050;
        *(double *)&v131[10] = v113;
        *(_WORD *)&v131[18] = 2050;
        *(double *)&v131[20] = v114;
        LODWORD(v117) = 42;
        _os_log_send_and_compose_impl(2, 0, &v136, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f", &v128, v117);
        v116 = (int *)v115;
        sub_100512490("Generic", 1, 0, 0, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v115);
        if (v116 != &v136)
          free(v116);
      }
    }
    *(double *)(v1 + 184) = (double)*((unint64_t *)v126 - 1);
  }
  v136 = v72;
  v86 = *(_QWORD *)(v1 + 216);
  if (!v86)
    sub_10025FD1C();
  (*(void (**)(uint64_t, char **, int *))(*(_QWORD *)v86 + 48))(v86, &v125, &v136);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  return v72;
}

void sub_100E48120(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(_QWORD *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E48168(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x8F5C28F5C28F5C29 * ((v4 - (_BYTE *)*a1) >> 1) < a2)
  {
    if (a2 >= 0x51EB851EB851EB9)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100E48360(v3, a2);
    v7 = &v6[50 * (v5 / 50)];
    v9 = &v6[50 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 50);
        v14 = *(_OWORD *)(v10 - 34);
        v15 = *(_OWORD *)(v10 - 18);
        *((_WORD *)v12 - 1) = *((_WORD *)v10 - 1);
        *(_OWORD *)(v12 - 18) = v15;
        *(_OWORD *)(v12 - 34) = v14;
        *(_OWORD *)(v12 - 50) = v13;
        v12 -= 50;
        v10 -= 50;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_100E48268(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10218B8D0;
  v2 = a1 + 24;
  v3 = (_QWORD *)a1[27];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_100B917A8((uint64_t)a1);
}

void sub_100E482C4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10218B8D0;
  v2 = a1 + 24;
  v3 = (_QWORD *)a1[27];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_100B917A8((uint64_t)a1);
  operator delete();
}

void sub_100E48334(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void *sub_100E48360(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x51EB851EB851EB9)
    sub_10025955C();
  return operator new(50 * a2);
}

uint64_t sub_100E483A8()
{
  sub_1015A2E04(qword_102308B20, "Acc800Fp");
  dword_102308B38 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102308B20, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102308B40, "DmFp");
  dword_102308B58 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102308B40, (void *)&_mh_execute_header);
}

BOOL sub_100E48434(void *a1)
{
  return sub_1001991F4(a1, 0) != 0;
}

void sub_100E48454(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102308B60);

  qword_102308B68 = (uint64_t)objc_msgSend(a1, "copy");
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102308B60);
}

void sub_100E484A4(id a1)
{
  qword_102308B70 = objc_opt_new(NSMutableDictionary);
}

uint64_t sub_100E484C8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = a1;
  if ((_DWORD)a1 == 4 && (_DWORD)a2 == 4)
    return 4;
  if ((_DWORD)a1 == 4 || (_DWORD)a2 == 4)
  {
    if ((_DWORD)a1 == 4)
      return a2;
    else
      return a1;
  }
  else if (a3 == 1)
  {
    v6 = objc_msgSend(off_1022FBD90, "indexOfObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1));
    if (v6 <= objc_msgSend(off_1022FBD90, "indexOfObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2)))return v4;
    else
      return a2;
  }
  else if (!a3)
  {
    v5 = objc_msgSend(off_1022FBD90, "indexOfObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1));
    if (v5 >= objc_msgSend(off_1022FBD90, "indexOfObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2)))return v4;
    else
      return a2;
  }
  return v4;
}

id sub_100E485D8(void *a1)
{
  id result;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(&off_102220750, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(&off_102220750);
        objc_msgSend(a1, "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      result = objc_msgSend(&off_102220750, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

void sub_100E486C8(id a1)
{
  _objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLCapabilityMonitor")), "syncgetForceCacheUpdate");
}

void sub_100E486F0(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100E4871C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100E4874C()
{
  uint64_t v0;
  char v1;
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  const __CFData *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  unint64_t *v14;
  unint64_t v15;
  id v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const __CFData *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CFIndex Length;
  const UInt8 *BytePtr;
  int v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  char v40;
  int v41;
  int v42;
  __int16 v43;
  CFIndex v44;
  uint8_t buf[8];
  _QWORD v46[204];

  v40 = 0;
  v0 = sub_100127B9C();
  sub_100081C10(v0, buf);
  v1 = sub_1001E4874(*(uint64_t *)buf, "EnableMagnetometerCoexistenceCompensation", (BOOL *)&v40);
  v2 = v1;
  v3 = (std::__shared_weak_count *)v46[0];
  if (!v46[0])
    goto LABEL_5;
  v4 = (unint64_t *)(v46[0] + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
  {
LABEL_5:
    if ((v1 & 1) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if ((v2 & 1) == 0)
LABEL_6:
    v40 = 1;
LABEL_7:
  sub_100127B9C();
  if (sub_1009CF94C())
  {
    v6 = (const __CFData *)sub_100884FA8((int)buf);
    if (!v6)
    {
LABEL_9:
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218BAE0);
      v7 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data response was invaild.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_10218BAE0);
        LOWORD(v41) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning CPAS data response was invaild.", &v41, v37);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v40 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    sub_100E49270("kCLConnectionMessageCompassCalibrationData", buf);
    v9 = objc_opt_class(NSNumber, v8);
    v11 = objc_opt_class(NSData, v10);
    v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v9, v11, objc_opt_class(NSString, v12), 0);
    v38 = *(_QWORD *)buf;
    v39 = (std::__shared_weak_count *)v46[0];
    if (v46[0])
    {
      v14 = (unint64_t *)(v46[0] + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = +[CMMotionUtils sendMessage:withReplyClassesSync:](CMMotionUtils, "sendMessage:withReplyClassesSync:", &v38, v13);
    v17 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (const __CFData *)objc_msgSend(v16, "objectForKeyedSubscript:", CMCompassCalibrationData);
    v6 = v20;
    v21 = (std::__shared_weak_count *)v46[0];
    if (!v46[0])
      goto LABEL_27;
    v22 = (unint64_t *)(v46[0] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v6)
        goto LABEL_9;
    }
    else
    {
LABEL_27:
      if (!v20)
        goto LABEL_9;
    }
  }
  if (!v40)
    goto LABEL_46;
  Length = CFDataGetLength(v6);
  BytePtr = CFDataGetBytePtr(v6);
  if (BytePtr)
  {
    if (Length >= 2)
    {
      v26 = *BytePtr;
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218BAE0);
      v27 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v26;
        LOWORD(v46[0]) = 2048;
        *(_QWORD *)((char *)v46 + 2) = Length;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "cpas version is %u, length is %ld bytes", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_10218BAE0);
        v41 = 67109376;
        v42 = v26;
        v43 = 2048;
        v44 = Length;
        LODWORD(v37) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "cpas version is %u, length is %ld bytes", &v41, v37);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      if (v26 == 5 && Length == 76)
        operator new();
      if (v26 == 6 && Length == 76)
        operator new();
      if (v26 == a40clmagnetomet[0] && Length == 76)
        operator new();
      if (v26 == a40clmagnetomet_0[0] && Length == 28)
        operator new();
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218BAE0);
      v29 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v26;
        LOWORD(v46[0]) = 2048;
        *(_QWORD *)((char *)v46 + 2) = Length;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Warning: cpas data was found but did not match any versions. version (%u) length (%ld)", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_10218BAE0);
        v41 = 67109376;
        v42 = v26;
        v43 = 2048;
        v44 = Length;
        LODWORD(v37) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Warning: cpas data was found but did not match any versions. version (%u) length (%ld)", &v41, v37);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v30);
LABEL_75:
        if (v31 != buf)
          free(v31);
      }
    }
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10218BAE0);
    v28 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10218BAE0);
      LOWORD(v41) = 0;
      LODWORD(v37) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning CPAS data is NULL", &v41, v37);
      v31 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v34);
      goto LABEL_75;
    }
  }
LABEL_46:
  if (!qword_102311730)
    operator new();
}

void sub_100E4914C()
{
  operator delete();
}

void sub_100E491EC(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLMagnetometerCoexistenceNotifier", 2);
}

void sub_100E49220(_QWORD *a1)
{
  sub_1009BAD18(a1);
  operator delete();
}

void sub_100E49244(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

_QWORD *sub_100E49270@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_100E492C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100E492B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E492C8(_QWORD *a1, char *__s)
{
  char v4;

  a1[2] = 0;
  *a1 = off_10213D5E0;
  a1[1] = 0;
  sub_100E49328((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_100E49314(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100E49328(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_1015A2E04(__p, __s);
  CLConnectionMessage::CLConnectionMessage(a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_100E49374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100E4939C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id result;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 32))
    sub_10192E928();
  result = a2;
  *(_QWORD *)(v2 + 32) = result;
  return result;
}

id sub_100E493CC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v6;
  void **v7;
  void **v8;
  audit_token_t v10;
  void *__p[2];
  uint64_t v12;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = (char *)sub_10008ABE4(*(void **)(a1 + 32), v3);
  if (v4)
  {
    v5 = v4;
    if (v4[23] < 0)
    {
      sub_100115CE4(__p, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v6 = *(_OWORD *)v4;
      v12 = *((_QWORD *)v4 + 2);
      *(_OWORD *)__p = v6;
    }
    if (v12 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), CFSTR("ClientKeyPath"));
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", -[CLClientKeyPath clientKey](sub_1001A4450(&v10), "clientKey"), CFSTR("NaturalConnectedIdentity"));
    if (v5[47] < 0)
    {
      sub_100115CE4(__p, *((void **)v5 + 3), *((_QWORD *)v5 + 4));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v5 + 24);
      v12 = *((_QWORD *)v5 + 5);
    }
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), CFSTR("Reason"));
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v5 + 12)), CFSTR("AssertionLevel"));
  }
  return v2;
}

void sub_100E49554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E49574(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

id sub_100E495A0(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218BB90);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C29EE5 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10218BB90);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C29EE5 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_100E49774(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100E497A0(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)result = off_10218BBC0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v4 = *a2;
  v3 = a2[1];
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 48) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(result + 56) = 0;
  return result;
}

void sub_100E497DC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v2 = *a2;
  a1[3] = *a2;
  a1[1] = v2;
  v3 = a2[1];
  a1[2] = v3;
  if (v2 == v3)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218BBE8);
    v10 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCacheIterator, no cycling sessions found from db query", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10218BBE8);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "CLCyclingFTPCacheIterator, no cycling sessions found from db query", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCyclingFTPCacheIterator::generateSessionHistoryIterators(std::vector<CLCyclingFTPHistory::Session> &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v4 = (double *)a1[5];
    if (*(double *)(v2 + 24) < *v4)
    {
      v5 = v2 + 88;
      do
      {
        v6 = v5 + 88;
        if (v5 == v3)
          break;
        v7 = *(double *)(v5 + 24);
        v5 += 88;
      }
      while (v7 < *v4);
      v2 = v6 - 88;
      a1[1] = v6 - 88;
    }
    v8 = v4[1];
    if (*(double *)(v3 - 72) > v8)
    {
      do
      {
        if (v3 == v2)
          break;
        a1[2] = v3 - 88;
        v9 = *(double *)(v3 - 160);
        v3 -= 88;
      }
      while (v9 > v8);
    }
  }
}

void sub_100E499EC(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_100615E50(*(_QWORD *)(a1 + 32)) && sub_100616354(*(_QWORD *)(a1 + 32)))
  {
    v2 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 40);
    if (v2)
    {
      sub_100E497DC((_QWORD *)a1, v2);
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10218BBE8);
      v3 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCacheIterator, no CLCyclingFTPHistory record returned from db query", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_10218BBE8);
        v6[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "CLCyclingFTPCacheIterator, no CLCyclingFTPHistory record returned from db query", v6, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLCyclingFTPCacheIterator::cache()", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
    }
  }
  *(_BYTE *)(a1 + 56) = 1;
}

void sub_100E49BB4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    sub_10061684C(v2, a1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  }
  v6 = 0uLL;
  sub_1002B7674(a1 + 40, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_BYTE *)(a1 + 56) = 0;
}

_QWORD *sub_100E49C3C(_QWORD *a1)
{
  *a1 = off_10218BBC0;
  sub_100261F44((uint64_t)(a1 + 5));
  return a1;
}

void sub_100E49C6C(_QWORD *a1)
{
  *a1 = off_10218BBC0;
  sub_100261F44((uint64_t)(a1 + 5));
  operator delete();
}

void sub_100E49CAC(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100E49CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  BOOL v12;

  v4 = sub_100E3B4A4(a1, a2, a3);
  *(_QWORD *)v4 = &off_10218BC18;
  *(_BYTE *)(v4 + 64) = 0;
  sub_1001E4804(&v10);
  v12 = 0;
  v5 = sub_1001E4874(v10, "CLProactiveInertialOdometryIsEnabled", &v12) ^ 1;
  if (v12)
    LOBYTE(v5) = 1;
  *(_BYTE *)(a1 + 64) = v5;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_100E49D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_100E3B4D0(v2);
  _Unwind_Resume(a1);
}

void sub_100E49DAC(uint64_t a1)
{
  int v1;
  int v2;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 32) = v2;
  if (v2 != v1)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10218BC48);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v5 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)buf = 67240192;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio, CLProactiveInertialOdometrySubscription_Phone, fPolicyStateIsSubscribe, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10218BC48);
      v6 = *(unsigned __int8 *)(a1 + 32);
      v9[0] = 67240192;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#pbio, CLProactiveInertialOdometrySubscription_Phone, fPolicyStateIsSubscribe, %{public}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLProactiveInertialOdometrySubscription_Phone::_updateSubscriptionState(const CFTimeInterval)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100E49F74(_QWORD *a1)
{
  sub_100E3B4D0(a1);
  operator delete();
}

void sub_100E49F98(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E4A068(id a1)
{
  qword_102308BC8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLStreamingAwareLocationProviderSilo"));
}

uint64_t sub_100E4A11C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100E4A620;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102308BE0 != -1)
    dispatch_once(&qword_102308BE0, block);
  return qword_102308BD8;
}

void sub_100E4A26C(_QWORD *a1, void *a2)
{
  NSObject *v4;
  _QWORD *v5;
  unint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  _BOOL8 v12;
  _BYTE *v13;
  double Current;
  unint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 68289282;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion to be released\", \"client\":%{public, location:escape_only}s}", (uint8_t *)&v15, 0x1Cu);
  }
  v5 = (_QWORD *)a1[32];
  if (!v5)
  {
LABEL_10:
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v7 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      v9 = a1[33];
      v15 = 68289538;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = v8;
      v20 = 2050;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion not released\", \"client\":%{public, location:escape_only}s, \"fAccuracyAssertions size\":%{public}ld}", (uint8_t *)&v15, 0x26u);
    }
    return;
  }
  while (1)
  {
    v6 = v5[4];
    if (v6 <= (unint64_t)a2)
      break;
LABEL_9:
    v5 = (_QWORD *)*v5;
    if (!v5)
      goto LABEL_10;
  }
  if (v6 < (unint64_t)a2)
  {
    ++v5;
    goto LABEL_9;
  }
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v10 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    v15 = 68289282;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion released\", \"client\":%{public, location:escape_only}s}", (uint8_t *)&v15, 0x1Cu);
  }
  v15 = (unint64_t)a2;
  sub_10071E360((uint64_t)(a1 + 31), &v15);

  v12 = sub_1000624C0((uint64_t)a1);
  v13 = (_BYTE *)a1[16];
  Current = CFAbsoluteTimeGetCurrent();
  sub_1000622D8(v13, v12, Current);
}

void sub_100E4A53C()
{
  operator new();
}

void sub_100E4A5E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100E4A620()
{
  operator new();
}

void sub_100E4A668()
{
  operator delete();
}

void sub_100E4A68C(uint64_t a1, void *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _BYTE buf[24];

  v3 = sub_1006DAF10(a1, "Streaming aware location provider", a2);
  *(_QWORD *)(v3 + 120) = off_10218BE30;
  *(_QWORD *)v3 = off_10218BCC0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(a1 + 136) = objc_msgSend(objc_msgSend(*(id *)(v3 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLRemoteMotionAlarm"), CFSTR("CLStreamingAwareLocationProvider"));
  *(_OWORD *)buf = xmmword_101C29FB8;
  *(_QWORD *)&buf[16] = 2;
  sub_100752C88(a1 + 144, (int *)buf, 3);
  sub_100E4C198((uint64_t *)(a1 + 168), a1 + 144);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  sub_1001E4804(buf);
  LOBYTE(v11) = 0;
  v4 = sub_1001E4874(*(uint64_t *)buf, "ForceStreamingBehaviorNoLocalGPS", (BOOL *)&v11);
  if ((_BYTE)v11)
    v5 = v4;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    sub_100197040();
    v6 = sub_10075A02C();
  }
  *(_BYTE *)(a1 + 232) = v6;
  v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v6 = *(unsigned __int8 *)(a1 + 232);
  }
  if (v6)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v10 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"this platform will prefer streaming for GPS locations\"}", buf, 0x12u);
    }
  }
  sub_100197040();
  if ((sub_100195F08() & 1) != 0 || *(_BYTE *)(a1 + 232))
  {
    sub_100197040();
    if ((sub_1001B796C() & 8) != 0 && !*(_BYTE *)(a1 + 232))
      operator new();
    operator new();
  }
  operator new();
}

void sub_100E4AC68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete();
}

void sub_100E4AE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLStreamingAwareLocationProvider::onStepCountNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218BF30);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100E4BFB4(a4);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100E4AFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E4AFD4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStreamingAwareLocationProvider::onStreamedLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onStreamedLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218BF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onStreamedLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100E4BD8C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100E4B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E4B1AC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLStreamingAwareLocationProvider::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218BF30);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100E4BEA0(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100E4B364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100E4B384(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLStreamingAwareLocationProvider::onManagerNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218BF30);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100E4C0AC(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100E4B534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4B554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_10218BCC0;
  *(_QWORD *)(a1 + 120) = off_10218BE30;

  *(_QWORD *)(a1 + 136) = 0;
  v2 = *(_QWORD *)(a1 + 240);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 42);
    v3 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(_QWORD **)(a1 + 248);
  if (v4 != (_QWORD *)(a1 + 256))
  {
    do
    {

      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 256));
  }
  sub_100008848(a1 + 248, *(_QWORD **)(a1 + 256));
  v8 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_100008848(a1 + 144, *(_QWORD **)(a1 + 152));
  v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return sub_1006DB4AC(a1);
}

uint64_t sub_100E4B6F4(uint64_t a1)
{
  return sub_100E4B554(a1 - 120);
}

void sub_100E4B6FC(uint64_t a1)
{
  sub_100E4B554(a1);
  operator delete();
}

void sub_100E4B720(uint64_t a1)
{
  sub_100E4B554(a1 - 120);
  operator delete();
}

uint64_t sub_100E4B748(_QWORD *a1, unsigned int *a2)
{
  NSObject *v4;
  unsigned int v5;
  int v6;
  uint64_t **v7;
  double Current;
  uint64_t v9;
  int *v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  unsigned int v16;

  sub_10003DFD4((uint64_t)a1);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v12[0] = 68289282;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Stream clearing cached notification\", \"notification\":%{public}d}", (uint8_t *)v12, 0x18u);
  }
  (*(void (**)(_QWORD *, unsigned int *))(*a1 + 120))(a1, a2);
  v6 = *a2;
  if (*a2 >= 3)
  {
    if (v6 != 9)
    {
      objc_msgSend(*(id *)(a1[25] + 16), "unregister:forNotification:", *(_QWORD *)(a1[25] + 8), *a2);
      v9 = 0;
      v10 = dword_101C2A0D4;
      while (dword_101C2A0C8[v9] != *a2)
      {
        if (++v9 == 3)
          goto LABEL_13;
      }
      v10 = &dword_101C2A0C8[v9];
LABEL_13:
      if ((char *)v10 - (char *)dword_101C2A0C8 != 12)
        objc_msgSend(*(id *)(a1[26] + 16), "unregister:forNotification:", *(_QWORD *)(a1[26] + 8));
    }
  }
  else
  {
    v7 = (uint64_t **)a1[16];
    Current = CFAbsoluteTimeGetCurrent();
    sub_10001982C(v7, v6, 0, Current);
  }
  return 1;
}

uint64_t sub_100E4B8EC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v5[5];

  *(_QWORD *)a1 = off_10218BE78;
  v3 = a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 56) = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100E4B9A8;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v3, "setHandler:", v5);
  return a1;
}

void sub_100E4B96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 40);
  if (v3 == (_QWORD *)(v1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 16);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4B9A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  CFAbsoluteTime Current;

  v1 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 48) = 0x7FEFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(v1 + 40))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v2 = *(_QWORD *)(v1 + 40);
    if (!v2)
      sub_10025FD1C();
    return (*(uint64_t (**)(uint64_t, CFAbsoluteTime *))(*(_QWORD *)v2 + 48))(v2, &Current);
  }
  return result;
}

uint64_t sub_100E4BA04(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10218BE78;
  objc_msgSend(*(id *)(a1 + 8), "invalidate");

  v2 = *(_QWORD **)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 16))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_100E4BA78(uint64_t a1)
{
  sub_100E4BA04(a1);
  operator delete();
}

id sub_100E4BA9C(id result, double a2)
{
  *((double *)result + 6) = a2;
  if (*((_BYTE *)result + 56))
    return objc_msgSend(*((id *)result + 1), "setNextFireTime:");
  return result;
}

_QWORD *sub_100E4BAB4(uint64_t a1, uint64_t a2)
{
  return sub_10027839C((_QWORD *)(a1 + 16), a2);
}

id sub_100E4BAD0(uint64_t a1)
{
  *(_BYTE *)(a1 + 56) = 1;
  return objc_msgSend(*(id *)(a1 + 8), "setNextFireTime:", *(double *)(a1 + 48));
}

id sub_100E4BAE4(uint64_t a1)
{
  *(_BYTE *)(a1 + 56) = 0;
  return objc_msgSend(*(id *)(a1 + 8), "setNextFireDelay:", 1.79769313e308);
}

uint64_t sub_100E4BAF8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;

  if (a2 == 39)
    v3 = 0;
  else
    v3 = a2;
  if (a2 < 6)
    v3 = 0;
  v5 = v3;
  return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v5, a3, 1, 0xFFFFFFFFLL, 0);
}

id sub_100E4BB40(uint64_t a1, int a2)
{
  void *v2;

  v2 = *(void **)(a1 + 136);
  if (a2)
    return _objc_msgSend(v2, "registerClientForRemoteMotionAlarm:", CLISP_ME_TOKEN);
  else
    return _objc_msgSend(v2, "unregisterClientForRemoteMotionAlarm:", CLISP_ME_TOKEN);
}

id sub_100E4BB5C(uint64_t a1, int a2)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (a2)
    return _objc_msgSend(v2, "registerClientForRemoteMotionAlarm:", CLISP_ME_TOKEN);
  else
    return _objc_msgSend(v2, "unregisterClientForRemoteMotionAlarm:", CLISP_ME_TOKEN);
}

void sub_100E4BB78(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  operator new();
}

void sub_100E4BBD8()
{
  operator delete();
}

void sub_100E4BBFC(uint64_t a1)
{
  sub_100E4BB78(a1 - 120);
}

id sub_100E4BC04(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  if (a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Turning on step count notifications\"}", (uint8_t *)&v6, 0x12u);
    }
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8), 1, 0);
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Turning off step count notifications\"}", (uint8_t *)&v6, 0x12u);
    }
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8), 1);
  }
}

id sub_100E4BD84(uint64_t a1, int a2)
{
  return sub_100E4BC04(a1 - 120, a2);
}

uint64_t sub_100E4BD8C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double Current;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v7 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v8 = (int)*a3;
    v12[0] = 68289282;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received streamed notification\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)v12, 0x1Cu);
  }
  v9 = *(_QWORD *)(a1 + 128);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100136828(v9, 1u, a3, a4, Current);
}

uint64_t sub_100E4BEA0(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  double Current;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (*a3 == 1)
  {
    v3 = result;
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v4 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received motion mediator notification\"}", (uint8_t *)v7, 0x12u);
    }
    v5 = *(_QWORD *)(v3 + 128);
    Current = CFAbsoluteTimeGetCurrent();
    return sub_100E33780(v5, Current);
  }
  return result;
}

uint64_t sub_100E4BFB4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double Current;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received step count notification\"}", (uint8_t *)v6, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 128);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100E33808(v3, Current);
}

id *sub_100E4C0AC(id *result, uint64_t a2, _DWORD *a3)
{
  id *v4;
  id v5;
  uint64_t *v6;

  if ((*a3 | 4) == 4)
  {
    v4 = result;
    result = (id *)(*((uint64_t (**)(id *))*result + 38))(result);
    if (!*a3)
    {
      v5 = objc_msgSend(objc_msgSend(v4[4], "vendor"), "proxyForService:", CFSTR("CLClientManager"));
      if (byte_102308BC7 >= 0)
        v6 = &qword_102308BB0;
      else
        v6 = (uint64_t *)qword_102308BB0;
      return (id *)objc_msgSend(v5, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
    }
  }
  return result;
}

void sub_100E4C140(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E4C16C(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t *sub_100E4C198(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100E4C1EC(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100E4C1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100E4C1EC(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100752D04(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100E4C270()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C29F80;
      v1[3] = unk_101C29F90;
      v1[4] = xmmword_101C29FA0;
      v1[0] = xmmword_101C29F60;
      v1[1] = unk_101C29F70;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100E4C344(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100E4C35C()
{
  sub_1015A2E04(qword_102308B98, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102308B98, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102308BB0, "StreamingAwareLocationProvider");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102308BB0, (void *)&_mh_execute_header);
}

void sub_100E4C3D8(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_10012FD94(a2, a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10218BF70);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbReproc, timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10218BF70);
    v6[0] = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbReproc, timer", v6, 2);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NewReprocessWsbRequest::HandleEvent::operator()(const Events::Client::WsbTimer &) const", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if (*(_QWORD *)(a1 + 6360) != *(_QWORD *)(a1 + 6352))
  {
    sub_1015A2E04(buf, "Timer");
    sub_100E4C5E8((uint64_t)(a2 + 746), (__int128 *)buf);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100E4C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_10055829C(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100E4C5E8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_100E4C660(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  NSObject *v6;
  int v7;
  int v8;
  char *v9;
  _DWORD v10[4];
  uint8_t buf[1640];

  sub_10012FD94(a3, a1);
  if (*(_QWORD *)(a1 + 6352) != *(_QWORD *)(a1 + 6360) && *a2 == *(_DWORD *)(a1 + 6416))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10218BF70);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a2[1];
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, reply, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10218BF70);
      v8 = a2[1];
      v10[0] = 67240192;
      v10[1] = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbAls, reply, %{public}d", v10, 8);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NewReprocessWsbRequest::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    sub_1015A2E04(buf, "ALS");
    sub_100E4C5E8((uint64_t)(a3 + 746), (__int128 *)buf);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100E4C870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_10055829C(v18);
  _Unwind_Resume(a1);
}

void sub_100E4C8A4(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100E4C8D0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100E4C96C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100E4C984()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100E4CA10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100E4CA28(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[8];
  std::__shared_weak_count *v17;

  v2 = sub_1010CDBC0(a1);
  *(_QWORD *)v2 = off_10218BFA0;
  *(_DWORD *)(v2 + 2648) = 1;
  sub_10100423C(v2);
  sub_100197040();
  if ((sub_100195F08() & 1) != 0)
    goto LABEL_10;
  sub_1001E4804(buf);
  LOBYTE(v15[0]) = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "UseMapsBuildingTileStyleBasic", (BOOL *)v15);
  if (LOBYTE(v15[0]))
    v4 = v3;
  else
    v4 = 0;
  v5 = v17;
  if (!v17)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v4)
    {
LABEL_10:
      v8 = 0;
      goto LABEL_13;
    }
  }
  v8 = 1;
LABEL_13:
  *(_DWORD *)(a1 + 2648) = v8;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10218C030);
  v9 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_DWORD *)(a1 + 2648);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLMM,using maps API for building data, mapsBuildingTileStyleToUse,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10218C030);
    v12 = *(_DWORD *)(a1 + 2648);
    v15[0] = 67240192;
    v15[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,using maps API for building data, mapsBuildingTileStyleToUse,%{public}d", v15, 8);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "CLGeoFeatureAccess3dBuildingGeometry::CLGeoFeatureAccess3dBuildingGeometry()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return a1;
}

void sub_100E4CC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1010CDCEC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E4CCB8(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t *a5)
{
  double v10;
  double v11;
  uint64_t v12;
  double *v13;
  void *v14;
  uint64_t *v15;
  NSObject *v16;
  dispatch_time_t v17;
  intptr_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  double *v23;
  uint64_t v24;
  void *v25;
  void *j;
  void *v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t k;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  void *context;
  id obj;
  uint64_t v63;
  id v64;
  void *i;
  id v66;
  uint64_t v67;
  id v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[5];
  __int128 v79;
  __int128 v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  void (*v92)(uint64_t);
  dispatch_group_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  _BYTE v98[128];
  _BYTE v99[128];
  _BYTE v100[24];
  double *v101;
  int v102;
  uint64_t v103;
  uint8_t buf[16];
  __int128 v105;
  __int128 v106;
  __int128 v107;

  context = objc_autoreleasePoolPush();
  if (objc_msgSend(*(id *)(a1 + 2600), "allowNetworkTileLoad") && sub_1010CE588(a1))
    objc_msgSend(*(id *)(a1 + 2600), "setAllowNetworkTileLoad:", 0);
  v10 = *a3;
  v11 = *a4;
  v78[0] = _NSConcreteStackBlock;
  v78[1] = 3221225472;
  v78[2] = sub_100E4D774;
  v78[3] = &unk_10215ACD8;
  obj = +[NSMutableArray array](NSMutableArray, "array");
  v78[4] = obj;
  v12 = *a5;
  v13 = (double *)operator new(0x30uLL);
  *(_QWORD *)v13 = off_10218C088;
  *((_QWORD *)v13 + 1) = a1;
  v13[2] = v10;
  v13[3] = v11;
  *((_QWORD *)v13 + 4) = v12;
  *((_QWORD *)v13 + 5) = v78;
  v101 = v13;
  v94 = 0;
  v95 = &v94;
  v96 = 0x2020000000;
  v97 = 0;
  v88 = 0;
  v89 = &v88;
  v90 = 0x3052000000;
  v91 = sub_1002071D4;
  v92 = sub_100207D54;
  v93 = 0;
  v93 = dispatch_group_create();
  v84 = 0;
  v85 = &v84;
  v86 = 0x2020000000;
  v87 = 0;
  *(_QWORD *)&v79 = _NSConcreteStackBlock;
  *((_QWORD *)&v79 + 1) = 3221225472;
  *(_QWORD *)&v80 = sub_100E4D840;
  *((_QWORD *)&v80 + 1) = &unk_10218C058;
  v81 = &v94;
  v82 = &v88;
  v83 = &v84;
  dispatch_group_enter((dispatch_group_t)v89[5]);
  *(_QWORD *)buf = &v79;
  if (!v101)
    sub_10025FD1C();
  v14 = (void *)(*(uint64_t (**)(double *, uint8_t *))(*(_QWORD *)v101 + 48))(v101, buf);
  v15 = a2;
  v16 = v89[5];
  v17 = dispatch_time(0, 100000000);
  v18 = dispatch_group_wait(v16, v17);
  v85[3] = v18;
  if (v18)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10218C030);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v20 = v85[3];
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      v53 = v85[3];
      v102 = 134349056;
      v103 = v53;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", &v102, 12);
      v55 = (uint8_t *)v54;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
    objc_msgSend(v14, "cancel");
  }
  else if (v89[5])
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10218C030);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      LOWORD(v102) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,clearing dispatchGroup", &v102, 2);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
      v15 = a2;
    }

    v89[5] = 0;
  }
  if (v85[3])
    v22 = 0;
  else
    v22 = *((_BYTE *)v95 + 24) == 0;
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(&v94, 8);
  v23 = v101;
  if (v101 == (double *)v100)
  {
    v24 = 4;
    v23 = (double *)v100;
  }
  else
  {
    if (!v101)
      goto LABEL_27;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_27:
  HIDWORD(v60) = v22;
  if (v22)
  {
    *(_DWORD *)(a1 + 40) = 0;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v99, 16);
    if (v64)
    {
      v63 = *(_QWORD *)v75;
      do
      {
        for (i = 0; i != v64; i = (char *)i + 1)
        {
          if (*(_QWORD *)v75 != v63)
            objc_enumerationMutation(obj);
          v25 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)i);
          v70 = 0u;
          v71 = 0u;
          v72 = 0u;
          v73 = 0u;
          v69 = v25;
          v66 = objc_msgSend(v25, "sections");
          v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v70, v98, 16);
          if (v68)
          {
            v67 = *(_QWORD *)v71;
            do
            {
              for (j = 0; j != v68; j = (char *)j + 1)
              {
                if (*(_QWORD *)v71 != v67)
                  objc_enumerationMutation(v66);
                v27 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)j);
                v106 = 0u;
                v107 = 0u;
                *(_OWORD *)buf = 0u;
                v105 = 0u;
                v28 = objc_msgSend(v69, "tileSetStyle");
                if (!v28)
                {
                  objc_msgSend(v27, "height");
LABEL_44:
                  *(double *)buf = v32;
                  goto LABEL_45;
                }
                if (v28 == 1)
                {
                  if (objc_msgSend(v69, "hasTerrainElevation"))
                  {
                    objc_msgSend(v27, "topHeight");
                    v30 = v29;
                    objc_msgSend(v27, "terrainElevation");
                    v32 = v30 - v31;
                  }
                  else
                  {
                    objc_msgSend(v27, "topHeight");
                  }
                  goto LABEL_44;
                }
LABEL_45:
                for (k = 0; (unint64_t)objc_msgSend(v27, "coordinateCount") > k; ++k)
                {
                  *(_QWORD *)&v79 = 0;
                  v88 = 0;
                  v94 = 0;
                  sub_10011E780((double *)(a1 + 56), (double *)&v88, (double *)&v94, (double *)&v79, *a3, *a4, 0.0, *((double *)objc_msgSend(v27, "coordinates") + 2 * k), *((double *)objc_msgSend(v27, "coordinates") + 2 * k + 1), 0.0);
                  v34 = v94;
                  v35 = v88;
                  v36 = v105;
                  if ((unint64_t)v105 >= *((_QWORD *)&v105 + 1))
                  {
                    v38 = (uint64_t)(v105 - *(_QWORD *)&buf[8]) >> 4;
                    v39 = v38 + 1;
                    if ((unint64_t)(v38 + 1) >> 60)
                      sub_100259694();
                    v40 = *((_QWORD *)&v105 + 1) - *(_QWORD *)&buf[8];
                    if ((uint64_t)(*((_QWORD *)&v105 + 1) - *(_QWORD *)&buf[8]) >> 3 > v39)
                      v39 = v40 >> 3;
                    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                      v41 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v41 = v39;
                    v43 = (char *)sub_10028E224((uint64_t)&v105 + 8, v41);
                    v44 = &v43[16 * v38];
                    *(_QWORD *)v44 = v34;
                    *((_QWORD *)v44 + 1) = v35;
                    v45 = (_QWORD *)v105;
                    v46 = *(_QWORD **)&buf[8];
                    v47 = v44;
                    while (v45 != v46)
                    {
                      v48 = *(v45 - 2);
                      v45 -= 2;
                      *((_QWORD *)v47 - 2) = v48;
                      v47 -= 16;
                      *((_QWORD *)v47 + 1) = v45[1];
                    }
                    v37 = v44 + 16;
                    *(_QWORD *)&buf[8] = v47;
                    *(_QWORD *)&v105 = v44 + 16;
                    *((_QWORD *)&v105 + 1) = &v43[16 * v42];
                    if (v46)
                      operator delete(v46);
                  }
                  else
                  {
                    *(_QWORD *)v105 = v94;
                    *(_QWORD *)(v36 + 8) = v35;
                    v37 = (_QWORD *)(v36 + 16);
                  }
                  *(_QWORD *)&v105 = v37;
                  v15 = a2;
                }
                sub_100DA4208((double **)&buf[8], (uint64_t)&v79);
                v106 = v79;
                v107 = v80;
                v49 = v15[1];
                if (v49 >= v15[2])
                {
                  v50 = sub_100CD0598(v15, (uint64_t)buf);
                }
                else
                {
                  *(_QWORD *)v49 = *(_QWORD *)buf;
                  *(_QWORD *)(v49 + 16) = 0;
                  *(_QWORD *)(v49 + 24) = 0;
                  *(_QWORD *)(v49 + 8) = 0;
                  sub_100CD06E8((char *)(v49 + 8), *(_QWORD **)&buf[8], (_QWORD *)v105, (uint64_t)(v105 - *(_QWORD *)&buf[8]) >> 4);
                  *(_OWORD *)(v49 + 32) = v106;
                  *(_OWORD *)(v49 + 48) = v107;
                  v50 = v49 + 64;
                  v15[1] = v49 + 64;
                }
                v15[1] = v50;
                if (*(_QWORD *)&buf[8])
                {
                  *(_QWORD *)&v105 = *(_QWORD *)&buf[8];
                  operator delete(*(void **)&buf[8]);
                }
              }
              v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v70, v98, 16);
            }
            while (v68);
          }
        }
        v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v99, 16);
      }
      while (v64);
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 40);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10218C030);
    v51 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "CLMM,query failed (buildingsWithinDistance)", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      LOWORD(v79) = 0;
      LODWORD(v60) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,query failed (buildingsWithinDistance)", &v79, v60);
      v57 = (uint8_t *)v56;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoFeatureAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, const double &, const double &)", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
  }
  objc_autoreleasePoolPop(context);
  return HIDWORD(v60);
}

void sub_100E4D6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  unint64_t *v62;
  uint64_t v63;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  v62 = (unint64_t *)STACK[0x2D8];
  if ((unint64_t *)STACK[0x2D8] == &STACK[0x2C0])
  {
    v63 = 4;
    v62 = &STACK[0x2C0];
  }
  else
  {
    if (!v62)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_6:
  _Unwind_Resume(a1);
}

id sub_100E4D774(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(objc_msgSend(a2, "sections"), "count");
  if (result)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return result;
}

uint64_t sub_100E4D7B8(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;

  v8 = a4;
  v4 = *(_QWORD *)(a3 + 56);
  v6 = *(_QWORD *)(a3 + 64);
  v7 = v4;
  return sub_100E4CCB8(a1, a2, (double *)&v7, (double *)&v6, (uint64_t *)&v8);
}

void sub_100E4D7F0(uint64_t a1)
{
  sub_1010CDCEC(a1);
  operator delete();
}

void sub_100E4D814(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100E4D840(_QWORD *a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  void *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;

  if (a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10218C030);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v29 = objc_msgSend(a2, "code");
      v30 = 2114;
      v31 = objc_msgSend(a2, "domain");
      v32 = 2113;
      v33 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      v10 = qword_1022A00D8;
      v22 = 134349571;
      v23 = objc_msgSend(a2, "code");
      v24 = 2114;
      v25 = objc_msgSend(a2, "domain");
      v26 = 2113;
      v27 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v22, 32);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10218C030);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      v29 = v6;
      v30 = 1026;
      LODWORD(v31) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      v13 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
      v14 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v22 = 134349312;
      v23 = v13;
      v24 = 1026;
      LODWORD(v25) = v14;
      LODWORD(v21) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", &v22, v21);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      v8 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10218C030);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,clearing dispatchGroup when time-out has happened", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }

      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10218C030);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10218C030);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,dispatchGroup is unexpectedly nil", &v22, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
}

void sub_100E4DEB0()
{
  operator delete();
}

__n128 sub_100E4DEC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_10218C088;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_100E4DF0C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_10218C088;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100E4DF3C(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 2600), "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:", *(unsigned int *)(*(_QWORD *)(a1 + 8) + 2648), *(_QWORD *)(a1 + 40), *a2, *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
}

uint64_t sub_100E4DF60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E4DF9C()
{
}

void sub_100E4DFA8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  char *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10218C160);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: beginSeries", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218C160);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: beginSeries", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiServerResponseListener::beginSeries()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = *(char **)(a1 + 24);
  v3 = (_QWORD *)(a1 + 24);
  sub_100067A00((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
}

void sub_100E4E14C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CFAbsoluteTime Current;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  double v15;
  double v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  double v33;
  __int16 v34;
  char v35;
  unint64_t v36;
  int v37;
  CFAbsoluteTime v38;
  __int16 v39;
  int v40;
  _BYTE v41[24];
  uint8_t buf[4];
  _BYTE v43[24];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10218C160);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v43 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: endSeries, size, %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218C160);
    v29 = *(_QWORD *)(a1 + 32);
    v40 = 134217984;
    *(_QWORD *)v41 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: endSeries, size, %lu", &v40);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiServerResponseListener::endSeries()", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v4 = *(_QWORD **)(a1 + 16);
  v5 = (_QWORD *)(a1 + 24);
  if (v4 != (_QWORD *)(a1 + 24))
  {
    do
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218C160);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *((_DWORD *)v4 + 24);
        v8 = v4[10];
        v9 = v4[11];
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v43 = v7;
        *(_WORD *)&v43[4] = 2048;
        *(_QWORD *)&v43[6] = v8;
        *(_WORD *)&v43[14] = 2048;
        *(_QWORD *)&v43[16] = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10218C160);
        v20 = *((_DWORD *)v4 + 24);
        v21 = v4[10];
        v22 = v4[11];
        v40 = 67109632;
        *(_DWORD *)v41 = v20;
        *(_WORD *)&v41[4] = 2048;
        *(_QWORD *)&v41[6] = v21;
        *(_WORD *)&v41[14] = 2048;
        *(_QWORD *)&v41[16] = v22;
        LODWORD(v32) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf", &v40, v32, v33);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiServerResponseListener::endSeries()", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      if (*((int *)v4 + 24) >= 2)
      {
        Current = CFAbsoluteTimeGetCurrent();
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10218C160);
        v11 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v12 = v4[10];
          v13 = v4[11];
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)v43 = v12;
          *(_WORD *)&v43[8] = 2048;
          *(_QWORD *)&v43[10] = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILES: requestDownload, %.8f, %.8f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10218C160);
          v25 = v4[10];
          v26 = v4[11];
          v40 = 134218240;
          *(_QWORD *)v41 = v25;
          *(_WORD *)&v41[8] = 2048;
          *(_QWORD *)&v41[10] = v26;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILES: requestDownload, %.8f, %.8f", COERCE_DOUBLE(&v40), v32);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiServerResponseListener::endSeries()", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLWifiTilesManager"));
        v15 = *((double *)v4 + 10);
        v16 = *((double *)v4 + 11);
        v34 = 0;
        v35 = 0;
        v36 = 0xBFF0000000000000;
        v37 = 3;
        v38 = Current;
        v39 = 1;
        objc_msgSend(v14, "requestTileDownloadForLat:lon:details:", &v34, v15, v16);
      }
      v17 = (_QWORD *)v4[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v4[2];
          v19 = *v18 == (_QWORD)v4;
          v4 = v18;
        }
        while (!v19);
      }
      v4 = v18;
    }
    while (v18 != v5);
  }
  sub_100067A00(a1 + 16, *(char **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v5;
}

void sub_100E4E6B0(uint64_t a1, uint64_t *a2, char a3)
{
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  const char *v18;
  char *v19;
  _BYTE v20[12];
  char v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  unint64_t v25;
  __int16 v26;
  int v27;
  void *__p;
  char v29;
  _BYTE buf[20];
  char v31;

  sub_100E4DFA8(a1);
  if ((a3 & 1) == 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10218C180);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v7 = 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@WifiAps, als, %{public}lu, isNearby, %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10218C180);
      v17 = 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3);
      v24 = 134349312;
      v25 = v17;
      v26 = 1026;
      v27 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WifiAps, als, %{public}lu, isNearby, %{public}d", &v24, 18);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, BOOL)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v8 = *a2;
    v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        if (*(double *)(v8 + 20) >= 0.0)
        {
          sub_100FDAB9C((uint64_t)&v24, *(double *)(v8 + 4), *(double *)(v8 + 12));
          if (sub_1001C91DC((uint64_t)&v24))
          {
            v10 = sub_1001C8840(a1 + 16, (uint64_t)&v24);
            if ((_QWORD *)(a1 + 24) == v10)
            {
              *(_OWORD *)buf = *(_OWORD *)(v8 + 4);
              *(_DWORD *)&buf[16] = 1;
              sub_100E4EC68((uint64_t **)(a1 + 16), (uint64_t)&v24, (uint64_t)&v24, (__n128 *)buf);
            }
            else
            {
              ++*((_DWORD *)v10 + 24);
            }
          }
          else
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_10218C160);
            v11 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
            {
              sub_100BCC240(&v24, buf);
              v12 = buf;
              if (v31 < 0)
                v12 = *(_BYTE **)buf;
              *(_DWORD *)v20 = 136315138;
              *(_QWORD *)&v20[4] = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "TILE: macAddressResolved, invalid hash value, %s", v20, 0xCu);
              if (v31 < 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_10218C160);
              v13 = qword_1022A02D8;
              sub_100BCC240(&v24, v20);
              v14 = v20;
              if (v21 < 0)
                v14 = *(_BYTE **)v20;
              v22 = 136315138;
              v23 = v14;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 17, "TILE: macAddressResolved, invalid hash value, %s", (const char *)&v22);
              v16 = v15;
              if (v21 < 0)
                operator delete(*(void **)v20);
              sub_100512490("Generic", 1, 0, 0, "virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, BOOL)", "%s\n", v16);
              if (v16 != buf)
                free(v16);
            }
          }
          if (v29 < 0)
            operator delete(__p);
        }
        v8 += 184;
      }
      while (v8 != v9);
    }
    sub_100E4E14C(a1);
  }
}

void sub_100E4EB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100E4EB68(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 24);
  sub_100067A00(a1 + 16, *(char **)(a1 + 24));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t sub_100E4EB98(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218C118;
  sub_100067A00(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_100E4EBCC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10218C118;
  sub_100067A00(a1 + 16, *(char **)(a1 + 24));
  operator delete();
}

void sub_100E4EC10(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100E4EC3C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t *sub_100E4EC68(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)sub_1000C17A4((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    sub_100E4ECEC((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000145B0(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

__n128 sub_100E4ECEC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __n128 result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  v9 = v8 + 56;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100115CE4(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 40);
  }
  result = *a3;
  *((__n128 *)v8 + 5) = *a3;
  *((_QWORD *)v8 + 12) = a3[1].n128_u64[0];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100E4ED94(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1008B9C00(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100E4EDB0(_QWORD *a1, char *a2, void *a3)
{
  NSString *v6;
  NSArray *v7;
  NSFileManager *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint32_t v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  char *v34;
  uint8_t v35[4];
  int v36;
  __int16 v37;
  const char *v38;
  _QWORD v39[2];

  if (!a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C340);
    v22 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v35 = 68289026;
      v36 = 0;
      v37 = 2082;
      v38 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempting to create service location provider with NULL service name\"}", v35, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C340);
    }
    v23 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      goto LABEL_28;
    *(_DWORD *)v35 = 68289026;
    v36 = 0;
    v37 = 2082;
    v38 = "";
    v17 = "Attempting to create service location provider with NULL service name";
    v18 = "{\"msg%{public}.0s\":\"Attempting to create service location provider with NULL service name\"}";
    v19 = v35;
    v20 = v23;
    v21 = 18;
    goto LABEL_27;
  }
  v39[0] = CFSTR("LocationBundles/");
  v39[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2);
  v6 = -[NSString stringByAppendingPathExtension:](+[NSString pathWithComponents:](NSString, "pathWithComponents:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v39, 2)), "stringByAppendingPathExtension:", CFSTR("bundle"));
  v7 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  v8 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v9 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
  if (!v9)
  {
LABEL_13:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C340);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2082;
      v34 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to resolve bundle path for service\", \"serviceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C340);
    }
    v16 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      goto LABEL_28;
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2082;
    v34 = a2;
    v17 = "Unable to resolve bundle path for service";
    v18 = "{\"msg%{public}.0s\":\"Unable to resolve bundle path for service\", \"serviceName\":%{public, location:escape_only}s}";
    v19 = buf;
    v20 = v16;
    v21 = 28;
LABEL_27:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v17, v18, v19, v21);
LABEL_28:
    v14 = 0;
    goto LABEL_29;
  }
  v10 = v9;
  v11 = *(_QWORD *)v26;
LABEL_4:
  v12 = 0;
  while (1)
  {
    if (*(_QWORD *)v26 != v11)
      objc_enumerationMutation(v7);
    v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v12);
    if (-[NSFileManager fileExistsAtPath:](v8, "fileExistsAtPath:", objc_msgSend(v13, "stringByAppendingPathComponent:", v6)))
    {
      break;
    }
    if (v10 == (id)++v12)
    {
      v10 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
      if (v10)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  if (!v13)
    goto LABEL_13;
  v14 = objc_msgSend(v13, "stringByAppendingPathComponent:", v6);
LABEL_29:
  sub_100BCCD58((uint64_t)a1, a2, a3, 0, (unint64_t)v14);
  *a1 = &off_10218C1B0;
  return a1;
}

void sub_100E4F1B8()
{
  operator new();
}

void sub_100E4F238()
{
  operator delete();
}

void sub_100E4F260(uint64_t a1)
{
  sub_100BCD638(a1);
  operator delete();
}

void sub_100E4F284(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_100E4F308@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t (**v21)();
  _QWORD v22[2];
  uint64_t (***v23)();
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v24[0] = off_10218C5F8;
  v24[1] = sub_100E4F764;
  v24[2] = 0;
  v25 = v24;
  sub_1015A2E04(v26, "kCLConnectionMessageTranscriptSession");
  sub_100BB2D88((uint64_t)&v27, (uint64_t)v24);
  v21 = off_10218C5F8;
  v22[0] = sub_100E4FC28;
  v22[1] = 0;
  v23 = &v21;
  sub_1015A2E04(v28, "kCLConnectionMessageTranscriptFetch");
  sub_100BB2D88((uint64_t)&v29, (uint64_t)&v21);
  v19[0] = off_10218C5F8;
  v19[1] = sub_100E504F8;
  v19[2] = 0;
  v20 = v19;
  sub_1015A2E04(v30, "kCLConnectionMessageRequestHistoricalLocations");
  sub_100BB2D88((uint64_t)&v31, (uint64_t)v19);
  v17[0] = off_10218C5F8;
  v17[1] = sub_100E51238;
  v17[2] = 0;
  v18 = v17;
  sub_1015A2E04(v32, "kCLConnectionMessageWillPromptForTranscriptSession");
  sub_100BB2D88((uint64_t)&v33, (uint64_t)v17);
  v15[0] = off_10218C5F8;
  v15[1] = sub_100E516F0;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v34, "kCLConnectionMessageIsConsideredInRemoteArea");
  sub_100BB2D88((uint64_t)&v35, (uint64_t)v15);
  sub_100E57114(a1, (unsigned __int8 *)v26, 5);
  v2 = 35;
  do
  {
    v3 = (_QWORD *)v26[v2 - 1];
    if (&v24[v2] == v3)
    {
      v3 = &v24[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v23)[v2]) < 0)
      operator delete((void *)v22[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v16;
  if (v16 == v15)
  {
    v6 = 4;
    v5 = v15;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v16)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v18)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v20)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v23;
  if (v23 == &v21)
  {
    v12 = 4;
    v11 = &v21;
LABEL_29:
    (*v11)[v12]();
  }
  else if (v23)
  {
    v12 = 5;
    goto LABEL_29;
  }
  result = v25;
  if (v25 == v24)
  {
    v14 = 4;
    result = v24;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  else if (v25)
  {
    v14 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  return result;
}

void sub_100E4F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29)
{
  uint64_t i;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  for (i = 224; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a29 + i));
  v31 = a12;
  if (a12 == &a9)
  {
    v32 = 4;
    v31 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_8:
  v33 = a16;
  if (a16 == &a13)
  {
    v34 = 4;
    v33 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_13:
  v35 = a20;
  if (a20 == &a17)
  {
    v36 = 4;
    v35 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_18:
  v37 = a24;
  if (a24 == &a21)
  {
    v38 = 4;
    v37 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_23;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_23:
  v39 = a28;
  if (a28 == &a25)
  {
    v40 = 4;
    v39 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_28;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_28:
  _Unwind_Resume(a1);
}

void sub_100E4F764(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  const __CFDictionary *Dictionary;
  CLConnectionMessage *v6;
  char isEntitled;
  char v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint8_t v22[16];
  uint8_t buf[8];
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v22, Dictionary);
  v21 = 0;
  if ((sub_1001E4874((uint64_t)v22, "kCLConnectionMessageSubscribeKey", &v21) & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v9 = qword_1022A01C8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
    v12 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2114;
    v27 = v12;
    v11 = "{\"msg%{public}.0s\":\"#transcriptSession couldn't get value for kCLConnectionMessageSubscribeKey key for clie"
          "nt\", \"client\":%{public, location:escape_only}@}";
    goto LABEL_15;
  }
  v6 = *a2;
  sub_1015A2E04(buf, "com.apple.locationd.transcript-session");
  isEntitled = CLConnectionMessage::isEntitled(v6, buf);
  v8 = isEntitled;
  if (SBYTE3(v27) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0)
      goto LABEL_4;
LABEL_17:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v13 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to start/stop transcript session\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    v15 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v16 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning entitlement is required to start/stop transcript session", "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to start/stop transcript session\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  if ((isEntitled & 1) == 0)
    goto LABEL_17;
LABEL_4:
  if (v21 && (sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")) || *(_BYTE *)(a1 + 255)))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v9 = qword_1022A01C8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
    v10 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2114;
    v27 = v10;
    v11 = "{\"msg%{public}.0s\":\"#transcriptSession has already started or requested to start.\", \"client\":%{public, l"
          "ocation:escape_only}@}";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0x1Cu);
LABEL_24:
    CLConnectionMessage::sendReply(*a2);
    goto LABEL_25;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1 + 64);
    v19 = *(unsigned __int8 *)(a1 + 256);
    v20 = *(unsigned __int8 *)(a1 + 250);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2114;
    v27 = v18;
    v28 = 1026;
    v29 = v19;
    v30 = 1026;
    v31 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession handleMessageTranscriptSession is called\", \"client\":%{public, location:escape_only}@, \"fShouldPrompt\":%{public}hhd, \"fNeedSession\":%{public}hhd}", buf, 0x28u);
  }
  sub_1001E4874((uint64_t)v22, "kCLConnectionMessageTranscriptShouldPromptKey", (BOOL *)(a1 + 256));
  *(_BYTE *)(a1 + 250) = v21;
  sub_100349198((_QWORD *)(a1 + 304), (uint64_t *)a2);
  sub_100E51E80(a1);
LABEL_25:
  sub_10011A5A8(v22);

}

void sub_100E4FBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
    operator delete(__p);
  sub_10011A5A8(&a11);

  _Unwind_Resume(a1);
}

void sub_100E4FC28(uint64_t a1, uint64_t a2)
{
  id v4;
  void *Dictionary;
  double v6;
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSDictionary *v25;
  NSDate *v26;
  int v27;
  double v28;
  std::__shared_weak_count *v29;
  CLConnectionMessage *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  _QWORD v40[6];
  std::__shared_weak_count *v41;
  NSErrorUserInfoKey v42;
  const __CFString *v43;
  NSErrorUserInfoKey v44;
  const __CFString *v45;
  NSErrorUserInfoKey v46;
  const __CFString *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate")))
  {
    if ((objc_msgSend(*(id *)(a1 + 136), "isNonProvisionallyAuthorizedForServiceTypeMask:", 4112) & 1) != 0)
    {
      Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
      objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchRadiusKey")), "doubleValue");
      v7 = v6;
      v8 = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchSampleCountKey")), "intValue");
      if (objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLatitudeKey"))
        && objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLongitudeKey")))
      {
        objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLatitudeKey")), "doubleValue");
        v10 = v9;
        objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchCenterLongitudeKey")), "doubleValue");
        v12 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", sub_100E52958((_QWORD *)a1), v10, v11, -1.0, v7, -1.0);
      }
      else
      {
        v12 = 0;
      }
      if (v7 < 0.0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        v21 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
        {
          v22 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 68289282;
          v49 = 0;
          v50 = 2082;
          v51 = "";
          v52 = 2114;
          v53 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning Radius must be 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        }
        v23 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v24 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 68289282;
          v49 = 0;
          v50 = 2082;
          v51 = "";
          v52 = 2114;
          v53 = v24;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning Radius must be 0 or greater", "{\"msg%{public}.0s\":\"#transcriptSession #warning Radius must be 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_100349198((_QWORD *)(a1 + 288), (uint64_t *)a2);
        v44 = NSLocalizedDescriptionKey;
        v45 = CFSTR("radius must be 0 or greater");
        v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
LABEL_54:
        sub_100E529A0(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, v25));
        goto LABEL_55;
      }
      if ((v8 & 0x80000000) != 0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        v36 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
        {
          v37 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 68289282;
          v49 = 0;
          v50 = 2082;
          v51 = "";
          v52 = 2114;
          v53 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning sampleCount must 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
        }
        v38 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v39 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 68289282;
          v49 = 0;
          v50 = 2082;
          v51 = "";
          v52 = 2114;
          v53 = v39;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning sampleCount must 0 or greater", "{\"msg%{public}.0s\":\"#transcriptSession #warning sampleCount must 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_100349198((_QWORD *)(a1 + 288), (uint64_t *)a2);
        v42 = NSLocalizedDescriptionKey;
        v43 = CFSTR("sampleCount must 0 or greater");
        v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
        goto LABEL_54;
      }
      v26 = sub_100E52958((_QWORD *)a1);
      if (v8 - 3001 >= 0xFFFFF448)
        v27 = v8;
      else
        v27 = 3000;
      v28 = *(double *)(a1 + 344);
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3321888768;
      v40[2] = sub_100E5308C;
      v40[3] = &unk_10218C3B8;
      v30 = *(CLConnectionMessage **)a2;
      v29 = *(std::__shared_weak_count **)(a2 + 8);
      v40[4] = a1;
      v40[5] = v30;
      v41 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
      sub_100E52C50(a1, (const __CFDate *)v26, v27, (uint64_t)v12, (uint64_t)v40, v28);
      v33 = v41;
      if (v41)
      {
        v34 = (unint64_t *)&v41->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        v49 = 0;
        v50 = 2082;
        v51 = "";
        v52 = 2114;
        v53 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession Error: attempting to fetch transcript locations -- CommencementDate is set but client is not authorized for precise location\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v19 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v20 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        v49 = 0;
        v50 = 2082;
        v51 = "";
        v52 = 2114;
        v53 = v20;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Error: attempting to fetch transcript locations -- CommencementDate is set but client is not authorized for precise location", "{\"msg%{public}.0s\":\"#transcriptSession Error: attempting to fetch transcript locations -- CommencementDate is set but client is not authorized for precise location\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      sub_100349198((_QWORD *)(a1 + 288), (uint64_t *)a2);
      sub_100E529A0(a1, 0);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2114;
      v53 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a transcript session has not yet started\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    v15 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v16 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2114;
      v53 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession a transcript session has not yet started", "{\"msg%{public}.0s\":\"#transcriptSession a transcript session has not yet started\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*(_QWORD *)(a1 + 288))
    {
      v46 = NSLocalizedDescriptionKey;
      v47 = CFSTR("Unauthorized for receiving historical locations.");
      sub_100E529A0(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 0, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1)));
    }
    sub_100349198((_QWORD *)(a1 + 288), (uint64_t *)a2);
  }
LABEL_55:

}

void sub_100E504AC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

void sub_100E504F8(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  void *Dictionary;
  const __CFString *v6;
  void *v7;
  CFBundleRef v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CLConnectionMessage *v15;
  char isEntitled;
  NSError *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  NSDictionary *v24;
  NSDictionary *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint32_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  NSErrorUserInfoKey v54;
  const __CFString *v55;
  NSErrorUserInfoKey v56;
  const __CFString *v57;
  NSErrorUserInfoKey v58;
  const __CFString *v59;
  NSErrorUserInfoKey v60;
  const __CFString *v61;
  NSErrorUserInfoKey v62;
  const __CFString *v63;
  NSErrorUserInfoKey v64;
  const __CFString *v65;
  uint8_t buf[48];
  void *v67[2];
  void *v68[2];
  __int128 v69;
  void *v70[2];
  __int128 v71;
  void *v72[2];
  void *__p[2];
  __int128 v74;
  uint64_t v75;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v6 = (const __CFString *)objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeIdentifierKey"));
  *(_DWORD *)(a1 + 336) = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTranscriptFetchSampleCountKey")), "intValue");
  sub_100349198((_QWORD *)(a1 + 288), (uint64_t *)a2);
  if (!v6)
    goto LABEL_61;
  v7 = *(void **)(a1 + 64);
  if (v7)
  {
    objc_msgSend(v7, "clientName");
  }
  else
  {
    v75 = 0;
    *(_OWORD *)__p = 0u;
    v74 = 0u;
    v71 = 0u;
    *(_OWORD *)v72 = 0u;
    v69 = 0u;
    *(_OWORD *)v70 = 0u;
    *(_OWORD *)v67 = 0u;
    *(_OWORD *)v68 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  v8 = sub_101147E94((uint64_t)buf);
  if (SHIBYTE(v74) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v72[0]);
  if (SHIBYTE(v71) < 0)
    operator delete(v70[1]);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[1]);
  if (SHIBYTE(v68[0]) < 0)
    operator delete(v67[0]);
  if ((char)buf[47] < 0)
    operator delete(*(void **)&buf[24]);
  if (((char)buf[23] & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_19;
LABEL_28:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v19 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#transcriptSession couldn't get bundle for client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    v20 = qword_1022A01C8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
      goto LABEL_95;
    v21 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v21;
    v22 = "#transcriptSession couldn't get bundle for client";
    v23 = "{\"msg%{public}.0s\":\"#transcriptSession couldn't get bundle for client\", \"client\":%{public, location:escape_only}@}";
LABEL_93:
    v36 = v20;
    v37 = 28;
    goto LABEL_94;
  }
  operator delete(*(void **)buf);
  if (!v8)
    goto LABEL_28;
LABEL_19:
  CFAutorelease(v8);
  v9 = -[__CFDictionary objectForKeyedSubscript:](CFBundleGetInfoDictionary(v8), "objectForKeyedSubscript:", CFSTR("NSLocationWildernessSafetyUsageDescriptionDictionary"));
  v11 = objc_msgSend(v9, "objectForKeyedSubscript:", v6);
  if (v9)
  {
    v12 = objc_opt_class(NSDictionary, v10);
    if ((objc_opt_isKindOfClass(v9, v12) & 1) != 0)
    {
      if (!v11)
      {
        v60 = NSLocalizedDescriptionKey;
        v61 = CFSTR("The purposeKey provided isn't present in the app's Info.plist dictionary of temporary usage descriptions");
        v17 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
        goto LABEL_51;
      }
      v14 = objc_opt_class(NSString, v13);
      if ((objc_opt_isKindOfClass(v11, v14) & 1) != 0)
      {
        v15 = *a2;
        sub_1015A2E04(buf, "com.apple.developer.corelocation.wilderness-safety");
        isEntitled = CLConnectionMessage::isEntitled(v15, buf);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if ((isEntitled & 1) != 0)
        {
          v17 = 0;
LABEL_50:
          *(_QWORD *)(a1 + 328) = v11;
          goto LABEL_51;
        }
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
        v26 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
        {
          v27 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession will not request historical prompt because the client lacks the required API entitlement\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
        }
        v28 = qword_1022A01C8;
        if (os_signpost_enabled((os_log_t)qword_1022A01C8))
        {
          v29 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v29;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession will not request historical prompt because the client lacks the required API entitlement", "{\"msg%{public}.0s\":\"#transcriptSession will not request historical prompt because the client lacks the required API entitlement\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        v56 = NSLocalizedDescriptionKey;
        v57 = CFSTR("Lacks the required API entitlement");
        v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
      }
      else
      {
        v58 = NSLocalizedDescriptionKey;
        v59 = CFSTR("The purposeKey provided names an entry in Info.plist which isn't a string");
        v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1);
      }
      v17 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, v25);
      goto LABEL_50;
    }
    v62 = NSLocalizedDescriptionKey;
    v63 = CFSTR("Info.plist value for %@ key is not a dictionary");
    v24 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
  }
  else
  {
    v64 = NSLocalizedDescriptionKey;
    v65 = CFSTR("Info.plist is missing the NSLocationWildernessSafetyUsageDescriptionDictionary key");
    v24 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
  }
  v17 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, v24);
  if (v11)
    goto LABEL_50;
LABEL_51:
  v30 = sub_1001AC584();
  v31 = sub_1001AC5C4(v30, v8, v6, 1);
  if (v31)
    *(_QWORD *)(a1 + 328) = CFAutorelease(v31);
  if (!v17)
  {
LABEL_61:
    v38 = *(_DWORD *)(a1 + 336);
    if (v38 <= 0)
    {
      *(_DWORD *)(a1 + 336) = 3;
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
      v45 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MIN sample count\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
      }
      v41 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v47 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v47;
        v43 = "#transcriptSession sampleCount is clamping to MIN sample count";
        v44 = "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MIN sample count\", \"client\":%{publ"
              "ic, location:escape_only}@}";
        goto LABEL_77;
      }
    }
    else if (v38 >= 0xBB9)
    {
      *(_DWORD *)(a1 + 336) = 3000;
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
      v39 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v40 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MAX sample count\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
      }
      v41 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v42 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v42;
        v43 = "#transcriptSession sampleCount is clamping to MAX sample count";
        v44 = "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MAX sample count\", \"client\":%{publ"
              "ic, location:escape_only}@}";
LABEL_77:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v43, v44, buf, 0x1Cu);
      }
    }
    if ((objc_msgSend(*(id *)(a1 + 136), "isNonProvisionallyAuthorizedForServiceTypeMask:", 4112) & 1) != 0)
    {
      *(_BYTE *)(a1 + 252) = 1;
      sub_100E51E80(a1);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      v48 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made.\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
      }
      v20 = qword_1022A01D8;
      if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
        goto LABEL_95;
      v50 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v50;
      v22 = "#transcriptSession a request for historical locations has been made.";
      v23 = "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made.\", \"client\":%{"
            "public, location:escape_only}@}";
    }
    else
    {
      v54 = NSLocalizedDescriptionKey;
      v55 = CFSTR("App is not sufficiently authorized.");
      sub_100E529A0(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1)));
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
      v51 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
      {
        v52 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning request for historical was made but app is not authorized for precise locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
      }
      v20 = qword_1022A01C8;
      if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
        goto LABEL_95;
      v53 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v53;
      v22 = "#transcriptSession #warning request for historical was made but app is not authorized for precise locations";
      v23 = "{\"msg%{public}.0s\":\"#transcriptSession #warning request for historical was made but app is not authorized"
            " for precise locations\", \"client\":%{public, location:escape_only}@}";
    }
    goto LABEL_93;
  }
  sub_100E529A0(a1, (uint64_t)v17);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  v32 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
  {
    v33 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v33;
    *(_WORD *)&buf[28] = 2114;
    *(_QWORD *)&buf[30] = v17;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession app is not configured correctly for requesting historical locations\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
  v34 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v35 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v35;
    *(_WORD *)&buf[28] = 2114;
    *(_QWORD *)&buf[30] = v17;
    v22 = "#transcriptSession app is not configured correctly for requesting historical locations";
    v23 = "{\"msg%{public}.0s\":\"#transcriptSession app is not configured correctly for requesting historical locations\""
          ", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}";
    v36 = v34;
    v37 = 38;
LABEL_94:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v22, v23, buf, v37);
  }
LABEL_95:

}

