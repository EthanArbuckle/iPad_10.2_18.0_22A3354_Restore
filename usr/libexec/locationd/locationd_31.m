uint64_t sub_101353BF8(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021B06B0;
  *(_QWORD *)(a1 + 72) = off_1021B0758;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B06B0;
  *(_QWORD *)(a1 + 72) = off_1021B0758;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_101353FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_10213DEB0;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_101354044()
{
  JUMPOUT(0x101354024);
}

_QWORD *sub_10135404C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B0758;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B06B0;
  a1[33] = off_10213DEB0;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1013540C8(_QWORD *a1)
{
  *a1 = off_1021B0538;
  a1[9] = off_1021B05F0;
  sub_10135410C((uint64_t)a1, 0, 0);
  return sub_10135404C(a1);
}

void sub_10135410C(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 496) = a2;
    v6 = *(const void **)(a1 + 504);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 504) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_10194E344();
    sub_101354180(v7);
  }
}

_QWORD *sub_101354184(uint64_t a1)
{
  return sub_1013540C8((_QWORD *)(a1 - 72));
}

void sub_10135418C(_QWORD *a1)
{
  sub_1013540C8(a1);
  operator delete();
}

void sub_1013541B0(uint64_t a1)
{
  sub_1013540C8((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1013541D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  sqlite3_stmt *v6;
  CFAbsoluteTime Current;
  uint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  __int16 v17;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v16[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v17 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_100087AF4((_QWORD *)(a1 + 384), v16);
    v6 = (sqlite3_stmt *)sub_100026CC8(v16[0]);
    Current = CFAbsoluteTimeGetCurrent();
    if (sub_1000890C4(v6, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = (sqlite3_stmt *)sub_100026CC8(v16[0]);
      sub_10023C9B0(v8, v9);
      v10 = *(_QWORD *)(a1 + 80);
      if (*(uint64_t *)(v10 + 88) <= 0)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = *(_QWORD *)(v10 + 88);
      sub_100053048(v10, v11);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      *(_DWORD *)(a1 + 132) = v12;
      v13 = v12;
    }
    else
    {
      v13 = -1;
    }
    v14 = v16[0];
    v16[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v13 = -1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v13;
}

void sub_101354308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101354344(uint64_t a1, uint64_t a2)
{
  return sub_1013541D8(a1 - 72, a2);
}

uint64_t sub_10135434C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31[3];
  __int16 v32;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v31[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v32 = 256;
  if (sub_10008950C(v6))
  {
    sub_100087AF4((_QWORD *)(a1 + 352), v31);
    while (!sub_101354534(v31, (uint64_t)&v26))
    {
      v8 = v27;
      v7 = v28;
      v9 = v29;
      v10 = v30 != 0;
      v11 = (char *)a2[1];
      v12 = (char *)a2[2];
      if (v11 >= v12)
      {
        v14 = (v11 - (_BYTE *)*a2) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          sub_100259694();
        v16 = v12 - (_BYTE *)*a2;
        if (v16 >> 4 > v15)
          v15 = v16 >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)sub_10025BA00((uint64_t)(a2 + 2), v17);
        else
          v18 = 0;
        v19 = &v18[32 * v14];
        *(_QWORD *)v19 = v8;
        *((_QWORD *)v19 + 1) = v7;
        *((_DWORD *)v19 + 4) = v9;
        v19[20] = v10;
        v21 = (char *)*a2;
        v20 = (char *)a2[1];
        v22 = v19;
        if (v20 != *a2)
        {
          do
          {
            v23 = *((_OWORD *)v20 - 1);
            *((_OWORD *)v22 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 32;
            v20 -= 32;
          }
          while (v20 != v21);
          v20 = (char *)*a2;
        }
        v13 = v19 + 32;
        *a2 = v22;
        a2[1] = v19 + 32;
        a2[2] = &v18[32 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v11 = v27;
        *((_QWORD *)v11 + 1) = v7;
        *((_DWORD *)v11 + 4) = v9;
        v13 = v11 + 32;
        v11[20] = v10;
      }
      a2[1] = v13;
    }
    v24 = v31[0];
    v31[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_1013544F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101354534(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  int v11;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v11 = sqlite3_column_int(v10, 4);
  result = 0;
  *(_DWORD *)(a2 + 28) = v11;
  return result;
}

uint64_t sub_1013545EC(uint64_t a1, void **a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  double Current;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  id v37[4];
  __int16 v38;

  v7 = a1 + 112;
  v6 = *(_QWORD *)(a1 + 112);
  v37[2] = (id)(a1 + 112);
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  v38 = 256;
  sub_100131938(v37, (uint64_t)"CLSedentaryAlarmRecorderDb.querySedentaryAlarmDataSince", 0);
  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    sub_100087AF4((_QWORD *)(a1 + 480), &v36);
    v8 = (sqlite3_stmt *)sub_100026CC8(v36);
    if (sub_1000890C4(v8, 1, a3))
    {
      v9 = (sqlite3_stmt *)sub_100026CC8(v36);
      Current = CFAbsoluteTimeGetCurrent();
      if (sub_1000890C4(v9, 2, Current))
      {
        while (!sub_101354534(&v36, (uint64_t)&v31))
        {
          v12 = v32;
          v11 = v33;
          v13 = v34;
          v14 = v35 != 0;
          v15 = (char *)a2[1];
          v16 = (char *)a2[2];
          if (v15 >= v16)
          {
            v18 = (v15 - (_BYTE *)*a2) >> 5;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 59)
              sub_100259694();
            v20 = v16 - (_BYTE *)*a2;
            if (v20 >> 4 > v19)
              v19 = v20 >> 4;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
              v21 = 0x7FFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
              v22 = (char *)sub_10025BA00((uint64_t)(a2 + 2), v21);
            else
              v22 = 0;
            v23 = &v22[32 * v18];
            *(_QWORD *)v23 = v12;
            *((_QWORD *)v23 + 1) = v11;
            *((_DWORD *)v23 + 4) = v13;
            v23[20] = v14;
            v25 = (char *)*a2;
            v24 = (char *)a2[1];
            v26 = v23;
            if (v24 != *a2)
            {
              do
              {
                v27 = *((_OWORD *)v24 - 1);
                *((_OWORD *)v26 - 2) = *((_OWORD *)v24 - 2);
                *((_OWORD *)v26 - 1) = v27;
                v26 -= 32;
                v24 -= 32;
              }
              while (v24 != v25);
              v24 = (char *)*a2;
            }
            v17 = v23 + 32;
            *a2 = v26;
            a2[1] = v23 + 32;
            a2[2] = &v22[32 * v21];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *(_QWORD *)v15 = v32;
            *((_QWORD *)v15 + 1) = v11;
            *((_DWORD *)v15 + 4) = v13;
            v17 = v15 + 32;
            v15[20] = v14;
          }
          a2[1] = v17;
        }
      }
    }
    v29 = v36;
    v36 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v28 = 100;
  }
  else
  {
    v28 = 109;
  }
  sub_100131740(v37);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  return v28;
}

void sub_1013547F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  id v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, id);
  v9 = va_arg(va1, _QWORD);
  sub_100131740((id *)va);
  sub_10187E514((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10135484C(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 336), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_1013548DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101354904(uint64_t a1)
{
  return sub_10135484C(a1 - 72);
}

uint64_t sub_10135490C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100634364(*(_QWORD *)(a1 + 80), "SedentaryAlarmHistory", (const char **)&qword_10230E408, (const std::string::value_type **)&qword_10230E528, 0);
    *(_QWORD *)(a1 + 336) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM SedentaryAlarmHistory");
    *(_QWORD *)(a1 + 344) = v3;
    *(_QWORD *)(a1 + 352) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM SedentaryAlarmHistory ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 360) = v4;
    *(_QWORD *)(a1 + 384) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM SedentaryAlarmHistory WHERE startTime < ?");
    *(_QWORD *)(a1 + 392) = v5;
    *(_QWORD *)(a1 + 400) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM SedentaryAlarmHistory WHERE startTime > ?");
    *(_QWORD *)(a1 + 408) = v6;
    *(_QWORD *)(a1 + 416) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM SedentaryAlarmHistory");
    *(_QWORD *)(a1 + 424) = v7;
    *(_QWORD *)(a1 + 432) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO SedentaryAlarmHistory (startTime, firedTime, alarmType, didWake) VALUES (?, ?, ?, ?)");
    *(_QWORD *)(a1 + 440) = v8;
    *(_QWORD *)(a1 + 464) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM SedentaryAlarmHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 472) = v9;
    *(_QWORD *)(a1 + 480) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM SedentaryAlarmHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 488) = v10;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    *(_DWORD *)(a1 + 132) = result;
  }
  return result;
}

uint64_t sub_101354A0C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 416), &v7);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v7);
    sub_10023C9B0(v3, v4);
    v5 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = *(_QWORD *)(v5 + 88);
    sub_100053048(v5, v6);
    *(_DWORD *)(a1 + 132) = 0;
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101354A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101354AB8(uint64_t a1)
{
  return sub_101354A0C(a1 - 72);
}

uint64_t sub_101354AC0(uint64_t a1, double *a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
    sub_100087AF4((_QWORD *)(a1 + 400), &v14);
    v5 = (sqlite3_stmt *)sub_100026CC8(v14);
    if (sub_1000890C4(v5, 1, *a2))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v14);
      sub_10023C9B0(v6, v7);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v8 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to delete records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v13 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm, Failed to delete records", &v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::deleteRecordsAfterInsertUL(const CLSedentaryAlarmData &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    v9 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v9 + 88) <= 0)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = *(_QWORD *)(v9 + 88);
    sub_100053048(v9, v10);
    result = v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101354CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101354D2C(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v6;
  double Current;
  uint64_t v8;
  sqlite3_stmt *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if (a2 < 0.0 && (_DWORD)result != 0)
  {
    sub_100087AF4((_QWORD *)(a1 + 400), &v19);
    v6 = (sqlite3_stmt *)sub_100026CC8(v19);
    Current = CFAbsoluteTimeGetCurrent();
    if (sub_1000890C4(v6, 1, Current))
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = (sqlite3_stmt *)sub_100026CC8(v19);
      sub_10023C9B0(v8, v9);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning SedentaryAlarm, Time rolled back, deleting records in the future", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v18 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning SedentaryAlarm, Time rolled back, deleting records in the future", &v18, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSedentaryAlarmRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      v11 = *(_QWORD *)(a1 + 80);
      if (*(uint64_t *)(v11 + 88) <= 0)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = *(_QWORD *)(v11 + 88);
      sub_100053048(v11, v12);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v13 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to shift records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v18 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm, Failed to shift records", &v18, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    result = v19;
    v19 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101355084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1013550B8(uint64_t a1, __int128 *a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  __int16 v16;
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  uint8_t buf[8];

  if (sub_10008950C(a1 + 72))
  {
    sub_100087AF4((_QWORD *)(a1 + 432), buf);
    v4 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
    if (sub_1000890C4(v4, 1, *(double *)a2))
    {
      v5 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
      if (sub_1000890C4(v5, 2, *((double *)a2 + 1)))
      {
        v6 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
        if (sub_1000CD75C(v6, 3, *((_DWORD *)a2 + 4)))
        {
          v7 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
          if (sub_1000CD75C(v7, 4, *((unsigned __int8 *)a2 + 20)))
          {
            v8 = *(_QWORD *)(a1 + 80);
            v9 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
            sub_10023C9B0(v8, v9);
            ++*(_DWORD *)(a1 + 132);
            v10 = *(void **)(a1 + 496);
            if (v10)
            {
              if (*(_QWORD *)(a1 + 504))
              {
                v11 = a2[1];
                v18 = *a2;
                v19 = v11;
                v17[0] = _NSConcreteStackBlock;
                v17[1] = 3221225472;
                v17[2] = sub_101355380;
                v17[3] = &unk_1021382B0;
                v17[4] = a1;
                objc_msgSend(v10, "async:", v17);
              }
            }
          }
        }
      }
    }
    v12 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0680);
    v13 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to insert record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v16 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm, Failed to insert record", &v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::insertRecordUL(const CLSedentaryAlarmData &, BOOL)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_101355350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101355380(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v4[2];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504);
  v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v4);
}

uint64_t sub_1013553BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE v8[8];
  __int128 v9;
  int v10;
  int v11;
  uint64_t v12;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 464), &v12);
  v4 = sub_101354534(&v12, (uint64_t)v8);
  if (!(_DWORD)v4)
  {
    *(_OWORD *)a2 = v9;
    v5 = v11;
    *(_DWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 20) = v5 != 0;
  }
  v6 = v12;
  v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_101355450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sub_101355474(uint64_t a1, unint64_t *a2)
{
  int v4;
  __n128 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  double v10[4];
  uint8_t buf[1640];

  v4 = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)a1 + 104))(a1, v10);
  if (v4 == 1)
    goto LABEL_5;
  if (!v4)
  {
    v5.n128_u64[0] = *a2;
    if (*(double *)a2 < v10[0] + -2.56)
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v5.n128_f64[0] - v10[0]);
LABEL_5:
    (*(void (**)(uint64_t, unint64_t *, _QWORD, __n128))(*(_QWORD *)a1 + 120))(a1, a2, 0, v5);
    return;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B0680);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0680);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm, Failed to insert record due to failure from reading the most recent entry.", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::sanitizeAndStoreRecordUL(const CLSedentaryAlarmData &, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

uint64_t sub_101355668(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10194E4A4(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_10135596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1013559D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B0680);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0680);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSedentaryAlarmData>::setDatabaseAccessible() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_101355FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101355FD0(uint64_t a1)
{
  return sub_1013559D4(a1 - 72);
}

void sub_101355FD8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101356004(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10194E60C(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1013562C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

id *sub_10135632C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  double v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  double v32[4];
  id v33[2];
  int v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  double v41;

  v33[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v33[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v33);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)a1 + 104))(a1, v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        LOWORD(v34) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v34, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)a2;
    v8 = v32[0];
    v9 = *(double *)a2 - v32[0];
    if (v9 < 0.0)
      v9 = -v9;
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(double *)a2;
        *(_DWORD *)buf = 134349312;
        v39 = v32[0];
        v40 = 2050;
        v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v23 = *(double *)a2;
        v34 = 134349312;
        v35 = v32[0];
        v36 = 2050;
        v37 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v34, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)a2;
      v8 = v32[0];
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)a2;
          *(_DWORD *)buf = 134217984;
          v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B0680);
          v26 = *(double *)a2;
          v34 = 134217984;
          v35 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v34));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v39 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B0680);
        v34 = 134217984;
        v35 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v34));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, double *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v33);
}

void sub_101356A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101356A94(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10194E774(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101356CF4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194E8DC(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_101356F2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194EA44(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101357154()
{
  qword_10230E408 = (uint64_t)"id";
  dword_10230E410 = 1;
  word_10230E414 = 1;
  byte_10230E418 = 0;
  byte_10230E430 = 0;
  qword_10230E438 = (uint64_t)"startTime";
  dword_10230E440 = 2;
  word_10230E444 = 0;
  byte_10230E448 = 0;
  byte_10230E460 = 0;
  qword_10230E468 = (uint64_t)"firedTime";
  dword_10230E470 = 2;
  word_10230E474 = 0;
  byte_10230E478 = 0;
  byte_10230E490 = 0;
  qword_10230E498 = (uint64_t)"alarmType";
  dword_10230E4A0 = 1;
  word_10230E4A4 = 0;
  byte_10230E4A8 = 0;
  byte_10230E4C0 = 0;
  qword_10230E4C8 = (uint64_t)"didWake";
  dword_10230E4D0 = 1;
  word_10230E4D4 = 0;
  byte_10230E4D8 = 0;
  byte_10230E4F0 = 0;
  qword_10230E4F8 = 0;
  dword_10230E500 = 5;
  word_10230E504 = 0;
  byte_10230E508 = 0;
  byte_10230E520 = 0;
  qword_10230E528 = (uint64_t)"startTime";
  unk_10230E530 = 0;
}

uint64_t sub_101357218()
{
  if ((sub_10135723C() & 1) != 0)
    return 1;
  else
    return sub_101357468();
}

uint64_t sub_10135723C()
{
  unsigned int v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  sub_1001E4804(buf);
  LOBYTE(v9[0]) = 0;
  v0 = sub_1001E4874(*(uint64_t *)buf, "EnableTrackRunProtoToOsLog", (BOOL *)v9);
  if (LOBYTE(v9[0]))
    v1 = v0;
  else
    v1 = 0;
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B07D0);
  v5 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TrackRun: EnableTrackRunProtoToOsLog,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B07D0);
    v9[0] = 67240192;
    v9[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun: EnableTrackRunProtoToOsLog,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTrackRunSerializer::isOsLogEnabled()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v1;
}

void sub_10135744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101357468()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  sub_100197040();
  v1 = sub_10075D288();
  LOBYTE(v10[0]) = 0;
  if (sub_1001E4874(v0, "EnableTrackRunRecorder", (BOOL *)v10))
    v2 = LOBYTE(v10[0]) != 0;
  else
    v2 = v1;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B07D0);
  v6 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TrackRun: EnableTrackRunRecorder,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B07D0);
    v10[0] = 67240192;
    v10[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun: EnableTrackRunRecorder,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTrackRunSerializer::isDiskEnabled()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v2;
}

void sub_101357690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013576AC@<X0>(std::string *a1@<X8>)
{
  std::string *v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const std::string::value_type *v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t result;
  const char *v16;
  uint8_t *v17;
  BOOL v18[16];
  uint8_t buf[8];
  std::__shared_weak_count *v20;

  v2 = (std::string *)sub_1004886A8((uint64_t)a1);
  std::string::assign(v2, "trackrun");
  sub_1001E4804(buf);
  v18[0] = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v18);
  if (v18[0])
    v4 = v3;
  else
    v4 = 0;
  v5 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
    v8 = "/var/mobile/Library/Logs/CrashReporter/com.apple.locationd";
  else
    v8 = "/var/mobile/Library/Logs/locationd";
  std::string::assign(a1 + 2, v8);
  std::string::assign(a1 + 3, "trackrun");
  sub_1001E4804(buf);
  v18[0] = 0;
  v9 = sub_1001E4874(*(uint64_t *)buf, "EnableLargeTrackRunLogs", v18);
  if (v18[0])
    v10 = v9;
  else
    v10 = 0;
  v11 = v20;
  if (!v20)
    goto LABEL_19;
  v12 = (unint64_t *)&v20->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      goto LABEL_26;
  }
  else
  {
LABEL_19:
    if (!v10)
      goto LABEL_26;
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B07D0);
  v14 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "EnableLargeTrackRunLogs is set", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B07D0);
    *(_WORD *)v18 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "EnableLargeTrackRunLogs is set", v18, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLTrackRunSerializer::generateConfig()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  a1[4].__r_.__value_.__l.__size_ *= 16;
LABEL_26:
  a1[4].__r_.__value_.__s.__data_[21] = sub_10135723C();
  result = sub_101357468();
  a1[4].__r_.__value_.__s.__data_[22] = result;
  a1[4].__r_.__value_.__r.__words[0] = 0x4122750000000000;
  a1[4].__r_.__value_.__s.__data_[20] = 0;
  return result;
}

void sub_101357988(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048839C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013579C4(_QWORD *a1)
{
  std::string v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;

  sub_1013576AC(&v3);
  sub_10114BC58((uint64_t)a1, (__int128 *)&v3);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  *a1 = &off_1021B07A8;
  return a1;
}

void sub_101357A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10048839C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_101357A68(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

_QWORD *sub_101357AA8(_QWORD *a1, uint64_t a2, void *a3)
{
  CLDaemonSpringTrackingClientAdapter *v5;
  id v6;
  _QWORD v8[5];

  a1[2] = a3;
  *a1 = off_1021B0800;
  a1[1] = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_101357B94;
  v8[3] = &unk_10213D510;
  v8[4] = a1;
  CLConnection::setDefaultMessageHandler(a2, v8);
  v5 = objc_alloc_init(CLDaemonSpringTrackingClientAdapter);
  a1[4] = v5;
  -[CLDaemonSpringTrackingClientAdapter setValid:](v5, "setValid:", 1);
  v6 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLSpringTrackingNotifier"));
  a1[3] = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", a1[4], objc_msgSend(a3, "silo"));
  return a1;
}

void sub_101357B80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_101357B94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_101357C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_101357C38(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B0800;

  objc_msgSend(*(id *)(a1 + 32), "setValid:", 0);
  *(_QWORD *)(a1 + 32) = 0;
  return sub_10008ABA0((_QWORD *)a1);
}

void sub_101357C8C(uint64_t a1)
{
  sub_101357C38(a1);
  operator delete();
}

void sub_101357CB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  int v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  uint8_t *v19;
  CLConnectionMessage *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  CLConnectionMessage *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  CLConnectionMessage *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  CLConnectionMessage *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  int v42;
  uint64_t *v43;
  uint8_t buf[4];
  uint64_t *v45;

  v4 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 58)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 58)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "SpringTracking/kCLConnectionMessageSpringTrackerIsTracking", 0x3AuLL))
  {
    v20 = *(CLConnectionMessage **)a2;
    v21 = *(std::__shared_weak_count **)(a2 + 8);
    v41[0] = (uint64_t)v20;
    v41[1] = (uint64_t)v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    sub_101358134(a1, v41);
    if (!v21)
      return;
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    goto LABEL_67;
  }
LABEL_7:
  v6 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  v7 = *((char *)v6 + 23);
  if (v7 < 0)
  {
    if (v6[1] != 53)
      goto LABEL_13;
    v6 = (_QWORD *)*v6;
  }
  else if (v7 != 53)
  {
    goto LABEL_13;
  }
  if (!memcmp(v6, "SpringTracking/kCLConnectionMessageSpringTrackerStart", 0x35uLL))
  {
    v26 = *(CLConnectionMessage **)a2;
    v21 = *(std::__shared_weak_count **)(a2 + 8);
    v40[0] = (uint64_t)v26;
    v40[1] = (uint64_t)v21;
    if (v21)
    {
      v27 = (unint64_t *)&v21->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    sub_101358274(a1, v40);
    if (!v21)
      return;
    v29 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v29);
    while (__stlxr(v25 - 1, v29));
    goto LABEL_67;
  }
LABEL_13:
  v8 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] != 52)
      goto LABEL_19;
    v8 = (_QWORD *)*v8;
    goto LABEL_18;
  }
  if (v9 == 52)
  {
LABEL_18:
    if (memcmp(v8, "SpringTracking/kCLConnectionMessageSpringTrackerStop", 0x34uLL))
      goto LABEL_19;
    v30 = *(CLConnectionMessage **)a2;
    v21 = *(std::__shared_weak_count **)(a2 + 8);
    v39[0] = (uint64_t)v30;
    v39[1] = (uint64_t)v21;
    if (v21)
    {
      v31 = (unint64_t *)&v21->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    sub_101358604(a1, v39);
    if (!v21)
      return;
    v33 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v33);
    while (__stlxr(v25 - 1, v33));
LABEL_67:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    return;
  }
LABEL_19:
  v10 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  v11 = *((char *)v10 + 23);
  if (v11 < 0)
  {
    if (v10[1] != 53)
    {
LABEL_25:
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021B0870);
      v12 = qword_1022A0018;
      if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_FAULT))
      {
        v13 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*((char *)v13 + 23) >= 0)
          v14 = v13;
        else
          v14 = (uint64_t *)*v13;
        *(_DWORD *)buf = 136446210;
        v45 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0010 != -1)
          dispatch_once(&qword_1022A0010, &stru_1021B0870);
        v15 = qword_1022A0018;
        v16 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*((char *)v16 + 23) >= 0)
          v17 = v16;
        else
          v17 = (uint64_t *)*v16;
        v42 = 136446210;
        v43 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "Got unhandled mesage of type %{public}s", &v42, 12);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLDaemonSpringTrackingClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      return;
    }
    v10 = (_QWORD *)*v10;
  }
  else if (v11 != 53)
  {
    goto LABEL_25;
  }
  if (memcmp(v10, "SpringTracking/kCLConnectionMessageSpringTrackerQuery", 0x35uLL))
    goto LABEL_25;
  v34 = *(CLConnectionMessage **)a2;
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v38[0] = v34;
  v38[1] = v21;
  if (v21)
  {
    v35 = (unint64_t *)&v21->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  sub_101358994(a1, (uint64_t)v38);
  if (v21)
  {
    v37 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v37);
    while (__stlxr(v25 - 1, v37));
    goto LABEL_67;
  }
}

void sub_1013580F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101358134(uint64_t a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v7;
  id v8[2];
  unsigned int v9;
  uint64_t v10;
  NSNumber *v11;
  uint64_t v12;
  NSNumber *v13;

  v9 = 0;
  if ((sub_101358D44(a1, (int *)&v9) & 1) != 0)
  {
    sub_100131938(v8, (uint64_t)"CLDaemonClient.SpringTrackingNotifierIsTracking", 0);
    v4 = objc_msgSend(*(id *)(a1 + 24), "syncgetIsTracking");
    v5 = *a2;
    v10 = CMReturnCode;
    v11 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
    CLConnectionMessage::sendReply(v5);
    return sub_100131740(v8);
  }
  else
  {
    v7 = *a2;
    v12 = CMErrorMessage;
    v13 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    return (id *)CLConnectionMessage::sendReply(v7);
  }
}

void sub_101358258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  sub_100131740(&a9);
  _Unwind_Resume(a1);
}

id *sub_101358274(uint64_t a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  _BYTE *v8;
  int RemotePid;
  _BYTE *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  int v19;
  char v20;
  id v21[2];
  unsigned int v22;
  _BYTE __p[12];
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  _BYTE *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  NSNumber *v39;
  uint64_t v40;
  NSNumber *v41;

  v22 = 0;
  if ((sub_101358D44(a1, (int *)&v22) & 1) != 0)
  {
    sub_100131938(v21, (uint64_t)"CLDaemonClient.SpringTrackingNotifierStart", 0);
    v4 = objc_msgSend(*(id *)(a1 + 24), "syncgetStartTracking");
    v5 = *a2;
    v38 = CMErrorMessage;
    v39 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    CLConnectionMessage::sendReply(v5);
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021B0870);
    v6 = qword_1022A0018;
    if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v7 = SBYTE3(v27);
      v8 = *(_BYTE **)__p;
      RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v10 = __p;
      *(_DWORD *)buf = 136315906;
      if (v7 < 0)
        v10 = v8;
      v31 = v10;
      v32 = 1024;
      v33 = RemotePid;
      v34 = 2048;
      v35 = a1;
      v36 = 1024;
      v37 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Tracking START, %s, %d, %p, %d", buf, 0x22u);
      if (SBYTE3(v27) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021B0870);
      v13 = qword_1022A0018;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v14 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v15 = &v18;
      *(_DWORD *)__p = 136315906;
      if (v20 < 0)
        v15 = v18;
      *(_QWORD *)&__p[4] = v15;
      v24 = 1024;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 1024;
      v29 = (int)v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "Tracking START, %s, %d, %p, %d", __p, 34, v18, v19);
      v17 = v16;
      if (v20 < 0)
        operator delete(v18);
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerStart(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    return sub_100131740(v21);
  }
  else
  {
    v12 = *a2;
    v40 = CMErrorMessage;
    v41 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v22);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
    return (id *)CLConnectionMessage::sendReply(v12);
  }
}

void sub_1013585B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100131740(&a17);
  _Unwind_Resume(a1);
}

id *sub_101358604(uint64_t a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  _BYTE *v8;
  int RemotePid;
  _BYTE *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  int v19;
  char v20;
  id v21[2];
  unsigned int v22;
  _BYTE __p[12];
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  _BYTE *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  NSNumber *v39;
  uint64_t v40;
  NSNumber *v41;

  v22 = 0;
  if ((sub_101358D44(a1, (int *)&v22) & 1) != 0)
  {
    sub_100131938(v21, (uint64_t)"CLDaemonClient.SpringTrackingNotifierStop", 0);
    v4 = objc_msgSend(*(id *)(a1 + 24), "syncgetStopTracking");
    v5 = *a2;
    v38 = CMErrorMessage;
    v39 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    CLConnectionMessage::sendReply(v5);
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021B0870);
    v6 = qword_1022A0018;
    if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v7 = SBYTE3(v27);
      v8 = *(_BYTE **)__p;
      RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v10 = __p;
      *(_DWORD *)buf = 136315906;
      if (v7 < 0)
        v10 = v8;
      v31 = v10;
      v32 = 1024;
      v33 = RemotePid;
      v34 = 2048;
      v35 = a1;
      v36 = 1024;
      v37 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Tracking STOP, %s, %d, %p, %d", buf, 0x22u);
      if (SBYTE3(v27) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021B0870);
      v13 = qword_1022A0018;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v14 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      v15 = &v18;
      *(_DWORD *)__p = 136315906;
      if (v20 < 0)
        v15 = v18;
      *(_QWORD *)&__p[4] = v15;
      v24 = 1024;
      v25 = v14;
      v26 = 2048;
      v27 = a1;
      v28 = 1024;
      v29 = (int)v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "Tracking STOP, %s, %d, %p, %d", __p, 34, v18, v19);
      v17 = v16;
      if (v20 < 0)
        operator delete(v18);
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerStop(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    return sub_100131740(v21);
  }
  else
  {
    v12 = *a2;
    v40 = CMErrorMessage;
    v41 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v22);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
    return (id *)CLConnectionMessage::sendReply(v12);
  }
}

void sub_101358940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100131740(&a17);
  _Unwind_Resume(a1);
}

id *sub_101358994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSSet *v7;
  void *DictionaryOfClasses;
  void *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  CLConnectionMessage *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v20;
  NSObject *v21;
  CLConnectionMessage *v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  id v28[3];
  unsigned int v29;
  _OWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  _OWORD buf[3];
  uint64_t v35;
  uint64_t v36;
  NSNumber *v37;

  v29 = 0;
  if ((sub_101358D44(a1, (int *)&v29) & 1) != 0)
  {
    v5 = objc_opt_class(CMSleepData, v4);
    v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(NSString, v6), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v7);
    if (DictionaryOfClasses
      && (v9 = DictionaryOfClasses,
          v10 = CMSpringKeyDataRecord,
          objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMSpringKeyDataRecord)))
    {
      sub_100131938(v28, (uint64_t)"CLDaemonClient.SpringTrackingNotifierQuery", 0);
      objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", v10), "convertToSpringTrackerEntry:", buf);
      v11 = *(void **)(a1 + 24);
      v30[0] = buf[0];
      v30[1] = buf[1];
      v30[2] = buf[2];
      v31 = v35;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_101358DF4;
      v26[3] = &unk_1021B0828;
      v13 = *(CLConnectionMessage **)a2;
      v12 = *(std::__shared_weak_count **)(a2 + 8);
      v26[4] = a1;
      v26[5] = v13;
      v27 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      objc_msgSend(v11, "querySinceRecord:withReply:", v30, v26);
      v16 = v27;
      if (v27)
      {
        v17 = (unint64_t *)&v27->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      return sub_100131740(v28);
    }
    else
    {
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021B0870);
      v21 = qword_1022A0018;
      if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Error in query request.", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0010 != -1)
          dispatch_once(&qword_1022A0010, &stru_1021B0870);
        LOWORD(v28[0]) = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 17, "Error in query request.", v28, v25);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
        if (v24 != (char *)buf)
          free(v24);
      }
      v22 = *(CLConnectionMessage **)a2;
      v32 = CMErrorMessage;
      v33 = &off_10221DB38;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
      return (id *)CLConnectionMessage::sendReply(v22);
    }
  }
  else
  {
    v20 = *(CLConnectionMessage **)a2;
    v36 = CMErrorMessage;
    v37 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    return (id *)CLConnectionMessage::sendReply(v20);
  }
}

void sub_101358D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_100261F44(v11);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101358D44(uint64_t a1, int *a2)
{
  uint64_t v4;
  char isEntitled;
  char v6;
  uint64_t result;
  int v8;
  void *__p[2];
  char v10;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(__p, "com.apple.locationd.activity");
  isEntitled = CLConnection::isEntitled(v4, __p);
  v6 = isEntitled;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) != 0)
      goto LABEL_3;
LABEL_6:
    v8 = 105;
    goto LABEL_8;
  }
  if ((isEntitled & 1) == 0)
    goto LABEL_6;
LABEL_3:
  if ((sub_10126A728(*(_QWORD *)(a1 + 16)) & 1) != 0)
    return 1;
  v8 = 104;
LABEL_8:
  result = 0;
  *a2 = v8;
  return result;
}

void sub_101358DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101358DF4(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  int RemotePid;
  _BYTE *v9;
  uint64_t v11;
  id v12;
  int v13;
  void *v14;
  char *v15;
  char *v16;
  void *v17;
  char v18;
  _BYTE __p[12];
  __int16 v20;
  void *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  _BYTE *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  v4 = *(_QWORD *)(a1 + 32);
  if (a2)
    v5 = a2;
  else
    v5 = &__NSArray0__struct;
  v34 = CMSpringKeyDataArray;
  v35 = v5;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
  sub_100197040();
  if (sub_10075D288() && objc_msgSend(a2, "count"))
  {
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021B0870);
    v6 = qword_1022A0018;
    if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(a2, "lastObject");
      CLConnection::getName(*(CLConnection **)(v4 + 8));
      RemotePid = CLConnection::getRemotePid(*(CLConnection **)(v4 + 8));
      v9 = __p;
      *(_DWORD *)buf = 138413058;
      if (v22 < 0)
        v9 = *(_BYTE **)__p;
      v27 = v7;
      v28 = 2080;
      v29 = v9;
      v30 = 1024;
      v31 = RemotePid;
      v32 = 2048;
      v33 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@, %s, %d, %p", buf, 0x26u);
      if (SHIBYTE(v22) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021B0870);
      v11 = qword_1022A0018;
      v12 = objc_msgSend(a2, "lastObject");
      CLConnection::getName(*(CLConnection **)(v4 + 8));
      v13 = CLConnection::getRemotePid(*(CLConnection **)(v4 + 8));
      v14 = &v17;
      *(_DWORD *)__p = 138413058;
      if (v18 < 0)
        v14 = v17;
      *(_QWORD *)&__p[4] = v12;
      v20 = 2080;
      v21 = v14;
      v22 = 1024;
      v23 = v13;
      v24 = 2048;
      v25 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 1, "%@, %s, %d, %p", __p, 38);
      v16 = v15;
      if (v18 < 0)
        operator delete(v17);
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));
}

void sub_1013590F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10135912C(id a1)
{
  qword_1022A0018 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

uint64_t sub_101359158(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  int v9;
  float v10;
  double v12;

  v5 = sub_1005821F4(a1, a3);
  *(_QWORD *)v5 = off_1021B08A0;
  *(_QWORD *)(v5 + 200) = off_1021B0908;
  sub_100DA368C(v5 + 200, *(unsigned __int8 *)(v5 + 8), 0);
  *(_QWORD *)a1 = off_1021B08A0;
  *(_QWORD *)(a1 + 200) = off_1021B0908;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v6 = sub_10021C350();
  v12 = sub_1009EC168(v6, (double *)(a1 + 24));
  sub_100AD74E8(a1 + 296, &v12, a1 + 16, a2);
  sub_100197040();
  v7 = sub_100081BD0();
  v8 = 0.25;
  if (v7)
    v8 = 0.5;
  *(double *)(a1 + 920) = v8;
  *(_OWORD *)(a1 + 928) = xmmword_101C9EA30;
  sub_100197040();
  v9 = sub_100081BD0();
  v10 = 0.00035;
  if (v9)
    v10 = 0.00015;
  *(float *)(a1 + 944) = v10;
  return a1;
}

void sub_101359244(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100582BD8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10135927C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1021B08A0;
  a1[25] = off_1021B0908;
  v2 = a1 + 25;
  sub_10135969C(a1);
  sub_100AD7554(a1 + 37);
  sub_100DA36BC(v2);
  return sub_100582BD8((uint64_t)a1);
}

uint64_t sub_1013592D0(uint64_t a1)
{
  return sub_10135927C((_QWORD *)(a1 - 200));
}

void sub_1013592D8(_QWORD *a1)
{
  sub_10135927C(a1);
  operator delete();
}

void sub_1013592FC(uint64_t a1)
{
  sub_10135927C((_QWORD *)(a1 - 200));
  operator delete();
}

void sub_101359324(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  double v6;
  unint64_t v7;
  _BYTE v8[12];
  _BYTE buf[1632];

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021B0970);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    sub_100127B9C();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = sub_1009CFC10();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%{public}s is enabling power conservative device motion for parallax.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B0970);
    v3 = qword_10229FD28;
    sub_100127B9C();
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)&v8[4] = sub_1009CFC10();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v3, 1, "%{public}s is enabling power conservative device motion for parallax.", v8, 12);
    v5 = (char *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100AD7584(a1 + 296);
  *(_QWORD *)buf = 0;
  v7 = 0xBFF0000000000000;
  *(_QWORD *)v8 = 0;
  v6 = sub_100078B88();
  sub_100AD8E68(a1 + 296, (double *)buf, (double *)v8, (double *)&v7, &v6);
  operator new();
}

void sub_10135966C()
{
  operator delete();
}

uint64_t sub_10135969C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021B0970);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    sub_100127B9C();
    *(_DWORD *)buf = 136446210;
    v12 = sub_1009CFC10();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%{public}s is disabling power conservation for parallax.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B0970);
    v6 = qword_10229FD28;
    sub_100127B9C();
    v9 = 136446210;
    v10 = sub_1009CFC10();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 1, "%{public}s is disabling power conservation for parallax.", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::stop()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100DA39A4((uint64_t)(a1 + 25));
  sub_100DA3700(a1 + 25);
  if (a1[36])
  {
    v3 = sub_10021C350();
    sub_1000A4A6C(v3, 0, a1[36]);
    v4 = a1[36];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    a1[36] = 0;
  }
  sub_100DA374C(a1 + 25);
  result = a1[35];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    a1[35] = 0;
  }
  return result;
}

BOOL sub_1013598BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  float v4;
  float v5;
  float v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;

  v1 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(v1 + 80);
  if (v2 < *(_QWORD *)(v1 + 24))
    return 1;
  v4 = 0.0;
  v5 = 0.0;
  if (v2 >= 2)
  {
    v6 = (float)((float)v2 * *(float *)(v1 + 36)) - (float)(*(float *)(v1 + 32) * *(float *)(v1 + 32));
    v5 = 0.0;
    if (v6 >= 0.0)
      v5 = v6 / (float)((v2 - 1) * v2);
  }
  v7 = *(_QWORD *)(v1 + 152);
  if (v7 >= 2)
  {
    v8 = (float)((float)v7 * *(float *)(v1 + 108)) - (float)(*(float *)(v1 + 104) * *(float *)(v1 + 104));
    if (v8 >= 0.0)
      v4 = v8 / (float)((v7 - 1) * v7);
  }
  v9 = *(_QWORD *)(v1 + 224);
  v10 = 0.0;
  if (v9 >= 2)
  {
    v11 = (float)((float)v9 * *(float *)(v1 + 180)) - (float)(*(float *)(v1 + 176) * *(float *)(v1 + 176));
    if (v11 >= 0.0)
      v10 = v11 / (float)((v9 - 1) * v9);
  }
  if (v5 >= v4)
    v4 = v5;
  if (v4 < v10)
    v4 = v10;
  return v4 > *(float *)(a1 + 944);
}

void sub_1013599A0(float32x2_t *a1, uint64_t a2)
{
  double v4;
  float32x2_t *v5;
  uint64_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float v9;
  __int32 v10;
  uint64_t v11;
  float32x4_t v12;
  __int16 v13;
  __int16 v14;
  float32x4_t v15;
  double v16;
  _BYTE v17[76];
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;

  v4 = *(float *)(a2 + 8);
  v5 = a1 + 39;
  v6 = (uint64_t)&a1[37];
  *(double *)v15.i64 = *(float *)(a2 + 12);
  v16 = *(float *)(a2 + 16);
  *(double *)v17 = v4;
  sub_100AD7680((uint64_t)&a1[37], (float64x2_t *)v17, (uint64_t)&v15, &v16, (_QWORD *)a2);
  *(float32x2_t *)v7.f32 = a1[59];
  if (*(double *)v7.i64 <= 0.0)
  {
    v8 = 0;
    v9 = 0.0;
  }
  else
  {
    sub_100AD855C((double *)v17, (double *)v5);
    v7 = (float32x4_t)vsubq_f64(vcvtq_f64_f32(a1[60]), *(float64x2_t *)v17);
    v8 = vcvt_f32_f64((float64x2_t)v7);
    *(double *)v7.i64 = a1[61].f32[0] - *(double *)&v17[16];
    v9 = *(double *)v7.i64;
  }
  v10 = a1[57].i32[1];
  *(_QWORD *)&v17[16] = 0;
  *(_OWORD *)v17 = 0xBFF0000000000000;
  v11 = *(uint64_t *)((char *)&v5[17] + 4);
  sub_10012C97C((float32x4_t *)&v17[8], v7);
  memset(&v17[24], 0, 36);
  *(_OWORD *)&v17[60] = xmmword_101BB2F90;
  v18 = 0x1FF00000000;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)v17 = *(_QWORD *)a2;
  v12 = *(float32x4_t *)v5[2].f32;
  v15 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v5->f32), (float64x2_t)v12);
  sub_10012C97C(&v15, v12);
  *(float32x4_t *)&v17[8] = v15;
  *(float32x2_t *)&v17[24] = v8;
  *(float *)&v17[32] = v9;
  *(_QWORD *)&v17[36] = v11;
  *(_DWORD *)&v17[44] = v10;
  BYTE4(v18) = -1;
  *(_OWORD *)&v17[48] = xmmword_101BB2FA0;
  *(_DWORD *)&v17[64] = -1082130432;
  v13 = HIWORD(v18) & 0xFFE7;
  if (a1[31].i8[4])
    v13 = HIWORD(v18) & 0xFFE7 | 0x10;
  HIWORD(v18) = v13;
  if (sub_100AD757C(v6))
    v14 = 256;
  else
    v14 = 0;
  HIWORD(v18) = HIWORD(v18) & 0xFEFF | v14;
  v19 = 2;
  v21 = 0;
  v20 = 0;
  sub_100582E8C((uint64_t)a1, (uint64_t)v17);
}

void sub_101359B9C(uint64_t a1, uint64_t a2)
{
  sub_1013599A0((float32x2_t *)(a1 - 200), a2);
}

double sub_101359BA4(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100AD814C(a1 + 296, a2, a3);
}

double sub_101359BAC(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100AD814C(a1 + 96, a2, a3);
}

void sub_101359BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];

  v4 = *(_QWORD *)(a1 + 280);
  sub_10007D084(v4 + 16, (float *)(a2 + 8));
  sub_10007D084(v4 + 88, (float *)(a2 + 12));
  sub_10007D084(v4 + 160, (float *)(a2 + 16));
  if (sub_1013598BC(a1))
  {
    *(_QWORD *)(a1 + 936) = *(_QWORD *)a2;
    if (*(_QWORD *)(a1 + 48) == 2)
      return;
    v5 = sub_100127B9C();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_101359D34;
    v10[3] = &unk_10212ECA0;
    v10[4] = a1;
    v6 = v10;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 == 1)
  {
    if (*(double *)a2 <= *(double *)(a1 + 936) + *(double *)(a1 + 928))
      return;
    v5 = sub_100127B9C();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_101359E5C;
    v8[3] = &unk_10212ECA0;
    v8[4] = a1;
    v6 = v8;
    goto LABEL_10;
  }
  if (v7 == 2 && *(double *)a2 > *(double *)(a1 + 936) + *(double *)(a1 + 920))
  {
    v5 = sub_100127B9C();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_101359E1C;
    v9[3] = &unk_10212ECA0;
    v9[4] = a1;
    v6 = v9;
LABEL_10:
    sub_1000A57FC(v5, (uint64_t)v6);
  }
}

uint64_t sub_101359D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100DA3814(v1 + 200);
  if (!*(_QWORD *)(v1 + 288))
    operator new();
  sub_100DA38F0(v1 + 200);
  v3 = 2;
  return sub_1005837B8(v1, &v3);
}

void sub_101359DF8()
{
  operator delete();
}

uint64_t sub_101359E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100DA3700((_QWORD *)(v1 + 200));
  v3 = 1;
  return sub_1005837B8(v1, &v3);
}

uint64_t sub_101359E5C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021B0970);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021B0970);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::feedAccelerometerData(const CLAccelerometer::Sample *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_QWORD *)(v1 + 288))
  {
    v3 = sub_10021C350();
    sub_1000A4A6C(v3, 0, *(_QWORD *)(v1 + 288));
    v4 = *(_QWORD *)(v1 + 288);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(v1 + 288) = 0;
  }
  sub_100DA39A4(v1 + 200);
  *(_QWORD *)buf = 0;
  return sub_1005837B8(v1, buf);
}

void sub_10135A034(uint64_t a1, uint64_t a2)
{
  sub_101359BB4(a1 - 200, a2);
}

void sub_10135A03C(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

double sub_10135A068(uint64_t a1, double a2, double a3)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = (unint64_t)(a2 * 100.0 + 1.0);
  *(_QWORD *)&result = 0x26200000000;
  *(_QWORD *)(a1 + 88) = 0x26200000000;
  *(_QWORD *)(a1 + 7416) = 0x26200000000;
  *(_QWORD *)(a1 + 14744) = 0x26200000000;
  *(_QWORD *)(a1 + 22072) = 0x5100000000;
  *(_QWORD *)(a1 + 23052) = 0x5100000000;
  *(_QWORD *)(a1 + 24032) = 0x26200000000;
  return result;
}

uint64_t sub_10135A0D0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int32 v9;
  unsigned int v10;
  float v11;
  float v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  float v17;
  double v18;
  int v19;
  unsigned int v21;
  unsigned __int32 v22;
  float32x2_t v23;
  float v24;
  _DWORD v25[3];
  unint64_t v26;
  float v27;

  v7 = (unsigned __int16 *)(a1 + 22072);
  sub_100687774((unsigned __int16 *)(a1 + 22072), a2);
  sub_100687774((unsigned __int16 *)(a1 + 23052), a2 + 12);
  v8 = sub_100687774((unsigned __int16 *)(a1 + 24032), a2 + 12);
  v9 = sub_10135A254((uint64_t)v8, v7).u32[0];
  v21 = v10;
  v22 = v9;
  v12 = v11;
  v26 = __PAIR64__(v10, v9);
  v27 = v11;
  v25[0] = sub_10135A254(v13, (unsigned __int16 *)(a1 + 23052)).u32[0];
  v25[1] = v14;
  v25[2] = v15;
  v16 = vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 48));
  if (v16 < 0.001)
    v16 = 0.001;
  *(float *)&v16 = v16;
  v17 = (float)(v12 - *(float *)(a1 + 72)) / *(float *)&v16;
  v23 = vdiv_f32(vsub_f32((float32x2_t)__PAIR64__(v21, v22), *(float32x2_t *)(a1 + 64)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v16, 0));
  v24 = v17;
  sub_100687774((unsigned __int16 *)(a1 + 88), (uint64_t)&v26);
  sub_100687774((unsigned __int16 *)(a1 + 7416), (uint64_t)v25);
  sub_100687774((unsigned __int16 *)(a1 + 14744), (uint64_t)&v23);
  *(_QWORD *)(a1 + 64) = v26;
  *(float *)(a1 + 72) = v27;
  v18 = *(double *)(a2 + 56);
  *(double *)(a1 + 48) = v18;
  if (*(_QWORD *)(a1 + 80) < (unint64_t)*(unsigned __int16 *)(a1 + 90)
    && v18 - *(double *)(a1 + 56) > *(double *)(a1 + 40))
  {
    sub_10135A328(a1);
    *(_DWORD *)a1 = v19;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    *(float *)(a1 + 16) = sub_10135A638(a1);
  }
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 24) = a4;
  return 1;
}

float32x2_t sub_10135A254(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v3;
  float32x2_t v4;
  float v5;
  unint64_t v6;
  float32x2_t *v7;
  float32x2_t *v8;
  float v9;

  v3 = 0;
  v4 = 0;
  v5 = 0.0;
  v6 = 80;
  do
  {
    v7 = (float32x2_t *)sub_100687A34(a2, v3);
    v8 = (float32x2_t *)sub_100687A34(a2, v6);
    v9 = flt_101C9EA98[v6];
    v4 = vadd_f32(v4, vmul_n_f32(vadd_f32(*v7, *v8), v9));
    v5 = v5 + (float)((float)(v7[1].f32[0] + v8[1].f32[0]) * v9);
    ++v3;
    --v6;
  }
  while (v3 != 40);
  return vadd_f32(v4, vmul_f32(*(float32x2_t *)sub_100687A34(a2, 0x28uLL), 0));
}

void sub_10135A328(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t i;
  unint64_t j;
  float *v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  int v36;
  int v37;
  float v38;
  float *v39;
  float v40;
  uint64_t v41;
  int v42;
  int v43;
  float v44;
  _OWORD v45[2];
  int v46;
  _OWORD v47[2];
  int v48;
  _BYTE v49[36];
  _OWORD v50[2];
  int v51;
  float v52;
  int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  _OWORD v58[2];
  int v59;
  _DWORD v60[9];
  __int128 v61;
  __int128 v62;
  int v63;
  unint64_t v64;
  float v65;
  __int128 v66;
  __int128 v67;
  int v68;

  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  v64 = 0;
  v65 = 0.0;
  v1 = *(unsigned __int16 *)(a1 + 90);
  v2 = v1 - 1;
  v3 = *(_QWORD *)(a1 + 80);
  v5 = v1 >= v3;
  v4 = v1 - v3;
  v5 = v5 && v2 >= v4;
  if (v5)
  {
    v7 = (unsigned __int16 *)(a1 + 88);
    v8 = (unsigned __int16 *)(a1 + 14744);
    v9 = (unsigned __int16 *)(a1 + 7416);
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    do
    {
      v13 = sub_100687A34(v7, v2);
      v15 = *(float *)(v13 + 4);
      v14 = *(float *)(v13 + 8);
      v16 = *(float *)v13;
      v17 = -*(float *)v13;
      LODWORD(v61) = 0;
      *((float *)&v61 + 1) = v14;
      *((float *)&v61 + 2) = -v15;
      *((float *)&v61 + 3) = -v14;
      LODWORD(v62) = 0;
      *(_QWORD *)((char *)&v62 + 4) = __PAIR64__(LODWORD(v15), LODWORD(v16));
      *((float *)&v62 + 3) = v17;
      v63 = 0;
      v18 = sub_100687A34(v8, v2);
      v20 = *(float *)(v18 + 4);
      v19 = *(float *)(v18 + 8);
      v21 = *(float *)v18;
      v22 = -*(float *)v18;
      v60[0] = 0;
      *(float *)&v60[1] = v19;
      *(float *)&v60[2] = -v20;
      *(float *)&v60[3] = -v19;
      v60[4] = 0;
      *(float *)&v60[5] = v21;
      *(float *)&v60[6] = v20;
      *(float *)&v60[7] = v22;
      v60[8] = 0;
      sub_100B27DB0((uint64_t)&v61, (uint64_t)&v61, (uint64_t)&v55);
      for (i = 0; i != 9; ++i)
        *((float *)&v55 + i) = sub_100821C40((uint64_t)v60, i) + *((float *)&v55 + i);
      v58[0] = v55;
      v58[1] = v56;
      v59 = v57;
      v50[0] = v55;
      v50[1] = v56;
      v51 = v57;
      sub_10053352C((uint64_t)v50, (uint64_t)&v52);
      sub_100B27DB0((uint64_t)&v52, (uint64_t)v58, (uint64_t)v49);
      for (j = 0; j != 9; ++j)
        *((float *)&v66 + j) = sub_100821C40((uint64_t)v49, j) + *((float *)&v66 + j);
      v25 = (float *)sub_100687A34(v9, v2);
      v12 = v12 + sub_1005335A4((uint64_t)&v52, v25);
      v11 = v11 + v26;
      v10 = v27 + v10;
      v64 = __PAIR64__(LODWORD(v11), LODWORD(v12));
      v65 = v10;
      --v2;
      v28 = *(unsigned __int16 *)(a1 + 90);
      v29 = *(_QWORD *)(a1 + 80);
      v5 = v28 >= v29;
      v30 = v28 - v29;
    }
    while (v5 && v2 >= v30);
  }
  v47[0] = v66;
  v47[1] = v67;
  v48 = v68;
  sub_100821E18((uint64_t)v47, (uint64_t)&v61);
  *(_QWORD *)&v58[0] = __PAIR64__(LODWORD(v32), LODWORD(v34));
  *((float *)v58 + 2) = v33;
  if (fabsf(v34) >= 0.001 && fabsf(v32) >= 0.001 && fabsf(v33) >= 0.001)
  {
    v45[0] = v61;
    v45[1] = v62;
    v46 = v63;
    sub_10053352C((uint64_t)v45, (uint64_t)v60);
    v35 = 0;
    v52 = sub_1005335A4((uint64_t)v60, (float *)&v64);
    v53 = v36;
    v54 = v37;
    do
    {
      v38 = sub_100533668((uint64_t)v58, v35);
      v39 = (float *)sub_100534E68((uint64_t)&v52, v35);
      *v39 = *v39 / v38;
      ++v35;
    }
    while (v35 != 3);
    v40 = sub_1005335A4((uint64_t)&v61, &v52);
    v41 = 0;
    v52 = v40;
    v53 = v42;
    v54 = v43;
    v44 = 0.0;
    do
    {
      v44 = v44 + (float)(*(float *)((char *)&v52 + v41) * *(float *)((char *)&v52 + v41));
      v41 += 4;
    }
    while (v41 != 12);
  }
}

float sub_10135A638(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v1 = (unsigned __int16 *)(a1 + 24032);
  v2 = *(unsigned int *)(a1 + 24036);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    do
    {
      v9 = (float *)sub_100687A34(v1, v3);
      v11 = *v9;
      v10 = v9[1];
      v12 = v9[2];
      v4 = 6.28318531 / (double)(unint64_t)(v2 - 1);
      v13 = cosf(v4 * (float)(int)v3) * -0.46 + 0.54;
      v8 = v8 + (float)((float)(v11 * v13) * (float)(v11 * v13));
      v7 = v7 + (float)((float)(v10 * v13) * (float)(v10 * v13));
      v6 = v6 + (float)((float)(v12 * v13) * (float)(v12 * v13));
      v5 = v5 + v13;
      ++v3;
    }
    while (v2 != v3);
    v14 = (float)(v8 + v7) + v6;
  }
  else
  {
    v5 = 0.0;
    v14 = 0.0;
  }
  return sqrtf(v14) / v5;
}

uint64_t sub_10135A748(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  char v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v27;
  const char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  _OWORD buf[102];

  *(_QWORD *)a1 = off_1021B09A0;
  *(_QWORD *)(a1 + 8) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 24) = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 32) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 40) = *a4;
  v12 = a4[1];
  *(_QWORD *)(a1 + 48) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 56) = *a5;
  v15 = a5[1];
  *(_QWORD *)(a1 + 64) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 72) = 0x40C5180000000000;
  v18 = (uint64_t *)(a1 + 72);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  sub_1001E4804(buf);
  v19 = sub_1001FD98C(*(uint64_t *)&buf[0], "MaxTripDuration", (void *)(a1 + 72));
  v20 = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_17;
  v22 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_17:
    if ((v19 & 1) != 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if ((v20 & 1) == 0)
LABEL_18:
    *v18 = 0x40C5180000000000;
LABEL_19:
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B0A48);
  v24 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *v18;
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLPolicyTrip: duration,%.2fs", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0A48);
    v27 = *v18;
    v30 = 134217984;
    v31 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "CLPolicyTrip: duration,%.2fs", COERCE_DOUBLE(&v30));
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "CLPolicyTrip::CLPolicyTrip(std::shared_ptr<CLPolicyTripInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLHarvestMonitorInterface::Gps>, std::shared_ptr<CLHarvestPolicyInterface::Proactive>)", "%s\n", v28);
    if (v29 != (char *)buf)
      free(v29);
  }
  return a1;
}

void sub_10135AA90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_1004A4854(v6);
  sub_100EF7338(v1 + 80);
  sub_100261F44(v5);
  sub_100261F44(v4);
  sub_100261F44(v3);
  sub_100261F44(v2);
  _Unwind_Resume(a1);
}

void sub_10135AAEC(uint64_t a1)
{
  const __CFUUID *v2;
  const __CFString *v3;
  void **v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  double v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  _BYTE v23[12];
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[24];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;

  v2 = CFUUIDCreate(0);
  v3 = CFUUIDCreateString(0, v2);
  sub_1001A486C(v3, (uint64_t)buf);
  v4 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&buf[16];
  CFRelease(v2);
  CFRelease(v3);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B0A48);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v7 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v7 = *v4;
    v8 = *(double *)(v5 + 76);
    v9 = v8 - *(double *)(a1 + 80);
    v10 = v8 - *(double *)(a1 + 600);
    v11 = *(unsigned __int8 *)(a1 + 632);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    v33 = v9;
    v34 = 2048;
    v35 = v10;
    v36 = 1024;
    v37 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "using trip id %s at time %.2fs (previous trip duration %.3fs and gap %.3fs) or triggerNewTripIdByProactive,%d", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0A48);
    if (*(char *)(a1 + 111) < 0)
      v4 = (void **)*v4;
    v16 = *(double *)(v5 + 76);
    v17 = v16 - *(double *)(a1 + 80);
    v18 = v16 - *(double *)(a1 + 600);
    v19 = *(unsigned __int8 *)(a1 + 632);
    *(_DWORD *)v23 = 136316162;
    *(_QWORD *)&v23[4] = v4;
    v24 = 2048;
    v25 = v16;
    v26 = 2048;
    v27 = v17;
    v28 = 2048;
    v29 = v18;
    v30 = 1024;
    v31 = v19;
    LODWORD(v22) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "using trip id %s at time %.2fs (previous trip duration %.3fs and gap %.3fs) or triggerNewTripIdByProactive,%d", v23, v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLPolicyTrip::createNewTripId()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v5 + 76);
  if (*(_BYTE *)(a1 + 632))
    *(_BYTE *)(a1 + 632) = 0;
  memset(buf, 0, sizeof(buf));
  if ((*(unsigned int (**)(_QWORD, uint8_t *, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), buf, 0))
  {
    v12 = *(_QWORD *)buf;
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      if (**(_BYTE **)buf)
      {
        v13 = *(_DWORD *)(*(_QWORD *)buf + 8);
        *(_DWORD *)(a1 + 112) = v13;
        if (v13 < 3)
          goto LABEL_18;
        if (v13 == 9)
        {
          *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_100706590(v12);
          v14 = sub_100706590(*(uint64_t *)buf);
          goto LABEL_20;
        }
        if (v13 == 7)
        {
LABEL_18:
          *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_1007057DC(v12);
          v14 = sub_1007057DC(*(uint64_t *)buf);
        }
        else
        {
          if (v13 - 3 <= 2)
          {
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(sub_100704A28(v12) + 32);
            v15 = *(_DWORD *)(sub_100704A28(*(uint64_t *)buf) + 36);
            goto LABEL_21;
          }
          if (v13 == 10)
          {
            *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_1007073B4(v12);
            v14 = sub_1007073B4(*(uint64_t *)buf);
          }
          else
          {
            if (v13 != 6)
            {
              v15 = -1;
              *(_DWORD *)(a1 + 116) = -1;
              goto LABEL_21;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_1001E3CA4(v12);
            v14 = sub_1001E3CA4(*(uint64_t *)buf);
          }
        }
LABEL_20:
        v15 = *(_DWORD *)(v14 + 4);
LABEL_21:
        *(_DWORD *)(a1 + 120) = v15;
      }
    }
  }
  *(_BYTE *)(a1 + 592) = 1;
  *(_QWORD *)v23 = buf;
  sub_10087B4F8((void ***)v23);
}

void sub_10135AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10087B4F8((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_10135AEF0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[111] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 11), *((_QWORD *)result + 12));
  *(_OWORD *)a2 = *(_OWORD *)(result + 88);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 13);
  return result;
}

BOOL sub_10135AF1C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v4;

  if (*(char *)(a1 + 111) < 0)
  {
    if (!*(_QWORD *)(a1 + 96))
      return 1;
  }
  else if (!*(_BYTE *)(a1 + 111))
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 632))
    return 1;
  v4 = *(double *)(a2 + 76);
  if (v4 - a3 > 900.0 && v4 - a4 > 900.0)
    return 1;
  return v4 - *(double *)(a1 + 80) > *(double *)(a1 + 72);
}

uint64_t sub_10135AF80(uint64_t result, double a2)
{
  *(double *)(result + 600) = a2;
  return result;
}

uint64_t sub_10135AF88(uint64_t result, double a2)
{
  *(double *)(result + 608) = a2;
  return result;
}

__n128 sub_10135AF90(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;

  *(_BYTE *)(a1 + 181) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 208))(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 182) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 216))(*(_QWORD *)(a1 + 24));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)v2;
  v3 = *(_OWORD *)(v2 + 48);
  v4 = *(_OWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(a1 + 248) = v4;
  *(_OWORD *)(a1 + 232) = v3;
  *(_OWORD *)(a1 + 216) = v5;
  v7 = *(_OWORD *)(v2 + 96);
  v6 = *(_OWORD *)(v2 + 112);
  v8 = *(_QWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(v2 + 80);
  *(_QWORD *)(a1 + 312) = v8;
  *(_OWORD *)(a1 + 296) = v6;
  *(_OWORD *)(a1 + 280) = v7;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v9;
  v10 = *(_OWORD *)(v9 + 64);
  v12 = *(_OWORD *)(v9 + 16);
  v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(a1 + 384) = v10;
  *(_OWORD *)(a1 + 336) = v12;
  *(_OWORD *)(a1 + 352) = v11;
  v14 = *(_OWORD *)(v9 + 96);
  v13 = *(_OWORD *)(v9 + 112);
  v15 = *(_OWORD *)(v9 + 80);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(v9 + 128);
  *(_OWORD *)(a1 + 416) = v14;
  *(_OWORD *)(a1 + 432) = v13;
  *(_OWORD *)(a1 + 400) = v15;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 456) = *(_OWORD *)v16;
  v17 = *(_OWORD *)(v16 + 64);
  v19 = *(_OWORD *)(v16 + 16);
  v18 = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a1 + 520) = v17;
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 488) = v18;
  v21 = *(_OWORD *)(v16 + 96);
  result = *(__n128 *)(v16 + 112);
  v22 = *(_OWORD *)(v16 + 80);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(v16 + 128);
  *(_OWORD *)(a1 + 552) = v21;
  *(__n128 *)(a1 + 568) = result;
  *(_OWORD *)(a1 + 536) = v22;
  return result;
}

uint64_t sub_10135B0A8(uint64_t a1)
{
  char *v2;

  v2 = sub_100FC2FB8();
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40)) & 1) != 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24)) & 1) != 0
    || v2[1] && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24)) & 1) != 0
    || v2[2] && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24)) & 1) != 0)
  {
    return 1;
  }
  if (v2[3])
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
  return 0;
}

BOOL sub_10135B158(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1)
      && (*sub_100FC2FB8() || !*(_BYTE *)(a1 + 616))
      && *(double *)(a2 + 44) >= 0.0
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) & 1) != 0;
}

BOOL sub_10135B1DC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24))
      && (*sub_100FC30F0() || !*(_BYTE *)(a1 + 616))
      && *(double *)(a2 + 44) >= 0.0
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) & 1) != 0;
}

void sub_10135B264(uint64_t a1, double *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  double Current;
  double v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  BOOL v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  const char *v35;
  int v36;
  _BYTE v37[18];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  _BYTE v51[18];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;

  if (*(_DWORD *)a2 == 1)
  {
    *(_BYTE *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 624) = 0xBFF0000000000000;
    Current = CFAbsoluteTimeGetCurrent();
    v12 = Current;
    v13 = Current - a2[1] + -3.0;
    v14 = *(_QWORD *)(a1 + 648);
    if (*(_QWORD *)(a1 + 656) == v14
      || (v15 = *(_QWORD *)(a1 + 672),
          v16 = (_QWORD *)(v14 + 8 * (v15 >> 8)),
          v17 = *v16 + 16 * v15,
          v18 = *(_QWORD *)(v14 + (((*(_QWORD *)(a1 + 680) + v15) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (*(_BYTE *)(a1 + 680) + v15),
          v17 == v18))
    {
      v20 = *(double *)(a1 + 80);
LABEL_30:
      v21 = -1.0;
    }
    else
    {
      v19 = Current + 0.001;
      v20 = *(double *)(a1 + 80);
      while (1)
      {
        v21 = *(double *)v17;
        if (*(double *)v17 >= v13 && v21 <= v19)
          *(_BYTE *)(v17 + 8) = 0;
        v23 = v21 > v20 && v21 < v13;
        if (v23 && *(_BYTE *)(v17 + 8))
          break;
        v17 += 16;
        if (v17 - *v16 == 4096)
        {
          v24 = v16[1];
          ++v16;
          v17 = v24;
        }
        if (v17 == v18)
          goto LABEL_30;
      }
    }
    v25 = vabdd_f64(v12, v20);
    v26 = vabdd_f64(v12, v21);
    if (v21 <= 0.0)
      v27 = v25;
    else
      v27 = v26;
    if (v25 > 900.0 && v27 > 900.0)
      *(_BYTE *)(a1 + 632) = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0A48);
    v28 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v29 = *(_QWORD *)(a1 + 80);
      v30 = *(unsigned __int8 *)(a1 + 632);
      v31 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 134350848;
      *(double *)v51 = v13;
      *(_WORD *)&v51[8] = 2050;
      *(double *)&v51[10] = v12;
      v52 = 2050;
      v53 = v29;
      v54 = 2050;
      v55 = v21;
      v56 = 2050;
      v57 = v25;
      v58 = 2050;
      v59 = v27;
      v60 = 1026;
      v61 = v30;
      v62 = 2050;
      v63 = v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "MapsHarvest,proactiveSessionEnd,start,%{public}.2fs,end,%{public}.2fs,tripTime,%{public}.2fs,lastRegularTime,%{public}.2fs,tripInterval,%{public}.2fs,lastRegularInterval,%{public}.2fs,TriggerId,%{public}d,sessionSec,%{public}.2lf", buf, 0x4Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0A48);
      v32 = *(_QWORD *)(a1 + 80);
      v33 = *(unsigned __int8 *)(a1 + 632);
      v34 = *((_QWORD *)a2 + 1);
      v36 = 134350848;
      *(double *)v37 = v13;
      *(_WORD *)&v37[8] = 2050;
      *(double *)&v37[10] = v12;
      v38 = 2050;
      v39 = v32;
      v40 = 2050;
      v41 = v21;
      v42 = 2050;
      v43 = v25;
      v44 = 2050;
      v45 = v27;
      v46 = 1026;
      v47 = v33;
      v48 = 2050;
      v49 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "MapsHarvest,proactiveSessionEnd,start,%{public}.2fs,end,%{public}.2fs,tripTime,%{public}.2fs,lastRegularTime,%{public}.2fs,tripInterval,%{public}.2fs,lastRegularInterval,%{public}.2fs,TriggerId,%{public}d,sessionSec,%{public}.2lf", &v36, 78);
      v10 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyTrip::updateProactiveLocationSession(const CLLocationProvider_Type::ProactiveLocationSessionStats &)", "%s\n", v35);
      goto LABEL_46;
    }
  }
  else if (!*(_DWORD *)a2)
  {
    *(_BYTE *)(a1 + 616) = 1;
    *(CFAbsoluteTime *)(a1 + 624) = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0A48);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)a2;
      v6 = *(_QWORD *)(a1 + 624);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v51 = v5;
      *(_WORD *)&v51[4] = 2050;
      *(_QWORD *)&v51[6] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "MapsHarvest,proactiveSessionStart,state,%{public}d,state,%{public}.2fs", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0A48);
      v7 = *(_DWORD *)a2;
      v8 = *(_QWORD *)(a1 + 624);
      v36 = 67240448;
      *(_DWORD *)v37 = v7;
      *(_WORD *)&v37[4] = 2050;
      *(_QWORD *)&v37[6] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "MapsHarvest,proactiveSessionStart,state,%{public}d,state,%{public}.2fs", &v36, 18);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyTrip::updateProactiveLocationSession(const CLLocationProvider_Type::ProactiveLocationSessionStats &)", "%s\n", v9);
LABEL_46:
      if (v10 != buf)
        free(v10);
    }
  }
}

_QWORD *sub_10135B744(_QWORD *result, double a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  double v6;

  v2 = result;
  v6 = a2;
  v3 = result + 80;
  v4 = result[85];
  if (!v4
    || *(double *)(*(_QWORD *)(result[81] + ((result[84] >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * result[84]) < a2)
  {
    v5 = 1;
    result = (_QWORD *)sub_10135B7E4((uint64_t)(result + 80), &v6, &v5);
    v4 = v2[85];
  }
  if (v4 >= 0xB5)
  {
    do
    {
      v2[85] = v4 - 1;
      result = (_QWORD *)sub_1004A5844(v3, 1);
      v4 = v2[85];
    }
    while (v4 > 0xB4);
  }
  return result;
}

uint64_t sub_10135B7E4(uint64_t a1, _QWORD *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_10135BAF8((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(v7 + 8 * (v6 >> 8));
  v10 = *v9 + 16 * v6;
  if (v8 == v7)
    v10 = 0;
  if (v10 == *v9)
    v10 = *(v9 - 1) + 4096;
  v11 = *a3;
  *(_QWORD *)(v10 - 16) = *a2;
  *(_BYTE *)(v10 - 8) = v11;
  v12 = v6 - 1;
  v13 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  if (v8 == v7)
    return 0;
  else
    return *(_QWORD *)(v7 + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12;
}

uint64_t sub_10135B890(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t result;
  __n128 v6;

  if (*(_BYTE *)(a1 + 616))
  {
    v4 = *(double *)(a1 + 624);
    if (v4 > 0.0 && *(double *)(a2 + 76) > v4 + 300.0)
    {
      *(_BYTE *)(a1 + 616) = 0;
      *(_QWORD *)(a1 + 624) = 0xBFF0000000000000;
    }
  }
  sub_10135B744((_QWORD *)a1, *(double *)(a2 + 76));
  if (sub_10135AF1C(a1, a2, *(double *)(a1 + 600), *(double *)(a1 + 608)))
    sub_10135AAEC(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2) & 1) != 0
    || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2), (_DWORD)result))
  {
    v6 = sub_10135AF90(a1);
    result = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 80, v6);
    *(_BYTE *)(a1 + 180) = *(_BYTE *)(a1 + 616);
  }
  return result;
}

uint64_t sub_10135B968(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B09A0;
  sub_1004A4854((_QWORD *)(a1 + 640));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  sub_100261F44(a1 + 56);
  sub_100261F44(a1 + 40);
  sub_100261F44(a1 + 24);
  sub_100261F44(a1 + 8);
  return a1;
}

void sub_10135B9EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B09A0;
  sub_1004A4854((_QWORD *)(a1 + 640));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  sub_100261F44(a1 + 56);
  sub_100261F44(a1 + 40);
  sub_100261F44(a1 + 24);
  sub_100261F44(a1 + 8);
  operator delete();
}

uint64_t sub_10135BA80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 592);
}

uint64_t sub_10135BA88(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_10135BA90(uint64_t result)
{
  if (*(char *)(result + 111) < 0)
  {
    **(_BYTE **)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
  }
  else
  {
    *(_BYTE *)(result + 88) = 0;
    *(_BYTE *)(result + 111) = 0;
  }
  return result;
}

uint64_t sub_10135BAB4(uint64_t a1)
{
  return a1 + 600;
}

uint64_t sub_10135BABC(uint64_t a1)
{
  return a1 + 608;
}

uint64_t sub_10135BAC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 616);
}

void sub_10135BACC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10135BAF8(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x100)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 128;
      else
        v40 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 128;
      else
        v35 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_10135BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10135BEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_101C9EC10;
  v5 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  sub_100270E34(a1 + 72, a4);
  return a1;
}

void sub_10135BEF0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10135BF18(uint64_t result, __int128 *a2)
{
  uint64_t *v2;
  __int128 v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  CFAbsoluteTime Current;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;

  v2 = (uint64_t *)result;
  if (*((_BYTE *)a2 + 9) && !*(_BYTE *)(result + 41))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0A68);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v2[2];
      *(_DWORD *)buf = 134217984;
      v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,charging,type,%ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0A68);
      v7 = v2[2];
      v26 = 134217984;
      v27 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "WorkoutStopDetected,charging,type,%ld", &v26);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::updateChargingState(const CLWorkoutPredictorCharging &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_10135D470(v2, 0, 0, 0);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v10 = 4;
    Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)buf = 1;
    v6 = v2[12];
    if (!v6)
      sub_10025FD1C();
    return (*(uint64_t (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v6 + 48))(v6, buf, &v10);
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(result + 32) = v3;
  }
  return result;
}

_QWORD *sub_10135C178(_QWORD *result, _DWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = result[2];
  if (v2)
    v3 = v2 == 26;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = 0;
    if (*a2 != 1)
      v4 = *(_QWORD *)(result[1] + 296);
    result[7] = v4;
  }
  return result;
}

uint64_t sub_10135C1AC(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021B0A88);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[2];
    *(_DWORD *)buf = 134217984;
    v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WorkoutStopDetected,geoFence,type,%ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B0A88);
    v7 = a1[2];
    v26 = 134217984;
    v27 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "WorkoutStopDetected,geoFence,type,%ld", &v26);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::didExitGeoFence()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_10135D470(a1, 0, 0, 0);
  v4 = *(_QWORD *)(a1[1] + 296);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v10 = 10;
  v11 = v4;
  *(_DWORD *)buf = 1;
  v5 = a1[12];
  if (!v5)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v5 + 48))(v5, buf, &v10);
}

BOOL sub_10135C3EC(double *a1)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  v2 = *((_QWORD *)a1 + 2);
  v3 = v2 > 0x25;
  v4 = (1 << v2) & 0x3000800000;
  if (!v3 && v4 != 0)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0A68);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 296);
      v8 = *((_QWORD *)a1 + 7);
      *(_DWORD *)buf = 134218240;
      v28 = v7;
      v29 = 2048;
      v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Confirmed offWrist, Not triggering WorkoutStopDetected for snowsports, currentTime %f, fLastUnknownOrOffTime %f", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0A68);
    v14 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 296);
    v15 = *((_QWORD *)a1 + 7);
    v23 = 134218240;
    v24 = v14;
    v25 = 2048;
    v26 = v15;
    LODWORD(v22) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Confirmed offWrist, Not triggering WorkoutStopDetected for snowsports, currentTime %f, fLastUnknownOrOffTime %f", COERCE_DOUBLE(&v23), v22);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutStopDetector::isConfirmedOffWrist() const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
    return 0;
  }
  v10 = a1[7];
  if (v10 == 0.0 || vabdd_f64(*(double *)(*((_QWORD *)a1 + 1) + 296), v10) <= 60.0)
    return 0;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B0A68);
  v11 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v12 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 296);
    v13 = *((_QWORD *)a1 + 7);
    *(_DWORD *)buf = 134218240;
    v28 = v12;
    v29 = 2048;
    v30 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Triggering WorkoutStopDetected, currentTime %f, fLastUnknownOrOffTime %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0A68);
    v18 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 296);
    v19 = *((_QWORD *)a1 + 7);
    v23 = 134218240;
    v24 = v18;
    v25 = 2048;
    v26 = v19;
    LODWORD(v22) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Triggering WorkoutStopDetected, currentTime %f, fLastUnknownOrOffTime %f", COERCE_DOUBLE(&v23), v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutStopDetector::isConfirmedOffWrist() const", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  return 1;
}

uint64_t sub_10135C790(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;

  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 64) = v2;
  if (v2 == 4)
  {
    v3 = (uint64_t *)result;
    if (*(_QWORD *)(result + 16) != 27)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B0A88);
      v4 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v5 = v3[2];
        *(_DWORD *)buf = 134217984;
        v30 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,connectedVehicle,type,%ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021B0A88);
        v8 = v3[2];
        v27 = 134217984;
        v28 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutStopDetected,connectedVehicle,type,%ld", &v27);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::updateVehicularState(const CLWorkoutPredictorVehicular &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      sub_10135D470(v3, 0, 0, 0);
      v6 = *(_QWORD *)(v3[1] + 296);
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0;
      v11 = 8;
      v12 = v6;
      *(_DWORD *)buf = 1;
      v7 = v3[12];
      if (!v7)
        sub_10025FD1C();
      return (*(uint64_t (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v7 + 48))(v7, buf, &v11);
    }
  }
  return result;
}

uint64_t sub_10135C9EC(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  CFAbsoluteTime Current;
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  unsigned __int8 v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  double v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[23];
  __int16 v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD v84[6];
  char v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[25];
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  __int16 v112;
  __int128 v113;
  __int128 v114;
  char v115;
  _BYTE v116[11];
  int v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  int v167;
  unint64_t v168;
  __int16 v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  CFAbsoluteTime v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint8_t buf[4];
  uint64_t v195;
  __int16 v196;
  int v197;
  __int16 v198;
  double v199;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
    v2 = v1 == 26;
  else
    v2 = 1;
  if (v2)
    return result;
  v3 = result;
  if (sub_10135C3EC((double *)result))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B0A68);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(v3 + 16);
      *(_DWORD *)buf = 134217984;
      v195 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,wrist,type,%ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B0A68);
      v25 = *(_QWORD *)(v3 + 16);
      *(_DWORD *)v71 = 134217984;
      *(_QWORD *)&v71[4] = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "WorkoutStopDetected,wrist,type,%ld", v71);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    sub_10135D470((uint64_t *)v3, 0, 0, 0);
    *(_QWORD *)(v3 + 56) = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v193 = 0;
    v191 = 0u;
    v192 = 0u;
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    v182 = 0u;
    v180 = 0u;
    v178 = 3;
    v179 = Current;
    *(_DWORD *)buf = 1;
    v8 = *(_QWORD *)(v3 + 96);
    if (!v8)
      sub_10025FD1C();
    *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v8 + 48))(v8, buf, &v178));
    return result;
  }
  if (*(_DWORD *)(v3 + 64) == 2)
  {
    v9 = *(_QWORD *)(v3 + 16);
    v10 = (v9 > 0x31) | (0x1BF87F77FFFEFuLL >> v9);
    v11 = v9 != 14;
    if ((v10 & 1) != 0)
    {
      if (v11 | (*(_QWORD *)(v3 + 24) > 0x2DuLL) | (0x1FBFFFD5DFFFuLL >> *(_QWORD *)(v3 + 24)) & 1)
      {
        v12 = atomic_load((unsigned __int8 *)&qword_10230E568);
        if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_10230E568))
        {
          *(_DWORD *)buf = 8;
          sub_100546300(qword_10230E550, buf, 1uLL);
          __cxa_atexit((void (*)(void *))sub_100546380, qword_10230E550, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_10230E568);
        }
        v79 = 0;
        *(_OWORD *)v71 = xmmword_101BB1ED0;
        *(_OWORD *)&v71[16] = 0u;
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        memset(v78, 0, sizeof(v78));
        v80 = xmmword_101BB1ED0;
        v81 = 0;
        v82 = 0;
        v84[0] = 0;
        v83 = 0;
        *(_QWORD *)((char *)v84 + 5) = 0;
        *(_QWORD *)((char *)&v84[1] + 6) = 0;
        v85 = 0;
        memset(&v84[3], 0, 24);
        v86 = xmmword_101BB1ED0;
        v87 = 0;
        v88 = 0;
        v89 = 0xFFEFFFFFFFFFFFFFLL;
        v100 = 0;
        v90 = 0u;
        v91 = 0u;
        v92 = 0u;
        v93 = 0u;
        v94 = 0u;
        v95 = 0;
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        memset(v99, 0, sizeof(v99));
        v101 = 0;
        v102 = 0;
        v103 = 0xFFEFFFFFFFFFFFFFLL;
        v104 = 0;
        v105 = 0;
        v111 = 0;
        v112 = 0;
        v117 = 0;
        v110 = 0;
        v109 = 0u;
        v108 = 0u;
        v107 = 0u;
        v106 = 0u;
        v114 = 0u;
        v113 = 0u;
        v115 = 0;
        memset(v116, 0, sizeof(v116));
        v118 = 0xFFEFFFFFFFFFFFFFLL;
        v137 = 0u;
        v136 = 0u;
        v135 = 0u;
        v134 = 0u;
        v133 = 0u;
        v132 = 0u;
        v131 = 0u;
        v130 = 0u;
        v129 = 0u;
        v128 = 0u;
        v127 = 0u;
        v126 = 0u;
        v125 = 0u;
        v124 = 0u;
        v123 = 0u;
        v122 = 0u;
        v121 = 0u;
        v120 = 0u;
        v119 = 0u;
        v138 = 0;
        v139 = 0xFFEFFFFFFFFFFFFFLL;
        v140 = 0u;
        v141 = 0u;
        v142 = 0u;
        v143 = 0u;
        v144 = 0xFFEFFFFFFFFFFFFFLL;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v149 = 0xFFEFFFFFFFFFFFFFLL;
        v151 = 0;
        v150 = 0;
        v152 = 0x80000000800000;
        v154 = 0;
        v153 = 0;
        v155 = xmmword_101BB1EE0;
        v156 = 0x80000000800000;
        v157 = 0u;
        v158 = 0u;
        v159 = 0;
        v160 = 0xFFEFFFFFFFFFFFFFLL;
        v161 = 0u;
        v162 = 0u;
        v163 = 0u;
        v164 = 0u;
        v165 = 0u;
        v166 = 0u;
        v167 = 0;
        v168 = 0xFFEFFFFFFFFFFFFFLL;
        v169 = 0;
        v170 = 0;
        v171 = 0xFFEFFFFFFFFFFFFFLL;
        v172 = 7;
        v173 = 0xFFEFFFFFFFFFFFFFLL;
        v174 = 0;
        v176 = 0;
        v175 = 0;
        v177 = 0;
        if (sub_1000D03AC(*(double **)(v3 + 8), qword_10230E550, (uint64_t)v71))
        {
          v13 = BYTE8(v128);
          if (BYTE8(v128))
          {
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_1021B0A88);
            v14 = qword_10229FE68;
            if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
            {
              v15 = *(_QWORD *)(v3 + 16);
              *(_DWORD *)buf = 134218240;
              v195 = v15;
              v196 = 1024;
              v197 = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,vehicleSpeedConstrainedArm,type,%ld,constrainedState,%d", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FE60 != -1)
                dispatch_once(&qword_10229FE60, &stru_1021B0A88);
              v33 = *(_QWORD *)(v3 + 16);
              v67 = 134218240;
              v68 = v33;
              v69 = 1024;
              v70 = v13;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutStopDetected,vehicleSpeedConstrainedArm,type,%ld,constrainedState,%d", &v67, 18);
              v35 = (uint8_t *)v34;
              sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v34);
              if (v35 != buf)
                free(v35);
            }
            sub_10135D470((uint64_t *)v3, 0, 0, 0);
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 296);
            v53 = 0u;
            v54 = 0u;
            v55 = 0u;
            v56 = 0u;
            v57 = 0u;
            v58 = 0u;
            v59 = 0u;
            v60 = 0u;
            v61 = 0u;
            v62 = 0u;
            v63 = 0u;
            v64 = 0u;
            v65 = 0u;
            v66 = 0;
            v51 = 11;
            v52 = v16;
            *(_DWORD *)buf = 1;
            v17 = *(_QWORD *)(v3 + 96);
            if (!v17)
              sub_10025FD1C();
            *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v17 + 48))(v17, buf, &v51));
            return result;
          }
        }
        else
        {
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021B0A88);
          v18 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to get constrainedArm state", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_1021B0A88);
            LOWORD(v67) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Failed to get constrainedArm state", &v67, 2);
            v32 = (uint8_t *)v31;
            sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
        }
      }
    }
  }
  result = *(uint64_t *)v3;
  if (*(_QWORD *)v3)
  {
    *(double *)&result = COERCE_DOUBLE((**(uint64_t (***)(uint64_t, _QWORD))result)(result, *(_QWORD *)(v3 + 8)));
    v20 = *(double *)&result;
    if ((_DWORD)result)
    {
      v21 = v19;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B0A88);
      v22 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_QWORD *)(v3 + 16);
        *(_DWORD *)buf = 134218496;
        v195 = v23;
        v196 = 1024;
        v197 = LODWORD(v20);
        v198 = 2048;
        v199 = v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "WorkoutStopDetected,type,%ld,stopReason,%d,stopTimestamp,%f", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021B0A88);
        v28 = *(_QWORD *)(v3 + 16);
        *(_DWORD *)v71 = 134218496;
        *(_QWORD *)&v71[4] = v28;
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = LODWORD(v20);
        *(_WORD *)&v71[18] = 2048;
        *(double *)&v71[20] = v21;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "WorkoutStopDetected,type,%ld,stopReason,%d,stopTimestamp,%f", v71, 28, v36[0]);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_10135D470((uint64_t *)v3, 0, 0, 0);
      v50 = 0;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      v36[0] = v20;
      v36[1] = v21;
      *(_DWORD *)buf = 1;
      v24 = *(_QWORD *)(v3 + 96);
      if (!v24)
        sub_10025FD1C();
      *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint8_t *, double *))(*(_QWORD *)v24 + 48))(v24, buf, v36));
    }
  }
  return result;
}

void sub_10135D44C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E568);
  _Unwind_Resume(a1);
}

void sub_10135D470(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _DWORD buf[3];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021B0A88);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 134349568;
    *(_QWORD *)&buf[1] = a2;
    v32 = 2050;
    v33 = a3;
    v34 = 2050;
    v35 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector::selectModel,type,%{public}ld,location,%{public}ld,startType,%{public}ld", (uint8_t *)buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B0A88);
    v25 = 134349568;
    v26 = a2;
    v27 = 2050;
    v28 = a3;
    v29 = 2050;
    v30 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutStopDetector::selectModel,type,%{public}ld,location,%{public}ld,startType,%{public}ld", &v25, 32);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::selectModel(CMWorkoutType, CMWorkoutLocationType, CLWorkoutStopModel::StartType)", "%s\n", v18);
    if (v19 != (char *)buf)
      free(v19);
  }
  v9 = sub_100F72BB4(a2, a3);
  if (a1[2] == v9)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B0A88);
    v10 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v11 = a1[2];
      buf[0] = 134349312;
      *(_QWORD *)&buf[1] = v11;
      v32 = 2050;
      v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector,workout type did not change,not updating models,currentTypeWithLocation,%{public}ld,newTypeWithLocation,%{public}ld", (uint8_t *)buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B0A88);
      v12 = a1[2];
      v25 = 134349312;
      v26 = v12;
      v27 = 2050;
      v28 = v9;
      LODWORD(v22) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutStopDetector,workout type did not change,not updating models,currentTypeWithLocation,%{public}ld,newTypeWithLocation,%{public}ld", &v25, v22);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::selectModel(CMWorkoutType, CMWorkoutLocationType, CLWorkoutStopModel::StartType)", "%s\n", v13);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B0A88);
    v15 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 134218496;
      *(_QWORD *)&buf[1] = a2;
      v32 = 2048;
      v33 = a3;
      v34 = 2048;
      v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector::selectModel,workoutType,%ld,locationType,%ld,typeWithLocation,%ld", (uint8_t *)buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B0A88);
      v25 = 134218496;
      v26 = a2;
      v27 = 2048;
      v28 = a3;
      v29 = 2048;
      v30 = v9;
      LODWORD(v22) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutStopDetector::selectModel,workoutType,%ld,locationType,%ld,typeWithLocation,%ld", &v25, v22, v23);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutStopDetector::selectModel(CMWorkoutType, CMWorkoutLocationType, CLWorkoutStopModel::StartType)", "%s\n", v20);
      if (v21 != (char *)buf)
        free(v21);
    }
    a1[2] = v9;
    switch(v9)
    {
      case 0:
      case 66:
        v17 = *a1;
        *a1 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
        a1[2] = 0;
        break;
      case 1:
      case 2:
        sub_10135DE8C();
      case 3:
      case 7:
      case 8:
      case 10:
      case 13:
      case 20:
      case 21:
      case 23:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
        v16 = *a1;
        *a1 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        break;
      case 4:
        sub_10135E114();
      case 5:
        sub_10135E04C();
      case 6:
        operator new();
      case 9:
        sub_10135DF74();
      case 11:
        sub_10135E0B0();
      case 12:
        sub_10135DF00();
      case 14:
      case 22:
        sub_10135E1AC();
      case 15:
      case 17:
      case 24:
        operator new();
      case 16:
      case 18:
        sub_10135DFE8();
      case 19:
        sub_10135E220();
      default:
        return;
    }
  }
}

void sub_10135DAC8()
{
  operator delete();
}

double sub_10135DC00(uint64_t a1, uint64_t a2)
{
  double result;
  char v3;

  result = -1.0;
  v3 = a1 - 5;
  if ((unint64_t)(a1 - 5) <= 0x3C)
  {
    if (((1 << v3) & 0x1FFFE00000000200) != 0)
    {
      return sub_10135DC78(a2);
    }
    else if (((1 << v3) & 0x2B800057) != 0)
    {
      return 200.0;
    }
    else if (((1 << v3) & 0x1DBC04000000) != 0)
    {
      return 1000.0;
    }
  }
  return result;
}

double sub_10135DC78(uint64_t a1)
{
  NSObject *v4;
  double v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v9 = 0;
  if ((sub_100F72F68(a1, &v9) & 1) != 0)
  {
    if ((unint64_t)(v9 - 13) <= 0x3E && ((1 << (v9 - 13)) & 0x464585930F4C2951) != 0
      || v9 == 2)
    {
      return -1.0;
    }
    else
    {
      return 1000.0;
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B0A88);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector,invalid generic workout label received,%lu", buf, 0xCu);
    }
    v6 = 1000.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B0A88);
      v10 = 134217984;
      v11 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutStopDetector,invalid generic workout label received,%lu", &v10);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "static double CLWorkoutStopDetector::getGeoFenceRadiusForGenericWorkout(unsigned long)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return v6;
}

void sub_10135DE8C()
{
  operator new();
}

void sub_10135DEDC()
{
  operator delete();
}

void sub_10135DF00()
{
  operator new();
}

void sub_10135DF50()
{
  operator delete();
}

void sub_10135DF74()
{
  operator new();
}

void sub_10135DFC4()
{
  operator delete();
}

void sub_10135DFE8()
{
  operator new();
}

void sub_10135E028()
{
  operator delete();
}

void sub_10135E04C()
{
  operator new();
}

void sub_10135E08C()
{
  operator delete();
}

void sub_10135E0B0()
{
  operator new();
}

void sub_10135E0F0()
{
  operator delete();
}

void sub_10135E114()
{
  operator new();
}

void sub_10135E188()
{
  operator delete();
}

void sub_10135E1AC()
{
  operator new();
}

void sub_10135E1FC()
{
  operator delete();
}

void sub_10135E220()
{
  operator new();
}

void sub_10135E2A4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10135E2D0(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_10135E2FC(uint64_t a1, int a2)
{
  _QWORD *v4;
  char v6;

  sub_1005AA3C8(a1);
  *v4 = off_1021B0AB8;
  if (a2 == 1)
    sub_10023195C(a1 + 8, 1, (uint64_t)&v6);
  return a1;
}

void sub_10135E354(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1021465E0;
  v1[56] = off_10215FBA0;
  v3 = (void *)v1[61];
  if (v3)
  {
    v1[62] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10135E390(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021465E0;
  a1[56] = off_10215FBA0;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10135E3E0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021465E0;
  a1[56] = off_10215FBA0;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10135E440(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10215FBA0;
  *(_OWORD *)(result + 8) = xmmword_101BB1EC0;
  *(_QWORD *)(result + 24) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = 1;
  *(_DWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 84) = 75;
  *(_DWORD *)(result + 76) = 0;
  *(_QWORD *)(result + 392) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_QWORD *)(result + 408) = 0xC08F380000000000;
  *(_QWORD *)(result + 416) = 0xC08F380000000000;
  *(_BYTE *)(result + 424) = 0;
  *(_QWORD *)(result + 432) = 0;
  *(_BYTE *)(result + 440) = 0;
  if (a2 == 22 || a2 == 11)
    *(_QWORD *)(result + 8) = 0x4049000000000000;
  return result;
}

uint64_t sub_10135E4BC()
{
  sub_1015A2E04(qword_10230E538, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E538, (void *)&_mh_execute_header);
}

uint64_t sub_10135E500()
{
  __n128 v0;
  __n128 v1;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v0.n128_u64[0] = 0x5A5A5A5A5A5A5A5ALL;
  v0.n128_u64[1] = 0x5A5A5A5A5A5A5A5ALL;
  v1.n128_u64[0] = 0x5555555555555555;
  v1.n128_u64[1] = 0x5555555555555555;
  v2.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
  v2.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
  v3.n128_u64[0] = 0x5555555555555555;
  v3.n128_u64[1] = 0x5555555555555555;
  v4.n128_u64[0] = 0x1111111111111111;
  v4.n128_u64[1] = 0x1111111111111111;
  v5.n128_u64[0] = 0x2222222222222222;
  v5.n128_u64[1] = 0x2222222222222222;
  v6.n128_u64[0] = 0x3333333333333333;
  v6.n128_u64[1] = 0x3333333333333333;
  return sub_10135E5D4(v0, v1, v2, v3, (__n128)0, v4, v5, v6);
}

float64x2_t *sub_10135E5D4@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unsigned int a7@<W7>, unsigned int a8@<W8>, float64x2_t a9@<Q1>, float64x2_t a10@<Q4>, float64x2_t a11@<Q5>, float64x2_t a12@<Q6>, float64x2_t a13@<Q7>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t i;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  BOOL v364;

  do
  {
    v43 = *result;
    v44 = result[1];
    v45 = vmlaq_f64(a10, a9, v33);
    v46 = vmlaq_f64(a11, a9, v34);
    v47 = result[2];
    v48 = result[3];
    v49 = vmlaq_f64(a12, v35, a9);
    v50 = vmlaq_f64(a13, v36, a9);
    v51 = result[4];
    v52 = result[5];
    v53 = vmlaq_f64(v23, a9, v37);
    v54 = vmlaq_f64(v24, a9, v38);
    v55 = result[6];
    v56 = result[7];
    v57 = vmlaq_f64(v25, v39, a9);
    v58 = vmlaq_f64(v26, v40, a9);
    v59 = result[8];
    v60 = result[9];
    v61 = vmlaq_f64(v27, a9, v41);
    v62 = vmlaq_f64(v28, a9, v42);
    *a2 = *result;
    a2[1] = v44;
    v63 = vmlaq_f64(v31, a9, v44);
    v64 = vmlaq_f64(v32, v41, a9);
    v65 = a4 - 64;
    v66 = result[10];
    v67 = result[11];
    v68 = vmlaq_f64(v29, v43, a9);
    v69 = vmlaq_f64(v30, v44, a9);
    v70 = *result;
    v71 = result[1];
    v72 = vmlaq_f64(v45, a9, v47);
    v73 = vmlaq_f64(v46, a9, v48);
    v74 = result[2];
    v75 = result[3];
    v76 = vmlaq_f64(v49, v51, a9);
    v77 = vmlaq_f64(v50, v52, a9);
    v78 = result[4];
    v79 = result[5];
    v80 = vmlaq_f64(v53, a9, v55);
    v81 = vmlaq_f64(v54, a9, v56);
    v82 = result[6];
    v83 = result[7];
    v84 = vmlaq_f64(v57, v59, a9);
    v85 = vmlaq_f64(v58, v60, a9);
    a2[2] = v66;
    a2[3] = v67;
    v86 = vmlaq_f64(v63, v67, a9);
    v87 = vmlaq_f64(v64, a9, v59);
    v88 = result[8];
    v89 = result[9];
    v90 = vmlaq_f64(v61, a9, v66);
    v91 = vmlaq_f64(v62, a9, v67);
    v92 = result[10];
    v93 = result[11];
    v94 = vmlaq_f64(v68, v70, a9);
    for (i = vmlaq_f64(v69, v71, a9); v65 >= 0; i = vmlaq_f64(v253, v255, a9))
    {
      v96 = *result;
      v97 = result[1];
      v98 = vmlaq_f64(v72, a9, v74);
      v99 = vmlaq_f64(v73, a9, v75);
      v100 = result[2];
      v101 = result[3];
      v102 = vmlaq_f64(v76, v78, a9);
      v103 = vmlaq_f64(v77, v79, a9);
      v104 = result[4];
      v105 = result[5];
      v106 = vmlaq_f64(v80, a9, v82);
      v107 = vmlaq_f64(v81, a9, v83);
      a2[4] = v88;
      a2[5] = v89;
      v108 = vmlaq_f64(v86, a9, v89);
      v109 = vmlaq_f64(v87, v82, a9);
      v110 = result[6];
      v111 = result[7];
      v112 = vmlaq_f64(v84, v88, a9);
      v113 = vmlaq_f64(v85, v89, a9);
      v114 = result[8];
      v115 = result[9];
      v116 = vmlaq_f64(v90, a9, v92);
      v117 = vmlaq_f64(v91, a9, v93);
      v118 = result[10];
      v119 = result[11];
      v120 = vmlaq_f64(v94, v96, a9);
      v121 = vmlaq_f64(i, v97, a9);
      v122 = *result;
      v123 = result[1];
      v124 = vmlaq_f64(v98, a9, v100);
      v125 = vmlaq_f64(v99, a9, v101);
      v126 = result[2];
      v127 = result[3];
      v128 = vmlaq_f64(v102, v104, a9);
      v129 = vmlaq_f64(v103, v105, a9);
      a2[6] = v110;
      a2[7] = v111;
      v130 = vmlaq_f64(v108, v111, a9);
      v131 = vmlaq_f64(v109, a9, v104);
      v132 = result[4];
      v133 = result[5];
      v134 = vmlaq_f64(v106, a9, v110);
      v135 = vmlaq_f64(v107, a9, v111);
      v136 = result[6];
      v137 = result[7];
      v138 = vmlaq_f64(v112, v114, a9);
      v139 = vmlaq_f64(v113, v115, a9);
      v140 = result[8];
      v141 = result[9];
      v142 = vmlaq_f64(v116, a9, v118);
      v143 = vmlaq_f64(v117, a9, v119);
      v144 = result[10];
      v145 = result[11];
      v146 = vmlaq_f64(v120, v122, a9);
      v147 = vmlaq_f64(v121, v123, a9);
      v148 = *result;
      v149 = result[1];
      v150 = vmlaq_f64(v124, a9, v126);
      v151 = vmlaq_f64(v125, a9, v127);
      a2[8] = v132;
      a2[9] = v133;
      v152 = vmlaq_f64(v130, a9, v133);
      v153 = vmlaq_f64(v131, v126, a9);
      v154 = result[2];
      v155 = result[3];
      v156 = vmlaq_f64(v128, v132, a9);
      v157 = vmlaq_f64(v129, v133, a9);
      v158 = result[4];
      v159 = result[5];
      v160 = vmlaq_f64(v134, a9, v136);
      v161 = vmlaq_f64(v135, a9, v137);
      v162 = result[6];
      v163 = result[7];
      v164 = vmlaq_f64(v138, v140, a9);
      v165 = vmlaq_f64(v139, v141, a9);
      v166 = result[8];
      v167 = result[9];
      v168 = vmlaq_f64(v142, a9, v144);
      v169 = vmlaq_f64(v143, a9, v145);
      v170 = result[10];
      v171 = result[11];
      v172 = vmlaq_f64(v146, v148, a9);
      v173 = vmlaq_f64(v147, v149, a9);
      a2[10] = v154;
      a2[11] = v155;
      v174 = vmlaq_f64(v152, v155, a9);
      v175 = vmlaq_f64(v153, a9, v148);
      v176 = result[12];
      v177 = result[13];
      v178 = vmlaq_f64(v150, a9, v154);
      v179 = vmlaq_f64(v151, a9, v155);
      v180 = result[2];
      v181 = result[3];
      v182 = vmlaq_f64(v156, v158, a9);
      v183 = vmlaq_f64(v157, v159, a9);
      v184 = result[4];
      v185 = result[5];
      v186 = vmlaq_f64(v160, a9, v162);
      v187 = vmlaq_f64(v161, a9, v163);
      v188 = result[6];
      v189 = result[7];
      v190 = vmlaq_f64(v164, v166, a9);
      v191 = vmlaq_f64(v165, v167, a9);
      v192 = result[8];
      v193 = result[9];
      v194 = vmlaq_f64(v168, a9, v170);
      v195 = vmlaq_f64(v169, a9, v171);
      a2[12] = v176;
      a2[13] = v177;
      v196 = vmlaq_f64(v174, a9, v177);
      v197 = vmlaq_f64(v175, v170, a9);
      v198 = result[14];
      v199 = result[15];
      v200 = vmlaq_f64(v172, v176, a9);
      v201 = vmlaq_f64(v173, v177, a9);
      v202 = *result;
      v203 = result[1];
      v204 = vmlaq_f64(v178, a9, v180);
      v205 = vmlaq_f64(v179, a9, v181);
      v206 = result[2];
      v207 = result[3];
      v208 = vmlaq_f64(v182, v184, a9);
      v209 = vmlaq_f64(v183, v185, a9);
      v210 = result[4];
      v211 = result[5];
      v212 = vmlaq_f64(v186, a9, v188);
      v213 = vmlaq_f64(v187, a9, v189);
      v214 = result[6];
      v215 = result[7];
      v216 = vmlaq_f64(v190, v192, a9);
      v217 = vmlaq_f64(v191, v193, a9);
      a2[14] = v198;
      a2[15] = v199;
      v218 = vmlaq_f64(v196, v199, a9);
      v219 = vmlaq_f64(v197, a9, v192);
      a2 += 16;
      v220 = result[8];
      v221 = result[9];
      v222 = vmlaq_f64(v194, a9, v198);
      v223 = vmlaq_f64(v195, a9, v199);
      v224 = result[10];
      v225 = result[11];
      v226 = vmlaq_f64(v200, v202, a9);
      v227 = vmlaq_f64(v201, v203, a9);
      result += 16;
      v228 = *result;
      v229 = result[1];
      v230 = vmlaq_f64(v204, a9, v206);
      v231 = vmlaq_f64(v205, a9, v207);
      v232 = result[2];
      v233 = result[3];
      v234 = vmlaq_f64(v208, v210, a9);
      v235 = vmlaq_f64(v209, v211, a9);
      v236 = result[4];
      v237 = result[5];
      v238 = vmlaq_f64(v212, a9, v214);
      v239 = vmlaq_f64(v213, a9, v215);
      v240 = result[6];
      v241 = result[7];
      v242 = vmlaq_f64(v216, v220, a9);
      v243 = vmlaq_f64(v217, v221, a9);
      v244 = result[8];
      v245 = result[9];
      v246 = vmlaq_f64(v222, a9, v224);
      v247 = vmlaq_f64(v223, a9, v225);
      *a2 = *result;
      a2[1] = v229;
      v248 = vmlaq_f64(v218, a9, v229);
      v249 = vmlaq_f64(v219, v224, a9);
      v65 -= 32;
      v250 = result[10];
      v251 = result[11];
      v252 = vmlaq_f64(v226, v228, a9);
      v253 = vmlaq_f64(v227, v229, a9);
      v254 = *result;
      v255 = result[1];
      v72 = vmlaq_f64(v230, a9, v232);
      v73 = vmlaq_f64(v231, a9, v233);
      v74 = result[2];
      v75 = result[3];
      v76 = vmlaq_f64(v234, v236, a9);
      v77 = vmlaq_f64(v235, v237, a9);
      v78 = result[4];
      v79 = result[5];
      v80 = vmlaq_f64(v238, a9, v240);
      v81 = vmlaq_f64(v239, a9, v241);
      v82 = result[6];
      v83 = result[7];
      v84 = vmlaq_f64(v242, v244, a9);
      v85 = vmlaq_f64(v243, v245, a9);
      a2[2] = v250;
      a2[3] = v251;
      v86 = vmlaq_f64(v248, v251, a9);
      v87 = vmlaq_f64(v249, a9, v244);
      v88 = result[8];
      v89 = result[9];
      v90 = vmlaq_f64(v246, a9, v250);
      v91 = vmlaq_f64(v247, a9, v251);
      v92 = result[10];
      v93 = result[11];
      v94 = vmlaq_f64(v252, v254, a9);
    }
    v256 = *result;
    v257 = result[1];
    v258 = vmlaq_f64(v72, a9, v74);
    v259 = vmlaq_f64(v73, a9, v75);
    v260 = result[2];
    v261 = result[3];
    v262 = vmlaq_f64(v76, v78, a9);
    v263 = vmlaq_f64(v77, v79, a9);
    v264 = result[4];
    v265 = result[5];
    v266 = vmlaq_f64(v80, a9, v82);
    v267 = vmlaq_f64(v81, a9, v83);
    a2[4] = v88;
    a2[5] = v89;
    v268 = vmlaq_f64(v86, a9, v89);
    v269 = vmlaq_f64(v87, v82, a9);
    v270 = result[6];
    v271 = result[7];
    v272 = vmlaq_f64(v84, v88, a9);
    v273 = vmlaq_f64(v85, v89, a9);
    v274 = result[8];
    v275 = result[9];
    v276 = vmlaq_f64(v90, a9, v92);
    v277 = vmlaq_f64(v91, a9, v93);
    v278 = result[10];
    v279 = result[11];
    v280 = vmlaq_f64(v94, v256, a9);
    v281 = vmlaq_f64(i, v257, a9);
    v282 = *result;
    v283 = result[1];
    v284 = vmlaq_f64(v258, a9, v260);
    v285 = vmlaq_f64(v259, a9, v261);
    v286 = result[2];
    v287 = result[3];
    v288 = vmlaq_f64(v262, v264, a9);
    v289 = vmlaq_f64(v263, v265, a9);
    a2[6] = v270;
    a2[7] = v271;
    v290 = vmlaq_f64(v268, v271, a9);
    v291 = vmlaq_f64(v269, a9, v264);
    v292 = result[4];
    v293 = result[5];
    v294 = vmlaq_f64(v266, a9, v270);
    v295 = vmlaq_f64(v267, a9, v271);
    v296 = result[6];
    v297 = result[7];
    v298 = vmlaq_f64(v272, v274, a9);
    v299 = vmlaq_f64(v273, v275, a9);
    v300 = result[8];
    v301 = result[9];
    v302 = vmlaq_f64(v276, a9, v278);
    v303 = vmlaq_f64(v277, a9, v279);
    v304 = result[10];
    v305 = result[11];
    v306 = vmlaq_f64(v280, v282, a9);
    v307 = vmlaq_f64(v281, v283, a9);
    v308 = *result;
    v309 = result[1];
    v310 = vmlaq_f64(v284, a9, v286);
    v311 = vmlaq_f64(v285, a9, v287);
    a2[8] = v292;
    a2[9] = v293;
    v312 = vmlaq_f64(v290, a9, v293);
    v313 = vmlaq_f64(v291, v286, a9);
    v314 = result[2];
    v315 = result[3];
    v316 = vmlaq_f64(v288, v292, a9);
    v317 = vmlaq_f64(v289, v293, a9);
    v318 = result[4];
    v319 = result[5];
    v320 = vmlaq_f64(v294, a9, v296);
    v321 = vmlaq_f64(v295, a9, v297);
    v322 = result[6];
    v323 = result[7];
    v324 = vmlaq_f64(v298, v300, a9);
    v325 = vmlaq_f64(v299, v301, a9);
    v326 = result[8];
    v327 = result[9];
    v328 = vmlaq_f64(v302, a9, v304);
    v329 = vmlaq_f64(v303, a9, v305);
    v330 = result[10];
    v331 = result[11];
    v332 = vmlaq_f64(v306, v308, a9);
    v333 = vmlaq_f64(v307, v309, a9);
    a2[10] = v314;
    a2[11] = v315;
    v334 = vmlaq_f64(v312, v315, a9);
    v335 = vmlaq_f64(v313, a9, v308);
    v336 = result[12];
    v337 = result[13];
    v338 = vmlaq_f64(v310, a9, v314);
    v339 = vmlaq_f64(v311, a9, v315);
    v340 = result[2];
    v341 = result[3];
    v342 = vmlaq_f64(v316, v318, a9);
    v343 = vmlaq_f64(v317, v319, a9);
    v344 = result[4];
    v345 = result[5];
    v346 = vmlaq_f64(v320, a9, v322);
    v347 = vmlaq_f64(v321, a9, v323);
    v348 = result[6];
    v349 = result[7];
    v350 = vmlaq_f64(v324, v326, a9);
    v351 = vmlaq_f64(v325, v327, a9);
    v352 = result[8];
    v353 = result[9];
    v354 = vmlaq_f64(v328, a9, v330);
    v355 = vmlaq_f64(v329, a9, v331);
    v15 += a7 * (unint64_t)v19;
    a2[12] = v336;
    a2[13] = v337;
    v356 = vmlaq_f64(v334, a9, v337);
    v357 = vmlaq_f64(v335, v330, a9);
    a4 = a6;
    v16 += a8 * (unint64_t)v20;
    v358 = result[14];
    v359 = result[15];
    v360 = vmlaq_f64(v332, v336, a9);
    v361 = vmlaq_f64(v333, v337, a9);
    v362 = *result;
    v363 = result[1];
    v17 += v20 * (unint64_t)a7;
    a10 = vmlaq_f64(v338, a9, v340);
    a11 = vmlaq_f64(v339, a9, v341);
    v33 = result[2];
    v34 = result[3];
    v364 = a5-- <= 1;
    a12 = vmlaq_f64(v342, v344, a9);
    a13 = vmlaq_f64(v343, v345, a9);
    v35 = result[4];
    v36 = result[5];
    v23 = vmlaq_f64(v346, a9, v348);
    v24 = vmlaq_f64(v347, a9, v349);
    v37 = result[6];
    v38 = result[7];
    v25 = vmlaq_f64(v350, v352, a9);
    v26 = vmlaq_f64(v351, v353, a9);
    a2[14] = v358;
    a2[15] = v359;
    v31 = vmlaq_f64(v356, v359, a9);
    v32 = vmlaq_f64(v357, a9, v352);
    v39 = result[8];
    v40 = result[9];
    v27 = vmlaq_f64(v354, a9, v358);
    v28 = vmlaq_f64(v355, a9, v359);
    a2 = v22;
    v41 = result[10];
    v42 = result[11];
    v29 = vmlaq_f64(v360, v362, a9);
    v30 = vmlaq_f64(v361, v363, a9);
    result = v21;
  }
  while (!v364);
  if (a3)
  {
    *(float64x2_t *)a3 = a10;
    *(float64x2_t *)(a3 + 16) = a11;
    *(float64x2_t *)(a3 + 32) = a12;
    *(float64x2_t *)(a3 + 48) = a13;
    *(float64x2_t *)(a3 + 64) = v23;
    *(float64x2_t *)(a3 + 80) = v24;
    *(float64x2_t *)(a3 + 96) = v25;
    *(float64x2_t *)(a3 + 112) = v26;
    *(float64x2_t *)(a3 + 128) = v27;
    *(float64x2_t *)(a3 + 144) = v28;
    *(float64x2_t *)(a3 + 160) = v29;
    *(float64x2_t *)(a3 + 176) = v30;
    *(float64x2_t *)(a3 + 192) = v31;
    *(float64x2_t *)(a3 + 208) = v32;
    *(float64x2_t *)(a3 + 224) = v362;
    *(float64x2_t *)(a3 + 240) = v363;
    *(float64x2_t *)(a3 + 256) = vmlaq_f64(v363, v363, a9);
    *(float64x2_t *)(a3 + 272) = v33;
    *(float64x2_t *)(a3 + 288) = v34;
    *(float64x2_t *)(a3 + 304) = v35;
    *(float64x2_t *)(a3 + 320) = v36;
    *(float64x2_t *)(a3 + 336) = v37;
    *(float64x2_t *)(a3 + 352) = v39;
    *(float64x2_t *)(a3 + 368) = v40;
    *(float64x2_t *)(a3 + 384) = v41;
    *(float64x2_t *)(a3 + 400) = v42;
    *(_QWORD *)(a3 + 416) = v13;
    *(_QWORD *)(a3 + 424) = v14;
    *(_QWORD *)(a3 + 432) = v15;
    *(_QWORD *)(a3 + 440) = v16;
    *(_QWORD *)(a3 + 448) = v17;
    *(_QWORD *)(a3 + 456) = v18;
  }
  return result;
}

BOOL sub_10135F000(void *a1, void *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  objc_msgSend(a2, "latitude");
  v5 = v4;
  objc_msgSend(a2, "longitude");
  v7 = v6;
  objc_msgSend(objc_msgSend(a1, "location"), "latitude");
  v9 = v8;
  objc_msgSend(objc_msgSend(a1, "location"), "longitude");
  v11 = sub_100C9B0E8(v5, v7, v9, v10);
  objc_msgSend(objc_msgSend(a1, "location"), "horizontalUncertainty");
  return v12 + 50.0 >= v11;
}

void sub_10135F1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = *(_BYTE **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching home locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    }
    v7 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching home locations of interest", "{\"msg%{public}.0s\":\"error fetching home locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(v4, "setHomeLocations:", a2);
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

void sub_10135F398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = *(_BYTE **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching work locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    }
    v7 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching work locations of interest", "{\"msg%{public}.0s\":\"error fetching work locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(v4, "setWorkLocations:", a2);
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

void sub_10135F574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = *(_BYTE **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching school locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    }
    v7 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching school locations of interest", "{\"msg%{public}.0s\":\"error fetching school locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(v4, "setSchoolLocations:", a2);
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

void sub_10135F750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = *(_BYTE **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching gym locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    }
    v7 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching gym locations of interest", "{\"msg%{public}.0s\":\"error fetching gym locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(v4, "setGymLocations:", a2);
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

void sub_10135F92C(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  v2 = a1[4];
  if (*(_BYTE *)(v2 + 32))
  {
    ++*(_DWORD *)(v2 + 36);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"error fetching locations of interest\"}", (uint8_t *)&v5, 0x12u);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 36) = 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"finished fetching locations of interest\"}", (uint8_t *)&v5, 0x12u);
    }
    (*(void (**)(void))(a1[5] + 16))();
  }
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_10135FAC8(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B0B38);
  v1 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locations of interest have been fetched\"}", (uint8_t *)v2, 0x12u);
  }
}

NSDictionary *sub_10135FF60(void *a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("loiType");
  v4[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a1, "type"));
  v3[1] = CFSTR("loiTypeSource");
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a1, "typeSource"));
  v3[2] = CFSTR("lat");
  objc_msgSend(objc_msgSend(a1, "location"), "latitude");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v3[3] = CFSTR("lon");
  objc_msgSend(objc_msgSend(a1, "location"), "longitude");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v3[4] = CFSTR("uncertainty");
  objc_msgSend(objc_msgSend(a1, "location"), "horizontalUncertainty");
  v4[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v3[5] = CFSTR("confidence");
  objc_msgSend(a1, "confidence");
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

void sub_10136010C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_101360138(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  __n128 v5;
  int v6;

  *(_OWORD *)(a1 + 40) = 0u;
  v2 = (_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 88) = 0u;
  v3 = (_QWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v5.n128_u64[0] = CFAbsoluteTimeGetCurrent();
  v5.n128_u64[1] = 0x7FEFFFFFFFFFFFFFLL;
  v6 = 0;
  sub_1013601F8(v2, &v5);
  v5.n128_u64[0] = CFAbsoluteTimeGetCurrent();
  v5.n128_u64[1] = 0x7FEFFFFFFFFFFFFFLL;
  v6 = 1;
  sub_1013602A4(v3, &v5);
  return a1;
}

void sub_1013601D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_10047F660(v2);
  sub_10047F660(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1013601F8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101360F28(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

__n128 sub_1013602A4(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10136123C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_101360354(uint64_t a1, int a2, int a3, double a4)
{
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  const char *v21;
  int v22;
  int v23;
  uint8_t buf[8];
  _BYTE v25[12];
  int v26;

  v23 = a2;
  v7 = sub_1008B4EF8(&v23);
  v8 = v7;
  if (*(_DWORD *)(a1 + 32) == v7 && *(_BYTE *)a1)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      *(_WORD *)&v25[10] = 1025;
      v26 = v10;
      v11 = "{\"msg%{public}.0s\":\"On wrist status did not change\", \"status\":%{private}d}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v11, buf, 0x18u);
    }
  }
  else
  {
    *(double *)(a1 + 16) = a4;
    *(_DWORD *)(a1 + 32) = v7;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      *(_WORD *)&v25[10] = 1025;
      v26 = v12;
      v11 = "{\"msg%{public}.0s\":\"On wrist status changed\", \"status\":%{private}d}";
      goto LABEL_11;
    }
  }
  v13 = *(_QWORD *)(a1 + 80);
  if (!v13)
    sub_10194ED80();
  v14 = *(_QWORD *)(a1 + 72);
  v15 = v14 + v13 - 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v15 / 0xAA));
  v17 = v15 % 0xAA;
  if (v8 != *(_DWORD *)(v16 + 24 * v17 + 16))
  {
    *(double *)(v16 + 24 * v17 + 8) = a4;
    if (v13 >= 0x3C)
    {
      *(_QWORD *)(a1 + 72) = v14 + 1;
      *(_QWORD *)(a1 + 80) = v13 - 1;
      sub_10047FDC4(a1 + 40, 1);
    }
    *(double *)buf = a4;
    *(_QWORD *)v25 = 0x7FEFFFFFFFFFFFFFLL;
    *(_DWORD *)&v25[8] = v8;
    sub_1013606D8((_QWORD *)(a1 + 40), (__int128 *)buf);
  }
  if (*(unsigned __int8 *)(a1 + 3) == a3)
  {
    v18 = qword_10229FD90;
    if (*(_BYTE *)(a1 + 1))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B0B58);
      v19 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(unsigned __int8 *)(a1 + 3);
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v25 = 2082;
        *(_QWORD *)&v25[2] = "";
        *(_WORD *)&v25[10] = 1025;
        v26 = v20;
        v21 = "{\"msg%{public}.0s\":\"On charger status did not change\", \"status\":%{private}d}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, v21, buf, 0x18u);
        goto LABEL_29;
      }
      goto LABEL_29;
    }
  }
  else
  {
    v18 = qword_10229FD90;
  }
  *(double *)(a1 + 8) = a4;
  *(_BYTE *)(a1 + 3) = a3;
  *(_BYTE *)(a1 + 1) = 1;
  if (v18 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021B0B58);
  v19 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(unsigned __int8 *)(a1 + 3);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v25 = 2082;
    *(_QWORD *)&v25[2] = "";
    *(_WORD *)&v25[10] = 1025;
    v26 = v22;
    v21 = "{\"msg%{public}.0s\":\"On charger status changed\", \"status\":%{private}d}";
    goto LABEL_28;
  }
LABEL_29:
  *(_BYTE *)a1 = 1;
}

uint64_t sub_1013606D8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101360F28(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 / 0xAA));
  v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4080;
  return v15 - 24;
}

uint64_t sub_1013607C0(uint64_t result, int a2, double a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  __int128 v11;
  int v12;

  v3 = *(_QWORD *)(result + 128);
  if (!v3)
    sub_10194EEEC();
  v5 = *(_QWORD *)(result + 120);
  v6 = v5 + v3 - 1;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 96) + 8 * (v6 / 0xAA));
  v8 = v6 % 0xAA;
  if (*(_DWORD *)(v7 + 24 * v8 + 16) != a2)
  {
    v10 = (_QWORD *)(result + 88);
    *(double *)(result + 24) = a3;
    *(double *)(v7 + 24 * v8 + 8) = a3;
    if (v3 >= 0xA)
    {
      *(_QWORD *)(result + 120) = v5 + 1;
      *(_QWORD *)(result + 128) = v3 - 1;
      sub_10047FDC4(result + 88, 1);
    }
    *(double *)&v11 = a3;
    *((_QWORD *)&v11 + 1) = 0x7FEFFFFFFFFFFFFFLL;
    v12 = a2;
    return sub_101360888(v10, &v11);
  }
  return result;
}

uint64_t sub_101360888(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10136123C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 / 0xAA));
  v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4080;
  return v15 - 24;
}

uint64_t sub_101360970(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  int v31;
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  double v36;

  if (CFAbsoluteTimeGetCurrent() <= *(double *)(a1 + 16)
    || ((v31 = 2, v19 = sub_101360C8C(a3 + a6, a3 + a7, v18, a1 + 40, &v31), *(_BYTE *)(a1 + 2))
      ? (v20 = v19 == 0)
      : (v20 = 1),
        v20))
  {
    v21 = 0;
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    v22 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 68289283;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2049;
      v36 = a3;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Canceling alert because watch goes off-wrist after impact\", \"timeOfImpact\":\"%{private}f\"}", (uint8_t *)&v31, 0x1Cu);
    }
    v21 = 2;
  }
  if (CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 16))
  {
    v31 = 2;
    v24 = sub_101360D2C(a3 + a4, a3 + a5, v23, a1 + 40, &v31);
    if (*(_BYTE *)(a1 + 2))
    {
      if (v24)
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_1021B0B58);
        v25 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        {
          v31 = 68289283;
          v32 = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2049;
          v36 = a3;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Canceling alert because watch was off-wrist before impact\", \"timeOfImpact\":\"%{private}f\"}", (uint8_t *)&v31, 0x1Cu);
        }
        v21 = 1;
      }
    }
  }
  v26 = *(unsigned __int8 *)(a2 + 147);
  if (CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 24))
  {
    v31 = 0;
    v28 = sub_101360D2C(a3 + a8, a3 + a9, v27, a1 + 88, &v31);
    if (!v26 && *(_BYTE *)(a1 + 2) && v28)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B0B58);
      v29 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 68289283;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2049;
        v36 = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Canceling alert because watch was locked and had no motion before impact\", \"timeOfImpact\":\"%{private}f\"}", (uint8_t *)&v31, 0x1Cu);
      }
      return 3;
    }
  }
  return v21;
}

uint64_t sub_101360C8C(double a1, double a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v5 = *(unsigned int *)(a4 + 40);
  v6 = *(_QWORD *)(a4 + 32) - 1;
  while (1)
  {
    if ((int)v5 < 1)
      return 0;
    v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * ((v6 + v5) / 0xAAuLL));
    v8 = (v6 + v5) % 0xAAuLL;
    v9 = (double *)(v7 + 24 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 > v11)
      return 0;
    v12 = v10 > a1 || v11 < a1;
    if (!v12 || (v10 <= a2 ? (v13 = v11 < a2) : (v13 = 1), !v13 || (v10 >= a1 ? (v14 = v11 > a2) : (v14 = 1), !v14)))
    {
      if (*(_DWORD *)(v7 + 24 * v8 + 16) == *a5)
        break;
    }
    --v5;
    if (v10 < a1)
      return 0;
  }
  return 1;
}

uint64_t sub_101360D2C(double a1, double a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v5 = *(unsigned int *)(a4 + 40);
  v6 = *(_QWORD *)(a4 + 32) - 1;
  while (1)
  {
    if ((int)v5 < 1)
      return 0;
    v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * ((v6 + v5) / 0xAAuLL));
    v8 = (v6 + v5) % 0xAAuLL;
    v9 = (double *)(v7 + 24 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 > v11)
      return 0;
    v12 = v11 < a2 || v10 > a2;
    v13 = v12 || v10 > a1;
    v14 = v13 || v11 < a1;
    if (!v14 && *(_DWORD *)(v7 + 24 * v8 + 16) == *a5)
      break;
    --v5;
    if (v10 < a1)
      return 0;
  }
  return 1;
}

BOOL sub_101360DBC(uint64_t a1, int a2)
{
  double v4;
  double v5;
  NSObject *v6;
  int v7;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  double v16;

  v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 8);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021B0B58);
  v5 = fmax(v4, 0.0);
  v6 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 3);
    v10[0] = 68289539;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1025;
    v14 = v7;
    v15 = 2049;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against charger status\", \"status\":%{private}d, \"duration\":\"%{private}f\"}", (uint8_t *)v10, 0x22u);
  }
  if (*(_BYTE *)(a1 + 3))
    return 1;
  return v5 < (double)a2 && *(_BYTE *)(a1 + 2) != 0;
}

void sub_101360EFC(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_101360F28(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1013611F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10136123C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_101361504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_101361550()
{
  return os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT);
}

BOOL sub_101361564()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3480), OS_LOG_TYPE_INFO);
}

BOOL sub_101361574()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3480));
}

double sub_101361580(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B0C00);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_DWORD *)a2;
    v9 = *(_DWORD *)(a2 + 4);
    v10 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134219266;
    v34 = v5;
    v35 = 2048;
    v36 = v6;
    v37 = 2048;
    v38 = v7;
    v39 = 1024;
    v40 = v8;
    v41 = 1024;
    v42 = v9;
    v43 = 2080;
    v44 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Input, HR = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 32);
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *(_DWORD *)a2;
    v16 = *(_DWORD *)(a2 + 4);
    v17 = *(_QWORD *)(a1 + 8);
    v21 = 134219266;
    v22 = v12;
    v23 = 2048;
    v24 = v13;
    v25 = 2048;
    v26 = v14;
    v27 = 1024;
    v28 = v15;
    v29 = 1024;
    v30 = v16;
    v31 = 2080;
    v32 = v17;
    LODWORD(v20) = 54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, HR = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s", COERCE_DOUBLE(&v21), v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInputBuffer<CLCatherineData>::add(const CLCatherineData &) [Data_T = CLCatherineData]", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)&result = sub_1005550F0((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

double sub_1013617C0(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  int v73;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B0C00);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 3);
    v9 = *((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7);
    v11 = *((_QWORD *)a2 + 8);
    v12 = *((_QWORD *)a2 + 4);
    v13 = *((_QWORD *)a2 + 5);
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *((unsigned __int8 *)a2 + 168);
    *(_DWORD *)buf = 134220546;
    v53 = v5;
    v54 = 2048;
    v55 = v6;
    v56 = 2048;
    v57 = v7;
    v58 = 2048;
    v59 = v12;
    v60 = 2048;
    v61 = v9;
    v62 = 2048;
    v63 = v8;
    v64 = 2048;
    v65 = v10;
    v66 = 2048;
    v67 = v11;
    v68 = 2048;
    v69 = v13;
    v70 = 2080;
    v71 = v14;
    v72 = 1026;
    v73 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Input, Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s, trackRunOdometerHasBeenCorrected, %{public}d", buf, 0x6Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v17 = *(_QWORD *)a2;
    v18 = *((_QWORD *)a2 + 1);
    v20 = *((_QWORD *)a2 + 2);
    v19 = *((_QWORD *)a2 + 3);
    v21 = *((_QWORD *)a2 + 6);
    v22 = *((_QWORD *)a2 + 7);
    v23 = *((_QWORD *)a2 + 8);
    v24 = *((_QWORD *)a2 + 4);
    v25 = *((_QWORD *)a2 + 5);
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *((unsigned __int8 *)a2 + 168);
    v30 = 134220546;
    v31 = v17;
    v32 = 2048;
    v33 = v18;
    v34 = 2048;
    v35 = v19;
    v36 = 2048;
    v37 = v24;
    v38 = 2048;
    v39 = v21;
    v40 = 2048;
    v41 = v20;
    v42 = 2048;
    v43 = v22;
    v44 = 2048;
    v45 = v23;
    v46 = 2048;
    v47 = v25;
    v48 = 2080;
    v49 = v26;
    v50 = 1026;
    v51 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s, trackRunOdometerHasBeenCorrected, %{public}d", &v30, 108);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInputBuffer<CLOdometerEntry>::add(const CLOdometerEntry &) [Data_T = CLOdometerEntry]", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  *(_QWORD *)&result = sub_1006D96C0((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

double sub_101361A6C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  _QWORD *v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v2 = *(_OWORD *)(a2 + 144);
  v22 = *(_OWORD *)(a2 + 128);
  v23 = v2;
  v3 = *(_QWORD *)(a2 + 160);
  v4 = *(_OWORD *)(a2 + 80);
  v18 = *(_OWORD *)(a2 + 64);
  v19 = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v20 = *(_OWORD *)(a2 + 96);
  v21 = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v14 = *(_OWORD *)a2;
  v15 = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 32);
  v17 = v7;
  *((_QWORD *)&v23 + 1) = 0;
  v24 = v3;
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v8 + *(_QWORD *)(a1 + 56) - 1) / 0x18uLL))
                  + 168 * ((v8 + *(_QWORD *)(a1 + 56) - 1) % 0x18uLL));
    v10 = v9[19];
    v11 = *((double *)&v14 + 1) - v9[1];
    if (v11 > 0.0 && v11 <= *(double *)(a1 + 16))
      v10 = (*((double *)&v15 + 1) - v9[3]) * *((double *)&v22 + 1) / 100.0 / v11;
    *((double *)&v23 + 1) = v10;
  }
  v12 = (_QWORD *)(a1 + 24);
  sub_101361B5C((uint64_t *)&v14);
  *(_QWORD *)&result = sub_101361E2C(v12, &v14).n128_u64[0];
  return result;
}

void sub_101361B5C(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint8_t buf[4];
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B0C00);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = a1[1];
    v5 = a1[2];
    v6 = a1[3];
    v7 = a1[4];
    v8 = a1[5];
    v9 = a1[6];
    v10 = a1[7];
    v11 = a1[8];
    v12 = a1[11];
    v13 = a1[14];
    v14 = a1[17];
    v15 = a1[18];
    v16 = a1[19];
    *(_DWORD *)buf = 134221312;
    v63 = v3;
    v64 = 2048;
    v65 = v4;
    v66 = 2048;
    v67 = v5;
    v68 = 2048;
    v69 = v6;
    v70 = 2048;
    v71 = v7;
    v72 = 2048;
    v73 = v8;
    v74 = 2048;
    v75 = v9;
    v76 = 2048;
    v77 = v10;
    v78 = 2048;
    v79 = v11;
    v80 = 2048;
    v81 = v12;
    v82 = 2048;
    v83 = v13;
    v84 = 2048;
    v85 = v14;
    v86 = 2048;
    v87 = v15;
    v88 = 2048;
    v89 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fitness Machine datum,startTime,%.3f,elapsedTime,%.3f,calories,%f,distance,%f,elevationAscended,%f,strideCount,%ld,strokeCount,%ld,floors,%ld,speed,%f,cadence,%f,power,%f,incline,%f,resistance,%f,verticalSpeed,%f", buf, 0x8Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v17 = *a1;
    v18 = a1[1];
    v19 = a1[2];
    v20 = a1[3];
    v21 = a1[4];
    v22 = a1[5];
    v23 = a1[6];
    v24 = a1[7];
    v25 = a1[8];
    v26 = a1[11];
    v27 = a1[14];
    v28 = a1[17];
    v29 = a1[18];
    v30 = a1[19];
    v34 = 134221312;
    v35 = v17;
    v36 = 2048;
    v37 = v18;
    v38 = 2048;
    v39 = v19;
    v40 = 2048;
    v41 = v20;
    v42 = 2048;
    v43 = v21;
    v44 = 2048;
    v45 = v22;
    v46 = 2048;
    v47 = v23;
    v48 = 2048;
    v49 = v24;
    v50 = 2048;
    v51 = v25;
    v52 = 2048;
    v53 = v26;
    v54 = 2048;
    v55 = v27;
    v56 = 2048;
    v57 = v28;
    v58 = 2048;
    v59 = v29;
    v60 = 2048;
    v61 = v30;
    LODWORD(v33) = 142;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Fitness Machine datum,startTime,%.3f,elapsedTime,%.3f,calories,%f,distance,%f,elevationAscended,%f,strideCount,%ld,strokeCount,%ld,floors,%ld,speed,%f,cadence,%f,power,%f,incline,%f,resistance,%f,verticalSpeed,%f", COERCE_DOUBLE(&v34), v33);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void _CLFitnessMachineData::log() const", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
}

__n128 sub_101361E2C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 24 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1013626C4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  result = (__n128)a2[7];
  v15 = a2[8];
  v16 = a2[9];
  *(_QWORD *)(v8 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  *(__n128 *)(v8 + 112) = result;
  ++a1[5];
  return result;
}

uint64_t sub_101361F00(uint64_t a1, const char *a2, char a3, double a4, double a5, double a6)
{
  const char *v11;
  char *v12;

  *(_QWORD *)a1 = off_1021A6C48;
  if (a2)
    v11 = a2;
  else
    v11 = "NatalieInputSrc";
  v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021B0B88;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_BYTE *)(a1 + 121) = a3;
  sub_1006D3520(a1 + 128);
  if (*(_BYTE *)(a1 + 121))
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

void sub_101361FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1011D8DA4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_101361FE0(uint64_t a1, double a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL8 result;
  uint64_t v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint8_t *v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  int v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  uint64_t v32;

  v23 = 0u;
  v24 = 0u;
  memset(v22, 0, sizeof(v22));
  if (sub_10020B608(a1, (uint64_t)&v23, v22, a2))
  {
    v4 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) == *(_QWORD *)v24)
      v4 = *(_QWORD *)(v24 - 8) + 4096;
    if (!*(_DWORD *)(v4 - 40) && *(double *)(a1 + 104) - *(double *)(a1 + 96) < a2)
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B0C00);
      v5 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v30 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Input, Elevation, not ready at time, %.2f ", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 == -1)
          goto LABEL_39;
        goto LABEL_54;
      }
      return result;
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v10 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1) == *(_QWORD *)v24)
        v10 = *(_QWORD *)(v24 - 8) + 4096;
      v11 = *(_QWORD *)(v10 - 56);
      *(_DWORD *)buf = 134218240;
      v30 = a2;
      v31 = 2048;
      v32 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Input, Elevation, ready at time, %.2f, nearest data point at time, %.2f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v12 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) == *(_QWORD *)v24)
      v12 = *(_QWORD *)(v24 - 8) + 4096;
    v13 = *(_QWORD *)(v12 - 56);
    v25 = 134218240;
    v26 = a2;
    v27 = 2048;
    v28 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, ready at time, %.2f, nearest data point at time, %.2f");
LABEL_52:
    v21 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v14);
    if (v21 != buf)
      free(v21);
    return 1;
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
    v8 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v7 + *(_QWORD *)(a1 + 56) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v7 + *(_QWORD *)(a1 + 56) - 1) & 0x3F) << 6)
                   + 8);
  else
    v8 = -1.79769313e308;
  if (!*(_BYTE *)(a1 + 80)
    || v8 >= a2
    || (v15 = *(double *)(a1 + 16), *(double *)(a1 + 72) - v15 >= a2)
    || v15 + *(double *)(a1 + 88) <= a2
    || (v16 = *(double *)(a1 + 104),
        v16 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) >= a2))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v20 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Input, Elevation, ready at time, %.2f, no data point", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    v25 = 134217984;
    v26 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, ready at time, %.2f, no data point");
    goto LABEL_52;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B0C00);
  v17 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Input, Elevation, not ready at time, %.2f ", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 == -1)
    {
LABEL_39:
      v25 = 134217984;
      v26 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, not ready at time, %.2f ");
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
      return 0;
    }
LABEL_54:
    dispatch_once(&qword_10229FC90, &stru_1021B0C00);
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1013625E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B0B88;
  sub_1006D0BAC((_QWORD *)(a1 + 128));
  *(_QWORD *)a1 = off_1021A6C48;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  return a1;
}

void sub_101362638(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B0B88;
  sub_1006D0BAC((_QWORD *)(a1 + 128));
  *(_QWORD *)a1 = off_1021A6C48;
  free(*(void **)(a1 + 8));
  sub_100554930((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_101362698(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1013626C4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x18;
  v4 = v2 - 24;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10136298C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1013629F8(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  *(_QWORD *)a1 = &unk_1021B0C20;
  *(_QWORD *)(a1 + 8) = 19;
  *(_WORD *)(a1 + 16) = 512;
  *(_QWORD *)(a1 + 24) = 0x5000000000;
  *(_OWORD *)(a1 + 1952) = 0u;
  for (i = 1992; i != 2184; i += 32)
    *(_QWORD *)(a1 + i) = 0;
  *(_BYTE *)(a1 + 2240) = 0;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_QWORD *)(a1 + 2304) = off_1021B0E18;
  *(_QWORD *)(a1 + 2328) = a1 + 2304;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = xmmword_101B9F630;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_QWORD *)(a1 + 2384) = 0;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2392) = a2;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_QWORD *)(a1 + 2472) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2480) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2496) = 0;
  *(_DWORD *)(a1 + 2504) = 0x80000000;
  *(_OWORD *)(a1 + 2508) = 0u;
  *(_OWORD *)(a1 + 2524) = 0u;
  *(_OWORD *)(a1 + 2540) = 0u;
  *(_OWORD *)(a1 + 2556) = 0u;
  *(_DWORD *)(a1 + 2572) = 0;
  sub_101362BF4((_QWORD *)a1);
  sub_101362D50();
}

void sub_101362B34(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 2376) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)(v1 + 2328);
  if (v7 == v3)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v8 = 5;
    v3 = *(_QWORD **)(v1 + 2328);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_8:
  sub_100427A00(v2);
  v9 = 0;
  v10 = v1 + 2216;
  do
  {
    v11 = *(_QWORD **)(v10 + v9);
    *(_QWORD *)(v10 + v9) = 0;
    if (v11)
      sub_1013643C0(v10 + v9, v11);
    v9 -= 8;
  }
  while (v9 != -64);
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD **)(v1 + v12 + 2152);
    if ((_QWORD *)(v1 + v12 + 2128) == v13)
      break;
    if (v13)
    {
      v14 = 5;
LABEL_17:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(a1);
  }
  v13 = (_QWORD *)(v1 + v12 + 2128);
  v14 = 4;
  goto LABEL_17;
}

_QWORD *sub_101362BF4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v1 = result;
  v2 = 0;
  *((_DWORD *)result + 488) = 67371265;
  *((_DWORD *)result + 489) = 16843009;
  v3 = result + 246;
  *((_DWORD *)result + 490) = 1178289687;
  *((_DWORD *)result + 491) = 134744072;
  while (2)
  {
    switch((char)v2)
    {
      case 0:
      case 3:
      case 5:
        v5[0] = off_1021B0EA8;
        goto LABEL_8;
      case 1:
        v5[0] = off_1021B0FA8;
        goto LABEL_7;
      case 2:
        v5[0] = off_1021B0F28;
        goto LABEL_7;
      case 4:
        v5[0] = off_1021B1028;
LABEL_7:
        v5[1] = v1;
LABEL_8:
        v6 = v5;
        sub_10136424C(v5, v3);
        result = v6;
        if (v6 == v5)
        {
          result = v5;
          v4 = 4;
        }
        else
        {
          if (!v6)
            goto LABEL_13;
          v4 = 5;
        }
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_13:
        ++v2;
        v3 += 4;
        if (v2 != 6)
          continue;
        return result;
      default:
        goto LABEL_13;
    }
  }
}

void sub_101362D50()
{
  operator new();
}

void sub_101363468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v17)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  operator delete();
}

uint64_t sub_10136353C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t j;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  if (*(_WORD *)(a1 + 26))
  {
    v2 = *(unsigned __int16 *)(a1 + 26) + (unint64_t)*(unsigned __int16 *)(a1 + 24) - 1;
    v3 = *(unsigned int *)(a1 + 28);
    if (v2 < v3)
      v3 = 0;
    v4 = *(_QWORD *)(a1 + 24 + 24 * (v2 - v3) + 8);
  }
  else
  {
    v4 = 0;
  }
  v14 = v4;
  sub_10023195C(a1, 7, (uint64_t)&v14);
  v5 = *(void **)(a1 + 2368);
  if (v5)
  {
    *(_QWORD *)(a1 + 2376) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD **)(a1 + 2328);
  if (v6 == (_QWORD *)(a1 + 2304))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 2304);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  sub_100427A00((_QWORD *)(a1 + 2248));
  for (i = 2216; i != 2152; i -= 8)
  {
    v9 = *(_QWORD **)(a1 + i);
    *(_QWORD *)(a1 + i) = 0;
    if (v9)
      sub_1013643C0(a1 + i, v9);
  }
  for (j = 0; j != -192; j -= 32)
  {
    v11 = *(_QWORD **)(a1 + j + 2152);
    if ((_QWORD *)(a1 + j + 2128) == v11)
    {
      v11 = (_QWORD *)(a1 + j + 2128);
      v12 = 4;
    }
    else
    {
      if (!v11)
        continue;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

double sub_10136366C(uint64_t a1, uint64_t a2)
{
  int v4;
  double result;
  unint64_t v6;

  v4 = sub_100F72B18(a2);
  if (v4 == 1)
  {
    v6 = sub_100F72BB4(*(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
    if (v6 <= 0x1B && ((1 << v6) & 0x9B28010) != 0)
    {
      result = *(double *)a2;
      *(_QWORD *)(a1 + 2352) = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 2360) = 0x7FEFFFFFFFFFFFFFLL;
    }
  }
  else if (v4 == 2)
  {
    result = *(double *)(a1 + 2360);
    if (result == 1.79769313e308)
    {
      result = *(double *)(a2 + 24);
      *(double *)(a1 + 2360) = result;
    }
  }
  return result;
}

void sub_1013636FC(uint64_t a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  double v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  char *v19;
  char *v20;
  double v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  double v29;

  if (a2 >= a3)
    v4 = a2;
  else
    v4 = a3;
  if (a2 <= a3)
    v5 = a2;
  else
    v5 = v4;
  if (a2 <= a3)
    v6 = a3;
  else
    v6 = v4;
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B0DE8);
  v7 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    v27 = v5;
    v28 = 2048;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "daylightTimeEstimate,startTime,%f,endTime,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B0DE8);
    v22 = 134218240;
    v23 = v5;
    v24 = 2048;
    v25 = v6;
    LODWORD(v21) = 22;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "daylightTimeEstimate,startTime,%f,endTime,%f", COERCE_DOUBLE(&v22), v21);
    sub_100512490("Generic", 1, 0, 2, "void CLDaylightEstimator::enqueueResult(Result)", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  v8 = *(double *)(a1 + 2336);
  if (v8 < v6)
    v8 = v6;
  *(double *)(a1 + 2336) = v8;
  *(double *)(a1 + 2464) = v6 - v5 + *(double *)(a1 + 2464);
  v9 = *(double **)(a1 + 2376);
  v10 = *(_QWORD *)(a1 + 2384);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(double **)(a1 + 2368);
    v13 = ((char *)v9 - (char *)v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_100259694();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)sub_10028E224(a1 + 2384, v16);
      v9 = *(double **)(a1 + 2376);
      v12 = *(double **)(a1 + 2368);
    }
    else
    {
      v17 = 0;
    }
    v18 = (double *)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = v5;
    v18[1] = v6;
    v11 = v18 + 2;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v12);
      v12 = *(double **)(a1 + 2368);
    }
    *(_QWORD *)(a1 + 2368) = v18;
    *(_QWORD *)(a1 + 2376) = v11;
    *(_QWORD *)(a1 + 2384) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v9 = v5;
    v9[1] = v6;
    v11 = v9 + 2;
  }
  *(_QWORD *)(a1 + 2376) = v11;
}

void sub_1013639CC(uint64_t a1, int a2, int a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  NSObject *v16;
  unint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  int v27;
  std::string *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  int v51;
  std::string *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const char *v65;
  std::string *v66;
  double v67;
  double v68;
  std::string v69;
  int v70;
  unint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  double v89;
  __int16 v90;
  int v91;
  __int16 v92;
  std::string *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  std::string v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  double v139;
  __int16 v140;
  int v141;
  __int16 v142;
  std::string *v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;

  HIDWORD(v68) = a2;
  v9 = 0;
  memset(&v69, 0, sizeof(v69));
  v10 = a1 + 2508;
  do
  {
    std::string::append(&v69, "bin");
    std::to_string(&v124, (int)dword_101C9ECC0[v9]);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v124;
    else
      v11 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      size = v124.__r_.__value_.__l.__size_;
    std::string::append(&v69, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    std::string::append(&v69, ",");
    std::to_string(&v124, *(_DWORD *)(v10 + v9 * 4));
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v124;
    else
      v13 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      v14 = v124.__r_.__value_.__l.__size_;
    std::string::append(&v69, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    std::string::append(&v69, ",");
    ++v9;
  }
  while (v9 != 17);
  v15 = *(_QWORD *)(a1 + 2496);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B0DE8);
  v16 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 2496);
    v18 = *(_QWORD *)(a1 + 2400);
    v19 = *(_QWORD *)(a1 + 2408);
    v20 = *(_QWORD *)(a1 + 2416);
    v21 = *(_QWORD *)(a1 + 2424);
    v22 = *(_DWORD *)(a1 + 2436);
    v23 = *(_DWORD *)(a1 + 2432);
    if (v15)
    {
      v24 = *(_QWORD *)(a1 + 2472);
      v25 = *(_QWORD *)(a1 + 2480);
      if (v17)
        v26 = *(double *)(a1 + 2488) / (double)v17;
      else
        v26 = 0.0;
      v27 = *(_DWORD *)(a1 + 2504);
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v27 = 0;
      v26 = 0.0;
    }
    v28 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v69.__r_.__value_.__r.__words[0];
    v29 = *(_QWORD *)(a1 + 32 + 24 * *(unsigned __int16 *)(a1 + 24));
    v30 = *(unsigned __int16 *)(a1 + 24) + (unint64_t)*(unsigned __int16 *)(a1 + 26) - 1;
    v31 = *(unsigned int *)(a1 + 28);
    if (v30 < v31)
      v31 = 0;
    v32 = *(_QWORD *)(a1 + 32 + 24 * (v30 - v31));
    v33 = *(_QWORD *)(a1 + 2224);
    v34 = *(_QWORD *)(a1 + 2464);
    v35 = *(_DWORD *)(a1 + 2440);
    v36 = *(_DWORD *)(a1 + 2444);
    v37 = *(_DWORD *)(a1 + 2448);
    v38 = *(_DWORD *)(a1 + 2452);
    v39 = *(_DWORD *)(a1 + 2456);
    v40 = *(_DWORD *)(a1 + 2460);
    LODWORD(v124.__r_.__value_.__l.__data_) = 134224642;
    *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = v17;
    WORD2(v124.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 6) = v18;
    HIWORD(v124.__r_.__value_.__r.__words[2]) = 2048;
    v125 = v19;
    v126 = 2048;
    v127 = v20;
    v128 = 2048;
    v129 = v21;
    v130 = 1024;
    v131 = v22;
    v132 = 1024;
    v133 = v23;
    v134 = 2048;
    v135 = v24;
    v136 = 2048;
    v137 = v25;
    v138 = 2048;
    v139 = v26;
    v140 = 1024;
    v141 = v27;
    v142 = 2080;
    v143 = v28;
    v144 = 2048;
    v145 = v29;
    v146 = 2048;
    v147 = v32;
    v148 = 2048;
    v149 = v33;
    v150 = 2048;
    v151 = a4;
    v152 = 2048;
    v153 = a5;
    v154 = 2048;
    v155 = a5 - a4;
    v156 = 2048;
    v157 = v34;
    v158 = 1024;
    v159 = HIDWORD(v68);
    v160 = 1024;
    v161 = a3;
    v162 = 1024;
    v163 = v35;
    v164 = 1024;
    v165 = v36;
    v166 = 1024;
    v167 = v37;
    v168 = 1024;
    v169 = v38;
    v170 = 1024;
    v171 = v39;
    v172 = 1024;
    v173 = v40;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "DaylightEstimatorStateChange,numOutdoorUpdates,%lu,firstMedConf,%.2f,lastMedConf,%.2f,firstHighConf,%.2f,lastHighConf,%.2f,numMedConf,%d,numHighConf,%d,maxOutdoor,%.2f,minOutdoor,%.2f,meanOutdoor,%.2f,maxLux,%d,%sfrontOfBuffer,%.2f,endOfBuffer,%.2f,currentTime,%.2f,stateStart,%.2f,stateEnd,%.2f,duration,%.2f,daylight,%.2f,from,%d,to,%d,totalEpochs,%d,totalStepEpochs,%d,totalDriving,%d,totalCycling,%d,totalFrozen,%d,totalInWorkout,%d", (uint8_t *)&v124, 0xE4u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v124, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B0DE8);
    v41 = *(_QWORD *)(a1 + 2496);
    v42 = *(_QWORD *)(a1 + 2400);
    v43 = *(_QWORD *)(a1 + 2408);
    v44 = *(_QWORD *)(a1 + 2416);
    v45 = *(_QWORD *)(a1 + 2424);
    v46 = *(_DWORD *)(a1 + 2436);
    v47 = *(_DWORD *)(a1 + 2432);
    if (v15)
    {
      v48 = *(_QWORD *)(a1 + 2472);
      v49 = *(_QWORD *)(a1 + 2480);
      if (v41)
        v50 = *(double *)(a1 + 2488) / (double)v41;
      else
        v50 = 0.0;
      v51 = *(_DWORD *)(a1 + 2504);
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v51 = 0;
      v50 = 0.0;
    }
    v52 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = (std::string *)v69.__r_.__value_.__r.__words[0];
    v53 = *(_QWORD *)(a1 + 32 + 24 * *(unsigned __int16 *)(a1 + 24));
    v54 = *(unsigned __int16 *)(a1 + 24) + (unint64_t)*(unsigned __int16 *)(a1 + 26) - 1;
    v55 = *(unsigned int *)(a1 + 28);
    if (v54 < v55)
      v55 = 0;
    v56 = *(_QWORD *)(a1 + 32 + 24 * (v54 - v55));
    v57 = *(_QWORD *)(a1 + 2224);
    v58 = *(_QWORD *)(a1 + 2464);
    v59 = *(_DWORD *)(a1 + 2440);
    v60 = *(_DWORD *)(a1 + 2444);
    v61 = *(_DWORD *)(a1 + 2448);
    v62 = *(_DWORD *)(a1 + 2452);
    v63 = *(_DWORD *)(a1 + 2456);
    v64 = *(_DWORD *)(a1 + 2460);
    v70 = 134224642;
    v71 = v41;
    v72 = 2048;
    v73 = v42;
    v74 = 2048;
    v75 = v43;
    v76 = 2048;
    v77 = v44;
    v78 = 2048;
    v79 = v45;
    v80 = 1024;
    v81 = v46;
    v82 = 1024;
    v83 = v47;
    v84 = 2048;
    v85 = v48;
    v86 = 2048;
    v87 = v49;
    v88 = 2048;
    v89 = v50;
    v90 = 1024;
    v91 = v51;
    v92 = 2080;
    v93 = v52;
    v94 = 2048;
    v95 = v53;
    v96 = 2048;
    v97 = v56;
    v98 = 2048;
    v99 = v57;
    v100 = 2048;
    v101 = a4;
    v102 = 2048;
    v103 = a5;
    v104 = 2048;
    v105 = a5 - a4;
    v106 = 2048;
    v107 = v58;
    v108 = 1024;
    v109 = HIDWORD(v68);
    v110 = 1024;
    v111 = a3;
    v112 = 1024;
    v113 = v59;
    v114 = 1024;
    v115 = v60;
    v116 = 1024;
    v117 = v61;
    v118 = 1024;
    v119 = v62;
    v120 = 1024;
    v121 = v63;
    v122 = 1024;
    v123 = v64;
    LODWORD(v67) = 228;
    _os_log_send_and_compose_impl(2, 0, &v124, 1628, &_mh_execute_header, qword_1022A0198, 0, "DaylightEstimatorStateChange,numOutdoorUpdates,%lu,firstMedConf,%.2f,lastMedConf,%.2f,firstHighConf,%.2f,lastHighConf,%.2f,numMedConf,%d,numHighConf,%d,maxOutdoor,%.2f,minOutdoor,%.2f,meanOutdoor,%.2f,maxLux,%d,%sfrontOfBuffer,%.2f,endOfBuffer,%.2f,currentTime,%.2f,stateStart,%.2f,stateEnd,%.2f,duration,%.2f,daylight,%.2f,from,%d,to,%d,totalEpochs,%d,totalStepEpochs,%d,totalDriving,%d,totalCycling,%d,totalFrozen,%d,totalInWorkout,%d", &v70, v67, v68, *(double *)&v69.__r_.__value_.__l.__data_, *(double *)&v69.__r_.__value_.__l.__size_, LODWORD(v69.__r_.__value_.__r.__words[2]));
    v66 = (std::string *)v65;
    sub_100512490("Generic", 1, 0, 2, "void CLDaylightEstimator::logStateChange(CFAbsoluteTime, CFAbsoluteTime, State, State) const", "%s\n", v65);
    if (v66 != &v124)
      free(v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_101363FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101364028(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2[1];
  *(_DWORD *)(a1 + 8) = *a2;
  sub_100270E34(a1 + 16, a3);
  sub_100270E34(a1 + 48, a4);
  return a1;
}

void sub_101364080(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 40);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1013640C0(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

_QWORD *sub_1013640EC(uint64_t a1, double *a2)
{
  uint64_t v4;

  sub_1000D8318(a1, *a2);
  sub_1013636FC(a1, *a2, *a2);
  v4 = *(unsigned __int8 *)(a1 + 16);
  sub_1013639CC(a1, *(unsigned __int8 *)(a1 + 2240), *(unsigned __int8 *)(a1 + 16), *(double *)(a1 + 2232), *a2);
  *(_QWORD *)(a1 + 2296) = 0;
  *(double *)(a1 + 2232) = *a2;
  *(_BYTE *)(a1 + 2240) = v4;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_QWORD *)(a1 + 2472) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2480) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2496) = 0;
  *(_DWORD *)(a1 + 2504) = 0x80000000;
  *(_DWORD *)(a1 + 2572) = 0;
  *(_OWORD *)(a1 + 2556) = 0u;
  *(_OWORD *)(a1 + 2540) = 0u;
  *(_OWORD *)(a1 + 2524) = 0u;
  *(_OWORD *)(a1 + 2508) = 0u;
  return sub_1013641B4((_QWORD *)(a1 + 2304), a1 + 32 * v4 + 1968);
}

_QWORD *sub_1013641B4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10136424C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10136424C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1013643B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1013643C0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (a2)
  {
    v3 = (_QWORD *)a2[9];
    if (v3 == a2 + 6)
    {
      v4 = 4;
      v3 = a2 + 6;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (_QWORD *)a2[5];
    if (v5 == a2 + 2)
    {
      v6 = 4;
      v5 = a2 + 2;
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    operator delete();
  }
}

void sub_101364458()
{
  operator delete();
}

_QWORD *sub_10136446C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B0E18;
  return result;
}

void sub_101364494(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B0E18;
}

double sub_1013644B0()
{
  return 1.79769313e308;
}

uint64_t sub_1013644C4(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021B0E88))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101364500()
{
  return &off_1021B0E88;
}

void sub_101364510()
{
  operator delete();
}

_QWORD *sub_101364524()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B0EA8;
  return result;
}

void sub_101364548(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B0EA8;
}

uint64_t sub_101364560(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10136459C()
{
}

void sub_1013645AC()
{
  operator delete();
}

_QWORD *sub_1013645C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B0F28;
  result[1] = v3;
  return result;
}

uint64_t sub_1013645F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B0F28;
  a2[1] = v2;
  return result;
}

double sub_101364610(uint64_t a1, uint64_t a2)
{
  double v2;
  double result;
  uint64_t v4;

  v2 = *(double *)a2;
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return v2 + -150.0;
  v4 = *(_QWORD *)(a1 + 8);
  result = *(double *)(v4 + 2352);
  if (v2 < result)
    return 1.79769313e308;
  if (v2 > *(double *)(v4 + 2360) || *(_BYTE *)(a2 + 32) == 0)
    return 1.79769313e308;
  return result;
}

uint64_t sub_101364698(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1013646D4()
{
}

void sub_1013646E4()
{
  operator delete();
}

_QWORD *sub_1013646F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B0FA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10136472C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B0FA8;
  a2[1] = v2;
  return result;
}

double sub_101364748(uint64_t a1, uint64_t a2)
{
  double v2;
  double result;
  uint64_t v4;

  v2 = *(double *)a2;
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return v2 + -450.0;
  v4 = *(_QWORD *)(a1 + 8);
  result = *(double *)(v4 + 2352);
  if (v2 < result)
    return 1.79769313e308;
  if (v2 > *(double *)(v4 + 2360) || *(_BYTE *)(a2 + 32) == 0)
    return 1.79769313e308;
  return result;
}

uint64_t sub_1013647D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10136480C()
{
}

void sub_10136481C()
{
  operator delete();
}

_QWORD *sub_101364830(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1028;
  result[1] = v3;
  return result;
}

uint64_t sub_101364864(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1028;
  a2[1] = v2;
  return result;
}

double sub_101364880(uint64_t a1, uint64_t a2)
{
  double v2;
  double result;
  uint64_t v4;

  v2 = *(double *)a2;
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return v2 + -900.0;
  v4 = *(_QWORD *)(a1 + 8);
  result = *(double *)(v4 + 2352);
  if (v2 < result)
    return 1.79769313e308;
  if (v2 > *(double *)(v4 + 2360) || *(_BYTE *)(a2 + 32) == 0)
    return 1.79769313e308;
  return result;
}

uint64_t sub_101364908(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101364944()
{
}

void sub_101364950(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_101364C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_101364C64(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCDLL)
    sub_10025955C();
  return operator new(320 * a2);
}

void sub_101364CAC()
{
  operator delete();
}

_QWORD *sub_101364CC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B10A8;
  return result;
}

void sub_101364CE4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B10A8;
}

BOOL sub_101364CFC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 16) || *(_DWORD *)(a2 + 20) == 128;
}

uint64_t sub_101364D30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101364D6C()
{
}

void sub_101364D7C()
{
  operator delete();
}

_QWORD *sub_101364D90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1138;
  result[1] = v3;
  return result;
}

uint64_t sub_101364DC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1138;
  a2[1] = v2;
  return result;
}

uint64_t sub_101364DE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 1, (uint64_t)&v4);
}

uint64_t sub_101364E10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101364E4C()
{
}

void sub_101364E5C()
{
  operator delete();
}

_QWORD *sub_101364E70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B11B8;
  return result;
}

void sub_101364E94(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B11B8;
}

uint64_t sub_101364EAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;

  if (*(_DWORD *)(a2 + 16))
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 20) == 128;
  v3 = v2;
  return v3 ^ 1u;
}

uint64_t sub_101364ED0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101364F0C()
{
}

void sub_101364F1C()
{
  operator delete();
}

_QWORD *sub_101364F30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1238;
  result[1] = v3;
  return result;
}

uint64_t sub_101364F64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1238;
  a2[1] = v2;
  return result;
}

uint64_t sub_101364F80(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 2, (uint64_t)&v4);
}

uint64_t sub_101364FB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101364FEC()
{
}

void sub_101364FFC()
{
  operator delete();
}

_QWORD *sub_101365010()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B12B8;
  return result;
}

void sub_101365034(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B12B8;
}

BOOL sub_10136504C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 20);
  return v2 == 256 || v2 == 4096 || v2 == 512;
}

uint64_t sub_101365080(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013650BC()
{
}

void sub_1013650CC()
{
  operator delete();
}

_QWORD *sub_1013650E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1338;
  result[1] = v3;
  return result;
}

uint64_t sub_101365114(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1338;
  a2[1] = v2;
  return result;
}

uint64_t sub_101365130(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 3, (uint64_t)&v4);
}

uint64_t sub_101365160(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10136519C()
{
}

void sub_1013651AC()
{
  operator delete();
}

_QWORD *sub_1013651C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B13B8;
  return result;
}

void sub_1013651E4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B13B8;
}

uint64_t sub_1013651FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101365238()
{
}

void sub_101365248()
{
  operator delete();
}

_QWORD *sub_10136525C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1438;
  result[1] = v3;
  return result;
}

uint64_t sub_101365290(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1438;
  a2[1] = v2;
  return result;
}

uint64_t sub_1013652AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 4, (uint64_t)&v4);
}

uint64_t sub_1013652DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101365318()
{
}

void sub_101365328()
{
  operator delete();
}

_QWORD *sub_10136533C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B14B8;
  result[1] = v3;
  return result;
}

uint64_t sub_101365370(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B14B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10136538C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 5, (uint64_t)&v4);
}

uint64_t sub_1013653BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013653F8()
{
}

void sub_101365408()
{
  operator delete();
}

_QWORD *sub_10136541C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1538;
  result[1] = v3;
  return result;
}

uint64_t sub_101365450(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1538;
  a2[1] = v2;
  return result;
}

uint64_t sub_10136546C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013654A8()
{
}

void sub_1013654B8()
{
  operator delete();
}

_QWORD *sub_1013654CC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B15B8;
  return result;
}

void sub_1013654F0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B15B8;
}

uint64_t sub_101365508(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101365544()
{
}

void sub_101365554()
{
  operator delete();
}

_QWORD *sub_101365568(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1638;
  result[1] = v3;
  return result;
}

uint64_t sub_10136559C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1638;
  a2[1] = v2;
  return result;
}

uint64_t sub_1013655B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 7, (uint64_t)&v4);
}

uint64_t sub_1013655E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101365624()
{
}

void sub_101365634()
{
  operator delete();
}

_QWORD *sub_101365648()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B16B8;
  return result;
}

void sub_10136566C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B16B8;
}

uint64_t sub_101365684(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013656C0()
{
}

void sub_1013656D0()
{
  operator delete();
}

_QWORD *sub_1013656E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B1738;
  result[1] = v3;
  return result;
}

uint64_t sub_101365718(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B1738;
  a2[1] = v2;
  return result;
}

uint64_t sub_101365734(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101365770()
{
}

void sub_10136577C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1013657AC(id a1)
{
  sub_10136BB10();
}

void sub_101365830(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021B17F8;
  *(_QWORD *)(a1 + 8) = off_1021B1850;
  v2 = qword_10230E578;
  *(_QWORD *)(a1 + 16) = qword_10230E570;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = 200;
  *(_WORD *)(a1 + 52) = 0;
  sub_10055D44C(a1 + 56, "CLWifiAccessPointLocationService", 1, 1);
  *(_DWORD *)(a1 + 72) = 0;
  operator new();
}

void sub_101365F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v20;
  uint64_t v21;

  sub_10136BE0C((uint64_t *)(v12 + 152), 0);
  sub_100261F44(v17);
  sub_10010D350(v16, *v18);
  sub_10129F72C(v15);
  sub_10136BC58(v14, 0);
  v20 = *v13;
  *v13 = 0;
  if (v20)
    sub_10136BE5C((uint64_t)v13, v20);
  v21 = *(_QWORD *)(v12 + 80);
  *(_QWORD *)(v12 + 80) = 0;
  if (v21)
    operator delete();
  sub_10055D4D0(a12);
  _Unwind_Resume(a1);
}

void sub_101366044(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  _BYTE buf[1638];

  v20 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001FD98C(*(uint64_t *)buf, "MaxTileAge", &v20);
  v3 = v2;
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    *(_QWORD *)(a1 + 16) = v20;
LABEL_7:
  sub_1001E4804(buf);
  sub_100526244(*(uint64_t *)buf, "MaxNumOfTiles", (_DWORD *)(a1 + 48));
  v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_1001E4804(buf);
  sub_1005262B4(*(uint64_t *)buf, "WifiLocationSizeLimit", (_QWORD *)(a1 + 40));
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  v13 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "tiles defaults applied, maxTileAccessAge, %.0f, maxTileCount, %du", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 48);
    v21 = 134218240;
    v22 = v16;
    v23 = 1024;
    v24 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "tiles defaults applied, maxTileAccessAge, %.0f, maxTileCount, %du", COERCE_DOUBLE(&v21), 18);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiAccessPointLocationService::processDefaultsWrites()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
}

void sub_101366338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10136635C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a3;
  *a3 = 0;
  v5 = v4;
  v6 = v3;
  operator new();
}

void sub_101366440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;
  uint64_t v19;

  v18 = a9;
  a9 = 0;
  if (v18)
    sub_10136BD4C((uint64_t)&a9, v18);
  sub_101157324(&a10, 0);
  v19 = a11;
  a11 = 0;
  if (v19)
    sub_10136BE5C((uint64_t)&a11, v19);
  _Unwind_Resume(a1);
}

void sub_1013664C0()
{
  operator new();
}

void sub_10136656C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  operator delete();
}

void sub_1013665C0()
{
  operator new();
}

void sub_10136665C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  operator delete();
}

void sub_1013666B0()
{
  char v0;

  v0 = 1;
  sub_1013664C0();
}

void sub_10136674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  sub_101157324(&a10, 0);
  v13 = a12;
  a12 = 0;
  if (v13)
    sub_10136BE5C((uint64_t)&a12, v13);
  _Unwind_Resume(a1);
}

uint64_t sub_101366780(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1021B17F8;
  *(_QWORD *)(a1 + 8) = off_1021B1850;
  v2 = *(void **)(a1 + 160);
  if (v2)
  {

    *(_QWORD *)(a1 + 160) = 0;
  }
  sub_10136BE0C((uint64_t *)(a1 + 152), 0);
  sub_100261F44(a1 + 136);
  sub_10010D350(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_10129F72C((uint64_t *)(a1 + 104));
  sub_10136BC58((uint64_t **)(a1 + 96), 0);
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    sub_10136BE5C(a1 + 88, v3);
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
    operator delete();
  sub_10055D4D0(a1 + 56);
  return a1;
}

uint64_t sub_101366838(uint64_t a1)
{
  return sub_101366780(a1 - 8);
}

void sub_101366840(uint64_t a1)
{
  sub_101366780(a1);
  operator delete();
}

void sub_101366864(uint64_t a1)
{
  sub_101366780(a1 - 8);
  operator delete();
}

void sub_10136688C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  BOOL v28;
  _QWORD **v29;
  _QWORD *v30[2];
  _OWORD v31[2];
  int v32;
  void *__p;
  char *v34;
  char *v35;
  _QWORD *v36;
  pthread_mutex_t *v37;
  __int16 v38;

  v10 = a1[7];
  v36 = a1 + 7;
  (*(void (**)(void))(v10 + 16))();
  v38 = 256;
  __p = 0;
  v34 = 0;
  v35 = 0;
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  v11 = *(_QWORD **)a2;
  v12 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v12)
  {
    do
    {
      v13 = (_QWORD **)*v11;
      v14 = v34;
      if (v34 >= v35)
      {
        v16 = (char *)__p;
        v17 = (v34 - (_BYTE *)__p) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_100259694();
        v19 = v35 - (_BYTE *)__p;
        if ((v35 - (_BYTE *)__p) >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_10025E6A0((uint64_t)&v35, v20);
          v16 = (char *)__p;
          v14 = v34;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(_QWORD *)v22 = v13;
        v15 = v22 + 8;
        while (v14 != v16)
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        __p = v22;
        v34 = v15;
        v35 = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v34 = v13;
        v15 = v14 + 8;
      }
      v34 = v15;
      v29 = (_QWORD **)*v11;
      sub_1000AFA6C((uint64_t)v31, &v29, &v29, (uint64_t)v11);
      v11 += 11;
    }
    while (v11 != v12);
  }
  (*(void (**)(_QWORD ***__return_ptr, _QWORD *, void **, uint64_t, double))(*a1 + 16))(&v29, a1, &__p, a3, a5);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v24 = v29;
  if (v29 != v30)
  {
    do
    {
      v25 = sub_1000AF064(v31, v24 + 4);
      if (!v25)
        sub_100263950("unordered_map::at: key not found");
      sub_10136BEC8((uint64_t **)a4, v25 + 3, (uint64_t)(v25 + 3), (__int128 *)(v24 + 5));
      v26 = v24[1];
      if (v26)
      {
        do
        {
          v27 = (_QWORD **)v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD **)v24[2];
          v28 = *v27 == v24;
          v24 = v27;
        }
        while (!v28);
      }
      v24 = v27;
    }
    while (v27 != v30);
  }
  sub_100008848((uint64_t)&v29, v30[0]);
  sub_100126BFC((uint64_t)v31);
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
  if (HIBYTE(v38))
  {
    if ((_BYTE)v38)
      pthread_mutex_unlock(v37);
    else
      (*(void (**)(_QWORD *))(*v36 + 24))(v36);
  }
}

void sub_101366B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  sub_100126BFC((uint64_t)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10187E514((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_101366B68(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int v52;
  const char *v53;
  uint8_t *v54;
  uint8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *__p;
  _BYTE *v71;
  unint64_t v72;
  uint8_t buf[8];

  v65 = 0;
  v66 = 0;
  v64 = (uint64_t *)&v65;
  v9 = *(_QWORD **)a3;
  v8 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 != v8)
  {
    do
    {
      *(_QWORD *)buf = v9;
      v10 = sub_10136C070(&v64, v9, (uint64_t)&unk_101B9EB60, (_QWORD **)buf);
      if (*((_BYTE *)v10 + 60))
        *((_BYTE *)v10 + 60) = 0;
      ++v9;
    }
    while (v9 != v8);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021B1900);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v12 = -1431655765 * ((a2[1] - *a2) >> 4);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tilesearch, num tiles, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021B1900);
    v52 = -1431655765 * ((a2[1] - *a2) >> 4);
    LODWORD(__p) = 67240192;
    HIDWORD(__p) = v52;
    LODWORD(v56) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#tilesearch, num tiles, %{public}d", &__p);
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiAccessPointLocationService::_searchTilesForMacs(const std::vector<TileId> &, const std::vector<CLMacAddress> &) const", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
  v59 = a2[1];
  if (*a2 != v59)
  {
    __p = 0;
    v71 = 0;
    v72 = 0;
    v14 = *(_QWORD **)a3;
    v13 = *(_QWORD **)(a3 + 8);
    if (*(_QWORD **)a3 != v13)
    {
      do
      {
        v15 = sub_100191618((uint64_t)&v64, v14);
        if (&v65 == v15)
        {
          sub_10194F058((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v55, v56, v57, v58, v59, a1, v60, v61, v62, v63, (uint64_t)v64,
            (uint64_t)v65,
            v66,
            v67,
            v68,
            v69);
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm", 201, "_searchTilesForMacs");
          __break(1u);
        }
        if (!*(_BYTE *)(sub_100191734((uint64_t)&v64, v14) + 20))
        {
          v23 = v71;
          if ((unint64_t)v71 >= v72)
          {
            v25 = __p;
            v26 = (v71 - (_BYTE *)__p) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              sub_100259694();
            v28 = v72 - (_QWORD)__p;
            if ((uint64_t)(v72 - (_QWORD)__p) >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)sub_10025E6A0((uint64_t)&v72, v29);
              v25 = __p;
              v23 = v71;
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[8 * v26];
            *(_QWORD *)v31 = *v14;
            v24 = v31 + 8;
            while (v23 != v25)
            {
              v32 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v31 - 1) = v32;
              v31 -= 8;
            }
            __p = v31;
            v71 = v24;
            v72 = (unint64_t)&v30[8 * v29];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_QWORD *)v71 = *v14;
            v24 = v23 + 8;
          }
          v71 = v24;
        }
        ++v14;
      }
      while (v14 != v13);
      if (__p != v71)
        sub_10115819C(*(uint64_t **)(a1 + 96));
      if (v71)
        operator delete(v71);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v33 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v34 = 0;
    do
    {
      v35 = sub_100191734((uint64_t)&v64, &v33[v34]);
      v36 = v35;
      v38 = (char *)a4[1];
      v37 = (char *)a4[2];
      if (v38 >= v37)
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (_BYTE *)*a4) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v43 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)*a4) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x555555555555555)
          v44 = 0xAAAAAAAAAAAAAAALL;
        else
          v44 = v42;
        if (v44)
          v45 = (char *)sub_1002596A8((uint64_t)(a4 + 2), v44);
        else
          v45 = 0;
        v46 = &v45[24 * v41];
        v47 = *(_OWORD *)v36;
        *((_QWORD *)v46 + 2) = *(_QWORD *)(v36 + 16);
        *(_OWORD *)v46 = v47;
        v49 = (char *)*a4;
        v48 = (char *)a4[1];
        v50 = v46;
        if (v48 != *a4)
        {
          do
          {
            v51 = *(_OWORD *)(v48 - 24);
            *((_QWORD *)v50 - 1) = *((_QWORD *)v48 - 1);
            *(_OWORD *)(v50 - 24) = v51;
            v50 -= 24;
            v48 -= 24;
          }
          while (v48 != v49);
          v48 = (char *)*a4;
        }
        v40 = v46 + 24;
        *a4 = v50;
        a4[1] = v46 + 24;
        a4[2] = &v45[24 * v44];
        if (v48)
          operator delete(v48);
      }
      else
      {
        v39 = *(_OWORD *)v35;
        *((_QWORD *)v38 + 2) = *(_QWORD *)(v35 + 16);
        *(_OWORD *)v38 = v39;
        v40 = v38 + 24;
      }
      a4[1] = v40;
      ++v34;
      v33 = *(_QWORD **)a3;
    }
    while (v34 < (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  }
  sub_100008848((uint64_t)&v64, v65);
}

void sub_1013673A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  sub_100008848((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t sub_101367428(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_10136C234(a1, &v4, a2);
  if (!v2)
    sub_100263950("map::at:  key not found");
  return v2 + 40;
}

uint64_t sub_101367464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t result;

  v6 = sub_100F6F7D0(a2);
  v7 = sub_100C3C620(a1);
  v8 = sub_100ADAFD8(a1);
  v9 = v7 + (double)v6 * 0.000244140625 * v8 + v8 * 0.000244140625 * 0.5;
  v10 = sub_100F6F7C8(a2);
  v11 = sub_100ADAFD0(a1);
  v12 = sub_100ADAFE0(a1);
  v13 = v11 + (double)v10 * 0.000244140625 * v12 + v12 * 0.000244140625 * 0.5;
  v14 = sub_10020376C(a1);
  v15 = sub_100F6F7B0(a2);
  v16 = sub_1010032D4(v15);
  v17 = sub_100932B7C(a1);
  v18 = vabdd_f64(v17, sub_100203914(a1));
  v19 = sub_100F6F7B8(a2);
  v20 = sub_1010032F0(v19);
  v21 = sub_100C3C628(a1);
  v22 = sub_100F6F7C0(a2);
  result = sub_100190454(a3, v22, (int)v20, -1, 0, 64, -1, v9, v13, v14, v16, v18, v21);
  *(_BYTE *)(a3 + 88) = 1;
  return result;
}

void sub_1013675CC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  _WORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  NSObject *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  int *v52;
  void *__p;
  char *v54;
  char *v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59[3];
  _QWORD v60[3];
  _QWORD v61[3];
  _QWORD v62[3];
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66[2];
  uint8_t buf[8];
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v64 = 0;
  v65 = 0;
  v63 = (uint64_t *)&v64;
  memset(v62, 0, sizeof(v62));
  memset(v61, 0, sizeof(v61));
  memset(v60, 0, sizeof(v60));
  sub_100214C64(a1, v59);
  sub_1000C0A50((int *)(a1 + 72), (double **)v59, a3, buf, a6);
  v52 = (int *)(a1 + 72);
  v56 = v62;
  v57 = v61;
  v58 = v60;
  sub_10136C2B4((uint64_t **)&v56, (uint64_t)buf);
  v56 = &v70;
  sub_100495E10((void ***)&v56);
  v56 = &v69;
  sub_100495E10((void ***)&v56);
  v56 = buf;
  sub_100495E10((void ***)&v56);
  v51 = a1;
  sub_101366B68(a1, v62, (uint64_t)a2, &v56);
  __p = 0;
  v54 = 0;
  v55 = 0;
  v12 = *a2;
  if (a2[1] != *a2)
  {
    v13 = 0;
    do
    {
      v14 = (_QWORD *)(v12 + 8 * v13);
      v15 = (char *)v56 + 24 * v13;
      if (v15[20])
      {
        v66[0] = (uint64_t *)(v12 + 8 * v13);
        v16 = sub_10129F974(&v63, v14, (uint64_t)&unk_101B9EB60, v66);
        v17 = *(_QWORD *)v15;
        v16[24] = *((_WORD *)v15 + 4);
        *((_QWORD *)v16 + 5) = v17;
        *(_QWORD *)(v16 + 26) = *(_QWORD *)(v15 + 12);
      }
      else
      {
        v18 = v54;
        if (v54 >= v55)
        {
          v20 = (char *)__p;
          v21 = (v54 - (_BYTE *)__p) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_100259694();
          v23 = v55 - (_BYTE *)__p;
          if ((v55 - (_BYTE *)__p) >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)sub_10025E6A0((uint64_t)&v55, v24);
            v20 = (char *)__p;
            v18 = v54;
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[8 * v21];
          *(_QWORD *)v26 = *v14;
          v19 = v26 + 8;
          while (v18 != v20)
          {
            v27 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v26 - 1) = v27;
            v26 -= 8;
          }
          __p = v26;
          v54 = v19;
          v55 = &v25[8 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v54 = *v14;
          v19 = v18 + 8;
        }
        v54 = v19;
      }
      ++v13;
      v12 = *a2;
    }
    while (v13 < (a2[1] - *a2) >> 3);
  }
  v28 = v65;
  if (a4)
  {
    v29 = v52;
    if (v65)
    {
LABEL_39:
      sub_101367E78(v29, (uint64_t)"Hit");
      goto LABEL_42;
    }
  }
  else
  {
    v29 = v52;
    if (!v65)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      v30 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "No Mac addresses found in neighbor list, will search remaining tiles", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021B18E0);
        LOWORD(v66[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "No Mac addresses found in neighbor list, will search remaining tiles", v66, 2);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 2, "virtual std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiAccessPointLocationService::findCentroidsInTiles(const std::vector<CLMacAddress> &, const CLDaemonLocation &, uint32_t, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
      sub_101367CA0(v52);
      sub_101366B68(v51, v61, (uint64_t)&__p, (void **)buf);
      v32 = (char *)__p;
      v31 = v54;
      if (v54 != __p)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        do
        {
          v36 = *(char **)buf;
          v37 = (uint64_t *)(*(_QWORD *)buf + v34);
          if (*(_BYTE *)(*(_QWORD *)buf + v34 + 20))
          {
            v66[0] = (uint64_t *)&v32[v33];
            v38 = sub_10129F974(&v63, &v32[v33], (uint64_t)&unk_101B9EB60, v66);
            v39 = *v37;
            v38[24] = *((_WORD *)v37 + 4);
            *((_QWORD *)v38 + 5) = v39;
            *(_QWORD *)(v38 + 26) = *(_QWORD *)&v36[v34 + 12];
            v32 = (char *)__p;
            v31 = v54;
          }
          ++v35;
          v34 += 24;
          v33 += 8;
        }
        while (v35 < (v31 - v32) >> 3);
      }
      if (*(_QWORD *)buf)
      {
        v68 = *(char **)buf;
        operator delete(*(void **)buf);
      }
      v28 = v65;
    }
    if (v28)
      goto LABEL_39;
  }
  sub_101367CA0(v29);
LABEL_42:
  sub_100210340(a5, (a2[1] - *a2) >> 3);
  v40 = *a2;
  if (a2[1] != *a2)
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    do
    {
      v44 = sub_100191618((uint64_t)&v63, (_QWORD *)(v40 + v41));
      if (&v64 != v44)
      {
        v45 = v44 + 5;
        v46 = *a5 + v42;
        if (*(_BYTE *)(v46 + 20))
        {
          v47 = *v45;
          *(_WORD *)(v46 + 8) = *((_WORD *)v44 + 24);
          *(_QWORD *)v46 = v47;
          *(_QWORD *)(v46 + 12) = *(_QWORD *)((char *)v44 + 52);
        }
        else
        {
          v48 = *(_OWORD *)v45;
          *(_DWORD *)(v46 + 16) = *((_DWORD *)v44 + 14);
          *(_OWORD *)v46 = v48;
          *(_BYTE *)(v46 + 20) = 1;
        }
      }
      ++v43;
      v40 = *a2;
      v42 += 24;
      v41 += 8;
    }
    while (v43 < (a2[1] - *a2) >> 3);
  }
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  *(_QWORD *)buf = v60;
  sub_100495E10((void ***)buf);
  *(_QWORD *)buf = v61;
  sub_100495E10((void ***)buf);
  *(_QWORD *)buf = v62;
  sub_100495E10((void ***)buf);
  sub_100008848((uint64_t)&v63, v64);
}

void sub_101367B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  a39 = &a24;
  sub_100495E10((void ***)&a39);
  a39 = &a27;
  sub_100495E10((void ***)&a39);
  a39 = &a30;
  sub_100495E10((void ***)&a39);
  sub_100008848((uint64_t)&a33, a34);
  _Unwind_Resume(a1);
}

void **sub_101367C4C(void **a1)
{
  void **v3;

  v3 = a1 + 6;
  sub_100495E10(&v3);
  v3 = a1 + 3;
  sub_100495E10(&v3);
  v3 = a1;
  sub_100495E10(&v3);
  return a1;
}

void sub_101367CA0(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  ++*a1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021B18C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67240192;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@TileSearch, wifi, misscount, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021B18C0);
    v4 = *a1;
    v7[0] = 67240192;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileSearch, wifi, misscount, %{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTileQueryLogic::incrementScanMisses()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*a1 >= 255)
    sub_101367E78(a1, (uint64_t)"Rollover");
}

void sub_101367E78(_DWORD *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021B18C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@TileSearch, wifi, missreset, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021B18C0);
    v7 = 136446210;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileSearch, wifi, missreset, %{public}s", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTileQueryLogic::resetScanMisses(const char *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *a1 = 0;
}

void sub_101368028(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  sub_1013675CC(a1 - 8, a2, a3, a4, a5, a6);
}

uint64_t sub_101368030@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  v7 = a1 + 56;
  v6 = *(_QWORD *)(a1 + 56);
  v18 = a1 + 56;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 56);
  v19 = 256;
  v10 = *(_QWORD *)(a1 + 120);
  v9 = a1 + 120;
  v8 = v10;
  if (!v10)
    goto LABEL_11;
  v11 = v9;
  do
  {
    v12 = *(_DWORD *)(v8 + 32);
    v13 = v12 < a2;
    if (v12 >= a2)
      v14 = (uint64_t *)v8;
    else
      v14 = (uint64_t *)(v8 + 8);
    if (!v13)
      v11 = v8;
    v8 = *v14;
  }
  while (*v14);
  if (v11 != v9 && *(_DWORD *)(v11 + 32) <= a2)
  {
    v16 = 0uLL;
    v17 = 0;
    sub_10027205C(&v16, *(const void **)(v11 + 40), *(_QWORD *)(v11 + 48), (uint64_t)(*(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40)) >> 2);
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v17;
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
LABEL_11:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_101368110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101368128@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_100D81890(v3[4], a2);
  return (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
}

void sub_1013681E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013681F8(uint64_t a1, uint64_t *a2, int **a3, int a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  NSObject *v25;
  char *v26;
  unint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int *i;
  int v51;
  const char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  int **v60;
  int v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  void *__p;
  int *v68;
  char *v69;
  uint64_t v70;
  pthread_mutex_t *v71;
  __int16 v72;
  int v73;
  int v74;
  unint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  _DWORD v82[2];
  __int16 v83;
  uint64_t v84;
  _BYTE buf[24];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[28];
  uint64_t v94;
  int v95;
  int v96;
  int32x2_t v97;

  v73 = a4;
  if (a3[1] == *a3)
    sub_10194F464();
  v9 = *(_QWORD *)(a1 + 56);
  v70 = a1 + 56;
  (*(void (**)(void))(v9 + 16))();
  v72 = 256;
  __p = 0;
  v68 = 0;
  v69 = 0;
  v10 = *a2;
  v11 = a2[1];
  if (*a2 == v11)
  {
    v22 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      if (v12 >= v69)
      {
        v13 = (char *)__p;
        v14 = (v12 - (_BYTE *)__p) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_100259694();
        v16 = v69 - (_BYTE *)__p;
        if ((v69 - (_BYTE *)__p) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)sub_100260634((uint64_t)&v69, v17);
          v13 = (char *)__p;
          v12 = (char *)v68;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = *(_DWORD *)(v10 + 160);
        v20 = (int *)(v19 + 4);
        while (v12 != v13)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        __p = v19;
        v68 = v20;
        v69 = &v18[4 * v17];
        if (v13)
          operator delete(v13);
        v12 = (char *)v20;
      }
      else
      {
        *(_DWORD *)v12 = *(_DWORD *)(v10 + 160);
        v12 += 4;
      }
      v68 = (int *)v12;
      v10 += 184;
    }
    while (v10 != v11);
    v22 = (int *)__p;
    if (__p == v12)
    {
LABEL_34:
      v22 = (int *)v12;
    }
    else
    {
      v23 = v73;
      if ((v73 - 1) <= 2)
      {
        while (1)
        {
          v24 = *v22;
          if (v23 == 3)
          {
            if (v24 < 1)
              break;
          }
          else if (v23 == 1)
          {
            if (v24 < 1 || !sub_1000AFA5C(v24))
              break;
          }
          else if (v24 <= 0 || sub_1000AFA5C(v24))
          {
            break;
          }
          if (++v22 == (int *)v12)
            goto LABEL_34;
        }
      }
      if (v22 != (int *)v12)
      {
        for (i = v22 + 1; ; ++i)
        {
          if (i == (int *)v12)
            goto LABEL_36;
          v51 = *i;
          if (v23 == 3)
            break;
          if (v23 == 2)
          {
            if (v51 > 0 && !sub_1000AFA5C(v51))
              goto LABEL_75;
          }
          else if (v23 == 1 && v51 >= 1 && sub_1000AFA5C(v51))
          {
            goto LABEL_75;
          }
LABEL_76:
          ;
        }
        if (v51 < 1)
          goto LABEL_76;
LABEL_75:
        *v22++ = *i;
        goto LABEL_76;
      }
    }
  }
LABEL_36:
  if (v22 != v68)
    v68 = v22;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  v25 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v73;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = ((char *)v68 - (_BYTE *)__p) >> 2;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "@WifiChannel, surroundingWifiBand, %d, # of aps on band, %lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v82[0] = 67109376;
    v82[1] = v73;
    v83 = 2048;
    v84 = ((char *)v68 - (_BYTE *)__p) >> 2;
    LODWORD(v65) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WifiChannel, surroundingWifiBand, %d, # of aps on band, %lu", v82, v65);
    v54 = (char *)v53;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, const std::vector<int> &, CLNetworkLocationRequest_Type::CLAlsWifiBand, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
  *(_QWORD *)buf = &v73;
  v26 = (char *)(sub_1000BC378((uint64_t **)(a1 + 112), &v73, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
  if (v26 != (char *)&__p)
    sub_1002A3054(v26, (char *)__p, (uint64_t)v68, ((char *)v68 - (_BYTE *)__p) >> 2);
  sub_100D81908(*(_QWORD *)(a1 + 88), (uint64_t)v82);
  v66 = sub_100D81DFC(*(_QWORD *)(a1 + 88));
  v27 = *(_QWORD *)(a1 + 40);
  if ((v27 & 0x8000000000000000) == 0)
    sub_100D818A0(*(_QWORD *)(a1 + 88), v27);
  v28 = *a3;
  v29 = a3[1];
  if (*a3 != v29)
  {
    do
    {
      v30 = *a2;
      v31 = a2[1];
      if (*a2 != v31)
      {
        v32 = *v28;
        do
        {
          v33 = *(_DWORD *)(v30 + 164);
          *(_QWORD *)buf = *(_QWORD *)(v30 + 176);
          v34 = *(_QWORD *)(v30 + 156);
          v35 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)&buf[8] = *(_OWORD *)v30;
          v86 = v35;
          v36 = *(_OWORD *)(v30 + 32);
          v37 = *(_OWORD *)(v30 + 48);
          v38 = *(_OWORD *)(v30 + 80);
          v89 = *(_OWORD *)(v30 + 64);
          v90 = v38;
          v87 = v36;
          v88 = v37;
          v39 = *(_OWORD *)(v30 + 96);
          v40 = *(_OWORD *)(v30 + 112);
          v41 = *(_OWORD *)(v30 + 128);
          *(_OWORD *)&v93[12] = *(_OWORD *)(v30 + 140);
          v92 = v40;
          *(_OWORD *)v93 = v41;
          v91 = v39;
          v94 = v34;
          v95 = v33;
          v96 = v32;
          v97 = vrev64_s32(*(int32x2_t *)(v30 + 168));
          sub_100D81898(*(_QWORD *)(a1 + 88));
          v30 += 184;
        }
        while (v30 != v31);
      }
      ++v28;
    }
    while (v28 != v29);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  v42 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v44 = *a2;
    v43 = a2[1];
    v46 = *a3;
    v45 = a3[1];
    v47 = sub_100D81DFC(*(_QWORD *)(a1 + 88));
    v48 = (a2[1] - *a2) >> 3;
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = 0xD37A6F4DE9BD37A7 * ((v43 - v44) >> 3) * (v45 - v46);
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v66;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v47;
    LOWORD(v86) = 2050;
    *(_QWORD *)((char *)&v86 + 2) = 0xD37A6F4DE9BD37A7 * v48;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u, aps, %{public}lu", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v55 = qword_1022A0058;
    v57 = *a2;
    v56 = a2[1];
    v60 = a3;
    v58 = *a3;
    v59 = v60[1];
    v61 = sub_100D81DFC(*(_QWORD *)(a1 + 88));
    v62 = (a2[1] - *a2) >> 3;
    v74 = 134349824;
    v75 = 0xD37A6F4DE9BD37A7 * ((v56 - v57) >> 3) * (v59 - v58);
    v76 = 1026;
    v77 = v66;
    v78 = 1026;
    v79 = v61;
    v80 = 2050;
    v81 = 0xD37A6F4DE9BD37A7 * v62;
    LODWORD(v65) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 1, "@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u, aps, %{public}lu", &v74, v65);
    v64 = (char *)v63;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, const std::vector<int> &, CLNetworkLocationRequest_Type::CLAlsWifiBand, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v63);
    if (v64 != buf)
      free(v64);
  }
  sub_1000C7B24(v82);
  *(double *)(a1 + 32) = a5;
  *(double *)(*(_QWORD *)(a1 + 96) + 32) = a5;
  v49 = -373475417 * ((unint64_t)(a2[1] - *a2) >> 3);
  if (__p)
  {
    v68 = (int *)__p;
    operator delete(__p);
  }
  if (HIBYTE(v72))
  {
    if ((_BYTE)v72)
      pthread_mutex_unlock(v71);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
  }
  return v49;
}

#error "101368BB8: call analysis failed (funcsize=109)"

void sub_101368C10(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[8];
  __int16 v6;

  v3 = *(_QWORD *)(a1 + 56);
  v5[7] = a1 + 56;
  (*(void (**)(void))(v3 + 16))();
  v6 = 256;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101369248;
  v5[3] = &unk_10217D888;
  *(double *)&v5[4] = a2;
  v5[5] = mach_absolute_time();
  v5[6] = v5;
  sub_100131938(&v4, (uint64_t)"upgrade-wifi-tiles-schema", 0);
  sub_101157DE4(a2);
}

void sub_101368D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_101369248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLWifiAccessPointLocationService::saveWifiTileAccessPointEntries\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

uint64_t sub_10136937C(uint64_t a1, uint64_t a2)
{
  return sub_101157674(*(uint64_t **)(a1 + 96), a2);
}

uint64_t sub_101369384@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t **v3;

  v3 = (uint64_t **)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_1011581C8(v3[5], a2);
  return ((uint64_t (*)(uint64_t **))(*v3)[3])(v3);
}

void sub_101369400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101369414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  __int16 v7;

  v5 = a1 + 56;
  v4 = *(_QWORD *)(a1 + 56);
  v6[1] = a1 + 56;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 56);
  v7 = 256;
  if (*(_DWORD *)a2)
  {
    sub_10194F308();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm", 731, "updateGizmoSyncTimestampForTile");
    __break(1u);
  }
  else
  {
    v6[0] = *(_QWORD *)(a2 + 4);
    sub_1011581E0(*(uint64_t **)(a1 + 96), (int)v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
}

void sub_1013694E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013694F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  v2 = sub_100D818A8(v1[4]);
  (*(void (**)(uint64_t *))(*v1 + 24))(v1);
  return v2;
}

void sub_101369564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101369578(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_100D81910(v1[4]);
  return (*(uint64_t (**)(uint64_t *))(*v1 + 24))(v1);
}

void sub_1013695D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013695E8(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_100D818D0(v1[4]);
  return (*(uint64_t (**)(uint64_t *))(*v1 + 24))(v1);
}

void sub_101369644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101369658(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 136);
  if (v1)
    sub_100930F0C(v1);
}

uint64_t sub_101369668(uint64_t a1, double a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_100D818DC(v3[4], a2);
  return (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
}

void sub_1013696D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013696E8(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _BYTE v11[152];
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;

  v5 = a1 + 56;
  v4 = *(_QWORD *)(a1 + 56);
  v13 = a1 + 56;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 56);
  v14 = 256;
  v12 = sub_1011572A4(a2);
  sub_1011581C8(*(uint64_t **)(a1 + 96), v11);
  if (v11[144])
  {
    v6 = sub_1004770E0((uint64_t)v11);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67174913;
      v19 = v12;
      v20 = 1025;
      v21 = HIDWORD(v12);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#warning, tile does not exists to query num inputs, x, %{private}d, y, %{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      v15[0] = 67174913;
      v15[1] = v12;
      v16 = 1025;
      v17 = HIDWORD(v12);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "#warning, tile does not exists to query num inputs, x, %{private}d, y, %{private}d", v15, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "int CLWifiAccessPointLocationService::numberOfInputApsUsedInWifiTileForCoordinate(const CLClientLocationCoordinate &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v6 = 0xFFFFFFFFLL;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v6;
}

void sub_101369924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_10187E514((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_101369950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t **v7;
  _BYTE v9[152];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;

  v7 = (uint64_t **)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  v12 = a1 + 56;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 56);
  v13 = 256;
  v11 = 0;
  v10 = *(_QWORD *)(a2 + 4);
  sub_1011581C8(v7[5], v9);
  if (v9[144])
    sub_1011581E8(*(uint64_t **)(a1 + 96));
  *a3 = v11;
  return ((uint64_t (*)(uint64_t **))(*v7)[3])(v7);
}

void sub_101369A10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 64);
  *(_QWORD *)(v1 - 64) = 0;
  if (v3)
    sub_1004966B4(v1 - 64, v3);
  sub_10187E514(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_101369A38(uint64_t a1)
{
  unsigned int *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(unsigned int **)(a1 + 80);
  if (v1)
  {
    sub_100649ECC(v1);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021B18C0);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "fWifiApLocationLookupMetrics is null.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021B18C0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "fWifiApLocationLookupMetrics is null.", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiAccessPointLocationService::submitWifiApLocationLookupMetrics() const", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_101369BF0(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_101367E78(v3 + 4, a2);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
}

void sub_101369C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101369C68(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint8_t buf[1640];

  v3 = (uint64_t **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 56);
  v9 = a1 + 56;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 56);
  v10 = 256;
  sub_101157364(v3[5]);
  if ((sub_1011581C0(*(uint64_t **)(a1 + 96)) & 1) != 0)
  {
    sub_101369E70(a1);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to establish a valid database connection, expect wifi positioning accuracy to be significantly degraded", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      v8 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "failed to establish a valid database connection, expect wifi positioning accuracy to be significantly degraded", &v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiAccessPointLocationService::establishWifiTileDatabaseConnectionsIfNecessary()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return ((uint64_t (*)(uint64_t **))(*v3)[3])(v3);
}

void sub_101369E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101369E70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v15;
  uint64_t *v16;
  uint8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t buf;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a1 + 56;
  v3 = *(_QWORD *)(a1 + 56);
  v22 = a1 + 56;
  (*(void (**)(uint64_t))(v3 + 16))(a1 + 56);
  LOWORD(v24) = 256;
  if (!*(_BYTE *)(v4 - 3))
  {
    v5 = sub_1011581C0(*(uint64_t **)(a1 + 96));
    if ((v5 & 1) != 0)
    {
      -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "upgrade-wifi-tiles-schema");
      sub_1011581D0(*(uint64_t **)(a1 + 96));
      v1 = &qword_1022A0000;
      if (qword_1022A0050 == -1)
        goto LABEL_4;
    }
    else
    {
      sub_10194F6A8(v5, v6, v7, v8, v9, v10, v11, v12, v17, v18, v19, v20, v21, v22, v23, v24, buf, v26, v27,
        v28,
        v29,
        v30,
        v31,
        v32);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm", 888, "dropTilesIfWifiTilesHeaderSchemaChanged");
      __break(1u);
    }
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
LABEL_4:
    v13 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "unconditionally removing all #tile tables in favor of new schema", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (v1[10] != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      LOWORD(v21) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "unconditionally removing all #tile tables in favor of new schema", &v21, v18);
      v16 = (uint64_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiAccessPointLocationService::dropTilesIfWifiTilesHeaderSchemaChanged()", "%s\n", v15);
      if (v16 != &buf)
        free(v16);
    }
    sub_10115766C(*(uint64_t **)(a1 + 96));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_10136A33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10136A380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  _BYTE v11[40];
  uint64_t v12;
  pthread_mutex_t *v13;
  __int16 v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v3 = a1 + 56;
  v2 = *(_QWORD *)(a1 + 56);
  v12 = a1 + 56;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 56);
  v14 = 256;
  sub_1000C7A5C(*(uint64_t **)(v3 + 40), (uint64_t)v11);
  v4 = sub_10115736C(*(uint64_t **)(a1 + 96));
  v5 = sub_100D81DFC(*(_QWORD *)(a1 + 88));
  if ((_DWORD)v5)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67174657;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "remaining entries in als db, deleting, %{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      v15[0] = 67174657;
      v15[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "remaining entries in als db, deleting, %{private}d", v15, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<int, int> CLWifiAccessPointLocationService::errorOnRemainingAndDelete()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_100D818D0(*(_QWORD *)(a1 + 88));
  }
  sub_1000C7B24(v11);
  v7 = v5 << 32;
  if (HIBYTE(v14))
  {
    if ((_BYTE)v14)
      pthread_mutex_unlock(v13);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  }
  return v7 | v4;
}

void sub_10136A5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int buf,int a22,__int128 a23)
{
  void *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;

  sub_1000C7B24(&a11);
  if (a2 == 3)
  {
    v25 = __cxa_begin_catch(a1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v26 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
      buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(_QWORD *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(_QWORD *)((char *)&a23 + 12) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"sqlite error deleting remaining tiles.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    v28 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
      buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(_QWORD *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(_QWORD *)((char *)&a23 + 12) = v29;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "sqlite error deleting remaining tiles.", "{\"msg%{public}.0s\":\"sqlite error deleting remaining tiles.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else if (a2 == 2)
  {
    v30 = __cxa_begin_catch(a1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v31 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(_QWORD *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(_QWORD *)((char *)&a23 + 12) = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"no database connection.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    v33 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(_QWORD *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(_QWORD *)((char *)&a23 + 12) = v34;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "no database connection.", "{\"msg%{public}.0s\":\"no database connection.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else
  {
    if (a2 != 1)
    {
      sub_10187E514((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
    v35 = __cxa_begin_catch(a1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v36 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
      buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(_QWORD *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(_QWORD *)((char *)&a23 + 12) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"runtime error deleting tile.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    v38 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v39 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
      buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(_QWORD *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(_QWORD *)((char *)&a23 + 12) = v39;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "runtime error deleting tile.", "{\"msg%{public}.0s\":\"runtime error deleting tile.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x10136A47CLL);
}

void sub_10136AA64(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  double *v63;
  double *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *i;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  char *v109;
  _BYTE v110[24];
  void *v111;
  char v112;
  void *v113;
  _OWORD *v114;
  uint64_t v115;
  void *v116;
  char *v117;
  unint64_t v118;
  void *__p;
  char *v120;
  unint64_t v121;
  void *v122;
  char *v123;

  sub_10022A734(*(uint64_t **)(a1 + 96), &v122);
  __p = 0;
  v120 = 0;
  v121 = 0;
  v6 = (char *)v122;
  v7 = v123;
  if (v122 != v123)
  {
    while (*(double *)(a1 + 16) >= vabdd_f64(a3, sub_100C3C640((uint64_t)v6)))
    {
      v6 += 144;
      if (v6 == v7)
      {
        v6 = v7;
        goto LABEL_38;
      }
    }
    v8 = 0x8E38E38E38E38E39 * ((v120 - (_BYTE *)__p) >> 4) + 1;
    if (v8 > 0x1C71C71C71C71C7)
LABEL_102:
      sub_100259694();
    if (0x1C71C71C71C71C72 * ((uint64_t)(v121 - (_QWORD)__p) >> 4) > v8)
      v8 = 0x1C71C71C71C71C72 * ((uint64_t)(v121 - (_QWORD)__p) >> 4);
    if (0x8E38E38E38E38E39 * ((uint64_t)(v121 - (_QWORD)__p) >> 4) >= 0xE38E38E38E38E3)
      v9 = 0x1C71C71C71C71C7;
    else
      v9 = v8;
    if (v9)
      v10 = (char *)sub_100686504((uint64_t)&v121, v9);
    else
      v10 = 0;
    v11 = &v10[16 * ((v120 - (_BYTE *)__p) >> 4)];
    *(_OWORD *)v11 = *(_OWORD *)v6;
    v12 = *((_OWORD *)v6 + 1);
    v13 = *((_OWORD *)v6 + 2);
    v14 = *((_OWORD *)v6 + 4);
    *((_OWORD *)v11 + 3) = *((_OWORD *)v6 + 3);
    *((_OWORD *)v11 + 4) = v14;
    *((_OWORD *)v11 + 1) = v12;
    *((_OWORD *)v11 + 2) = v13;
    v15 = *((_OWORD *)v6 + 5);
    v16 = *((_OWORD *)v6 + 6);
    v17 = *((_OWORD *)v6 + 8);
    *((_OWORD *)v11 + 7) = *((_OWORD *)v6 + 7);
    *((_OWORD *)v11 + 8) = v17;
    *((_OWORD *)v11 + 5) = v15;
    *((_OWORD *)v11 + 6) = v16;
    __p = v11;
    v121 = (unint64_t)&v10[144 * v9];
    v120 = v11 + 144;
    if (v6 != v7)
    {
      v18 = v6 + 144;
      if (v6 + 144 != v7)
      {
        do
        {
          if (*(double *)(a1 + 16) >= vabdd_f64(a3, sub_100C3C640((uint64_t)v18)))
          {
            *(_OWORD *)v6 = *v18;
            v26 = v18[1];
            v27 = v18[2];
            v28 = v18[4];
            *((_OWORD *)v6 + 3) = v18[3];
            *((_OWORD *)v6 + 4) = v28;
            *((_OWORD *)v6 + 1) = v26;
            *((_OWORD *)v6 + 2) = v27;
            v29 = v18[5];
            v30 = v18[6];
            v31 = v18[7];
            *(_OWORD *)(v6 + 124) = *(_OWORD *)((char *)v18 + 124);
            *((_OWORD *)v6 + 6) = v30;
            *((_OWORD *)v6 + 7) = v31;
            *((_OWORD *)v6 + 5) = v29;
            v6 += 144;
          }
          else
          {
            v19 = v120;
            if ((unint64_t)v120 >= v121)
            {
              v32 = (char *)__p;
              v33 = 0x8E38E38E38E38E39 * ((v120 - (_BYTE *)__p) >> 4);
              v34 = v33 + 1;
              if (v33 + 1 > 0x1C71C71C71C71C7)
                goto LABEL_102;
              if (0x1C71C71C71C71C72 * ((uint64_t)(v121 - (_QWORD)__p) >> 4) > v34)
                v34 = 0x1C71C71C71C71C72 * ((uint64_t)(v121 - (_QWORD)__p) >> 4);
              if (0x8E38E38E38E38E39 * ((uint64_t)(v121 - (_QWORD)__p) >> 4) >= 0xE38E38E38E38E3)
                v35 = 0x1C71C71C71C71C7;
              else
                v35 = v34;
              if (v35)
              {
                v36 = (char *)sub_100686504((uint64_t)&v121, v35);
                v32 = (char *)__p;
                v19 = v120;
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[16 * ((v120 - (_BYTE *)__p) >> 4)];
              *(_OWORD *)v37 = *v18;
              v38 = v18[1];
              v39 = v18[2];
              v40 = v18[4];
              *((_OWORD *)v37 + 3) = v18[3];
              *((_OWORD *)v37 + 4) = v40;
              *((_OWORD *)v37 + 1) = v38;
              *((_OWORD *)v37 + 2) = v39;
              v41 = v18[5];
              v42 = v18[6];
              v43 = v18[8];
              *((_OWORD *)v37 + 7) = v18[7];
              *((_OWORD *)v37 + 8) = v43;
              *((_OWORD *)v37 + 5) = v41;
              *((_OWORD *)v37 + 6) = v42;
              if (v19 == v32)
              {
                v51 = &v36[144 * v33];
              }
              else
              {
                v44 = &v36[144 * v33];
                do
                {
                  *((_OWORD *)v44 - 9) = *((_OWORD *)v19 - 9);
                  v45 = *((_OWORD *)v19 - 8);
                  v46 = *((_OWORD *)v19 - 7);
                  v47 = *((_OWORD *)v19 - 5);
                  *((_OWORD *)v44 - 6) = *((_OWORD *)v19 - 6);
                  *((_OWORD *)v44 - 5) = v47;
                  *((_OWORD *)v44 - 8) = v45;
                  *((_OWORD *)v44 - 7) = v46;
                  v48 = *((_OWORD *)v19 - 4);
                  v49 = *((_OWORD *)v19 - 3);
                  v50 = *((_OWORD *)v19 - 2);
                  v51 = v44 - 144;
                  *(_OWORD *)(v44 - 20) = *(_OWORD *)(v19 - 20);
                  *((_OWORD *)v44 - 3) = v49;
                  *((_OWORD *)v44 - 2) = v50;
                  *((_OWORD *)v44 - 4) = v48;
                  v19 -= 144;
                  v44 -= 144;
                }
                while (v19 != v32);
              }
              v52 = v37 + 144;
              __p = v51;
              v120 = v37 + 144;
              v121 = (unint64_t)&v36[144 * v35];
              if (v32)
                operator delete(v32);
              v120 = v52;
            }
            else
            {
              *(_OWORD *)v120 = *v18;
              v20 = v18[1];
              v21 = v18[2];
              v22 = v18[4];
              *((_OWORD *)v19 + 3) = v18[3];
              *((_OWORD *)v19 + 4) = v22;
              *((_OWORD *)v19 + 1) = v20;
              *((_OWORD *)v19 + 2) = v21;
              v23 = v18[5];
              v24 = v18[6];
              v25 = v18[8];
              *((_OWORD *)v19 + 7) = v18[7];
              *((_OWORD *)v19 + 8) = v25;
              *((_OWORD *)v19 + 5) = v23;
              *((_OWORD *)v19 + 6) = v24;
              v120 = v19 + 144;
            }
          }
          v18 += 9;
        }
        while (v18 != (_OWORD *)v7);
      }
    }
  }
LABEL_38:
  v53 = (char *)v122;
  if (v6 != v123)
    v123 = v6;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v122 == v6)
  {
LABEL_43:
    v53 = v6;
  }
  else
  {
    while (*(double *)(a1 + 24) >= vabdd_f64(a3, sub_100C3C628((uint64_t)v53)))
    {
      v53 += 144;
      if (v53 == v6)
        goto LABEL_43;
    }
    v65 = 0x8E38E38E38E38E39 * ((v117 - (_BYTE *)v116) >> 4) + 1;
    if (v65 > 0x1C71C71C71C71C7)
LABEL_103:
      sub_100259694();
    if (0x1C71C71C71C71C72 * ((uint64_t)(v118 - (_QWORD)v116) >> 4) > v65)
      v65 = 0x1C71C71C71C71C72 * ((uint64_t)(v118 - (_QWORD)v116) >> 4);
    if (0x8E38E38E38E38E39 * ((uint64_t)(v118 - (_QWORD)v116) >> 4) >= 0xE38E38E38E38E3)
      v66 = 0x1C71C71C71C71C7;
    else
      v66 = v65;
    if (v66)
      v67 = (char *)sub_100686504((uint64_t)&v118, v66);
    else
      v67 = 0;
    v68 = &v67[16 * ((v117 - (_BYTE *)v116) >> 4)];
    *(_OWORD *)v68 = *(_OWORD *)v53;
    v69 = *((_OWORD *)v53 + 1);
    v70 = *((_OWORD *)v53 + 2);
    v71 = *((_OWORD *)v53 + 4);
    *((_OWORD *)v68 + 3) = *((_OWORD *)v53 + 3);
    *((_OWORD *)v68 + 4) = v71;
    *((_OWORD *)v68 + 1) = v69;
    *((_OWORD *)v68 + 2) = v70;
    v72 = *((_OWORD *)v53 + 5);
    v73 = *((_OWORD *)v53 + 6);
    v74 = *((_OWORD *)v53 + 8);
    *((_OWORD *)v68 + 7) = *((_OWORD *)v53 + 7);
    *((_OWORD *)v68 + 8) = v74;
    *((_OWORD *)v68 + 5) = v72;
    *((_OWORD *)v68 + 6) = v73;
    v116 = v68;
    v118 = (unint64_t)&v67[144 * v66];
    v117 = v68 + 144;
    if (v53 != v6)
    {
      for (i = v53 + 144; i != v6; i += 144)
      {
        if (*(double *)(a1 + 24) >= vabdd_f64(a3, sub_100C3C628((uint64_t)i)))
        {
          *(_OWORD *)v53 = *(_OWORD *)i;
          v83 = *((_OWORD *)i + 1);
          v84 = *((_OWORD *)i + 2);
          v85 = *((_OWORD *)i + 4);
          *((_OWORD *)v53 + 3) = *((_OWORD *)i + 3);
          *((_OWORD *)v53 + 4) = v85;
          *((_OWORD *)v53 + 1) = v83;
          *((_OWORD *)v53 + 2) = v84;
          v86 = *((_OWORD *)i + 5);
          v87 = *((_OWORD *)i + 6);
          v88 = *((_OWORD *)i + 7);
          *(_OWORD *)(v53 + 124) = *(_OWORD *)(i + 124);
          *((_OWORD *)v53 + 6) = v87;
          *((_OWORD *)v53 + 7) = v88;
          *((_OWORD *)v53 + 5) = v86;
          v53 += 144;
        }
        else
        {
          v76 = v117;
          if ((unint64_t)v117 >= v118)
          {
            v89 = (char *)v116;
            v90 = 0x8E38E38E38E38E39 * ((v117 - (_BYTE *)v116) >> 4);
            v91 = v90 + 1;
            if (v90 + 1 > 0x1C71C71C71C71C7)
              goto LABEL_103;
            if (0x1C71C71C71C71C72 * ((uint64_t)(v118 - (_QWORD)v116) >> 4) > v91)
              v91 = 0x1C71C71C71C71C72 * ((uint64_t)(v118 - (_QWORD)v116) >> 4);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v118 - (_QWORD)v116) >> 4) >= 0xE38E38E38E38E3)
              v92 = 0x1C71C71C71C71C7;
            else
              v92 = v91;
            if (v92)
            {
              v93 = (char *)sub_100686504((uint64_t)&v118, v92);
              v89 = (char *)v116;
              v76 = v117;
            }
            else
            {
              v93 = 0;
            }
            v94 = &v93[16 * ((v117 - (_BYTE *)v116) >> 4)];
            *(_OWORD *)v94 = *(_OWORD *)i;
            v95 = *((_OWORD *)i + 1);
            v96 = *((_OWORD *)i + 2);
            v97 = *((_OWORD *)i + 4);
            *((_OWORD *)v94 + 3) = *((_OWORD *)i + 3);
            *((_OWORD *)v94 + 4) = v97;
            *((_OWORD *)v94 + 1) = v95;
            *((_OWORD *)v94 + 2) = v96;
            v98 = *((_OWORD *)i + 5);
            v99 = *((_OWORD *)i + 6);
            v100 = *((_OWORD *)i + 8);
            *((_OWORD *)v94 + 7) = *((_OWORD *)i + 7);
            *((_OWORD *)v94 + 8) = v100;
            *((_OWORD *)v94 + 5) = v98;
            *((_OWORD *)v94 + 6) = v99;
            if (v76 == v89)
            {
              v108 = &v93[144 * v90];
            }
            else
            {
              v101 = &v93[144 * v90];
              do
              {
                *((_OWORD *)v101 - 9) = *((_OWORD *)v76 - 9);
                v102 = *((_OWORD *)v76 - 8);
                v103 = *((_OWORD *)v76 - 7);
                v104 = *((_OWORD *)v76 - 5);
                *((_OWORD *)v101 - 6) = *((_OWORD *)v76 - 6);
                *((_OWORD *)v101 - 5) = v104;
                *((_OWORD *)v101 - 8) = v102;
                *((_OWORD *)v101 - 7) = v103;
                v105 = *((_OWORD *)v76 - 4);
                v106 = *((_OWORD *)v76 - 3);
                v107 = *((_OWORD *)v76 - 2);
                v108 = v101 - 144;
                *(_OWORD *)(v101 - 20) = *(_OWORD *)(v76 - 20);
                *((_OWORD *)v101 - 3) = v106;
                *((_OWORD *)v101 - 2) = v107;
                *((_OWORD *)v101 - 4) = v105;
                v76 -= 144;
                v101 -= 144;
              }
              while (v76 != v89);
            }
            v109 = v94 + 144;
            v116 = v108;
            v117 = v94 + 144;
            v118 = (unint64_t)&v93[144 * v92];
            if (v89)
              operator delete(v89);
            v117 = v109;
          }
          else
          {
            *(_OWORD *)v117 = *(_OWORD *)i;
            v77 = *((_OWORD *)i + 1);
            v78 = *((_OWORD *)i + 2);
            v79 = *((_OWORD *)i + 4);
            *((_OWORD *)v76 + 3) = *((_OWORD *)i + 3);
            *((_OWORD *)v76 + 4) = v79;
            *((_OWORD *)v76 + 1) = v77;
            *((_OWORD *)v76 + 2) = v78;
            v80 = *((_OWORD *)i + 5);
            v81 = *((_OWORD *)i + 6);
            v82 = *((_OWORD *)i + 8);
            *((_OWORD *)v76 + 7) = *((_OWORD *)i + 7);
            *((_OWORD *)v76 + 8) = v82;
            *((_OWORD *)v76 + 5) = v80;
            *((_OWORD *)v76 + 6) = v81;
            v117 = v76 + 144;
          }
        }
      }
    }
  }
  if (v53 != v123)
    v123 = v53;
  v54 = 0x8E38E38E38E38E39 * ((v53 - (_BYTE *)v122) >> 4);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  if (v54 > *(unsigned int *)(a1 + 48))
  {
    v55 = 126 - 2 * __clz(v54);
    v56 = v53 == v122 ? 0 : v55;
    sub_10136C588((__int128 *)v122, (__int128 *)v53, v56, 1);
    v57 = 0x8E38E38E38E38E39 * ((v123 - (_BYTE *)v122) >> 4);
    v58 = *(unsigned int *)(a1 + 48);
    v59 = v57 - v58;
    sub_10136DDD0(v122, (_OWORD *)v122 + 9 * (v57 - v58), &v113);
    if (v57 != v58)
    {
      v60 = (char *)v122;
      v61 = (char *)v122 + 144 * v59;
      v62 = v123 - v61;
      if (v123 != v61)
        memmove(v122, v61, v62 - 4);
      v123 = &v60[v62];
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_10136DDD0(__p, v120, (void **)a2);
  sub_10136DDD0(v116, v117, (void **)a2);
  sub_10136DDD0(v113, v114, (void **)a2);
  v63 = *(double **)a2;
  v64 = *(double **)(a2 + 8);
  while (v63 != v64)
  {
    sub_1000C18E4(v63, (uint64_t)v110);
    sub_101157674(*(uint64_t **)(a1 + 96), (uint64_t)v110);
    if (v112 < 0)
      operator delete(v111);
    v63 += 18;
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    v117 = (char *)v116;
    operator delete(v116);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  if (v122)
  {
    v123 = (char *)v122;
    operator delete(v122);
  }
}

void sub_10136B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10136B454(uint64_t a1, int a2)
{
  return sub_100649EB0(*(_DWORD **)(a1 + 80), a2);
}

uint64_t sub_10136B45C(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_100259694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_100313718(result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_1000C19A4(a1, v19);
    v10 = a1[1];
    result = sub_1000C1970((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_10136B5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000C1970((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10136B5B4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = a1;
  v2 = a1 + 7;
  (*(void (**)(_QWORD *))(a1[7] + 16))(a1 + 7);
  sub_10129F7A8(v2 + 6);
  v3 = (_QWORD *)v1[15];
  v1 += 15;
  sub_10010D350((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  return (*(uint64_t (**)(_QWORD *))(*(v1 - 8) + 24))(v2);
}

void sub_10136B628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10136B63C(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    sub_100930F34(v2, a2);
}

BOOL sub_10136B64C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t sub_10136B65C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint8_t buf[1640];

  v3 = a1 + 56;
  v2 = *(_QWORD *)(a1 + 56);
  v10 = a1 + 56;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 56);
  v11 = 256;
  if ((sub_10018626C() & 1) != 0)
  {
    v4 = *(void **)(a1 + 160);
    if (v4)
    {
      objc_msgSend(v4, "reInitializeDatabasesAndSyncEngineIfNeeded");
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021B18C0);
      v5 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "WifiAssociatedApCentroidStore, did we forget to initialize it in constructor?", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021B18C0);
        v9 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiAssociatedApCentroidStore, did we forget to initialize it in constructor?", &v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "void CLWifiAccessPointLocationService::reInitializeWifiAssociatedApCentroidStoreIfInvalid()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_10136B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10136B85C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10136B888(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10136B8B4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

_QWORD *sub_10136B8E0(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_10136B9B8(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_10136B9B8(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_10136B9B8(a1 + 6, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4));
  return a1;
}

void sub_10136B98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100495E10((void ***)va);
  sub_100495E10((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10136B9B8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100858CC4(result, a4);
    result = (_QWORD *)sub_10136BA3C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10136BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100495E10(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10136BA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 24);
    do
    {
      v7 = *(__int128 *)((char *)v6 - 24);
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v4 = v7;
      v8 = (_BYTE *)(v4 + 24);
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v8, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v15;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 40) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
      }
      v10 = (uint64_t)v6 - 24;
      v4 += 48;
      v15 = v4;
      v6 += 3;
    }
    while (v10 + 48 != a3);
  }
  v13 = 1;
  sub_1004964B4((uint64_t)v12);
  return v4;
}

void sub_10136BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1004964B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10136BB10()
{
  _QWORD *v0;

  v0 = operator new(0xC0uLL);
  sub_10136BB58(v0);
}

void sub_10136BB44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10136BB58(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021B1930;
  a1[1] = 0;
  sub_1013666B0();
}

void sub_10136BB90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10136BBA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B1930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10136BBB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B1930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10136BBEC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10136BBFC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  sub_10055D44C(a1 + 1, "CLWifiTileDataRepository", 1, 1);
  a1[4] = 0;
  return a1;
}

void sub_10136BC40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_101157324(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_10136BC58(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101157360(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_10136BC94(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *result = *a2;
  if (v2)
    operator new();
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_10136BD04(uint64_t a1)
{
  sub_10136BD4C(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_10136BD0C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void sub_10136BD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    sub_101325F18(a2 + 168);
    *(_QWORD *)(a2 + 72) = off_1021B19E0;
    if (*(char *)(a2 + 159) < 0)
      operator delete(*(void **)(a2 + 136));
    if (*(char *)(a2 + 135) < 0)
      operator delete(*(void **)(a2 + 112));
    v3 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    sub_100261F44(a2 + 40);
    sub_100261F44(a2 + 24);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete();
  }
}

uint64_t *sub_10136BE0C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100008848(v2, *(_QWORD **)(v2 + 8));
    operator delete();
  }
  return result;
}

void sub_10136BE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    sub_10071BCA0((uint64_t *)(a2 + 56), 0);
    v3 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    operator delete();
  }
}

uint64_t *sub_10136BEC8(uint64_t **a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)sub_100C7545C((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    sub_10136BF4C((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000145B0(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t sub_10136BF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t result;

  v7 = a1 + 8;
  v8 = operator new(0xD8uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_10136BFD4((uint64_t)v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10136BFB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1007A2864(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10136BFD4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v6, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v6 = v7;
  }
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 32) = v8;
  v11 = a3[4];
  v12 = a3[5];
  v13 = a3[3];
  *(_OWORD *)(a1 + 120) = a3[2];
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v13;
  v14 = *a3;
  *(_OWORD *)(a1 + 104) = a3[1];
  *(_OWORD *)(a1 + 88) = v14;
  return a1;
}

_QWORD *sub_10136C070(uint64_t **a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_100191690((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[4] = **a4;
    *((_BYTE *)v7 + 40) = 0;
    *((_BYTE *)v7 + 60) = 0;
    sub_1000145B0(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t sub_10136C0FC(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *(_DWORD *)(v3 + 32);
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = *(_DWORD *)(v3 + 36) < v6;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(_DWORD *)(v7 + 32);
  v13 = v6 < *(_DWORD *)(v7 + 36);
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

char *sub_10136C170(uint64_t **a1, int *a2, _QWORD *a3, __int128 *a4)
{
  uint64_t *v7;
  char *v8;
  uint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;

  v7 = sub_10136C234((uint64_t)a1, &v15, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0xB8uLL);
    v10 = a4[4];
    *(_OWORD *)(v8 + 120) = a4[5];
    v11 = a4[7];
    *(_OWORD *)(v8 + 136) = a4[6];
    *(_OWORD *)(v8 + 152) = v11;
    *(_OWORD *)(v8 + 168) = a4[8];
    v12 = *a4;
    *(_OWORD *)(v8 + 56) = a4[1];
    v13 = a4[3];
    *(_OWORD *)(v8 + 72) = a4[2];
    *(_OWORD *)(v8 + 88) = v13;
    *(_OWORD *)(v8 + 104) = v10;
    *((_QWORD *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 40) = v12;
    sub_1000145B0(a1, v15, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t *sub_10136C234(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 8);
        v10 = *((_DWORD *)v8 + 9);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

__n128 sub_10136C2B4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  __n128 result;

  v4 = *a1;
  sub_10136C348(*a1);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = a1[1];
  sub_10136C348(v5);
  *(_OWORD *)v5 = *(_OWORD *)(a2 + 24);
  v5[2] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = a1[2];
  sub_10136C348(v6);
  result = *(__n128 *)(a2 + 48);
  *(__n128 *)v6 = result;
  v6[2] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

void sub_10136C348(uint64_t *a1)
{
  if (*a1)
  {
    sub_100495E50(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10136C380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      v10 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(a3 - 8);
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  sub_10136C43C((uint64_t)v13);
  return v11;
}

uint64_t sub_10136C43C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10136C470(a1);
  return a1;
}

void sub_10136C470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    v1 += 56;
  }
}

void sub_10136C4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 56;
      *(_QWORD *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_10136C508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1000C084C((uint64_t **)a1, v4, v6, v6);
      v6 += 48;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_10136C570(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067A00(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10136C588(__int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  __int128 *v40;
  unint64_t v41;
  double v42;
  double v43;
  __int128 *v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  BOOL v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  double v86;
  double v87;
  __int128 *v88;
  double v89;
  double v90;
  __int128 *v91;
  double v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  double v111;
  double v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  BOOL v146;
  char v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  double v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  _OWORD *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  double v164;
  __int128 *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int64_t v172;
  int64_t v173;
  int64_t v174;
  uint64_t v175;
  __int128 *v176;
  double v177;
  __int128 *v178;
  double v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  double v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  int64_t v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 *v212;
  __int128 *v213;
  uint64_t v214;
  uint64_t v215;
  double v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  unint64_t v236;
  __int128 *v237;
  double v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  double v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 *v266;
  uint64_t v267;
  double v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 *v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  double v280;
  double v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 *v288;
  __int128 *v289;
  __int128 *v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  _BYTE v298[32];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  _BYTE v306[32];

void sub_10136D320(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[32];
  _BYTE v67[32];
  _BYTE v68[32];
  _BYTE v69[32];

  sub_10136DBB8(a1, a2, a3, a4);
  v10 = sub_100C3C640((uint64_t)a5);
  if (v10 < sub_100C3C640((uint64_t)a4))
  {
    v62 = a4[6];
    *(_OWORD *)v66 = a4[7];
    *(_OWORD *)&v66[16] = a4[8];
    v46 = a4[2];
    v50 = a4[3];
    v54 = a4[4];
    v58 = a4[5];
    v38 = *a4;
    v42 = a4[1];
    *a4 = *a5;
    v11 = a5[1];
    v12 = a5[2];
    v13 = a5[4];
    a4[3] = a5[3];
    a4[4] = v13;
    a4[1] = v11;
    a4[2] = v12;
    v14 = a5[5];
    v15 = a5[6];
    v16 = a5[7];
    *(__int128 *)((char *)a4 + 124) = *(__int128 *)((char *)a5 + 124);
    a4[6] = v15;
    a4[7] = v16;
    a4[5] = v14;
    a5[6] = v62;
    a5[7] = *(_OWORD *)v66;
    *(__int128 *)((char *)a5 + 124) = *(_OWORD *)&v66[12];
    a5[2] = v46;
    a5[3] = v50;
    a5[4] = v54;
    a5[5] = v58;
    *a5 = v38;
    a5[1] = v42;
    v17 = sub_100C3C640((uint64_t)a4);
    if (v17 < sub_100C3C640((uint64_t)a3))
    {
      v63 = a3[6];
      *(_OWORD *)v67 = a3[7];
      *(_OWORD *)&v67[16] = a3[8];
      v47 = a3[2];
      v51 = a3[3];
      v55 = a3[4];
      v59 = a3[5];
      v39 = *a3;
      v43 = a3[1];
      *a3 = *a4;
      v18 = a4[1];
      v19 = a4[2];
      v20 = a4[4];
      a3[3] = a4[3];
      a3[4] = v20;
      a3[1] = v18;
      a3[2] = v19;
      v21 = a4[5];
      v22 = a4[6];
      v23 = a4[7];
      *(__int128 *)((char *)a3 + 124) = *(__int128 *)((char *)a4 + 124);
      a3[6] = v22;
      a3[7] = v23;
      a3[5] = v21;
      a4[6] = v63;
      a4[7] = *(_OWORD *)v67;
      *(__int128 *)((char *)a4 + 124) = *(_OWORD *)&v67[12];
      a4[2] = v47;
      a4[3] = v51;
      a4[4] = v55;
      a4[5] = v59;
      *a4 = v39;
      a4[1] = v43;
      v24 = sub_100C3C640((uint64_t)a3);
      if (v24 < sub_100C3C640((uint64_t)a2))
      {
        v64 = a2[6];
        *(_OWORD *)v68 = a2[7];
        *(_OWORD *)&v68[16] = a2[8];
        v48 = a2[2];
        v52 = a2[3];
        v56 = a2[4];
        v60 = a2[5];
        v40 = *a2;
        v44 = a2[1];
        *a2 = *a3;
        v25 = a3[1];
        v26 = a3[2];
        v27 = a3[4];
        a2[3] = a3[3];
        a2[4] = v27;
        a2[1] = v25;
        a2[2] = v26;
        v28 = a3[5];
        v29 = a3[6];
        v30 = a3[7];
        *(__int128 *)((char *)a2 + 124) = *(__int128 *)((char *)a3 + 124);
        a2[6] = v29;
        a2[7] = v30;
        a2[5] = v28;
        a3[6] = v64;
        a3[7] = *(_OWORD *)v68;
        *(__int128 *)((char *)a3 + 124) = *(_OWORD *)&v68[12];
        a3[2] = v48;
        a3[3] = v52;
        a3[4] = v56;
        a3[5] = v60;
        *a3 = v40;
        a3[1] = v44;
        v31 = sub_100C3C640((uint64_t)a2);
        if (v31 < sub_100C3C640((uint64_t)a1))
        {
          v65 = a1[6];
          *(_OWORD *)v69 = a1[7];
          *(_OWORD *)&v69[16] = a1[8];
          v49 = a1[2];
          v53 = a1[3];
          v57 = a1[4];
          v61 = a1[5];
          v41 = *a1;
          v45 = a1[1];
          *a1 = *a2;
          v32 = a2[1];
          v33 = a2[2];
          v34 = a2[4];
          a1[3] = a2[3];
          a1[4] = v34;
          a1[1] = v32;
          a1[2] = v33;
          v35 = a2[5];
          v36 = a2[6];
          v37 = a2[7];
          *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)a2 + 124);
          a1[6] = v36;
          a1[7] = v37;
          a1[5] = v35;
          a2[6] = v65;
          a2[7] = *(_OWORD *)v69;
          *(__int128 *)((char *)a2 + 124) = *(_OWORD *)&v69[12];
          a2[2] = v49;
          a2[3] = v53;
          a2[4] = v57;
          a2[5] = v61;
          *a2 = v41;
          a2[1] = v45;
        }
      }
    }
  }
}

void sub_10136D5E0(__int128 *a1, __int128 *a2, __int128 *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[32];
  _BYTE v71[32];
  _BYTE v72[32];
  _BYTE v73[32];

  v6 = sub_100C3C640((uint64_t)a2);
  v7 = sub_100C3C640((uint64_t)a1);
  v8 = sub_100C3C640((uint64_t)a3);
  v9 = sub_100C3C640((uint64_t)a2);
  if (v6 >= v7)
  {
    if (v8 < v9)
    {
      v67 = a2[6];
      *(_OWORD *)v71 = a2[7];
      *(_OWORD *)&v71[16] = a2[8];
      v51 = a2[2];
      v55 = a2[3];
      v59 = a2[4];
      v63 = a2[5];
      v43 = *a2;
      v47 = a2[1];
      *a2 = *a3;
      v16 = a3[1];
      v17 = a3[2];
      v18 = a3[4];
      a2[3] = a3[3];
      a2[4] = v18;
      a2[1] = v16;
      a2[2] = v17;
      v19 = a3[5];
      v20 = a3[6];
      v21 = a3[7];
      *(__int128 *)((char *)a2 + 124) = *(__int128 *)((char *)a3 + 124);
      a2[6] = v20;
      a2[7] = v21;
      a2[5] = v19;
      a3[6] = v67;
      a3[7] = *(_OWORD *)v71;
      *(__int128 *)((char *)a3 + 124) = *(_OWORD *)&v71[12];
      a3[2] = v51;
      a3[3] = v55;
      a3[4] = v59;
      a3[5] = v63;
      *a3 = v43;
      a3[1] = v47;
      v22 = sub_100C3C640((uint64_t)a2);
      if (v22 < sub_100C3C640((uint64_t)a1))
      {
        v68 = a1[6];
        *(_OWORD *)v72 = a1[7];
        *(_OWORD *)&v72[16] = a1[8];
        v52 = a1[2];
        v56 = a1[3];
        v60 = a1[4];
        v64 = a1[5];
        v44 = *a1;
        v48 = a1[1];
        *a1 = *a2;
        v23 = a2[1];
        v24 = a2[2];
        v25 = a2[4];
        a1[3] = a2[3];
        a1[4] = v25;
        a1[1] = v23;
        a1[2] = v24;
        v26 = a2[5];
        v27 = a2[6];
        v28 = a2[7];
        *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)a2 + 124);
        a1[6] = v27;
        a1[7] = v28;
        a1[5] = v26;
        a2[6] = v68;
        a2[7] = *(_OWORD *)v72;
        *(__int128 *)((char *)a2 + 124) = *(_OWORD *)&v72[12];
        a2[2] = v52;
        a2[3] = v56;
        a2[4] = v60;
        a2[5] = v64;
        *a2 = v44;
        a2[1] = v48;
      }
    }
  }
  else
  {
    if (v8 >= v9)
    {
      v69 = a1[6];
      *(_OWORD *)v73 = a1[7];
      *(_OWORD *)&v73[16] = a1[8];
      v53 = a1[2];
      v57 = a1[3];
      v61 = a1[4];
      v65 = a1[5];
      v45 = *a1;
      v49 = a1[1];
      *a1 = *a2;
      v29 = a2[1];
      v30 = a2[2];
      v31 = a2[4];
      a1[3] = a2[3];
      a1[4] = v31;
      a1[1] = v29;
      a1[2] = v30;
      v32 = a2[5];
      v33 = a2[6];
      v34 = a2[7];
      *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)a2 + 124);
      a1[6] = v33;
      a1[7] = v34;
      a1[5] = v32;
      a2[6] = v69;
      a2[7] = *(_OWORD *)v73;
      *(__int128 *)((char *)a2 + 124) = *(_OWORD *)&v73[12];
      a2[2] = v53;
      a2[3] = v57;
      a2[4] = v61;
      a2[5] = v65;
      *a2 = v45;
      a2[1] = v49;
      v35 = sub_100C3C640((uint64_t)a3);
      if (v35 >= sub_100C3C640((uint64_t)a2))
        return;
      v66 = a2[6];
      *(_OWORD *)v70 = a2[7];
      *(_OWORD *)&v70[16] = a2[8];
      v50 = a2[2];
      v54 = a2[3];
      v58 = a2[4];
      v62 = a2[5];
      v42 = *a2;
      v46 = a2[1];
      *a2 = *a3;
      v36 = a3[1];
      v37 = a3[2];
      v38 = a3[4];
      a2[3] = a3[3];
      a2[4] = v38;
      a2[1] = v36;
      a2[2] = v37;
      v39 = a3[5];
      v40 = a3[6];
      v41 = a3[7];
      *(__int128 *)((char *)a2 + 124) = *(__int128 *)((char *)a3 + 124);
      a2[6] = v40;
      a2[7] = v41;
      a2[5] = v39;
    }
    else
    {
      v66 = a1[6];
      *(_OWORD *)v70 = a1[7];
      *(_OWORD *)&v70[16] = a1[8];
      v50 = a1[2];
      v54 = a1[3];
      v58 = a1[4];
      v62 = a1[5];
      v42 = *a1;
      v46 = a1[1];
      *a1 = *a3;
      v10 = a3[1];
      v11 = a3[2];
      v12 = a3[4];
      a1[3] = a3[3];
      a1[4] = v12;
      a1[1] = v10;
      a1[2] = v11;
      v13 = a3[5];
      v14 = a3[6];
      v15 = a3[7];
      *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)a3 + 124);
      a1[6] = v14;
      a1[7] = v15;
      a1[5] = v13;
    }
    a3[6] = v66;
    a3[7] = *(_OWORD *)v70;
    *(__int128 *)((char *)a3 + 124) = *(_OWORD *)&v70[12];
    a3[2] = v50;
    a3[3] = v54;
    a3[4] = v58;
    a3[5] = v62;
    *a3 = v42;
    a3[1] = v46;
  }
}

BOOL sub_10136D900(__int128 *a1, __int128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  double v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[32];

  v4 = 0x8E38E38E38E38E39 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 9;
      v7 = sub_100C3C640((uint64_t)(a2 - 9));
      if (v7 >= sub_100C3C640((uint64_t)a1))
        return 1;
      v8 = a1[7];
      v50 = a1[6];
      *(_OWORD *)v51 = v8;
      *(_OWORD *)&v51[16] = a1[8];
      v9 = a1[3];
      v46 = a1[2];
      v47 = v9;
      v10 = a1[5];
      v48 = a1[4];
      v49 = v10;
      v11 = a1[1];
      v44 = *a1;
      v45 = v11;
      *a1 = *v6;
      v12 = v6[1];
      v13 = v6[2];
      v14 = v6[4];
      a1[3] = v6[3];
      a1[4] = v14;
      a1[1] = v12;
      a1[2] = v13;
      v15 = v6[5];
      v16 = v6[6];
      v17 = v6[7];
      *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)v6 + 124);
      a1[6] = v16;
      a1[7] = v17;
      a1[5] = v15;
      v18 = *(_OWORD *)v51;
      v6[6] = v50;
      v6[7] = v18;
      *(__int128 *)((char *)v6 + 124) = *(_OWORD *)&v51[12];
      v19 = v47;
      v6[2] = v46;
      v6[3] = v19;
      v20 = v49;
      v6[4] = v48;
      v6[5] = v20;
      v21 = v45;
      result = 1;
      *v6 = v44;
      v6[1] = v21;
      return result;
    case 3uLL:
      sub_10136D5E0(a1, a1 + 9, a2 - 9);
      return 1;
    case 4uLL:
      sub_10136DBB8(a1, a1 + 9, a1 + 18, a2 - 9);
      return 1;
    case 5uLL:
      sub_10136D320(a1, a1 + 9, a1 + 18, a1 + 27, a2 - 9);
      return 1;
    default:
      v22 = (uint64_t)(a1 + 18);
      sub_10136D5E0(a1, a1 + 9, a1 + 18);
      v23 = a1 + 27;
      if (a1 + 27 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    v26 = sub_100C3C640((uint64_t)v23);
    if (v26 < sub_100C3C640(v22))
    {
      v27 = v23[7];
      v50 = v23[6];
      *(_OWORD *)v51 = v27;
      *(_OWORD *)&v51[16] = v23[8];
      v28 = v23[3];
      v46 = v23[2];
      v47 = v28;
      v29 = v23[5];
      v48 = v23[4];
      v49 = v29;
      v30 = v23[1];
      v31 = v24;
      v44 = *v23;
      v45 = v30;
      while (1)
      {
        v32 = (__int128 *)((char *)a1 + v31);
        v33 = *(__int128 *)((char *)a1 + v31 + 400);
        v32[33] = *(__int128 *)((char *)a1 + v31 + 384);
        v32[34] = v33;
        v34 = *(__int128 *)((char *)a1 + v31 + 336);
        v32[29] = *(__int128 *)((char *)a1 + v31 + 320);
        v32[30] = v34;
        v35 = *(__int128 *)((char *)a1 + v31 + 368);
        v32[31] = *(__int128 *)((char *)a1 + v31 + 352);
        v32[32] = v35;
        v36 = *(__int128 *)((char *)a1 + v31 + 304);
        v32[27] = *(__int128 *)((char *)a1 + v31 + 288);
        v32[28] = v36;
        *(__int128 *)((char *)a1 + v31 + 556) = *(__int128 *)((char *)a1 + v31 + 412);
        if (v31 == -288)
          break;
        v37 = (uint64_t)(v32 + 9);
        v38 = sub_100C3C640((uint64_t)&v44);
        v31 -= 144;
        if (v38 >= sub_100C3C640(v37))
        {
          v39 = (__int128 *)((char *)a1 + v31 + 432);
          goto LABEL_12;
        }
      }
      v39 = a1;
LABEL_12:
      v40 = *(_OWORD *)v51;
      v39[6] = v50;
      v39[7] = v40;
      *(__int128 *)((char *)v39 + 124) = *(_OWORD *)&v51[12];
      v41 = v47;
      v39[2] = v46;
      v39[3] = v41;
      v42 = v49;
      v39[4] = v48;
      v39[5] = v42;
      v43 = v45;
      ++v25;
      *v39 = v44;
      v39[1] = v43;
      if (v25 == 8)
        return v23 + 9 == a2;
    }
    v22 = (uint64_t)v23;
    v24 += 144;
    v23 += 9;
    if (v23 == a2)
      return 1;
  }
}

void sub_10136DBB8(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  sub_10136D5E0(a1, a2, a3);
  v8 = sub_100C3C640((uint64_t)a4);
  if (v8 < sub_100C3C640((uint64_t)a3))
  {
    v47 = a3[6];
    *(_OWORD *)v50 = a3[7];
    *(_OWORD *)&v50[16] = a3[8];
    v35 = a3[2];
    v38 = a3[3];
    v41 = a3[4];
    v44 = a3[5];
    v29 = *a3;
    v32 = a3[1];
    *a3 = *a4;
    v9 = a4[1];
    v10 = a4[2];
    v11 = a4[4];
    a3[3] = a4[3];
    a3[4] = v11;
    a3[1] = v9;
    a3[2] = v10;
    v12 = a4[5];
    v13 = a4[6];
    v14 = a4[7];
    *(__int128 *)((char *)a3 + 124) = *(__int128 *)((char *)a4 + 124);
    a3[6] = v13;
    a3[7] = v14;
    a3[5] = v12;
    a4[6] = v47;
    a4[7] = *(_OWORD *)v50;
    *(__int128 *)((char *)a4 + 124) = *(_OWORD *)&v50[12];
    a4[2] = v35;
    a4[3] = v38;
    a4[4] = v41;
    a4[5] = v44;
    *a4 = v29;
    a4[1] = v32;
    v15 = sub_100C3C640((uint64_t)a3);
    if (v15 < sub_100C3C640((uint64_t)a2))
    {
      v48 = a2[6];
      *(_OWORD *)v51 = a2[7];
      *(_OWORD *)&v51[16] = a2[8];
      v36 = a2[2];
      v39 = a2[3];
      v42 = a2[4];
      v45 = a2[5];
      v30 = *a2;
      v33 = a2[1];
      *a2 = *a3;
      v16 = a3[1];
      v17 = a3[2];
      v18 = a3[4];
      a2[3] = a3[3];
      a2[4] = v18;
      a2[1] = v16;
      a2[2] = v17;
      v19 = a3[5];
      v20 = a3[6];
      v21 = a3[7];
      *(__int128 *)((char *)a2 + 124) = *(__int128 *)((char *)a3 + 124);
      a2[6] = v20;
      a2[7] = v21;
      a2[5] = v19;
      a3[6] = v48;
      a3[7] = *(_OWORD *)v51;
      *(__int128 *)((char *)a3 + 124) = *(_OWORD *)&v51[12];
      a3[2] = v36;
      a3[3] = v39;
      a3[4] = v42;
      a3[5] = v45;
      *a3 = v30;
      a3[1] = v33;
      v22 = sub_100C3C640((uint64_t)a2);
      if (v22 < sub_100C3C640((uint64_t)a1))
      {
        v49 = a1[6];
        *(_OWORD *)v52 = a1[7];
        *(_OWORD *)&v52[16] = a1[8];
        v37 = a1[2];
        v40 = a1[3];
        v43 = a1[4];
        v46 = a1[5];
        v31 = *a1;
        v34 = a1[1];
        *a1 = *a2;
        v23 = a2[1];
        v24 = a2[2];
        v25 = a2[4];
        a1[3] = a2[3];
        a1[4] = v25;
        a1[1] = v23;
        a1[2] = v24;
        v26 = a2[5];
        v27 = a2[6];
        v28 = a2[7];
        *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)a2 + 124);
        a1[6] = v27;
        a1[7] = v28;
        a1[5] = v26;
        a2[6] = v49;
        a2[7] = *(_OWORD *)v52;
        *(__int128 *)((char *)a2 + 124) = *(_OWORD *)&v52[12];
        a2[2] = v37;
        a2[3] = v40;
        a2[4] = v43;
        a2[5] = v46;
        *a2 = v31;
        a2[1] = v34;
      }
    }
  }
}

_OWORD *sub_10136DDD0(_OWORD *a1, _OWORD *a2, void **a3)
{
  _OWORD *v3;
  _OWORD *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    sub_10136DE30(&v6, v3);
    v3 += 9;
  }
  while (v3 != v4);
  return v4;
}

void ***sub_10136DE30(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v17 = 0x8E38E38E38E38E39 * (((char *)v5 - (_BYTE *)*v4) >> 4);
    v18 = v17 + 1;
    if (v17 + 1 > 0x1C71C71C71C71C7)
      sub_100259694();
    v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - (_QWORD)*v4) >> 4);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xE38E38E38E38E3)
      v20 = 0x1C71C71C71C71C7;
    else
      v20 = v18;
    if (v20)
      v21 = (char *)sub_100686504(v7, v20);
    else
      v21 = 0;
    v22 = &v21[144 * v17];
    v23 = &v21[144 * v20];
    *(_OWORD *)v22 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    v26 = a2[4];
    *((_OWORD *)v22 + 3) = a2[3];
    *((_OWORD *)v22 + 4) = v26;
    *((_OWORD *)v22 + 1) = v24;
    *((_OWORD *)v22 + 2) = v25;
    v27 = a2[5];
    v28 = a2[6];
    v29 = a2[8];
    *((_OWORD *)v22 + 7) = a2[7];
    *((_OWORD *)v22 + 8) = v29;
    *((_OWORD *)v22 + 5) = v27;
    *((_OWORD *)v22 + 6) = v28;
    v16 = v22 + 144;
    v31 = (char *)*v4;
    v30 = (char *)v4[1];
    if (v30 != *v4)
    {
      do
      {
        *((_OWORD *)v22 - 9) = *((_OWORD *)v30 - 9);
        v32 = *((_OWORD *)v30 - 8);
        v33 = *((_OWORD *)v30 - 7);
        v34 = *((_OWORD *)v30 - 5);
        *((_OWORD *)v22 - 6) = *((_OWORD *)v30 - 6);
        *((_OWORD *)v22 - 5) = v34;
        *((_OWORD *)v22 - 8) = v32;
        *((_OWORD *)v22 - 7) = v33;
        v35 = *((_OWORD *)v30 - 4);
        v36 = *((_OWORD *)v30 - 3);
        v37 = *((_OWORD *)v30 - 2);
        *(_OWORD *)(v22 - 20) = *(_OWORD *)(v30 - 20);
        *((_OWORD *)v22 - 3) = v36;
        *((_OWORD *)v22 - 2) = v37;
        *((_OWORD *)v22 - 4) = v35;
        v22 -= 144;
        v30 -= 144;
      }
      while (v30 != v31);
      v30 = (char *)*v4;
    }
    *v4 = v22;
    v4[1] = v16;
    v4[2] = v23;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v5 = *a2;
    v10 = a2[1];
    v11 = a2[2];
    v12 = a2[4];
    v5[3] = a2[3];
    v5[4] = v12;
    v5[1] = v10;
    v5[2] = v11;
    v13 = a2[5];
    v14 = a2[6];
    v15 = a2[8];
    v5[7] = a2[7];
    v5[8] = v15;
    v5[5] = v13;
    v5[6] = v14;
    v16 = v5 + 9;
  }
  v4[1] = v16;
  return a1;
}

void sub_10136DFE0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10136E07C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10136E094()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10136E120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t *sub_10136E138()
{
  uint64_t *result;

  qword_10230E570 = *sub_10132F04C();
  result = sub_10132F04C();
  qword_10230E578 = result[1];
  return result;
}

uint64_t sub_10136E168(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v6 = sub_1005EB7E0(a1);
  *(_QWORD *)v6 = off_1021B19E0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(v6 + 40), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(v6 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v6 + 40) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 64) = v8;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_10136E210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10136E248(uint64_t result)
{
  *(_QWORD *)(result + 88) = 0;
  return result;
}

uint64_t sub_10136E250(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[5];
  _QWORD v6[4];
  _QWORD v7[4];

  v6[0] = CFSTR("databaseNumValid");
  v7[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88));
  v6[1] = CFSTR("databaseNumInvalid");
  v7[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 92));
  v6[2] = CFSTR("databaseName");
  v2 = (_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v2 = (_QWORD *)*v2;
  v7[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v6[3] = CFSTR("databaseClient");
  v3 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v3 = (_QWORD *)*v3;
  v7[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10136E388;
  v5[3] = &unk_102132010;
  v5[4] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 4);
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.database"), v5);
}

uint64_t sub_10136E388(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_10136E390(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B19E0;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  operator delete();
}

void sub_10136E3EC(float32x2_t *a1, float32x2_t *a2, uint64_t *a3)
{
  uint64_t v5;
  __int32 v6;
  float32_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2)
  {
    a2[4].i32[0] |= 1u;
    v5 = (uint64_t)a2[1];
    if (!v5)
      operator new();
    sub_100178094(a3, v5);
    v6 = a2[4].i32[0];
    a2[2] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(a1[1]), (float64x2_t)vdupq_n_s64(0xC0239D013A92A305)));
    v7 = a1[2].f32[0] * -9.80665;
    a2[4].i32[0] = v6 | 0xE;
    a2[3].f32[0] = v7;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pSample,Invalid pointer", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLAccelerometerSampleToProtobuf(const CLAccelerometer::Sample &, CLP::LogEntry::PrivateData::AccelSample *const, const CLUtils::Timestamp &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_10136E620()
{
  operator delete();
}

void sub_10136E64C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  _WORD v26[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (*(int *)(a1 + 44) < 51)
    {
      *(_DWORD *)(a2 + 80) |= 2u;
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        operator new();
      if ((sub_10136EBE4((double *)(a1 + 24), v9, 0) & 1) == 0)
      {
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v10 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error: Failed to convert AccessoryVehicleSpeed mach time to protobuf", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          v26[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert AccessoryVehicleSpeed mach time to protobuf", v26, 2);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 0, "void ConvertCLAccessoryVehicleSpeedDataToProtobuf(const CLNmeaSCD &, CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      }
      v11 = sub_10136F254((int *)(a1 + 36));
      if (!sub_100106094(v11))
        sub_1018FAB30();
      *(_DWORD *)(a2 + 80) |= 8u;
      *(_DWORD *)(a2 + 28) = v11;
      v12 = sub_10136F480((int *)(a1 + 32));
      if (!sub_1002BC6D0(v12))
        sub_1018FAB08();
      v13 = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 80) = v13 | 0x100;
      *(_DWORD *)(a2 + 72) = v12;
      v14 = *(_DWORD *)(a1 + 40) != 0;
      *(_DWORD *)(a2 + 80) = v13 | 0x180;
      *(_BYTE *)(a2 + 52) = v14;
      v15 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a2 + 80) = v13 | 0x190;
      *(_DWORD *)(a2 + 48) = v15;
      if (*(_DWORD *)(a1 + 44))
      {
        v16 = 0;
        do
        {
          v17 = a1 + 8 * v16;
          v18 = *(_QWORD *)(v17 + 448);
          v19 = *(_DWORD *)(a2 + 64);
          if (v19 == *(_DWORD *)(a2 + 68))
          {
            sub_1002E60A0(a2 + 56, v19 + 1);
            v19 = *(_DWORD *)(a2 + 64);
          }
          v20 = *(_QWORD *)(a2 + 56);
          *(_DWORD *)(a2 + 64) = v19 + 1;
          *(_QWORD *)(v20 + 8 * v19) = v18;
          v21 = *(_QWORD *)(v17 + 48);
          v22 = *(_DWORD *)(a2 + 40);
          if (v22 == *(_DWORD *)(a2 + 44))
          {
            sub_1002E60A0(a2 + 32, v22 + 1);
            v22 = *(_DWORD *)(a2 + 40);
          }
          v23 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(a2 + 40) = v22 + 1;
          *(_QWORD *)(v23 + 8 * v22) = v21;
          ++v16;
        }
        while (v16 < *(unsigned int *)(a1 + 44));
      }
    }
    else
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v3 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected sample count for AccessoryVehicleSpeed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v26[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Unexpected sample count for AccessoryVehicleSpeed", v26, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLAccessoryVehicleSpeedDataToProtobuf(const CLNmeaSCD &, CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)", "%s\n", v4);
LABEL_19:
        if (v5 != buf)
          free(v5);
      }
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "pAccessoryVehicleSpeed,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v26[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pAccessoryVehicleSpeed,Invalid pointer", v26, 2);
      v5 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLAccessoryVehicleSpeedDataToProtobuf(const CLNmeaSCD &, CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)", "%s\n", v7);
      goto LABEL_19;
    }
  }
}

void sub_10136EBB8()
{
  operator delete();
}

uint64_t sub_10136EBE4(double *a1, uint64_t a2, char a3)
{
  double v4;
  NSObject *v6;
  double v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  _BOOL8 v12;
  unint64_t v15;
  NSObject *v16;
  double v17;
  unint64_t v18;
  NSObject *v19;
  double v20;
  double v21;
  const char *v22;
  const char *v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  double v30;
  uint8_t buf[4];
  double v32;

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v11 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "pTimeStamp,Invalid pointer", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pTimeStamp,Invalid pointer", &v29, 2);
    v10 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertLiveMachAbsoluteTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v23);
    goto LABEL_45;
  }
  v4 = *a1;
  if (*a1 < 0.0 || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v7 = *a1;
      *(_DWORD *)buf = 134349056;
      v32 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Mach absolute time cannot be negative or infinite: %{public}lf", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = *a1;
    v29 = 134349056;
    v30 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Mach absolute time cannot be negative or infinite: %{public}lf", &v29, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertLiveMachAbsoluteTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v9);
    goto LABEL_45;
  }
  *(_DWORD *)(a2 + 36) |= 2u;
  *(double *)(a2 + 16) = v4;
  if ((a3 & 1) != 0)
    return 1;
  if (!qword_10230E5A0)
    operator new();
  v28 = 0xBFF0000000000000;
  v12 = sub_10010F7EC(qword_10230E5A0, a1, (double *)&v28);
  if (v12)
  {
    v15 = v28;
    *(_DWORD *)(a2 + 36) |= 4u;
    *(_QWORD *)(a2 + 24) = v15;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v16 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a1;
      *(_DWORD *)buf = 134217984;
      v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Mach absolute to mach continuous time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v24 = *a1;
      v29 = 134217984;
      v30 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Mach absolute to mach continuous time conversion failed: %lf", COERCE_DOUBLE(&v29));
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL ConvertLiveMachAbsoluteTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  v27 = 0xBFF0000000000000;
  if (sub_10010EA68(qword_10230E5A0, a1, (double *)&v27))
  {
    v18 = v27;
    *(_DWORD *)(a2 + 36) |= 1u;
    *(_QWORD *)(a2 + 8) = v18;
    return v12;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v19 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v20 = *a1;
    *(_DWORD *)buf = 134217984;
    v32 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Mach absolute to CF absolute time conversion failed: %lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v21 = *a1;
    v29 = 134217984;
    v30 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Mach absolute to CF absolute time conversion failed: %lf", COERCE_DOUBLE(&v29));
    v10 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL ConvertLiveMachAbsoluteTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v22);
LABEL_45:
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

uint64_t sub_10136F254(int *a1)
{
  int v2;
  int v3;
  uint64_t result;
  NSObject *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v2 = *a1;
  v3 = *a1 - 78;
  result = 0;
  switch(v3)
  {
    case 0:
      result = 4;
      break;
    case 1:
    case 3:
    case 5:
    case 6:
      goto LABEL_5;
    case 2:
      result = 1;
      break;
    case 4:
      result = 2;
      break;
    case 7:
      return result;
    default:
      if (v2 == 68)
      {
        result = 3;
      }
      else
      {
LABEL_5:
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v5 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          v6 = *a1;
          *(_DWORD *)buf = 67240192;
          v13 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Received unhandled transmission state type, %{public}d", buf, 8u);
        }
        v7 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v7)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          v8 = *a1;
          v11[0] = 67240192;
          v11[1] = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled transmission state type, %{public}d", v11, 8);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification_TransmissionStateType ConvertCLNMEASCDTransmissionStateToProtobuf(const CLNmeaSCDTransmissionState &)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
          result = 0;
        }
      }
      break;
  }
  return result;
}

uint64_t sub_10136F480(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a1 == 68)
    return 0;
  if (*a1 == 67)
    return 1;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled sensor type, %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled sensor type, %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification_SensorType ConvertCLNMEASCDTypeToProtobuf(const CLNmeaSCDType &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_10136F654(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (a2)
  {
    v4 = sub_10136F84C((int *)a1);
    if (!sub_10008D1F0(v4))
      sub_1018FAA68();
    v5 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 56) = v5 | 0x1FF;
    *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 24);
    v6 = sub_10136FA28((int *)(a1 + 40));
    if (!sub_100454A04(v6))
      sub_1018FAA40();
    v7 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 44) = v6;
    v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 56) = v7 | 0x600;
    *(_DWORD *)(a2 + 48) = v8;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pBodyMetrics,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pBodyMetrics,Invalid pointer", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLBodyMetricsToProtobuf(const CLBodyMetrics &, CLP::LogEntry::PrivateData::BodyMetrics *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

uint64_t sub_10136F84C(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!*a1)
    return 1;
  if (*a1 == 1)
    return 2;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled natalimeter gender type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled natalimeter gender type: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BodyMetrics_NatalimeterGenderType ConvertCLNatalimeterGenderTypeToProtobuf(const CLNatalimeterGender &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10136FA28(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a1 < 7)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled user condition type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled user condition type: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BodyMetrics_UserConditionType ConvertCLUserConditionTypeToProtobuf(const CLUserCondition &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10136FBF8(int *a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = *a1;
  if (v2 < 7 && ((0x5Fu >> v2) & 1) != 0)
    return dword_101CA0038[v2];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled signal environment type: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled signal environment type: %{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType ConvertCLSignalEnvironmentTypeToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return 0xFFFFFFFFLL;
}

__n128 sub_10136FDD4(uint64_t a1, __n128 *a2)
{
  unsigned int v4;
  unsigned __int32 v5;
  unsigned __int32 v6;
  __n128 result;

  v4 = sub_10138255C((int *)a1);
  if (!sub_10001B780(v4))
    sub_1018FA590();
  v5 = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = v5 | 1;
  v6 = *(_DWORD *)(a1 + 4);
  a2->n128_u32[2] = v4;
  a2->n128_u32[3] = v6;
  result = *(__n128 *)(a1 + 8);
  a2[1] = result;
  a2[2].n128_u16[0] = *(_WORD *)(a1 + 24);
  a2[2].n128_u32[2] = v5 | 0xFF;
  return result;
}

uint64_t sub_10136FE3C(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 6)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled client satellite constellation type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled client satellite constellation type: %{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::ClientSatelliteConstellation ConvertCLClientSatelliteConstellationTypeToProtobuf(const CLClientSatelliteConstellation &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10137000C(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled daemon location private gnss content type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled daemon location private gnss content type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_GnssContent ConvertCLDaemonLocationPrivateGnssContentTypeToProtobuf(const CLDaemonLocationPrivate::GnssContent &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1013701D4(unsigned __int8 *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled daemon location private position context type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled daemon location private position context type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_PositionContextStateType ConvertCLDaemonLocationPrivatePositionContextStateTypeToProtobuf(const CLDaemonLocationPrivate::PositionContextStateType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10137039C(unsigned __int8 *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 4)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled daemon location private map matcher type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled daemon location private map matcher type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_MapMatcherType ConvertCLDaemonLocationPrivateMapMatcherTypeToProtobuf(const CLDaemonLocationPrivate::MapMatcherType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101370564(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled daemon location private loi location accuracy type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled daemon location private loi location accuracy type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_LoiLocationSourceAccuracy ConvertCLDaemonLocationPrivateLoiLocationSourceAccuracyTypeToProtobuf(const CLDaemonLocationPrivate::LoiLocationSourceAccuracy &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10137072C(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 5)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled client batched location fix type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled client batched location fix type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BatchedLocationFixType ConvertCLBatchedLocationFixTypeToProtobuf(const CLBatchedLocationFixType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

void sub_1013708F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint8x8_t v7;
  int16x8_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 96) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    if ((sub_10136EBE4((double *)(a1 + 88), v4, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLDirectionOfTravelAssistance mach time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLDirectionOfTravelAssistance mach time to protobuf", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLDirectionOfTravelAssistanceToProtobuf(const CLGpsAssistant_Type::DirectionOfTravelAssistance &, CLP::LogEntry::PrivateData::DirectionOfTravel *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
    v6 = *(_DWORD *)(a2 + 96);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
    v7 = *(uint8x8_t *)(a1 + 40);
    *(uint8x8_t *)(a2 + 72) = v7;
    *(_DWORD *)(a2 + 96) = v6 | 0x3DFE;
    v7.i32[0] = *(_DWORD *)(a1 + 72);
    v8 = (int16x8_t)vmovl_u8(v7);
    *(int16x4_t *)v8.i8 = vzip2_s16(vzip1_s16(*(int16x4_t *)v8.i8, (int16x4_t)vext_s8(*(int8x8_t *)v8.i8, *(int8x8_t *)v8.i8, 6uLL)), *(int16x4_t *)v8.i8);
    *(_DWORD *)(a2 + 88) = vmovn_s16(v8).u32[0];
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pDotData,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pDotData,Invalid pointer", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLDirectionOfTravelAssistanceToProtobuf(const CLGpsAssistant_Type::DirectionOfTravelAssistance &, CLP::LogEntry::PrivateData::DirectionOfTravel *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_101370C78()
{
  operator delete();
}

void sub_101370CA4(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (a3)
  {
    *(_DWORD *)(a3 + 52) |= 1u;
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      operator new();
    if ((sub_10137103C((double *)(a1 + 76), v6, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLDEM applicable CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLDEM applicable CF time to protobuf", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLDEMUpdateToProtobuf(const GNSS::DaemonLocation &, const double &, CLP::LogEntry::PrivateData::DigitalElevationModel *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
    v8 = *(_DWORD *)(a3 + 52);
    *(double *)(a3 + 16) = *(double *)(a1 + 536) + *a2;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 544);
    *(_DWORD *)(a3 + 52) = v8 | 0x36;
    *(float32x2_t *)(a3 + 36) = vcvt_f32_f64(*(float64x2_t *)(a1 + 520));
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "pDEMMsg,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pDEMMsg,Invalid pointer", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLDEMUpdateToProtobuf(const GNSS::DaemonLocation &, const double &, CLP::LogEntry::PrivateData::DigitalElevationModel *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_101371010()
{
  operator delete();
}

uint64_t sub_10137103C(double *a1, uint64_t a2, char a3)
{
  double v4;
  NSObject *v6;
  double v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  _BOOL8 v12;
  unint64_t v15;
  NSObject *v16;
  double v17;
  unint64_t v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  double v22;
  const char *v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  double v28;
  uint8_t buf[4];
  double v30;

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v11 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "pTimeStamp,Invalid pointer", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    LOWORD(v27) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pTimeStamp,Invalid pointer", &v27, 2);
    v10 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertLiveCFAbsoluteTimeToProtobuf(const CFAbsoluteTime &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v21);
    goto LABEL_45;
  }
  v4 = *a1;
  if (*a1 < 0.0 || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v7 = *a1;
      *(_DWORD *)buf = 134349056;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CF absolute time cannot be negative or infinite: %{public}lf", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = *a1;
    v27 = 134349056;
    v28 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "CF absolute time cannot be negative or infinite: %{public}lf", &v27, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertLiveCFAbsoluteTimeToProtobuf(const CFAbsoluteTime &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v9);
    goto LABEL_45;
  }
  *(_DWORD *)(a2 + 36) |= 1u;
  *(double *)(a2 + 8) = v4;
  if ((a3 & 1) != 0)
    return 1;
  if (!qword_10230E5A0)
    operator new();
  *(double *)&v26 = -1.0;
  v12 = sub_10010F24C(qword_10230E5A0, a1, (double *)&v26);
  if (v12)
  {
    v15 = v26;
    *(_DWORD *)(a2 + 36) |= 2u;
    *(_QWORD *)(a2 + 16) = v15;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v16 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a1;
      *(_DWORD *)buf = 134217984;
      v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Error: CF absolute to mach absolute time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v22 = *a1;
      v27 = 134217984;
      v28 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: CF absolute to mach absolute time conversion failed: %lf", COERCE_DOUBLE(&v27));
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL ConvertLiveCFAbsoluteTimeToProtobuf(const CFAbsoluteTime &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  v25 = 0xBFF0000000000000;
  if (sub_10010F7EC(qword_10230E5A0, (double *)&v26, (double *)&v25))
  {
    v18 = v25;
    *(_DWORD *)(a2 + 36) |= 4u;
    *(_QWORD *)(a2 + 24) = v18;
    return v12;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v19 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v30 = *(double *)&v26;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Error: Mach absolute to mach continuous time conversion failed: %lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v27 = 134217984;
    v28 = *(double *)&v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: Mach absolute to mach continuous time conversion failed: %lf", COERCE_DOUBLE(&v27));
    v10 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL ConvertLiveCFAbsoluteTimeToProtobuf(const CFAbsoluteTime &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v20);
LABEL_45:
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

uint64_t sub_1013716AC(void *a1, double *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  id v8;
  _QWORD *v9;
  id i;
  void *v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  id v21;
  double v22;
  char *v23;
  NSObject *v24;
  char *v25;
  const char *v26;
  uint8_t *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  id v34;
  double v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  BOOL v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  uint8_t *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t j;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  int v85;
  _QWORD *v86;
  unint64_t v87;
  NSObject *v88;
  uint64_t v89;
  NSObject *v90;
  NSObject *v92;
  const char *v93;
  uint8_t *v94;
  NSObject *v95;
  const char *v96;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  int v100;
  int v101;
  const char *v102;
  uint8_t *v103;
  uint64_t v104;
  double *v105;
  _QWORD *v106;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v107;
  id v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned __int8 v111;
  id v112;
  uint64_t v113;
  id obj;
  id v115;
  uint64_t v116;
  char *v117;
  void *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t *v129;
  _QWORD *v130;
  unint64_t v131;
  void **p_p;
  _QWORD v133[2];
  _BYTE v134[11];
  uint8_t v135[128];
  uint8_t buf[8];
  __int16 v137;
  int v138;
  void *__p;
  uint64_t *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;

  if (a4)
  {
    v4 = a4;
    v130 = 0;
    v131 = 0;
    v129 = (uint64_t *)&v130;
    v125 = 0u;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v125, v135, 16);
    if (v8)
    {
      obj = a1;
      v115 = v8;
      v105 = a2;
      v111 = 0;
      v9 = a3 + 1;
      v106 = a3;
      v107 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v4 + 16);
      v116 = *(_QWORD *)v126;
      v109 = v4;
      v110 = a3 + 1;
      while (2)
      {
        for (i = 0; i != v115; i = v25 + 1)
        {
          if (*(_QWORD *)v126 != v116)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)i);
          if (v11)
          {
            v117 = (char *)i;
            v142 = 0u;
            v143 = 0u;
            v144 = 0u;
            v145 = 0u;
            v12 = objc_msgSend(v11, "sections");
            v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v142, &__p, 16);
            v14 = 0.0;
            v118 = v11;
            if (v13)
            {
              v15 = *(_QWORD *)v143;
LABEL_10:
              v16 = 0;
              while (1)
              {
                if (*(_QWORD *)v143 != v15)
                  objc_enumerationMutation(v12);
                v17 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * v16);
                if (v17)
                {
                  if (objc_msgSend(*(id *)(*((_QWORD *)&v142 + 1) + 8 * v16), "coordinateCount"))
                    break;
                }
                if (qword_1022A00A0 != -1)
                  dispatch_once(&qword_1022A00A0, &stru_1021B1A38);
                v18 = qword_1022A00A8;
                if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "clrgmd,Empty section found in the building data during HashID generation", buf, 2u);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00A0 != -1)
                    dispatch_once(&qword_1022A00A0, &stru_1021B1A38);
                  LOWORD(v133[0]) = 0;
                  LODWORD(v104) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "clrgmd,Empty section found in the building data during HashID generation", v133, v104);
                  v20 = (uint8_t *)v19;
                  sub_100512490("Generic", 1, 0, 0, "std::optional<uint64_t> ComputeAndGetBuildingHashID(GEOMapFeatureBuilding *)", "%s\n", v19);
                  if (v20 != buf)
                    free(v20);
                }
                if (v13 == (id)++v16)
                {
                  v21 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v142, &__p, 16);
                  v13 = v21;
                  if (!v21)
                  {
                    v22 = 90000000.0;
                    goto LABEL_42;
                  }
                  goto LABEL_10;
                }
              }
              v28 = objc_msgSend(v17, "coordinateCount");
              v11 = v118;
              v22 = 90000000.0;
              if (!v28)
                goto LABEL_44;
              v29 = 0;
              v30 = 0;
              v31 = 0.0;
              v14 = 0.0;
              do
              {
                v32 = *(double *)((char *)objc_msgSend(v17, "coordinates", v22) + v29);
                v33 = *(double *)((char *)objc_msgSend(v17, "coordinates") + v29 + 8);
                v34 = objc_msgSend(v17, "coordinateCount");
                v22 = 1.0 / ((double)(int)v30 + 1.0);
                v31 = v31 + v22 * (v32 - v31);
                v14 = v14 + v22 * (v33 - v14);
                ++v30;
                v29 += 16;
              }
              while ((unint64_t)v34 > v30);
              v22 = (v31 + 90.0) * 1000000.0;
LABEL_42:
              v11 = v118;
            }
            else
            {
              v22 = 90000000.0;
            }
LABEL_44:
            if (v14 < 0.0)
              v35 = 360.0;
            else
              v35 = 0.0;
            v123 = (uint64_t *)(vcvtad_u64_f64((v14 + v35) * 1000000.0) | (vcvtad_u64_f64(v22) << 32));
            v124 = 1;
            sub_100210524(&v129, (unint64_t *)&v123, (uint64_t *)&v123);
            v25 = v117;
            if ((v36 & 1) != 0)
            {
              if (!(_BYTE)v124)
                sub_10028DF3C();
              v37 = (_QWORD *)*v9;
              if (!*v9)
                goto LABEL_174;
              v38 = v9;
              do
              {
                v39 = v37[4];
                v40 = v39 >= (unint64_t)v123;
                if (v39 >= (unint64_t)v123)
                  v41 = v37;
                else
                  v41 = v37 + 1;
                if (v40)
                  v38 = v37;
                v37 = (_QWORD *)*v41;
              }
              while (*v41);
              if (v38 == v9 || (unint64_t)v123 < v38[4])
              {
LABEL_174:
                v42 = *(_DWORD *)(v4 + 28);
                v43 = *(int *)(v4 + 24);
                if ((int)v43 >= v42)
                {
                  if (v42 == *(_DWORD *)(v4 + 32))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v107, v42 + 1);
                    v42 = *(_DWORD *)(v4 + 28);
                  }
                  *(_DWORD *)(v4 + 28) = v42 + 1;
                  sub_101384738();
                }
                v44 = *(_QWORD *)(v4 + 16);
                *(_DWORD *)(v4 + 24) = v43 + 1;
                v45 = *(_QWORD *)(v44 + 8 * v43);
                v46 = v123;
                *(_DWORD *)(v45 + 52) |= 2u;
                *(_QWORD *)(v45 + 32) = v46;
                v47 = objc_msgSend(v11, "tileSetStyle");
                if (v47 == 1)
                {
                  v48 = objc_msgSend(v11, "buildingID");
                  *(_DWORD *)(v45 + 52) |= 4u;
                  *(_QWORD *)(v45 + 40) = v48;
                }
                v121 = 0u;
                v122 = 0u;
                v119 = 0u;
                v120 = 0u;
                v49 = objc_msgSend(v11, "sections");
                v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v119, v134, 16);
                if (v50)
                {
                  v113 = *(_QWORD *)v120;
                  v108 = v49;
LABEL_69:
                  v51 = 0;
                  v112 = v50;
                  while (1)
                  {
                    if (*(_QWORD *)v120 != v113)
                      objc_enumerationMutation(v49);
                    v52 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * v51);
                    if (v52)
                      break;
                    if (qword_1022A0160 != -1)
                      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
                    v57 = qword_1022A0168;
                    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "clrgmd,Empty section found in the building data", buf, 2u);
                    }
                    v11 = v118;
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0160 != -1)
                        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
                      LOWORD(__p) = 0;
                      LODWORD(v104) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "clrgmd,Empty section found in the building data", &__p, v104);
                      v59 = (uint8_t *)v58;
                      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v58);
                      if (v59 != buf)
                        free(v59);
                      v11 = v118;
                    }
LABEL_103:
                    if ((id)++v51 == v112)
                    {
                      v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v119, v134, 16);
                      v25 = v117;
                      if (v50)
                        goto LABEL_69;
                      goto LABEL_105;
                    }
                  }
                  v53 = *(_DWORD *)(v45 + 20);
                  v54 = *(int *)(v45 + 16);
                  if ((int)v54 >= v53)
                  {
                    if (v53 == *(_DWORD *)(v45 + 24))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v45 + 8), v53 + 1);
                      v53 = *(_DWORD *)(v45 + 20);
                    }
                    *(_DWORD *)(v45 + 20) = v53 + 1;
                    sub_101384798();
                  }
                  v55 = *(_QWORD *)(v45 + 8);
                  *(_DWORD *)(v45 + 16) = v54 + 1;
                  v56 = *(_QWORD *)(v55 + 8 * v54);
                  if (v56)
                  {
                    v60 = objc_msgSend(v11, "tileSetStyle");
                    if (v60 == 1)
                    {
                      v63 = objc_msgSend(v11, "hasTerrainElevation");
                      *(_DWORD *)(v56 + 88) |= 8u;
                      *(_BYTE *)(v56 + 80) = v63;
                      objc_msgSend(v52, "minBaseHeight");
                      *(_DWORD *)(v56 + 88) |= 0x20u;
                      *(_QWORD *)(v56 + 56) = v64;
                      objc_msgSend(v52, "maxBaseHeight");
                      *(_DWORD *)(v56 + 88) |= 0x40u;
                      *(_QWORD *)(v56 + 64) = v65;
                      objc_msgSend(v52, "topHeight");
                      *(_DWORD *)(v56 + 88) |= 0x80u;
                      *(_QWORD *)(v56 + 72) = v66;
                      objc_msgSend(v52, "terrainElevation");
                      *(_DWORD *)(v56 + 88) |= 0x10u;
                      *(_QWORD *)(v56 + 48) = v67;
                    }
                    else if (!v60)
                    {
                      objc_msgSend(v52, "baseHeight");
                      *(_DWORD *)(v56 + 88) |= 2u;
                      *(_QWORD *)(v56 + 32) = v61;
                      objc_msgSend(v52, "height");
                      *(_DWORD *)(v56 + 88) |= 4u;
                      *(_QWORD *)(v56 + 40) = v62;
                    }
                    v68 = 0;
                    for (j = 0; ; ++j)
                    {
                      if ((unint64_t)objc_msgSend(v52, "coordinateCount") <= j)
                      {
                        v4 = v109;
                        v9 = v110;
                        v49 = v108;
                        v111 |= objc_msgSend(v52, "coordinateCount") != 0;
                        goto LABEL_103;
                      }
                      v70 = *(_DWORD *)(v56 + 20);
                      v71 = *(int *)(v56 + 16);
                      if ((int)v71 >= v70)
                      {
                        if (v70 == *(_DWORD *)(v56 + 24))
                        {
                          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v56 + 8), v70 + 1);
                          v70 = *(_DWORD *)(v56 + 20);
                        }
                        *(_DWORD *)(v56 + 20) = v70 + 1;
                        sub_1013847F8();
                      }
                      v72 = *(_QWORD *)(v56 + 8);
                      *(_DWORD *)(v56 + 16) = v71 + 1;
                      v73 = *(_QWORD *)(v72 + 8 * v71);
                      if (!v73)
                        break;
                      v74 = *(_QWORD *)((char *)objc_msgSend(v52, "coordinates") + v68);
                      *(_DWORD *)(v73 + 28) |= 1u;
                      *(_QWORD *)(v73 + 8) = v74;
                      v75 = *(_QWORD *)((char *)objc_msgSend(v52, "coordinates") + v68 + 8);
                      *(_DWORD *)(v73 + 28) |= 2u;
                      *(_QWORD *)(v73 + 16) = v75;
                      v68 += 16;
                      v11 = v118;
                    }
                    if (qword_1022A0160 != -1)
                      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
                    v90 = qword_1022A0168;
                    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "clrgmd,Invalid building data section coordinate pointer", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0160 != -1)
                        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
                      LOWORD(__p) = 0;
                      LODWORD(v104) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "clrgmd,Invalid building data section coordinate pointer", &__p, v104);
                      v94 = (uint8_t *)v99;
                      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v99);
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    if (qword_1022A0160 != -1)
                      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
                    v92 = qword_1022A0168;
                    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "clrgmd,Invalid building data section pointer", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0160 != -1)
                        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
                      LOWORD(__p) = 0;
                      LODWORD(v104) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "clrgmd,Invalid building data section pointer", &__p, v104);
                      v94 = (uint8_t *)v93;
                      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v93);
                      goto LABEL_164;
                    }
                  }
                  goto LABEL_134;
                }
              }
            }
          }
          else
          {
            v23 = (char *)i;
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021B1A18);
            v24 = qword_1022A0168;
            if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "clrgmd,Empty building found in the building data array", buf, 2u);
            }
            v25 = v23;
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0160 != -1)
                dispatch_once(&qword_1022A0160, &stru_1021B1A18);
              LOWORD(__p) = 0;
              LODWORD(v104) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "clrgmd,Empty building found in the building data array", &__p, v104);
              v27 = (uint8_t *)v26;
              sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v26);
              if (v27 != buf)
                free(v27);
              v25 = v23;
            }
          }
LABEL_105:
          ;
        }
        v115 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v125, v135, 16);
        if (v115)
          continue;
        break;
      }
      if (((v131 != 0) & v111) != 0)
      {
        v76 = (uint64_t)v106;
        if (sub_10011CE88(*v105, v105[1]))
        {
          *(_DWORD *)(v4 + 68) |= 8u;
          v77 = *(_QWORD *)(v4 + 56);
          if (!v77)
            operator new();
          *(_DWORD *)(v77 + 28) |= 1u;
          *(_DWORD *)(v4 + 68) |= 8u;
          *(_DWORD *)(v77 + 28) |= 2u;
          *(_OWORD *)(v77 + 8) = *(_OWORD *)v105;
          v140 = 0;
          __p = 0;
          v141 = 0;
          sub_1002FF5A4(&__p, (unint64_t)((double)v131 * 0.25));
          *(_QWORD *)buf = *v106;
          *(_QWORD *)&v142 = v9;
          v123 = v129;
          p_p = &__p;
          v133[0] = &v130;
          sub_101384C60((uint64_t)buf, (_QWORD **)&v142, (uint64_t)&v123, v133, (uint64_t *)&p_p);
          v78 = (uint64_t *)__p;
          v79 = v140;
          if (__p != v140)
          {
            v80 = *(_DWORD *)(v4 + 48);
            do
            {
              v81 = *v78;
              if (v80 == *(_DWORD *)(v4 + 52))
              {
                sub_1002E60A0(v4 + 40, v80 + 1);
                v80 = *(_DWORD *)(v4 + 48);
              }
              v82 = *(_QWORD *)(v4 + 40);
              *(_DWORD *)(v4 + 48) = v80 + 1;
              *(_QWORD *)(v82 + 8 * v80) = v81;
              ++v78;
              ++v80;
            }
            while (v78 != v79);
          }
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          v83 = qword_1022A0168;
          if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
          {
            v84 = *(_DWORD *)(v4 + 24);
            v85 = *(_DWORD *)(v4 + 48);
            *(_DWORD *)buf = 67240448;
            *(_DWORD *)&buf[4] = v84;
            v137 = 1026;
            v138 = v85;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "clrgmd,Populated Protobuf msg, %{public}d new bldgs, %{public}d bldgs marked for removal", buf, 0xEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021B1A18);
            v100 = *(_DWORD *)(v109 + 24);
            v101 = *(_DWORD *)(v109 + 48);
            LODWORD(v142) = 67240448;
            DWORD1(v142) = v100;
            WORD4(v142) = 1026;
            *(_DWORD *)((char *)&v142 + 10) = v101;
            LODWORD(v104) = 14;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "clrgmd,Populated Protobuf msg, %{public}d new bldgs, %{public}d bldgs marked for removal", &v142, v104);
            v103 = (uint8_t *)v102;
            sub_100512490("Generic", 1, 0, 2, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v102);
            if (v103 != buf)
              free(v103);
            v76 = (uint64_t)v106;
            v9 = v110;
          }
          sub_100008848(v76, *(_QWORD **)(v76 + 8));
          v86 = v130;
          *(_QWORD *)v76 = v129;
          *(_QWORD *)(v76 + 8) = v86;
          v87 = v131;
          *(_QWORD *)(v76 + 16) = v131;
          if (v87)
          {
            v86[2] = v9;
            v129 = (uint64_t *)&v130;
            v130 = 0;
            v131 = 0;
          }
          else
          {
            *(_QWORD *)v76 = v9;
          }
          if (__p)
          {
            v140 = (uint64_t *)__p;
            operator delete(__p);
          }
          v89 = 1;
          goto LABEL_135;
        }
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v95 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "clrgmd,Invalid user coordinates", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          LOWORD(__p) = 0;
          LODWORD(v104) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "clrgmd,Invalid user coordinates", &__p, v104);
          v94 = (uint8_t *)v96;
          sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v96);
LABEL_164:
          if (v94 != buf)
            free(v94);
        }
      }
    }
LABEL_134:
    v89 = 0;
LABEL_135:
    sub_100008848((uint64_t)&v129, v130);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v88 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "clrgmd,Invalid building data message pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "clrgmd,Invalid building data message pointer", &__p, 2);
      v98 = (uint8_t *)v97;
      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v97);
      if (v98 != buf)
        free(v98);
    }
    return 0;
  }
  return v89;
}

void sub_10137290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,_QWORD *a49)
{
  sub_100008848((uint64_t)&a48, a49);
  _Unwind_Resume(a1);
}

uint64_t sub_1013729CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;

  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    v5 = sub_10136EBE4((double *)a1, v4, 0);
    if ((v5 & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error: Failed to convert ConvertCLDeviceMotionSample mach time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        LOWORD(v22) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert ConvertCLDeviceMotionSample mach time to protobuf", &v22, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLDeviceMotionSampleToProtobuf(const CLDeviceMotion::Sample &, CLP::LogEntry::PrivateData::DeviceMotionSample *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
    *(_DWORD *)(a2 + 56) |= 2u;
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      operator new();
    v8 = sub_101372E70(a1 + 8, v7);
    v9 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 96);
    v10 = *(_BYTE *)(a1 + 100);
    *(_DWORD *)(a2 + 56) = v9 | 0x44;
    *(_BYTE *)(a2 + 24) = v10;
    v11 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 56) = v9 | 0x4C;
    *(_DWORD *)(a2 + 28) = v11;
    v12 = *(unsigned __int8 *)(a1 + 108);
    if (!sub_100106094(v12))
      sub_1018FAD10();
    v13 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 40) = v12;
    *(_DWORD *)(a2 + 56) = v13 | 0x30;
    v14 = *(_QWORD *)(a2 + 32);
    if (!v14)
      operator new();
    result = v5 & v8 & sub_1013731F4((unsigned __int16 *)(a1 + 110), v14);
    v16 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)(a2 + 56) |= 0x80u;
    *(_DWORD *)(a2 + 48) = v16;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v17 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "ConvertCLDeviceMotionSample,Invalid output pointer,pSampleMsg,%{private}p", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v22 = 134283521;
      v23 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLDeviceMotionSample,Invalid output pointer,pSampleMsg,%{private}p", &v22, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLDeviceMotionSampleToProtobuf(const CLDeviceMotion::Sample &, CLP::LogEntry::PrivateData::DeviceMotionSample *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return result;
}

void sub_101372E14()
{
  operator delete();
}

uint64_t sub_101372E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    v5 = sub_1013733C0((_OWORD *)a1, v4);
    *(_DWORD *)(a2 + 56) |= 2u;
    v6 = *(_QWORD *)(a2 + 16);
    if (!v6)
      operator new();
    v7 = sub_101373594(a1 + 32, v6);
    *(_DWORD *)(a2 + 56) |= 4u;
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
      operator new();
    v9 = sub_101373594(a1 + 44, v8);
    *(_DWORD *)(a2 + 56) |= 8u;
    v10 = *(_QWORD *)(a2 + 32);
    if (!v10)
      operator new();
    v11 = sub_101373594(a1 + 56, v10);
    v12 = *(_DWORD *)(a1 + 68);
    if (!sub_10044281C(v12))
      sub_1018FACE8();
    result = (v5 && v7 && v9) & v11;
    v14 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 40) = v12;
    *(_BYTE *)(a2 + 44) = *(_BYTE *)(a1 + 72);
    *(_WORD *)(a2 + 45) = *(_WORD *)(a1 + 73);
    v15 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 56) = v14 | 0x1F0;
    *(_DWORD *)(a2 + 48) = v15;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v16 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "ConvertCLMotionTypeDeviceMotion,Invalid output pointer,pDeviceMotionMsg,%{private}p", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v19 = 134283521;
      v20 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLMotionTypeDeviceMotion,Invalid output pointer,pDeviceMotionMsg,%{private}p", &v19, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLMotionTypeDeviceMotion(const CLMotionTypeDeviceMotion &, CLP::LogEntry::PrivateData::MotionTypeDeviceMotion *)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
      return 0;
    }
  }
  return result;
}

void sub_10137319C()
{
  operator delete();
}

BOOL sub_1013731F4(unsigned __int16 *a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (a2)
  {
    v3 = *a1;
    *(_DWORD *)(a2 + 16) |= 1u;
    *(_DWORD *)(a2 + 8) = v3;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v4 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ConvertCMSensorFusionStatus,Invalid output pointer,pStatusMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v8 = 134283521;
      v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCMSensorFusionStatus,Invalid output pointer,pStatusMsg,%{private}p", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCMSensorFusionStatus(const CMSensorFusion::Status &, CLP::LogEntry::PrivateData::SensorFusionStatus *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a2 != 0;
}

BOOL sub_1013733C0(_OWORD *a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 44);
    *(_OWORD *)(a2 + 8) = *a1;
    *(_DWORD *)(a2 + 44) = v3 | 0xF;
    *(_OWORD *)(a2 + 24) = a1[1];
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v4 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ConvertCLMotionTypeDoubleVector4,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v8 = 134283521;
      v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLMotionTypeDoubleVector4,Invalid output pointer,pVectorMsg,%{private}p", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLMotionTypeDoubleVector4(const CLMotionTypeDoubleVector4 &, CLP::LogEntry::PrivateData::MotionTypeDoubleVector4 *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a2 != 0;
}

BOOL sub_101373594(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a1;
    v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 24) = v3 | 7;
    *(_DWORD *)(a2 + 16) = v4;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ConvertCLMotionTypeVector3,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v9 = 134283521;
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLMotionTypeVector3,Invalid output pointer,pVectorMsg,%{private}p", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL ConvertCLMotionTypeVector3(const CLMotionTypeVector3 &, CLP::LogEntry::PrivateData::MotionTypeVector3 *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return a2 != 0;
}

void sub_101373768(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int16 *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int16 *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int16 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t j;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  NSObject *v134;
  int v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  const char *v140;
  uint8_t *v141;
  _QWORD *k;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t m;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned int v162;
  unsigned __int8 *v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  uint64_t v179;
  float v180;
  int v181;
  float v182;
  float v183;
  float v184;
  char v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t n;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BOOL8 v196;
  uint64_t v197;
  uint64_t v198;
  _BOOL8 v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  char v204;
  int v205;
  char v206;
  char v207;
  char v208;
  char v209;
  _BOOL8 v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  char v215;
  int v216;
  char v217;
  char v218;
  char v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  _BOOL8 v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  char v231;
  int v232;
  char v233;
  char v234;
  char v235;
  char v236;
  _BOOL8 v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  char v241;
  int v242;
  char v243;
  char v244;
  _BOOL8 v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  _BOOL8 v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  _BOOL8 v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _BOOL8 v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  char v262;
  int v263;
  char v264;
  char v265;
  _BOOL8 v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  char v271;
  int v272;
  char v273;
  char v274;
  char v275;
  _BOOL8 v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  char v280;
  int v281;
  char v282;
  char v283;
  char v284;
  int v285;
  char v286;
  int v287;
  _BOOL8 v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  _BOOL8 v292;
  uint64_t v293;
  uint64_t v294;
  _BOOL8 v295;
  uint64_t v296;
  uint64_t v297;
  _BOOL8 v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  float v302;
  uint64_t v303;
  uint64_t v304;
  double v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  uint64_t v309;
  uint64_t v310;
  double v311;
  uint64_t v312;
  int v313;
  char v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  double v318;
  uint64_t v319;
  int v320;
  char v321;
  int *v322;
  uint64_t v323;
  int v324;
  int v325;
  int v326;
  uint64_t v327;
  _BOOL8 v328;
  uint64_t v329;
  uint64_t v330;
  _BOOL8 v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  _BOOL8 v335;
  uint64_t v336;
  uint64_t v337;
  _BOOL8 v338;
  uint64_t v339;
  uint64_t v340;
  _BOOL8 v341;
  uint64_t v342;
  uint64_t v343;
  _BOOL8 v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  int v352;
  int v353;
  uint64_t v354;
  int v355;
  _DWORD *v356;
  _DWORD *v357;
  _DWORD *v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  const std::string::value_type *v364;
  std::string *v365;
  uint64_t v366;
  uint64_t ii;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  double v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t i;
  _DWORD v380[4];
  uint8_t buf[4];
  int v382;

  if (a2)
  {
    *(_DWORD *)(a2 + 132) |= 1u;
    v3 = *(_QWORD *)(a2 + 8);
    if (!v3)
      operator new();
    v4 = *(_DWORD *)(v3 + 36);
    *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
    v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v3 + 36) = v4 | 7;
    *(_QWORD *)(v3 + 24) = v5;
    v6 = *(_DWORD *)(a2 + 132);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 132) = v6 | 0x70;
    v7 = *(_QWORD *)(a2 + 72);
    if (!v7)
      operator new();
    v8 = *(_QWORD *)(a1 + 224);
    if (v8 && sub_101384858(v8))
    {
      *(_DWORD *)(v7 + 52) |= 1u;
      v9 = *(_QWORD *)(v7 + 8);
      if (!v9)
        operator new();
      v10 = *(unsigned __int16 **)(a1 + 224);
      v11 = *v10;
      *(_DWORD *)(v9 + 32) |= 1u;
      *(_DWORD *)(v9 + 24) = v11;
      if (sub_101375F7C((uint64_t)v10))
      {
        *(_DWORD *)(v9 + 32) |= 2u;
        v12 = *(_QWORD *)(v9 + 8);
        if (!v12)
          operator new();
        v13 = *(_QWORD *)(a1 + 224);
        v14 = *(__int16 *)(v13 + 8);
        v15 = *(_DWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 28) = v15 | 1;
        *(_DWORD *)(v12 + 8) = v14;
        if (v14 != -32768)
        {
          v16 = *(_QWORD *)(v13 + 16);
          if (v16)
          {
            if (*(_BYTE *)(v13 + 10) == 2)
            {
              v17 = *(unsigned __int16 *)(v13 + 24);
              if (v17 != 0x8000)
              {
                *(_DWORD *)(v12 + 28) = v15 | 5;
                v18 = *(_QWORD *)(v12 + 16);
                if (!v18)
                  operator new();
                v19 = *(_DWORD *)(v18 + 24);
                *(_QWORD *)(v18 + 8) = v16;
                *(_DWORD *)(v18 + 24) = v19 | 3;
                *(_DWORD *)(v18 + 16) = (__int16)v17;
              }
            }
          }
        }
        v20 = *(unsigned __int8 *)(v13 + 10);
        if (*(_BYTE *)(v13 + 10))
        {
          if (v20 == 1)
          {
            v21 = 3;
            v28 = sub_100106094(3u);
            if (!v28)
              sub_10194F89C(v28, v29, v30);
          }
          else if (v20 == 2)
          {
            v21 = 4;
            v22 = sub_100106094(4u);
            if (!v22)
              sub_10194F89C(v22, v23, v24);
          }
          else
          {
            v21 = 1;
            v34 = sub_100106094(1u);
            if (!v34)
              sub_10194F89C(v34, v35, v36);
          }
        }
        else
        {
          v21 = 2;
          v31 = sub_100106094(2u);
          if (!v31)
            sub_10194F89C(v31, v32, v33);
        }
        *(_DWORD *)(v12 + 28) |= 2u;
        *(_DWORD *)(v12 + 12) = v21;
      }
      if (sub_101375FD8(*(_QWORD **)(a1 + 224)))
      {
        *(_DWORD *)(v9 + 32) |= 4u;
        v37 = *(_QWORD *)(v9 + 16);
        if (!v37)
          operator new();
        v38 = *(_QWORD *)(a1 + 224);
        v39 = *(_DWORD *)(v37 + 44);
        *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 32);
        *(_OWORD *)(v37 + 16) = *(_OWORD *)(v38 + 40);
        v40 = *(_QWORD *)(v38 + 56);
        *(_DWORD *)(v37 + 44) = v39 | 0xF;
        *(_QWORD *)(v37 + 32) = v40;
      }
    }
    v41 = *(unsigned __int16 **)(a1 + 232);
    if (v41)
    {
      if ((v42 = *v41) != 0 && v41[1] - 1 < 0x5B5
        || *((_QWORD *)v41 + 1) && (*((_QWORD *)v41 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v7 + 52) |= 2u;
        v43 = *(_QWORD *)(v7 + 16);
        if (!v43)
          operator new();
        v44 = *(_DWORD *)(v43 + 40);
        *(_DWORD *)(v43 + 8) = v42;
        v45 = v41[1];
        *(_DWORD *)(v43 + 40) = v44 | 3;
        *(_DWORD *)(v43 + 12) = v45;
        if (sub_101376044((uint64_t)v41))
        {
          *(_DWORD *)(v43 + 40) |= 8u;
          v46 = *(_QWORD *)(v43 + 16);
          if (!v46)
            operator new();
          v47 = *(_QWORD *)(a1 + 232);
          v48 = *(_DWORD *)(v46 + 28);
          *(_QWORD *)(v46 + 16) = *(_QWORD *)(v47 + 16);
          v49 = *(_QWORD *)(v47 + 8);
          *(_DWORD *)(v46 + 28) = v48 | 3;
          *(_QWORD *)(v46 + 8) = v49;
        }
      }
    }
    v50 = *(unsigned __int16 **)(a1 + 240);
    if (v50)
    {
      v51 = *v50;
      if (*v50
        || *((_QWORD *)v50 + 1)
        && (*((_QWORD *)v50 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*((_QWORD *)v50 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v7 + 52) |= 4u;
        v52 = *(_QWORD *)(v7 + 24);
        if (!v52)
          operator new();
        *(_DWORD *)(v52 + 56) |= 1u;
        *(_DWORD *)(v52 + 48) = v51;
        if (sub_1013760A4((uint64_t)v50))
        {
          *(_DWORD *)(v52 + 56) |= 4u;
          v53 = *(_QWORD *)(v52 + 16);
          if (!v53)
            operator new();
          v54 = *(_QWORD *)(a1 + 240);
          v55 = *(_DWORD *)(v53 + 36);
          *(_QWORD *)(v53 + 8) = *(_QWORD *)(v54 + 8);
          *(_DWORD *)(v53 + 36) = v55 | 7;
          *(_OWORD *)(v53 + 16) = *(_OWORD *)(v54 + 16);
        }
      }
    }
    v56 = *(unsigned __int16 **)(a1 + 248);
    if (v56)
    {
      v57 = *v56;
      if (*v56
        || *((_QWORD *)v56 + 1)
        && (*((_QWORD *)v56 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*((_QWORD *)v56 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v7 + 52) |= 8u;
        v58 = *(_QWORD *)(v7 + 32);
        if (!v58)
          operator new();
        *(_DWORD *)(v58 + 40) |= 1u;
        *(_DWORD *)(v58 + 32) = v57;
        if (sub_1013760A4((uint64_t)v56))
        {
          *(_DWORD *)(v58 + 40) |= 4u;
          v59 = *(_QWORD *)(v58 + 16);
          if (!v59)
            operator new();
          v60 = *(_QWORD *)(a1 + 248);
          v61 = *(_DWORD *)(v59 + 36);
          *(_QWORD *)(v59 + 8) = *(_QWORD *)(v60 + 8);
          *(_DWORD *)(v59 + 36) = v61 | 7;
          *(_OWORD *)(v59 + 16) = *(_OWORD *)(v60 + 16);
        }
      }
    }
    v62 = *(_QWORD *)(a1 + 256);
    if (v62 && sub_1013760A4(v62))
    {
      *(_DWORD *)(v7 + 52) |= 0x10u;
      v63 = *(_QWORD *)(v7 + 40);
      if (!v63)
        operator new();
      v64 = *(unsigned __int16 **)(a1 + 256);
      v65 = *v64;
      *(_DWORD *)(v63 + 24) |= 2u;
      *(_DWORD *)(v63 + 16) = v65;
      if (sub_1013760A4((uint64_t)v64))
      {
        *(_DWORD *)(v63 + 24) |= 1u;
        v66 = *(_QWORD *)(v63 + 8);
        if (!v66)
          operator new();
        v67 = *(_QWORD *)(a1 + 256);
        v68 = *(_DWORD *)(v66 + 36);
        *(_QWORD *)(v66 + 8) = *(_QWORD *)(v67 + 8);
        *(_DWORD *)(v66 + 36) = v68 | 7;
        *(_OWORD *)(v66 + 16) = *(_OWORD *)(v67 + 16);
      }
    }
    v69 = *(_QWORD *)(a1 + 176);
    for (i = *(_QWORD *)(a1 + 184); v69 != i; v69 += 144)
    {
      v70 = *(_DWORD *)(a2 + 36);
      v71 = *(int *)(a2 + 32);
      if ((int)v71 >= v70)
      {
        if (v70 == *(_DWORD *)(a2 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 24), v70 + 1);
          v70 = *(_DWORD *)(a2 + 36);
        }
        *(_DWORD *)(a2 + 36) = v70 + 1;
        sub_1000F97A0();
      }
      v72 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 32) = v71 + 1;
      v73 = *(_QWORD *)(v72 + 8 * v71);
      *(_DWORD *)(v73 + 172) |= 1u;
      v74 = *(_QWORD *)(v73 + 8);
      if (!v74)
        operator new();
      sub_101376114(v69, v74);
      v75 = sub_10001B780(1u);
      if (!v75)
        sub_10194F878(v75, v76, v77);
      v78 = *(_DWORD *)(v73 + 172) | 4;
      *(_DWORD *)(v73 + 172) = v78;
      *(_DWORD *)(v73 + 56) = 1;
      switch(*(_BYTE *)(v69 + 16))
      {
        case 1:
          v79 = sub_10001B780(2u);
          if (!v79)
            sub_10194F878(v79, v80, v81);
          v82 = 2;
          goto LABEL_103;
        case 2:
          v89 = sub_10001B780(3u);
          if (!v89)
            sub_10194F878(v89, v90, v91);
          v82 = 3;
          goto LABEL_103;
        case 3:
          v83 = sub_10001B780(6u);
          if (!v83)
            sub_10194F878(v83, v84, v85);
          v82 = 6;
          goto LABEL_103;
        case 4:
          v86 = sub_10001B780(5u);
          if (!v86)
            sub_10194F878(v86, v87, v88);
          v82 = 5;
LABEL_103:
          v78 = *(_DWORD *)(v73 + 172) | 4;
          *(_DWORD *)(v73 + 172) = v78;
          *(_DWORD *)(v73 + 56) = v82;
          break;
        default:
          break;
      }
      v92 = *(_QWORD *)(v69 + 24);
      v93 = *(_QWORD *)(v69 + 32);
      if (v92 != v93)
      {
        do
        {
          v94 = *(_DWORD *)(v73 + 36);
          v95 = *(int *)(v73 + 32);
          if ((int)v95 >= v94)
          {
            if (v94 == *(_DWORD *)(v73 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v73 + 24), v94 + 1);
              v94 = *(_DWORD *)(v73 + 36);
            }
            *(_DWORD *)(v73 + 36) = v94 + 1;
            sub_1000F8CCC();
          }
          v96 = *(_QWORD *)(v73 + 24);
          *(_DWORD *)(v73 + 32) = v95 + 1;
          v97 = *(_QWORD *)(v96 + 8 * v95);
          v98 = *(_DWORD *)(v97 + 28);
          *(_QWORD *)(v97 + 8) = *(_QWORD *)v92;
          *(_DWORD *)(v97 + 28) = v98 | 3;
          v99 = *(_QWORD *)(v97 + 16);
          if (!v99)
            operator new();
          v100 = *(_DWORD *)(v99 + 36);
          *(_OWORD *)(v99 + 8) = *(_OWORD *)(v92 + 8);
          v101 = *(_QWORD *)(v92 + 24);
          *(_DWORD *)(v99 + 36) = v100 | 7;
          *(_QWORD *)(v99 + 24) = v101;
          v92 += 32;
        }
        while (v92 != v93);
        v78 = *(_DWORD *)(v73 + 172);
      }
      v102 = *(_OWORD **)(v69 + 48);
      if (v102)
      {
        *(_DWORD *)(v73 + 172) = v78 | 0x8000;
        v103 = *(_QWORD *)(v73 + 128);
        if (!v103)
          operator new();
        v104 = 0;
        *(_DWORD *)(v103 + 76) |= 3u;
        *(_OWORD *)(v103 + 8) = *v102;
        do
        {
          v105 = *(_QWORD *)(v69 + 48);
          v106 = *(_QWORD *)(v105 + v104 + 16);
          v107 = *(_DWORD *)(v103 + 32);
          if (v107 == *(_DWORD *)(v103 + 36))
          {
            sub_1002E60A0(v103 + 24, v107 + 1);
            v107 = *(_DWORD *)(v103 + 32);
            v105 = *(_QWORD *)(v69 + 48);
          }
          v108 = *(_QWORD *)(v103 + 24);
          *(_DWORD *)(v103 + 32) = v107 + 1;
          *(_QWORD *)(v108 + 8 * v107) = v106;
          v109 = *(_QWORD *)(v105 + v104 + 48);
          v110 = *(_DWORD *)(v103 + 48);
          if (v110 == *(_DWORD *)(v103 + 52))
          {
            sub_1002E60A0(v103 + 40, v110 + 1);
            v110 = *(_DWORD *)(v103 + 48);
            v105 = *(_QWORD *)(v69 + 48);
          }
          v111 = *(_QWORD *)(v103 + 40);
          *(_DWORD *)(v103 + 48) = v110 + 1;
          *(_QWORD *)(v111 + 8 * v110) = v109;
          v112 = *(_QWORD *)(v105 + v104 + 80);
          v113 = *(_DWORD *)(v103 + 64);
          if (v113 == *(_DWORD *)(v103 + 68))
          {
            sub_1002E60A0(v103 + 56, v113 + 1);
            v113 = *(_DWORD *)(v103 + 64);
          }
          v114 = *(_QWORD *)(v103 + 56);
          *(_DWORD *)(v103 + 64) = v113 + 1;
          *(_QWORD *)(v114 + 8 * v113) = v112;
          v104 += 8;
        }
        while (v104 != 32);
        v78 = *(_DWORD *)(v73 + 172);
      }
      *(_QWORD *)(v73 + 16) = *(_QWORD *)(v69 + 8);
      *(_QWORD *)(v73 + 48) = *(_QWORD *)(v69 + 56);
      *(_OWORD *)(v73 + 64) = *(_OWORD *)(v69 + 64);
      *(_QWORD *)(v73 + 152) = *(_QWORD *)(v69 + 80);
      *(_DWORD *)(v73 + 60) = *(_DWORD *)(v69 + 88);
      v115 = *(_DWORD *)(v69 + 92);
      *(_DWORD *)(v73 + 172) = v78 | 0x2001F2;
      *(_DWORD *)(v73 + 80) = v115;
      v116 = sub_101376400((unsigned __int8 *)(v69 + 96));
      if (!sub_100106094(v116))
        sub_10192A768();
      *(_DWORD *)(v73 + 172) |= 0x200u;
      *(_DWORD *)(v73 + 84) = v116;
      v117 = sub_101376400((unsigned __int8 *)(v69 + 97));
      if (!sub_100106094(v117))
        sub_10192A6A0();
      *(_DWORD *)(v73 + 172) |= 0x10000u;
      *(_DWORD *)(v73 + 136) = v117;
      v118 = sub_101376400((unsigned __int8 *)(v69 + 98));
      if (!sub_100106094(v118))
        sub_10192A740();
      *(_DWORD *)(v73 + 172) |= 0x400u;
      *(_DWORD *)(v73 + 88) = v118;
      v119 = sub_101376400((unsigned __int8 *)(v69 + 99));
      if (!sub_100106094(v119))
        sub_10192A678();
      *(_DWORD *)(v73 + 172) |= 0x20000u;
      *(_DWORD *)(v73 + 140) = v119;
      v120 = sub_101376400((unsigned __int8 *)(v69 + 100));
      if (!sub_100106094(v120))
        sub_10192A718();
      *(_DWORD *)(v73 + 172) |= 0x800u;
      *(_DWORD *)(v73 + 92) = v120;
      v121 = sub_101376400((unsigned __int8 *)(v69 + 101));
      if (!sub_100106094(v121))
        sub_10192A650();
      *(_DWORD *)(v73 + 172) |= 0x40000u;
      *(_DWORD *)(v73 + 144) = v121;
      v122 = sub_101376400((unsigned __int8 *)(v69 + 102));
      if (!sub_100106094(v122))
        sub_10192A6F0();
      *(_DWORD *)(v73 + 172) |= 0x1000u;
      *(_DWORD *)(v73 + 96) = v122;
      v123 = sub_101376400((unsigned __int8 *)(v69 + 103));
      if (!sub_100106094(v123))
        sub_10192A628();
      *(_DWORD *)(v73 + 172) |= 0x80000u;
      *(_DWORD *)(v73 + 148) = v123;
      v124 = sub_101376400((unsigned __int8 *)(v69 + 104));
      if (!sub_100106094(v124))
        sub_10192A6C8();
      *(_DWORD *)(v73 + 172) |= 0x2000u;
      *(_DWORD *)(v73 + 100) = v124;
      v125 = sub_101376400((unsigned __int8 *)(v69 + 105));
      if (!sub_100106094(v125))
        sub_10192A600();
      *(_DWORD *)(v73 + 172) |= 0x100000u;
      *(_DWORD *)(v73 + 160) = v125;
      v126 = sub_1013765C8((unsigned __int8 *)(v69 + 136));
      if (!sub_10002A324(v126))
        sub_10192A5D8();
      *(_DWORD *)(v73 + 172) |= 0x400000u;
      *(_DWORD *)(v73 + 164) = v126;
      v128 = *(_QWORD *)(v69 + 112);
      for (j = *(_QWORD *)(v69 + 120); v128 != j; v128 += 32)
      {
        v129 = *(_DWORD *)(v73 + 116);
        v130 = *(int *)(v73 + 112);
        if ((int)v130 >= v129)
        {
          if (v129 == *(_DWORD *)(v73 + 120))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v73 + 104), v129 + 1);
            v129 = *(_DWORD *)(v73 + 116);
          }
          *(_DWORD *)(v73 + 116) = v129 + 1;
          sub_1000F901C();
        }
        v131 = *(_QWORD *)(v73 + 104);
        *(_DWORD *)(v73 + 112) = v130 + 1;
        v132 = *(_QWORD *)(v131 + 8 * v130);
        v133 = *(_DWORD *)(v128 + 4);
        if (v133 >= 3)
        {
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          v134 = qword_1022A0168;
          if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
          {
            v135 = *(_DWORD *)(v128 + 4);
            *(_DWORD *)buf = 67240192;
            v382 = v135;
            _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_ERROR, "TranslateIonosphericModel,Invalid correction model,source,%{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021B1A18);
            v139 = *(_DWORD *)(v128 + 4);
            v380[0] = 67240192;
            v380[1] = v139;
            LODWORD(v377) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TranslateIonosphericModel,Invalid correction model,source,%{public}d", v380, v377);
            v141 = (uint8_t *)v140;
            sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::IonosphericCorrectionSource TranslateIonosphericModel(const gnss::IonosphericCorrectionSource &)", "%s\n", v140);
            if (v141 != buf)
              free(v141);
          }
          v133 = 0;
        }
        if (!sub_10008D1F0(v133))
          sub_10192A588();
        v136 = *(_DWORD *)(v132 + 44);
        *(_DWORD *)(v132 + 28) = v133;
        *(_OWORD *)(v132 + 8) = *(_OWORD *)(v128 + 8);
        v137 = *(_QWORD *)(v128 + 24);
        *(_DWORD *)(v132 + 44) = v136 | 0x1E;
        *(_QWORD *)(v132 + 32) = v137;
        v138 = sub_101376790((unsigned __int8 *)v128);
        if (!sub_100DA5F2C(v138))
          sub_10192A5B0();
        *(_DWORD *)(v132 + 44) |= 1u;
        *(_DWORD *)(v132 + 24) = v138;
      }
    }
    v143 = *(_QWORD **)(a1 + 200);
    for (k = *(_QWORD **)(a1 + 208); v143 != k; v143 = v148 + 8)
    {
      v144 = *(_DWORD *)(a2 + 60);
      v145 = *(int *)(a2 + 56);
      if ((int)v145 >= v144)
      {
        if (v144 == *(_DWORD *)(a2 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 48), v144 + 1);
          v144 = *(_DWORD *)(a2 + 60);
        }
        *(_DWORD *)(a2 + 60) = v144 + 1;
        sub_1000F9A8C();
      }
      v146 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 56) = v145 + 1;
      v147 = *(_QWORD *)(v146 + 8 * v145);
      LODWORD(v146) = *(_DWORD *)(v147 + 32);
      *(_QWORD *)(v147 + 8) = *v143;
      *(_DWORD *)(v147 + 32) = v146 | 0xE;
      *(_QWORD *)(v147 + 20) = v143[1];
      v148 = (unsigned __int8 *)(v143 + 2);
      v149 = sub_101376790(v148);
      if (!sub_100DA5F2C(v149))
        sub_10192A7B8();
      *(_DWORD *)(v147 + 32) |= 1u;
      *(_DWORD *)(v147 + 16) = v149;
    }
    v150 = a1;
    v151 = *(_QWORD *)(a1 + 264);
    if (v151)
    {
      *(_DWORD *)(a2 + 132) |= 0x80u;
      v152 = *(_QWORD *)(a2 + 96);
      if (!v152)
        operator new();
      v153 = *(_DWORD *)(v152 + 52);
      *(_QWORD *)(v152 + 8) = *(_QWORD *)v151;
      *(_OWORD *)(v152 + 16) = *(_OWORD *)(v151 + 8);
      *(_DWORD *)(v152 + 52) = v153 | 0x1FF;
      *(_OWORD *)(v152 + 32) = *(_OWORD *)(v151 + 24);
      v150 = a1;
    }
    v155 = *(_QWORD *)(v150 + 272);
    for (m = *(_QWORD *)(v150 + 280); v155 != m; v155 = (uint64_t)(v163 + 31))
    {
      v156 = *(_DWORD *)(a2 + 116);
      v157 = *(int *)(a2 + 112);
      if ((int)v157 >= v156)
      {
        if (v156 == *(_DWORD *)(a2 + 120))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 104), v156 + 1);
          v156 = *(_DWORD *)(a2 + 116);
        }
        *(_DWORD *)(a2 + 116) = v156 + 1;
        sub_101384934();
      }
      v158 = *(_QWORD *)(a2 + 104);
      *(_DWORD *)(a2 + 112) = v157 + 1;
      v159 = *(_QWORD *)(v158 + 8 * v157);
      *(_DWORD *)(v159 + 36) |= 1u;
      v160 = *(_QWORD *)(v159 + 8);
      if (!v160)
        operator new();
      sub_101376114(v155, v160);
      v161 = (unsigned __int8 *)(v155 + 8);
      v162 = sub_101376790(v161);
      if (!sub_100DA5F2C(v162))
        sub_10192A858();
      *(_DWORD *)(v159 + 36) |= 2u;
      *(_DWORD *)(v159 + 16) = v162;
      v163 = v161 + 1;
      v164 = sub_1013765C8(v163);
      if (!sub_10002A324(v164))
        sub_10192A830();
      v165 = *(_DWORD *)(v159 + 36);
      *(_DWORD *)(v159 + 20) = v164;
      *(_DWORD *)(v159 + 36) = v165 | 0xC;
      v166 = *(_QWORD *)(v159 + 24);
      if (!v166)
        operator new();
      v167 = *(_DWORD *)(v166 + 36);
      *(_OWORD *)(v166 + 8) = *(_OWORD *)(v163 + 7);
      v168 = *(_QWORD *)(v163 + 23);
      *(_DWORD *)(v166 + 36) = v167 | 7;
      *(_QWORD *)(v166 + 24) = v168;
    }
    *(_DWORD *)(a2 + 132) |= 2u;
    v169 = *(_QWORD *)(a2 + 16);
    if (!v169)
      operator new();
    *(_DWORD *)(v169 + 44) |= 1u;
    v170 = *(_QWORD *)(v169 + 8);
    if (!v170)
      operator new();
    v171 = *(_DWORD *)(v170 + 44);
    *(_QWORD *)(v170 + 8) = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(v170 + 44) = v171 | 5;
    v172 = *(_QWORD *)(v170 + 24);
    if (!v172)
      operator new();
    v173 = *(_DWORD *)(v172 + 52);
    *(_OWORD *)(v172 + 8) = *(_OWORD *)(a1 + 88);
    *(float64x2_t *)(v172 + 24) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 104));
    v174 = *(float *)(a1 + 112);
    *(_DWORD *)(v172 + 52) = v173 | 0x1F;
    *(double *)(v172 + 40) = v174;
    if (*(_QWORD *)(a1 + 40) != -1)
    {
      v175 = *(double *)(a1 + 48);
      if ((*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v176 = *(double *)(a1 + 56);
        if ((*(_QWORD *)&v176 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v177 = *(double *)(a1 + 64);
          if ((*(_QWORD *)&v177 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v178 = *(double *)(a1 + 72);
            if ((*(_QWORD *)&v178 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              *(_DWORD *)(v170 + 44) |= 2u;
              v179 = *(_QWORD *)(v170 + 16);
              if (!v179)
                operator new();
              v180 = v175;
              v181 = *(_DWORD *)(v179 + 32);
              v182 = v176;
              *(float *)(v179 + 8) = v180;
              *(float *)(v179 + 12) = v182;
              v183 = v177;
              v184 = v178;
              *(_DWORD *)(v179 + 32) = v181 | 0xF;
              *(float *)(v179 + 16) = v183;
              *(float *)(v179 + 20) = v184;
              if (*(_BYTE *)(a1 + 81))
              {
                v185 = *(_BYTE *)(a1 + 80);
                *(_DWORD *)(v179 + 32) = v181 | 0x1F;
                *(_BYTE *)(v179 + 24) = v185;
              }
            }
          }
        }
      }
    }
    if (sub_101376960(a1 + 40))
    {
      *(_DWORD *)(v170 + 44) |= 8u;
      v186 = *(_QWORD *)(v170 + 32);
      if (!v186)
        operator new();
      v187 = *(_DWORD *)(v186 + 40);
      *(_QWORD *)(v186 + 24) = *(_QWORD *)(a1 + 136);
      *(_DWORD *)(v186 + 32) = *(_DWORD *)(a1 + 144);
      *(_QWORD *)(v186 + 8) = *(_QWORD *)(a1 + 120);
      *(_DWORD *)(v186 + 40) = v187 | 0x1F;
      *(_QWORD *)(v186 + 16) = *(_QWORD *)(a1 + 128);
    }
    v188 = *(_QWORD *)(a1 + 152);
    for (n = *(_QWORD *)(a1 + 160); v188 != n; v188 += 176)
    {
      v190 = *(_DWORD *)(v169 + 28);
      v191 = *(int *)(v169 + 24);
      if ((int)v191 >= v190)
      {
        if (v190 == *(_DWORD *)(v169 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v169 + 16), v190 + 1);
          v190 = *(_DWORD *)(v169 + 28);
        }
        *(_DWORD *)(v169 + 28) = v190 + 1;
        sub_101384994();
      }
      v192 = *(_QWORD *)(v169 + 16);
      *(_DWORD *)(v169 + 24) = v191 + 1;
      v193 = *(_QWORD *)(v192 + 8 * v191);
      *(_DWORD *)(v193 + 112) |= 1u;
      v194 = *(_QWORD *)(v193 + 8);
      if (!v194)
        operator new();
      sub_101376114(v188, v194);
      *(_DWORD *)(v193 + 112) |= 2u;
      v195 = *(_QWORD *)(v193 + 16);
      if (!v195)
        operator new();
      switch(*(_BYTE *)(v188 + 8))
      {
        case 0:
          v196 = sub_100DA5F2C(1u);
          if (!v196)
            sub_10194F854(v196, v197, v198);
          *(_DWORD *)(v195 + 96) |= 1u;
          *(_DWORD *)(v195 + 88) = 1;
          break;
        case 1:
          v249 = sub_100DA5F2C(2u);
          if (!v249)
            sub_10194F854(v249, v250, v251);
          v252 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 2;
          *(_DWORD *)(v195 + 96) = v252 | 3;
          v253 = *(_QWORD *)(v195 + 8);
          if (!v253)
            operator new();
          goto LABEL_255;
        case 2:
          v226 = sub_100DA5F2C(3u);
          if (!v226)
            sub_10194F854(v226, v227, v228);
          v229 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 3;
          *(_DWORD *)(v195 + 96) = v229 | 5;
          v230 = *(_QWORD *)(v195 + 16);
          if (!v230)
            operator new();
          v231 = *(_BYTE *)(v188 + 13);
          v232 = *(_DWORD *)(v230 + 20);
          *(_DWORD *)(v230 + 20) = v232 | 0x10;
          *(_BYTE *)(v230 + 12) = v231;
          v233 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v230 + 20) = v232 | 0x14;
          *(_BYTE *)(v230 + 10) = v233;
          v234 = *(_BYTE *)(v188 + 12);
          *(_DWORD *)(v230 + 20) = v232 | 0x1C;
          *(_BYTE *)(v230 + 11) = v234;
          v235 = *(_BYTE *)(v188 + 10);
          *(_DWORD *)(v230 + 20) = v232 | 0x1E;
          *(_BYTE *)(v230 + 9) = v235;
          v236 = *(_BYTE *)(v188 + 9);
          *(_DWORD *)(v230 + 20) = v232 | 0x1F;
          goto LABEL_232;
        case 3:
          v237 = sub_100DA5F2C(4u);
          if (!v237)
            sub_10194F854(v237, v238, v239);
          v240 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 4;
          *(_DWORD *)(v195 + 96) = v240 | 9;
          v230 = *(_QWORD *)(v195 + 24);
          if (!v230)
            operator new();
          v241 = *(_BYTE *)(v188 + 11);
          v242 = *(_DWORD *)(v230 + 16);
          *(_DWORD *)(v230 + 16) = v242 | 4;
          *(_BYTE *)(v230 + 10) = v241;
          v243 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v230 + 16) = v242 | 6;
          *(_BYTE *)(v230 + 9) = v243;
          v244 = *(_BYTE *)(v188 + 12);
          *(_DWORD *)(v230 + 16) = v242 | 0xE;
          *(_BYTE *)(v230 + 11) = v244;
          v236 = *(_BYTE *)(v188 + 9);
          *(_DWORD *)(v230 + 16) = v242 | 0xF;
LABEL_232:
          *(_BYTE *)(v230 + 8) = v236;
          break;
        case 4:
          v199 = sub_100DA5F2C(5u);
          if (!v199)
            sub_10194F854(v199, v200, v201);
          v202 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 5;
          *(_DWORD *)(v195 + 96) = v202 | 0x11;
          v203 = *(_QWORD *)(v195 + 32);
          if (!v203)
            operator new();
          v204 = *(_BYTE *)(v188 + 9);
          v205 = *(_DWORD *)(v203 + 20);
          *(_DWORD *)(v203 + 20) = v205 | 1;
          *(_BYTE *)(v203 + 8) = v204;
          v206 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v203 + 20) = v205 | 5;
          *(_BYTE *)(v203 + 10) = v206;
          v207 = *(_BYTE *)(v188 + 12);
          *(_DWORD *)(v203 + 20) = v205 | 0xD;
          *(_BYTE *)(v203 + 11) = v207;
          v208 = *(_BYTE *)(v188 + 10);
          *(_DWORD *)(v203 + 20) = v205 | 0xF;
          *(_BYTE *)(v203 + 9) = v208;
          v209 = *(_BYTE *)(v188 + 13);
          *(_DWORD *)(v203 + 20) = v205 | 0x1F;
          *(_BYTE *)(v203 + 12) = v209;
          break;
        case 5:
          v254 = sub_100DA5F2C(6u);
          if (!v254)
            sub_10194F854(v254, v255, v256);
          v257 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 6;
          *(_DWORD *)(v195 + 96) = v257 | 0x21;
          v214 = *(_QWORD *)(v195 + 40);
          if (!v214)
            operator new();
          goto LABEL_246;
        case 6:
          v258 = sub_100DA5F2C(0xBu);
          if (!v258)
            sub_10194F854(v258, v259, v260);
          v261 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 11;
          *(_DWORD *)(v195 + 96) = v261 | 0x21;
          v214 = *(_QWORD *)(v195 + 40);
          if (!v214)
            operator new();
          goto LABEL_246;
        case 7:
          v245 = sub_100DA5F2C(7u);
          if (!v245)
            sub_10194F854(v245, v246, v247);
          v248 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 7;
          *(_DWORD *)(v195 + 96) = v248 | 0x41;
          v214 = *(_QWORD *)(v195 + 48);
          if (!v214)
            operator new();
LABEL_246:
          v262 = *(_BYTE *)(v188 + 10);
          v263 = *(_DWORD *)(v214 + 16);
          *(_DWORD *)(v214 + 16) = v263 | 2;
          *(_BYTE *)(v214 + 9) = v262;
          v264 = *(_BYTE *)(v188 + 9);
          *(_DWORD *)(v214 + 16) = v263 | 3;
          *(_BYTE *)(v214 + 8) = v264;
          v265 = *(_BYTE *)(v188 + 12);
          *(_DWORD *)(v214 + 16) = v263 | 0xB;
          *(_BYTE *)(v214 + 11) = v265;
          v225 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v214 + 16) = v263 | 0xF;
          goto LABEL_247;
        case 8:
          v266 = sub_100DA5F2C(8u);
          if (!v266)
            sub_10194F854(v266, v267, v268);
          v269 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 8;
          *(_DWORD *)(v195 + 96) = v269 | 0x81;
          v270 = *(_QWORD *)(v195 + 56);
          if (!v270)
            operator new();
          v271 = *(_BYTE *)(v188 + 12);
          v272 = *(_DWORD *)(v270 + 16);
          *(_DWORD *)(v270 + 16) = v272 | 8;
          *(_BYTE *)(v270 + 11) = v271;
          v273 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v270 + 16) = v272 | 0xC;
          *(_BYTE *)(v270 + 10) = v273;
          v274 = *(_BYTE *)(v188 + 9);
          *(_DWORD *)(v270 + 16) = v272 | 0xD;
          *(_BYTE *)(v270 + 8) = v274;
          v275 = *(_BYTE *)(v188 + 10);
          *(_DWORD *)(v270 + 16) = v272 | 0xF;
          *(_BYTE *)(v270 + 9) = v275;
          break;
        case 9:
          v210 = sub_100DA5F2C(9u);
          if (!v210)
            sub_10194F854(v210, v211, v212);
          v213 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 9;
          *(_DWORD *)(v195 + 96) = v213 | 0x101;
          v214 = *(_QWORD *)(v195 + 64);
          if (!v214)
            operator new();
          v215 = *(_BYTE *)(v188 + 18);
          v216 = *(_DWORD *)(v214 + 24);
          *(_DWORD *)(v214 + 24) = v216 | 0x200;
          *(_BYTE *)(v214 + 17) = v215;
          v217 = *(_BYTE *)(v188 + 13);
          *(_DWORD *)(v214 + 24) = v216 | 0x210;
          *(_BYTE *)(v214 + 12) = v217;
          v218 = *(_BYTE *)(v188 + 12);
          *(_DWORD *)(v214 + 24) = v216 | 0x218;
          *(_BYTE *)(v214 + 11) = v218;
          v219 = *(_BYTE *)(v188 + 17);
          *(_DWORD *)(v214 + 24) = v216 | 0x318;
          *(_BYTE *)(v214 + 16) = v219;
          v220 = *(_BYTE *)(v188 + 16);
          *(_DWORD *)(v214 + 24) = v216 | 0x398;
          *(_BYTE *)(v214 + 15) = v220;
          v221 = *(_BYTE *)(v188 + 15);
          *(_DWORD *)(v214 + 24) = v216 | 0x3D8;
          *(_BYTE *)(v214 + 14) = v221;
          v222 = *(_BYTE *)(v188 + 14);
          *(_DWORD *)(v214 + 24) = v216 | 0x3F8;
          *(_BYTE *)(v214 + 13) = v222;
          v223 = *(_BYTE *)(v188 + 10);
          *(_DWORD *)(v214 + 24) = v216 | 0x3FA;
          *(_BYTE *)(v214 + 9) = v223;
          v224 = *(_BYTE *)(v188 + 9);
          *(_DWORD *)(v214 + 24) = v216 | 0x3FB;
          *(_BYTE *)(v214 + 8) = v224;
          v225 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v214 + 24) = v216 | 0x3FF;
LABEL_247:
          *(_BYTE *)(v214 + 10) = v225;
          break;
        case 0xA:
          v276 = sub_100DA5F2C(0xCu);
          if (!v276)
            sub_10194F854(v276, v277, v278);
          v279 = *(_DWORD *)(v195 + 96);
          *(_DWORD *)(v195 + 88) = 12;
          *(_DWORD *)(v195 + 96) = v279 | 0x401;
          v253 = *(_QWORD *)(v195 + 80);
          if (!v253)
            operator new();
LABEL_255:
          v280 = *(_BYTE *)(v188 + 10);
          v281 = *(_DWORD *)(v253 + 16);
          *(_DWORD *)(v253 + 16) = v281 | 2;
          *(_BYTE *)(v253 + 9) = v280;
          v282 = *(_BYTE *)(v188 + 11);
          *(_DWORD *)(v253 + 16) = v281 | 6;
          *(_BYTE *)(v253 + 10) = v282;
          v283 = *(_BYTE *)(v188 + 9);
          *(_DWORD *)(v253 + 16) = v281 | 7;
          *(_BYTE *)(v253 + 8) = v283;
          v284 = *(_BYTE *)(v188 + 12);
          *(_DWORD *)(v253 + 16) = v281 | 0xF;
          *(_BYTE *)(v253 + 11) = v284;
          break;
        default:
          break;
      }
      v285 = *(_DWORD *)(v193 + 112);
      *(_OWORD *)(v193 + 24) = *(_OWORD *)(v188 + 24);
      *(_QWORD *)(v193 + 40) = *(_QWORD *)(v188 + 40);
      *(_DWORD *)(v193 + 80) = *(_DWORD *)(v188 + 168);
      v286 = *(_BYTE *)(v188 + 173);
      *(_DWORD *)(v193 + 112) = v285 | 0x121C;
      *(_BYTE *)(v193 + 104) = v286;
      v287 = *(unsigned __int8 *)(v188 + 172);
      if (v287 == 2)
      {
        v295 = sub_100106094(4u);
        if (!v295)
          sub_10194F830(v295, v296, v297);
        v291 = 4;
      }
      else if (v287 == 1)
      {
        v292 = sub_100106094(3u);
        if (!v292)
          sub_10194F830(v292, v293, v294);
        v291 = 3;
      }
      else if (*(_BYTE *)(v188 + 172))
      {
        v298 = sub_100106094(1u);
        if (!v298)
          sub_10194F830(v298, v299, v300);
        v291 = 1;
      }
      else
      {
        v288 = sub_100106094(2u);
        if (!v288)
          sub_10194F830(v288, v289, v290);
        v291 = 2;
      }
      v301 = *(_DWORD *)(v193 + 112);
      *(_DWORD *)(v193 + 112) = v301 | 0x400;
      *(_DWORD *)(v193 + 84) = v291;
      if (*(double *)(v188 + 48) >= 0.0)
      {
        v302 = *(float *)(v188 + 56);
        if (v302 > 0.0)
        {
          *(_DWORD *)(v193 + 112) = v301 | 0x420;
          v303 = *(_QWORD *)(v193 + 48);
          if (!v303)
            operator new();
          v304 = *(_QWORD *)(v188 + 48);
          *(_DWORD *)(v303 + 32) |= 3u;
          *(_QWORD *)(v303 + 8) = v304;
          *(double *)(v303 + 16) = v302;
        }
      }
      if ((*(_QWORD *)(v188 + 64) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v305 = *(double *)(v188 + 72);
        if (v305 > 0.0)
        {
          *(_DWORD *)(v193 + 112) |= 0x40u;
          v306 = *(_QWORD *)(v193 + 56);
          if (!v306)
            operator new();
          v307 = *(_QWORD *)(v188 + 64);
          *(_DWORD *)(v306 + 32) |= 3u;
          *(_QWORD *)(v306 + 8) = v307;
          *(double *)(v306 + 16) = v305;
        }
      }
      if ((*(_QWORD *)(v188 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v308 = *(double *)(v188 + 88);
        if (v308 > 0.0)
        {
          *(_DWORD *)(v193 + 112) |= 0x800u;
          v309 = *(_QWORD *)(v193 + 88);
          if (!v309)
            operator new();
          v310 = *(_QWORD *)(v188 + 80);
          *(_DWORD *)(v309 + 32) |= 3u;
          *(_QWORD *)(v309 + 8) = v310;
          *(double *)(v309 + 16) = v308;
        }
      }
      if ((*(_QWORD *)(v188 + 96) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v311 = *(double *)(v188 + 104);
        if (v311 > 0.0)
        {
          *(_DWORD *)(v193 + 112) |= 0x2000u;
          v312 = *(_QWORD *)(v193 + 96);
          if (!v312)
            operator new();
          v313 = *(_DWORD *)(v312 + 32);
          *(_QWORD *)(v312 + 8) = *(_QWORD *)(v188 + 96);
          *(double *)(v312 + 16) = v311;
          v314 = *(_BYTE *)(v188 + 112);
          *(_DWORD *)(v312 + 32) = v313 | 7;
          *(_BYTE *)(v312 + 24) = v314;
        }
      }
      v315 = *(_QWORD *)(v188 + 120);
      if (v315 != -1)
      {
        v316 = *(_QWORD *)(v188 + 128);
        if (v316 != -1 && v315 <= v316)
        {
          v317 = *(_QWORD *)(v188 + 136);
          if ((v317 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v318 = *(double *)(v188 + 144);
            if (v318 > 0.0)
            {
              *(_DWORD *)(v193 + 112) |= 0x80u;
              v319 = *(_QWORD *)(v193 + 64);
              if (!v319)
                operator new();
              v320 = *(_DWORD *)(v319 + 48);
              *(_QWORD *)(v319 + 16) = v316;
              *(_QWORD *)(v319 + 8) = *(_QWORD *)(v188 + 120);
              *(_QWORD *)(v319 + 24) = v317;
              *(double *)(v319 + 32) = v318;
              v321 = *(_BYTE *)(v188 + 152);
              *(_DWORD *)(v319 + 48) = v320 | 0x1F;
              *(_BYTE *)(v319 + 40) = v321;
            }
          }
        }
      }
      v322 = *(int **)(v188 + 160);
      if (v322)
      {
        *(_DWORD *)(v193 + 112) |= 0x100u;
        v323 = *(_QWORD *)(v193 + 72);
        if (!v323)
          operator new();
        v324 = *v322;
        v325 = *(_DWORD *)(v323 + 116);
        if ((*v322 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v325 |= 1u;
          *(_DWORD *)(v323 + 116) = v325;
          *(_DWORD *)(v323 + 8) = v324;
        }
        v326 = v322[1];
        *(_DWORD *)(v323 + 116) = v325 | 2;
        *(_DWORD *)(v323 + 12) = v326;
        if ((*((_QWORD *)v322 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*((_QWORD *)v322 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && *((_BYTE *)v322 + 24))
        {
          *(_DWORD *)(v323 + 116) = v325 | 6;
          v327 = *(_QWORD *)(v323 + 16);
          if (!v327)
            operator new();
          *(_DWORD *)(v327 + 32) |= 3u;
          *(_OWORD *)(v327 + 8) = *(_OWORD *)(v322 + 2);
          switch(*((_BYTE *)v322 + 24))
          {
            case 0:
              v328 = sub_1002BC6DC(1u);
              if (!v328)
                sub_10194F80C(v328, v329, v330);
              goto LABEL_317;
            case 1:
              v341 = sub_1002BC6DC(2u);
              if (!v341)
                sub_10194F80C(v341, v342, v343);
              v334 = 2;
              break;
            case 2:
              v335 = sub_1002BC6DC(3u);
              if (!v335)
                sub_10194F80C(v335, v336, v337);
              v334 = 3;
              break;
            case 3:
              v338 = sub_1002BC6DC(4u);
              if (!v338)
                sub_10194F80C(v338, v339, v340);
              v334 = 4;
              break;
            case 4:
              v331 = sub_1002BC6DC(5u);
              if (!v331)
                sub_10194F80C(v331, v332, v333);
              v334 = 5;
              break;
            default:
              v344 = sub_1002BC6DC(1u);
              if (!v344)
                sub_10194F80C(v344, v345, v346);
LABEL_317:
              v334 = 1;
              break;
          }
          *(_DWORD *)(v327 + 32) |= 4u;
          *(_DWORD *)(v327 + 24) = v334;
        }
        v347 = *(_QWORD *)(v188 + 160);
        v348 = *(_DWORD *)(v323 + 116);
        *(_DWORD *)(v323 + 48) = *(unsigned __int16 *)(v347 + 70);
        v349 = *(unsigned __int8 *)(v347 + 72);
        *(_DWORD *)(v323 + 116) = v348 | 0xC0;
        *(_DWORD *)(v323 + 52) = v349;
        v350 = sub_1013769CC((unsigned __int8 *)(v347 + 92));
        if (!sub_10001B780(v350))
          sub_10192A538();
        *(_DWORD *)(v323 + 116) |= 0x100u;
        *(_DWORD *)(v323 + 56) = v350;
        v351 = sub_1013769CC((unsigned __int8 *)(*(_QWORD *)(v188 + 160) + 93));
        if (!sub_10001B780(v351))
          sub_10192A510();
        v352 = *(_DWORD *)(v323 + 116);
        v353 = v352 | 0x200;
        *(_DWORD *)(v323 + 116) = v352 | 0x200;
        *(_DWORD *)(v323 + 60) = v351;
        v354 = *(_QWORD *)(v188 + 160);
        v355 = *(__int16 *)(v354 + 68);
        if (v355 != -1)
        {
          v353 = v352 | 0x600;
          *(_DWORD *)(v323 + 116) = v352 | 0x600;
          *(_DWORD *)(v323 + 64) = v355;
        }
        *(_DWORD *)(v323 + 116) = v353 | 8;
        v356 = *(_DWORD **)(v323 + 24);
        if (!v356)
          operator new();
        sub_101376B94(v356, (int *)(v354 + 32));
        *(_DWORD *)(v323 + 116) |= 0x10u;
        v357 = *(_DWORD **)(v323 + 32);
        if (!v357)
          operator new();
        sub_101376B94(v357, (int *)(*(_QWORD *)(v188 + 160) + 44));
        *(_DWORD *)(v323 + 116) |= 0x20u;
        v358 = *(_DWORD **)(v323 + 40);
        if (!v358)
          operator new();
        sub_101376B94(v358, (int *)(*(_QWORD *)(v188 + 160) + 56));
        v359 = *(_QWORD *)(v188 + 160);
        if (*(_BYTE *)(v359 + 80))
        {
          v360 = *(_DWORD *)(v359 + 76);
          *(_DWORD *)(v323 + 116) |= 0x800u;
          *(_DWORD *)(v323 + 68) = v360;
        }
        if (*(_BYTE *)(v359 + 88))
        {
          v361 = *(_DWORD *)(v359 + 84);
          *(_DWORD *)(v323 + 116) |= 0x1000u;
          *(_DWORD *)(v323 + 72) = v361;
        }
        if (*(_BYTE *)(v359 + 124))
        {
          v362 = *(_DWORD *)(v323 + 116);
          *(_DWORD *)(v323 + 76) = *(_DWORD *)(v359 + 120);
          v364 = *(const std::string::value_type **)(v359 + 96);
          v363 = *(_QWORD *)(v359 + 104);
          *(_DWORD *)(v323 + 116) = v362 | 0x6000;
          v365 = *(std::string **)(v323 + 80);
          if (v365 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          std::string::assign(v365, v364, v363 - (_QWORD)v364);
          v359 = *(_QWORD *)(v188 + 160);
        }
        v366 = *(_QWORD *)(v359 + 128);
        for (ii = *(_QWORD *)(v359 + 136); v366 != ii; v366 += 40)
        {
          v368 = *(_DWORD *)(v323 + 100);
          v369 = *(int *)(v323 + 96);
          if ((int)v369 >= v368)
          {
            if (v368 == *(_DWORD *)(v323 + 104))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v323 + 88), v368 + 1);
              v368 = *(_DWORD *)(v323 + 100);
            }
            *(_DWORD *)(v323 + 100) = v368 + 1;
            sub_1013849F4();
          }
          v370 = *(_QWORD *)(v323 + 88);
          *(_DWORD *)(v323 + 96) = v369 + 1;
          v371 = *(_QWORD *)(v370 + 8 * v369);
          *(_DWORD *)(v371 + 32) |= 1u;
          v372 = *(_QWORD *)(v371 + 8);
          if (!v372)
            operator new();
          v373 = *(_DWORD *)(v372 + 32);
          *(_QWORD *)(v372 + 8) = *(_QWORD *)v366;
          v374 = *(float *)(v366 + 8);
          *(_DWORD *)(v372 + 32) = v373 | 3;
          *(double *)(v372 + 16) = v374;
          *(_DWORD *)(v371 + 32) |= 2u;
          v375 = *(_QWORD *)(v371 + 16);
          if (!v375)
            operator new();
          *(_DWORD *)(v375 + 32) |= 3u;
          *(_OWORD *)(v375 + 8) = *(_OWORD *)(v366 + 16);
          v376 = *(_DWORD *)(v366 + 32);
          *(_DWORD *)(v371 + 32) |= 4u;
          *(_DWORD *)(v371 + 24) = v376;
        }
      }
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v25 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "pMeas,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      LOWORD(v380[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pMeas,Invalid pointer", v380, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLGnssMeasurementToProtobuf(const gnss::MeasurementData &, CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
}

void sub_101375C78()
{
  operator delete();
}

uint64_t sub_101375F7C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_101384858(a1);
  if ((_DWORD)result)
  {
    if (*(__int16 *)(a1 + 8) == -32768)
    {
      return 0;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
        LODWORD(v3) = *(__int16 *)(a1 + 24) != -32768;
      return (*(_BYTE *)(a1 + 10) != 2) ^ v3;
    }
  }
  return result;
}

BOOL sub_101375FD8(_QWORD *a1)
{
  _BOOL8 result;

  result = sub_101384858((uint64_t)a1);
  if (result)
    return a1[4]
        && (a1[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (a1[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (a1[7] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  return result;
}

BOOL sub_101376044(uint64_t a1)
{
  if (!*(_WORD *)a1 || *(unsigned __int16 *)(a1 + 2) - 1 >= 0x5B5)
  {
    if (!*(_QWORD *)(a1 + 8) || (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0;
    return (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (*(_QWORD *)(a1 + 8))
    return (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  return 0;
}

BOOL sub_1013760A4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_WORD *)a1)
  {
    if (!v1)
      return 0;
  }
  else if (!v1
         || (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    return 0;
  }
  if ((*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    return (*(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  return 0;
}

uint64_t sub_101376114(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;

  *(_DWORD *)(a2 + 24) |= 2u;
  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    operator new();
  v3 = *(_DWORD *)result;
  switch(*(_DWORD *)result)
  {
    case 0:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 0;
      break;
    case 1:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 1;
      v5 = *(unsigned __int8 *)(result + 4);
      *(_DWORD *)(v2 + 44) |= 1u;
      *(_DWORD *)(v2 + 16) = v5;
      break;
    case 2:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 2;
      *(_DWORD *)(v2 + 44) |= 2u;
      v6 = *(_QWORD *)(v2 + 8);
      if (!v6)
        operator new();
      v7 = *(char *)(result + 6);
      v8 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v8 | 1;
      *(_DWORD *)(v6 + 16) = v7;
      if (*(unsigned __int8 *)(result + 4) - 1 <= 0x17)
      {
        *(_DWORD *)(v6 + 24) = v8 | 3;
        v9 = *(_QWORD *)(v6 + 8);
        if (!v9)
          operator new();
        v10 = *(unsigned __int8 *)(result + 4);
        *(_DWORD *)(v9 + 20) |= 1u;
        *(_DWORD *)(v9 + 8) = v10;
        switch(*(_BYTE *)(result + 5))
        {
          case 1:
            v11 = v9;
            v12 = 2;
            break;
          case 2:
            v11 = v9;
            v12 = 3;
            break;
          case 3:
            v11 = v9;
            v12 = 4;
            break;
          default:
            v11 = v9;
            v12 = 1;
            break;
        }
        result = sub_1013848F4(v11, v12);
      }
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 4;
      v13 = *(unsigned __int8 *)(result + 4);
      *(_DWORD *)(v2 + 44) |= 4u;
      *(_DWORD *)(v2 + 20) = v13;
      break;
    case 8:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 8;
      v14 = *(unsigned __int8 *)(result + 4);
      *(_DWORD *)(v2 + 44) |= 8u;
      *(_DWORD *)(v2 + 24) = v14;
      break;
    default:
      if (v3 == 16)
      {
        *(_DWORD *)(a2 + 24) |= 1u;
        *(_DWORD *)(a2 + 16) = 16;
        v15 = *(unsigned __int8 *)(result + 4);
        *(_DWORD *)(v2 + 44) |= 0x10u;
        *(_DWORD *)(v2 + 28) = v15;
      }
      else if (v3 == 32)
      {
        *(_DWORD *)(a2 + 24) |= 1u;
        *(_DWORD *)(a2 + 16) = 64;
        v4 = *(unsigned __int8 *)(result + 4);
        *(_DWORD *)(v2 + 44) |= 0x40u;
        *(_DWORD *)(v2 + 36) = v4;
      }
      break;
  }
  return result;
}

void sub_1013763AC()
{
  operator delete();
}

uint64_t sub_101376400(unsigned __int8 *a1)
{
  unsigned int v1;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (v1 < 3)
    return v1 + 2;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TranslateSvHealth,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TranslateSvHealth,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::SvHealthIndication TranslateSvHealth(const gnss::SvHealthIndication &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 1;
}

uint64_t sub_1013765C8(unsigned __int8 *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  result = *a1;
  if (result >= 4)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "TranslateSvReferencePoint,unhandled type,%{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v9[0] = 67240192;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TranslateSvReferencePoint,unhandled type,%{public}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::SvReferencePoint TranslateSvReferencePoint(const gnss::SvReferencePoint &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101376790(unsigned __int8 *a1)
{
  unint64_t v1;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = (char)*a1;
  if (v1 < 0xB)
    return dword_101CA0054[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TranslateBand,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TranslateBand,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::Band TranslateBand(const gnss::Band &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 1;
}

BOOL sub_101376960(uint64_t a1)
{
  float v1;
  BOOL v2;
  BOOL v3;

  if (*(_QWORD *)a1 == -1 || *(_QWORD *)(a1 + 80) == 0x8000000000000000)
    return 0;
  v1 = *(float *)(a1 + 88);
  if (v1 >= -0.5)
  {
    v3 = v1 == 0.5;
    v2 = v1 >= 0.5;
  }
  else
  {
    v2 = 1;
    v3 = 0;
  }
  return (v3 || !v2)
      && *(float *)(a1 + 92) > 0.0
      && (*(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(float *)(a1 + 104) > 0.5;
}

uint64_t sub_1013769CC(unsigned __int8 *a1)
{
  unsigned int v1;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (v1 < 5)
    return v1 + 2;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TranslateDetectionMethod,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TranslateDetectionMethod,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MeasurementDetectionMethod TranslateDetectionMethod(const gnss::MeasurementDetectionMethod &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 1;
}

_DWORD *sub_101376B94(_DWORD *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = *a2;
  result[2] = *a2;
  v3 = result[6];
  v4 = v3 | 1;
  result[6] = v3 | 1;
  if ((v2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v6 = a2[1];
    v5 = a2[2];
    if ((v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      if ((v5 & 0x7FFFFFFFu) >= 0x7F800000 && (v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        result[6] = v3 | 5;
        result[4] = v5;
      }
    }
    else
    {
      if ((v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v4 = v3 | 5;
        result[6] = v3 | 5;
        result[4] = v5;
      }
      if ((v5 & 0x7FFFFFFFu) < 0x7F800000)
      {
        result[6] = v4 | 2;
        result[3] = v6;
      }
    }
  }
  return result;
}

void sub_101376C4C(float32x2_t *a1, float32x2_t *a2, uint64_t *a3)
{
  uint64_t v5;
  __int32 v6;
  float32_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2)
  {
    a2[4].i32[0] |= 1u;
    v5 = (uint64_t)a2[1];
    if (!v5)
      operator new();
    sub_100178094(a3, v5);
    v6 = a2[4].i32[0];
    a2[2] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(a1[1]), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL)));
    v7 = a1[2].f32[0] * 0.0174532925;
    a2[4].i32[0] = v6 | 0xE;
    a2[3].f32[0] = v7;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pSample,Invalid pointer", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLGyroSampleToProtobuf(const CLGyro::Sample &, CLP::LogEntry::PrivateData::GyroSample *const, const CLUtils::Timestamp &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_101376E80()
{
  operator delete();
}

void sub_101376EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  _WORD v24[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 100) |= 4u;
    v4 = *(_QWORD *)(a2 + 16);
    if (!v4)
      operator new();
    sub_1001765C8(a1, v4);
    *(_DWORD *)(a2 + 100) |= 8u;
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
      operator new();
    sub_100177190(a1 + 160, v5);
    v6 = *(_QWORD *)(a1 + 816);
    *(_DWORD *)(a2 + 100) |= 0x10u;
    v7 = *(_QWORD *)(a2 + 40);
    if (!v7)
      operator new();
    sub_100176564(v6, v7);
    v8 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 824);
    v9 = *(_QWORD *)(a1 + 832);
    *(_DWORD *)(a2 + 100) = v8 | 0x60;
    *(_QWORD *)(a2 + 48) = v9;
    v10 = sub_10017639C((unsigned int *)(a1 + 840));
    if (!sub_10008D1F0(v10))
      sub_1018FA798();
    v11 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 72) = v10;
    *(_DWORD *)(a2 + 100) = v11 | 0x180;
    v12 = *(_QWORD *)(a2 + 56);
    if (!v12)
      operator new();
    *(_DWORD *)(v12 + 44) |= 1u;
    *(_DWORD *)(a2 + 100) |= 0x100u;
    *(_DWORD *)(v12 + 44) |= 2u;
    *(int8x16_t *)(v12 + 8) = vextq_s8(*(int8x16_t *)(a1 + 848), *(int8x16_t *)(a1 + 848), 8uLL);
    *(_DWORD *)(a2 + 100) |= 0x100u;
    *(_DWORD *)(v12 + 44) |= 4u;
    *(_DWORD *)(a2 + 100) |= 0x100u;
    *(_DWORD *)(v12 + 44) |= 8u;
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(a1 + 864);
    *(_DWORD *)(a2 + 100) |= 0x400u;
    v13 = *(_QWORD *)(a2 + 80);
    if (!v13)
      operator new();
    v14 = *(_QWORD *)(a1 + 896);
    *(_DWORD *)(v13 + 28) |= 1u;
    *(_QWORD *)(v13 + 8) = v14;
    v15 = sub_1001761D4((unsigned int *)(a1 + 928));
    if (!sub_10008D1F0(v15))
      sub_1018FA770();
    v16 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 76) = v15;
    *(_DWORD *)(a2 + 100) = v16 | 0x1800;
    v17 = *(_QWORD *)(a2 + 88);
    if (!v17)
      operator new();
    v18 = *(_QWORD *)(a1 + 944);
    *(_DWORD *)(v17 + 36) |= 1u;
    *(_QWORD *)(v17 + 8) = v18;
    *(_DWORD *)(a2 + 100) |= 0x1000u;
    v19 = *(_QWORD *)(a1 + 936);
    *(_DWORD *)(v17 + 36) |= 2u;
    *(_QWORD *)(v17 + 16) = v19;
    *(_DWORD *)(a2 + 100) |= 0x1000u;
    v20 = *(_QWORD *)(a1 + 952);
    *(_DWORD *)(v17 + 36) |= 4u;
    *(_QWORD *)(v17 + 24) = v20;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v21 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "pLocation,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v24[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pLocation,Invalid pointer", v24, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLLocationProviderToProtobuf(const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::PrivateData::Location *)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
}

void sub_1013772EC()
{
  operator delete();
}

void sub_101377384(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 32) |= 1u;
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      operator new();
    sub_100178094(a3, v5);
    v6 = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a2 + 32) = v6 | 0xE;
    *(_DWORD *)(a2 + 24) = v7;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pSample,Invalid pointer", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLMagnetometerSampleToProtobuf(const CLMagnetometer::Sample &, CLP::LogEntry::PrivateData::MagSample *, const CLUtils::Timestamp &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_101377584()
{
  operator delete();
}

__n128 sub_1013775B0(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  if (a2)
  {
    if (sub_1002199F0(a1, *a4, 6.0))
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
      {
        v8 = *a3;
        v9 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 134218240;
        v40 = v8;
        v41 = 2048;
        v42 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%.2lf,RouteHintsInPositionProto,Received stale data,routeHintTime,%.2lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v11 = *a3;
        v12 = *(_QWORD *)(a1 + 32);
        v35 = 134218240;
        v36 = v11;
        v37 = 2048;
        v38 = v12;
        LODWORD(v34) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "%.2lf,RouteHintsInPositionProto,Received stale data,routeHintTime,%.2lf", COERCE_DOUBLE(&v35), v34);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v13);
LABEL_19:
        if (v14 != buf)
          free(v14);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 60) |= 1u;
      v17 = *(_QWORD *)(a2 + 8);
      if (!v17)
        operator new();
      if ((sub_10137103C((double *)(a1 + 32), v17, 0) & 1) == 0)
      {
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v18 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: Failed to convert Map matching route hint event receipt CF time to protobuf", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          LOWORD(v35) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert Map matching route hint event receipt CF time to protobuf", &v35, 2);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 0, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
      }
      *(_DWORD *)(a2 + 60) |= 2u;
      v19 = *(_QWORD *)(a2 + 16);
      if (!v19)
        operator new();
      if ((sub_101377D04((double *)(a1 + 40), v19, 0) & 1) == 0)
      {
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v20 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Error: Failed to convert Map matching route hint applicable mach continuous time to protobuf", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          LOWORD(v35) = 0;
          LODWORD(v34) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert Map matching route hint applicable mach continuous time to protobuf", &v35, *(_QWORD *)&v34);
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 0, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      }
      v21 = sub_101378374((int *)a1);
      if (!sub_10001B780(v21))
        sub_1018FAAE0();
      *(_DWORD *)(a2 + 60) |= 4u;
      *(_DWORD *)(a2 + 24) = v21;
      v22 = sub_101378374((int *)(a1 + 4));
      if (!sub_10001B780(v22))
        sub_1018FAAB8();
      *(_DWORD *)(a2 + 60) |= 8u;
      *(_DWORD *)(a2 + 28) = v22;
      v23 = *(_QWORD *)(a1 + 8);
      for (i = *(_QWORD *)(a1 + 16); v23 != i; v23 += 40)
      {
        v25 = *(_DWORD *)(a2 + 44);
        v26 = *(int *)(a2 + 40);
        if ((int)v26 >= v25)
        {
          if (v25 == *(_DWORD *)(a2 + 48))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 32), v25 + 1);
            v25 = *(_DWORD *)(a2 + 44);
          }
          *(_DWORD *)(a2 + 44) = v25 + 1;
          sub_101384A54();
        }
        v27 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = v26 + 1;
        v28 = *(_QWORD *)(v27 + 8 * v26);
        v29 = *(_DWORD *)(v28 + 52);
        *(_QWORD *)(v28 + 8) = *(_QWORD *)v23;
        *(_OWORD *)(v28 + 16) = *(_OWORD *)(v23 + 8);
        *(_DWORD *)(v28 + 52) = v29 | 0x1F;
        result = *(__n128 *)(v23 + 24);
        *(__n128 *)(v28 + 32) = result;
      }
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v15 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "RouteHintsInPositionProto,pRouteHintMsg,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "RouteHintsInPositionProto,pRouteHintMsg,Invalid pointer", &v35, 2);
      v14 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v16);
      goto LABEL_19;
    }
  }
  return result;
}

void sub_101377CD4()
{
  operator delete();
}

uint64_t sub_101377D04(double *a1, uint64_t a2, char a3)
{
  double v4;
  NSObject *v6;
  double v7;
  double v8;
  char *v9;
  NSObject *v10;
  _BOOL8 v11;
  unint64_t v14;
  NSObject *v15;
  double v16;
  unint64_t v17;
  NSObject *v18;
  double v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  double v24;
  uint8_t buf[4];
  double v26;

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v10 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "pTimeStamp,Invalid pointer", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    LOWORD(v23) = 0;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pTimeStamp,Invalid pointer", &v23, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertLiveMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v9);
    goto LABEL_45;
  }
  v4 = *a1;
  if (*a1 < 0.0 || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v7 = *a1;
      *(_DWORD *)buf = 134349056;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Mach continuous time cannot be negative or infinite: %{public}lf", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = *a1;
    v23 = 134349056;
    v24 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Mach continuous time cannot be negative or infinite: %{public}lf", &v23, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertLiveMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v9);
    goto LABEL_45;
  }
  *(_DWORD *)(a2 + 36) |= 4u;
  *(double *)(a2 + 24) = v4;
  if ((a3 & 1) != 0)
    return 1;
  if (!qword_10230E5A0)
    operator new();
  *(double *)&v22 = -1.0;
  v11 = sub_100AD25A0(qword_10230E5A0, a1, (double *)&v22);
  if (v11)
  {
    v14 = v22;
    *(_DWORD *)(a2 + 36) |= 2u;
    *(_QWORD *)(a2 + 16) = v14;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v15 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v16 = *a1;
      *(_DWORD *)buf = 134217984;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Error: mach continuous to mach absolute time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v19 = *a1;
      v23 = 134217984;
      v24 = v19;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: mach continuous to mach absolute time conversion failed: %lf", COERCE_DOUBLE(&v23));
      sub_100512490("Generic", 1, 0, 2, "BOOL ConvertLiveMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
  v21 = 0xBFF0000000000000;
  if (sub_10010EA68(qword_10230E5A0, (double *)&v22, (double *)&v21))
  {
    v17 = v21;
    *(_DWORD *)(a2 + 36) |= 1u;
    *(_QWORD *)(a2 + 8) = v17;
    return v11;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v18 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v26 = *(double *)&v22;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Error: Mach absolute to CF absolute time conversion failed: %lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v23 = 134217984;
    v24 = *(double *)&v22;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: Mach absolute to CF absolute time conversion failed: %lf", COERCE_DOUBLE(&v23));
    sub_100512490("Generic", 1, 0, 2, "BOOL ConvertLiveMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::PrivateData::TimeStamp *, BOOL)", "%s\n", v9);
LABEL_45:
    if (v9 != (char *)buf)
      free(v9);
  }
  return 0;
}

uint64_t sub_101378374(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v1 = *a1;
  if (v1 < 7)
    return dword_101CA0080[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled maps route type,%{public}d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = *a1;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled maps route type,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MapMatchingRouteHint_RoutingType ConvertCLMapsRouteHintTypeToProtobuf(const CLClientLocationRouteHintType &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

void sub_10137854C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  _WORD v31[8];
  uint8_t buf[1640];

  if (a2)
  {
    v6 = sub_101378BC8((unsigned int *)a1);
    if ((sub_10044254C(v6) & 1) == 0)
      sub_1018FA928();
    *(_DWORD *)(a2 + 92) |= 1u;
    *(_DWORD *)(a2 + 8) = v6;
    v7 = sub_101379090((int *)(a1 + 4));
    if (!sub_10002A324(v7))
      sub_1018FA900();
    *(_DWORD *)(a2 + 92) |= 2u;
    *(_DWORD *)(a2 + 12) = v7;
    v8 = sub_101379260((int *)(a1 + 12));
    if (!sub_10008D1F0(v8))
      sub_1018FA8D8();
    *(_DWORD *)(a2 + 92) |= 4u;
    *(_DWORD *)(a2 + 16) = v8;
    v9 = sub_101379090((int *)(a1 + 4));
    if (!sub_10002A324(v9))
      sub_1018FA8B0();
    v10 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 20) = v9;
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 32);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 36);
    v11 = *(_BYTE *)(a1 + 48);
    *(_DWORD *)(a2 + 92) = v10 | 0xB8;
    *(_BYTE *)(a2 + 29) = v11;
    v12 = sub_10137943C((int *)(a1 + 52));
    if (!sub_10002A324(v12))
      sub_1018FA888();
    *(_DWORD *)(a2 + 92) |= 0x100u;
    *(_DWORD *)(a2 + 48) = v12;
    v13 = sub_10137960C((int *)(a1 + 100));
    if (!sub_1002BC6DC(v13))
      sub_1018FA810();
    v14 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 76) = v13;
    v15 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 92) = v14 | 0x8200;
    *(_QWORD *)(a2 + 40) = v15;
    v16 = sub_101378BC8((unsigned int *)(a1 + 88));
    if ((sub_10044254C(v16) & 1) == 0)
      sub_1018FA860();
    *(_DWORD *)(a2 + 92) |= 0x800u;
    *(_DWORD *)(a2 + 52) = v16;
    v17 = sub_101379090((int *)(a1 + 92));
    if (!sub_10002A324(v17))
      sub_1018FA838();
    v18 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 72) = v17;
    *(_DWORD *)(a2 + 92) = v18 | 0x5000;
    v19 = *(_QWORD *)(a2 + 80);
    if (!v19)
      operator new();
    if ((sub_10137103C((double *)(a1 + 80), v19, 1) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v20 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLMotionActivity start CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v31[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLMotionActivity start CF time to protobuf", v31, 2);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLMotionActivityToProtobuf(const CLMotionActivity &, CLP::LogEntry::PrivateData::MotionActivity *, BOOL)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    }
    if ((a3 & 1) == 0)
    {
      *(_DWORD *)(a2 + 92) |= 0x2000u;
      v21 = *(_QWORD *)(a2 + 64);
      if (!v21)
        operator new();
      if ((sub_10136EBE4((double *)(a1 + 40), v21, 1) & 1) == 0)
      {
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v22 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLMotionActivity mach timestamp to protobuf", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          v31[0] = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLMotionActivity mach timestamp to protobuf", v31, v30);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 0, "void ConvertCLMotionActivityToProtobuf(const CLMotionActivity &, CLP::LogEntry::PrivateData::MotionActivity *, BOOL)", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
      }
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v23 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "pActivity,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v31[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pActivity,Invalid pointer", v31, 2);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLMotionActivityToProtobuf(const CLMotionActivity &, CLP::LogEntry::PrivateData::MotionActivity *, BOOL)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
}

void sub_101378B90()
{
  operator delete();
}

uint64_t sub_101378BC8(unsigned int *a1)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  int v6;
  NSObject *v7;
  int v8;
  _BOOL4 v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  result = *a1;
  if ((int)result <= 11804)
  {
    if ((int)result > 2009)
    {
      v5 = (result - 2010) > 0x3D || ((1 << (result + 38)) & 0x2488004000005401) == 0;
      if (!v5
        || (result - 2101) <= 0x31 && ((1 << (result - 53)) & 0x2000000000011) != 0
        || (result - 3015) < 2)
      {
        return result;
      }
    }
    else
    {
      if (result < 0xC)
        return result;
      if ((result - 41) <= 0x3B && ((1 << (result - 41)) & 0x800000003F08801) != 0)
        return result;
    }
    goto LABEL_71;
  }
  if ((int)result > 15651)
  {
    if ((int)result > 18199)
    {
      if ((int)result <= 19149)
      {
        if ((int)result > 19029)
        {
          if ((_DWORD)result == 19030)
            return result;
          v6 = 19090;
        }
        else
        {
          if ((_DWORD)result == 18200)
            return result;
          v6 = 18240;
        }
      }
      else
      {
        if ((int)result > 515620)
        {
          if ((_DWORD)result == 515621 || (_DWORD)result == 515652)
            return result;
          if ((_DWORD)result == 519150)
            return 19160;
          goto LABEL_71;
        }
        if ((_DWORD)result == 19150)
          return result;
        v6 = 90603;
      }
    }
    else
    {
      if ((int)result <= 15732)
      {
        v4 = (result - 15652);
        if (v4 <= 0x3B)
        {
          if (((1 << (result - 36)) & 0x840101) != 0)
            return result;
          if (v4 == 59)
            return 15710;
        }
        goto LABEL_71;
      }
      if ((int)result > 18049)
      {
        if ((_DWORD)result == 18050)
          return 18070;
        if ((_DWORD)result == 18100)
          return 18225;
        goto LABEL_71;
      }
      if ((_DWORD)result == 15733)
        return result;
      v6 = 17150;
    }
LABEL_68:
    if ((_DWORD)result == v6)
      return result;
    goto LABEL_71;
  }
  if ((int)result > 15254)
  {
    if ((int)result <= 15459)
    {
      if ((result - 15330) <= 0x1E && ((1 << (result + 30)) & 0x40100001) != 0)
        return result;
      v6 = 15255;
    }
    else
    {
      if ((int)result <= 15591)
      {
        if ((_DWORD)result == 15460)
          return result;
        if ((_DWORD)result == 15560)
          return 15562;
        goto LABEL_71;
      }
      if ((_DWORD)result == 15592 || (_DWORD)result == 15610)
        return result;
      v6 = 15620;
    }
    goto LABEL_68;
  }
  if ((int)result <= 15099)
  {
    if ((int)result > 15029)
    {
      if ((_DWORD)result == 15030)
        return result;
      v6 = 15055;
    }
    else
    {
      if ((_DWORD)result == 11805)
        return result;
      v6 = 12150;
    }
    goto LABEL_68;
  }
  if ((result - 15100) <= 0x32 && ((1 << (result + 4)) & 0x4000000000401) != 0
    || (_DWORD)result == 15230)
  {
    return result;
  }
  if ((_DWORD)result == 15250)
    return 15240;
LABEL_71:
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v7 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v8 = *a1;
    *(_DWORD *)buf = 67240192;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Received unhandled motion activity type: %{public}d", buf, 8u);
  }
  v9 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v10 = *a1;
    v13[0] = 67240192;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled motion activity type: %{public}d", v13, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DominantMotionModeType ConvertCLMotionActivityTypeToProtobuf(const CLMotionActivity::Type &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
    return 0;
  }
  return result;
}

uint64_t sub_101379090(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a1 < 3)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled confidence type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled confidence type: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MotionActivity_ConfidenceType ConvertCLMotionActivityConfidenceTypeToProtobuf(const CLMotionActivity::Confidence &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_101379260(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!*a1)
    return 1;
  if (*a1 == 1)
    return 2;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled mounted state type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled mounted state type: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MotionActivity_MountedStateType ConvertCLMotionActivityMountedStateTypeToProtobuf(const CLMotionActivity::MountedState &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10137943C(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a1 < 3)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled vehicle exit state type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled vehicle exit state type: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MotionActivity_VehicleExitStateType ConvertCLMotionActivityVehicleExitStateTypeToProtobuf(const CLMotionActivity::VehicleExitState &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10137960C(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a1 < 5)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled vehicle confidence type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled vehicle confidence type: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MotionActivity_VehicularConfidenceType ConvertCLMotionActivityVehicularConfidenceTypeToProtobuf(const CLMotionActivity::VehicularConfidence &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_1013797DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 28) |= 1u;
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      operator new();
    sub_100178094(a3, v5);
    *(_DWORD *)(a2 + 28) |= 6u;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 8);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pSample,Invalid pointer", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLPressureSampleToProtobuf(const CLPressure::Sample &, CLP::LogEntry::PrivateData::BaroSample *, const CLUtils::Timestamp &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1013799D4()
{
  operator delete();
}

void sub_101379A00(int *a1, _DWORD *a2)
{
  int v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  double v14;
  uint8_t *v15;
  _DWORD v16[4];
  uint8_t buf[4];
  int v18;

  v4 = a1[1];
  if (v4 == 2)
  {
    v9 = sub_10136FBF8(a1);
    if (!sub_10044281C(v9))
      sub_1018FABF8();
    a2[8] |= 4u;
    a2[5] = v9;
  }
  else if (v4 == 1)
  {
    v10 = sub_10136FBF8(a1);
    if (!sub_10044281C(v10))
      sub_1018FAC20();
    a2[8] |= 2u;
    a2[4] = v10;
  }
  else if (v4)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v11 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v12 = a1[1];
      *(_DWORD *)buf = 67240192;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Received unhandled signal environment fidelity level: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v13 = a1[1];
      v16[0] = 67240192;
      v16[1] = v13;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled signal environment fidelity level: %{public}d", v16, 8);
      v8 = v15;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLSignalEnvironmentToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &, CLP::LogEntry::PrivateData::SignalEnvironment *)", "%s\n", v14);
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received signal environment level unavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      LOWORD(v16[0]) = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "Received signal environment level unavailable", v16, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 2, "void ConvertCLSignalEnvironmentToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &, CLP::LogEntry::PrivateData::SignalEnvironment *)", "%s\n", v6);
LABEL_27:
      if (v8 != buf)
        free(v8);
    }
  }
}

BOOL sub_101379D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char *CStringPtr;
  std::string *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  _BOOL8 result;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  const char *v39;
  std::string *v40;
  const char *v41;
  std::string *v42;
  const char *v43;
  std::string *v44;
  uint64_t v45;
  _WORD v46[8];
  std::string buf[68];

  if (*(double *)a1 > 0.0)
  {
    *(_DWORD *)(a2 + 148) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    if ((sub_10136EBE4((double *)a1, v4, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLStepCountEntry mach timestamp to protobuf", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v46[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLStepCountEntry mach timestamp to protobuf", v46, 2);
        v40 = (std::string *)v39;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLStepCountEntryToProtobuf(const CLStepCountEntry &, CLP::LogEntry::PrivateData::StepCountEntry *)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
  }
  if (*(double *)(a1 + 8) > 0.0)
  {
    *(_DWORD *)(a2 + 148) |= 2u;
    v6 = *(_QWORD *)(a2 + 16);
    if (!v6)
      operator new();
    if ((sub_10137103C((double *)(a1 + 8), v6, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLStepCountEntry start CF time to protobuf", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v46[0] = 0;
        LODWORD(v45) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLStepCountEntry start CF time to protobuf", v46, v45);
        v42 = (std::string *)v41;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLStepCountEntryToProtobuf(const CLStepCountEntry &, CLP::LogEntry::PrivateData::StepCountEntry *)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
  }
  if (*(double *)(a1 + 16) > 0.0)
  {
    *(_DWORD *)(a2 + 148) |= 4u;
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
      operator new();
    if ((sub_10137103C((double *)(a1 + 16), v8, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v9 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLStepCountEntry first step CF time to protobuf", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v46[0] = 0;
        LODWORD(v45) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLStepCountEntry first step CF time to protobuf", v46, v45);
        v44 = (std::string *)v43;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLStepCountEntryToProtobuf(const CLStepCountEntry &, CLP::LogEntry::PrivateData::StepCountEntry *)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    }
  }
  v10 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 148) = v10 | 0x38;
  *(_QWORD *)(a2 + 48) = v11;
  v12 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 148) = v10 | 0x78;
  *(_DWORD *)(a2 + 44) = v12;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 148) = v10 | 0x7F8;
  *(_QWORD *)(a2 + 80) = v13;
  v14 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 148) = v10 | 0xFF8;
  *(_DWORD *)(a2 + 76) = v14;
  CStringPtr = (char *)CFStringGetCStringPtr(*(CFStringRef *)(a1 + 104), 0x8000100u);
  if (CStringPtr)
  {
    sub_1015A2E04(buf, CStringPtr);
    *(_DWORD *)(a2 + 148) |= 0x1000u;
    v16 = *(std::string **)(a2 + 88);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v16, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  v17 = *(_DWORD *)(a2 + 148);
  *(_WORD *)(a2 + 96) = *(_WORD *)(a1 + 112);
  *(_DWORD *)(a2 + 148) = v17 | 0xE000;
  v18 = *(_QWORD *)(a2 + 104);
  if (!v18)
    operator new();
  v19 = *(_DWORD *)(v18 + 36);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(a1 + 120);
  v20 = *(_QWORD *)(a1 + 136);
  *(_DWORD *)(v18 + 36) = v19 | 7;
  *(_QWORD *)(v18 + 24) = v20;
  v21 = *(_DWORD *)(a1 + 144);
  v22 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = v22 | 0x10000;
  *(_DWORD *)(a2 + 100) = v21;
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 148);
  v23 = *(unsigned __int8 *)(a1 + 152);
  *(_DWORD *)(a2 + 148) = v22 | 0x70000;
  *(_DWORD *)(a2 + 116) = v23;
  v24 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a2 + 148) = v22 | 0xF0000;
  *(_DWORD *)(a2 + 120) = v24;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 160);
  v25 = *(unsigned __int8 *)(a1 + 165);
  *(_DWORD *)(a2 + 148) = v22 | 0x3F0000;
  *(_DWORD *)(a2 + 128) = v25;
  v26 = sub_10137A56C((unsigned __int8 *)(a1 + 166));
  result = sub_1002BC6DC(v26);
  if (!result)
    sub_1018FAC98();
  v28 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 132) = v26;
  *(_DWORD *)(a2 + 148) = v28 | 0xC00000;
  v29 = *(_QWORD *)(a2 + 136);
  if (!v29)
    operator new();
  v30 = *(_BYTE *)(a1 + 164) & 1;
  v31 = *(_DWORD *)(v29 + 20);
  *(_DWORD *)(v29 + 20) = v31 | 1;
  *(_BYTE *)(v29 + 8) = v30;
  v32 = (*(_BYTE *)(a1 + 164) & 2) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 3;
  *(_BYTE *)(v29 + 9) = v32;
  v33 = (*(_BYTE *)(a1 + 164) & 4) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 7;
  *(_BYTE *)(v29 + 10) = v33;
  v34 = (*(_BYTE *)(a1 + 164) & 8) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0xF;
  *(_BYTE *)(v29 + 11) = v34;
  v35 = (*(_BYTE *)(a1 + 164) & 0x10) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0x1F;
  *(_BYTE *)(v29 + 12) = v35;
  v36 = (*(_BYTE *)(a1 + 164) & 0x20) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0x3F;
  *(_BYTE *)(v29 + 13) = v36;
  v37 = (*(_BYTE *)(a1 + 164) & 0x40) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0x7F;
  *(_BYTE *)(v29 + 14) = v37;
  v38 = *(unsigned __int8 *)(a1 + 164) >> 7;
  *(_DWORD *)(v29 + 20) = v31 | 0xFF;
  *(_BYTE *)(v29 + 15) = v38;
  return result;
}

void sub_10137A508(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete();
}

uint64_t sub_10137A56C(unsigned __int8 *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  result = *a1;
  if (result >= 6)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67109120;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled step count distance source type: %u", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v9[0] = 67109120;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled step count distance source type: %u", v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::StepCountEntry_DistanceSourceType ConvertCLStepCountDistanceSourceTypeToProtobuf(const uint8_t &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

BOOL sub_10137A734(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "pProtoTimestamp is nullptr.", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v6)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v13[0] = 0;
    v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pProtoTimestamp is nullptr.", v13, 2);
    v9 = v8;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::Raven::RavenPlatformInfo::TimeStamp *)", "%s\n", v7);
LABEL_21:
    if (v9 != buf)
      free(v9);
    return 0;
  }
  if (*((_BYTE *)a1 + 24))
  {
    v2 = *(_DWORD *)(a2 + 36);
    *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    v3 = *a1;
    *(_DWORD *)(a2 + 36) = v2 | 7;
    *(_QWORD *)(a2 + 24) = v3;
    return 1;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v10 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Error: Raven Platform Info timestamp is not valid.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v13[0] = 0;
    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: Raven Platform Info timestamp is not valid.", v13, 2);
    v9 = v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::Raven::RavenPlatformInfo::TimeStamp *)", "%s\n", v11);
    goto LABEL_21;
  }
  return result;
}

BOOL sub_10137AA14(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "pProtoTimestamp is nullptr.", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v6)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v13[0] = 0;
    v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pProtoTimestamp is nullptr.", v13, 2);
    v9 = v8;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v7);
LABEL_21:
    if (v9 != buf)
      free(v9);
    return 0;
  }
  if (*((_BYTE *)a1 + 24))
  {
    v2 = *(_DWORD *)(a2 + 36);
    *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    v3 = *a1;
    *(_DWORD *)(a2 + 36) = v2 | 7;
    *(_QWORD *)(a2 + 24) = v3;
    return 1;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v10 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Error: TrackRun Platform Info timestamp is not valid.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v13[0] = 0;
    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: TrackRun Platform Info timestamp is not valid.", v13, 2);
    v9 = v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v11);
    goto LABEL_21;
  }
  return result;
}

void sub_10137ACF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 32) |= 4u;
    v3 = *(_QWORD *)(a2 + 16);
    if (!v3)
      operator new();
    *(_DWORD *)(v3 + 48) |= 1u;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      operator new();
    if ((sub_10137103C((double *)(a1 + 8), v4, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert Tunnel bridge data applicable CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert Tunnel bridge data applicable CF time to protobuf", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLTunnelBridgeDataToProtobuf(const CLGpsAssistant_Type::TunnelBridgeAssistance &, CLP::LogEntry::PrivateData::TunnelBridgeNotification *)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
    v6 = *(_DWORD *)(v3 + 48);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v3 + 48) = v6 | 0xFE;
    *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 40);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "pTbn,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pTbn,Invalid pointer", v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLTunnelBridgeDataToProtobuf(const CLGpsAssistant_Type::TunnelBridgeAssistance &, CLP::LogEntry::PrivateData::TunnelBridgeNotification *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10137B080()
{
  operator delete();
}

void sub_10137B0C8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  char v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 32) |= 4u;
    v5 = *(_QWORD *)(a2 + 16);
    if (!v5)
      operator new();
    *(_DWORD *)(v5 + 124) |= 1u;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      operator new();
    if ((sub_10137103C((double *)a1, v6, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert Tunnel end point data applicable CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v17[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert Tunnel end point data applicable CF time to protobuf", v17, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLTunnelEndPointDataToProtobuf(const CLGpsAssistant_Type::TunnelEndPositionAssistance &, double, CLP::LogEntry::PrivateData::TunnelEndPoint *)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
    v8 = *(_DWORD *)(v5 + 124);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a1 + 24);
    *(double *)(v5 + 40) = *(double *)(a1 + 48) + a3;
    *(_QWORD *)(v5 + 48) = *(_QWORD *)(a1 + 56);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 64);
    v9 = *(_BYTE *)(a1 + 72);
    *(_DWORD *)(v5 + 124) = v8 | 0x7BE;
    *(_BYTE *)(v5 + 76) = v9;
    v10 = sub_1001769DC((unsigned int *)(a1 + 76));
    if (!sub_10008D1F0(v10))
      sub_1018FAA90();
    v11 = *(_DWORD *)(v5 + 124);
    *(_DWORD *)(v5 + 72) = v10;
    *(_OWORD *)(v5 + 88) = *(_OWORD *)(a1 + 88);
    *(_DWORD *)(v5 + 124) = v11 | 0x7840;
    *(_OWORD *)(v5 + 104) = *(_OWORD *)(a1 + 104);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v12 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "TunnelEndPoint protobuf message pointer is invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TunnelEndPoint protobuf message pointer is invalid", v17, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLTunnelEndPointDataToProtobuf(const CLGpsAssistant_Type::TunnelEndPositionAssistance &, double, CLP::LogEntry::PrivateData::TunnelEndPoint *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_10137B4C8()
{
  operator delete();
}

void sub_10137B510(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint8_t *v44;
  _WORD v45[8];
  uint8_t buf[8];

  if (a2)
  {
    v4 = *a1;
    if (*a1 == 2)
    {
      v5 = 3;
      v15 = sub_10002A324(3u);
      if (!v15)
        sub_10194F908(v15, v16, v17);
    }
    else if (v4 == 1)
    {
      v5 = 2;
      v12 = sub_10002A324(2u);
      if (!v12)
        sub_10194F908(v12, v13, v14);
    }
    else
    {
      if (v4)
        goto LABEL_20;
      v5 = 1;
      v6 = sub_10002A324(1u);
      if (!v6)
        sub_10194F908(v6, v7, v8);
    }
    *(_DWORD *)(a2 + 36) |= 2u;
    *(_DWORD *)(a2 + 16) = v5;
LABEL_20:
    v18 = a1[1];
    if (v18 == 2)
    {
      v19 = 3;
      v26 = sub_10002A324(3u);
      if (!v26)
        sub_10194F8E4(v26, v27, v28);
    }
    else if (v18 == 1)
    {
      v19 = 2;
      v23 = sub_10002A324(2u);
      if (!v23)
        sub_10194F8E4(v23, v24, v25);
    }
    else
    {
      if (v18)
        goto LABEL_29;
      v19 = 1;
      v20 = sub_10002A324(1u);
      if (!v20)
        sub_10194F8E4(v20, v21, v22);
    }
    *(_DWORD *)(a2 + 36) |= 4u;
    *(_DWORD *)(a2 + 20) = v19;
LABEL_29:
    v29 = a1[2];
    if (v29)
    {
      if (v29 == 1)
      {
        v30 = 2;
        v34 = sub_10002A324(2u);
        if (!v34)
          sub_10194F8C0(v34, v35, v36);
      }
      else
      {
        if (v29 != 2)
        {
          v40 = *(_DWORD *)(a2 + 36);
          goto LABEL_39;
        }
        v30 = 3;
        v31 = sub_10002A324(3u);
        if (!v31)
          sub_10194F8C0(v31, v32, v33);
      }
    }
    else
    {
      v30 = 1;
      v37 = sub_10002A324(1u);
      if (!v37)
        sub_10194F8C0(v37, v38, v39);
    }
    v40 = *(_DWORD *)(a2 + 36) | 8;
    *(_DWORD *)(a2 + 36) = v40;
    *(_DWORD *)(a2 + 24) = v30;
LABEL_39:
    *(_BYTE *)(a2 + 28) = *((_BYTE *)a1 + 24);
    *(_WORD *)(a2 + 29) = *(_WORD *)((char *)a1 + 25);
    *(_DWORD *)(a2 + 36) = v40 | 0x71;
    v41 = *(_QWORD *)(a2 + 8);
    if (!v41)
      operator new();
    *(double *)buf = (double)*((unint64_t *)a1 + 2);
    if ((sub_10137103C((double *)buf, v41, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v42 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Error: Failed to convert Wrist state applicable CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v45[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert Wrist state applicable CF time to protobuf", v45, 2);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 0, "void ConvertWristStateToProtobuf(const CLWatchOrientationSettingsNotifier_Type::WristState &, CLP::LogEntry::PrivateData::WristState *)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
    }
    return;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v9 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "WristState protobuf message pointer is invalid", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v45[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "WristState protobuf message pointer is invalid", v45, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void ConvertWristStateToProtobuf(const CLWatchOrientationSettingsNotifier_Type::WristState &, CLP::LogEntry::PrivateData::WristState *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_10137B9A8()
{
  operator delete();
}

std::string *sub_10137B9D4(void *a1, uint64_t a2)
{
  const std::string::value_type *v4;
  std::string *v5;
  id v6;
  uint8_t *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  std::string *result;
  const std::string::value_type *v12;
  std::string *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint8_t buf[4];
  int v20;

  if (objc_msgSend(a1, "preferredName"))
  {
    v4 = (const std::string::value_type *)objc_msgSend(objc_msgSend(a1, "preferredName"), "UTF8String");
    *(_DWORD *)(a2 + 36) |= 4u;
    v5 = *(std::string **)(a2 + 16);
    if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::assign(v5, v4);
  }
  v6 = objc_msgSend(a1, "userType");
  LODWORD(v7) = (_DWORD)v6;
  if ((unint64_t)v6 >= 5)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v20 = (int)v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ConvertCLPlaceInferenceUserSpecificPlaceTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v17 = 67240192;
      v18 = (int)v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLPlaceInferenceUserSpecificPlaceTypeToProtobuf,unhandled type,%{public}d", &v17, 8);
      v7 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::PlaceInference::UserSpecificPlaceType ConvertCLPlaceInferenceUserSpecificPlaceTypeToProtobuf(const _CLPlaceInferenceUserSpecificPlaceType &)", "%s\n", v14);
      if (v7 != buf)
        free(v7);
    }
  }
  if (!sub_100106094(v7))
    sub_1018FAF68();
  *(_DWORD *)(a2 + 36) |= 1u;
  *(_DWORD *)(a2 + 8) = (_DWORD)v7;
  v9 = objc_msgSend(a1, "placeType");
  LODWORD(v7) = (_DWORD)v9;
  if ((unint64_t)v9 >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v10 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v20 = (int)v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "ConvertCLPlaceInferencePlaceTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v17 = 67240192;
      v18 = (int)v7;
      LODWORD(v16) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLPlaceInferencePlaceTypeToProtobuf,unhandled type,%{public}d", &v17, v16);
      v7 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::PlaceInference::PlaceInferencePlaceType ConvertCLPlaceInferencePlaceTypeToProtobuf(const _CLPlaceInferencePlaceType &)", "%s\n", v15);
      if (v7 != buf)
        free(v7);
    }
  }
  if (!sub_10008D1F0(v7))
    sub_1018FAF40();
  *(_DWORD *)(a2 + 36) |= 2u;
  *(_DWORD *)(a2 + 12) = (_DWORD)v7;
  result = (std::string *)objc_msgSend(a1, "_loiIdentifier");
  if (result)
  {
    result = (std::string *)objc_msgSend(objc_msgSend(a1, "_loiIdentifier"), "UUIDString");
    if (result)
    {
      v12 = (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_msgSend(a1, "_loiIdentifier"), "UUIDString"), "UTF8String");
      *(_DWORD *)(a2 + 36) |= 8u;
      v13 = *(std::string **)(a2 + 24);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      return std::string::assign(v13, v12);
    }
  }
  return result;
}

void sub_10137BE1C(void *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  _WORD v21[8];
  uint8_t buf[1640];

  if (a1)
  {
    objc_msgSend(a1, "horizontalAccuracy");
    v4 = *(_DWORD *)(a2 + 68);
    *(_QWORD *)(a2 + 56) = v5;
    *(_DWORD *)(a2 + 68) = v4 | 0x60;
    v6 = *(_QWORD *)(a2 + 48);
    if (!v6)
      operator new();
    objc_msgSend(a1, "coordinate");
    *(_DWORD *)(v6 + 28) |= 1u;
    *(_QWORD *)(v6 + 8) = v7;
    *(_DWORD *)(a2 + 68) |= 0x20u;
    v8 = *(_QWORD *)(a2 + 48);
    if (!v8)
      operator new();
    objc_msgSend(a1, "coordinate");
    *(_DWORD *)(v8 + 28) |= 2u;
    *(_QWORD *)(v8 + 16) = v9;
    v10 = objc_msgSend(a1, "_placeInference");
    *(_DWORD *)(a2 + 68) |= 0x10u;
    v11 = *(_QWORD *)(a2 + 40);
    if (!v11)
      operator new();
    sub_10137B9D4(v10, v11);
    if (objc_msgSend(a1, "hasArrivalDate") && objc_msgSend(a1, "arrivalDate"))
    {
      *(_DWORD *)(a2 + 68) |= 2u;
      v12 = *(_QWORD *)(a2 + 16);
      if (!v12)
        operator new();
      objc_msgSend(objc_msgSend(a1, "arrivalDate"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)(v12 + 36) |= 1u;
      *(_QWORD *)(v12 + 8) = v13;
    }
    if (objc_msgSend(a1, "hasDepartureDate") && objc_msgSend(a1, "departureDate"))
    {
      *(_DWORD *)(a2 + 68) |= 4u;
      v14 = *(_QWORD *)(a2 + 24);
      if (!v14)
        operator new();
      objc_msgSend(objc_msgSend(a1, "departureDate"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)(v14 + 36) |= 1u;
      *(_QWORD *)(v14 + 8) = v15;
    }
    if (objc_msgSend(a1, "detectionDate"))
    {
      *(_DWORD *)(a2 + 68) |= 8u;
      v16 = *(_QWORD *)(a2 + 32);
      if (!v16)
        operator new();
      objc_msgSend(objc_msgSend(a1, "detectionDate"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)(v16 + 36) |= 1u;
      *(_QWORD *)(v16 + 8) = v17;
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v18 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "ConvertCLVisitToProtobuf,visit is nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v21[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCLVisitToProtobuf,visit is nil", v21, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLVisitToProtobuf(const CLVisit *, CLP::LogEntry::PrivateData::RoutineVisit *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

void sub_10137C1E8()
{
  operator delete();
}

void sub_10137C250(int *a1, _DWORD *a2)
{
  int v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  _WORD v29[8];
  uint8_t buf[1640];

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "WatchOrientation protobuf message pointer is invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v29[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "WatchOrientation protobuf message pointer is invalid", v29, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLGizmoOrientationToProtobuf(const CLGizmoOrientation &, CLP::LogEntry::PrivateData::WatchOrientation *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return;
  }
  v4 = a1[1];
  switch(v4)
  {
    case 2:
      v5 = 1;
      v12 = sub_10002A324(1u);
      if (!v12)
        sub_10194F950(v12, v13, v14);
      goto LABEL_19;
    case 1:
      v5 = 3;
      v15 = sub_10002A324(3u);
      if (!v15)
        sub_10194F950(v15, v16, v17);
      goto LABEL_19;
    case 0:
      v5 = 2;
      v6 = sub_10002A324(2u);
      if (!v6)
        sub_10194F950(v6, v7, v8);
LABEL_19:
      a2[5] |= 2u;
      a2[3] = v5;
      break;
  }
  v18 = *a1;
  if (*a1 == 2)
  {
    v19 = 1;
    v23 = sub_10002A324(1u);
    if (!v23)
      sub_10194F92C(v23, v24, v25);
  }
  else if (v18 == 1)
  {
    v19 = 3;
    v26 = sub_10002A324(3u);
    if (!v26)
      sub_10194F92C(v26, v27, v28);
  }
  else
  {
    if (v18)
      return;
    v19 = 2;
    v20 = sub_10002A324(2u);
    if (!v20)
      sub_10194F92C(v20, v21, v22);
  }
  a2[5] |= 1u;
  a2[2] = v19;
}

BOOL sub_10137C4A8(double *a1, uint64_t a2)
{
  double v3;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  _BOOL8 v11;
  unint64_t v14;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  const char *v19;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint8_t buf[4];
  unint64_t v30;

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v10 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "pTimeStamp,Invalid pointer", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    LOWORD(v27) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pTimeStamp,Invalid pointer", &v27, 2);
    v9 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v19);
    goto LABEL_41;
  }
  v3 = *a1;
  if (*a1 < 0.0 || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)a1;
      *(_DWORD *)buf = 134217984;
      v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Mach continuous time cannot be negative or infinite: %lf", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = *(_QWORD *)a1;
    v27 = 134217984;
    v28 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Mach continuous time cannot be negative or infinite: %lf", COERCE_DOUBLE(&v27));
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v8);
LABEL_41:
    if (v9 != buf)
      free(v9);
    return 0;
  }
  *(_DWORD *)(a2 + 36) |= 4u;
  *(double *)(a2 + 24) = v3;
  if (!qword_10230E5A0)
    operator new();
  v26 = 0xBFF0000000000000;
  if (!sub_100AD25A0(qword_10230E5A0, a1, (double *)&v26))
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v16 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)a1;
      *(_DWORD *)buf = 134217984;
      v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Error: mach continuous to mach absolute time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v20 = *(_QWORD *)a1;
      v27 = 134217984;
      v28 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Error: mach continuous to mach absolute time conversion failed: %lf", COERCE_DOUBLE(&v27));
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    return 0;
  }
  v14 = v26;
  *(_DWORD *)(a2 + 36) |= 2u;
  *(_QWORD *)(a2 + 16) = v14;
  v25 = 0xBFF0000000000000;
  v11 = sub_10010EA68(qword_10230E5A0, (double *)&v26, (double *)&v25);
  if (v11)
  {
    v15 = v25;
    *(_DWORD *)(a2 + 36) |= 1u;
    *(_QWORD *)(a2 + 8) = v15;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v18 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v30 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Mach absolute to CF absolute time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v27 = 134217984;
      v28 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "Mach absolute to CF absolute time conversion failed: %lf", COERCE_DOUBLE(&v27));
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  }
  return v11;
}

void sub_10137CB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 36) |= 2u;
    v4 = *(_QWORD *)(a2 + 16);
    if (!v4)
      operator new();
    if (!sub_10137C4A8((double *)a1, v4))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 36) |= 4u;
    *(_DWORD *)(a2 + 24) = v5;
    v6 = *(_DWORD *)(a1 + 12);
    if (v6 == 2)
    {
      v7 = 2;
      if (!sub_10008D1F0(2u))
        sub_101919900();
    }
    else
    {
      if (v6 != 1)
        return;
      v7 = 1;
      if (!sub_10008D1F0(1u))
        sub_101919900();
    }
    *(_DWORD *)(a2 + 36) |= 8u;
    *(_DWORD *)(a2 + 28) = v7;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "TrackRunHint protobuf message pointer is invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "TrackRunHint protobuf message pointer is invalid", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void ConvertTrackRunHintToProtobuf(const CLTrackRunHint &, CLP::LogEntry::TropicalSavanna::TropicalSavannaHint *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_10137CD88()
{
  operator delete();
}

void sub_10137CDB4(void *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int8 v52;
  _DWORD *v53;
  unsigned __int8 v54;
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  NSObject *v61;
  const char *v62;
  uint8_t *v63;
  id v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  const char *v93;
  uint8_t *v94;
  uint64_t v95;
  id v96;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  uint8_t *v100;
  const char *v101;
  uint8_t *v102;
  id v103;
  NSObject *v104;
  const char *v105;
  uint8_t *v106;
  NSObject *v107;
  const char *v108;
  NSObject *v109;
  NSObject *v110;
  const char *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[128];
  _BYTE v143[128];
  _BYTE v144[128];
  int v145;
  id v146;
  __int16 v147;
  id v148;
  __int16 v149;
  int v150;
  uint8_t v151[128];
  uint8_t buf[4];
  id v153;
  __int16 v154;
  id v155;
  __int16 v156;
  int v157;

  if (!a1 || !a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v104 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "Invalid track data message pointer", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    LOWORD(v145) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Invalid track data message pointer", &v145, 2);
    v106 = (uint8_t *)v105;
    sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v105);
LABEL_181:
    if (v106 != buf)
      free(v106);
    return;
  }
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v122 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v138, v151, 16);
  if (!v122)
    return;
  v120 = *(_QWORD *)v139;
LABEL_5:
  v3 = 0;
  while (1)
  {
    if (*(_QWORD *)v139 != v120)
      objc_enumerationMutation(a1);
    v4 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * v3);
    v121 = v3;
    if (!v4)
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      v10 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Empty track found in the track data array", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B1A58);
        LOWORD(v145) = 0;
        LODWORD(v113) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "Empty track found in the track data array", &v145, v113);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      goto LABEL_128;
    }
    v5 = a2;
    v6 = *(_DWORD *)(a2 + 28);
    v7 = *(int *)(a2 + 24);
    if ((int)v7 >= v6)
    {
      if (v6 == *(_DWORD *)(a2 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 16), v6 + 1);
        v5 = a2;
        v6 = *(_DWORD *)(a2 + 28);
      }
      *(_DWORD *)(v5 + 28) = v6 + 1;
      sub_101384AE0();
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 24) = v7 + 1;
    v9 = *(_QWORD *)(v8 + 8 * v7);
    v13 = objc_msgSend(v4, "trackId");
    *(_DWORD *)(v9 + 76) |= 4u;
    *(_QWORD *)(v9 + 40) = v13;
    v14 = objc_msgSend(objc_msgSend(v4, "lanes"), "count");
    *(_DWORD *)(v9 + 76) |= 0x40u;
    *(_QWORD *)(v9 + 64) = v14;
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B1A58);
    v15 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      v16 = objc_msgSend(objc_msgSend(v4, "lanes"), "count");
      v17 = objc_msgSend(v4, "features");
      *(_DWORD *)buf = 134284033;
      v153 = v16;
      v154 = 2048;
      v155 = v17;
      v156 = 1026;
      v157 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Track has lanes,%{private}lu,features,%lu,doNotStoreLaneGeometry,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      v90 = qword_10229FC58;
      v91 = objc_msgSend(objc_msgSend(v4, "lanes"), "count");
      v92 = objc_msgSend(v4, "features");
      v145 = 134284033;
      v146 = v91;
      v147 = 2048;
      v148 = v92;
      v149 = 1026;
      v150 = a3;
      LODWORD(v113) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v90, 2, "Track has lanes,%{private}lu,features,%lu,doNotStoreLaneGeometry,%{public}d", &v145, v113);
      v94 = (uint8_t *)v93;
      sub_100512490("Generic", 1, 0, 2, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
    if ((objc_msgSend(v4, "features") & 4) != 0)
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      v24 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
      {
        v25 = objc_msgSend(objc_msgSend(objc_msgSend(v4, "orientedBoundingRegion"), "vertexs"), "count");
        *(_DWORD *)buf = 134217984;
        v153 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Track has an oriented bounding box with %lu vertices", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B1A58);
        v95 = qword_10229FC58;
        v96 = objc_msgSend(objc_msgSend(objc_msgSend(v4, "orientedBoundingRegion"), "vertexs"), "count");
        v145 = 134217984;
        v146 = v96;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v95, 2, "Track has an oriented bounding box with %lu vertices", &v145);
        v98 = (uint8_t *)v97;
        sub_100512490("Generic", 1, 0, 2, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v97);
        if (v98 != buf)
          free(v98);
      }
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v26 = objc_msgSend(objc_msgSend(v4, "orientedBoundingRegion"), "vertexs");
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v134, v144, 16);
      if (v27)
      {
        v28 = *(_QWORD *)v135;
        do
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v135 != v28)
              objc_enumerationMutation(v26);
            v30 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * (_QWORD)i);
            *(_DWORD *)(v9 + 76) |= 1u;
            v31 = *(int **)(v9 + 8);
            if (!v31)
              operator new();
            v32 = v31[13];
            v33 = v31[12];
            if ((int)v33 >= v32)
            {
              if (v32 == v31[14])
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v31 + 10), v32 + 1);
                v32 = v31[13];
              }
              v31[13] = v32 + 1;
              sub_1013847F8();
            }
            v34 = *((_QWORD *)v31 + 5);
            v31[12] = v33 + 1;
            v35 = *(_QWORD *)(v34 + 8 * v33);
            if (!v35)
            {
              if (qword_10229FC50 != -1)
                dispatch_once(&qword_10229FC50, &stru_1021B1A58);
              v107 = qword_10229FC58;
              if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "Invalid track data oriented bounding box vertex pointer", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 0))
                return;
              bzero(buf, 0x65CuLL);
              if (qword_10229FC50 != -1)
                dispatch_once(&qword_10229FC50, &stru_1021B1A58);
              LOWORD(v145) = 0;
              LODWORD(v113) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "Invalid track data oriented bounding box vertex pointer", &v145, v113);
              v106 = (uint8_t *)v108;
              sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v108);
              goto LABEL_181;
            }
            objc_msgSend(v30, "lat");
            *(_DWORD *)(v35 + 28) |= 1u;
            *(_QWORD *)(v35 + 8) = v36;
            objc_msgSend(v30, "lng");
            *(_DWORD *)(v35 + 28) |= 2u;
            *(_QWORD *)(v35 + 16) = v37;
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v134, v144, 16);
        }
        while (v27);
      }
    }
    else if (objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasEastLng")
           && objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasWestLng")
           && objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasNorthLat")
           && objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasSouthLat"))
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      v18 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Track does not have an oriented bounding box. Storing an axis aligned bounding box instead.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B1A58);
        LOWORD(v145) = 0;
        LODWORD(v113) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "Track does not have an oriented bounding box. Storing an axis aligned bounding box instead.", &v145, v113);
        v102 = (uint8_t *)v101;
        sub_100512490("Generic", 1, 0, 2, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v101);
        if (v102 != buf)
          free(v102);
      }
      *(_DWORD *)(v9 + 76) |= 1u;
      v19 = *(_QWORD *)(v9 + 8);
      if (!v19)
        operator new();
      objc_msgSend(objc_msgSend(v4, "boundingBox"), "eastLng");
      *(_DWORD *)(v19 + 68) |= 8u;
      *(_QWORD *)(v19 + 32) = v20;
      objc_msgSend(objc_msgSend(v4, "boundingBox"), "westLng");
      *(_DWORD *)(v19 + 68) |= 2u;
      *(_QWORD *)(v19 + 16) = v21;
      objc_msgSend(objc_msgSend(v4, "boundingBox"), "northLat");
      *(_DWORD *)(v19 + 68) |= 1u;
      *(_QWORD *)(v19 + 8) = v22;
      objc_msgSend(objc_msgSend(v4, "boundingBox"), "southLat");
      *(_DWORD *)(v19 + 68) |= 4u;
      *(_QWORD *)(v19 + 24) = v23;
    }
    else
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      v38 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Track has no bounding box information", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B1A58);
        LOWORD(v145) = 0;
        LODWORD(v113) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "Track has no bounding box information", &v145, v113);
        v100 = (uint8_t *)v99;
        sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v99);
        if (v100 != buf)
          free(v100);
      }
    }
    *(_DWORD *)(a2 + 48) |= 4u;
    if (!a3)
      break;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_128:
    v3 = v121 + 1;
    if ((id)(v121 + 1) == v122)
    {
      v103 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v138, v151, 16);
      v122 = v103;
      if (!v103)
        return;
      goto LABEL_5;
    }
  }
  *(_BYTE *)(a2 + 40) = 1;
  v39 = objc_msgSend(v4, "type");
  if (v39 == (id)1)
  {
    v44 = sub_10002A324(2u);
    if (!v44)
      sub_10194F998(v44, v45, v46);
    v43 = 2;
  }
  else if (v39 == (id)2)
  {
    v40 = sub_10002A324(3u);
    if (!v40)
      sub_10194F998(v40, v41, v42);
    v43 = 3;
  }
  else
  {
    v47 = sub_10002A324(1u);
    if (!v47)
      sub_10194F998(v47, v48, v49);
    v43 = 1;
  }
  v50 = *(_DWORD *)(v9 + 76);
  *(_DWORD *)(v9 + 48) = v43;
  *(_DWORD *)(v9 + 76) = v50 | 0x28;
  v51 = *(_QWORD *)(v9 + 56);
  if (!v51)
    operator new();
  v119 = *(_QWORD *)(v9 + 56);
  v52 = objc_msgSend(v4, "features");
  v53 = (_DWORD *)(v51 + 16);
  *v53 |= 1u;
  *(_BYTE *)(v119 + 8) = v52 & 1;
  v54 = objc_msgSend(v4, "features");
  *v53 |= 2u;
  *(_BYTE *)(v119 + 9) = (v54 & 2) != 0;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v117 = objc_msgSend(v4, "lanes");
  v118 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v130, v143, 16);
  if (!v118)
    goto LABEL_128;
  v116 = 0;
  v115 = *(_QWORD *)v131;
LABEL_81:
  v55 = 0;
  while (1)
  {
    if (*(_QWORD *)v131 != v115)
      objc_enumerationMutation(v117);
    v56 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * v55);
    if (v56)
      break;
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B1A58);
    v61 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "Empty lane found in the track data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      LOWORD(v145) = 0;
      LODWORD(v113) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "Empty lane found in the track data", &v145, v113);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
LABEL_126:
    if ((id)++v55 == v118)
    {
      v118 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v130, v143, 16);
      if (v118)
        goto LABEL_81;
      goto LABEL_128;
    }
  }
  v57 = *(_DWORD *)(v9 + 28);
  v58 = *(int *)(v9 + 24);
  v114 = v55;
  if ((int)v58 >= v57)
  {
    if (v57 == *(_DWORD *)(v9 + 32))
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 16), v57 + 1);
      v57 = *(_DWORD *)(v9 + 28);
    }
    *(_DWORD *)(v9 + 28) = v57 + 1;
    sub_101384B40();
  }
  v59 = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v9 + 24) = v58 + 1;
  v60 = *(int **)(v59 + 8 * v58);
  if (v60)
  {
    v64 = objc_msgSend(v56, "type");
    if (v64 == (id)2)
    {
      v70 = sub_10002A324(3u);
      if (!v70)
        sub_10194F974(v70, v71, v72);
      v68 = v60[13] | 2;
      v60[13] = v68;
      v69 = 3;
    }
    else if (v64 == (id)1)
    {
      v65 = sub_10002A324(2u);
      if (!v65)
        sub_10194F974(v65, v66, v67);
      v68 = v60[13] | 2;
      v60[13] = v68;
      v69 = 2;
    }
    else
    {
      v73 = sub_10002A324(1u);
      if (!v73)
        sub_10194F974(v73, v74, v75);
      v68 = v60[13] | 2;
      v60[13] = v68;
      v69 = 1;
    }
    v76 = v119;
    v60[13] = v68 | 4;
    v60[8] = v69;
    v60[9] = ++v116;
    if (*(_BYTE *)(v119 + 8))
    {
      v77 = objc_msgSend(v56, "width");
      v60[13] |= 8u;
      v60[10] = v77;
      v76 = v119;
    }
    if (*(_BYTE *)(v76 + 9))
    {
      v78 = objc_msgSend(v56, "flowlineOffset");
      v60[13] |= 0x10u;
      v60[11] = v78;
    }
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v79 = objc_msgSend(v56, "coordinates");
    v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v126, v142, 16);
    if (v80)
    {
      v81 = *(_QWORD *)v127;
LABEL_114:
      v82 = 0;
      while (1)
      {
        if (*(_QWORD *)v127 != v81)
          objc_enumerationMutation(v79);
        v83 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * v82);
        v84 = v60[5];
        v85 = v60[4];
        if ((int)v85 >= v84)
        {
          if (v84 == v60[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v60 + 2), v84 + 1);
            v84 = v60[5];
          }
          v60[5] = v84 + 1;
          sub_1013847F8();
        }
        v86 = *((_QWORD *)v60 + 1);
        v60[4] = v85 + 1;
        v87 = *(_QWORD *)(v86 + 8 * v85);
        if (!v87)
          break;
        objc_msgSend(v83, "lat");
        *(_DWORD *)(v87 + 28) |= 1u;
        *(_QWORD *)(v87 + 8) = v88;
        objc_msgSend(v83, "lng");
        *(_DWORD *)(v87 + 28) |= 2u;
        *(_QWORD *)(v87 + 16) = v89;
        if (v80 == (id)++v82)
        {
          v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v126, v142, 16);
          if (v80)
            goto LABEL_114;
          goto LABEL_125;
        }
      }
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B1A58);
      v109 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "Invalid track data lane coordinate pointer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B1A58);
        LOWORD(v145) = 0;
        LODWORD(v113) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "Invalid track data lane coordinate pointer", &v145, v113);
        v106 = (uint8_t *)v112;
        sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v112);
        goto LABEL_181;
      }
      return;
    }
LABEL_125:
    v55 = v114;
    goto LABEL_126;
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B1A58);
  v110 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "Invalid track data lane pointer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B1A58);
    LOWORD(v145) = 0;
    LODWORD(v113) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "Invalid track data lane pointer", &v145, v113);
    v106 = (uint8_t *)v111;
    sub_100512490("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v111);
    goto LABEL_181;
  }
}

void sub_10137E300()
{
  operator delete();
}

uint64_t sub_10137E34C(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v1 = *a1;
  if (v1 < 0xE)
    return dword_101CA00B0[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled wifi service notification type: %{public}d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = *a1;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled wifi service notification type: %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WifiNotificationType ConvertCLWifiServiceNotificationTypeToProtobuf(const CLWifiService_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

void sub_10137E524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _WORD v23[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 48) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    if ((sub_10137103C((double *)a1, v4, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert WorkoutEvent start CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v23[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert WorkoutEvent start CF time to protobuf", v23, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
    *(_DWORD *)(a2 + 48) |= 2u;
    v6 = *(_QWORD *)(a2 + 16);
    if (!v6)
      operator new();
    if ((sub_10137103C((double *)(a1 + 8), v6, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert WorkoutEvent end CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert WorkoutEvent end CF time to protobuf", v23, v22);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
    *(_DWORD *)(a2 + 48) |= 8u;
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
      operator new();
    if ((sub_10137103C((double *)(a1 + 24), v8, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v9 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error: Failed to convert WorkoutEvent event CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert WorkoutEvent event CF time to protobuf", v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    }
    v10 = sub_10137EC24((uint64_t *)(a1 + 16));
    if (!sub_100452D9C(v10))
      sub_1018FAA18();
    v11 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 40) = v10;
    *(_DWORD *)(a2 + 48) = v11 | 0x14;
    v12 = *(_QWORD *)(a2 + 32);
    if (!v12)
      operator new();
    sub_10137EE08(a1 + 64, v12);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v13 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "pWorkoutEvent,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v23[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWorkoutEvent,Invalid pointer", v23, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_10137EBD4()
{
  operator delete();
}

uint64_t sub_10137EC24(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v2 = *a1;
  if ((unint64_t)*a1 < 0x17 && ((0x7FFFDFu >> v2) & 1) != 0)
    return dword_101CA0120[v2];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout event type: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = *a1;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled workout event type: %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutEvent::EventType ConvertCMWorkoutEventTypeToProtobuf(const CMWorkoutEvent &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

void sub_10137EE08(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  std::string __str;
  char __s[48];
  uint8_t out[1640];

  if (a2)
  {
    memset(out, 0, 37);
    memset(__s, 0, 37);
    uuid_unparse((const unsigned __int8 *)a1, (char *)out);
    sub_1015A2E04(&__str, (char *)out);
    *(_DWORD *)(a2 + 40) |= 1u;
    v4 = *(std::string **)(a2 + 8);
    if (v4 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v4, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    uuid_unparse((const unsigned __int8 *)(a1 + 16), __s);
    sub_1015A2E04(&__str, __s);
    *(_DWORD *)(a2 + 40) |= 2u;
    v5 = *(std::string **)(a2 + 16);
    if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v5, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v6 = sub_10137F138((uint64_t *)(a1 + 48));
    if (!sub_10045248C(v6))
      sub_1018FA9F0();
    *(_DWORD *)(a2 + 40) |= 4u;
    *(_DWORD *)(a2 + 24) = v6;
    v7 = sub_10137F300((uint64_t *)(a1 + 56));
    if (!sub_100106094(v7))
      sub_1018FA9C8();
    *(_DWORD *)(a2 + 40) |= 8u;
    *(_DWORD *)(a2 + 28) = v7;
    v8 = sub_10137F4C8((uint64_t *)(a1 + 160));
    if (!sub_10008D1F0(v8))
      sub_1018FA9A0();
    *(_DWORD *)(a2 + 40) |= 0x10u;
    *(_DWORD *)(a2 + 32) = v8;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)out = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pWorkoutSettings,Invalid pointer", out, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(out, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      *(_WORD *)__s = 0;
      _os_log_send_and_compose_impl(2, 0, out, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWorkoutSettings,Invalid pointer", __s, 2);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 0, "void ConvertWorkoutSettingsToProtobuf(const CLMotionStateMediator_Type::WorkoutSettings &, CLP::LogEntry::PrivateData::WorkoutSettings *)", "%s\n", v10);
      if (v11 != (char *)out)
        free(v11);
    }
  }
}

void sub_10137F110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10137F138(uint64_t *a1)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if ((unint64_t)*a1 < 0x42)
    return *a1 + 1;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout type: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled workout type: %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutSettings::WorkoutType ConvertCMWorkoutTypeToProtobuf(const CMWorkoutType &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 27;
}

uint64_t sub_10137F300(uint64_t *a1)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if ((unint64_t)*a1 < 4)
    return *a1 + 1;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout location type: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled workout location type: %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutSettings::WorkoutLocationType ConvertCMWorkoutLocationTypeToProtobuf(const CMWorkoutLocationType &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 1;
}

uint64_t sub_10137F4C8(uint64_t *a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (!*a1)
    return 1;
  if (*a1 == 1)
    return 2;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout mode: %{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled workout mode: %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutSettings::WorkoutMode ConvertCMWorkoutModeToProtobuf(const CMWorkoutMode &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_10137F6A4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (a2)
  {
    v4 = sub_101378BC8((unsigned int *)(a1 + 8));
    if ((sub_10044254C(v4) & 1) == 0)
      sub_1018FA978();
    v5 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 36) = v5 | 5;
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      operator new();
    if ((sub_10137103C((double *)a1, v6, 0) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLWorkoutUpdate start CF time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert CLWorkoutUpdate start CF time to protobuf", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "void ConvertCLWorkoutUpdateToProtobuf(const CLWorkoutUpdate &, CLP::LogEntry::PrivateData::WorkoutUpdate *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
    v8 = sub_101378BC8((unsigned int *)(a1 + 12));
    if ((sub_10044254C(v8) & 1) == 0)
      sub_1018FA950();
    *(_DWORD *)(a2 + 36) |= 8u;
    *(_DWORD *)(a2 + 20) = v8;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pWorkoutUpdate,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWorkoutUpdate,Invalid pointer", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLWorkoutUpdateToProtobuf(const CLWorkoutUpdate &, CLP::LogEntry::PrivateData::WorkoutUpdate *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_10137FA24()
{
  operator delete();
}

std::string *sub_10137FA50(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  std::string *result;
  int v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint8_t buf[4];
  int v45;

  switch(*a1)
  {
    case 0u:
      v4 = a2;
      v5 = 1;
      goto LABEL_84;
    case 1u:
      v4 = a2;
      v5 = 2;
      goto LABEL_84;
    case 2u:
      v4 = a2;
      v5 = 8;
      goto LABEL_84;
    case 3u:
      v4 = a2;
      v5 = 9;
      goto LABEL_84;
    case 4u:
      v4 = a2;
      v5 = 10;
      goto LABEL_84;
    case 5u:
      v4 = a2;
      v5 = 11;
      goto LABEL_84;
    case 6u:
      v4 = a2;
      v5 = 12;
      goto LABEL_84;
    case 7u:
      v4 = a2;
      v5 = 13;
      goto LABEL_84;
    case 8u:
      v4 = a2;
      v5 = 14;
      goto LABEL_84;
    case 9u:
      v4 = a2;
      v5 = 15;
      goto LABEL_84;
    case 0xAu:
      v4 = a2;
      v5 = 16;
      goto LABEL_84;
    case 0xBu:
      v4 = a2;
      v5 = 17;
      goto LABEL_84;
    case 0xCu:
      v4 = a2;
      v5 = 18;
      goto LABEL_84;
    case 0xDu:
      v4 = a2;
      v5 = 19;
      goto LABEL_84;
    case 0xEu:
      v4 = a2;
      v5 = 20;
      goto LABEL_84;
    case 0xFu:
      v4 = a2;
      v5 = 21;
      goto LABEL_84;
    case 0x10u:
      v4 = a2;
      v5 = 22;
      goto LABEL_84;
    case 0x11u:
      v4 = a2;
      v5 = 23;
      goto LABEL_84;
    case 0x12u:
      v4 = a2;
      v5 = 24;
      goto LABEL_84;
    case 0x13u:
      v4 = a2;
      v5 = 25;
      goto LABEL_84;
    case 0x14u:
      v4 = a2;
      v5 = 26;
      goto LABEL_84;
    case 0x15u:
      v4 = a2;
      v5 = 27;
      goto LABEL_84;
    case 0x16u:
      v4 = a2;
      v5 = 28;
      goto LABEL_84;
    case 0x17u:
      v4 = a2;
      v5 = 29;
      goto LABEL_84;
    case 0x18u:
      v4 = a2;
      v5 = 30;
      goto LABEL_84;
    case 0x19u:
      v4 = a2;
      v5 = 31;
      goto LABEL_84;
    case 0x1Au:
      v4 = a2;
      v5 = 32;
      goto LABEL_84;
    case 0x1Bu:
      v4 = a2;
      v5 = 33;
      goto LABEL_84;
    case 0x1Cu:
      v4 = a2;
      v5 = 34;
      goto LABEL_84;
    case 0x1Du:
      v4 = a2;
      v5 = 35;
      goto LABEL_84;
    case 0x1Eu:
      v4 = a2;
      v5 = 36;
      goto LABEL_84;
    case 0x1Fu:
      v4 = a2;
      v5 = 37;
      goto LABEL_84;
    case 0x20u:
      v4 = a2;
      v5 = 38;
      goto LABEL_84;
    case 0x21u:
      v4 = a2;
      v5 = 39;
      goto LABEL_84;
    case 0x22u:
      v4 = a2;
      v5 = 40;
      goto LABEL_84;
    case 0x23u:
      v4 = a2;
      v5 = 41;
      goto LABEL_84;
    case 0x24u:
      v4 = a2;
      v5 = 42;
      goto LABEL_84;
    case 0x25u:
      v4 = a2;
      v5 = 43;
      goto LABEL_84;
    case 0x26u:
      v4 = a2;
      v5 = 44;
      goto LABEL_84;
    case 0x27u:
      v4 = a2;
      v5 = 45;
      goto LABEL_84;
    case 0x28u:
      v4 = a2;
      v5 = 47;
      goto LABEL_84;
    case 0x29u:
      v4 = a2;
      v5 = 51;
      goto LABEL_84;
    case 0x2Au:
      v4 = a2;
      v5 = 46;
      goto LABEL_84;
    case 0x2Bu:
      v4 = a2;
      v5 = 52;
      goto LABEL_84;
    case 0x2Cu:
      v4 = a2;
      v5 = 53;
      goto LABEL_84;
    case 0x2Du:
      v4 = a2;
      v5 = 54;
      goto LABEL_84;
    case 0x2Eu:
      v4 = a2;
      v5 = 56;
      goto LABEL_84;
    case 0x2Fu:
      v4 = a2;
      v5 = 59;
      goto LABEL_84;
    case 0x30u:
      v4 = a2;
      v5 = 60;
      goto LABEL_84;
    case 0x31u:
      v4 = a2;
      v5 = 61;
      goto LABEL_84;
    case 0x32u:
      v4 = a2;
      v5 = 62;
      goto LABEL_84;
    case 0x33u:
      v4 = a2;
      v5 = 63;
      goto LABEL_84;
    case 0x34u:
      v4 = a2;
      v5 = 64;
      goto LABEL_84;
    case 0x35u:
      v4 = a2;
      v5 = 65;
      goto LABEL_84;
    case 0x36u:
      v4 = a2;
      v5 = 68;
      goto LABEL_84;
    case 0x37u:
      v4 = a2;
      v5 = 69;
      goto LABEL_84;
    case 0x38u:
      v4 = a2;
      v5 = 66;
      goto LABEL_84;
    case 0x39u:
      v4 = a2;
      v5 = 67;
      goto LABEL_84;
    case 0x3Au:
      v4 = a2;
      v5 = 70;
      goto LABEL_84;
    case 0x3Bu:
      v4 = a2;
      v5 = 71;
      goto LABEL_84;
    case 0x3Cu:
      v4 = a2;
      v5 = 72;
      goto LABEL_84;
    case 0x3Du:
      v4 = a2;
      v5 = 73;
      goto LABEL_84;
    case 0x3Eu:
      v4 = a2;
      v5 = 74;
      goto LABEL_84;
    case 0x3Fu:
      v4 = a2;
      v5 = 75;
      goto LABEL_84;
    case 0x40u:
      v4 = a2;
      v5 = 76;
      goto LABEL_84;
    case 0x41u:
      v4 = a2;
      v5 = 77;
      goto LABEL_84;
    case 0x42u:
      v4 = a2;
      v5 = 78;
      goto LABEL_84;
    case 0x43u:
      v4 = a2;
      v5 = 79;
      goto LABEL_84;
    case 0x44u:
      v4 = a2;
      v5 = 80;
      goto LABEL_84;
    case 0x45u:
      v4 = a2;
      v5 = 81;
      goto LABEL_84;
    case 0x46u:
      v4 = a2;
      v5 = 82;
      goto LABEL_84;
    case 0x47u:
      v4 = a2;
      v5 = 83;
      goto LABEL_84;
    case 0x48u:
      v4 = a2;
      v5 = 84;
      goto LABEL_84;
    case 0x49u:
      v4 = a2;
      v5 = 85;
      goto LABEL_84;
    case 0x4Au:
      v4 = a2;
      v5 = 86;
      goto LABEL_84;
    case 0x4Bu:
      v4 = a2;
      v5 = 100;
LABEL_84:
      sub_101380534(v4, v5);
      break;
    default:
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        v7 = *a1;
        *(_DWORD *)buf = 67240192;
        v45 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unhandled HW %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v38 = *a1;
        v42 = 67240192;
        v43 = v38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Unhandled HW %{public}d", &v42, 8);
        v40 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 0, "void ConvertRavenPlatformInfoToProtobuf(const raven::RavenPlatformInfo &, CLP::LogEntry::Raven::RavenPlatformInfo *)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
      sub_101380534(a2, 0);
      break;
  }
  v8 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a2 + 20) = *((_BYTE *)a1 + 2);
  *(_DWORD *)(a2 + 52) = v8 | 0xC;
  v9 = *(std::string **)(a2 + 24);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, (const std::string *)(a1 + 4));
  *(_DWORD *)(a2 + 52) |= 0x10u;
  v10 = *(std::string **)(a2 + 32);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  result = std::string::operator=(v10, (const std::string *)(a1 + 16));
  v12 = *((_DWORD *)a1 + 14);
  switch(v12)
  {
    case 0:
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v13 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        v14 = *a1;
        *(_DWORD *)buf = 67240192;
        v45 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unknown category on HW %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v35 = *a1;
        v42 = 67240192;
        v43 = v35;
        LODWORD(v41) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Unknown category on HW %{public}d", &v42, v41);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 0, "void ConvertRavenPlatformInfoToProtobuf(const raven::RavenPlatformInfo &, CLP::LogEntry::Raven::RavenPlatformInfo *)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      result = (std::string *)sub_10002A324(0);
      if ((result & 1) == 0)
        sub_10194F9E0((uint64_t)result, v15, v16);
      goto LABEL_102;
    case 1:
      result = (std::string *)sub_10002A324(1u);
      if ((result & 1) == 0)
        sub_10194F9E0((uint64_t)result, v21, v22);
      goto LABEL_102;
    case 2:
      result = (std::string *)sub_10002A324(2u);
      if ((result & 1) == 0)
        sub_10194F9E0((uint64_t)result, v17, v18);
      goto LABEL_102;
    case 3:
      result = (std::string *)sub_10002A324(3u);
      if ((result & 1) == 0)
        sub_10194F9E0((uint64_t)result, v19, v20);
LABEL_102:
      *(_DWORD *)(a2 + 52) |= 0x20u;
      *(_DWORD *)(a2 + 40) = v12;
      break;
    default:
      break;
  }
  v23 = *((_DWORD *)a1 + 15);
  if (v23 == 2)
  {
    result = (std::string *)sub_10008D1F0(2u);
    if ((result & 1) == 0)
      sub_10194F9BC((uint64_t)result, v30, v31);
  }
  else if (v23 == 1)
  {
    result = (std::string *)sub_10008D1F0(1u);
    if ((result & 1) == 0)
      sub_10194F9BC((uint64_t)result, v28, v29);
  }
  else
  {
    if (v23)
      return result;
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v24 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v25 = *a1;
      *(_DWORD *)buf = 67240192;
      v45 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Unknown band support on HW %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v32 = *a1;
      v42 = 67240192;
      v43 = v32;
      LODWORD(v41) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Unknown band support on HW %{public}d", &v42, v41);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void ConvertRavenPlatformInfoToProtobuf(const raven::RavenPlatformInfo &, CLP::LogEntry::Raven::RavenPlatformInfo *)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    result = (std::string *)sub_10008D1F0(0);
    if ((result & 1) == 0)
      sub_10194F9BC((uint64_t)result, v26, v27);
  }
  *(_DWORD *)(a2 + 52) |= 0x40u;
  *(_DWORD *)(a2 + 44) = v23;
  return result;
}

uint64_t sub_101380534(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_1009F8504(a2);
  if ((result & 1) == 0)
    sub_101913BB4();
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_DWORD *)(a1 + 16) = a2;
  return result;
}

void sub_101380574(uint64_t a1, char a2)
{
  unsigned int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  std::string *v24;
  std::string *v25;
  NSObject *v26;
  _BYTE *v27;
  void **v28;
  int v29;
  uint64_t v30;
  void **v31;
  void **v32;
  int v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  void *v37[2];
  char v38;
  void *__p[2];
  char v40;
  _BYTE v41[12];
  __int16 v42;
  void **v43;
  __int16 v44;
  int v45;
  std::string buf;
  int v47;

  if (sub_1002416E0())
    v4 = 2;
  else
    v4 = 1;
  v5 = sub_10008D1F0(v4);
  if (!v5)
    sub_10194F9BC(v5, v6, v7);
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v4;
  sub_100197040();
  LODWORD(buf.__r_.__value_.__l.__data_) = sub_1001AA9A8();
  v8 = sub_101380BA8((int *)&buf, a2);
  if ((sub_1009F8504(v8) & 1) == 0)
    sub_101913BB4();
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_DWORD *)(a1 + 16) = v8;
  if (sub_100195F08())
  {
    v9 = 3;
    v10 = sub_10002A324(3u);
    if (!v10)
      sub_10194F9E0(v10, v11, v12);
  }
  else if (sub_1000C4240())
  {
    v9 = 1;
    v13 = sub_10002A324(1u);
    if (!v13)
      sub_10194F9E0(v13, v14, v15);
  }
  else if (sub_100081BD0())
  {
    v9 = 2;
    v16 = sub_10002A324(2u);
    if (!v16)
      sub_10194F9E0(v16, v17, v18);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v19 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CN platform info creation on unknown category", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      *(_WORD *)v41 = 0;
      v35 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "CN platform info creation on unknown category", v41, 2);
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLPlatformInfoToProtobuf(CLP::LogEntry::Raven::RavenPlatformInfo *, const BOOL)", "%s\n", (const char *)v35);
      if (v35 != &buf)
        free(v35);
    }
    v20 = sub_10002A324(0);
    if (!v20)
      sub_10194F9E0(v20, v21, v22);
    v9 = 0;
  }
  *(_DWORD *)(a1 + 52) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v9;
  sub_100197040();
  v23 = sub_10075D288();
  *(_DWORD *)(a1 + 52) |= 4u;
  *(_BYTE *)(a1 + 20) = v23;
  sub_100197040();
  sub_10075ACDC((uint64_t)&buf);
  *(_DWORD *)(a1 + 52) |= 8u;
  v24 = *(std::string **)(a1 + 24);
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v24, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  sub_100197040();
  sub_10075A1D4((uint64_t)&buf);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  v25 = *(std::string **)(a1 + 32);
  if (v25 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v25, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v26 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
  {
    sub_100197040();
    v27 = v41;
    sub_10075A1D4((uint64_t)v41);
    if (v44 < 0)
      v27 = *(_BYTE **)v41;
    sub_100197040();
    v28 = __p;
    sub_10075ACDC((uint64_t)__p);
    if (v40 < 0)
      v28 = (void **)__p[0];
    sub_100197040();
    v29 = sub_10075D288();
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
    v47 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "convert CN plaform info: system version, %{public}s, serial number, %{public}s, isInternal, %{public}d", (uint8_t *)&buf, 0x1Cu);
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v44) < 0)
      operator delete(*(void **)v41);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v30 = qword_1022A0168;
    sub_100197040();
    v31 = __p;
    sub_10075A1D4((uint64_t)__p);
    if (v40 < 0)
      v31 = (void **)__p[0];
    sub_100197040();
    v32 = v37;
    sub_10075ACDC((uint64_t)v37);
    if (v38 < 0)
      v32 = (void **)v37[0];
    sub_100197040();
    v33 = sub_10075D288();
    *(_DWORD *)v41 = 136446722;
    *(_QWORD *)&v41[4] = v31;
    v42 = 2082;
    v43 = v32;
    v44 = 1026;
    v45 = v33;
    LODWORD(v36) = 28;
    v34 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v30, 1, "convert CN plaform info: system version, %{public}s, serial number, %{public}s, isInternal, %{public}d", v41, v36);
    if (v38 < 0)
      operator delete(v37[0]);
    if (v40 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void ConvertCLPlatformInfoToProtobuf(CLP::LogEntry::Raven::RavenPlatformInfo *, const BOOL)", "%s\n", (const char *)v34);
    if (v34 != &buf)
      free(v34);
  }
}

void sub_101380B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101380BA8(int *a1, char a2)
{
  int v3;
  uint64_t result;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  uint8_t buf[4];
  int v16;

  if ((a2 & 1) != 0)
  {
    v3 = *a1 - 78;
    result = 8;
    switch(v3)
    {
      case 0:
        return result;
      case 1:
        result = 9;
        break;
      case 2:
        result = 10;
        break;
      case 4:
        result = 21;
        break;
      case 6:
        result = 22;
        break;
      case 8:
        result = 23;
        break;
      case 10:
        result = 24;
        break;
      case 11:
        result = 25;
        break;
      case 12:
        result = 26;
        break;
      case 13:
        result = 27;
        break;
      case 14:
        result = 28;
        break;
      case 17:
        result = 29;
        break;
      case 18:
        result = 30;
        break;
      case 19:
        result = 31;
        break;
      case 20:
        result = 32;
        break;
      case 21:
        result = 33;
        break;
      case 22:
        result = 34;
        break;
      case 23:
        result = 35;
        break;
      case 24:
        result = 36;
        break;
      case 25:
        result = 37;
        break;
      case 26:
        result = 38;
        break;
      case 27:
        result = 39;
        break;
      case 28:
        result = 40;
        break;
      case 29:
      case 30:
        result = 72;
        break;
      case 31:
      case 32:
        result = 73;
        break;
      case 33:
      case 34:
        result = 74;
        break;
      case 35:
      case 36:
        result = 75;
        break;
      case 37:
        result = 76;
        break;
      case 38:
      case 39:
        result = 79;
        break;
      case 40:
      case 41:
        result = 80;
        break;
      case 42:
      case 43:
        result = 84;
        break;
      case 44:
      case 45:
        result = 85;
        break;
      case 46:
        result = 81;
        break;
      case 47:
        result = 86;
        break;
      case 61:
        result = 11;
        break;
      case 63:
        result = 12;
        break;
      case 64:
        result = 14;
        break;
      case 65:
        result = 13;
        break;
      case 90:
        result = 15;
        break;
      case 91:
        result = 16;
        break;
      case 92:
        result = 18;
        break;
      case 93:
        result = 17;
        break;
      case 94:
        result = 43;
        break;
      case 95:
        result = 44;
        break;
      case 96:
      case 97:
        result = 100;
        break;
      case 98:
        result = 41;
        break;
      case 99:
        result = 42;
        break;
      case 100:
        result = 70;
        break;
      case 101:
        result = 71;
        break;
      case 102:
        result = 77;
        break;
      case 103:
        result = 78;
        break;
      case 104:
        result = 82;
        break;
      case 105:
        result = 83;
        break;
      case 111:
        result = 45;
        break;
      case 120:
        result = 19;
        break;
      case 122:
        result = 20;
        break;
      case 128:
        result = 51;
        break;
      case 132:
        result = 47;
        break;
      case 136:
        result = 68;
        break;
      case 138:
        result = 69;
        break;
      case 139:
        result = 46;
        break;
      case 140:
        result = 52;
        break;
      case 141:
        result = 53;
        break;
      case 142:
        result = 62;
        break;
      case 143:
        result = 63;
        break;
      case 144:
        result = 66;
        break;
      case 145:
        result = 67;
        break;
      case 148:
        result = 54;
        break;
      case 150:
        result = 56;
        break;
      case 152:
        result = 64;
        break;
      case 154:
        result = 65;
        break;
      case 160:
        result = 60;
        break;
      case 161:
        result = 61;
        break;
      case 163:
        result = 59;
        break;
      default:
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v7 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
        {
          v8 = *a1;
          *(_DWORD *)buf = 67240192;
          v16 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unhandled HW %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021B1A18);
          v11 = *a1;
          v13 = 67240192;
          v14 = v11;
          v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Unhandled HW %{public}d", &v13, 8);
          sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::Raven::RavenPlatformInfo::Hardware ConvertCLPlatformInfoHardwareToProtobuf(const CLPlatformInfo::Hardware &, const BOOL)", "%s\n", v12);
          if (v12 != (char *)buf)
            free(v12);
        }
        result = 2;
        break;
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      *(_DWORD *)buf = 67240192;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unsupported hardware detected, type: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v9 = *a1;
      v13 = 67240192;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Unsupported hardware detected, type: %{public}d", &v13, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::Raven::RavenPlatformInfo::Hardware ConvertCLPlatformInfoHardwareToProtobuf(const CLPlatformInfo::Hardware &, const BOOL)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    return 1;
  }
  return result;
}

unint64_t sub_1013813BC(int *a1, int *a2)
{
  unint64_t result;
  unint64_t i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE v15[528];
  std::__shared_weak_count *v16;
  _BYTE v17[156];

  result = sub_10104BD1C(a1);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      sub_10104B598((uint64_t)a1, i, (uint64_t)v17);
      v6 = a2[5];
      v7 = a2[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v6 + 1);
          v6 = a2[5];
        }
        a2[5] = v6 + 1;
        sub_101384BA0();
      }
      v8 = *((_QWORD *)a2 + 1);
      a2[4] = v7 + 1;
      sub_1001765C8((uint64_t)v17, *(_QWORD *)(v8 + 8 * v7));
      sub_10104BAA8((uint64_t)a1, i, (uint64_t)v15);
      v9 = a2[11];
      v10 = a2[10];
      if ((int)v10 >= v9)
      {
        if (v9 == a2[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v9 + 1);
          v9 = a2[11];
        }
        a2[11] = v9 + 1;
        sub_101384C00();
      }
      v11 = *((_QWORD *)a2 + 4);
      a2[10] = v10 + 1;
      sub_100177190((uint64_t)v15, *(_QWORD *)(v11 + 8 * v10));
      v12 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      result = sub_10104BD1C(a1);
    }
  }
  return result;
}

void sub_101381554(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t sub_10138156C(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (v1 < 0xC)
    return dword_101CA017C[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertBluetoothServiceNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertBluetoothServiceNotificationTypeToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::BluetoothServiceNotification_NotificationType ConvertBluetoothServiceNotificationTypeToProtobuf(const CLBluetoothService_Type::Notification &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10138173C(int *a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *a1;
  if (v2 < 0xD && ((0x1FF9u >> v2) & 1) != 0)
    return dword_101CA01AC[v2];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertCompanionNotifierNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertCompanionNotifierNotificationTypeToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::CompanionNotifierNotification_NotificationType ConvertCompanionNotifierNotificationTypeToProtobuf(const CLCompanionNotifier_Type::Notification &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_101381914(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (v1 < 0x12)
    return dword_101CA01E0[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertDaemonStatusNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertDaemonStatusNotificationTypeToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::DeviceStatus_NotificationType ConvertDaemonStatusNotificationTypeToProtobuf(const CLDaemonStatus_Type::Notification &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_101381AE4(int *a1, char *a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  NSObject *v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  _DWORD v29[4];
  uint8_t buf[4];
  int v31;

  v6 = sub_101381914(a1);
  if (!sub_10045DCAC(v6))
    sub_101930648();
  v7 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 28) = v7 | 2;
  *(_DWORD *)(a3 + 12) = v6;
  switch(*a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
    case 12:
    case 16:
    case 17:
    case 18:
      return;
    case 6:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v18 = *(_QWORD *)(a3 + 16);
      if (!v18)
        operator new();
      *(_DWORD *)(v18 + 44) |= 1u;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        operator new();
      sub_1013820BC((_BOOL8)a2, v19);
      break;
    case 7:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v8 = *(_QWORD *)(a3 + 16);
      if (!v8)
        operator new();
      *(_DWORD *)(v8 + 44) |= 2u;
      v9 = *(_QWORD *)(v8 + 16);
      if (!v9)
        operator new();
      sub_10138213C((uint64_t)a2, v9);
      break;
    case 8:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v12 = *(_QWORD *)(a3 + 16);
      if (!v12)
        operator new();
      v13 = *a2;
      *(_DWORD *)(v12 + 44) |= 4u;
      *(_BYTE *)(v12 + 24) = v13;
      break;
    case 10:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v20 = *(_QWORD *)(a3 + 16);
      if (!v20)
        operator new();
      v21 = *a2;
      *(_DWORD *)(v20 + 44) |= 8u;
      *(_BYTE *)(v20 + 25) = v21;
      break;
    case 11:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v10 = *(_QWORD *)(a3 + 16);
      if (!v10)
        operator new();
      v11 = *a2;
      *(_DWORD *)(v10 + 44) |= 0x10u;
      *(_BYTE *)(v10 + 26) = v11;
      break;
    case 13:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v27 = *(_QWORD *)(a3 + 16);
      if (!v27)
        operator new();
      v28 = *(_DWORD *)a2;
      *(_DWORD *)(v27 + 44) |= 0x80u;
      *(_DWORD *)(v27 + 32) = v28;
      break;
    case 14:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v14 = *(_QWORD *)(a3 + 16);
      if (!v14)
        operator new();
      v15 = *a2;
      *(_DWORD *)(v14 + 44) |= 0x100u;
      *(_BYTE *)(v14 + 36) = v15;
      break;
    case 15:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      v16 = *(_QWORD *)(a3 + 16);
      if (!v16)
        operator new();
      v17 = *a2;
      *(_DWORD *)(v16 + 44) |= 0x20u;
      *(_BYTE *)(v16 + 27) = v17;
      break;
    default:
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v22 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        v23 = *a1;
        *(_DWORD *)buf = 67240192;
        v31 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "ConvertDaemonStatusNotificationToProtobuf,unhandled type,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v24 = *a1;
        v29[0] = 67240192;
        v29[1] = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertDaemonStatusNotificationToProtobuf,unhandled type,%{public}d", v29, 8);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 0, "void ConvertDaemonStatusNotificationToProtobuf(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, CLP::LogEntry::PrivateData::DaemonStatusNotification *)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      break;
  }
}

void sub_101381FF8()
{
  operator delete();
}

BOOL sub_1013820BC(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;

  if (a2)
  {
    v3 = result;
    v4 = sub_101382724((int *)result);
    if (!sub_100442804(v4))
      sub_1018FAB80();
    *(_DWORD *)(a2 + 24) |= 1u;
    *(_DWORD *)(a2 + 8) = v4;
    v5 = sub_101382724((int *)(v3 + 4));
    result = sub_100442804(v5);
    if (!result)
      sub_1018FAB58();
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 12) = v5;
    *(_WORD *)(a2 + 16) = *(_WORD *)(v3 + 8);
    *(_DWORD *)(a2 + 24) = v6 | 0xE;
  }
  return result;
}

uint64_t sub_10138213C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  char v7;
  int v8;

  if (a2)
  {
    v3 = result;
    v4 = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)result;
    *(_WORD *)(a2 + 16) = *(_WORD *)(result + 8);
    *(_DWORD *)(a2 + 32) = v4 | 7;
    v5 = sub_101382920((unsigned int *)(result + 12));
    result = sub_100106094(v5);
    if ((result & 1) == 0)
      sub_1018FABA8();
    v6 = *(_DWORD *)(a2 + 32);
    v7 = *(_BYTE *)(v3 + 16);
    *(_DWORD *)(a2 + 32) = v6 | 0x18;
    *(_BYTE *)(a2 + 18) = v7;
    v8 = *(_DWORD *)(v3 + 20);
    *(_DWORD *)(a2 + 32) = v6 | 0x38;
    *(_DWORD *)(a2 + 20) = v5;
    *(_DWORD *)(a2 + 24) = v8;
  }
  return result;
}

uint64_t sub_1013821C0(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v1 = *a1;
  if (v1 < 3)
    return dword_101CA0228[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertGnssModeOfOperationToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertGnssModeOfOperationToProtobuf,unhandled type,%{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::GnssModeOfOperation ConvertGnssModeOfOperationToProtobuf(const CLLocationProvider_Type::GnssModeOfOperation &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_101382390(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if ((*a1 + 1) < 4)
    return (*a1 + 2);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertGnssRhythmicModeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertGnssRhythmicModeToProtobuf,unhandled type,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::RhythmicGnssWakeMode ConvertGnssRhythmicModeToProtobuf(const CLRhythmicGnssWakeMode &)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_10138255C(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (*a1 < 6)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertClientSatelliteConstellationToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertClientSatelliteConstellationToProtobuf,unhandled type,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::ClientSatelliteConstellation ConvertClientSatelliteConstellationToProtobuf(const CLClientSatelliteConstellation &)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_101382724(int *a1)
{
  int v2;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *a1;
  if (*a1 > 1)
  {
    if (v2 == 2)
      return 3;
    if (v2 == 1000)
      return 1001;
  }
  else
  {
    if (!v2)
      return 1;
    if (v2 == 1)
      return 2;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertReachabilityTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertReachabilityTypeToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::ReachabilityType ConvertReachabilityTypeToProtobuf(const CLDaemonStatus_Type::Reachability &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_101382920(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  result = *a1;
  if (result >= 5)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertBatteryChargerTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v9[0] = 67240192;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertBatteryChargerTypeToProtobuf,unhandled type,%{public}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BatteryChargerType ConvertBatteryChargerTypeToProtobuf(const CLBatteryChargerType &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

BOOL sub_101382AE8(int *a1)
{
  NSObject *v2;
  int v3;
  _BOOL8 result;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*a1)
    return 1;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v2 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ConvertSignalEnvironmentNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertSignalEnvironmentNotificationTypeToProtobuf,unhandled type,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::SignalEnvironmentNotification_NotificationType ConvertSignalEnvironmentNotificationTypeToProtobuf(const CLSignalEnvironmentProvider_Type::Notification &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_101382CA8(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 3)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertSignalEnvironmentFidelityLevelTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertSignalEnvironmentFidelityLevelTypeToProtobuf,unhandled type,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::SignalEnvironmentFidelityLevel ConvertSignalEnvironmentFidelityLevelTypeToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentFidelityLevel &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_101382E70(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 4)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertMotionStateNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = *a1;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertMotionStateNotificationTypeToProtobuf,unhandled type,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::MotionStateNotification_NotificationType ConvertMotionStateNotificationTypeToProtobuf(const CLMotionState_Type::Notification &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

double sub_101383038(unsigned int a1, uint64_t a2, int16x8_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 24);
  *(int16x4_t *)a3.i8 = vdup_n_s16(a1);
  *(_BYTE *)(a2 + 8) = a1 & 1;
  a3.i32[0] &= 0xFF00FFu;
  a3.i16[2] = a3.u8[4];
  a3.i16[3] = a3.u8[6];
  *(uint16x4_t *)a3.i8 = vshl_u16(*(uint16x4_t *)a3.i8, (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
  a3.i32[0] &= 0xFF01FF01;
  a3.i16[2] &= 0xFF01u;
  a3.i16[3] &= 0xFF01u;
  *(int8x8_t *)a3.i8 = vmovn_s16(a3);
  *(_DWORD *)(a2 + 9) = a3.i32[0];
  *(_BYTE *)(a2 + 13) = (a1 & 0x20) != 0;
  *(_BYTE *)(a2 + 14) = (a1 & 0x40) != 0;
  *(_BYTE *)(a2 + 15) = (a1 & 0x80) != 0;
  *(_DWORD *)(a2 + 24) = v3 | 0x1FF;
  *(_BYTE *)(a2 + 16) = BYTE1(a1) & 1;
  return *(double *)a3.i64;
}

uint64_t sub_101383090(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertFenceEnvironmentTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = *a1;
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertFenceEnvironmentTypeToProtobuf,unhandled type,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::FenceEnvironmentType ConvertFenceEnvironmentTypeToProtobuf(const CLFenceManager_Type::FenceEnvironmentType &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101383250(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 5)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertFenceLocationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = *a1;
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertFenceLocationTypeToProtobuf,unhandled type,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::FenceLocationType ConvertFenceLocationTypeToProtobuf(const CLFenceManager_Type::FenceLocationType &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

BOOL sub_101383410(uint64_t a1, uint64_t a2)
{
  const std::string *v4;
  std::string *v5;
  std::string *v6;
  int v7;
  int16x8_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL8 result;

  v4 = (const std::string *)(a1 + 24);
  *(_DWORD *)(a2 + 80) |= 1u;
  v5 = *(std::string **)(a2 + 8);
  if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v5, v4);
  *(_DWORD *)(a2 + 80) |= 2u;
  v6 = *(std::string **)(a2 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v6, (const std::string *)a1);
  v7 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 72);
  v8 = *(int16x8_t *)(a1 + 88);
  *(int16x8_t *)(a2 + 40) = v8;
  v9 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(a2 + 80) = v7 | 0x7C;
  v10 = *(_QWORD *)(a2 + 56);
  if (!v10)
    operator new();
  sub_101383038(v9, v10, v8);
  v11 = sub_101383090((unsigned int *)(a1 + 168));
  if (!sub_10008D1F0(v11))
    sub_101910F38();
  *(_DWORD *)(a2 + 80) |= 0x80u;
  *(_DWORD *)(a2 + 64) = v11;
  v12 = sub_101383250((unsigned int *)(a1 + 172));
  result = sub_100106094(v12);
  if (!result)
    sub_101910F10();
  *(_DWORD *)(a2 + 80) |= 0x100u;
  *(_DWORD *)(a2 + 68) = v12;
  return result;
}

void sub_101383574()
{
  operator delete();
}

uint64_t sub_101383598(int *a1)
{
  int v1;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1 + 1;
  if (v1 < 5)
    return dword_101CA0234[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertFenceStatusToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertFenceStatusToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::FenceStatus ConvertFenceStatusToProtobuf(const CLFenceManager_Type::FenceStatus &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 1;
}

uint64_t sub_10138376C(_DWORD *a1)
{
  if (*a1 < 7u)
    return (*a1 + 1);
  else
    return 0;
}

char *sub_10138377C(char *result, uint64_t a2)
{
  char v2;
  int v3;

  v2 = *result;
  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 8) = *result & 1;
  *(_DWORD *)(a2 + 16) = v3 | 3;
  *(_BYTE *)(a2 + 9) = (v2 & 2) != 0;
  return result;
}

uint64_t sub_1013837A0(int *a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *a1;
  if (v2 < 0x14 && ((0xF5DFFu >> v2) & 1) != 0)
    return dword_101CA0248[v2];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertActivityAlarmTriggerToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertActivityAlarmTriggerToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::ActivityAlarmTrigger ConvertActivityAlarmTriggerToProtobuf(const CMActivityAlarmTrigger &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

unint64_t sub_10138397C(unint64_t *a1)
{
  unint64_t result;
  NSObject *v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertIndoorOutdoorTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = *a1;
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertIndoorOutdoorTypeToProtobuf,unhandled type,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::IndoorOutdoorType ConvertIndoorOutdoorTypeToProtobuf(const CMIndoorOutdoorType &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

unint64_t sub_101383B3C(unint64_t *a1)
{
  unint64_t result;
  NSObject *v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 4)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertIndoorOutdoorConfidenceTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = *a1;
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ConvertIndoorOutdoorConfidenceTypeToProtobuf,unhandled type,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::IndoorOutdoorConfidence ConvertIndoorOutdoorConfidenceTypeToProtobuf(const CMIndoorOutdoorConfidence &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

void sub_101383CFC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 3u;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    v4 = sub_10138397C((unint64_t *)(a1 + 16));
    if (!sub_10008D1F0(v4))
      sub_1018FAFE0();
    *(_DWORD *)(a2 + 56) |= 4u;
    *(_DWORD *)(a2 + 24) = v4;
    v5 = sub_101383B3C((unint64_t *)(a1 + 24));
    if (!sub_10002A324(v5))
      sub_1018FAFB8();
    v6 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 28) = v5;
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 56) = v6 | 0x18;
    *(_QWORD *)(a2 + 32) = v7;
    v8 = sub_101383B3C((unint64_t *)(a1 + 40));
    if (!sub_10002A324(v8))
      sub_1018FAF90();
    v9 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 40) = v8;
    *(_BYTE *)(a2 + 44) = *(_BYTE *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 56) = v9 | 0xE0;
    *(_DWORD *)(a2 + 48) = v10;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v11 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "ConvertOutdoorUpdateToProtobuf,invalid pMsg pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "ConvertOutdoorUpdateToProtobuf,invalid pMsg pointer", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void ConvertOutdoorUpdateToProtobuf(const CLOutdoor_Type::OutdoorUpdate &, CLP::LogEntry::PrivateData::OutdoorUpdate *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

uint64_t sub_101383F30(uint64_t *a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a1 == 1)
    return 1;
  if (*a1 == 8)
    return 2;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertCMInertialOdometryReferenceFrameTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCMInertialOdometryReferenceFrameTypeToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::InertialOdometrySample_ReferenceFrame ConvertCMInertialOdometryReferenceFrameTypeToProtobuf(const CMInertialOdometryReferenceFrame &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_101384110(uint64_t *a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if ((unint64_t)*a1 < 3)
    return *a1 + 1;
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertCMInertialOdometryStaticIndicatorTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertCMInertialOdometryStaticIndicatorTypeToProtobuf,unhandled type,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::InertialOdometrySample_StaticIndicator ConvertCMInertialOdometryStaticIndicatorTypeToProtobuf(const CMInertialOdometryStaticFlag &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_1013842E0(void *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[8];

  if (a2)
  {
    objc_msgSend(a1, "timestamp");
    *(_DWORD *)(a2 + 84) |= 2u;
    *(_QWORD *)(a2 + 16) = v4;
    if (objc_msgSend(a1, "deltaPositionX"))
    {
      objc_msgSend(objc_msgSend(a1, "deltaPositionY"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 8u;
      *(_DWORD *)(a2 + 28) = v5;
    }
    if (objc_msgSend(a1, "deltaPositionY"))
    {
      objc_msgSend(objc_msgSend(a1, "deltaPositionY"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x10u;
      *(_DWORD *)(a2 + 32) = v6;
    }
    if (objc_msgSend(a1, "deltaPositionZ"))
    {
      objc_msgSend(objc_msgSend(a1, "deltaPositionZ"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x20u;
      *(_DWORD *)(a2 + 36) = v7;
    }
    if (objc_msgSend(a1, "deltaVelocityX"))
    {
      objc_msgSend(objc_msgSend(a1, "deltaVelocityX"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x40u;
      *(_DWORD *)(a2 + 40) = v8;
    }
    if (objc_msgSend(a1, "deltaVelocityY"))
    {
      objc_msgSend(objc_msgSend(a1, "deltaVelocityY"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x80u;
      *(_DWORD *)(a2 + 44) = v9;
    }
    if (objc_msgSend(a1, "deltaVelocityZ"))
    {
      objc_msgSend(objc_msgSend(a1, "deltaVelocityZ"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x100u;
      *(_DWORD *)(a2 + 48) = v10;
    }
    if (objc_msgSend(a1, "quaternionX"))
    {
      objc_msgSend(objc_msgSend(a1, "quaternionX"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x200u;
      *(_DWORD *)(a2 + 52) = v11;
    }
    if (objc_msgSend(a1, "quaternionY"))
    {
      objc_msgSend(objc_msgSend(a1, "quaternionY"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x400u;
      *(_DWORD *)(a2 + 56) = v12;
    }
    if (objc_msgSend(a1, "quaternionZ"))
    {
      objc_msgSend(objc_msgSend(a1, "quaternionZ"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x800u;
      *(_DWORD *)(a2 + 60) = v13;
    }
    if (objc_msgSend(a1, "quaternionW"))
    {
      objc_msgSend(objc_msgSend(a1, "quaternionW"), "floatValue");
      *(_DWORD *)(a2 + 84) |= 0x1000u;
      *(_DWORD *)(a2 + 64) = v14;
    }
    *(_QWORD *)buf = objc_msgSend(a1, "referenceFrame");
    v15 = sub_101383F30((uint64_t *)buf);
    if (!sub_10008D1F0(v15))
      sub_1018FB030();
    *(_DWORD *)(a2 + 84) |= 0x2000u;
    *(_DWORD *)(a2 + 68) = v15;
    *(_QWORD *)buf = objc_msgSend(a1, "staticFlag");
    v16 = sub_101384110((uint64_t *)buf);
    if (!sub_10002A324(v16))
      sub_1018FB008();
    *(_DWORD *)(a2 + 84) |= 0x20000u;
    *(_DWORD *)(a2 + 76) = v16;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v17 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "ConvertCMOdometryStateToProtobuf,invalid pMsg pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v20[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "ConvertCMOdometryStateToProtobuf,invalid pMsg pointer", v20, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCMOdometryStateToProtobuf(const CMOdometry *, CLP::LogEntry::PrivateData::InertialOdometrySample *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

void sub_101384680(id a1)
{
  qword_1022A0168 = (uint64_t)os_log_create("com.apple.locationd.Position", "PositionProto");
}

void sub_1013846AC()
{
  operator new();
}

void sub_1013846E8()
{
  operator delete();
}

void sub_10138470C(id a1)
{
  qword_1022A00A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

void sub_101384738()
{
  operator new();
}

void sub_101384774()
{
  operator delete();
}

void sub_101384798()
{
  operator new();
}

void sub_1013847D4()
{
  operator delete();
}

void sub_1013847F8()
{
  operator new();
}

void sub_101384834()
{
  operator delete();
}

BOOL sub_101384858(uint64_t a1)
{
  int v2;

  if (*(_WORD *)a1)
    return 1;
  if (*(__int16 *)(a1 + 8) != -32768)
  {
    v2 = *(unsigned __int8 *)(a1 + 10);
    if (*(_QWORD *)(a1 + 16))
    {
      if ((v2 != 2) == (*(__int16 *)(a1 + 24) != -32768))
        return *(_QWORD *)(a1 + 32)
            && (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return 1;
    }
    if (v2 != 2)
      return 1;
  }
  return *(_QWORD *)(a1 + 32)
      && (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

BOOL sub_1013848F4(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_100106094(a2);
  if (!result)
    sub_10192A498();
  *(_DWORD *)(a1 + 20) |= 2u;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void sub_101384934()
{
  operator new();
}

void sub_101384970()
{
  operator delete();
}

void sub_101384994()
{
  operator new();
}

void sub_1013849D0()
{
  operator delete();
}

void sub_1013849F4()
{
  operator new();
}

void sub_101384A30()
{
  operator delete();
}

void sub_101384A54()
{
  operator new();
}

void sub_101384A90()
{
  operator delete();
}

void sub_101384AB4(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_101384AE0()
{
  operator new();
}

void sub_101384B1C()
{
  operator delete();
}

void sub_101384B40()
{
  operator new();
}

void sub_101384B7C()
{
  operator delete();
}

void sub_101384BA0()
{
  operator new();
}

void sub_101384BDC()
{
  operator delete();
}

void sub_101384C00()
{
  operator new();
}

void sub_101384C3C()
{
  operator delete();
}

_QWORD *sub_101384C60(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  char v27;

  v8 = *(_QWORD **)a1;
  v9 = *a2;
  if (*(_QWORD **)a1 == *a2)
  {
LABEL_31:
    v9 = v8;
    return sub_1009F5CBC((uint64_t)&v27, v8, v9, *a5);
  }
  v11 = *(_QWORD **)a3;
  if (*(_QWORD *)a3 != *a4)
  {
    while (1)
    {
      v13 = v8[4];
      v14 = v11[4];
      if (v13 >= v14)
      {
        if (v14 >= v13)
        {
          v21 = (_QWORD *)v8[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v8[2];
              v18 = *v22 == (_QWORD)v8;
              v8 = v22;
            }
            while (!v18);
          }
          *(_QWORD *)a1 = v22;
          v23 = *(_QWORD **)a3;
          v24 = *(_QWORD **)(*(_QWORD *)a3 + 8);
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v23[2];
              v18 = *v25 == (_QWORD)v23;
              v23 = v25;
            }
            while (!v18);
          }
          *(_QWORD *)a3 = v25;
        }
        else
        {
          v19 = (_QWORD *)v11[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (_QWORD *)v11[2];
              v18 = *v20 == (_QWORD)v11;
              v11 = v20;
            }
            while (!v18);
          }
          *(_QWORD *)a3 = v20;
        }
      }
      else
      {
        sub_1003142D8(a5, v8 + 4);
        v15 = *(_QWORD **)a1;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v15[2];
            v18 = *v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v18);
        }
        *(_QWORD *)a1 = v17;
      }
      v8 = *(_QWORD **)a1;
      v9 = *a2;
      if (*(_QWORD **)a1 == *a2)
        break;
      v11 = *(_QWORD **)a3;
      if (*(_QWORD *)a3 == *a4)
        return sub_1009F5CBC((uint64_t)&v27, v8, v9, *a5);
    }
    goto LABEL_31;
  }
  return sub_1009F5CBC((uint64_t)&v27, v8, v9, *a5);
}

void sub_101384DF0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 7929, a4);
}

void sub_101384DF8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1049, a4);
}

void sub_101384E00(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 8876, a4);
}

void sub_101384E08(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 10941, a4);
}

void sub_101384E10(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 11608, a4);
}

void sub_101384E18(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 9802, a4);
}

void sub_101384E20(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1072, a4);
}

void sub_101384E28(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26592, a4);
}

void sub_101384E30(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26245, a4);
}

void sub_101384E38(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26821, a4);
}

void sub_101384E40(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26798, a4);
}

void sub_101384E48(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26890, a4);
}

void sub_101384E50(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26913, a4);
}

void sub_101384E58(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 26936, a4);
}

uint64_t sub_101384E60()
{
  return __cxa_atexit((void (*)(void *))sub_1004BAAE8, &qword_10230E5A0, (void *)&_mh_execute_header);
}

uint64_t sub_101384E7C(uint64_t a1)
{
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v7;
  float *v8;
  uint64_t v9;

  v1 = *(float *)(a1 + 20);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  sub_10027205C(&v7, (const void *)qword_10230E5A8, qword_10230E5B0, (qword_10230E5B0 - qword_10230E5A8) >> 2);
  v2 = (char *)v8 - (char *)v7;
  if (v8 != v7)
  {
    v3 = 0;
    v4 = v2 >> 2;
    if ((unint64_t)(v2 >> 2) <= 1)
      v4 = 1;
    while (v7[v3] < v1)
    {
      if (v4 == ++v3)
      {
        v3 = v4;
        goto LABEL_8;
      }
    }
    goto LABEL_8;
  }
  v3 = 0;
  v5 = 0;
  if (v8)
  {
LABEL_8:
    v8 = v7;
    operator delete(v7);
    return v3;
  }
  return v5;
}

uint64_t sub_101384F24(uint64_t a1)
{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v8;
  float *v9;
  uint64_t v10;

  v1 = *(float *)(a1 + 8);
  v2 = 0.0;
  if (v1 != 0.0)
    v2 = *(float *)(a1 + 12) / (float)(v1 * v1);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_10027205C(&v8, (const void *)qword_10230E5C0, qword_10230E5C8, (qword_10230E5C8 - qword_10230E5C0) >> 2);
  v3 = (char *)v9 - (char *)v8;
  if (v9 != v8)
  {
    v4 = 0;
    v5 = v3 >> 2;
    if ((unint64_t)(v3 >> 2) <= 1)
      v5 = 1;
    while (v8[v4] < v2)
    {
      if (v5 == ++v4)
      {
        v4 = v5;
        goto LABEL_10;
      }
    }
    goto LABEL_10;
  }
  v4 = 0;
  v6 = 0;
  if (v9)
  {
LABEL_10:
    v9 = v8;
    operator delete(v8);
    return v4;
  }
  return v6;
}

uint64_t sub_101384FE4(uint64_t a1)
{
  return (int)(*(float *)(a1 + 8) / 0.1);
}

uint64_t sub_101385000()
{
  _QWORD *v0;
  _DWORD *v1;

  qword_10230E5A8 = 0;
  qword_10230E5B0 = 0;
  qword_10230E5B8 = 0;
  v0 = operator new(0x18uLL);
  qword_10230E5B0 = (uint64_t)(v0 + 3);
  qword_10230E5B8 = (uint64_t)(v0 + 3);
  *(_OWORD *)v0 = xmmword_101CA0298;
  v0[2] = 0x4282000042480000;
  qword_10230E5A8 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230E5A8, (void *)&_mh_execute_header);
  qword_10230E5C8 = 0;
  unk_10230E5D0 = 0;
  qword_10230E5C0 = 0;
  v1 = operator new(0x14uLL);
  qword_10230E5C8 = (uint64_t)(v1 + 5);
  unk_10230E5D0 = v1 + 5;
  v1[4] = 1108056474;
  *(_OWORD *)v1 = xmmword_101CA02B0;
  qword_10230E5C0 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230E5C0, (void *)&_mh_execute_header);
}

uint64_t sub_1013850C8(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1013851E4(a1, "CLNatalimetryRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021B1A88;
  *(_QWORD *)(a1 + 72) = off_1021B1B40;
  sub_100E81598((_QWORD *)(a1 + 392), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 408), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 424), 0, 0);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 460) = xmmword_101CA02C4;
  *(_OWORD *)(a1 + 476) = unk_101CA02D4;
  *(_OWORD *)(a1 + 492) = xmmword_101CA02E4;
  *(_OWORD *)(a1 + 504) = *(__int128 *)((char *)&xmmword_101CA02E4 + 12);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_1013851B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013851E4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021B1E30;
  *(_QWORD *)(a1 + 72) = off_1021B1ED8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B1E30;
  *(_QWORD *)(a1 + 72) = off_1021B1ED8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 312) = 12000;
  *(_QWORD *)(a1 + 320) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 328));
  *(_QWORD *)(a1 + 328) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 240) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_10138558C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[40] = off_10213DEB0;
  sub_100427950(v27);
  sub_10138C5CC(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_101385630()
{
  JUMPOUT(0x101385610);
}

_QWORD *sub_101385638(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B1ED8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B1E30;
  a1[40] = off_10213DEB0;
  sub_100427950(a1 + 41);
  sub_10138C5CC(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1013856B4(_QWORD *a1)
{
  *a1 = off_1021B1A88;
  a1[9] = off_1021B1B40;
  sub_1013856F8((uint64_t)a1, 0, 0);
  return sub_101385638(a1);
}

void sub_1013856F8(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 440) = a2;
    v6 = *(const void **)(a1 + 448);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 448) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_10194FA04();
    sub_10138576C(v7);
  }
}

_QWORD *sub_101385770(uint64_t a1)
{
  return sub_1013856B4((_QWORD *)(a1 - 72));
}

void sub_101385778(_QWORD *a1)
{
  sub_1013856B4(a1);
  operator delete();
}

void sub_10138579C(uint64_t a1)
{
  sub_1013856B4((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1013857C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double Current;
  double v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[3];
  __int16 v13;
  uint8_t buf[16];
  double v15;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v12[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v13 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_10008950C(a1 + 72))
    {
      sub_10001E638(*(_QWORD *)(a1 + 80));
      Current = CFAbsoluteTimeGetCurrent();
      if (!(*(unsigned int (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 104))(a1, buf))
      {
        v7 = Current - *(double *)(*(_QWORD *)(a2 + 8) - 24);
        if (v7 > v15)
          sub_101385AFC((float *)a1, v15, v7);
      }
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM NatalieHistory WHERE startTime < ?");
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "DB, Error expiring records.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "DB, Error expiring records.", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual long CLNatalimetryRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return -1;
}

void sub_101385AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101385AFC(float *a1, double a2, double a3)
{
  double v6;
  float v7;
  float v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  double v12;
  int v13;
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  _BYTE buf[24];
  double v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD v27[196];

  v6 = a3 - a2;
  v7 = sub_10023797C(a1 + 115, 0);
  v8 = v6 * (float)(v7 * a1[118]) / 3600.0;
  if ((uint64_t)(float)(v8 * 1000.0))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      v22 = a3;
      LOWORD(v23) = 2048;
      *(double *)((char *)&v23 + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "DB, Inserting basal calories %f for gap (%lf - %lf, %lfs)", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      v13 = 134218752;
      v14 = v8;
      v15 = 2048;
      v16 = a2;
      v17 = 2048;
      v18 = a3;
      v19 = 2048;
      v20 = v6;
      LODWORD(v12) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "DB, Inserting basal calories %f for gap (%lf - %lf, %lfs)", COERCE_DOUBLE(&v13), v12);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryRecorderDb::insertNataliesForGap(const CFAbsoluteTime, const CFAbsoluteTime)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    *(_OWORD *)buf = 0u;
    v22 = 0.0;
    *(double *)&buf[16] = a3;
    *(double *)&v23 = v7;
    *((double *)&v23 + 1) = v7;
    v24 = (uint64_t)(float)(v8 * 1000.0);
    v25 = v24;
    v26 = v6;
    v27[0] = 0;
    v27[1] = 0;
    uuid_clear((unsigned __int8 *)v27);
    (*(void (**)(float *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 120))(a1, buf, 0);
  }
}

uint64_t sub_101385D94(uint64_t a1, uint64_t a2)
{
  return sub_1013857C4(a1 - 72, a2);
}

uint64_t sub_101385D9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v6 = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v7 = 256;
  if (sub_10008950C(v4))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM NatalieHistory ORDER BY startTime ASC");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_101386004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10138604C(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  const unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uuid_t uu;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 20) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 32) = sqlite3_column_int64(v11, 5);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 40) = sqlite3_column_int64(v12, 6);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v13, 7);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v14, 8);
  memset(uu, 0, sizeof(uu));
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v16 = sqlite3_column_text(v15, 9);
  v17 = uuid_parse((const char *)v16, uu);
  v18 = (unsigned __int8 *)(a2 + 64);
  if (v17)
    uuid_clear(v18);
  else
    uuid_copy(v18, uu);
  return 0;
}

void sub_1013861BC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v2 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 29) = v2 != 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 28) = *(_DWORD *)(a1 + 48) != 0;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  uuid_copy((unsigned __int8 *)(a2 + 72), (const unsigned __int8 *)(a1 + 64));
}

uint64_t sub_101386214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  uint8_t buf[16];

  v2 = a1 + 112;
  v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if ((sub_10008950C(v3) & 1) != 0)
  {
    if (sub_100219C4C(*(_QWORD *)(a1 + 80)))
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM NatalieHistory WHERE id >= ? ORDER BY id DESC LIMIT ?");
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "DB, UUID un-initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "DB, UUID un-initialized", &v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "CMError CLNatalimetryRecorderDb::queryNatalieDataSince(CLNatalieData &, std::vector<CLNatalieData> &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v5 = 103;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DB, CalorimetryHistory not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "DB, CalorimetryHistory not accessible", &v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CMError CLNatalimetryRecorderDb::queryNatalieDataSince(CLNatalieData &, std::vector<CLNatalieData> &) const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v5;
}

void sub_10138709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101387100(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  uint8_t buf[12];

  v2 = a1 + 112;
  v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if ((sub_10008950C(v3) & 1) != 0)
  {
    if (sub_100219C4C(*(_QWORD *)(a1 + 80)))
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM NatalieHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC");
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "DB, UUID un-initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "DB, UUID un-initialized", &v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "CMError CLNatalimetryRecorderDb::queryNatalieData(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLNatalieData> &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v5 = 103;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "DB, not accessible", &v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CMError CLNatalimetryRecorderDb::queryNatalieData(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLNatalieData> &) const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v5;
}

void sub_1013877B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101387810(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  const __CFString *v9;
  const char *CStringPtr;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  char out[48];
  uuid_t uu;
  uint8_t buf[16];
  __int128 v23;
  unsigned __int8 v24[1608];

  v6 = a1 + 112;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  uuid_clear((unsigned __int8 *)&v23);
  uuid_clear(v24);
  memset(buf, 0, sizeof(buf));
  v7 = *(_OWORD *)v24;
  *(_QWORD *)(a3 + 48) = 0;
  v8 = *(_OWORD *)buf;
  *(_OWORD *)(a3 + 16) = v23;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)a3 = v8;
  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    v9 = (const __CFString *)sub_100219C4C(*(_QWORD *)(a1 + 80));
    if (v9)
    {
      memset(uu, 0, sizeof(uu));
      CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
      uuid_parse(CStringPtr, uu);
      memset(out, 0, 37);
      uuid_unparse(a2, out);
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from NatalieHistory WHERE sessionUUID = ? ORDER BY startTime ASC");
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v13 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "DB, UUID un-initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "DB, UUID un-initialized", &v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "CMError CLNatalimetryRecorderDb::getWorkoutMets(unsigned char *, CLWorkoutMets &) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v12 = 103;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v11 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "DB, not accessible", &v19, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "CMError CLNatalimetryRecorderDb::getWorkoutMets(unsigned char *, CLWorkoutMets &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v12 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v12;
}

void sub_101387DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101387E38(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM NatalieHistory");
  return 0xFFFFFFFFLL;
}

void sub_101387ED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101387EFC(uint64_t a1)
{
  return sub_101387E38(a1 - 72);
}

BOOL sub_101387F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v11[3];
  __int16 v12;
  _BYTE v13[80];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v11[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v12 = 256;
  if (sub_10008950C(v6))
  {
    sub_100087AF4((_QWORD *)(a1 + 424), v11);
    v7 = sub_10138604C(v11, (uint64_t)v13);
    v8 = v7 == 0;
    if (!v7)
      sub_1013861BC((uint64_t)v13, a2);
    v9 = v11[0];
    v11[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v8;
}

void sub_101387FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10138803C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_101388250(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "NatalieHistory", (const char **)&off_1021B1C10, (const std::string::value_type **)&off_1022FF880, 0);
    *(_QWORD *)(a1 + 392) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO NatalieHistory (startTime, activityType, isStanding, mets, natalies, basalNatalies, overrideSet, truthMets, sessionUUID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 400) = v2;
    *(_QWORD *)(a1 + 408) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM NatalieHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 416) = v3;
    *(_QWORD *)(a1 + 424) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM NatalieHistory ORDER BY startTime ASC LIMIT 1");
    *(_QWORD *)(a1 + 432) = v4;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "DB, Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "DB, Device is locked and we are unable to open the database", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalimetryRecorderDb::prepareSQLStatements()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_101388250(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *__p;
  const char *v6;
  int v7;
  __int16 v8;
  char v9;
  char v10;
  uint8_t buf[16];

  if (sub_100635B3C(*(_QWORD *)(a1 + 80), "NatalieHistory"))
  {
    v6 = "activityType";
    v7 = 5;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "NatalieHistory", (uint64_t)"activityType", (uint64_t)&v6);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DB, doesn't exist yet.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "DB, doesn't exist yet.", &__p, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_10138875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  if (a22 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a24);
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  sub_1018B38B4((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_1013887FC(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B1F18);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B1F18);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLNatalieData>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_101389994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_101389CB4(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM NatalieHistory");
  return result;
}

void sub_101389D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101389D6C(uint64_t a1)
{
  return sub_101389CB4(a1 - 72);
}

uint64_t sub_101389D74(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM NatalieHistory WHERE startTime > ?");
  }
  return result;
}

void sub_101389FB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101389FE4(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE NatalieHistory SET startTime = startTime + ?");
  return result;
}

void sub_10138A1EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10138A218(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  char v10;
  char v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_int64 v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  uint64_t v26;
  sqlite3_stmt *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  void *v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  _QWORD v37[5];
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  int v42;
  char v43;
  char v44;
  __int16 v45;
  double v46;
  double v47;
  uint64_t v48;
  sqlite3_int64 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int128 v55;
  uint64_t v56;
  char out[48];
  uint64_t v58;
  uint64_t v59;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, out);
    if (v5)
      v6 = 0;
    else
      v6 = v59;
    if (v5)
      v7 = 0;
    else
      v7 = v58;
    v8 = *(double *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 24);
    v10 = *(_BYTE *)(a2 + 28);
    v11 = *(_BYTE *)(a2 + 29);
    v34 = *(_DWORD *)(a2 + 4);
    v35 = *(_WORD *)(a2 + 30);
    v12 = *(double *)(a2 + 32);
    v13 = *(double *)(a2 + 40);
    v55 = *(_OWORD *)(a2 + 64);
    v56 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    memset(out, 0, 37);
    if (!uuid_is_null((const unsigned __int8 *)(a2 + 72)))
      uuid_unparse((const unsigned __int8 *)(a2 + 72), out);
    sub_100087AF4((_QWORD *)(a1 + 392), &v36);
    v16 = (sqlite3_stmt *)sub_100026CC8(v36);
    if (sub_1000890C4(v16, 1, v8))
    {
      v17 = (sqlite3_stmt *)sub_100026CC8(v36);
      if (sub_1000CD75C(v17, 2, v9))
      {
        v18 = (sqlite3_stmt *)sub_100026CC8(v36);
        if (sub_1000CD75C(v18, 3, v11 & 1))
        {
          v19 = (sqlite3_stmt *)sub_100026CC8(v36);
          if (sub_1000890C4(v19, 4, v12))
          {
            v20 = (sqlite3_stmt *)sub_100026CC8(v36);
            if (sub_1000CC50C(v20, 5, v15 + v7))
            {
              v21 = (sqlite3_stmt *)sub_100026CC8(v36);
              v22 = v14 + v6;
              if (sub_1000CC50C(v21, 6, v22))
              {
                v23 = (sqlite3_stmt *)sub_100026CC8(v36);
                if (sub_1000CD75C(v23, 7, v10 & 1))
                {
                  v24 = (sqlite3_stmt *)sub_100026CC8(v36);
                  if (sub_1000890C4(v24, 8, v13))
                  {
                    v25 = (sqlite3_stmt *)sub_100026CC8(v36);
                    if (sub_1000C9E20(v25, 9, out))
                    {
                      v26 = *(_QWORD *)(a1 + 80);
                      v27 = (sqlite3_stmt *)sub_100026CC8(v36);
                      sub_10023C9B0(v26, v27);
                      ++*(_DWORD *)(a1 + 132);
                      if (*(_QWORD *)(a1 + 440))
                      {
                        if (*(_QWORD *)(a1 + 448))
                        {
                          v28 = sub_10063E99C(*(_QWORD *)(a1 + 80));
                          v29 = sub_100219C4C(*(_QWORD *)(a1 + 80));
                          v30 = *(_QWORD *)(a2 + 56);
                          v31 = *(_QWORD *)(a2 + 48) - v30;
                          v32 = *(_WORD *)(a1 + 456);
                          v33 = *(void **)(a1 + 440);
                          v37[0] = _NSConcreteStackBlock;
                          v37[1] = 3221225472;
                          v37[2] = sub_10138A534;
                          v37[3] = &unk_1021B1B80;
                          v37[4] = a1;
                          v38 = v28;
                          v39 = v34;
                          v40 = v29;
                          v41 = v8;
                          v42 = v9;
                          v43 = v10;
                          v44 = v11;
                          v45 = v35;
                          v46 = v12;
                          v47 = v13;
                          v48 = v15 + v7;
                          v49 = v22;
                          v50 = v55;
                          v51 = v56;
                          v52 = v31;
                          v53 = v30;
                          v54 = v32;
                          objc_msgSend(v33, "async:", v37);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    result = v36;
    v36 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10138A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10138A534(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[5];
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 448);
  v2 = *(_OWORD *)(a1 + 88);
  v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v2;
  v6[4] = *(_OWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 120);
  v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD))(v1 + 16))(v1, v6, v3, *(_QWORD *)(a1 + 136), *(unsigned __int8 *)(a1 + 144), *(unsigned __int8 *)(a1 + 145));
}

uint64_t sub_10138A5C4()
{
  return 0;
}

uint64_t sub_10138A5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 408), &v12);
  v4 = v12;
  if (v12)
  {
    v5 = sub_10138604C(&v12, (uint64_t)buf);
    if (!(_DWORD)v5)
      sub_1013861BC((uint64_t)buf, a2);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "CalorimetryRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1BF0);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "CalorimetryRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", &v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLNatalimetryRecorderDb::getMostRecentRecordUL(CLNatalieData &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = 2;
  }
  v7 = v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v4)
    return 2;
  return v5;
}

void sub_10138A7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_10138A800(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double i;
  double v8;

  v4 = *(double *)(a4 + 16) - *(double *)(a4 + 64);
  if (v4 - *(double *)(a2 + 16) >= 86400.0)
    v5 = v4 + -86400.0;
  else
    v5 = *(double *)(a2 + 16);
  for (i = v4 - v5; i > 10.24; i = i + -3600.0)
  {
    if (i <= 3600.0)
      v8 = i;
    else
      v8 = 3600.0;
    sub_101385AFC(a1, v5, v5 + v8);
    v5 = v5 + 3600.0;
  }
}

uint64_t sub_10138A8B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_10194FB8C(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_10138AC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 177) < 0)
    operator delete(*(void **)(v3 - 200));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10138ACEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B1F18);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B1F18);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B1F18);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLNatalieData>::setDatabaseAccessible() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_10138B2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10138B314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id *sub_10138B338(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v44[16];
  double v45;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 240) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v44);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B1F18);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B1F18);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 16);
    v8 = v45;
    v9 = v7 - v45;
    if (v7 - v45 < 0.0)
      v9 = -(v7 - v45);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B1F18);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)buf = 134349312;
        v41 = v45;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B1F18);
        v26 = *(_QWORD *)(a2 + 16);
        v36 = 134349312;
        v37 = v45;
        v38 = 2050;
        v39 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 16);
      v8 = v45;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B1F18);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 16);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B1F18);
          v29 = *(double *)(a2 + 16);
          v36 = 134217984;
          v37 = v29;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B1F18);
        v18 = v34;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B1F18);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v44, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 256) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_10138BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10138BAB8(uint64_t a1)
{
  return sub_10138ACEC(a1 - 72);
}

void sub_10138BAC0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10138BAEC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10194FCF8(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_10138BE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10138BEE0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10194FE64(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_10138C140(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10194FFD0(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_10138C378(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10195013C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_10138C5A0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10138C5CC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 23;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 46;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_10138C660(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_1021B1F48;
  v5[6] = 0;
  sub_1011D4D78();
}

void sub_10138C6F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_10138C71C(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLExerciseMinuteSubscription::onNatalimetryUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B1F98);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLExerciseMinuteSubscription::onNatalimetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B1F98);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLExerciseMinuteSubscription::onNatalimetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10138D6E4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10138C8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10138C8F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1021B1F48;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[6];
    a1[6] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return sub_10002FA68((uint64_t)a1);
}

void sub_10138C958(_QWORD *a1)
{
  sub_10138C8F8(a1);
  operator delete();
}

_QWORD *sub_10138C97C@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_1021B2008;
  v11[1] = sub_10138CBF0;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageExerciseMinuteUpdate");
  sub_100BB7454((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_1021B20B8;
  v9[1] = sub_10138CEC8;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageExerciseMinuteQuery");
  sub_100BB7454((uint64_t)v16, (uint64_t)v9);
  sub_10138E41C(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_10138CB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_10138CBF0(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  NSNumber *v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  _BYTE buf[12];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v22 = 2048;
    v23 = a1;
    v24 = 1024;
    v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, Subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
    v10 = *(_QWORD *)(a1 + 24);
    v15 = 138412802;
    v16 = v10;
    v17 = 2048;
    v18 = a1;
    v19 = 1024;
    v20 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "ExerciseMinute, Subscription changed, %@, %p, %d", &v15, 28);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteSubscription::handleRequestExerciseMinuteUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v15 = 0;
  if ((sub_10138DB6C(a1, (int *)&v15) & 1) != 0)
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 4, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 4);
  }
  else
  {
    v13 = CMErrorMessage;
    v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    sub_10138DBC8(a1, buf);
  }

}

void sub_10138CE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10138CEC8(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  CLConnectionMessage *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  int *v18;
  int *v19;
  id v20;
  id v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  CLConnectionMessage *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  unsigned int v38;
  uint64_t v39;
  id v40;
  void *__p;
  int *v42;
  uint64_t v43;
  id v44[2];
  unsigned int v45;
  uint64_t v46;
  id v47;
  int v48;
  _BYTE v49[28];
  uint64_t v50;
  NSNumber *v51;
  uint64_t v52;
  _UNKNOWN **v53;
  uint8_t buf[4];
  _BYTE v55[28];
  uint64_t v56;
  NSNumber *v57;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v45 = 0;
  v5 = sub_10138DB6C(a1, (int *)&v45);
  v6 = *a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v8 = Dictionary;
    if (Dictionary
      && (v9 = CMExerciseMinuteRecordId, objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMExerciseMinuteRecordId)))
    {
      sub_100131938(v44, (uint64_t)"CLDaemonClient.ExerciseMinuteQuery", 0);
      __p = 0;
      v42 = 0;
      v43 = 0;
      v38 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "intValue");
      v10 = CMExerciseMinuteStartDate;
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CMExerciseMinuteStartDate))
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v10), "doubleValue");
      else
        v11 = 0;
      v39 = v11;
      v14 = CMExerciseMinuteSourceId;
      v15 = objc_msgSend(v8, "objectForKeyedSubscript:", CMExerciseMinuteSourceId);
      if (v15)
        v15 = objc_msgSend(v8, "objectForKeyedSubscript:", v14);
      v40 = v15;
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "syncgetQueryExerciseMinuteDataSince:records:", &v38, &__p);
      v45 = v16;
      if ((_DWORD)v16 == 100)
      {
        v17 = objc_alloc_init((Class)NSMutableArray);
        v18 = (int *)__p;
        v19 = v42;
        if (__p != v42)
        {
          do
          {
            if (*((_QWORD *)v18 + 2))
              v20 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *((_QWORD *)v18 + 2));
            else
              v20 = 0;
            v21 = objc_msgSend(objc_alloc((Class)CMExerciseMinuteData), "initWithStartDate:recordId:sourceId:", *v18, v20, *((double *)v18 + 1));
            objc_msgSend(v17, "addObject:", v21);

            v18 += 6;
          }
          while (v18 != v19);
        }
        if (objc_msgSend(v17, "count"))
        {
          sub_100197040();
          if (sub_10075D288())
          {
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
            v22 = qword_10229FC78;
            if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
            {
              v23 = objc_msgSend(v17, "lastObject");
              v24 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)buf = 138412802;
              *(_QWORD *)v55 = v23;
              *(_WORD *)&v55[8] = 2112;
              *(_QWORD *)&v55[10] = v24;
              *(_WORD *)&v55[18] = 2048;
              *(_QWORD *)&v55[20] = a1;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%@, %@, %p", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC70 != -1)
                dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
              v33 = qword_10229FC78;
              v34 = objc_msgSend(v17, "lastObject");
              v35 = *(_QWORD *)(a1 + 24);
              v48 = 138412802;
              *(_QWORD *)v49 = v34;
              *(_WORD *)&v49[8] = 2112;
              *(_QWORD *)&v49[10] = v35;
              *(_WORD *)&v49[18] = 2048;
              *(_QWORD *)&v49[20] = a1;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "%@, %@, %p", &v48, 32);
              v37 = (uint8_t *)v36;
              sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteSubscription::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v36);
              if (v37 != buf)
                free(v37);
            }
          }
        }
        v46 = CMExerciseMinuteDataArray;
        v47 = v17;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);

        CLConnectionMessage::sendReply(*a2);
      }
      else
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
        v25 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
        {
          v26 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 67240706;
          *(_DWORD *)v55 = (_DWORD)v16;
          *(_WORD *)&v55[4] = 2112;
          *(_QWORD *)&v55[6] = v26;
          *(_WORD *)&v55[14] = 2048;
          *(_QWORD *)&v55[16] = a1;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "ExerciseMinute, Error query response, %{public}d, %@, %p", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
          v30 = *(_QWORD *)(a1 + 24);
          v48 = 67240706;
          *(_DWORD *)v49 = (_DWORD)v16;
          *(_WORD *)&v49[4] = 2112;
          *(_QWORD *)&v49[6] = v30;
          *(_WORD *)&v49[14] = 2048;
          *(_QWORD *)&v49[16] = a1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "ExerciseMinute, Error query response, %{public}d, %@, %p", &v48, 28);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 0, "void CLExerciseMinuteSubscription::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        v27 = *a2;
        v50 = CMErrorMessage;
        v51 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16);
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
        CLConnectionMessage::sendReply(v27);
      }
      if (__p)
      {
        v42 = (int *)__p;
        operator delete(__p);
      }
      sub_100131740(v44);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
      v12 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "ExerciseMinute, Error in query request.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B1FD8);
        LOWORD(v48) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "ExerciseMinute, Error in query request.", &v48, 2);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 0, "void CLExerciseMinuteSubscription::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      v13 = *a2;
      v52 = CMErrorMessage;
      v53 = &off_10221DB50;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
      CLConnectionMessage::sendReply(v13);
    }
  }
  else
  {
    v56 = CMErrorMessage;
    v57 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v45);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_10138D674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  sub_100131740(&a18);

  _Unwind_Resume(a1);
}

void sub_10138D6E4(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  int v20;
  id v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  if (*a3 == 4)
  {
    if (*((_QWORD *)a4 + 2)
      && (v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *((_QWORD *)a4 + 2))) != 0)
    {
      v7 = v6;
      v8 = objc_msgSend(objc_alloc((Class)CMExerciseMinuteData), "initWithStartDate:recordId:sourceId:", *(int *)a4, v6, a4[1]);
      sub_100197040();
      if (sub_10075D288())
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021B1FB8);
        v9 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v8;
          v27 = 2112;
          v28 = v10;
          v29 = 2048;
          v30 = a1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021B1FB8);
          v15 = *(_QWORD *)(a1 + 24);
          v20 = 138412802;
          v21 = v8;
          v22 = 2112;
          v23 = v15;
          v24 = 2048;
          v25 = a1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "%@, %@, %p", &v20, 32);
          v17 = (char *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteSubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v11 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", v8, 0);
      v18 = CMExerciseMinuteDataArray;
      v19 = v11;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);

      sub_10138DAC4(a1, buf);
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B1FB8);
      v12 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "ExerciseMinute, error in update", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021B1FB8);
        LOWORD(v20) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "ExerciseMinute, error in update", &v20, 2);
        v14 = (char *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLExerciseMinuteSubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

void sub_10138DAC4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021B2128, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10138DB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10138DB6C(uint64_t a1, int *a2)
{
  uint64_t result;
  int v5;

  if (sub_10138DC68(a1))
  {
    if (!sub_1011C589C(*(_QWORD *)(a1 + 8)))
    {
      v5 = 104;
      goto LABEL_7;
    }
    if ((sub_1001BBC08(a1) & 1) != 0)
      return 1;
  }
  v5 = 105;
LABEL_7:
  result = 0;
  *a2 = v5;
  return result;
}

void sub_10138DBC8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_1021B2128, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10138DC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10138DC68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  _BYTE __p[12];
  __int16 v15;
  uint64_t v16;
  char v17;

  sub_1015A2E04(__p, "com.apple.locationd.natalimetry");
  v2 = sub_1002255E0(a1);
  v3 = v2;
  if (v17 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B1FB8);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = v5;
    v15 = 2048;
    v16 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client failed entitlement check for calorimetry, %@, %p", __p, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B1FB8);
    v7 = *(_QWORD *)(a1 + 24);
    v10 = 138412546;
    v11 = v7;
    v12 = 2048;
    v13 = a1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Client failed entitlement check for calorimetry, %@, %p", &v10, 22);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLExerciseMinuteSubscription::isEntitledForNatalimetry()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_10138DE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10138DE94(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10138DEC0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10138DEEC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_10138DF18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B2008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10138DF54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B2008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10138DF78(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_10138DFC8(a1 + 8, a2, a3);
}

uint64_t sub_10138DF80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10138DFBC()
{
}

void sub_10138DFC8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_10138E04C(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10138E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10138E04C(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B2078);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B2078);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_10138E234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_10138E250(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_10138E27C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B20B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10138E2B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B20B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10138E2DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10138E32C(a1 + 8, a2, a3);
}

uint64_t sub_10138E2E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10138E320()
{
}

void sub_10138E32C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_10138E400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10138E41C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_10138E494(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10138E480(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10138E494(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10138E714(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_10138E6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10138E714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10138E788(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10138E770(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10138E788(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10138E7E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10138E7FC()
{
  sub_1015A2E04(qword_10230E5D8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E5D8, (void *)&_mh_execute_header);
}

void sub_10138E840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE v19[40];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 __p;
  uint64_t v43;
  int v44;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = a1 + 884;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 255;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0xFFFF;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  v18 = _Q1;
  *(_OWORD *)(a1 + 100) = _Q1;
  *(_OWORD *)(a1 + 116) = _Q1;
  *(_OWORD *)(a1 + 132) = _Q1;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 180) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 188) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  sub_10012A33C(a1 + 224);
  *(_DWORD *)(a1 + 864) = 0xFFFF;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)v5 = xmmword_101BAFC90;
  *(_OWORD *)(v5 + 16) = v18;
  *(_OWORD *)(v5 + 32) = v18;
  *(_OWORD *)(v5 + 48) = v18;
  *(_DWORD *)(a1 + 948) = 0;
  *(_QWORD *)(a1 + 952) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 0;
  *(_QWORD *)(v5 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 988) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_BYTE *)(a1 + 1016) = 0;
  sub_10012A33C(a1 + 1024);
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_DWORD *)(a1 + 1696) = 1065353216;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_DWORD *)(a1 + 1760) = 1065353216;
  *(_OWORD *)(a1 + 1768) = 0u;
  sub_100270E34(a1 + 1784, a3);
  *(_OWORD *)(a1 + 1816) = 0u;
  sub_10138F310((_QWORD *)a1);
  v11 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:forClient:", CFSTR("CLClientManager"), CFSTR("CLEmergencyController"));
  *(_QWORD *)(a1 + 8) = v11;
  v12 = v11;
  *(_QWORD *)v19 = 11;
  *(_QWORD *)&v13 = -1;
  *((_QWORD *)&v13 + 1) = -1;
  *(_OWORD *)&v19[8] = v13;
  *(_OWORD *)&v19[24] = v13;
  v28 = 0xFFFFFFFFLL;
  LODWORD(v29) = 0;
  v30 = *(_OWORD *)v19;
  v31 = *(_OWORD *)&v19[16];
  v32 = -1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v20 = 0;
  v21 = 0uLL;
  v36 = 0u;
  v22 = 0uLL;
  v37 = 0;
  v39 = 0;
  v38 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
  v40 = 0u;
  v25 = 0uLL;
  v41 = 0;
  v43 = 0;
  __p = 0uLL;
  v26 = 0uLL;
  v27 = 0uLL;
  v44 = -1;
  sub_10139A710(a1 + 1728, (int *)&v29, (uint64_t)&v29);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  if (sub_1001DC538())
  {
    *(_QWORD *)v19 = 11;
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    *(_OWORD *)&v19[8] = v14;
    *(_OWORD *)&v19[24] = v14;
    v28 = 0xFFFFFFFFLL;
    LODWORD(v29) = 1;
    v31 = *(_OWORD *)&v19[16];
    v30 = *(_OWORD *)v19;
    v32 = -1;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v20 = 0;
    v21 = 0uLL;
    v36 = 0u;
    v22 = 0uLL;
    v37 = 0;
    v39 = 0;
    v38 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v40 = 0u;
    v25 = 0uLL;
    v41 = 0;
    v43 = 0;
    __p = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v44 = -1;
    sub_10139A710(a1 + 1728, (int *)&v29, (uint64_t)&v29);
    if (SHIBYTE(v43) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)v40);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v38);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
  }
  sub_10139AA3C((_QWORD *)a1, &v29);
  sub_1002B7674(a1 + 1768, (__int128 *)&v29);
  v15 = (std::__shared_weak_count *)v30;
  if ((_QWORD)v30)
  {
    v16 = (unint64_t *)(v30 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v29 = off_1021B2288;
  *(_QWORD *)&v30 = a1;
  *(_QWORD *)&v31 = &v29;
  *(_QWORD *)v19 = off_1021B2318;
  *(_QWORD *)&v19[8] = a1;
  *(_QWORD *)&v19[24] = v19;
  operator new();
}

void sub_10138F068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  void **v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  sub_10138FB64((uint64_t)&a54);
  sub_10138FBD4((uint64_t)&a33);
  v60 = 0;
  v61 = v54 + 1824;
  do
  {
    v62 = *(_QWORD *)(v61 + v60);
    *(_QWORD *)(v61 + v60) = 0;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v60 -= 8;
  }
  while (v60 != -16);
  v63 = *(_QWORD **)(v54 + 1808);
  if (v63 == a11)
  {
    v64 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_10;
    v64 = 5;
    a11 = *(_QWORD **)(v54 + 1808);
  }
  (*(void (**)(void))(*a11 + 8 * v64))();
LABEL_10:
  sub_100261F44(v56);
  sub_10139A628(v55);
  if (*(char *)(v54 + 1727) < 0)
    operator delete(*v58);
  sub_100127554(v54 + 1664);
  sub_100261F44(v54 + 1544);
  sub_100261F44(v54 + 744);
  v65 = *(_QWORD *)(v54 + 32);
  *(_QWORD *)(v54 + 32) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *(_QWORD *)(v54 + 24);
  *(_QWORD *)(v54 + 24) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *v57;
  *v57 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  _Unwind_Resume(a1);
}

void sub_10138F310(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _WORD v21[8];
  uint8_t buf[1640];

  if (!a1[2])
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Actor registering as client of Location Controller", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v21[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor registering as client of Location Controller", v21, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_1006AA544();
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor already registered as client of Location Controller", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v21[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor already registered as client of Location Controller", v21, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!a1[3])
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Actor registering as client of WiFi location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v21[0] = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor registering as client of WiFi location", v21, v20);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_1006B0CF0();
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor already registered as client of WiFi location", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v21[0] = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor already registered as client of WiFi location", v21, v20);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (!a1[4])
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Actor registering as client of Cell location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v21[0] = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor registering as client of Cell location", v21, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    sub_100D97258();
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Actor already registered as client of Cell location", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v21[0] = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor already registered as client of Cell location", v21, v20);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

uint64_t sub_10138FB64(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t sub_10138FBD4(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t sub_10138FC48(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  for (i = 1824; i != 1808; i -= 8)
  {
    v3 = *(_QWORD *)(a1 + i);
    *(_QWORD *)(a1 + i) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(_QWORD **)(a1 + 1808);
  if (v4 == (_QWORD *)(a1 + 1784))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 1784);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  sub_100261F44(a1 + 1768);
  sub_10139A628(a1 + 1728);
  if (*(char *)(a1 + 1727) < 0)
    operator delete(*(void **)(a1 + 1704));
  sub_100127554(a1 + 1664);
  sub_100261F44(a1 + 1544);
  sub_100261F44(a1 + 744);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_10138FD54(uint64_t a1, const std::string *a2)
{
  const std::string *v3;
  _QWORD *v4;
  std::string::size_type v5;
  unsigned int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const std::string *v14;
  __int16 v15;
  _QWORD *v16;

  v3 = (const std::string *)(a1 + 40);
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (*(char *)(a1 + 87) < 0)
  {
    **(_BYTE **)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 87) = 0;
  }
  v4 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 63);
    if (!*(_BYTE *)(a1 + 63))
      goto LABEL_14;
  }
  if (*(int *)(a1 + 36) <= 99)
    v6 = 2;
  else
    v6 = 3;
  std::string::reserve((std::string *)(a1 + 64), v5);
  v7 = v6 + 3;
  std::string::append((std::string *)(a1 + 64), v3, 0, v7);
  v8 = *(unsigned __int8 *)(a1 + 63);
  if ((v8 & 0x80) == 0)
  {
    if (v7 >= v8)
      goto LABEL_14;
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 > v7)
LABEL_13:
    std::string::append((std::string *)(a1 + 64), v8 - v6 - 3, 48);
LABEL_14:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 63) < 0)
      v3 = (const std::string *)v3->__r_.__value_.__r.__words[0];
    if (*(char *)(a1 + 87) < 0)
      v4 = (_QWORD *)*v4;
    v10[0] = 68289539;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v3;
    v15 = 2081;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor IMSI updated\", \"full\":%{private, location:escape_only}s, \"blanked\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x26u);
  }
}

void sub_10138FF18(uint64_t a1, const std::string *a2)
{
  const std::string *v3;
  _QWORD *v4;
  std::string::size_type v5;
  unint64_t v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const std::string *v12;
  __int16 v13;
  _QWORD *v14;

  v3 = (const std::string *)(a1 + 88);
  std::string::operator=((std::string *)(a1 + 88), a2);
  if (*(char *)(a1 + 135) < 0)
  {
    **(_BYTE **)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 135) = 0;
  }
  v4 = (_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 111) < 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 111);
    if (!*(_BYTE *)(a1 + 111))
      goto LABEL_11;
  }
  std::string::reserve((std::string *)(a1 + 112), v5);
  std::string::append((std::string *)(a1 + 112), v3, 0, 8uLL);
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 111);
    if (v6 < 9)
      goto LABEL_11;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a1 + 96);
  if (v6 > 8)
LABEL_10:
    std::string::append((std::string *)(a1 + 112), v6 - 8, 48);
LABEL_11:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 111) < 0)
      v3 = (const std::string *)v3->__r_.__value_.__r.__words[0];
    if (*(char *)(a1 + 135) < 0)
      v4 = (_QWORD *)*v4;
    v8[0] = 68289539;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2081;
    v12 = v3;
    v13 = 2081;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor IMEI updated\", \"full\":%{private, location:escape_only}s, \"blanked\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x26u);
  }
}

void sub_1013900C0(std::string::size_type a1, std::string::size_type a2)
{
  unint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t i;
  std::string::size_type v10;
  uint64_t v11;
  NSObject *v12;
  std::string::size_type v13;
  std::string *p_p;
  std::string::size_type v15;
  std::string *v16;
  const char *v17;
  std::string *v18;
  NSObject *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  const char *v27;
  std::string *v28;
  const char *v29;
  std::string *v30;
  uint64_t v31;
  std::string __p;
  int v33;
  _BYTE v34[10];
  _BYTE v35[10];
  __int16 v36;
  std::string *v37;
  std::string buf;
  __int16 v39;
  std::string *v40;

  if (*(char *)(a2 + 23) < 0 && (v4 = *(_QWORD *)(a2 + 8), v4 > 0x2BB))
  {
    v5 = vcvtpd_s64_f64((double)v4 / 700.0);
    if (v5 >= 21)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        buf.__r_.__value_.__r.__words[0] = 0x1404020100;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning #Actor limiting multi-line string to %{public}d lines", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v33 = 67240192;
        *(_DWORD *)v34 = 20;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #Actor limiting multi-line string to %{public}d lines", &v33, 8);
        v30 = (std::string *)v29;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", v29);
        if (v30 != &buf)
          free(v30);
      }
      v5 = 20;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v8) = *(unsigned __int8 *)(a2 + 23);
      if ((v8 & 0x80u) != 0)
        v8 = *(_QWORD *)(a2 + 8);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v8;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Actor splitting string (length %{public}d) into %{public}d parts", (uint8_t *)&buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      LODWORD(v22) = *(unsigned __int8 *)(a2 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a2 + 8);
      v33 = 67240448;
      *(_DWORD *)v34 = v22;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = v5;
      LODWORD(v31) = 14;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor splitting string (length %{public}d) into %{public}d parts", &v33, v31);
      v24 = (std::string *)v23;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", v23);
      if (v24 != &buf)
        free(v24);
    }
    if (v5 >= 1)
    {
      for (i = 0; i != v5; ++i)
      {
        memset(&__p, 0, sizeof(__p));
        v10 = (700 * i);
        if (i >= (v5 - 1))
        {
          v11 = *(unsigned __int8 *)(a2 + 23);
          if ((v11 & 0x80u) != 0)
            v11 = *(_QWORD *)(a2 + 8);
          std::string::basic_string(&buf, (const std::string *)a2, v10, v11 - v10, (std::allocator<char> *)&v33);
        }
        else
        {
          std::string::basic_string(&buf, (const std::string *)a2, v10, 0x2BCuLL, (std::allocator<char> *)&v33);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = buf;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v12 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 23) >= 0)
            v13 = a1;
          else
            v13 = *(_QWORD *)a1;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = i + 1;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = v5;
          v39 = 2081;
          v40 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}d of %{public}d : %{private}s", (uint8_t *)&buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          if (*(char *)(a1 + 23) >= 0)
            v15 = a1;
          else
            v15 = *(_QWORD *)a1;
          v16 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v33 = 136446979;
          *(_QWORD *)v34 = v15;
          *(_WORD *)&v34[8] = 1026;
          *(_DWORD *)v35 = i + 1;
          *(_WORD *)&v35[4] = 1026;
          *(_DWORD *)&v35[6] = v5;
          v36 = 2081;
          v37 = v16;
          LODWORD(v31) = 34;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "%{public}s %{public}d of %{public}d : %{private}s", &v33, v31);
          v18 = (std::string *)v17;
          sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", v17);
          if (v18 != &buf)
            free(v18);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 23) >= 0)
        v20 = a1;
      else
        v20 = *(_QWORD *)a1;
      if (*(char *)(a2 + 23) >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v20;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s : %{private}s", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      if (*(char *)(a1 + 23) >= 0)
        v25 = a1;
      else
        v25 = *(_QWORD *)a1;
      if (*(char *)(a2 + 23) >= 0)
        v26 = a2;
      else
        v26 = *(_QWORD *)a2;
      v33 = 136446467;
      *(_QWORD *)v34 = v25;
      *(_WORD *)&v34[8] = 2081;
      *(_QWORD *)v35 = v26;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "%{public}s : %{private}s", &v33, 22);
      v28 = (std::string *)v27;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", v27);
      if (v28 != &buf)
        free(v28);
    }
  }
}

void sub_101390884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1013908B4(void *a1, unsigned int a2)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v9;
  double v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  unsigned int v15;

  v2 = a1;
  v3 = a2 - 3;
  if (a2 > 3)
  {
    if (objc_msgSend(a1, "length") > a2)
    {
      v2 = objc_msgSend(objc_msgSend(v2, "substringWithRange:", 0, v3), "stringByAppendingString:", CFSTR("..."));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v15 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning #Actor truncated string to %{public}d characters", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v13[0] = 67240192;
        v13[1] = a2;
        v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #Actor truncated string to %{public}d characters", v13, 8);
        v7 = v12;
        sub_100512490("Generic", 1, 0, 2, "static NSString *CLEmergencyActor::getTruncatedString(NSString *, uint32_t)", "%s\n", v11);
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Actor truncated string max length is too small, not enforcing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      LOWORD(v13[0]) = 0;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor truncated string max length is too small, not enforcing", v13, 2);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 0, "static NSString *CLEmergencyActor::getTruncatedString(NSString *, uint32_t)", "%s\n", v5);
LABEL_20:
      if (v7 != buf)
        free(v7);
    }
  }
  return v2;
}

BOOL sub_101390BB8(uint64_t a1)
{
  _BOOL8 v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  int v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;

  v3 = *(double *)(a1 + 36) > 0.0 && *(_DWORD *)(a1 + 472) != -1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 28);
    v6 = *(float *)(a1 + 476);
    v7 = *(_QWORD *)(a1 + 36);
    v8 = *(_DWORD *)(a1 + 472);
    v10[0] = 68290307;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = v3;
    v15 = 2049;
    v16 = v5;
    v17 = 2049;
    v18 = v6;
    v19 = 2050;
    v20 = v7;
    v21 = 1026;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Actor,isAltitudeAvailable\", \"available\":%{public}hhd, \"altitude (MSL)\":\"%{private}f\", \"undulation\":\"%{private}f\", \"vunc\":\"%{public}f\", \"undulation model\":%{public}d}", (uint8_t *)v10, 0x3Cu);
  }
  return v3;
}

uint64_t sub_101390CF8(uint64_t a1, double *a2, double *a3)
{
  uint64_t result;
  double v7;
  double v8;
  double v9;

  result = sub_100182290(a1);
  if ((result & 1) != 0)
  {
    v8 = 0.0;
    v9 = 0.0;
    CLGetUncertaintyScaleFactors(95, &v9, &v8);
    *a2 = v9 * *(double *)(a1 + 20);
    result = sub_101390BB8(a1);
    v7 = -1.0;
    if ((_DWORD)result)
      v7 = v8 * *(double *)(a1 + 36);
  }
  else
  {
    *a2 = -1.0;
    v7 = -1.0;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_101390D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  _QWORD v11[2];
  void *v12[2];
  void *__p[2];
  char v14;
  _QWORD v15[2];
  _QWORD v16[2];

  sub_100119F3C(v16);
  sub_100119F3C(v15);
  sub_1015A2E04(__p, "AML");
  sub_101390F88((const char *)__p, a1, a2, v16, v15);
  if (v14 < 0)
    operator delete(__p[0]);
  sub_10120544C((uint64_t)v16, (uint64_t)v15, a3);
  sub_100119F3C(v12);
  sub_100119F3C(v11);
  sub_1015A2E04(v9, "EED2");
  sub_101390F88((const char *)v9, a1, a2, v12, v11);
  if (v10 < 0)
    operator delete(v9[0]);
  sub_1015A2E04(v7, "operator");
  sub_100A64C34((uint64_t *)v7, (uint64_t)v11, a3 + 144);
  if (v8 < 0)
    operator delete(v7[0]);
  sub_1015A2E04(v7, "carrier");
  sub_100A64C34((uint64_t *)v7, (uint64_t)v12, a3 + 480);
  if (v8 < 0)
    operator delete(v7[0]);
  sub_10011A5A8(v11);
  sub_10011A5A8(v12);
  sub_10011A5A8(v15);
  return sub_10011A5A8(v16);
}

void sub_101390EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  sub_10011A5A8(&a22);
  sub_10011A5A8(&a24);
  sub_10011A5A8(v31 - 64);
  sub_10011A5A8(v31 - 48);
  _Unwind_Resume(a1);
}

void sub_101390F88(const char *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  const char *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint8_t buf[4];
  const char *v24;

  v8 = a1;
  v9 = a1;
  if (a1[23] < 0)
    v9 = *(const char **)a1;
  if (!sub_100006BB4(a2, v9, a4))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v11 = v8;
      if (v8[23] < 0)
        v11 = *(const char **)v8;
      *(_DWORD *)buf = 136446210;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Actor No %{public}s dict found in carrier bundle, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v15 = v8;
      if (v8[23] < 0)
        v15 = *(const char **)v8;
      v21 = 136446210;
      v22 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor No %{public}s dict found in carrier bundle, using default", &v21, 12);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyActor::extractCarrierAndOperatorDictsForTag(std::string, const CLNameValuePair &, const CLNameValuePair &, CLNameValuePair &, CLNameValuePair &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v12 = v8;
  if (v8[23] < 0)
    v12 = *(const char **)v8;
  if (!sub_100006BB4(a3, v12, a5))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v14 = v8;
      if (v8[23] < 0)
        v14 = *(const char **)v8;
      *(_DWORD *)buf = 136446210;
      v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Actor No %{public}s dict found in operator bundle, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      if (v8[23] < 0)
        v8 = *(const char **)v8;
      v21 = 136446210;
      v22 = v8;
      LODWORD(v20) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor No %{public}s dict found in operator bundle, using default", &v21, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyActor::extractCarrierAndOperatorDictsForTag(std::string, const CLNameValuePair &, const CLNameValuePair &, CLNameValuePair &, CLNameValuePair &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

uint64_t sub_101391308(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  v1 = sub_100A6BF70(*(_QWORD *)(a1 + 1824));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = "not be displayed";
    if ((_DWORD)v1)
      v3 = "be displayed";
    *(_DWORD *)buf = 136446210;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor EED UI should %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v5 = "not be displayed";
    if ((_DWORD)v1)
      v5 = "be displayed";
    v8 = 136446210;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor EED UI should %{public}s", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyActor::shouldDisplayEEDUI()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v1;
}

uint64_t sub_1013914EC(uint64_t a1, _QWORD *a2)
{
  return sub_100A6BF78(*(_QWORD *)(a1 + 1824), a2);
}

uint64_t sub_1013914F4(uint64_t a1, _QWORD *a2)
{
  return sub_100A6C384(*(_QWORD *)(a1 + 1824), a2);
}

void sub_1013914FC(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  int v4;
  std::string::size_type v5;
  std::string *v6;
  std::string *v7;
  NSObject *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  const char *v20;
  char v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  std::string *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v34;
  int v35;
  uint8_t buf[8];
  __int16 v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[18];
  std::string v41;
  std::string v42;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278((_DWORD *)(a1 + 44), &v42);
    v4 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
    v5 = v42.__r_.__value_.__r.__words[0];
    sub_100CD5278(a2, &v41);
    v6 = &v42;
    if (v4 < 0)
      v6 = (std::string *)v5;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v41;
    else
      v7 = (std::string *)v41.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v37 = 2082;
    v38 = "";
    v39 = 2082;
    *(_QWORD *)v40 = v6;
    *(_WORD *)&v40[8] = 2082;
    *(_QWORD *)&v40[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor emergency state change\", \"oldState\":%{public, location:escape_only}s, \"newState\":%{public, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (!sub_100CD597C(a1 + 44) && sub_100CD597C((uint64_t)a2))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a1 + 41);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v37 = 2082;
      v38 = "";
      v39 = 1026;
      *(_DWORD *)v40 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #Actor\", \"LS\":%{public}d}", buf, 0x18u);
    }
    v10 = *(uint64_t **)(a1 + 1744);
    if (v10)
    {
      v11 = qword_1022A0080;
      do
      {
        if (v11 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v12 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *((_DWORD *)v10 + 4);
          v14 = *((unsigned __int8 *)v10 + 28);
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          v37 = 2082;
          v38 = "";
          v39 = 1026;
          *(_DWORD *)v40 = v13;
          *(_WORD *)&v40[4] = 1025;
          *(_DWORD *)&v40[6] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #Actor\", \"inst\":%{public}d, \"InHomeCountry\":%{private}d}", buf, 0x1Eu);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        }
        v15 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v16 = v10 + 20;
          if (*((char *)v10 + 183) < 0)
            v16 = (_QWORD *)*v16;
          v17 = *((_DWORD *)v10 + 4);
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          v37 = 2082;
          v38 = "";
          v39 = 1026;
          *(_DWORD *)v40 = v17;
          *(_WORD *)&v40[4] = 2081;
          *(_QWORD *)&v40[6] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #Actor\", \"inst\":%{public}d, \"PhoneNum\":%{private, location:escape_only}s}", buf, 0x22u);
          v11 = qword_1022A0080;
        }
        else
        {
          v11 = -1;
        }
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  v18 = 0;
  v19 = *(_OWORD *)a2;
  v20 = "UnknownAction";
  v21 = 1;
  *(_DWORD *)(a1 + 60) = a2[4];
  *(_OWORD *)(a1 + 44) = v19;
  do
  {
    v22 = v21;
    v23 = *(_QWORD *)(a1 + 1816 + 8 * v18);
    if (v23)
    {
      v34 = *(_OWORD *)a2;
      v35 = a2[4];
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 32))(v23, &v34);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v24 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v22 & 1) != 0)
          v25 = "AML";
        else
          v25 = (char *)v20;
        sub_1015A2E04(buf, v25);
        v26 = buf;
        if (v40[3] < 0)
          v26 = *(uint8_t **)buf;
        LODWORD(v42.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencyStateChange,pointer was null for %{public}s", (uint8_t *)&v42, 0xCu);
        if ((v40[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v27 = qword_1022A0088;
        if ((v22 & 1) != 0)
          v28 = "AML";
        else
          v28 = "EED2";
        sub_1015A2E04(&v42, v28);
        v29 = &v42;
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)v42.__r_.__value_.__r.__words[0];
        LODWORD(v41.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        LODWORD(v32) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 16, "#Actor,handleEmergencyStateChange,pointer was null for %{public}s", &v41, v32);
        v31 = v30;
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
    }
    v21 = 0;
    v20 = "EED2";
    v18 = 1;
  }
  while ((v22 & 1) != 0);
  sub_101391AF0(a1);
  sub_101391DE4(a1);
}

void sub_101391ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_101391AF0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1816) + 16))(*(_QWORD *)(a1 + 1816)))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor sending lockout NILR", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor sending lockout NILR", v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::modifyNilrHandlingFlags()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    buf[0] = 1;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor sending disable NILR lockout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor sending disable NILR lockout", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::modifyNilrHandlingFlags()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    buf[0] = 0;
  }
  v4 = *(_QWORD *)(a1 + 1808);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
}

void sub_101391DE4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _BYTE buf[12];
  char v18;
  int v19;
  _BYTE *v20;
  void *__p[2];
  char v22;

  v2 = 0;
  v3 = "UnknownAction";
  v4 = a1 + 1816;
  v5 = 1;
  while (1)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8 * v2);
    if (!v7)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 1) != 0)
          v9 = "AML";
        else
          v9 = (char *)v3;
        sub_1015A2E04(__p, v9);
        v10 = __p;
        if (v22 < 0)
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor,checkLocationRegistration,pointer was null for %{public}s", buf, 0xCu);
        if (v22 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v11 = qword_1022A0088;
        if ((v6 & 1) != 0)
          v12 = "AML";
        else
          v12 = "EED2";
        sub_1015A2E04(buf, v12);
        v13 = buf;
        if (v18 < 0)
          v13 = *(_BYTE **)buf;
        v19 = 136446210;
        v20 = v13;
        LODWORD(v16) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 16, "#Actor,checkLocationRegistration,pointer was null for %{public}s", &v19, v16);
        v15 = v14;
        if (v18 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::checkLocationRegistration()", "%s\n", v15);
        if (v15 != (char *)__p)
          free(v15);
      }
      goto LABEL_16;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) & 1) != 0)
      break;
LABEL_16:
    v5 = 0;
    v3 = "EED2";
    v2 = 1;
    if ((v6 & 1) == 0)
      goto LABEL_32;
  }
  if (!sub_100CD597C(a1 + 44))
  {
LABEL_32:
    sub_10139643C(a1);
    return;
  }
  if (sub_100CD597C(a1 + 44))
    sub_101396AD8(a1);
}

void sub_1013920A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _BYTE buf[12];
  char v25;
  int v26;
  _BYTE *v27;
  void *__p[2];
  char v29;

  v9 = 0;
  v10 = "UnknownAction";
  v11 = a1 + 1816;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8 * v9);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, a2, a3, a4, a5);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v13 & 1) != 0)
          v16 = "AML";
        else
          v16 = (char *)v10;
        sub_1015A2E04(__p, v16);
        v17 = __p;
        if (v29 < 0)
          v17 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencyCallStatusChange,pointer was null for %{public}s", buf, 0xCu);
        if (v29 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18 = qword_1022A0088;
        if ((v13 & 1) != 0)
          v19 = "AML";
        else
          v19 = "EED2";
        sub_1015A2E04(buf, v19);
        v20 = buf;
        if (v25 < 0)
          v20 = *(_BYTE **)buf;
        v26 = 136446210;
        v27 = v20;
        LODWORD(v23) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 16, "#Actor,handleEmergencyCallStatusChange,pointer was null for %{public}s", &v26, v23);
        v22 = v21;
        if (v25 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleEmergencyCallStatusChange(NSString *, CLEmergencyController::EmergencyTriggerType, CLEmergencyController::CallStatus, BOOL)", "%s\n", v22);
        if (v22 != (char *)__p)
          free(v22);
      }
    }
    v12 = 0;
    v10 = "EED2";
    v9 = 1;
  }
  while ((v13 & 1) != 0);
}

void sub_10139234C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  void **v12;
  int v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  int v17;
  char *v18;
  char *v19;
  NSObject *v20;
  const char *v21;
  char *v22;
  void **v23;
  NSObject *v24;
  const char *v25;
  char *v26;
  void **v27;
  int v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  _BYTE *v43;
  __int16 v44;
  int v45;
  _BYTE buf[12];
  __int16 v47;
  int v48;
  char v49;
  void *__p[2];
  char v51;

  v5 = 0;
  v41 = 0;
  v40 = a1;
  v6 = a1 + 1816;
  do
  {
    while (1)
    {
      v7 = v5;
      v8 = *(_QWORD *)(v6 + 8 * v5);
      if (!v8)
        break;
      if (!(*(unsigned int (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v8 + 48))(v8, a2, a3))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v9 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v10 = "UnknownAction";
          if (v7 == 1)
            v10 = "EED2";
          if (v7)
            v11 = (char *)v10;
          else
            v11 = "AML";
          sub_1015A2E04(__p, v11);
          if (v51 >= 0)
            v12 = __p;
          else
            v12 = (void **)__p[0];
          v13 = *a2;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v12;
          v47 = 1026;
          v48 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Actor,handleEmergencySettingsChange,%{public}s settings did not change due to CB update for inst %{public}d", buf, 0x12u);
          if (v51 < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v14 = qword_1022A0088;
          if (v7)
            v15 = "EED2";
          else
            v15 = "AML";
          sub_1015A2E04(buf, v15);
          v16 = buf;
          if (v49 < 0)
            v16 = *(_BYTE **)buf;
          v17 = *a2;
          v42 = 136446466;
          v43 = v16;
          v44 = 1026;
          v45 = v17;
          LODWORD(v39) = 18;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 0, "#Actor,handleEmergencySettingsChange,%{public}s settings did not change due to CB update for inst %{public}d", &v42, v39);
          v19 = v18;
          if (v49 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v19);
LABEL_70:
          if (v19 != (char *)__p)
            free(v19);
          goto LABEL_42;
        }
        goto LABEL_42;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v24 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v25 = "UnknownAction";
        if (v7 == 1)
          v25 = "EED2";
        if (v7)
          v26 = (char *)v25;
        else
          v26 = "AML";
        sub_1015A2E04(__p, v26);
        if (v51 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        v28 = *a2;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v27;
        v47 = 1026;
        v48 = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Actor,handleEmergencySettingsChange,%{public}s settings changed due to CB update for inst %{public}d", buf, 0x12u);
        if (v51 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v33 = qword_1022A0088;
        if (v7)
          v34 = "EED2";
        else
          v34 = "AML";
        sub_1015A2E04(buf, v34);
        v35 = buf;
        if (v49 < 0)
          v35 = *(_BYTE **)buf;
        v36 = *a2;
        v42 = 136446466;
        v43 = v35;
        v44 = 1026;
        v45 = v36;
        LODWORD(v39) = 18;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v33, 0, "#Actor,handleEmergencySettingsChange,%{public}s settings changed due to CB update for inst %{public}d", &v42, v39);
        v38 = v37;
        if (v49 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v38);
        if (v38 != (char *)__p)
          free(v38);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 24))(*(_QWORD *)(v6 + 8 * v7));
      v5 = 1;
      v41 = 1;
      if (v7)
        goto LABEL_84;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v21 = "UnknownAction";
      if (v7 == 1)
        v21 = "EED2";
      if (v7)
        v22 = (char *)v21;
      else
        v22 = "AML";
      sub_1015A2E04(__p, v22);
      if (v51 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencySettingsChange,pointer was null for %{public}s", buf, 0xCu);
      if (v51 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v29 = qword_1022A0088;
      if (v7)
        v30 = "EED2";
      else
        v30 = "AML";
      sub_1015A2E04(buf, v30);
      v31 = buf;
      if (v49 < 0)
        v31 = *(_BYTE **)buf;
      v42 = 136446210;
      v43 = v31;
      LODWORD(v39) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v29, 16, "#Actor,handleEmergencySettingsChange,pointer was null for %{public}s", &v42, v39, v40);
      v19 = v32;
      if (v49 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v19);
      goto LABEL_70;
    }
LABEL_42:
    v5 = 1;
  }
  while (!v7);
  if ((v41 & 1) == 0)
    return;
LABEL_84:
  sub_101391AF0(v40);
  sub_101391DE4(v40);
}

uint64_t *sub_1013929B8(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t *result;
  const char *v10;
  uint8_t *v11;
  int v12;
  _DWORD v13[4];
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  v12 = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = a2;
    v19 = 1026;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor handleInHomeCountryStatus\", \"inst\":%{public}d, \"inHomeCountry\":%{public}hhd}", buf, 0x1Eu);
  }
  v7 = (_QWORD *)(a1 + 1728);
  if (!sub_1001F8DEC(v7, &v12))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor handleInHomeCountryStatus called with unexpected inst instance %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v13[0] = 67109120;
      v13[1] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor handleInHomeCountryStatus called with unexpected inst instance %d", v13);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleInHomeCountryStatus(const SimInstance, const BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  *(_QWORD *)buf = &v12;
  result = sub_1001F6864((uint64_t)v7, &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  *((_BYTE *)result + 28) = a3;
  return result;
}

void sub_101392C4C(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  *(_BYTE *)(a1 + 41) = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)buf = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor handleLocationServicesStatusChange\", \"fLocationServicesEnabled\":%{public}hhd}", buf, 0x18u);
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    if (sub_100219C64(a1 + 44))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Actor clearing cached location due to LS off", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_20;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v12[0] = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor clearing cached location due to LS off", v12, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handleLocationServicesStatusChange(const BOOL)", "%s\n", v6);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor LS unexpectedly turned off during an emergency, still clearing cached location", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_20;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v12[0] = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor LS unexpectedly turned off during an emergency, still clearing cached location", v12, 2);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleLocationServicesStatusChange(const BOOL)", "%s\n", v10);
    }
    if (v8 != buf)
      free(v8);
LABEL_20:
    sub_10021CBD4(a1 + 64);
    sub_10021CBD4(a1 + 864);
  }
}

void sub_101392FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  void **v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE buf[12];
  char v27;
  int v28;
  _BYTE *v29;
  void *__p[2];
  char v31;

  v11 = 0;
  v12 = "UnknownAction";
  v13 = a1 + 1816;
  v14 = 1;
  do
  {
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8 * v11);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 56))(v16, a2, a3, a4, a5, a6);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v15 & 1) != 0)
          v18 = "AML";
        else
          v18 = (char *)v12;
        sub_1015A2E04(__p, v18);
        v19 = __p;
        if (v31 < 0)
          v19 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Actor,handleSmsNotification,pointer was null for %{public}s", buf, 0xCu);
        if (v31 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v20 = qword_1022A0088;
        if ((v15 & 1) != 0)
          v21 = "AML";
        else
          v21 = "EED2";
        sub_1015A2E04(buf, v21);
        v22 = buf;
        if (v27 < 0)
          v22 = *(_BYTE **)buf;
        v28 = 136446210;
        v29 = v22;
        LODWORD(v25) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 16, "#Actor,handleSmsNotification,pointer was null for %{public}s", &v28, v25);
        v24 = v23;
        if (v27 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleSmsNotification(SimInstance, BOOL, uint32_t, int32_t, int32_t)", "%s\n", v24);
        if (v24 != (char *)__p)
          free(v24);
      }
    }
    v14 = 0;
    v12 = "EED2";
    v11 = 1;
  }
  while ((v15 & 1) != 0);
}

void sub_101393254(uint64_t a1, int a2, const std::string *a3, const std::string *a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint8_t buf[8];

  HIDWORD(v15) = a2;
  v6 = a1 + 1728;
  if (!sub_1001F8DEC((_QWORD *)(a1 + 1728), (int *)&v15 + 1))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = HIDWORD(v15);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Actor handleSimStatusChange called with unexpected instance %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v16 = 67109120;
      v17 = HIDWORD(v15);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor handleSimStatusChange called with unexpected instance %d", &v16);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleSimStatusChange(SimInstance, const std::string &, const std::string &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  *(_QWORD *)buf = (char *)&v15 + 4;
  v8 = sub_1001F6864(v6, (int *)&v15 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = HIDWORD(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Actor updating IMSI and IMEI %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v16 = 67240192;
    v17 = HIDWORD(v15);
    LODWORD(v15) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor updating IMSI and IMEI %{public}d", &v16, v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handleSimStatusChange(SimInstance, const std::string &, const std::string &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v10 = (uint64_t)(v8 + 3);
  sub_10138FD54(v10, a3);
  sub_10138FF18(v10, a4);
}

void sub_1013935BC(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  void **v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _BYTE buf[12];
  char v17;
  int v18;
  _BYTE *v19;
  void *__p[2];
  char v21;

  v1 = 0;
  v2 = "UnknownAction";
  v3 = a1 + 1816;
  v4 = 1;
  do
  {
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8 * v1);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v8 = (v5 & 1) != 0 ? "AML" : (char *)v2;
        sub_1015A2E04(__p, v8);
        v9 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Actor,handleRatChange,pointer was null for %{public}s", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v10 = qword_1022A0088;
        if ((v5 & 1) != 0)
          v11 = "AML";
        else
          v11 = "EED2";
        sub_1015A2E04(buf, v11);
        v12 = buf;
        if (v17 < 0)
          v12 = *(_BYTE **)buf;
        v18 = 136446210;
        v19 = v12;
        LODWORD(v15) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 16, "#Actor,handleRatChange,pointer was null for %{public}s", &v18, v15);
        v14 = v13;
        if (v17 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleRatChange()", "%s\n", v14);
        if (v14 != (char *)__p)
          free(v14);
      }
    }
    v4 = 0;
    v2 = "EED2";
    v1 = 1;
  }
  while ((v5 & 1) != 0);
}

void sub_101393840(std::string *a1, int a2, int a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  NSObject *v10;
  int v11;
  int v12;
  _QWORD *v13;
  id v14;
  const std::string *v15;
  const char *v16;
  std::string *v17;
  int v18;
  _DWORD v19[4];
  std::string buf;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v18 = a2;
  v7 = (uint64_t)&a1[72];
  if (!sub_1001F8DEC(a1[72].__r_.__value_.__r.__words, &v18))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v18;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor handleSubscriberMccAndMncNotification called with unexpected inst %d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v19[0] = 67109120;
      v19[1] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor handleSubscriberMccAndMncNotification called with unexpected inst %d", v19);
      v17 = (std::string *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleSubscriberMccAndMncNotification(SimInstance, int32_t, int32_t)", "%s\n", v16);
      if (v17 != &buf)
        free(v17);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  v9 = sub_1001F6864(v7, &v18, (uint64_t)&unk_101B9EB60, &buf);
  *((_DWORD *)v9 + 14) = a3;
  *((_DWORD *)v9 + 15) = a4;
  sub_10138FD54((uint64_t)(v9 + 3), (const std::string *)(v9 + 8));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *((_DWORD *)v9 + 14);
    v12 = *((_DWORD *)v9 + 15);
    buf.__r_.__value_.__r.__words[0] = 68289795;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v18;
    v21 = 1025;
    v22 = v11;
    v23 = 1025;
    v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor sim MCC and MNC updated\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d}", (uint8_t *)&buf, 0x24u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  v13 = sub_1009707B4((uint64_t)&a1[69].__r_.__value_.__l.__size_, &v18, (uint64_t)&unk_101B9EB60, &buf);
  v14 = sub_101393BC8((uint64_t)(v13 + 3), *((unsigned int *)v9 + 14));
  if (v14)
  {
    sub_1015A2E04(&buf, (char *)objc_msgSend(v14, "UTF8String"));
    std::string::operator=((std::string *)(v9 + 20), &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    v15 = (const std::string *)sub_1009707B4((uint64_t)&a1[69].__r_.__value_.__l.__size_, &v18, (uint64_t)&unk_101B9EB60, &buf);
    std::string::operator=((std::string *)(v9 + 20), v15 + 1);
  }
  sub_101394020(a1, a1 + 71);
}

void sub_101393BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101393BC8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint64_t v5;
  uint64_t v6;
  id result;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t *v11;
  _QWORD v12[2];
  uint8_t buf[1640];

  if ((a2 - 1000) <= 0xFFFFFC18)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,invalid MCC", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,invalid MCC", v12, 2, v12[0]);
    goto LABEL_41;
  }
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,phone number is empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,phone number is empty", v12, 2, v12[0]);
    goto LABEL_41;
  }
  v6 = TUISOCountryCodeForMCC(-[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), "stringValue"));
  if (!v6)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,country code is not valid", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,country code is not valid", v12, 2, v12[0]);
    goto LABEL_41;
  }
  result = sub_101394358((uint64_t *)a1, v6);
  if (result)
    return result;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to format number based on country code", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to format number based on country code", v12, 2, v12[0]);
LABEL_41:
    v11 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "static NSString *CLEmergencyActor::getE164FormattedPhoneNumber(const std::string &, int32_t)", "%s\n", v3);
    if (v11 != buf)
      free(v11);
  }
  return 0;
}

void sub_101394020(std::string *a1, const std::string *a2)
{
  uint64_t *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  char v8;
  char v9;
  std::string::size_type v10;
  NSObject *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  std::string v20;
  _BYTE buf[12];
  char v22;
  int v23;
  _BYTE *v24;
  void *__p[2];
  char v26;

  std::string::operator=(a1 + 71, a2);
  LODWORD(v20.__r_.__value_.__l.__data_) = 0;
  __p[0] = &v20;
  v4 = sub_1001F6864((uint64_t)&a1[72], (int *)&v20, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
  v5 = sub_101393BC8((uint64_t)a2, *((unsigned int *)v4 + 14));
  memset(&v20, 0, sizeof(v20));
  if (v5)
    std::string::assign(&v20, (const std::string::value_type *)objc_msgSend(v5, "UTF8String"));
  else
    std::string::operator=(&v20, a2);
  v6 = 0;
  v7 = "UnknownAction";
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = a1[75].__r_.__value_.__r.__words[v6 + 2];
    if (v10)
    {
      (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v10 + 80))(v10, &v20);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v12 = (v9 & 1) != 0 ? "AML" : (char *)v7;
        sub_1015A2E04(__p, v12);
        v13 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Actor,handleCompanionNumberChange,pointer was null for %{public}s", buf, 0xCu);
        if (v26 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v14 = qword_1022A0088;
        if ((v9 & 1) != 0)
          v15 = "AML";
        else
          v15 = "EED2";
        sub_1015A2E04(buf, v15);
        v16 = buf;
        if (v22 < 0)
          v16 = *(_BYTE **)buf;
        v23 = 136446210;
        v24 = v16;
        LODWORD(v19) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 16, "#Actor,handleCompanionNumberChange,pointer was null for %{public}s", &v23, v19);
        v18 = v17;
        if (v22 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleCompanionNumberChange(const std::string &)", "%s\n", v18);
        if (v18 != (char *)__p)
          free(v18);
      }
    }
    v8 = 0;
    v7 = "EED2";
    v6 = 1;
  }
  while ((v9 & 1) != 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_101394324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101394358(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  void *String;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t *v11;
  _QWORD v12[2];
  uint8_t buf[1640];

  v2 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a2 || !a1[1])
      goto LABEL_11;
    v2 = (uint64_t *)*a1;
  }
  else if (!a2 || !*((_BYTE *)a1 + 23))
  {
LABEL_11:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,input missing", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,input missing", v12, 2, v12[0]);
    goto LABEL_36;
  }
  v3 = CFPhoneNumberCreate(0, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2), a2);
  if (!v3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to create CFPhoneNumber", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to create CFPhoneNumber", v12, 2, v12[0]);
    goto LABEL_36;
  }
  v4 = (const void *)v3;
  String = (void *)CFPhoneNumberCreateString(0, v3, 2);
  CFRelease(v4);
  if (String)
    return String;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to create formated phone number", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to create formated phone number", v12, 2, v12[0]);
LABEL_36:
    v11 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static NSString *CLEmergencyActor::getE164FormattedPhoneNumber(const std::string &, NSString *)", "%s\n", v8);
    if (v11 != buf)
      free(v11);
  }
  return 0;
}

void sub_101394728(uint64_t a1, unsigned int a2, const std::string *a3)
{
  uint64_t v5;
  NSObject *v6;
  std::string *v7;
  uint64_t *v8;
  id v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  std::string *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  std::string *v23;
  std::string *v24;
  _QWORD *v25;
  const char *v26;
  std::string *v27;
  const char *v28;
  std::string *v29;
  uint64_t v30;
  unsigned int v31;
  _BYTE v32[18];
  char v33;
  int v34;
  _BYTE *v35;
  std::string buf[68];

  v31 = a2;
  v5 = a1 + 1728;
  if (!sub_1001F8DEC((_QWORD *)(a1 + 1728), (int *)&v31))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v31;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor handlePhoneNumberChange called with unexpected instance %d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      *(_DWORD *)v32 = 67109120;
      *(_DWORD *)&v32[4] = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor handlePhoneNumberChange called with unexpected instance %d", v32);
      v29 = (std::string *)v28;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handlePhoneNumberChange(SimInstance, const std::string)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v7 = (std::string *)sub_1009707B4(a1 + 1664, (int *)&v31, (uint64_t)&unk_101B9EB60, buf);
  std::string::operator=(v7 + 1, a3);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v8 = sub_1001F6864(v5, (int *)&v31, (uint64_t)&unk_101B9EB60, buf);
  v9 = sub_101393BC8((uint64_t)a3, *((unsigned int *)v8 + 14));
  if (v9)
  {
    sub_1015A2E04(buf, (char *)objc_msgSend(v9, "UTF8String"));
    std::string::operator=((std::string *)(v8 + 20), buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::operator=((std::string *)(v8 + 20), a3);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v11 = v8 + 20;
    if (*((char *)v8 + 183) < 0)
      v11 = (_QWORD *)*v11;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109379;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v31;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Actor phone number changed %d, phone number, %{private}s", (uint8_t *)buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v25 = v8 + 20;
    if (*((char *)v8 + 183) < 0)
      v25 = (_QWORD *)*v25;
    *(_DWORD *)v32 = 67109379;
    *(_DWORD *)&v32[4] = v31;
    *(_WORD *)&v32[8] = 2081;
    *(_QWORD *)&v32[10] = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor phone number changed %d, phone number, %{private}s", v32, 18);
    v27 = (std::string *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handlePhoneNumberChange(SimInstance, const std::string)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v12 = 0;
  v13 = "UnknownAction";
  v14 = 1;
  do
  {
    v15 = v14;
    v16 = *(_QWORD *)(a1 + 1816 + 8 * v12);
    if (v16)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 72))(v16, v31);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v18 = (v15 & 1) != 0 ? "AML" : (char *)v13;
        sub_1015A2E04(buf, v18);
        v19 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? buf
            : (std::string *)buf[0].__r_.__value_.__r.__words[0];
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Actor,handlePhoneNumberChange,pointer was null for %{public}s", v32, 0xCu);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v20 = qword_1022A0088;
        if ((v15 & 1) != 0)
          v21 = "AML";
        else
          v21 = "EED2";
        sub_1015A2E04(v32, v21);
        v22 = v32;
        if (v33 < 0)
          v22 = *(_BYTE **)v32;
        v34 = 136446210;
        v35 = v22;
        LODWORD(v30) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 16, "#Actor,handlePhoneNumberChange,pointer was null for %{public}s", &v34, v30);
        v24 = v23;
        if (v33 < 0)
          operator delete(*(void **)v32);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handlePhoneNumberChange(SimInstance, const std::string)", "%s\n", (const char *)v24);
        if (v24 != buf)
          free(v24);
      }
    }
    v14 = 0;
    v13 = "EED2";
    v12 = 1;
  }
  while ((v15 & 1) != 0);
}

void sub_101394D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101394D68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  char v23;

  v3 = 0;
  v4 = "UnknownAction";
  v5 = a1 + 1816;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a2);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v7 & 1) != 0)
          v10 = "AML";
        else
          v10 = (char *)v4;
        sub_1015A2E04(__p, v10);
        v11 = __p;
        if (v23 < 0)
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleBatteryStatusChange,pointer was null for %{public}s", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v12 = qword_1022A0088;
        if ((v7 & 1) != 0)
          v13 = "AML";
        else
          v13 = "EED2";
        sub_1015A2E04(buf, v13);
        v14 = buf;
        if (v19 < 0)
          v14 = *(_BYTE **)buf;
        v20 = 136446210;
        v21 = v14;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 16, "#Actor,handleBatteryStatusChange,pointer was null for %{public}s", &v20, v17);
        v16 = v15;
        if (v19 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleBatteryStatusChange(const Battery &)", "%s\n", v16);
        if (v16 != (char *)__p)
          free(v16);
      }
    }
    v6 = 0;
    v4 = "EED2";
    v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_101394FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  char v23;

  v3 = 0;
  v4 = "UnknownAction";
  v5 = a1 + 1816;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 96))(v8, a2);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v7 & 1) != 0)
          v10 = "AML";
        else
          v10 = (char *)v4;
        sub_1015A2E04(__p, v10);
        v11 = __p;
        if (v23 < 0)
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleReachability,pointer was null for %{public}s", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v12 = qword_1022A0088;
        if ((v7 & 1) != 0)
          v13 = "AML";
        else
          v13 = "EED2";
        sub_1015A2E04(buf, v13);
        v14 = buf;
        if (v19 < 0)
          v14 = *(_BYTE **)buf;
        v20 = 136446210;
        v21 = v14;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 16, "#Actor,handleReachability,pointer was null for %{public}s", &v20, v17);
        v16 = v15;
        if (v19 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleReachability(const CLDaemonStatus_Type::Reachability)", "%s\n", v16);
        if (v16 != (char *)__p)
          free(v16);
      }
    }
    v6 = 0;
    v4 = "EED2";
    v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_101395288(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  char v23;

  v3 = 0;
  v4 = "UnknownAction";
  v5 = a1 + 1816;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, a2);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v7 & 1) != 0)
          v10 = "AML";
        else
          v10 = (char *)v4;
        sub_1015A2E04(__p, v10);
        v11 = __p;
        if (v23 < 0)
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleVlqmForActiveCall,pointer was null for %{public}s", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v12 = qword_1022A0088;
        if ((v7 & 1) != 0)
          v13 = "AML";
        else
          v13 = "EED2";
        sub_1015A2E04(buf, v13);
        v14 = buf;
        if (v19 < 0)
          v14 = *(_BYTE **)buf;
        v20 = 136446210;
        v21 = v14;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 16, "#Actor,handleVlqmForActiveCall,pointer was null for %{public}s", &v20, v17);
        v16 = v15;
        if (v19 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleVlqmForActiveCall(std::unordered_map<SimInstance, int32_t> &)", "%s\n", v16);
        if (v16 != (char *)__p)
          free(v16);
      }
    }
    v6 = 0;
    v4 = "EED2";
    v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_101395518(uint64_t a1, char a2)
{
  byte_102313FC8 = a2;
}

void sub_101395524(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  char v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  char v23;

  v3 = 0;
  v4 = a1 + 1816;
  v5 = "UnknownAction";
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(v4 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, a2);
    }
    else if (_os_feature_enabled_impl("CoreTelephony", "Bifrost"))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if ((v7 & 1) != 0)
          v10 = "AML";
        else
          v10 = (char *)v5;
        sub_1015A2E04(__p, v10);
        v11 = __p;
        if (v23 < 0)
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleStewieSupportChange,pointer was null for %{public}s", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v12 = qword_1022A0088;
        if ((v7 & 1) != 0)
          v13 = "AML";
        else
          v13 = "EED2";
        sub_1015A2E04(buf, v13);
        v14 = buf;
        if (v19 < 0)
          v14 = *(_BYTE **)buf;
        v20 = 136446210;
        v21 = v14;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 16, "#Actor,handleStewieSupportChange,pointer was null for %{public}s", &v20, v17);
        v16 = v15;
        if (v19 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleStewieSupportChange(const BOOL)", "%s\n", v16);
        if (v16 != (char *)__p)
          free(v16);
      }
    }
    v6 = 0;
    v5 = "EED2";
    v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_1013957D0(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char v14;
  char v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  unsigned int v33;
  _BYTE v34[12];
  char v35;
  int v36;
  _BYTE *v37;
  uint8_t buf[8];
  char v39;

  v33 = a2;
  v4 = a1 + 1728;
  if (!sub_1001F8DEC((_QWORD *)(a1 + 1728), (int *)&v33))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Actor handleImsRegStatusChange called with unexpected inst instance %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      *(_DWORD *)v34 = 67240192;
      *(_DWORD *)&v34[4] = v33;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor handleImsRegStatusChange called with unexpected inst instance %{public}d", v34, 8);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  *(_QWORD *)buf = &v33;
  if (*a3 == *((_BYTE *)sub_1001F6864(v4, (int *)&v33, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Actor sms over ims reg value unchanged %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v8 = *a3;
      *(_DWORD *)v34 = 67240192;
      *(_DWORD *)&v34[4] = v8;
      LODWORD(v31) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor sms over ims reg value unchanged %{public}d", v34, v31);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    *(_QWORD *)buf = &v33;
    v11 = 0;
    v12 = "UnknownAction";
    v13 = a1 + 1816;
    *((_BYTE *)sub_1001F6864(v4, (int *)&v33, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29) = *a3;
    v14 = 1;
    do
    {
      v15 = v14;
      if (*(_QWORD *)(v13 + 8 * v11))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v16 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *a3;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Actor with sms over ims reg value %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v21 = *a3;
          *(_DWORD *)v34 = 67240192;
          *(_DWORD *)&v34[4] = v21;
          LODWORD(v31) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor with sms over ims reg value %{public}d", v34, v31);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8 * v11) + 128))(*(_QWORD *)(v13 + 8 * v11), v33);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          if ((v15 & 1) != 0)
            v19 = "AML";
          else
            v19 = (char *)v12;
          sub_1015A2E04(buf, v19);
          v20 = buf;
          if (v39 < 0)
            v20 = *(uint8_t **)buf;
          *(_DWORD *)v34 = 136446210;
          *(_QWORD *)&v34[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#Actor,handleImsRegStatusChange,pointer was null for %{public}s", v34, 0xCu);
          if (v39 < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v24 = qword_1022A0088;
          if ((v15 & 1) != 0)
            v25 = "AML";
          else
            v25 = "EED2";
          sub_1015A2E04(v34, v25);
          v26 = v34;
          if (v35 < 0)
            v26 = *(_BYTE **)v34;
          v36 = 136446210;
          v37 = v26;
          LODWORD(v31) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 16, "#Actor,handleImsRegStatusChange,pointer was null for %{public}s", &v36, v31);
          v28 = v27;
          if (v35 < 0)
            operator delete(*(void **)v34);
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v28);
          if (v28 != (char *)buf)
            free(v28);
        }
      }
      v14 = 0;
      v12 = "EED2";
      v11 = 1;
    }
    while ((v15 & 1) != 0);
    sub_101391AF0(a1);
    sub_101391DE4(a1);
  }
}

void sub_101395ECC(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLEmergencyActor::onLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B2208);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyActor::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B2208);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyActor::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013972BC((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101396084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013960A4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;

  CLProfilingIdentify("CLEmergencyActor::onWifiLocationProviderNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B2208);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyActor::onWifiLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B2208);
    v10 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyActor::onWifiLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_101399238(v6, v7, v8, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_101396250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101396270(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;

  CLProfilingIdentify("CLEmergencyActor::onCellLocationProviderNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B2208);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyActor::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B2208);
    v10 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyActor::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_101399440(v6, v7, v8, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_10139641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10139643C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _WORD v18[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v2 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor unregistering for location notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor unregistering for location notifications", v18, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 33);
    }
    if (*(_QWORD *)(a1 + 24))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v3 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor unregistering for WiFi location notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18[0] = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor unregistering for WiFi location notifications", v18, v17);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Actor unregistering - WiFi client NULL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18[0] = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor unregistering - WiFi client NULL", v18, v17);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    if (*(_QWORD *)(a1 + 32))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Actor unregistering for Cell location notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18[0] = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor unregistering for Cell location notifications", v18, v17);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor unregistering - Cell client NULL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18[0] = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor unregistering - Cell client NULL", v18, v17);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    *(_BYTE *)(a1 + 40) = 0;
  }
}

void sub_101396AD8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _WORD v21[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 16))
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v2 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor registering for location notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor registering for location notifications", v21, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::registerForLocation()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 33, 0);
      if (*(_QWORD *)(a1 + 24))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v3 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor registering for WiFi location notification", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v21[0] = 0;
          LODWORD(v20) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor registering for WiFi location notification", v21, v20);
          v13 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::registerForLocation()", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0, 0);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v7 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Actor registering - WiFi client NULL", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v21[0] = 0;
          LODWORD(v20) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor registering - WiFi client NULL", v21, v20);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::registerForLocation()", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      if (*(_QWORD *)(a1 + 32))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Actor registering for Cell location notification", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v21[0] = 0;
          LODWORD(v20) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor registering for Cell location notification", v21, v20);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::registerForLocation()", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v9 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor registering - Cell client NULL", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v21[0] = 0;
          LODWORD(v20) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor registering - Cell client NULL", v21, v20);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::registerForLocation()", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Actor attempted to register for location notification without a client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v21[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor attempted to register for location notification without a client", v21, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::registerForLocation()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_1013972BC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  int v29;
  const char *v30;
  char *v31;
  int v32;
  const char *v33;
  char *v34;
  _DWORD v35[4];
  _BYTE buf[96];
  __int128 v37;
  __int128 v38;
  _BYTE v39[28];
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;

  v7 = *a3;
  if (!*a3)
    goto LABEL_4;
  if (v7 == 4)
    return;
  if (v7 != 33)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v28 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v29 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning #Actor received unexpected notification %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v32 = *a3;
      v35[0] = 67240192;
      v35[1] = v32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #Actor received unexpected notification %{public}d", v35, 8);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
LABEL_4:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Actor received new fix", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      LOWORD(v35[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor received new fix", v35, 2);
      v31 = (char *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    *(_DWORD *)buf = 0xFFFF;
    *(_QWORD *)&buf[12] = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    v37 = 0uLL;
    *(_QWORD *)&buf[88] = 0xBFF0000000000000;
    *(_QWORD *)((char *)&v38 + 4) = 0xBFF0000000000000;
    LODWORD(v38) = 0;
    HIDWORD(v38) = 0x7FFFFFFF;
    memset(v39, 0, 25);
    sub_10012A33C(&v40);
    v13 = *(_OWORD *)(a4 + 112);
    v37 = *(_OWORD *)(a4 + 96);
    v38 = v13;
    *(_OWORD *)v39 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v39[12] = *(_OWORD *)(a4 + 140);
    v14 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&buf[48] = v14;
    v15 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&buf[80] = v15;
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_OWORD *)&buf[16] = v16;
    memcpy(v17, (const void *)(a4 + 160), 0x201uLL);
    sub_100349198(&v41, (uint64_t *)(a4 + 680));
    v18 = *(_OWORD *)(a4 + 776);
    v47 = *(_OWORD *)(a4 + 760);
    v48 = v18;
    v19 = *(_OWORD *)(a4 + 712);
    v43 = *(_OWORD *)(a4 + 696);
    v44 = v19;
    v20 = *(_OWORD *)(a4 + 744);
    _ZF = *a3 == 0;
    if (*a3)
      v22 = &unk_10230E608;
    else
      v22 = &unk_10230E5F0;
    v45 = *(_OWORD *)(a4 + 728);
    v46 = v20;
    if (_ZF)
      v23 = (uint64_t *)&unk_10230E620;
    else
      v23 = (uint64_t *)&unk_10230E638;
    if (_ZF)
      v24 = a1 + 64;
    else
      v24 = a1 + 864;
    v49 = *(_BYTE *)(a4 + 792);
    sub_101397744(a1, (uint64_t)v22, v23, (uint64_t)buf, v24, a3);
    v25 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_101397728(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_101397744(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BOOL8 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  const char *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  _BYTE v100[32];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[28];
  _QWORD v107[65];
  uint64_t v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;
  int v117;
  _BYTE *v118;
  _BYTE v119[12];
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  int v135;
  _BYTE buf[12];
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  int v152;

  v104 = *(_OWORD *)(a4 + 96);
  v105 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)v106 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)&v106[12] = *(_OWORD *)(a4 + 140);
  *(_OWORD *)&v100[16] = *(_OWORD *)(a4 + 32);
  v101 = *(_OWORD *)(a4 + 48);
  v102 = *(_OWORD *)(a4 + 64);
  v103 = *(_OWORD *)(a4 + 80);
  v99 = *(_OWORD *)a4;
  *(_OWORD *)v100 = *(_OWORD *)(a4 + 16);
  memcpy(v107, (const void *)(a4 + 160), 0x201uLL);
  v108 = *(_QWORD *)(a4 + 680);
  v12 = *(std::__shared_weak_count **)(a4 + 688);
  v109 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *(_OWORD *)(a4 + 776);
  v114 = *(_OWORD *)(a4 + 760);
  v115 = v15;
  v16 = *(_OWORD *)(a4 + 712);
  v110 = *(_OWORD *)(a4 + 696);
  v111 = v16;
  v17 = *(_OWORD *)(a4 + 744);
  v112 = *(_OWORD *)(a4 + 728);
  v113 = v17;
  v116 = *(_BYTE *)(a4 + 792);
  v18 = sub_101398258((uint64_t *)a2, a4);
  if (v18)
  {
    if (*a6 != 33 || sub_1013989B0(v18, (uint64_t *)a2, a4))
    {
      v19 = sub_101398258(a3, a5);
      if ((_DWORD)v19)
        v19 = sub_1013990B0();
      if (!sub_1013989B0(v19, (uint64_t *)a2, a4))
      {
        *(_OWORD *)&v100[12] = xmmword_101BAFEE0;
        v107[39] = 0xFFFFFFFFLL;
      }
      *(_OWORD *)(a5 + 96) = v104;
      *(_OWORD *)(a5 + 112) = v105;
      *(_OWORD *)(a5 + 128) = *(_OWORD *)v106;
      *(_OWORD *)(a5 + 140) = *(_OWORD *)&v106[12];
      *(_OWORD *)(a5 + 32) = *(_OWORD *)&v100[16];
      *(_OWORD *)(a5 + 48) = v101;
      *(_OWORD *)(a5 + 64) = v102;
      *(_OWORD *)(a5 + 80) = v103;
      *(_OWORD *)a5 = v99;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v100;
      memcpy((void *)(a5 + 160), v107, 0x201uLL);
      sub_100349198((_QWORD *)(a5 + 680), &v108);
      v20 = v115;
      *(_OWORD *)(a5 + 760) = v114;
      *(_OWORD *)(a5 + 776) = v20;
      *(_BYTE *)(a5 + 792) = v116;
      v21 = v111;
      *(_OWORD *)(a5 + 696) = v110;
      *(_OWORD *)(a5 + 712) = v21;
      v22 = v113;
      *(_OWORD *)(a5 + 728) = v112;
      *(_OWORD *)(a5 + 744) = v22;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v24 = a2;
        else
          v24 = *(_QWORD *)a2;
        v25 = *(_QWORD *)(a5 + 4);
        v26 = *(_QWORD *)(a5 + 12);
        v27 = *(_QWORD *)(a5 + 20);
        v28 = *(_QWORD *)(a5 + 28);
        v29 = *(_QWORD *)(a5 + 36);
        v30 = *(_QWORD *)(a5 + 44);
        v31 = *(_QWORD *)(a5 + 60);
        v32 = *(_DWORD *)(a5 + 96);
        *(_DWORD *)buf = 136317187;
        *(_QWORD *)&buf[4] = v24;
        v137 = 2049;
        v138 = v25;
        v139 = 2049;
        v140 = v26;
        v141 = 2050;
        v142 = v27;
        v143 = 2049;
        v144 = v28;
        v145 = 2050;
        v146 = v29;
        v147 = 2049;
        v148 = v30;
        v149 = 2049;
        v150 = v31;
        v151 = 1026;
        v152 = v32;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Actor cached %s fix,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,alt,%{private}.7f,vacc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", buf, 0x58u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        if (*(char *)(a2 + 23) >= 0)
          v87 = a2;
        else
          v87 = *(_QWORD *)a2;
        v88 = *(_QWORD *)(a5 + 4);
        v89 = *(_QWORD *)(a5 + 12);
        v90 = *(_QWORD *)(a5 + 20);
        v91 = *(_QWORD *)(a5 + 28);
        v92 = *(_QWORD *)(a5 + 36);
        v93 = *(_QWORD *)(a5 + 44);
        v94 = *(_QWORD *)(a5 + 60);
        v95 = *(_DWORD *)(a5 + 96);
        *(_DWORD *)v119 = 136317187;
        *(_QWORD *)&v119[4] = v87;
        v120 = 2049;
        v121 = v88;
        v122 = 2049;
        v123 = v89;
        v124 = 2050;
        v125 = v90;
        v126 = 2049;
        v127 = v91;
        v128 = 2050;
        v129 = v92;
        v130 = 2049;
        v131 = v93;
        v132 = 2049;
        v133 = v94;
        v134 = 1026;
        v135 = v95;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor cached %s fix,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,alt,%{private}.7f,vacc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", v119, 88);
        v97 = (char *)v96;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v96);
        if (v97 != buf)
          free(v97);
      }
      v33 = 0;
      v34 = a1 + 1816;
      v35 = "UnknownAction";
      v36 = 1;
      do
      {
        v37 = v36;
        v38 = *(_QWORD *)(v34 + 8 * v33);
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 64))(v38);
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v39 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            if ((v37 & 1) != 0)
              v40 = "AML";
            else
              v40 = (char *)v35;
            sub_1015A2E04(buf, v40);
            v41 = buf;
            if (v139 < 0)
              v41 = *(_BYTE **)buf;
            *(_DWORD *)v119 = 136446210;
            *(_QWORD *)&v119[4] = v41;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#Actor,updateCachedLocation,pointer was null for %{public}s", v119, 0xCu);
            if (SHIBYTE(v139) < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021B21E8);
            v42 = qword_1022A0088;
            if ((v37 & 1) != 0)
              v43 = "AML";
            else
              v43 = "EED2";
            sub_1015A2E04(v119, v43);
            v44 = v119;
            if (v122 < 0)
              v44 = *(_BYTE **)v119;
            v117 = 136446210;
            v118 = v44;
            LODWORD(v98) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 16, "#Actor,updateCachedLocation,pointer was null for %{public}s", &v117, v98);
            v46 = v45;
            if (SHIBYTE(v122) < 0)
              operator delete(*(void **)v119);
            sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v46);
            if (v46 != buf)
              free(v46);
          }
        }
        v36 = 0;
        v35 = "EED2";
        v33 = 1;
      }
      while ((v37 & 1) != 0);
      goto LABEL_54;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v58 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v59 = a2;
      else
        v59 = *(_QWORD *)a2;
      v60 = *(_QWORD *)(a4 + 4);
      v61 = *(_QWORD *)(a4 + 12);
      v62 = *(_QWORD *)(a4 + 20);
      v63 = *(_QWORD *)(a4 + 28);
      v64 = *(_QWORD *)(a4 + 36);
      v65 = *(_QWORD *)(a4 + 44);
      v66 = *(_QWORD *)(a4 + 60);
      v67 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)buf = 136317187;
      *(_QWORD *)&buf[4] = v59;
      v137 = 2049;
      v138 = v60;
      v139 = 2049;
      v140 = v61;
      v141 = 2050;
      v142 = v62;
      v143 = 2049;
      v144 = v63;
      v145 = 2050;
      v146 = v64;
      v147 = 2049;
      v148 = v65;
      v149 = 2049;
      v150 = v66;
      v151 = 1026;
      v152 = v67;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#Actor rejected %s location fix as altitude is not usable,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,alt,%{private}.7f,vacc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", buf, 0x58u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      if (*(char *)(a2 + 23) >= 0)
        v68 = a2;
      else
        v68 = *(_QWORD *)a2;
      v69 = *(_QWORD *)(a4 + 4);
      v70 = *(_QWORD *)(a4 + 12);
      v71 = *(_QWORD *)(a4 + 20);
      v72 = *(_QWORD *)(a4 + 28);
      v73 = *(_QWORD *)(a4 + 36);
      v74 = *(_QWORD *)(a4 + 44);
      v75 = *(_QWORD *)(a4 + 60);
      v76 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)v119 = 136317187;
      *(_QWORD *)&v119[4] = v68;
      v120 = 2049;
      v121 = v69;
      v122 = 2049;
      v123 = v70;
      v124 = 2050;
      v125 = v71;
      v126 = 2049;
      v127 = v72;
      v128 = 2050;
      v129 = v73;
      v130 = 2049;
      v131 = v74;
      v132 = 2049;
      v133 = v75;
      v134 = 1026;
      v135 = v76;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor rejected %s location fix as altitude is not usable,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,alt,%{private}.7f,vacc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", v119, 88);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v77);
LABEL_80:
      if (v78 != buf)
        free(v78);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v47 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v48 = a2;
      else
        v48 = *(_QWORD *)a2;
      v49 = *(_QWORD *)(a4 + 4);
      v50 = *(_QWORD *)(a4 + 12);
      v51 = *(_QWORD *)(a4 + 20);
      v52 = *(_QWORD *)(a4 + 44);
      v53 = *(_QWORD *)(a4 + 60);
      v54 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)buf = 136316675;
      *(_QWORD *)&buf[4] = v48;
      v137 = 2049;
      v138 = v49;
      v139 = 2049;
      v140 = v50;
      v141 = 2050;
      v142 = v51;
      v143 = 2049;
      v144 = v52;
      v145 = 2049;
      v146 = v53;
      v147 = 1026;
      LODWORD(v148) = v54;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#Actor rejected %s location fix as unusable,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      if (*(char *)(a2 + 23) >= 0)
        v79 = a2;
      else
        v79 = *(_QWORD *)a2;
      v80 = *(_QWORD *)(a4 + 4);
      v81 = *(_QWORD *)(a4 + 12);
      v82 = *(_QWORD *)(a4 + 20);
      v83 = *(_QWORD *)(a4 + 44);
      v84 = *(_QWORD *)(a4 + 60);
      v85 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)v119 = 136316675;
      *(_QWORD *)&v119[4] = v79;
      v120 = 2049;
      v121 = v80;
      v122 = 2049;
      v123 = v81;
      v124 = 2050;
      v125 = v82;
      v126 = 2049;
      v127 = v83;
      v128 = 2049;
      v129 = v84;
      v130 = 1026;
      LODWORD(v131) = v85;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor rejected %s location fix as unusable,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", v119, 68);
      v78 = (char *)v86;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v86);
      goto LABEL_80;
    }
  }
LABEL_54:
  v55 = v109;
  if (v109)
  {
    v56 = (unint64_t *)&v109->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_101398228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100261F44(a12);
  _Unwind_Resume(a1);
}

BOOL sub_101398258(uint64_t *a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  uint64_t *v6;
  _BOOL8 result;
  uint64_t *v8;
  const char *v9;
  NSObject *v10;
  uint64_t *v11;
  double v12;
  uint64_t v13;
  double v14;
  int v15;
  NSObject *v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t *v19;
  double v20;
  uint64_t *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t *v32;
  const char *v33;
  uint8_t *v34;
  _BYTE v35[24];
  uint64_t v36;
  uint8_t buf[4];
  uint64_t *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  uint64_t v42;

  if ((sub_100182290(a2) & 1) != 0)
  {
    v4 = sub_1001FC7BC(a2, a2 + 160);
    if (fabs(v4) <= 20.0)
    {
      v14 = *(double *)(a2 + 20);
      if (v14 > 165.0 || v14 <= 0.0)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v18 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)a1 + 23) >= 0)
            v19 = a1;
          else
            v19 = (uint64_t *)*a1;
          v20 = *(double *)(a2 + 20);
          *(_DWORD *)buf = 136315394;
          v38 = v19;
          v39 = 2050;
          v40 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to horizontal accuracy,%{public}.2f", buf, 0x16u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          if (*((char *)a1 + 23) >= 0)
            v21 = a1;
          else
            v21 = (uint64_t *)*a1;
          v22 = *(_QWORD *)(a2 + 20);
          *(_DWORD *)v35 = 136315394;
          *(_QWORD *)&v35[4] = v21;
          *(_WORD *)&v35[12] = 2050;
          *(_QWORD *)&v35[14] = v22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s fix is unusable due to horizontal accuracy,%{public}.2f", v35, 22, *(_OWORD *)v35, *(_QWORD *)&v35[16], v36);
          goto LABEL_73;
        }
      }
      else
      {
        v15 = *(_DWORD *)(a2 + 128);
        if (v15 == 50 || v15 == 75)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v16 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a1 + 23) >= 0)
              v17 = a1;
            else
              v17 = (uint64_t *)*a1;
            *(_DWORD *)buf = 136315138;
            v38 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Actor %s fix is usable", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021B21E8);
            if (*((char *)a1 + 23) >= 0)
              v32 = a1;
            else
              v32 = (uint64_t *)*a1;
            *(_DWORD *)v35 = 136315138;
            *(_QWORD *)&v35[4] = v32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s fix is usable", v35);
            v34 = (uint8_t *)v33;
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLEmergencyActor::isLocationUsable(const std::string &, const GNSS::DaemonLocation &)", "%s\n", v33);
            if (v34 != buf)
              free(v34);
          }
          return 1;
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v23 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a1 + 23) >= 0)
              v24 = a1;
            else
              v24 = (uint64_t *)*a1;
            v25 = *(_DWORD *)(a2 + 128);
            *(_DWORD *)buf = 136315394;
            v38 = v24;
            v39 = 1026;
            LODWORD(v40) = v25;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to low integrity,%{public}d", buf, 0x12u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021B21E8);
            if (*((char *)a1 + 23) >= 0)
              v26 = a1;
            else
              v26 = (uint64_t *)*a1;
            v27 = *(_DWORD *)(a2 + 128);
            *(_DWORD *)v35 = 136315394;
            *(_QWORD *)&v35[4] = v26;
            *(_WORD *)&v35[12] = 1026;
            *(_DWORD *)&v35[14] = v27;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s fix is unusable due to low integrity,%{public}d", v35, 18, *(_OWORD *)v35, *(_QWORD *)&v35[16], v36);
            goto LABEL_73;
          }
        }
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a1 + 23) >= 0)
          v6 = a1;
        else
          v6 = (uint64_t *)*a1;
        *(_DWORD *)buf = 136315394;
        v38 = v6;
        v39 = 2050;
        v40 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to age,%{public}.3f", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        if (*((char *)a1 + 23) >= 0)
          v8 = a1;
        else
          v8 = (uint64_t *)*a1;
        *(_DWORD *)v35 = 136315394;
        *(_QWORD *)&v35[4] = v8;
        *(_WORD *)&v35[12] = 2050;
        *(double *)&v35[14] = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s fix is unusable due to age,%{public}.3f", v35, 22, *(_OWORD *)v35, *(_QWORD *)&v35[16], v36);
LABEL_73:
        v31 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLEmergencyActor::isLocationUsable(const std::string &, const GNSS::DaemonLocation &)", "%s\n", v9);
        if (v31 != buf)
          free(v31);
        return 0;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      v12 = *(double *)(a2 + 4);
      v13 = *(_QWORD *)(a2 + 12);
      *(_DWORD *)buf = 136315651;
      v38 = v11;
      v39 = 2049;
      v40 = v12;
      v41 = 2049;
      v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to invalid lat,%{private}.7f,lon,%{private}.7f", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      if (*((char *)a1 + 23) >= 0)
        v28 = a1;
      else
        v28 = (uint64_t *)*a1;
      v29 = *(_QWORD *)(a2 + 4);
      v30 = *(_QWORD *)(a2 + 12);
      *(_DWORD *)v35 = 136315651;
      *(_QWORD *)&v35[4] = v28;
      *(_WORD *)&v35[12] = 2049;
      *(_QWORD *)&v35[14] = v29;
      *(_WORD *)&v35[22] = 2049;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s fix is unusable due to invalid lat,%{private}.7f,lon,%{private}.7f", v35, 32, *(_OWORD *)v35, *(_QWORD *)&v35[16], v30);
      goto LABEL_73;
    }
  }
  return result;
}

BOOL sub_1013989B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v5;
  NSObject *v7;
  uint64_t *v8;
  double v9;
  _BOOL8 result;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  double v14;
  NSObject *v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t *v18;
  double v19;
  double v20;
  NSObject *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  NSObject *v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint8_t *v32;
  _BYTE v33[24];
  uint8_t buf[4];
  uint64_t *v35;
  __int16 v36;
  double v37;

  v5 = *(double *)(a3 + 36);
  if (v5 > 0.0 && v5 <= 30.0)
  {
    v14 = *(double *)(a3 + 28);
    if (v14 < -450.0 || v14 > 8850.0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a2 + 23) >= 0)
          v18 = a2;
        else
          v18 = (uint64_t *)*a2;
        v19 = *(double *)(a3 + 28);
        *(_DWORD *)buf = 136315394;
        v35 = v18;
        v36 = 2050;
        v37 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#Actor %s received altitude is not valid,%{public}.2f", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        if (*((char *)a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = (uint64_t *)*a2;
        v31 = *(_QWORD *)(a3 + 28);
        *(_DWORD *)v33 = 136315394;
        *(_QWORD *)&v33[4] = v30;
        *(_WORD *)&v33[12] = 2050;
        *(_QWORD *)&v33[14] = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s received altitude is not valid,%{public}.2f", v33, 22, *(_OWORD *)v33, *(_QWORD *)&v33[16]);
        goto LABEL_79;
      }
    }
    else if ((*(_DWORD *)(a3 + 472) + 1) > 1)
    {
      v20 = sub_1001FC7BC(a3, a3 + 160);
      if (fabs(v20) <= 20.0)
      {
        v24 = *(_DWORD *)(a3 + 128);
        result = 1;
        if (v24 != 50 && v24 != 75)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          v25 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a2 + 23) >= 0)
              v26 = a2;
            else
              v26 = (uint64_t *)*a2;
            v27 = *(_DWORD *)(a3 + 128);
            *(_DWORD *)buf = 136315394;
            v35 = v26;
            v36 = 1026;
            LODWORD(v37) = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#Actor %s altitude is unusable due to low integrity,%{public}d", buf, 0x12u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021B21E8);
            if (*((char *)a2 + 23) >= 0)
              v28 = a2;
            else
              v28 = (uint64_t *)*a2;
            v29 = *(_DWORD *)(a3 + 128);
            *(_DWORD *)v33 = 136315394;
            *(_QWORD *)&v33[4] = v28;
            *(_WORD *)&v33[12] = 1026;
            *(_DWORD *)&v33[14] = v29;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s altitude is unusable due to low integrity,%{public}d", v33, 18, *(_OWORD *)v33, *(_QWORD *)&v33[16]);
            goto LABEL_79;
          }
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v21 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)a2 + 23) >= 0)
            v22 = a2;
          else
            v22 = (uint64_t *)*a2;
          *(_DWORD *)buf = 136315394;
          v35 = v22;
          v36 = 2050;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Actor %s altitude is unusable due to age,%{public}.3f", buf, 0x16u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021B21E8);
          if (*((char *)a2 + 23) >= 0)
            v23 = a2;
          else
            v23 = (uint64_t *)*a2;
          *(_DWORD *)v33 = 136315394;
          *(_QWORD *)&v33[4] = v23;
          *(_WORD *)&v33[12] = 2050;
          *(double *)&v33[14] = v20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s altitude is unusable due to age,%{public}.3f", v33, 22, *(_OWORD *)v33, *(_QWORD *)&v33[16]);
          goto LABEL_79;
        }
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a2 + 23) >= 0)
          v16 = a2;
        else
          v16 = (uint64_t *)*a2;
        *(_DWORD *)buf = 136315138;
        v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#Actor %s altitude undulation model is not valid", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s altitude undulation model is not valid", v33);
        goto LABEL_79;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a2 + 23) >= 0)
        v8 = a2;
      else
        v8 = (uint64_t *)*a2;
      v9 = *(double *)(a3 + 36);
      *(_DWORD *)buf = 136315394;
      v35 = v8;
      v36 = 2050;
      v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Actor %s received altitude accuracy is not valid,%{public}.2f", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = (uint64_t *)*a2;
      v12 = *(_QWORD *)(a3 + 36);
      *(_DWORD *)v33 = 136315394;
      *(_QWORD *)&v33[4] = v11;
      *(_WORD *)&v33[12] = 2050;
      *(_QWORD *)&v33[14] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor %s received altitude accuracy is not valid,%{public}.2f", v33, 22, *(_OWORD *)v33, *(_QWORD *)&v33[16]);
LABEL_79:
      v32 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyActor::isAltitudeUsable(const std::string &, const GNSS::DaemonLocation &)", "%s\n", v13);
      if (v32 != buf)
        free(v32);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1013990B0()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#Actor new fix is preferred over cached by default", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor new fix is preferred over cached by default", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyActor::isCachedLocationBetter(const GNSS::DaemonLocation &)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_101399238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a4 + 4);
    v7 = *(_QWORD *)(a4 + 12);
    v8 = *(_QWORD *)(a4 + 20);
    v9 = *(_DWORD *)(a4 + 84);
    *(_DWORD *)buf = 134284289;
    v25 = v6;
    v26 = 2049;
    v27 = v7;
    v28 = 2049;
    v29 = v8;
    v30 = 1025;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Actor, WiFi location notification received lat,%{private}.7f,lon,%{private}.7f,hacc,%{private}.7f,conf,%{private}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v10 = *(_QWORD *)(a4 + 4);
    v11 = *(_QWORD *)(a4 + 12);
    v12 = *(_QWORD *)(a4 + 20);
    v13 = *(_DWORD *)(a4 + 84);
    v16 = 134284289;
    v17 = v10;
    v18 = 2049;
    v19 = v11;
    v20 = 2049;
    v21 = v12;
    v22 = 1025;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor, WiFi location notification received lat,%{private}.7f,lon,%{private}.7f,hacc,%{private}.7f,conf,%{private}d", &v16, 38);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::onWifiLocationProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_101399440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a4 + 4);
    v7 = *(_QWORD *)(a4 + 12);
    v8 = *(_QWORD *)(a4 + 20);
    *(_DWORD *)buf = 134284033;
    v21 = v6;
    v22 = 2049;
    v23 = v7;
    v24 = 2049;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Actor, Cell location notification received lat,%{private}.7f,lon,%{private}.7f,hacc,%{private}.7f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v9 = *(_QWORD *)(a4 + 4);
    v10 = *(_QWORD *)(a4 + 12);
    v11 = *(_QWORD *)(a4 + 20);
    v14 = 134284033;
    v15 = v9;
    v16 = 2049;
    v17 = v10;
    v18 = 2049;
    v19 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Actor, Cell location notification received lat,%{private}.7f,lon,%{private}.7f,hacc,%{private}.7f", &v14, 32);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyActor::onCellLocationProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

uint64_t sub_101399628(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void **v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  _BYTE buf[12];
  char v33;
  int v34;
  _BYTE *v35;
  void *__p;
  std::__shared_weak_count *v37;
  char v38;

  *(_QWORD *)a1 = off_1021B2140;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  sub_100270E34(a1 + 32, a5);
  *(_QWORD *)(a1 + 64) = *a6;
  v11 = a6[1];
  *(_QWORD *)(a1 + 72) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_100270E34(a1 + 80, a7);
  *(_DWORD *)(a1 + 112) = 255;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  sub_100856FE0(a1 + 192);
  *(_QWORD *)(a1 + 1432) = 0;
  *(_DWORD *)(a1 + 1440) = 0;
  sub_1001E4804(&__p);
  if (sub_1001E4874((uint64_t)__p, "ActorSessionForNonActiveEmergencies", (BOOL *)(a1 + 160)))
  {
    v14 = *(unsigned __int8 *)(a1 + 160);
    v15 = v37;
    if (!v37)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v14)
        return a1;
    }
    else
    {
LABEL_9:
      if (!v14)
        return a1;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(int *)(a1 + 16);
      v20 = v19 > 2 ? "UnknownAction" : (&off_1021B2398)[v19];
      sub_1015A2E04(&__p, v20);
      v24 = v38 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning #%{public}s allowing session for non-active emergencies", buf, 0xCu);
      if (v38 < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v26 = *(int *)(a1 + 16);
      if (v26 > 2)
        v27 = "UnknownAction";
      else
        v27 = (&off_1021B2398)[v26];
      v28 = qword_1022A0088;
      sub_1015A2E04(buf, v27);
      if (v33 >= 0)
        v29 = buf;
      else
        v29 = *(_BYTE **)buf;
      v34 = 136446210;
      v35 = v29;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v28, 0, "#Warning #%{public}s allowing session for non-active emergencies", &v34, 12);
      v31 = v30;
      if (v33 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyAction::CLEmergencyAction(id<CLIntersiloUniverse>, Action, id<CLClientManagerPublicProtocol>, NetworkAndSimInfoCallback, std::shared_ptr<CLEmergencyAWD>, LocationCallback)", "%s\n", v31);
      if (v31 != (char *)&__p)
        free(v31);
    }
  }
  else
  {
    v21 = v37;
    if (v37)
    {
      v22 = (unint64_t *)&v37->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  return a1;
}

void sub_1013999D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  sub_1008484E0(v5);
  if (*(char *)(v1 + 159) < 0)
    operator delete(*(void **)(v1 + 136));
  v7 = *(_QWORD **)(v1 + 104);
  if (v7 == v4)
  {
    v8 = 4;
    v7 = v4;
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  sub_100261F44(v3);
  v9 = *(_QWORD **)(v1 + 56);
  if (v9 == v2)
  {
    v10 = 4;
    v9 = v2;
  }
  else
  {
    if (!v9)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t sub_101399A8C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1021B2140;

  *(_QWORD *)(a1 + 24) = 0;
  if (*(char *)(a1 + 1391) < 0)
    operator delete(*(void **)(a1 + 1368));
  if (*(char *)(a1 + 1367) < 0)
    operator delete(*(void **)(a1 + 1344));
  if (*(char *)(a1 + 1199) < 0)
    operator delete(*(void **)(a1 + 1176));
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*(void **)(a1 + 1152));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 104);
  if (v2 == (_QWORD *)(a1 + 80))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v2)
      goto LABEL_16;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_16:
  sub_100261F44(a1 + 64);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4 == (_QWORD *)(a1 + 32))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 32);
    goto LABEL_20;
  }
  if (v4)
  {
    v5 = 5;
LABEL_20:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

std::string *sub_101399B88(uint64_t a1, const std::string *a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  void **v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  const std::string *v14;
  char *v15;
  char *v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  char v20;
  int v21;
  _BYTE *v22;
  __int16 v23;
  const std::string *v24;
  void *__p[2];
  char v26;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(int *)(a1 + 16);
    v6 = v5 > 2 ? "UnknownAction" : (&off_1021B2398)[v5];
    sub_1015A2E04(__p, v6);
    v7 = v26 >= 0 ? __p : (void **)__p[0];
    v8 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? (uint64_t)a2
       : a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446467;
    *(_QWORD *)&buf[4] = v7;
    v18 = 2081;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#%{public}s companion phone number changed to %{private}s", buf, 0x16u);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v10 = *(int *)(a1 + 16);
    if (v10 > 2)
      v11 = "UnknownAction";
    else
      v11 = (&off_1021B2398)[v10];
    v12 = qword_1022A0088;
    sub_1015A2E04(buf, v11);
    if (v20 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = a2;
    else
      v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v21 = 136446467;
    v22 = v13;
    v23 = 2081;
    v24 = v14;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 0, "#%{public}s companion phone number changed to %{private}s", &v21, 22);
    v16 = v15;
    if (v20 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyAction::handleCompanionNumberChange(const std::string &)", "%s\n", v16);
    if (v16 != (char *)__p)
      free(v16);
  }
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

void sub_101399E28(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  void **v10;
  const char *v11;
  uint64_t v12;
  char *v13;
  void **v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  const char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  const char *v25;
  char *v26;
  char *v27;
  _BYTE buf[12];
  __int16 v29;
  const char *v30;
  char v31;
  int v32;
  _BYTE *v33;
  __int16 v34;
  const char *v35;
  void *__p[2];
  char v37;

  if (*(unsigned __int8 *)(a1 + 184) == (_DWORD)a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(int *)(a1 + 16);
      if (v5 > 2)
        v6 = "UnknownAction";
      else
        v6 = (&off_1021B2398)[v5];
      sub_1015A2E04(__p, v6);
      v10 = (void **)__p[0];
      v11 = "disabled";
      if (v37 >= 0)
        v10 = __p;
      if ((_DWORD)a2)
        v11 = "enabled";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v10;
      v29 = 2082;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#%{public}s session assertion is already %{public}s,ignoring", buf, 0x16u);
      if (v37 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v12 = *(int *)(a1 + 16);
      if (v12 > 2)
        v13 = "UnknownAction";
      else
        v13 = (&off_1021B2398)[v12];
      v18 = qword_1022A0088;
      sub_1015A2E04(buf, v13);
      v19 = *(_BYTE **)buf;
      v20 = "disabled";
      if (v31 >= 0)
        v19 = buf;
      if ((_DWORD)a2)
        v20 = "enabled";
      v32 = 136446466;
      v33 = v19;
      v34 = 2082;
      v35 = v20;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 0, "#%{public}s session assertion is already %{public}s,ignoring", &v32, 22);
      v22 = v21;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAction::assertSession(BOOL)", "%s\n", v22);
      if (v22 != (char *)__p)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(int *)(a1 + 16);
      if (v8 > 2)
        v9 = "UnknownAction";
      else
        v9 = (&off_1021B2398)[v8];
      sub_1015A2E04(__p, v9);
      v14 = (void **)__p[0];
      v15 = "disabled";
      if (v37 >= 0)
        v14 = __p;
      if ((_DWORD)a2)
        v15 = "enabled";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v14;
      v29 = 2082;
      v30 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#%{public}s session assertion %{public}s", buf, 0x16u);
      if (v37 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v16 = *(int *)(a1 + 16);
      if (v16 > 2)
        v17 = "UnknownAction";
      else
        v17 = (&off_1021B2398)[v16];
      v23 = qword_1022A0088;
      sub_1015A2E04(buf, v17);
      v24 = *(_BYTE **)buf;
      v25 = "disabled";
      if (v31 >= 0)
        v24 = buf;
      if ((_DWORD)a2)
        v25 = "enabled";
      v32 = 136446466;
      v33 = v24;
      v34 = 2082;
      v35 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 0, "#%{public}s session assertion %{public}s", &v32, 22);
      v27 = v26;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAction::assertSession(BOOL)", "%s\n", v27);
      if (v27 != (char *)__p)
        free(v27);
    }
    *(_BYTE *)(a1 + 184) = a2;
    objc_msgSend(*(id *)(a1 + 24), "markClientEmergencyEnablementTransition:", a2);
  }
}

uint64_t sub_10139A314(uint64_t a1)
{
  sub_1017E2B94(a1 + 192);
  *(_DWORD *)(a1 + 384) = sub_100217A98((unsigned int *)(a1 + 112));
  *(_BYTE *)(a1 + 1132) = sub_100CD599C(a1 + 112);
  *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a1 + 132);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 168);
  *(_BYTE *)(a1 + 344) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

BOOL sub_10139A378(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;
  int v4;

  v2 = a1 + 112;
  result = sub_100CD597C(a1 + 112);
  if (!result)
  {
    *(_DWORD *)(a1 + 132) = 0;
    return result;
  }
  result = sub_100CD595C(v2);
  if (result)
  {
    v4 = 1;
  }
  else
  {
    result = sub_100CD596C(v2);
    if (!result)
    {
      v4 = *(_DWORD *)(a1 + 132);
      goto LABEL_9;
    }
    v4 = 2;
  }
  *(_DWORD *)(a1 + 132) = v4;
LABEL_9:
  *(_DWORD *)(a1 + 1128) = v4;
  return result;
}

double sub_10139A3E0(uint64_t a1, uint64_t a2)
{
  double result;
  CFAbsoluteTime Current;

  *(_BYTE *)(a1 + 232) = sub_100182290(a2);
  if (sub_100182290(a2))
  {
    if (*(double *)(a1 + 208) == -1.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 208) = Current;
      *(CFAbsoluteTime *)(a1 + 264) = Current - *(double *)(a1 + 200);
    }
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 4);
    if (sub_101390BB8(a2))
    {
      result = *(double *)(a2 + 28) + *(float *)(a2 + 476);
      *(double *)(a1 + 240) = result;
    }
  }
  return result;
}

uint64_t sub_10139A464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 != 0;
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  return sub_1017E2E3C(a1 + 192, v4, v5 != 0);
}

uint64_t sub_10139A4A4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 144))(a1, *a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a3);
  v8 = *a2;
  if (v6 >= result)
    v8 = a3;
  *a2 = v8;
  return result;
}

void sub_10139A508(uint64_t a1)
{
  if (*(double *)(a1 + 1432) != 0.0)
  {
    *(_DWORD *)(a1 + 1272) = (sub_1001FCBB4() - *(double *)(a1 + 1432));
    *(_QWORD *)(a1 + 1432) = 0;
  }
  sub_1017E1D24(a1 + 192);
  sub_10173A0F4(*(_QWORD *)(a1 + 64), a1 + 192);
  sub_1017E2B94(a1 + 192);
}

void sub_10139A564(uint64_t a1, int a2, int a3)
{
  unsigned int v4;

  v4 = a3 - 2;
  if ((a2 - 2) >= 4)
  {
    if (v4 <= 3)
      *(double *)(a1 + 1432) = sub_1001FCBB4();
  }
  else if (v4 >= 4 && *(double *)(a1 + 1432) != 0.0)
  {
    *(_DWORD *)(a1 + 1272) = (sub_1001FCBB4() - *(double *)(a1 + 1432));
    *(_QWORD *)(a1 + 1432) = 0;
  }
}

void sub_10139A5D0(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10139A5FC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10139A628(uint64_t a1)
{
  void *v2;

  sub_10139A660(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10139A660(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_10139A69C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_10139A69C(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t *sub_10139A710(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 16;
  v13 = (char *)operator new(0xC0uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v13 + 7) = *(_QWORD *)(a3 + 40);
  *((_OWORD *)v13 + 4) = *(_OWORD *)(a3 + 48);
  *((_QWORD *)v13 + 10) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(v13 + 88) = *(_OWORD *)(a3 + 72);
  *((_QWORD *)v13 + 13) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *((_OWORD *)v13 + 7) = *(_OWORD *)(a3 + 96);
  *((_QWORD *)v13 + 16) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *((_QWORD *)v13 + 19) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(v13 + 136) = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  v14 = *(_OWORD *)(a3 + 144);
  *((_QWORD *)v13 + 22) = *(_QWORD *)(a3 + 160);
  *((_OWORD *)v13 + 10) = v14;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *((_DWORD *)v13 + 46) = *(_DWORD *)(a3 + 168);
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = v7 < 3 || (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7)
          v22 %= v7;
      }
      else
      {
        v22 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10139A9F8((uint64_t)v24, 0);
  return i;
}

void sub_10139A9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10139A9F8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_10139A9F8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10139A69C((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_10139AA3C@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x328uLL);
  result = sub_10139AA94(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10139AA80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10139AA94(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021B2238;
  sub_101738088(a1 + 3, *a2);
  return a1;
}

void sub_10139AAD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10139AAE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B2238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10139AAF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B2238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10139AB2C(uint64_t a1)
{
  return sub_101738158(a1 + 24);
}

void sub_10139AB3C()
{
  operator delete();
}

_QWORD *sub_10139AB50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B2288;
  result[1] = v3;
  return result;
}

uint64_t sub_10139AB84(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B2288;
  a2[1] = v2;
  return result;
}

uint64_t *sub_10139ABA0(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v4;
  int *v5;

  v4 = *a2;
  v2 = *(_QWORD *)(a1 + 8) + 1728;
  v5 = &v4;
  return sub_1001F6864(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 3;
}

uint64_t sub_10139ABEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10139AC28()
{
}

void sub_10139AC38()
{
  operator delete();
}

_QWORD *sub_10139AC4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B2318;
  result[1] = v3;
  return result;
}

uint64_t sub_10139AC80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B2318;
  a2[1] = v2;
  return result;
}

void sub_10139AC9C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  NSObject *v19;
  uint64_t v20;
  _BOOL8 v21;
  NSObject *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  NSObject *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  _WORD v46[8];
  uint8_t buf[1632];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(v3 + 144);
  v7 = *(_OWORD *)(v3 + 96);
  v6 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v6;
  v9 = *(_OWORD *)(v3 + 176);
  v8 = *(_OWORD *)(v3 + 192);
  v10 = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(v3 + 204);
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v10;
  memcpy((void *)(a2 + 160), (const void *)(v3 + 224), 0x201uLL);
  *(_QWORD *)(a2 + 680) = *(_QWORD *)(v3 + 744);
  v11 = *(_QWORD *)(v3 + 752);
  *(_QWORD *)(a2 + 688) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_OWORD *)(v3 + 760);
  v15 = *(_OWORD *)(v3 + 792);
  *(_OWORD *)(a2 + 712) = *(_OWORD *)(v3 + 776);
  *(_OWORD *)(a2 + 728) = v15;
  *(_OWORD *)(a2 + 696) = v14;
  v16 = *(_OWORD *)(v3 + 808);
  v17 = *(_OWORD *)(v3 + 824);
  v18 = *(_OWORD *)(v3 + 840);
  *(_BYTE *)(a2 + 792) = *(_BYTE *)(v3 + 856);
  *(_OWORD *)(a2 + 760) = v17;
  *(_OWORD *)(a2 + 776) = v18;
  *(_OWORD *)(a2 + 744) = v16;
  if (sub_101398258(qword_10230E620, v3 + 64))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Actor,LocationCallback,returning cached fix", buf, 2u);
    }
    v20 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v20)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v46[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor,LocationCallback,returning cached fix", v46, 2);
      v40 = (uint8_t *)v39;
      v20 = sub_100512490("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v21 = sub_1013989B0(v20, qword_10230E620, v3 + 64);
    if (!v21 && sub_1013989B0(v21, qword_10230E638, v3 + 864))
    {
      *(_OWORD *)(a2 + 28) = *(_OWORD *)(v3 + 892);
      *(_DWORD *)(a2 + 472) = *(_DWORD *)(v3 + 1336);
      *(_DWORD *)(a2 + 476) = *(_DWORD *)(v3 + 1340);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v22 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning #Actor,LocationCallback,cached fix is not usable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v46[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #Actor,LocationCallback,cached fix is not usable", v46, 2);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    sub_10021CBD4(v3 + 64);
    v23 = *(_OWORD *)(v3 + 880);
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 864);
    *(_OWORD *)(a2 + 16) = v23;
    v24 = *(_OWORD *)(v3 + 896);
    v25 = *(_OWORD *)(v3 + 912);
    v26 = *(_OWORD *)(v3 + 944);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 928);
    *(_OWORD *)(a2 + 80) = v26;
    *(_OWORD *)(a2 + 32) = v24;
    *(_OWORD *)(a2 + 48) = v25;
    v27 = *(_OWORD *)(v3 + 960);
    v28 = *(_OWORD *)(v3 + 976);
    v29 = *(_OWORD *)(v3 + 992);
    *(_OWORD *)(a2 + 140) = *(_OWORD *)(v3 + 1004);
    *(_OWORD *)(a2 + 112) = v28;
    *(_OWORD *)(a2 + 128) = v29;
    *(_OWORD *)(a2 + 96) = v27;
    memcpy((void *)(a2 + 160), (const void *)(v3 + 1024), 0x201uLL);
    sub_100349198((_QWORD *)(a2 + 680), (uint64_t *)(v3 + 1544));
    v31 = *(_OWORD *)(v3 + 1576);
    v30 = *(_OWORD *)(v3 + 1592);
    *(_OWORD *)(a2 + 696) = *(_OWORD *)(v3 + 1560);
    *(_OWORD *)(a2 + 712) = v31;
    *(_OWORD *)(a2 + 728) = v30;
    v33 = *(_OWORD *)(v3 + 1624);
    v32 = *(_OWORD *)(v3 + 1640);
    v34 = *(_OWORD *)(v3 + 1608);
    *(_BYTE *)(a2 + 792) = *(_BYTE *)(v3 + 1656);
    *(_OWORD *)(a2 + 760) = v33;
    *(_OWORD *)(a2 + 776) = v32;
    *(_OWORD *)(a2 + 744) = v34;
    if (sub_101398258(qword_10230E638, v3 + 864))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v35 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Actor,LocationCallback,returning cached prefiltered fix", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v46[0] = 0;
        LODWORD(v45) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Actor,LocationCallback,returning cached prefiltered fix", v46, v45);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      v38 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning #Actor,LocationCallback,cached prefiltered fix is not usable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021B21E8);
        v46[0] = 0;
        LODWORD(v45) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #Actor,LocationCallback,cached prefiltered fix is not usable", v46, v45);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      sub_10021CBD4(v3 + 864);
      sub_10021CBD4(a2);
    }
  }
}

void sub_10139B354(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10139B378(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10139B3B4()
{
}

void sub_10139B3C0()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA07E0;
      v1[3] = unk_101CA07F0;
      v1[4] = xmmword_101CA0800;
      v1[0] = xmmword_101CA07C0;
      v1[1] = unk_101CA07D0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10139B494(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10139B4AC()
{
  sub_1015A2E04(qword_10230E5F0, "new");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E5F0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E608, "newPreFiltered");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E608, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E620, "cached");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E620, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E638, "cachedPreFiltered");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E638, (void *)&_mh_execute_header);
}

void sub_10139B69C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

void sub_10139B7A0(id a1)
{
  qword_1022A0138 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackingAvoidance");
}

_QWORD *sub_10139B7CC(_QWORD *result, uint64_t a2)
{
  *result = off_1021B23E0;
  result[1] = a2;
  return result;
}

uint64_t sub_10139B7DC(uint64_t a1, BOOL *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4874(v8, "RealtimeHarvesting", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10139B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10139B874(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "RealtimeSubmissionTimeOut", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10139B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10139B90C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MinRealtimeHarvestDuration", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10139B990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10139B9A4(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "RealtimeBudgetBytes", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10139BA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10139BA3C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "RealtimeBudgetInterval", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10139BAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10139BAD4(uint64_t a1, _DWORD *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"), "defaultForKey:defaultValue:", CFSTR("CLRealtimeBudgetBytesDefault"), 0);
  v4 = v3;
  if (v3)
    *a2 = objc_msgSend(v3, "intValue");
  return v4 != 0;
}

void sub_10139BB28(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  id v8;

  v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  objc_msgSend(v8, "setHandler:", a5);
  objc_msgSend(v8, "setNextFireTime:interval:", a2, a3);
  operator new();
}

void sub_10139BBC8()
{
  operator delete();
}

void sub_10139BBEC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10139BC44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10139BC64(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_10139BC7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10139BD60(id a1)
{
  qword_10230E650 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLocationMulticlientStreamerSilo"));
}

void sub_10139BDD0(id a1)
{
  sub_100197040();
  if (sub_100760428())
  {
    sub_100197040();
    if (sub_1001CE630())
      byte_10230E660 = 1;
  }
}

void sub_10139BFB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  operator delete();
}

id sub_10139BFF4(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021B2590);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient Stop timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "stopLocation");
}

id sub_10139C0D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onLocationNotification:withData:", a2, a3);
}

void sub_10139CAAC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v6;
  unsigned int v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to post multiclient stream event\", \"err\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    }
    v4 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to post multiclient stream event", "{\"msg%{public}.0s\":\"#Multiclient failed to post multiclient stream event\", \"err\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "count");
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      LODWORD(v13) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient posted a location to interested peers\", \"numClients\":%{public}u}", (uint8_t *)&v8, 0x18u);
    }
  }
}

uint64_t sub_10139CEF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  id v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021B2590);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289282;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationSTreamingMessageRapportDeviceIDKey")), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient received interest in streaming from a nearby client\", \"requester\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x1Cu);
  }
  v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  sub_100197040();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1000C4240()), CFSTR("kCLLocationStreamingMessageRapportIsPhoneKey"));
  sub_100197040();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100081BD0()), CFSTR("kCLLocationStreamingMessageRapportIsPadKey"));
  sub_100197040();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1001CE630()), CFSTR("kCLLocationStreamingMessageRapportHasGPSKey"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "rapportDiscoveryLink"), "localDevice"), "effectiveIdentifier"), CFSTR("kCLLocationSTreamingMessageRapportDeviceIDKey"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("kCLLocationStreamingMessageRapportIsAtLeast16_4"));
  return (*(uint64_t (**)(uint64_t, id, _QWORD, _QWORD))(a4 + 16))(a4, v8, 0, 0);
}

uint64_t sub_10139D0FC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  BOOL v13;
  unsigned int v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  id v18;
  const __CFString *v20;
  _UNKNOWN **v21;
  const __CFString *v22;
  _UNKNOWN **v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  id v29;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021B2590);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289283;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2113;
    v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient received streaming action request from a client\", \"msg\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  v9 = objc_msgSend(a3, "objectForKeyedSubscript:", RPOptionSenderID);
  v10 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageInFitnessSessionKey"));
  v11 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageActivityTypeAirborneKey"));
  v12 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageEmergencyEnablementKey"));
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey")))
  {
    v13 = v9 == 0;
  }
  else
  {
    v13 = 1;
  }
  if (!v13)
  {
    v14 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey")), "intValue");
    if (v14 == 1)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "removeObject:", v9);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B2590);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = objc_msgSend(v9, "UTF8String");
        *(_DWORD *)buf = 68289282;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        v28 = 2082;
        v29 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient stopping location streaming to remote client\", \"effectiveID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "count"))
        objc_msgSend(*(id *)(a1 + 32), "toggleLocationUpdates:inFitnessSession:inAirborneSession:emergencyEnablementAssertionActive:", 0, objc_msgSend(v10, "BOOLValue"), objc_msgSend(v11, "BOOLValue"), objc_msgSend(v12, "BOOLValue"));
      v20 = CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey");
      v21 = &off_10221DB80;
      (*(void (**)(uint64_t, NSDictionary *, _QWORD, _QWORD))(a4 + 16))(a4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1), 0, 0);
    }
    else if (!v14)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B2590);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(v9, "UTF8String");
        *(_DWORD *)buf = 68289282;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        v28 = 2082;
        v29 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient (re)starting location streaming to remote client\", \"effectiveID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      objc_msgSend(*(id *)(a1 + 32), "toggleLocationUpdates:inFitnessSession:inAirborneSession:emergencyEnablementAssertionActive:", 1, objc_msgSend(v10, "BOOLValue"), objc_msgSend(v11, "BOOLValue"), objc_msgSend(v12, "BOOLValue"));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "addObject:", v9);
      v22 = CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey");
      v23 = &off_10221DB68;
      (*(void (**)(uint64_t, NSDictionary *, _QWORD, _QWORD))(a4 + 16))(a4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1), 0, 0);
      sub_10088B1F4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a4 + 16))(a4, 0, 0, 0);
}

void sub_10139D654(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  id v6;
  id v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  id v15;

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "containsObject:", objc_msgSend(a2, "effectiveIdentifier")))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = objc_msgSend(objc_msgSend(a2, "effectiveIdentifier"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient stopping location streaming to remote client\", \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)&v8, 0x1Cu);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "removeObject:", objc_msgSend(a2, "effectiveIdentifier"));
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021B2590);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = objc_msgSend(objc_msgSend(a2, "effectiveIdentifier"), "UTF8String");
    v7 = objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
    v8 = 68289539;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = v6;
    v14 = 2081;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient CLLocationStreamer can no longer see a device\", \"effectiveID\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s}", (uint8_t *)&v8, 0x26u);
  }
}

void sub_10139D848(id a1, RPCompanionLinkDevice *a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  id v8;
  __int16 v9;
  id v10;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021B2590);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289539;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = objc_msgSend(-[RPCompanionLinkDevice effectiveIdentifier](a2, "effectiveIdentifier"), "UTF8String");
    v9 = 2081;
    v10 = objc_msgSend(-[RPCompanionLinkDevice name](a2, "name"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient CLLocationStreamer spotted a device\", \"effectiveID\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s}", (uint8_t *)v4, 0x26u);
  }
}

void sub_10139D958(id a1, NSError *a2)
{
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint32_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  NSError *v14;

  if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a2;
      v4 = "{\"msg%{public}.0s\":\"#Multiclient failed to activate advertisement server\", \"error\":%{public, location:escape_only}@}";
      v5 = v3;
      v6 = OS_LOG_TYPE_DEFAULT;
      v7 = 28;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)&v9, v7);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v4 = "{\"msg%{public}.0s\":\"#Multiclient ready to listen for incoming streaming requests\"}";
      v5 = v8;
      v6 = OS_LOG_TYPE_INFO;
      v7 = 18;
      goto LABEL_10;
    }
  }
}

void sub_10139DAC0(id a1, NSError *a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  NSError *v11;

  if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    }
    v4 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to activate streaming link", "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B2590);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient location streaming outbound client ready to go when needed\"}", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_10139DF4C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10139DF78()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA0CF4;
      v1[3] = unk_101CA0D04;
      v1[4] = xmmword_101CA0D14;
      v1[0] = xmmword_101CA0CD4;
      v1[1] = unk_101CA0CE4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10139E04C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_10139E064(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  *a1 = a2;
  a1[1] = 0;
  v6[0] = off_1021B25E0;
  v6[1] = a1;
  v7 = v6;
  sub_10139E164(a2, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_10139E11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  sub_1019502A8(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_10139E164(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  sub_100270E34((uint64_t)v6, a2);
  sub_1006D276C((_QWORD *)(v3 + 144), (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_10139E210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10139E254(uint64_t result)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(result + 8))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B25B0);
    v1 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Bringing up cycling state detector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B25B0);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Bringing up cycling state detector", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSecondaryClassifiers::onCyclingDetectorActivate()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
    operator new();
  }
  return result;
}

void sub_10139E43C(uint64_t a1)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021B25B0);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tear down cycling state detector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021B25B0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tear down cycling state detector", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSecondaryClassifiers::onCyclingDetectorDeactivate()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    v3 = *v1;
    *v1 = 0;
    if (v3)
      sub_1006CD618((uint64_t)v1, v3);
  }
}

void sub_10139E5E8(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10139E618()
{
  operator delete();
}

_QWORD *sub_10139E62C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B25E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10139E660(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B25E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10139E67C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    sub_10139E254(v2);
  else
    sub_10139E43C(v2);
  return 1;
}

uint64_t sub_10139E6A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10139E6E4()
{
}

void sub_10139E6F0()
{
  operator new();
}

void sub_10139E748()
{
  operator delete();
}

void sub_10139E76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[8];
  std::__shared_weak_count *v13;
  _BYTE v14[24];
  _BYTE *v15;

  *(_QWORD *)a1 = off_1021B2660;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x40D5180000000000;
  v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  sub_100270E34((uint64_t)v14, (uint64_t)&unk_1023140B8);
  sub_10148007C(a1 + 80, a3, v14);
  v6 = v15;
  if (v15 == v14)
  {
    v7 = 4;
    v6 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *(_QWORD *)(a1 + 232) = off_10218C118;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = v8;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)buf, "CleanupInterval", v5);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "addResponseListener:", a1 + 232);
  sub_1001B6A0C();
}

void sub_10139ECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char **v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a23 < 0)
    operator delete(__p);
  *v26 = v29 + 16;
  sub_100067A00(v27, *v30);
  sub_101480134(v25);
  v32 = v24[9];
  v24[9] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v24[8];
  v24[8] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = v24[7];
  v24[7] = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = v24[6];
  v24[6] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *v28;
  *v28 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  _Unwind_Resume(a1);
}

void sub_10139EE20(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiTilesManager::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B26E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B26E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011ABF90(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10139EFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10139F008(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiTilesManager::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B26E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B26E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011AA508(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10139F1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10139F1F0(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiTilesManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B26E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B26E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011B2A34(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10139F3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10139F3D8(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiTilesManager::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B26E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B26E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1011AB20C(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10139F5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10139F5C0(uint64_t a1)
{
  sub_1011AB420(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t sub_10139F5CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1021B2660;
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "removeResponseListener:", a1 + 232);
  objc_msgSend(*(id *)(a1 + 24), "invalidate");

  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(void **)(a1 + 272);
  if (v2)
  {

    *(_QWORD *)(a1 + 272) = 0;
  }
  *(_QWORD *)(a1 + 232) = off_10218C118;
  sub_100067A00(a1 + 248, *(char **)(a1 + 256));
  sub_101480134(a1 + 80);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_10139F6DC(uint64_t a1)
{
  sub_10139F5CC(a1);
  operator delete();
}

BOOL sub_10139F700(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLDataProtectionManager")), "syncgetDataAvailability") != 1;
}

void sub_10139F730(uint64_t a1)
{
  sub_100E4EB68(a1 + 232);
}

uint64_t sub_10139F738()
{
  sub_100197040();
  return sub_100195F08();
}

BOOL sub_10139F74C()
{
  sub_100197040();
  return sub_10019DF90();
}

id sub_10139F760(_QWORD *a1)
{
  CLTileDownloadSchedulingClient *v2;
  CLTileDownloadSchedulingClient *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (CLTileDownloadSchedulingClient *)a1[34];
  if (!v2)
  {
    v3 = [CLTileDownloadSchedulingClient alloc];
    v4 = a1[1];
    if (v4)
      v5 = v4 + 120;
    else
      v5 = 0;
    v2 = -[CLTileDownloadSchedulingClient initWithUniverse:andDelegate:](v3, "initWithUniverse:andDelegate:", a1[2], v5);
    a1[34] = v2;
  }
  return (id)-[CLTileDownloadSchedulingClient scheduleTileDownloadIfNecessary](v2, "scheduleTileDownloadIfNecessary");
}

id sub_10139F7A8(uint64_t a1)
{
  id v1;
  uint64_t *v2;

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  if (byte_10230E687 >= 0)
    v2 = &qword_10230E670;
  else
    v2 = (uint64_t *)qword_10230E670;
  return objc_msgSend(v1, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

void sub_10139F804(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10139F830(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10139F85C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA0E0C;
      v1[3] = unk_101CA0E1C;
      v1[4] = xmmword_101CA0E2C;
      v1[0] = xmmword_101CA0DEC;
      v1[1] = unk_101CA0DFC;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10139F930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10139F948()
{
  sub_1015A2E04(&qword_10230E670, "WifiTilesManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E670, (void *)&_mh_execute_header);
}

void sub_10139FCF4(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void *v18;

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v4 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,onVisitNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltrm,onVisitNotification", v12, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::onVisitNotification(CLVisit *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (a2)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2113;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cltrm,received visit\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1013A4F38(a1, a2);
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#cltrm,onVisitNotification,visit is nil.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "#cltrm,onVisitNotification,visit is nil.", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackRunController::onVisitNotification(CLVisit *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

uint64_t sub_1013A0060(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  uint8_t buf[8];
  std::__shared_weak_count *v40;

  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = off_1021B2738;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 31) = 0;
  *(_DWORD *)(a1 + 47) = 0;
  *(_QWORD *)(a1 + 64) = a1;
  *(_QWORD *)(a1 + 72) = off_1021B2770;
  *(_QWORD *)(a1 + 80) = a1;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 161) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  sub_1002433B8(a1 + 280);
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 412) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 420) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v3 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TrackRun,constructing CLTrackRunController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(v37) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,constructing CLTrackRunController", &v37, 2);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if (*(_QWORD *)(a1 + 184))
  {
    v4 = sub_1013A12AC();
    *(_BYTE *)(a1 + 34) = v4;
    if (v4)
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v5 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TrackRun,TrackRun engine enabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        LOWORD(v37) = 0;
        LODWORD(v35) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,TrackRun engine enabled", &v37, v35);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v6);
LABEL_80:
        if (v7 != buf)
          free(v7);
      }
    }
    else
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v8 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "TrackRun,TrackRun engine disabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        LOWORD(v37) = 0;
        LODWORD(v35) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,TrackRun engine disabled", &v37, v35);
        v7 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v34);
        goto LABEL_80;
      }
    }
    sub_1001E4804(buf);
    v9 = *(_QWORD *)buf;
    v10 = sub_101357218();
    LOBYTE(v37) = 0;
    if (sub_1001E4874(v9, "EnableTrackRunRecorder", (BOOL *)&v37))
      v11 = (_BYTE)v37 != 0;
    else
      v11 = v10;
    v12 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v15 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TrackRun,EnableTrackRunRecorder,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v37 = 67240192;
      v38 = v11;
      LODWORD(v35) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,EnableTrackRunRecorder,%{public}d", &v37, v35);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    if (v11)
      operator new();
    if (*(_BYTE *)(a1 + 34))
      operator new();
    sub_1013A1560(a1);
    if (*(_BYTE *)(a1 + 34) != 0)
    {
      sub_1001E4804(buf);
      LOBYTE(v37) = 0;
      v16 = sub_1001E4874(*(uint64_t *)buf, "EnableTrackRunTrackDataQuery", (BOOL *)&v37);
      if ((_BYTE)v37)
        v17 = 0;
      else
        v17 = v16;
      v18 = v40;
      if (!v40)
        goto LABEL_46;
      v19 = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
      {
LABEL_46:
        if ((v17 & 1) == 0)
          goto LABEL_47;
LABEL_53:
        sub_100E087CC();
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((v17 & 1) != 0)
        goto LABEL_53;
    }
LABEL_47:
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v21 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "TrackRun,Creating fTRCGeoMapRunningTrackDataManager", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      LOWORD(v37) = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,Creating fTRCGeoMapRunningTrackDataManager", &v37, v35);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    operator new();
  }
  sub_1019502C8();
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/TrackRun/CLTrackRunController.mm", 105, "CLTrackRunController");
  __break(1u);
  dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v22 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
  {
    v23 = *(unsigned __int8 *)(a1 + 176);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "TrackRun,DisableTrackRunHints,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v29 = *(unsigned __int8 *)(a1 + 176);
    v37 = 67240192;
    v38 = v29;
    LODWORD(v36) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,DisableTrackRunHints,%{public}d", &v37, v36);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  return a1;
}

void sub_1013A109C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::mutex *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = v1[34];
  v1[34] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[33];
  v1[33] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[32];
  v1[32] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[31];
  v1[31] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[30];
  v1[30] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v1[29];
  v1[29] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v1[28];
  v1[28] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v1[27];
  v1[27] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_1013AC438(v3, 0);
  std::mutex::~mutex(v2);
  v14 = v1[13];
  v1[13] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *v4;
  *v4 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v1[1];
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1013A12AC()
{
  uint64_t v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  v1 = sub_10075FEA8();
  LOBYTE(v10[0]) = 0;
  if (sub_1001E4874(v0, "EnableTrackRunEngine", (BOOL *)v10))
    v2 = LOBYTE(v10[0]) != 0;
  else
    v2 = v1;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v6 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TrackRun,IsTrackRunEngineEnabledIfInstantiated,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v10[0] = 67240192;
    v10[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,IsTrackRunEngineEnabledIfInstantiated,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTrackRunController::IsTrackRunEngineEnabledIfInstantiated()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return sub_1013A68A4() & v2;
}

void sub_1013A14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013A14F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4[4];
  _QWORD v5[7];

  sub_100166054(v5);
  sub_10010F434((uint64_t)v4);
  sub_1013ABFA4(v2, v4, (uint64_t)v5);
  sub_1013A3A68(a1, (uint64_t)v5, 0);
  return sub_100166004(v5);
}

void sub_1013A1548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013A1560(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string::size_type size;
  NSObject *v28;
  NSObject *v29;
  const std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type v34;
  NSObject *v35;
  NSObject *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  uint64_t v63;
  std::string v64;
  _WORD v65[8];
  std::string __dst;
  std::string __p;
  uint64_t v68;
  uint64_t v69;
  const std::string *v70;
  std::__shared_weak_count *v71;
  _BYTE v72[10];
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  unint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint8_t buf[16];
  _BYTE v84[10];
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  double v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;

  v68 = 0;
  v69 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001E4B84(*(uint64_t *)buf, "CLTRSimulatedLapCount", (_DWORD *)&v69 + 1);
  v3 = v2;
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (v2)
  {
LABEL_6:
    *(_DWORD *)(a1 + 408) = HIDWORD(v69);
    *(_BYTE *)(a1 + 412) = 1;
  }
LABEL_7:
  sub_1001E4804(buf);
  v7 = sub_1001E4B84(*(uint64_t *)buf, "CLTRSimulatedLaneEstimate", &v69);
  v8 = v7;
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  if (v7)
  {
LABEL_12:
    *(_DWORD *)(a1 + 416) = v69;
    *(_BYTE *)(a1 + 420) = 1;
  }
LABEL_13:
  sub_1001E4804(buf);
  v12 = sub_1001E4B84(*(uint64_t *)buf, "CLTRSimulatedEstimatedLaneConfidence", (_DWORD *)&v68 + 1);
  v13 = v12;
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_17;
  v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_21;
  }
  else
  {
LABEL_17:
    if (!v12)
      goto LABEL_21;
  }
  v17 = HIDWORD(v68);
  if ((HIDWORD(v68) - 1) >= 3)
    v17 = 0;
  *(_DWORD *)(a1 + 424) = v17;
LABEL_21:
  sub_1001E4804(buf);
  v18 = sub_1001E4B84(*(uint64_t *)buf, "CLTRSimulatedTrackProximity", &v68);
  v19 = v18;
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_25;
  v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (!v19)
      goto LABEL_29;
  }
  else
  {
LABEL_25:
    if (!v18)
      goto LABEL_29;
  }
  v23 = v68;
  if ((v68 - 1) >= 4)
    v23 = 0;
  *(_DWORD *)(a1 + 428) = v23;
LABEL_29:
  memset(&__p, 0, sizeof(__p));
  sub_1001E4804(&v70);
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = 0;
  sub_1005F0F40((uint64_t)v70, "CLTRSimulatedTrackCoordinateAndRadius", &__dst, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
  __p.__r_.__value_.__r.__words[2] = *(_QWORD *)v84;
  v84[7] = 0;
  buf[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v24 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v70 = 0;
    v71 = 0;
    *(_QWORD *)v72 = 0;
    sub_100512BB4(&__p, 0x2Cu, (uint64_t *)&v70);
    if ((char *)v71 - (char *)v70 == 72)
    {
      *(double *)(a1 + 328) = std::stod(v70, 0);
      *(_BYTE *)(a1 + 336) = 1;
      *(double *)(a1 + 344) = std::stod(v70 + 1, 0);
      *(_BYTE *)(a1 + 352) = 1;
      *(double *)(a1 + 360) = std::stod(v70 + 2, 0);
      *(_BYTE *)(a1 + 368) = 1;
      if (!*(_BYTE *)(a1 + 336)
        || !*(_BYTE *)(a1 + 352)
        || !sub_10011CE88(*(double *)(a1 + 328), *(double *)(a1 + 344))
        || !*(_BYTE *)(a1 + 368)
        || *(double *)(a1 + 360) < 0.0)
      {
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v28 = qword_10229FC58;
        if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "TrackRun,Warning,CLTRSimulatedTrackCoordinateAndRadius could not be used,simulated\t\t\t\t\t\t\t  coordinates or radius invalid.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC50 != -1)
            dispatch_once(&qword_10229FC50, &stru_1021B27D8);
          v65[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,Warning,CLTRSimulatedTrackCoordinateAndRadius could not be used,simulated\t\t\t\t\t\t\t  coordinates or radius invalid.", v65, 2);
          v62 = (uint8_t *)v61;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v61);
          if (v62 != buf)
            free(v62);
        }
        if (*(_BYTE *)(a1 + 336))
          *(_BYTE *)(a1 + 336) = 0;
        if (*(_BYTE *)(a1 + 352))
          *(_BYTE *)(a1 + 352) = 0;
        if (*(_BYTE *)(a1 + 368))
          *(_BYTE *)(a1 + 368) = 0;
      }
    }
    else
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v29 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "TrackRun,Warning,CLTRSimulatedTrackCoordinateAndRadius could not be parsed,did not have three parts", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v65[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,Warning,CLTRSimulatedTrackCoordinateAndRadius could not be parsed,did not have three parts", v65, 2);
        v58 = (uint8_t *)v57;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v57);
        if (v58 != buf)
          free(v58);
      }
    }
    *(_QWORD *)buf = &v70;
    sub_100259608((void ***)buf);
  }
  std::string::erase(&__p, 0, 0xFFFFFFFFFFFFFFFFLL);
  sub_1001E4804(&v70);
  v30 = v70;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v64, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v64 = __p;
  sub_1005F0F40((uint64_t)v30, "CLTRSimulatedUserPosition", &v64, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
  __p.__r_.__value_.__r.__words[2] = *(_QWORD *)v84;
  v84[7] = 0;
  buf[0] = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v31 = v71;
  if (v71)
  {
    v32 = (unint64_t *)&v71->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v34 = __p.__r_.__value_.__l.__size_;
  if (v34)
  {
    v70 = 0;
    v71 = 0;
    *(_QWORD *)v72 = 0;
    sub_100512BB4(&__p, 0x2Cu, (uint64_t *)&v70);
    if ((char *)v71 - (char *)v70 == 48)
    {
      *(double *)(a1 + 376) = std::stod(v70, 0);
      *(_BYTE *)(a1 + 384) = 1;
      *(double *)(a1 + 392) = std::stod(v70 + 1, 0);
      *(_BYTE *)(a1 + 400) = 1;
    }
    else
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v35 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "TrackRun,Warning,CLTRSimulatedUserPosition could not be parsed,did not have two parts", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v65[0] = 0;
        LODWORD(v63) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,Warning,CLTRSimulatedUserPosition could not be parsed,did not have two parts", v65, v63);
        v60 = (uint8_t *)v59;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
    }
    *(_QWORD *)buf = &v70;
    sub_100259608((void ***)buf);
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v36 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 412))
      v37 = *(_DWORD *)(a1 + 408);
    else
      v37 = -1;
    if (*(_BYTE *)(a1 + 420))
      v38 = *(_DWORD *)(a1 + 416);
    else
      v38 = -1;
    v39 = 0;
    v40 = 0;
    if (*(_BYTE *)(a1 + 336))
      v40 = *(_QWORD *)(a1 + 328);
    if (*(_BYTE *)(a1 + 352))
      v39 = *(_QWORD *)(a1 + 344);
    if (*(_BYTE *)(a1 + 368))
      v41 = *(double *)(a1 + 360);
    else
      v41 = -1.0;
    v42 = 0;
    v43 = 0;
    if (*(_BYTE *)(a1 + 384))
      v43 = *(_QWORD *)(a1 + 376);
    v44 = *(_DWORD *)(a1 + 424);
    v45 = *(_DWORD *)(a1 + 428);
    if (*(_BYTE *)(a1 + 400))
      v42 = *(_QWORD *)(a1 + 392);
    *(_DWORD *)buf = 67176705;
    *(_DWORD *)&buf[4] = v37;
    *(_WORD *)&buf[8] = 1025;
    *(_DWORD *)&buf[10] = v38;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)v84 = v44;
    *(_WORD *)&v84[4] = 1025;
    *(_DWORD *)&v84[6] = v45;
    v85 = 2049;
    v86 = v40;
    v87 = 2049;
    v88 = v39;
    v89 = 2049;
    v90 = v41;
    v91 = 2049;
    v92 = v43;
    v93 = 2049;
    v94 = v42;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "TrackRun,Simulated,LapCount,%{private}d,LaneEstimate,%{private}d,EstimatedLaneConfidence,%{public}d,TrackProximity,%{private}d,TrackLatitude,%{private}.7lf,TrackLongitude,%{private}.7lf,TrackRadius,%{private}.1lf,DeviceLatitude,%{private}.7lf,DeviceLongitude,%{private}.7lf", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    if (*(_BYTE *)(a1 + 412))
      v46 = *(_DWORD *)(a1 + 408);
    else
      v46 = -1;
    if (*(_BYTE *)(a1 + 420))
      v47 = *(_DWORD *)(a1 + 416);
    else
      v47 = -1;
    if (*(_BYTE *)(a1 + 336))
      v48 = *(_QWORD *)(a1 + 328);
    else
      v48 = 0;
    if (*(_BYTE *)(a1 + 352))
      v49 = *(_QWORD *)(a1 + 344);
    else
      v49 = 0;
    if (*(_BYTE *)(a1 + 368))
      v50 = *(_QWORD *)(a1 + 360);
    else
      v50 = 0xBFF0000000000000;
    if (*(_BYTE *)(a1 + 384))
      v51 = *(_QWORD *)(a1 + 376);
    else
      v51 = 0;
    v52 = *(_DWORD *)(a1 + 424);
    v53 = *(_DWORD *)(a1 + 428);
    if (*(_BYTE *)(a1 + 400))
      v54 = *(_QWORD *)(a1 + 392);
    else
      v54 = 0;
    LODWORD(v70) = 67176705;
    HIDWORD(v70) = v46;
    LOWORD(v71) = 1025;
    *(_DWORD *)((char *)&v71 + 2) = v47;
    HIWORD(v71) = 1026;
    *(_DWORD *)v72 = v52;
    *(_WORD *)&v72[4] = 1025;
    *(_DWORD *)&v72[6] = v53;
    v73 = 2049;
    v74 = v48;
    v75 = 2049;
    v76 = v49;
    v77 = 2049;
    v78 = v50;
    v79 = 2049;
    v80 = v51;
    v81 = 2049;
    v82 = v54;
    LODWORD(v63) = 76;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,Simulated,LapCount,%{private}d,LaneEstimate,%{private}d,EstimatedLaneConfidence,%{public}d,TrackProximity,%{private}d,TrackLatitude,%{private}.7lf,TrackLongitude,%{private}.7lf,TrackRadius,%{private}.1lf,DeviceLatitude,%{private}.7lf,DeviceLongitude,%{private}.7lf", &v70, v63);
    v56 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1013A2134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *a46)
{
  a46 = &a36;
  sub_100259608((void ***)&a46);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1013A21FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013A95F8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A23B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A23D4(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013A9800(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A259C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A25BC(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013A9C14(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A2784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A27A4(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013AA204(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A296C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A298C(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleNatalimetryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013AA7A8(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A2B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A2B74(int a1, _DWORD *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013AAB68(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A2D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A2D5C(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleStepCountNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013AB2B4(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A2F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A2F44(int a1, _DWORD *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTrackRunController::HandleWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 184), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1013AB7F0(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1013A310C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013A312C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE buf[12];
  char v31;
  int v32;
  _BYTE *v33;
  void *__p[2];
  char v35;

  if (!a2)
    sub_101950568();
  v4 = *(_QWORD *)(a1 + 96);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v15 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v16 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning TrackRun,could not handle exiting %{private}s", buf, 0xCu);
      if (v35 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v25 = qword_10229FC58;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v31 >= 0)
        v26 = buf;
      else
        v26 = *(_BYTE **)buf;
      v32 = 136380675;
      v33 = v26;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 0, "#Warning TrackRun,could not handle exiting %{private}s", &v32, 12);
      v28 = v27;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v28);
      if (v28 != (char *)__p)
        free(v28);
    }
    sub_1013A606C(a1);
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v6 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,entering %{private}s", buf, 0xCu);
      if (v35 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v17 = qword_10229FC58;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v31 >= 0)
        v18 = buf;
      else
        v18 = *(_BYTE **)buf;
      v32 = 136380675;
      v33 = v18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "TrackRun,entering %{private}s", &v32, 12);
      v20 = v19;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v20);
      if (v20 != (char *)__p)
        free(v20);
    }
    *(_QWORD *)(a1 + 96) = a2;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) != 0)
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v7 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
        v8 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TrackRun,successfully entered %{private}s", buf, 0xCu);
        if (v35 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v9 = qword_10229FC58;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
        if (v31 >= 0)
          v10 = buf;
        else
          v10 = *(_BYTE **)buf;
        v32 = 136380675;
        v33 = v10;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "TrackRun,successfully entered %{private}s", &v32, v29);
        v12 = v11;
        if (v31 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v12);
        if (v12 != (char *)__p)
          free(v12);
      }
    }
    else
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v13 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 96) + 16))(__p);
        v14 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning TrackRun,could not handle entering %{private}s", buf, 0xCu);
        if (v35 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v21 = qword_10229FC58;
        (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 96) + 16))(buf);
        if (v31 >= 0)
          v22 = buf;
        else
          v22 = *(_BYTE **)buf;
        v32 = 136380675;
        v33 = v22;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 0, "#Warning TrackRun,could not handle entering %{private}s", &v32, v29);
        v24 = v23;
        if (v31 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v24);
        if (v24 != (char *)__p)
          free(v24);
      }
      sub_1013A606C(a1);
    }
  }
}

uint64_t sub_1013A38C4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v4 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TrackRun,SendToTrackRunEngine", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,SendToTrackRunEngine", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SendToTrackRunEngine(const SerializedClpLogEntry &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return trackrun::TrackRunSupervisor::RaiseEventsFrom(*(_QWORD *)(a1 + 104), a2);
}

void sub_1013A3A68(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  void *__p[2];
  uint64_t v13;
  uint8_t buf[1640];

  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(a2, __p) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 34) && *(_QWORD *)(a1 + 104) && (a3 & 1) == 0)
      sub_1013A38C4(a1, (uint64_t)__p);
    if (*(_QWORD *)(a1 + 40))
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v5 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,Record message", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v11 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Record message", &v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SendMessage(const CLP::LogEntry::LogEntry &, BOOL)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      sub_100166CE0(*(_QWORD *)(a1 + 40), (uint64_t)__p);
    }
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TrackRun,Could not serialize protobuf message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "TrackRun,Could not serialize protobuf message", &v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackRunController::SendMessage(const CLP::LogEntry::LogEntry &, BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_1013A3D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013A3DB4()
{
  return 1;
}

_QWORD *sub_1013A3DBC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "TrackRunControllerDisabledState");
}

uint64_t sub_1013A3DCC(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  uint64_t v4;

  sub_1013A3E58(*(_QWORD *)(a1 + 8));
  sub_1013A3F3C(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 104))
  {
    v3 = (std::mutex *)(v2 + 112);
    std::mutex::lock((std::mutex *)(v2 + 112));
    cnframework::Supervisor::Pause(*(cnframework::Supervisor **)(*(_QWORD *)(a1 + 8) + 104));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(*(_QWORD *)(a1 + 8) + 104));
    std::mutex::unlock(v3);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = *(_QWORD *)(v2 + 40);
  if (v4)
    sub_10005A6D8(v4);
  return 1;
}

void sub_1013A3E44(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1013A3E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 216);
    if (v2)
      objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 41);
  }
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a1 + 25))
  {
    v3 = *(_QWORD *)(a1 + 224);
    if (v3)
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 1);
  }
  *(_BYTE *)(a1 + 25) = 0;
  sub_1013A6AE4(a1);
  sub_1013A6C94(a1);
  sub_1013A6E44(a1);
  sub_1013A5A08(a1);
  sub_1013A6FF4((_BYTE *)a1);
  if (*(_BYTE *)(a1 + 30))
  {
    v4 = *(_QWORD *)(a1 + 256);
    if (v4)
      objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 0);
    *(_BYTE *)(a1 + 30) = 0;
  }
  if (*(_BYTE *)(a1 + 31))
  {
    v5 = *(_QWORD *)(a1 + 264);
    if (v5)
      objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 0);
    *(_BYTE *)(a1 + 31) = 0;
  }
  if (*(_BYTE *)(a1 + 33))
  {
    v6 = *(_QWORD *)(a1 + 272);
    if (v6)
      objc_msgSend(*(id *)(v6 + 16), "unregister:forNotification:", *(_QWORD *)(v6 + 8), 0);
    *(_BYTE *)(a1 + 33) = 0;
  }
}

void sub_1013A3F3C(uint64_t a1)
{
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  id v8;
  void *__p[2];
  char v10;
  uint8_t buf[8];
  uint64_t v12;
  uint8_t *v13;

  if (*(_BYTE *)(a1 + 32))
    return;
  v2 = sub_100CF08FC();
  sub_1015A2E04(__p, "CLTrackRunController");
  v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "silo"), "queue");
  *(_QWORD *)buf = off_1021B2828;
  v12 = a1;
  v13 = buf;
  sub_100CF0C5C(v2, (uint64_t)__p, (uint64_t *)&v8, (uint64_t)buf);
  v3 = v13;
  if (v13 == buf)
  {
    v4 = 4;
    v3 = buf;
    goto LABEL_6;
  }
  if (v13)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  if (v10 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 32) = 1;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v5 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TrackRun,registerForTrackRunEnablementNotifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,registerForTrackRunEnablementNotifications", __p, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForTrackRunEnablementNotifications()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1013A4160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1013A41B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "TrackRunControllerEnabledState");
}

uint64_t sub_1013A41C8(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  _WORD v21[8];
  uint8_t buf[1640];

  *(double *)(a1 + 16) = sub_1001FCBB4();
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 40))
  {
    sub_10114C4C0(*(_QWORD *)(v2 + 40));
    sub_1013A14F0(*(_QWORD *)(a1 + 8));
    v2 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)(v2 + 104))
  {
    v3 = (std::mutex *)(v2 + 112);
    std::mutex::lock((std::mutex *)(v2 + 112));
    cnframework::Supervisor::Start(*(cnframework::Supervisor **)(*(_QWORD *)(a1 + 8) + 104));
    std::mutex::unlock(v3);
    v2 = *(_QWORD *)(a1 + 8);
  }
  if (!*(_QWORD *)(v2 + 192))
    operator new();
  sub_1013A3F3C(v2);
  sub_1013A4594(*(_QWORD **)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v4 + 25))
  {
    v5 = *(_QWORD *)(v4 + 224);
    v6 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      objc_msgSend(*(id *)(v5 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v5 + 8), 1, 0);
      v6 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v4 + 25) = 1;
    v4 = v6;
  }
  if (!*(_BYTE *)(v4 + 26))
  {
    v7 = *(_QWORD *)(v4 + 232);
    v8 = v4;
    if (v7)
    {
      objc_msgSend(*(id *)(v7 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v7 + 8), 2, 0);
      v8 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v4 + 26) = 1;
    v4 = v8;
  }
  if (!*(_BYTE *)(v4 + 27))
  {
    v9 = *(_QWORD *)(v4 + 240);
    v10 = v4;
    if (v9)
    {
      objc_msgSend(*(id *)(v9 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v9 + 8), 0, 0);
      v10 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v4 + 27) = 1;
    v4 = v10;
  }
  if (!*(_BYTE *)(v4 + 28))
  {
    v11 = *(_QWORD *)(v4 + 248);
    v12 = v4;
    if (v11)
    {
      objc_msgSend(*(id *)(v11 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v11 + 8), 2, 0);
      v12 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v4 + 28) = 1;
    v4 = v12;
  }
  sub_1013A4750(v4);
  sub_1013A4B1C(*(_BYTE **)(a1 + 8));
  v13 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v13 + 30))
  {
    v14 = *(_QWORD *)(v13 + 256);
    if (v14)
    {
      objc_msgSend(*(id *)(v14 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v14 + 8), 0, 0);
      *(_BYTE *)(v13 + 30) = 1;
      v13 = *(_QWORD *)(a1 + 8);
    }
  }
  if (!*(_BYTE *)(v13 + 31))
  {
    v15 = *(_QWORD *)(v13 + 264);
    if (v15)
    {
      objc_msgSend(*(id *)(v15 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v15 + 8), 0, 0);
      *(_BYTE *)(v13 + 31) = 1;
      v13 = *(_QWORD *)(a1 + 8);
    }
  }
  if (!*(_BYTE *)(v13 + 33))
  {
    v16 = *(_QWORD *)(v13 + 272);
    if (v16)
    {
      objc_msgSend(*(id *)(v16 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v16 + 8), 0, 0);
      *(_BYTE *)(v13 + 33) = 1;
    }
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v17 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "TrackRun,done registering for notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v21[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,done registering for notifications", v21, 2);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTrackRunController::TrackRunControllerEnabledState::HandleStateEntry()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return 1;
}

void sub_1013A4558()
{
  operator delete();
}

_QWORD *sub_1013A4594(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!*((_BYTE *)result + 24))
  {
    v1 = result;
    if (result[27])
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v2 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,GnssRhythmicModeOfOperationNotifications,registered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v5[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,GnssRhythmicModeOfOperationNotifications,registered", v5, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForGnssRhythmicModeOfOperationNotifications()", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
      result = objc_msgSend(*(id *)(v1[27] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1[27] + 8), 41, 0);
      *((_BYTE *)v1 + 24) = 1;
    }
  }
  return result;
}

void sub_1013A4750(uint64_t a1)
{
  CLTrackRunControllerRoutineAdapter *v2;
  void *v3;
  NSObject *v4;
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[5];
  _WORD v14[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 200))
  {
    *(_QWORD *)(a1 + 200) = objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
    v2 = -[CLTrackRunControllerRoutineAdapter initWithTrackRunController:]([CLTrackRunControllerRoutineAdapter alloc], "initWithTrackRunController:", a1);
    *(_QWORD *)(a1 + 208) = v2;
    v3 = *(void **)(a1 + 200);
    if (v3)
    {
      objc_msgSend(v3, "registerDelegate:inSilo:", v2, objc_msgSend(*(id *)(a1 + 184), "silo"));
      objc_msgSend(*(id *)(a1 + 200), "setDelegateEntityName:", "CLTrackRunController");
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v4 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,registered for routine monitor. Start monitoring for visits.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltrm,registered for routine monitor. Start monitoring for visits.", v14, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForRoutineMonitor()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      objc_msgSend(*(id *)(a1 + 200), "startLeechingVisitsForClient:", *(_QWORD *)(a1 + 208));
      v5 = objc_alloc((Class)RTStoredVisitFetchOptions);
      v6 = objc_msgSend(v5, "initWithAscending:confidence:dateInterval:labelVisit:limit:", 0, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh), 0, 1, &off_10221DB98);
      v7 = *(void **)(a1 + 200);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1013A4CE0;
      v13[3] = &unk_10214C458;
      v13[4] = a1;
      objc_msgSend(v7, "fetchStoredVisitsWithOptions:withReply:", v6, v13);

    }
    else
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v8 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cltrm,error CLRoutineMonitor is not supported.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltrm,error CLRoutineMonitor is not supported.", v14, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForRoutineMonitor()", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
  }
}

void sub_1013A4B1C(_BYTE *a1)
{
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (!a1[29])
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v2 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun,registering for session tracker app foregrounded notifications.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,registering for session tracker app foregrounded notifications.", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForSessionTrackerAppForegroundedNotifications()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1013ABD84, CFSTR("NanolifestyleSessionTrackerAppForegroundedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    a1[29] = 1;
  }
}

void sub_1013A4CE0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;

  if (a3)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v4 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#cltrm,error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    }
    v5 = qword_10229FC58;
    if (os_signpost_enabled((os_log_t)qword_10229FC58))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#cltrm,error fetching visits", "{\"msg%{public}.0s\":\"#cltrm,error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", objc_msgSend(a2, "firstObject"));
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cltrm,fetched most recent visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    sub_1013A4F38(v6, v7);

  }
}

void sub_1013A4F38(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  id v17;
  __int16 v18;
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  id v23;

  if (objc_msgSend(a2, "hasArrivalDate") && (objc_msgSend(a2, "hasDepartureDate") & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v12 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283779;
      v21 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
      v22 = 2081;
      v23 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#cltrm,visit,currently in,userType,%{private}lu,preferredName,%{private}s", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_27;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v14 = qword_10229FC58;
    v16 = 134283779;
    v17 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
    v18 = 2081;
    v19 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#cltrm,visit,currently in,userType,%{private}lu,preferredName,%{private}s", &v16, 22);
    v7 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::processVisit(CLVisit *)", "%s\n", v15);
    goto LABEL_32;
  }
  if (objc_msgSend(a2, "hasArrivalDate") && objc_msgSend(a2, "hasDepartureDate"))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v4 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283779;
      v21 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
      v22 = 2081;
      v23 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,visit,departed,userType,%{private}lu,preferredName,%{private}s", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_27;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v5 = qword_10229FC58;
    v16 = 134283779;
    v17 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
    v18 = 2081;
    v19 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#cltrm,visit,departed,userType,%{private}lu,preferredName,%{private}s", &v16, 22);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::processVisit(CLVisit *)", "%s\n", v6);
LABEL_32:
    if (v7 != buf)
      free(v7);
LABEL_27:
    sub_100166054(buf);
    sub_10010F434((uint64_t)&v16);
    sub_1013A56A0(v13, (uint64_t *)&v16, a2, (uint64_t)buf);
    sub_1013A3A68(a1, (uint64_t)buf, 0);
    sub_100166004(buf);
    return;
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v8 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283779;
    v21 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
    v22 = 2081;
    v23 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#cltrm,visit,invalid arrival and deparature dates,cannot serialize,userType,%{private}lu,preferredName,%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v9 = qword_10229FC58;
    v16 = 134283779;
    v17 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType");
    v18 = 2081;
    v19 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "#cltrm,visit,invalid arrival and deparature dates,cannot serialize,userType,%{private}lu,preferredName,%{private}s", &v16, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLTrackRunController::processVisit(CLVisit *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_1013A54E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013A5508(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onSessionTrackerAppLaunchNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "onSessionTrackerAppLaunchNotification", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::onSessionTrackerAppForegroundedNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(double *)(a1 + 432) = sub_1001FCBB4();
}

void sub_1013A56A0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  *(_DWORD *)(a4 + 52) |= 2u;
  v6 = *(_QWORD *)(a4 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 1u;
  v7 = *(_QWORD *)(v6 + 264);
  if (!v7)
    operator new();
  sub_1013A5964((uint64_t)a2, a4);
  *(_DWORD *)(v7 + 68) |= 1u;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    operator new();
  if ((sub_100178094(a2, v8) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v9 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#cltrm,Warning,Failed to convert CLVisit receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltrm,Warning,Failed to convert CLVisit receipt time to protobuf", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeCLVisit(const CLUtils::Timestamp &, const CLVisit *, CLP::LogEntry::LogEntry &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  sub_10137BE1C(a3, v7);
}

void sub_1013A5908()
{
  operator delete();
}

double sub_1013A5964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double result;

  *(_DWORD *)(a2 + 52) |= 1u;
  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
    operator new();
  v3 = *(_DWORD *)(v2 + 44);
  *(int8x16_t *)(v2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  result = *(double *)a1;
  *(_DWORD *)(v2 + 44) = v3 | 7;
  *(double *)(v2 + 24) = result;
  return result;
}

void sub_1013A59E4()
{
  operator delete();
}

void sub_1013A5A08(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(void **)(a1 + 200);
  if (v2)

  *(_QWORD *)(a1 + 200) = 0;
  v3 = *(void **)(a1 + 208);
  if (v3)

  *(_QWORD *)(a1 + 208) = 0;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v4 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,deregistered for routine monitor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltrm,deregistered for routine monitor", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForRoutineMonitor()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

uint64_t sub_1013A5BB0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  sub_1013A312C(a1, a1 + 56);
  sub_1013A5E78(a1);
  sub_1013A606C(a1);
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun,destructing CLTrackRunController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v17[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,destructing CLTrackRunController", v17, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "CLTrackRunController::~CLTrackRunController()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v3 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_1013AC438((uint64_t *)(a1 + 192), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(std::__shared_weak_count **)(a1 + 8);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_1013A5E6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1013A5E78(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  void **v5;
  _WORD v6[8];
  void *__p[2];
  char v8;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = sub_100CF08FC();
    sub_1015A2E04(__p, "CLTrackRunController");
    sub_100CF0FBC(v2, (unsigned __int8 **)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v3 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun,deregisterForTrackRunEnablementNotifications", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,deregisterForTrackRunEnablementNotifications", v6, 2);
      v5 = (void **)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForTrackRunEnablementNotifications()", "%s\n", v4);
      if (v5 != __p)
        free(v5);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
}

void sub_1013A6048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013A606C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _BYTE v15[12];
  char v16;
  int v17;
  _BYTE *v18;
  uint8_t buf[8];
  char v20;

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,resetting CLTrackRunController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    *(_WORD *)v15 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,resetting CLTrackRunController", v15, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::Reset()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_1013A3E58(a1);
  sub_1013A3F3C(a1);
  *(_QWORD *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 56;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v3 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 96) + 16))(buf);
    v4 = v20 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v15 = 136380675;
    *(_QWORD *)&v15[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TrackRun,entering %{private}s", v15, 0xCu);
    if (v20 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8 = qword_10229FC58;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 96) + 16))(v15);
    if (v16 >= 0)
      v9 = v15;
    else
      v9 = *(_BYTE **)v15;
    v17 = 136380675;
    v18 = v9;
    LODWORD(v14) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "TrackRun,entering %{private}s", &v17, v14);
    v11 = v10;
    if (v16 < 0)
      operator delete(*(void **)v15);
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::Reset()", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  if (*(_QWORD *)(a1 + 104))
  {
    std::mutex::lock((std::mutex *)(a1 + 112));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(a1 + 104));
    std::mutex::unlock((std::mutex *)(a1 + 112));
  }
  if (*(_QWORD *)(a1 + 192))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,Resetting fTRCGeoMapRunningTrackDataManager", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      *(_WORD *)v15 = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Resetting fTRCGeoMapRunningTrackDataManager", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::Reset()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_10077CC9C(*(_QWORD *)(a1 + 192));
  }
}

void sub_1013A6530(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013A654C(uint64_t result)
{
  if (result)
  {
    sub_1013A5BB0(result);
    operator delete();
  }
  return result;
}

void sub_1013A6578(_QWORD *a1@<X8>)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (sub_1013A68A4())
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v2 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun,feature enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,feature enabled", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "static CLTrackRunController::CLTrackRunControllerPointer CLTrackRunController::CreateTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    operator new();
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v3 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun,feature disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,feature disabled", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLTrackRunController::CLTrackRunControllerPointer CLTrackRunController::CreateTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *a1 = 0;
  a1[1] = nullsub_1524;
}

void sub_1013A6878()
{
  operator delete();
}

uint64_t sub_1013A68A4()
{
  uint64_t v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[8];
  std::__shared_weak_count *v10;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  LODWORD(v1) = sub_10075FEA8();
  LOBYTE(v8[0]) = 0;
  if (sub_1001E4874(v0, "IsTrackRunEnabledIfInstantiated", (BOOL *)v8))
    v1 = LOBYTE(v8[0]) != 0;
  else
    v1 = v1;
  v2 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v5 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,IsTrackRunEnabledIfInstantiated,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8[0] = 67240192;
    v8[1] = v1;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,IsTrackRunEnabledIfInstantiated,%{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTrackRunController::IsTrackRunEnabledIfInstantiated()", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return v1;
}

void sub_1013A6AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_1013A6AE4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from motion state mediator notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,deregister from motion state mediator notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForMotionStateMediatorNotifications()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*(_BYTE *)(a1 + 26))
  {
    v3 = *(_QWORD *)(a1 + 232);
    if (v3)
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 2);
    *(_BYTE *)(a1 + 26) = 0;
  }
}

void sub_1013A6C94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from motion state observer notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,deregister from motion state observer notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForMotionStateObserverNotifications()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*(_BYTE *)(a1 + 27))
  {
    v3 = *(_QWORD *)(a1 + 240);
    if (v3)
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 0);
    *(_BYTE *)(a1 + 27) = 0;
  }
}

void sub_1013A6E44(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from natalimetry notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,deregister from natalimetry notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForNatalimetryNotifications()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*(_BYTE *)(a1 + 28))
  {
    v3 = *(_QWORD *)(a1 + 248);
    if (v3)
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 2);
    *(_BYTE *)(a1 + 28) = 0;
  }
}

void sub_1013A6FF4(_BYTE *a1)
{
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from session tracker app foregrounded notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,deregister from session tracker app foregrounded notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForSessionTrackerAppForegroundedNotifications()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (a1[29])
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("NanolifestyleSessionTrackerAppForegroundedNotification"), 0);
    a1[29] = 0;
  }
}

void sub_1013A71A8(uint64_t a1)
{
  unsigned __int8 v2;
  size_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  void *__p[2];
  unsigned __int8 v20;
  void *__s1;
  size_t __n;
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 96) + 16))(&__s1);
  sub_1015A2E04(__p, "TrackRunControllerDisabledState");
  v2 = v23;
  if ((v23 & 0x80u) == 0)
    v3 = v23;
  else
    v3 = __n;
  v4 = v20;
  v5 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v3 != v4)
  {
    v15 = 0;
    if (((char)v20 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  if ((v20 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((char)v23 < 0)
  {
    v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v23)
  {
    v7 = v23 - 1;
    p_s1 = &__s1;
    do
    {
      v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v9 = v10;
      v12 = *(unsigned __int8 *)v6;
      v6 = (void **)((char *)v6 + 1);
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  v15 = 1;
  if (((char)v20 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete(__s1);
    if (v15)
      return;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v23 & 0x80) != 0)
    goto LABEL_28;
LABEL_24:
  if (v15)
    return;
LABEL_29:
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v16 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TrackRun,received external disable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,received external disable command", __p, 2);
    v18 = (void **)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::DisableTrackRun()", "%s\n", v17);
    if (v18 != &__s1)
      free(v18);
  }
  sub_1013A312C(a1, a1 + 56);
}

void sub_1013A742C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013A7450(uint64_t a1)
{
  unsigned __int8 v2;
  size_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  void *__p[2];
  unsigned __int8 v20;
  void *__s1;
  size_t __n;
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 96) + 16))(&__s1);
  sub_1015A2E04(__p, "TrackRunControllerEnabledState");
  v2 = v23;
  if ((v23 & 0x80u) == 0)
    v3 = v23;
  else
    v3 = __n;
  v4 = v20;
  v5 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v3 != v4)
  {
    v15 = 0;
    if (((char)v20 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  if ((v20 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((char)v23 < 0)
  {
    v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v23)
  {
    v7 = v23 - 1;
    p_s1 = &__s1;
    do
    {
      v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v9 = v10;
      v12 = *(unsigned __int8 *)v6;
      v6 = (void **)((char *)v6 + 1);
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  v15 = 1;
  if (((char)v20 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete(__s1);
    if (v15)
      return;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v23 & 0x80) != 0)
    goto LABEL_28;
LABEL_24:
  if (v15)
    return;
LABEL_29:
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v16 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TrackRun,received external enable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,received external enable command", __p, 2);
    v18 = (void **)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::EnableTrackRun()", "%s\n", v17);
    if (v18 != &__s1)
      free(v18);
  }
  sub_1013A312C(a1, a1 + 72);
}

void sub_1013A76D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013A76F8(uint64_t a1)
{
  double v2;
  double v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  double v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  _BYTE v11[12];
  _OWORD buf[102];

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = sub_1001FCBB4();
    sub_1001E4804(buf);
    *(_QWORD *)v11 = 0;
    if (sub_1001FD98C(*(uint64_t *)&buf[0], "CLTRRecordingFileAgeThresholdSeconds", v11))
      v3 = *(double *)v11;
    else
      v3 = 21600.0;
    v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v2 - *(double *)(a1 + 16);
    if (v7 > v3)
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v8 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "TrackRun,closing recording file,second since last,%.0lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        *(_DWORD *)v11 = 134217984;
        *(double *)&v11[4] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,closing recording file,second since last,%.0lf", COERCE_DOUBLE(v11));
        v10 = (char *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::NotifyGnssTurnedOff()", "%s\n", v9);
        if (v10 != (char *)buf)
          free(v10);
      }
      sub_10005A6D8(*(_QWORD *)(a1 + 40));
      *(double *)(a1 + 16) = v2;
      sub_10114C4C0(*(_QWORD *)(a1 + 40));
      sub_1013A14F0(a1);
    }
  }
}

void sub_1013A7960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1013A797C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  int v12;
  int TrackRunSolution;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  unsigned int v18;
  double v19;
  double v20;
  int v21;
  NSObject *v22;
  int v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 result;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  int v34;
  const char *v35;
  char *v36;
  _BYTE v37[8];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  unsigned __int8 v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unsigned __int8 v50;
  char v51;
  unsigned __int8 v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  double v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  unsigned __int16 v67;
  __int128 v68;
  char v69;
  char v70;
  char v71;
  int v72;
  int v73;
  __int128 buf;
  __int128 v75;
  __int128 v76;

  if (*(_BYTE *)(a1 + 384) && *(_BYTE *)(a1 + 400))
  {
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(a1 + 376);
    *(_QWORD *)(a2 + 12) = *(_QWORD *)(a1 + 392);
  }
  if (*(_BYTE *)(a1 + 336) && *(_BYTE *)(a1 + 352) && *(_BYTE *)(a1 + 368))
  {
    v6 = *(_DWORD *)(a2 + 96) - 1;
    if (v6 > 0xA || ((0x509u >> v6) & 1) == 0)
    {
      v7 = 0;
LABEL_10:
      *(_DWORD *)(a1 + 428) = v7;
      goto LABEL_11;
    }
    v18 = 0x508u >> (*(_BYTE *)(a2 + 96) - 1);
    v19 = sub_10011E634((double *)(a1 + 280), *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 328), *(double *)(a1 + 344), 0.0);
    if ((v18 & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 368))
      {
        v20 = *(double *)(a1 + 360);
        goto LABEL_54;
      }
    }
    else if (*(_BYTE *)(a1 + 368))
    {
      v20 = *(double *)(a1 + 360);
      if (v19 <= v20)
      {
        v7 = 4;
        goto LABEL_10;
      }
LABEL_54:
      if (v19 <= v20 + v20)
      {
        v7 = 3;
      }
      else if (v19 <= v20 * 3.0)
      {
        v7 = 2;
      }
      else
      {
        v7 = 1;
      }
      goto LABEL_10;
    }
    sub_10028DF3C();
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 412))
    v8 = *(_DWORD *)(a1 + 408);
  else
    v8 = -1;
  *(_DWORD *)(a3 + 168) = v8;
  if (*(_BYTE *)(a1 + 420))
  {
    *(_DWORD *)(a3 + 248) = *(_DWORD *)(a1 + 416);
    v9 = (_DWORD *)(a3 + 248);
    v10 = *(_DWORD *)(a1 + 416);
  }
  else
  {
    v10 = -1;
    *(_DWORD *)(a3 + 248) = -1;
    v9 = (_DWORD *)(a3 + 248);
  }
  *(_DWORD *)(a3 + 264) = v10;
  v11 = *(_DWORD *)(a1 + 424);
  if (v11 >= 4)
    v11 = 0;
  *(_DWORD *)(a3 + 272) = v11;
  v12 = *(_DWORD *)(a1 + 428);
  if ((v12 - 1) >= 4)
    v12 = 0;
  *(_DWORD *)(a3 + 276) = v12;
  if (!*(_BYTE *)(a1 + 34) || !*(_QWORD *)(a1 + 104) || *(_QWORD *)(a1 + 96) == a1 + 56)
    return 0;
  sub_1013AC338((uint64_t)v37);
  std::mutex::lock((std::mutex *)(a1 + 112));
  TrackRunSolution = trackrun::TrackRunSupervisor::GetTrackRunSolution(*(trackrun::TrackRunSupervisor **)(a1 + 104), (trackrun::TrackRunSolutionEvent *)v37);
  if (TrackRunSolution)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v14 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = TrackRunSolution;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "TrackRun,could not retrieve latest TrackRun solution,retval,%d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v72 = 67109120;
      v73 = TrackRunSolution;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,could not retrieve latest TrackRun solution,retval,%d", &v72);
      v31 = (char *)v30;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTrackRunController::GetLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
      if (v31 != (char *)&buf)
        free(v31);
    }
    v15 = 0;
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v16 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 67174657;
      DWORD1(buf) = v41;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TrackRun,obtained latest TrackRun solution with track proximity %{private}d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v72 = 67174657;
      v73 = v41;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,obtained latest TrackRun solution with track proximity %{private}d", &v72, 8);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTrackRunController::GetLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v32);
      if (v33 != (char *)&buf)
        free(v33);
    }
    v17 = v41;
    if ((v41 - 1) >= 4)
      v17 = 0;
    *(_DWORD *)(a3 + 276) = v17;
    if (v55)
    {
      *(_DWORD *)(a3 + 268) = v43;
      *(_QWORD *)(a3 + 280) = v42;
      *(_QWORD *)(a3 + 256) = v54;
      if (v51)
        *(_DWORD *)(a3 + 264) = v50;
      if (v53)
        *v9 = v52;
      if (v47)
        *(_QWORD *)(a2 + 60) = v46;
      if (v45)
      {
        *(_OWORD *)(a2 + 4) = v44;
        v15 = 1;
      }
      else
      {
        v15 = 0;
      }
      if (v49)
        *(_QWORD *)(a2 + 20) = v48;
      if (v70
        && (sub_10077E970(*(_QWORD *)(a1 + 192), 1),
            sub_10077D0A8(*(_QWORD *)(a1 + 192), (double *)(a2 + 4), a1, 1),
            v70)
        && *(_BYTE *)(a1 + 49))
      {
        v21 = *(_DWORD *)(a1 + 52);
        *(_DWORD *)(a1 + 52) = v21 + 1;
        if (v21 >= 1)
        {
          if (qword_10229FC50 != -1)
            dispatch_once(&qword_10229FC50, &stru_1021B27D8);
          v22 = qword_10229FC58;
          if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
          {
            v23 = *(_DWORD *)(a1 + 52);
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLTR,consective epochs requesting full track geometry during a trackrun supported workout,count,%d", (uint8_t *)&buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_10229FC50 != -1)
              dispatch_once(&qword_10229FC50, &stru_1021B27D8);
            v34 = *(_DWORD *)(a1 + 52);
            v72 = 67109120;
            v73 = v34;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "CLTR,consective epochs requesting full track geometry during a trackrun supported workout,count,%d", &v72);
            v36 = (char *)v35;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLTrackRunController::GetLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v35);
            if (v36 != (char *)&buf)
              free(v36);
          }
          if (*(_DWORD *)(a1 + 52) == 4)
            sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "silo"), "queue"), (uint64_t)"trackrun", (uint64_t)"need_full_track_geometry", 0);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 52) = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
    {
      if (v60 && v56)
      {
        v24 = *(double *)(a3 + 8);
        v25 = v58;
        if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v24 >= 0.0)
          *(double *)(a1 + 320) = *(double *)(a1 + 320) + v58 - v24;
        v26 = v59;
        *(double *)(a3 + 8) = v25;
        *(_QWORD *)(a3 + 16) = v26;
        if (v57)
          *(_BYTE *)(a3 + 288) = 1;
      }
      if (*(double *)a3 > 0.0)
        *(double *)a3 = *(double *)a3 + *(double *)(a1 + 320);
    }
    if (v69)
    {
      *(_DWORD *)(a3 + 168) = v67;
      v27 = v63;
      v28 = v64;
      *(double *)(a3 + 176) = v62 + (double)v61;
      *(_QWORD *)(a3 + 184) = v27;
      *(_QWORD *)(a3 + 192) = v28;
      *(_OWORD *)(a3 + 200) = v65;
      *(_OWORD *)(a3 + 216) = v66;
      *(_OWORD *)(a3 + 232) = v68;
    }
    v75 = 0u;
    v76 = 0u;
    buf = 0u;
    sub_1013AC3DC((uint64_t)&buf);
    v38 = buf;
    v39 = v75;
    v40 = v76;
    v71 = 0;
  }
  std::mutex::unlock((std::mutex *)(a1 + 112));
  trackrun::TrackRunSolutionEvent::~TrackRunSolutionEvent((trackrun::TrackRunSolutionEvent *)v37);
  result = v15 != 0;
  if (TrackRunSolution)
    return 0;
  return result;
}

void sub_1013A81A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex *v12;

  std::mutex::unlock(v12);
  trackrun::TrackRunSolutionEvent::~TrackRunSolutionEvent((trackrun::TrackRunSolutionEvent *)&a12);
  _Unwind_Resume(a1);
}

void sub_1013A81E0(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  uint8_t buf[1632];
  uint64_t v12[5];

  v3 = *((_DWORD *)a2 + 2);
  if (v3 < 1)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      v7 = *((_DWORD *)a2 + 2);
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TrackRun,Supplied hint lane number is invalid,%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v8 = *((_DWORD *)a2 + 2);
      LODWORD(v12[0]) = 67174657;
      HIDWORD(v12[0]) = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "TrackRun,Supplied hint lane number is invalid,%{private}d", v12, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackRunController::SetTrackRunHint(const CLTrackRunHint &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 416) = v3;
    *(_BYTE *)(a1 + 420) = 1;
    if (*(_BYTE *)(a1 + 34) || *(_QWORD *)(a1 + 40))
    {
      sub_100166054(buf);
      sub_10010F434((uint64_t)v12);
      sub_1013A8418(v5, v12, *a2, a2[1], (uint64_t)buf);
      sub_1013A3A68(a1, (uint64_t)buf, 0);
      sub_100166004(buf);
    }
  }
}

void sub_1013A83F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013A8418(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  _QWORD v14[2];
  uint8_t buf[1640];

  v14[0] = a3;
  v14[1] = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  v6 = *(_QWORD *)(a5 + 40);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 492) |= 0x80u;
  v7 = *(_QWORD *)(v6 + 320);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 20) |= 1u;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v8 + 36) |= 1u;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    operator new();
  if (!sub_10137AA14(a2, v9))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v10 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert track run hint receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert track run hint receipt time to protobuf", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeTrackRunHint(const CLUtils::Timestamp &, const CLTrackRunHint, CLP::LogEntry::LogEntry &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  sub_10137CB38((uint64_t)v14, v8);
}

void sub_1013A86B8()
{
  operator delete();
}

void sub_1013A8728(uint64_t a1, void *a2, _OWORD *a3, double *a4, int a5, int a6)
{
  uint64_t v9;
  double v13;
  char v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  id v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;

  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    v13 = COERCE_DOUBLE(sub_10077CD18(v9));
    if (v14)
      v15 = v13;
    else
      v15 = NAN;
    v16 = sub_1001FCBB4() - *a4;
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v17 = v16 * 1000.0;
    v18 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349824;
      v32 = objc_msgSend(a2, "count");
      v33 = 2050;
      v34 = v15;
      v35 = 2050;
      v36 = v17;
      v37 = 1026;
      v38 = a5;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "TrackRun,serializing track data count,%{public}lu,after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms,isWideAreaQuery,%{public}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v20 = qword_10229FC58;
      v23 = 134349824;
      v24 = objc_msgSend(a2, "count");
      v25 = 2050;
      v26 = v15;
      v27 = 2050;
      v28 = v17;
      v29 = 1026;
      v30 = a5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "TrackRun,serializing track data count,%{public}lu,after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms,isWideAreaQuery,%{public}d", &v23, 38);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleRunningTrackDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &, const BOOL, const BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (a5 && a6)
      sub_10077E950(*(_QWORD *)(a1 + 192), a3);
  }
  if (*(_BYTE *)(a1 + 34) || *(_QWORD *)(a1 + 40))
  {
    v19 = sub_100166054(buf);
    sub_1013A8A00((uint64_t)v19, a2, (uint64_t)buf, a5);
    sub_1013A3A68(a1, (uint64_t)buf, 0);
    sub_100166004(buf);
  }
}

void sub_1013A89E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013A8A00(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _WORD v17[8];
  uint64_t v18[4];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v7 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,SerializeRunningTrackData", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(v18[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,SerializeRunningTrackData", v18, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeRunningTrackData(const NSMutableArray *, CLP::LogEntry::LogEntry &, const BOOL) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  *(_DWORD *)(a3 + 52) |= 2u;
  v8 = *(_QWORD *)(a3 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x20000000u;
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9)
    operator new();
  sub_10010F434((uint64_t)v18);
  sub_1013A5964((uint64_t)v18, a3);
  *(_DWORD *)(v9 + 48) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(v18, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "TrackRun,Failed to convert track data receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v17[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "TrackRun,Failed to convert track data receipt time to protobuf", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackRunController::SerializeRunningTrackData(const NSMutableArray *, CLP::LogEntry::LogEntry &, const BOOL) const", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  sub_10137CDB4(a2, v9, a4);
}

void sub_1013A8DA4()
{
  operator delete();
}

void sub_1013A8E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10[5];
  int v11;
  uint8_t buf[1640];

  v4 = *(_QWORD *)(a1 + 192);
  if (v4)
  {
    if ((*(_DWORD *)(a2 + 96) - 6) >= 3)
    {
      v5 = sub_1013A904C(a1);
      sub_10077E970(v4, v5);
      sub_10077D0A8(*(_QWORD *)(a1 + 192), (double *)(a2 + 4), a1, 0);
    }
  }
  else
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v6 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TrackRun,could not query track data manager as it has not been created", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,could not query track data manager as it has not been created", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SendUnfilteredLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (*(_BYTE *)(a1 + 34) || *(_QWORD *)(a1 + 40))
  {
    sub_100166054(buf);
    v11 = -1;
    sub_10010F434((uint64_t)v10);
    sub_1013A9314(v7, v10, &v11, a2, (uint64_t)buf);
    sub_1013A3A68(a1, (uint64_t)buf, 0);
    sub_100166004(buf);
  }
}

void sub_1013A902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013A904C(uint64_t a1)
{
  double v2;
  double v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  double v7;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  char *v17;
  _BYTE v18[12];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  _BYTE buf[18];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v2 = sub_1001FCBB4();
  sub_1001E4804(buf);
  *(_QWORD *)v18 = 0;
  if (sub_1001FD98C(*(uint64_t *)buf, "TimeSinceStaForegroundingThresholdSeconds", v18))
    v3 = *(double *)v18;
  else
    v3 = 600.0;
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v2 - *(double *)(a1 + 432);
  if ((v7 > v3 || *(_BYTE *)(a1 + 50)) && (!*(_BYTE *)(a1 + 49) || *(_BYTE *)(a1 + 48)))
    return 0;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v9 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(a1 + 49);
    v11 = *(unsigned __int8 *)(a1 + 50);
    v12 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v10;
    v26 = 1026;
    v27 = v11;
    v28 = 1026;
    v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#cltm,Tile loading from network allowed,secondsSinceLastSessionTrackerAppForegrounding,%{public}.1lf,currentlyInATrackRunSupportedWorkoutType,%{public}d,currentlyInAWorkout,%{public}d,gnssInRhythmicMode,%{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v13 = *(unsigned __int8 *)(a1 + 49);
    v14 = *(unsigned __int8 *)(a1 + 50);
    v15 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)v18 = 134349824;
    *(double *)&v18[4] = v7;
    v19 = 1026;
    v20 = v13;
    v21 = 1026;
    v22 = v14;
    v23 = 1026;
    v24 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,Tile loading from network allowed,secondsSinceLastSessionTrackerAppForegrounding,%{public}.1lf,currentlyInATrackRunSupportedWorkoutType,%{public}d,currentlyInAWorkout,%{public}d,gnssInRhythmicMode,%{public}d", v18, 30);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTrackRunController::IsTileLoadingFromNetworkCurrentlyAllowed() const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return 1;
}

void sub_1013A92F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013A9314(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 8u;
  v9 = *(_QWORD *)(v8 + 32);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 100) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,failed to convert location notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,failed to convert location notification receipt time to protobuf", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeLocationNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v12 = *a3;
  *(_DWORD *)(v9 + 100) |= 2u;
  *(_DWORD *)(v9 + 32) = v12;
  sub_101376EAC(a4, v9);
}

void sub_1013A959C()
{
  operator delete();
}

void sub_1013A95F8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (*a3 == 41)
  {
    v5 = *(_QWORD *)(a4 + 1464) & 1;
    v6 = *(unsigned __int8 *)(a4 + 1472);
    *(_BYTE *)(a1 + 48) = sub_1016E1B00(v6, v5);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v7 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
    {
      v8 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)buf = 67240704;
      v18 = v5;
      v19 = 1026;
      v20 = v6;
      v21 = 1026;
      v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TrackRun,HandleGnssRhythmicModeOfOperationNotification,has1HzClients,%{public}d,hasRhythmicClients,%{public}d,gnssInRhythmicMode,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v9 = *(unsigned __int8 *)(a1 + 48);
      v12[0] = 67240704;
      v12[1] = v5;
      v13 = 1026;
      v14 = v6;
      v15 = 1026;
      v16 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,HandleGnssRhythmicModeOfOperationNotification,has1HzClients,%{public}d,hasRhythmicClients,%{public}d,gnssInRhythmicMode,%{public}d", v12, 20);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

uint64_t sub_1013A9800(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[7];
  uint64_t v8[4];
  int v9;

  v9 = a2;
  if (*a3 == 1)
  {
    v5 = result;
    if (*(_BYTE *)(result + 34) || *(_QWORD *)(result + 40))
    {
      sub_10010F434((uint64_t)v8);
      v6 = sub_100166054(v7);
      sub_1013A9898((uint64_t)v6, v8, &v9, a4, (uint64_t)v7);
      sub_1013A3A68(v5, (uint64_t)v7, 0);
      return sub_100166004(v7);
    }
  }
  return result;
}

void sub_1013A9884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100166004(&a9);
  _Unwind_Resume(a1);
}

void sub_1013A9898(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x10u;
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert motion state notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert motion state notification receipt time to protobuf", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeMotionStateNotification(const CLUtils::Timestamp &, const int &, const CLMotionState_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_DWORD *)(v9 + 32) |= 1u;
    v12 = *(_QWORD *)(v9 + 8);
    if (!v12)
      operator new();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  }
  v13 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v13 | 6;
  v14 = *(_QWORD *)(v9 + 16);
  if (!v14)
    operator new();
  sub_10137854C(a4, v14, 0);
}

void sub_1013A9B98()
{
  operator delete();
}

uint64_t sub_1013A9C14(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[7];
  int v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v20 = a2;
  if (*a3 == 2)
  {
    v5 = result;
    if (*(_BYTE *)(result + 34) || *(_QWORD *)(result + 40))
    {
      sub_100166054(v19);
      sub_10010F434((uint64_t)buf);
      sub_1013A9EE0(v6, (uint64_t *)buf, &v20, a4, (uint64_t)v19);
      sub_1013A3A68(v5, (uint64_t)v19, 0);
      if (!sub_100195F08())
        return sub_100166004(v19);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v7 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
      {
        v8 = *(_QWORD *)(a4 + 112);
        v9 = *(_QWORD *)(a4 + 16);
        *(_DWORD *)buf = 134218240;
        v26 = v8;
        v27 = 2048;
        v28 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TrackRun,received motion state mediator notification,type,%ld,event,%ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v15 = *(_QWORD *)(a4 + 112);
        v16 = *(_QWORD *)(a4 + 16);
        v21 = 134218240;
        v22 = v15;
        v23 = 2048;
        v24 = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,received motion state mediator notification,type,%ld,event,%ld", &v21, 22);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v10 = *(_QWORD *)(a4 + 16);
      if (v10 == 13)
      {
        v11 = 1;
      }
      else
      {
        if (v10 != 15)
          goto LABEL_15;
        v11 = 0;
      }
      *(_BYTE *)(v5 + 50) = v11;
LABEL_15:
      v12 = 0;
      v13 = *(_QWORD *)(a4 + 112);
      if (v13 > 0x15 || ((1 << v13) & 0x328000) == 0)
        goto LABEL_21;
      v14 = *(_QWORD *)(a4 + 16);
      if (v14 == 13)
      {
        v12 = 1;
        goto LABEL_21;
      }
      if (v14 == 15)
      {
        v12 = 0;
LABEL_21:
        *(_BYTE *)(v5 + 49) = v12;
      }
      return sub_100166004(v19);
    }
  }
  return result;
}

void sub_1013A9EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013A9EE0(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x80000000;
  v9 = *(_QWORD *)(v8 + 256);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert motion state mediator notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert motion state mediator notification receipt time to protobuf", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeMotionStateMediatorNotification(const CLUtils::Timestamp &, const int &, const CLMotionStateMediator_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  sub_10137E524(a4, v13);
}

void sub_1013AA194()
{
  operator delete();
}

uint64_t sub_1013AA204(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[7];
  int v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  v14 = a2;
  if (!*a3)
  {
    v5 = result;
    if (*(_BYTE *)(result + 34) || *(_QWORD *)(result + 40))
    {
      sub_100166054(v13);
      sub_10010F434((uint64_t)buf);
      sub_1013AA484(v6, (uint64_t *)buf, &v14, a4, (uint64_t)v13);
      sub_1013A3A68(v5, (uint64_t)v13, 0);
      if ((sub_100195F08() & 1) == 0)
      {
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021B27D8);
        v7 = qword_10229FC58;
        if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_INFO))
        {
          v8 = *(unsigned int *)(a4 + 8);
          *(_DWORD *)buf = 134349056;
          v18 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TrackRun,received motion state observer notification,type,%{public}ld", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC50 != -1)
            dispatch_once(&qword_10229FC50, &stru_1021B27D8);
          v10 = *(unsigned int *)(a4 + 8);
          v15 = 134349056;
          v16 = v10;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 1, "TrackRun,received motion state observer notification,type,%{public}ld", &v15, 12);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
        v9 = *(_DWORD *)(a4 + 8);
        if (v9 > 7)
        {
          if (v9 != 90603 && v9 != 8)
            goto LABEL_18;
        }
        else
        {
          if (!v9)
          {
            *(_BYTE *)(v5 + 50) = 0;
LABEL_18:
            *(_BYTE *)(v5 + 49) = 0;
            return sub_100166004(v13);
          }
          if (v9 != 4)
            goto LABEL_18;
        }
        *(_WORD *)(v5 + 49) = 257;
      }
      return sub_100166004(v13);
    }
  }
  return result;
}

void sub_1013AA460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013AA484(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x20u;
  v9 = *(_QWORD *)(v8 + 48);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert motion state observer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert motion state observer notification receipt time to protobuf", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeMotionStateObserverNotification(const CLUtils::Timestamp &, const int &, const CLMotionStateObserver_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  sub_10137F6A4(a4, v13);
}

void sub_1013AA738()
{
  operator delete();
}

uint64_t sub_1013AA7A8(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[4];
  _QWORD v8[7];
  int v9;

  v9 = a2;
  if (*a3 == 2)
  {
    v5 = result;
    if (*(_BYTE *)(result + 34) || *(_QWORD *)(result + 40))
    {
      sub_100166054(v8);
      sub_10010F434((uint64_t)v7);
      sub_1013AA844(v6, v7, &v9, a4, (uint64_t)v8);
      sub_1013A3A68(v5, (uint64_t)v8, 0);
      return sub_100166004(v8);
    }
  }
  return result;
}

void sub_1013AA82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013AA844(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x40u;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Warning,Failed to convert natalimetry notification receipt time to protobuf.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "Warning,Failed to convert natalimetry notification receipt time to protobuf.", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeNatalimetryNotification(const CLUtils::Timestamp &, const int &, const CLNatalimetryNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  sub_10136F654(a4, v13);
}

void sub_1013AAAF8()
{
  operator delete();
}

void sub_1013AAB68(uint64_t a1, int a2, _DWORD *a3, int *a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15[5];
  int v16;
  uint8_t buf[1640];

  v16 = a2;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v7 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,received signal environment notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,received signal environment notification", v15, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (!*a3 && (*(_BYTE *)(a1 + 34) || *(_QWORD *)(a1 + 40)))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TrackRun,serializing signal environment notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,serializing signal environment notification", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_100166054(buf);
    sub_10010F434((uint64_t)v15);
    sub_1013AAEA8(v9, v15, &v16, a4, (uint64_t)buf);
    sub_1013A3A68(a1, (uint64_t)buf, 0);
    sub_100166004(buf);
  }
}

void sub_1013AAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013AAEA8(uint64_t a1, uint64_t *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _WORD v19[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x800u;
  v9 = *(_QWORD *)(v8 + 96);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert signal environment notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert signal environment notification receipt time to protobuf", v19, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeSignalEnvironmentNotification(const CLUtils::Timestamp &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v12 = *a3;
  *(_DWORD *)(v9 + 32) |= 8u;
  *(_DWORD *)(v9 + 24) = v12;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v13 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TrackRun,converting signal environment notification to protobuf", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v19[0] = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,converting signal environment notification to protobuf", v19, v18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeSignalEnvironmentNotification(const CLUtils::Timestamp &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_101379A00(a4, (_DWORD *)v9);
}

void sub_1013AB258()
{
  operator delete();
}

void sub_1013AB2B4(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11[5];
  int v12;
  uint8_t buf[1640];

  v12 = a2;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v7 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,received step count notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,received step count notification", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*a3 && (*(_BYTE *)(a1 + 34) || *(_QWORD *)(a1 + 40)))
  {
    sub_100166054(buf);
    sub_10010F434((uint64_t)v11);
    sub_1013AB4CC(v8, v11, &v12, a4, (uint64_t)buf);
    sub_1013A3A68(a1, (uint64_t)buf, 0);
    sub_100166004(buf);
  }
}

void sub_1013AB4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_1013AB4CC(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x8000u;
  v9 = *(_QWORD *)(v8 + 128);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert step count notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert step count notification receipt time to protobuf", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeStepCountNotification(const CLUtils::Timestamp &, const int &, const CLStepCountNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    operator new();
  return sub_101379D40(a4, v13);
}

void sub_1013AB780()
{
  operator delete();
}

void sub_1013AB7F0(uint64_t a1, int a2, _DWORD *a3, int *a4)
{
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11[5];
  int v12;
  uint8_t buf[1640];

  v12 = a2;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v7 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,received watch orientation settings notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,received watch orientation settings notification", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::HandleWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*a3 && (*(_BYTE *)(a1 + 34) || *(_QWORD *)(a1 + 40)))
  {
    sub_100166054(buf);
    sub_10010F434((uint64_t)v11);
    sub_1013ABA08(v8, v11, &v12, a4, (uint64_t)buf);
    sub_1013A3A68(a1, (uint64_t)buf, 0);
    sub_100166004(buf);
  }
}

void sub_1013AB9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1013ABA08(uint64_t a1, uint64_t *a2, _DWORD *a3, int *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v8 = *(_QWORD *)(a5 + 40);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 488) |= 0x40000000u;
  v9 = *(_QWORD *)(v8 + 248);
  if (!v9)
    operator new();
  sub_1013A5964((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 40) |= 1u;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(a2, v10) & 1) == 0)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert watch orientation settings notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert watch orientation settings notification receipt time to protobuf", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeWatchOrientationSettingsNotification(const CLUtils::Timestamp &, const int &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v12 = *(_DWORD *)(v9 + 40);
  *(_DWORD *)(v9 + 32) = *a3;
  *(_DWORD *)(v9 + 40) = v12 | 6;
  v13 = *(_DWORD **)(v9 + 16);
  if (!v13)
    operator new();
  sub_10137C250(a4, v13);
  *(_DWORD *)(v9 + 40) |= 8u;
  v14 = *(_QWORD *)(v9 + 24);
  if (!v14)
    operator new();
  sub_10137B510(a4, v14);
}

void sub_1013ABD00()
{
  operator delete();
}

void sub_1013ABD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLTrackRunController::onSessionTrackerAppForegroundedNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 184), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B27F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::onSessionTrackerAppForegroundedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B27F8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::onSessionTrackerAppForegroundedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 184), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1013AC430;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1013ABF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1013ABFA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  *(_DWORD *)(a3 + 52) |= 2u;
  v4 = *(_QWORD *)(a3 + 40);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 492) |= 0x10u;
  v5 = *(_QWORD *)(v4 + 296);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 28) |= 2u;
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    operator new();
  sub_1013A5964((uint64_t)a2, a3);
  *(_DWORD *)(v6 + 52) |= 1u;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    operator new();
  if (!sub_10137A734(a2, v7))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v8 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert platform info receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "TrackRun,Warning,Failed to convert platform info receipt time to protobuf", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunController::SerializeCLPlatformInfo(const CLUtils::Timestamp &, CLP::LogEntry::LogEntry &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v9 = sub_1001CE630();
  sub_101380574(v6, v9);
}

void sub_1013AC244()
{
  operator delete();
}

void sub_1013AC2B4()
{
  operator delete();
}

void sub_1013AC2C8()
{
  operator delete();
}

void sub_1013AC2DC(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_1013AC308(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1013AC338(uint64_t a1)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = (_OWORD *)(a1 + 8);
  sub_1013AC3DC(a1 + 8);
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 370) = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  sub_1013AC3DC((uint64_t)&v5);
  v3 = v6;
  *v2 = v5;
  v2[1] = v3;
  v2[2] = v7;
  *(_BYTE *)(a1 + 370) = 0;
  return a1;
}

void sub_1013AC3C8(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent *v1;

  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013AC3DC(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 8), 0, 0.0);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 32), 0, 0.0);
  return a1;
}

void sub_1013AC430(uint64_t a1)
{
  sub_1013A5508(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1013AC438(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10077CD14(result);
    operator delete();
  }
  return result;
}

void sub_1013AC478()
{
  operator delete();
}

_QWORD *sub_1013AC48C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B2828;
  result[1] = v3;
  return result;
}

uint64_t sub_1013AC4C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B2828;
  a2[1] = v2;
  return result;
}

void sub_1013AC4DC(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  v4 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TrackRun,TrackRunEnablementNotification,is_enabled,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    v7[0] = 67109120;
    v7[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "TrackRun,TrackRunEnablementNotification,is_enabled,%d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLTrackRunController::RegisterForTrackRunEnablementNotifications()::(anonymous class)::operator()(const BOOL) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (v2)
    sub_1013A7450(v3);
  else
    sub_1013A71A8(v3);
}

uint64_t sub_1013AC69C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013AC6D8()
{
}

BOOL sub_1013AC6E4()
{
  return os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_FAULT);
}

BOOL sub_1013AC6F8()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3160), OS_LOG_TYPE_INFO);
}

BOOL sub_1013AC708()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3160));
}

void sub_1013AC728()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA0EA0;
      v1[3] = unk_101CA0EB0;
      v1[4] = xmmword_101CA0EC0;
      v1[0] = xmmword_101CA0E80;
      v1[1] = unk_101CA0E90;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1013AC7FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1013AD924(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *Data;
  uint64_t v35;
  uint64_t v36;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        while (1)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v18 = v17 + 1;
          if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0)
            goto LABEL_49;
          v14 += 7;
          v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_51:
        v35 = 40;
        goto LABEL_60;
      case 2u:
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v22 = 0;
        }
        v36 = 16;
        goto LABEL_65;
      case 3u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v22 = 0;
        }
        v36 = 8;
LABEL_65:
        *(_QWORD *)(a1 + v36) = v22;
        continue;
      case 4u:
        v24 = 0;
        v25 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 48) |= 4u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v16 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v10 = v25++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_55:
        v35 = 44;
        goto LABEL_60;
      case 5u:
        v29 = 0;
        v30 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        break;
      case 6u:
        Data = (void *)PBReaderReadData(a2);

        *(_QWORD *)(a1 + 32) = Data;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
      v16 |= (unint64_t)(v33 & 0x7F) << v29;
      if ((v33 & 0x80) == 0)
        goto LABEL_57;
      v29 += 7;
      v10 = v30++ >= 9;
      if (v10)
      {
        LODWORD(v16) = 0;
        goto LABEL_59;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_57:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v16) = 0;
LABEL_59:
    v35 = 24;
LABEL_60:
    *(_DWORD *)(a1 + v35) = v16;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1013AE6B0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1013AE6DC()
{
  uint64_t result;

  if (qword_102313FD0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FD0 + 8))(qword_102313FD0);
  if (qword_102313FD8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FD8 + 8))(qword_102313FD8);
  if (qword_102313FE0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FE0 + 8))(qword_102313FE0);
  if (qword_102313FE8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FE8 + 8))(qword_102313FE8);
  if (qword_102313FF0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FF0 + 8))(qword_102313FF0);
  if (qword_102313FF8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102313FF8 + 8))(qword_102313FF8);
  if (qword_102314000)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102314000 + 8))(qword_102314000);
  if (qword_102314008)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102314008 + 8))(qword_102314008);
  if (qword_102314010)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102314010 + 8))(qword_102314010);
  result = qword_102314018;
  if (qword_102314018)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102314018 + 8))(qword_102314018);
  return result;
}

void sub_1013AE7E0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10230E688 & 1) == 0)
  {
    byte_10230E688 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", a4);
    operator new();
  }
}

double sub_1013AEB78(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021B2E18;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1013AEBA4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)result;
  v2 = qword_102313FD0;
  if (!qword_102313FD0)
  {
    result = ((uint64_t (*)(void))sub_1013AE7E0)();
    v2 = qword_102313FD0;
  }
  v1[1] = v2;
  v3 = qword_102313FE0;
  if (qword_102313FE0)
  {
    v1[2] = qword_102313FE0;
  }
  else
  {
    result = ((uint64_t (*)(void))sub_1013AE7E0)();
    v3 = qword_102313FE0;
    v1[2] = qword_102313FE0;
    if (!v3)
    {
      result = sub_1013AE7E0(result);
      v3 = qword_102313FE0;
    }
  }
  v1[3] = v3;
  v4 = qword_102313FD8;
  if (!qword_102313FD8)
  {
    result = sub_1013AE7E0(result);
    v4 = qword_102313FD8;
  }
  v1[7] = v4;
  return result;
}

void sub_1013AEC20(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 305);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 5)
        sub_1019508B4();
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_1013AECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013AECEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021B29E0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1013AECFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021B29E0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1013AED2C()
{
  operator new();
}

uint64_t sub_1013AED64(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1013AED78(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;

  v5 = a1 + 3;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v16 = 0;
      v11 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!(_DWORD)result)
          return result;
        v12 = v16;
      }
      else
      {
        v12 = *v11;
        *((_QWORD *)this + 1) = v11 + 1;
      }
      if (v12 <= 4)
      {
        a1[5] |= 1u;
        a1[2] = v12;
      }
      v13 = (_BYTE *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v13 < v9 && *v13 == 16)
      {
        v10 = v13 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_26:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_26;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1013AEF28(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_1013AEF80(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_17;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_17;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_17;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_17:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_1013AF01C(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1013AEC20(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013AF068()
{
  return 1;
}

_QWORD *sub_1013AF070@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SvId");
}

float sub_1013AF080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 505);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 20);
    }
    if ((v6 & 2) != 0)
    {
      result = *(float *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(float *)(a1 + 12) = result;
    }
  }
  return result;
}

void sub_1013AF128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013AF140(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021B2A58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1013AF150(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021B2A58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1013AF180()
{
  operator new();
}

uint64_t sub_1013AF1B8(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1013AF1CC(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1 + 2;
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        a1[5] |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 5)
        goto LABEL_16;
LABEL_24:
      v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0)
        return 0;
      a1[3] = v13;
      a1[5] |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1013AF354(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v5 + 12), a3);
  return result;
}

uint64_t sub_1013AF3AC(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;

  LOBYTE(v3) = *(_BYTE *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

float sub_1013AF414(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013AF080(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013AF460()
{
  return 1;
}

_QWORD *sub_1013AF468@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.GpsTime");
}

float sub_1013AF478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 771);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102313FE0 + 8);
      result = sub_1013AF080(v7, v8);
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_16;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(float *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_16:
    result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0)
      return result;
LABEL_8:
    result = *(float *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 24) = result;
  }
  return result;
}

void sub_1013AF5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013AF5C4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021B2AD0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102313FE0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1013AF618(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1013AF5C4(a1);
  operator delete();
}

void sub_1013AF63C()
{
  operator new();
}

uint64_t sub_1013AF678(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 32))
  {
    if ((*(_BYTE *)(result + 32) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1013AF6AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unsigned int *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t result;
  unsigned int v21;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        *(_DWORD *)(a1 + 32) |= 1u;
        v8 = *(unsigned int **)(a1 + 8);
        if (!v8)
          operator new();
        v21 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21))return 0;
        }
        else
        {
          v21 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v21);
        if (!sub_1013AF1CC(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 21)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
        goto LABEL_31;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_19;
LABEL_31:
        v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 16) = v21;
        *(_DWORD *)(a1 + 32) |= 2u;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 29)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_35:
        v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v21;
        *(_DWORD *)(a1 + 32) |= 4u;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 37)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_39:
        v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21) & 1) != 0)
        {
          *(_DWORD *)(a1 + 24) = v21;
          *(_DWORD *)(a1 + 32) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_35;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_19;
        goto LABEL_39;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1013AF994(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102313FE0 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(float *)(v5 + 24), a3);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(float *)(v5 + 24), a3);
  return result;
}

uint64_t sub_1013AFA38(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        v6 = *(_QWORD *)(qword_102313FE0 + 8);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AF3AC(v6, a2);
      v9 = (int)v7;
      if (v7 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
      else
        v10 = 1;
      v4 = v9 + v10 + 1;
      v3 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_1013AFAD8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013AF478(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013AFB24()
{
  return 1;
}

_QWORD *sub_1013AFB2C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SatellitePolynomialClock");
}

float sub_1013AFB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  unsigned int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 982);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      if (v7 >= 7)
        sub_1019508DC();
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 20);
    }
    if ((v6 & 2) != 0)
    {
      result = *(float *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(float *)(a1 + 12) = result;
    }
  }
  return result;
}

void sub_1013AFBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013AFC08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021B2B48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1013AFC18(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021B2B48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1013AFC48()
{
  operator new();
}

uint64_t sub_1013AFC80(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1013AFC94(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v12 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
          if (!(_DWORD)result)
            return result;
          v9 = v12;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 6)
        {
          a1[5] |= 1u;
          a1[2] = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 21)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 5)
        goto LABEL_15;
LABEL_25:
      v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0)
        return 0;
      a1[3] = v13;
      a1[5] |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_15:
    if (v7 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1013AFE20(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v5 + 12), a3);
  return result;
}

uint64_t sub_1013AFE78(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;

  LOBYTE(v3) = *(_BYTE *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

float sub_1013AFEEC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013AFB3C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013AFF38()
{
  return 1;
}

_QWORD *sub_1013AFF40@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SatelliteGroupDelay");
}

float sub_1013AFF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 1338);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v6);
      v8 = *(_DWORD *)(a1 + 44);
      v9 = *(int *)(a1 + 40);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), v8 + 1);
          v8 = *(_DWORD *)(a1 + 44);
        }
        *(_DWORD *)(a1 + 44) = v8 + 1;
        operator new();
      }
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v9 + 1;
      result = sub_1013AFB3C(*(_QWORD *)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *(int *)(a2 + 40));
  }
  LOBYTE(v11) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v11)
    return result;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    v12 = *(_DWORD **)(a1 + 8);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      v13 = *(_QWORD *)(qword_102313FF0 + 8);
    sub_1013AEC20(v12, v13);
    v11 = *(_DWORD *)(a2 + 72);
    if ((v11 & 2) == 0)
    {
LABEL_14:
      if ((v11 & 4) == 0)
        goto LABEL_15;
LABEL_29:
      *(_DWORD *)(a1 + 72) |= 4u;
      v16 = *(_QWORD *)(a1 + 24);
      if (!v16)
        operator new();
      v17 = *(_QWORD *)(a2 + 24);
      if (!v17)
        v17 = *(_QWORD *)(qword_102313FF0 + 24);
      result = sub_1013AF478(v16, v17);
      v11 = *(_DWORD *)(a2 + 72);
      if ((v11 & 0x10) == 0)
      {
LABEL_16:
        if ((v11 & 0x20) == 0)
          return result;
        goto LABEL_17;
      }
      goto LABEL_34;
    }
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a1 + 72) |= 2u;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    operator new();
  v15 = *(_QWORD *)(a2 + 16);
  if (!v15)
    v15 = *(_QWORD *)(qword_102313FF0 + 16);
  result = sub_1013AF478(v14, v15);
  v11 = *(_DWORD *)(a2 + 72);
  if ((v11 & 4) != 0)
    goto LABEL_29;
LABEL_15:
  if ((v11 & 0x10) == 0)
    goto LABEL_16;
LABEL_34:
  *(_DWORD *)(a1 + 72) |= 0x10u;
  v18 = *(_QWORD *)(a1 + 56);
  if (!v18)
    operator new();
  v19 = *(_QWORD *)(a2 + 56);
  if (!v19)
    v19 = *(_QWORD *)(qword_102313FF0 + 56);
  result = sub_1013AF080(v18, v19);
  if ((*(_DWORD *)(a2 + 72) & 0x20) != 0)
  {
LABEL_17:
    result = *(float *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(float *)(a1 + 64) = result;
  }
  return result;
}

void sub_1013B0254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013B026C(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1021B2BC0;
  v2 = a1 + 4;
  sub_1013B02AC(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_1013B02AC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((_QWORD *)qword_102313FF0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1013B0334(uint64_t *a1)
{
  sub_1013B026C(a1);
  operator delete();
}

void sub_1013B0358()
{
  operator new();
}

uint64_t sub_1013B03A4(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(result + 72);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = sub_1013AF678(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 24);
      if (result)
      {
        result = sub_1013AF678(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      v4 = *(_QWORD *)(v1 + 56);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 20))
          *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 20) = 0;
      }
    }
    *(_DWORD *)(v1 + 64) = 0;
  }
  if (*(int *)(v1 + 40) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_1013B046C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  _DWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  _BYTE *v57;
  uint64_t result;
  unsigned int v59;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_24;
        *(_DWORD *)(a1 + 72) |= 1u;
        v9 = *(_DWORD **)(a1 + 8);
        if (!v9)
          operator new();
        v59 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v11 = *((_DWORD *)this + 14);
        v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12)
          return 0;
        v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1013AED78(v9, this, v14) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        v15 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)this + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 18)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
        goto LABEL_36;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_24;
LABEL_36:
        *(_DWORD *)(a1 + 72) |= 2u;
        v19 = *(_QWORD *)(a1 + 16);
        if (!v19)
          operator new();
        v59 = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1013AF6AC(v19, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v16)
          *((_DWORD *)this + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 != 26)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_50:
        *(_DWORD *)(a1 + 72) |= 4u;
        v28 = *(_QWORD *)(a1 + 24);
        if (!v28)
          operator new();
        v59 = 0;
        v29 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v29;
          *((_QWORD *)this + 1) = v29 + 1;
        }
        v30 = *((_DWORD *)this + 14);
        v31 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v30 + 1;
        if (v30 >= v31)
          return 0;
        v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1013AF6AC(v28, this, v33) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
        v34 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v34, 1);
        v35 = v34 - 1;
        if (v35 < 0 == v16)
          *((_DWORD *)this + 14) = v35;
        v36 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v36 >= *((_QWORD *)this + 2) || *v36 != 34)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v36 + 1;
LABEL_64:
          v37 = *(_DWORD *)(a1 + 44);
          v38 = *(int *)(a1 + 40);
          if ((int)v38 >= v37)
          {
            if (v37 == *(_DWORD *)(a1 + 48))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v37 + 1);
              v37 = *(_DWORD *)(a1 + 44);
            }
            *(_DWORD *)(a1 + 44) = v37 + 1;
            operator new();
          }
          v39 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = v38 + 1;
          v40 = *(_DWORD **)(v39 + 8 * v38);
          v59 = 0;
          v41 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
          }
          else
          {
            v59 = *v41;
            *((_QWORD *)this + 1) = v41 + 1;
          }
          v42 = *((_DWORD *)this + 14);
          v43 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v42 + 1;
          if (v42 >= v43)
            return 0;
          v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
          if (!sub_1013AFC94(v40, this, v45) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
          v46 = *((_DWORD *)this + 14);
          v16 = __OFSUB__(v46, 1);
          v47 = v46 - 1;
          if (v47 < 0 == v16)
            *((_DWORD *)this + 14) = v47;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v36 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v48 = *v36;
        }
        while (v48 == 34);
        if (v48 != 42)
          continue;
        *((_QWORD *)this + 1) = v36 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 72) |= 0x10u;
        v49 = *(unsigned int **)(a1 + 56);
        if (!v49)
          operator new();
        v59 = 0;
        v50 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v50;
          *((_QWORD *)this + 1) = v50 + 1;
        }
        v51 = *((_DWORD *)this + 14);
        v52 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v51 + 1;
        if (v51 >= v52)
          return 0;
        v53 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1013AF1CC(v49, this, v54) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v53);
        v55 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v55, 1);
        v56 = v55 - 1;
        if (v56 < 0 == v16)
          *((_DWORD *)this + 14) = v56;
        v57 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v57 >= *((_QWORD *)this + 2) || *v57 != 53)
          continue;
        *((_QWORD *)this + 1) = v57 + 1;
LABEL_96:
        v59 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v59) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 64) = v59;
        *(_DWORD *)(a1 + 72) |= 0x20u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_50;
        goto LABEL_24;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_64;
        goto LABEL_24;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_82;
        goto LABEL_24;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_24;
        goto LABEL_96;
      default:
        v8 = TagFallback & 7;
LABEL_24:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1013B0B24(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102313FF0 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102313FF0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 4) != 0)
  {
LABEL_11:
    v9 = *(_QWORD *)(v5 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_102313FF0 + 24);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  }
LABEL_14:
  if (*(int *)(v5 + 40) >= 1)
  {
    v10 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 40));
  }
  v11 = *(_DWORD *)(v5 + 72);
  if ((v11 & 0x10) == 0)
  {
    if ((v11 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(float *)(v5 + 64), a3);
  }
  v12 = *(_QWORD *)(v5 + 56);
  if (!v12)
    v12 = *(_QWORD *)(qword_102313FF0 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v12, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(float *)(v5 + 64), a3);
  return result;
}

uint64_t sub_1013B0C54(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;

  v3 = *(unsigned __int8 *)(a1 + 72);
  if (*(_BYTE *)(a1 + 72))
  {
    if ((v3 & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5)
        v5 = *(_QWORD *)(qword_102313FF0 + 8);
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AEF80(v5, a2);
      v7 = (int)v6;
      if (v6 >= 0x80)
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      else
        v8 = 1;
      v4 = v7 + v8 + 1;
      v3 = *(_DWORD *)(a1 + 72);
      if ((v3 & 2) == 0)
      {
LABEL_17:
        if ((v3 & 4) != 0)
        {
          v13 = *(_QWORD *)(a1 + 24);
          if (!v13)
            v13 = *(_QWORD *)(qword_102313FF0 + 24);
          v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AFA38(v13, a2);
          v15 = (int)v14;
          if (v14 >= 0x80)
            v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
          else
            v16 = 1;
          v4 += v15 + v16 + 1;
          v3 = *(_DWORD *)(a1 + 72);
          if ((v3 & 0x10) == 0)
            goto LABEL_32;
        }
        else if ((v3 & 0x10) == 0)
        {
LABEL_32:
          if ((v3 & 0x20) != 0)
            v3 = v4 + 5;
          else
            v3 = v4;
          goto LABEL_35;
        }
        v17 = *(_QWORD *)(a1 + 56);
        if (!v17)
          v17 = *(_QWORD *)(qword_102313FF0 + 56);
        v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AF3AC(v17, a2);
        v19 = (int)v18;
        if (v18 >= 0x80)
          v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
        else
          v20 = 1;
        v4 += v19 + v20 + 1;
        v3 = *(_DWORD *)(a1 + 72);
        goto LABEL_32;
      }
    }
    else
    {
      v4 = 0;
      if ((v3 & 2) == 0)
        goto LABEL_17;
    }
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102313FF0 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AFA38(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 += v11 + v12 + 1;
    v3 = *(_DWORD *)(a1 + 72);
    goto LABEL_17;
  }
LABEL_35:
  v21 = *(_DWORD *)(a1 + 40);
  v22 = (v21 + v3);
  if (v21 >= 1)
  {
    v23 = 0;
    do
    {
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AFE78(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v23), a2);
      v25 = (int)v24;
      if (v24 >= 0x80)
        v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      else
        v26 = 1;
      v22 = (v25 + v22 + v26);
      ++v23;
    }
    while (v23 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 68) = v22;
  return v22;
}

float sub_1013B0E18(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013AFF50(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013B0E64()
{
  return 1;
}

_QWORD *sub_1013B0E6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SatelliteClockData");
}

float sub_1013B0E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 1623);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102313FF8 + 8);
      result = sub_1013AF080(v7, v8);
      v6 = *(_DWORD *)(a2 + 32);
    }
    if ((v6 & 2) != 0)
    {
      v9 = *(_DWORD *)(a2 + 16);
      if (v9 >= 5)
        sub_101950904();
      *(_DWORD *)(a1 + 32) |= 2u;
      *(_DWORD *)(a1 + 16) = v9;
      v6 = *(_DWORD *)(a2 + 32);
    }
    if ((v6 & 4) != 0)
    {
      result = *(float *)(a2 + 20);
      *(_DWORD *)(a1 + 32) |= 4u;
      *(float *)(a1 + 20) = result;
      v6 = *(_DWORD *)(a2 + 32);
    }
    if ((v6 & 8) != 0)
    {
      result = *(float *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 8u;
      *(float *)(a1 + 24) = result;
    }
  }
  return result;
}

void sub_1013B0FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013B0FC4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021B2C38;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102313FF8 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1013B1018(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1013B0FC4(a1);
  operator delete();
}

void sub_1013B103C()
{
  operator new();
}

uint64_t sub_1013B1078(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 32))
  {
    if ((*(_BYTE *)(result + 32) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1013B10AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unsigned int *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t result;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        *(_DWORD *)(a1 + 32) |= 1u;
        v8 = *(unsigned int **)(a1 + 8);
        if (!v8)
          operator new();
        v24 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24))return 0;
        }
        else
        {
          v24 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v12 = *((_DWORD *)this + 14);
        v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13)
          return 0;
        v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
        if (!sub_1013AF1CC(v8, this, v15) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        v16 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v16, 1);
        v18 = v16 - 1;
        if (v18 < 0 == v17)
          *((_DWORD *)this + 14) = v18;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v10 || *v19 != 16)
          continue;
        v11 = v19 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_31;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_31:
        v24 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result)
            return result;
          v20 = v24;
        }
        else
        {
          v20 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v20 <= 4)
        {
          *(_DWORD *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 16) = v20;
        }
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v22 >= *((_QWORD *)this + 2) || *v22 != 29)
          continue;
        *((_QWORD *)this + 1) = v22 + 1;
LABEL_41:
        v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v24) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v24;
        *(_DWORD *)(a1 + 32) |= 4u;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 37)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_45:
        v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v24) & 1) != 0)
        {
          *(_DWORD *)(a1 + 24) = v24;
          *(_DWORD *)(a1 + 32) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_41;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_19;
        goto LABEL_45;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1013B13BC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102313FF8 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(float *)(v5 + 24), a3);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(float *)(v5 + 24), a3);
  return result;
}

uint64_t sub_1013B1460(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  unsigned int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102313FF8 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AF3AC(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = v8 + v9 + 1;
    v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 2) == 0)
      goto LABEL_18;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_18;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v11 = 2;
  }
  v4 += v11;
LABEL_18:
  v12 = v4 + 5;
  if ((v3 & 4) == 0)
    v12 = v4;
  if ((v3 & 8) != 0)
    result = v12 + 5;
  else
    result = v12;
LABEL_23:
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_1013B152C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013B0E7C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013B1578()
{
  return 1;
}

_QWORD *sub_1013B1580@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.GnssToGpsTimeOffset");
}

float sub_1013B1590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 2025);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v6)
    return result;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    *(_DWORD *)(a1 + 48) |= 1u;
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      operator new();
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      v8 = *(_QWORD *)(qword_102314000 + 8);
    result = sub_1013AF080(v7, v8);
    v6 = *(_DWORD *)(a2 + 48);
  }
  if ((v6 & 2) != 0)
  {
    v9 = *(_DWORD *)(a2 + 16);
    if ((v9 + 1) >= 7)
      sub_101950954();
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 16) = v9;
    v6 = *(_DWORD *)(a2 + 48);
  }
  if ((v6 & 4) != 0)
  {
    result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(float *)(a1 + 20) = result;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 8) == 0)
    {
LABEL_15:
      if ((v6 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_23;
    }
  }
  else if ((v6 & 8) == 0)
  {
    goto LABEL_15;
  }
  result = *(float *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 8u;
  *(float *)(a1 + 24) = result;
  v6 = *(_DWORD *)(a2 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_16:
    if ((v6 & 0x20) == 0)
      goto LABEL_17;
LABEL_25:
    v11 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v11;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 0x40) == 0)
    {
LABEL_18:
      if ((v6 & 0x80) == 0)
        return result;
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_23:
  v10 = *(_DWORD *)(a2 + 28);
  if ((v10 + 1) >= 7)
    sub_10195092C();
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v10;
  v6 = *(_DWORD *)(a2 + 48);
  if ((v6 & 0x20) != 0)
    goto LABEL_25;
LABEL_17:
  if ((v6 & 0x40) == 0)
    goto LABEL_18;
LABEL_26:
  result = *(float *)(a2 + 36);
  *(_DWORD *)(a1 + 48) |= 0x40u;
  *(float *)(a1 + 36) = result;
  if ((*(_DWORD *)(a2 + 48) & 0x80) != 0)
  {
LABEL_19:
    result = *(float *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(float *)(a1 + 40) = result;
  }
  return result;
}

void sub_1013B175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013B1774(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021B2CB0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102314000 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1013B17C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1013B1774(a1);
  operator delete();
}

void sub_1013B17EC()
{
  operator new();
}

uint64_t sub_1013B1840(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 48))
  {
    if ((*(_BYTE *)(result + 48) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(result + 16) = -1;
    *(_QWORD *)(result + 20) = 0;
    *(_QWORD *)(result + 28) = 0xFFFFFFFFLL;
    *(_QWORD *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1013B1888(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unsigned int *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  unsigned int v25;
  uint64_t result;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;

  v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_28;
        *(_DWORD *)(a1 + 48) |= 1u;
        v9 = *(unsigned int **)(a1 + 8);
        if (!v9)
          operator new();
        v34 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0;
        }
        else
        {
          v34 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v17 = *((_DWORD *)this + 14);
        v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
        if (!sub_1013AF1CC(v9, this, v20) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        v21 = *((_DWORD *)this + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)this + 14) = v23;
        v24 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 >= v11 || *v24 != 16)
          continue;
        v12 = v24 + 1;
        *((_QWORD *)this + 1) = v12;
        goto LABEL_40;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_40:
        v34 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!(_DWORD)result)
            return result;
          v25 = v34;
        }
        else
        {
          v25 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v25 + 1 <= 6)
        {
          *(_DWORD *)(a1 + 48) |= 2u;
          *(_DWORD *)(a1 + 16) = v25;
        }
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 != 29)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_50:
        v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v34;
        *(_DWORD *)(a1 + 48) |= 4u;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 != 37)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_54:
        v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 24) = v34;
        *(_DWORD *)(a1 + 48) |= 8u;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v29 >= v13 || *v29 != 40)
          continue;
        v14 = v29 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_58:
        v34 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!(_DWORD)result)
            return result;
          v30 = v34;
        }
        else
        {
          v30 = *v14;
          *((_QWORD *)this + 1) = v14 + 1;
        }
        if (v30 + 1 <= 6)
        {
          *(_DWORD *)(a1 + 48) |= 0x10u;
          *(_DWORD *)(a1 + 28) = v30;
        }
        v31 = (_BYTE *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v31 >= v15 || *v31 != 48)
          continue;
        v16 = v31 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_68:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v16;
          v32 = v16 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 48) |= 0x20u;
        if ((unint64_t)v32 >= v15 || *v32 != 61)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
LABEL_76:
        v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 36) = v34;
        *(_DWORD *)(a1 + 48) |= 0x40u;
        v33 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 != 69)
          continue;
        *((_QWORD *)this + 1) = v33 + 1;
LABEL_80:
        v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) != 0)
        {
          *(_DWORD *)(a1 + 40) = v34;
          *(_DWORD *)(a1 + 48) |= 0x80u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_50;
        goto LABEL_28;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_54;
        goto LABEL_28;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_58;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_68;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_76;
        goto LABEL_28;
      case 8u:
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_28;
        goto LABEL_80;
      default:
        v8 = TagFallback & 7;
LABEL_28:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1013B1D4C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102314000 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(float *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 28), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(float *)(v5 + 40), a3);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(float *)(v5 + 36), a3);
  if ((*(_DWORD *)(v5 + 48) & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(float *)(v5 + 40), a3);
  return result;
}

uint64_t sub_1013B1E60(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  unsigned int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_40;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102314000 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AF3AC(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = v8 + v9 + 1;
    v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = 0;
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
LABEL_12:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v11 = 2;
    }
    v4 += v11;
  }
LABEL_18:
  v12 = v4 + 5;
  if ((v3 & 4) == 0)
    v12 = v4;
  if ((v3 & 8) != 0)
    v13 = v12 + 5;
  else
    v13 = v12;
  if ((v3 & 0x10) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 11;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v15 = 2;
    }
    v13 += v15;
  }
  if ((v3 & 0x20) != 0)
  {
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v17 = 2;
    }
    v13 += v17;
  }
  v18 = v13 + 5;
  if ((v3 & 0x40) == 0)
    v18 = v13;
  if ((v3 & 0x80) != 0)
    result = v18 + 5;
  else
    result = v18;
LABEL_40:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

float sub_1013B1FA0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013B1590(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013B1FEC()
{
  return 1;
}

_QWORD *sub_1013B1FF4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SpaceWeatherStatus");
}

void sub_1013B2004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 2419);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    sub_1002A19E0(a1 + 24, *(_DWORD *)(a1 + 32) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 24) + 4 * *(int *)(a1 + 32)), *(const void **)(a2 + 24), 4 * *(int *)(a2 + 32));
    *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 32);
  }
  v6 = *(_DWORD *)(a2 + 48);
  if (v6)
  {
    sub_1002A19E0(a1 + 40, *(_DWORD *)(a1 + 48) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 48)), *(const void **)(a2 + 40), 4 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  LOBYTE(v7) = *(_BYTE *)(a2 + 64);
  if (!(_BYTE)v7)
    return;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    if (v8 >= 3)
      sub_10195097C();
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_DWORD *)(a1 + 8) = v8;
    v7 = *(_DWORD *)(a2 + 64);
  }
  if ((v7 & 2) == 0)
  {
    if ((v7 & 4) == 0)
      goto LABEL_13;
LABEL_18:
    v11 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(_DWORD *)(a1 + 16) = v11;
    v7 = *(_DWORD *)(a2 + 64);
    if ((v7 & 8) == 0)
    {
LABEL_14:
      if ((v7 & 0x40) == 0)
        return;
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  v10 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 12) = v10;
  v7 = *(_DWORD *)(a2 + 64);
  if ((v7 & 4) != 0)
    goto LABEL_18;
LABEL_13:
  if ((v7 & 8) == 0)
    goto LABEL_14;
LABEL_19:
  v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 20) = v12;
  if ((*(_DWORD *)(a2 + 64) & 0x40) != 0)
  {
LABEL_15:
    v9 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) |= 0x40u;
    *(_DWORD *)(a1 + 56) = v9;
  }
}

void sub_1013B21A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013B21BC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_1021B2D28;
  if (*((_QWORD *)this + 5))
    operator delete[]();
  if (*((_QWORD *)this + 3))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1013B2224(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1013B21BC(a1);
  operator delete();
}

void sub_1013B2248()
{
  operator new();
}

uint64_t sub_1013B2290(uint64_t result)
{
  if (*(_BYTE *)(result + 64))
  {
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_1013B22B0(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  signed int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  char v48;
  unsigned int v49[12];

  v5 = a1 + 40;
  v6 = a1 + 24;
  v45 = (unsigned int *)(a1 + 12);
  v46 = (unsigned int *)(a1 + 16);
  v47 = (unsigned int *)(a1 + 20);
LABEL_2:
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v49[0] = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v49);
          if (!(_DWORD)result)
            return result;
          v11 = v49[0];
        }
        else
        {
          v11 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v11 <= 2)
        {
          *(_DWORD *)(a1 + 64) |= 1u;
          *(_DWORD *)(a1 + 8) = v11;
        }
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v17 < v12 && *v17 == 16)
        {
          v13 = v17 + 1;
          *((_QWORD *)this + 1) = v13;
          goto LABEL_40;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
LABEL_40:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v45 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        if ((unint64_t)v18 >= v12 || *v18 != 24)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_48:
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v46);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v46 = *v14;
          v19 = v14 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v19 >= v12 || *v19 != 32)
          continue;
        v15 = v19 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_56:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v47);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v47 = *v15;
          v20 = v15 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v20 < v12 && *v20 == 45)
          goto LABEL_63;
        continue;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_48;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v15 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_56;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 2)
        {
          result = sub_100B320D4(this, v6);
          if (!(_DWORD)result)
            return result;
          goto LABEL_80;
        }
        if (v9 != 5)
          goto LABEL_26;
        while (2)
        {
          v49[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v49) & 1) == 0)
            return 0;
          v21 = v49[0];
          v22 = *(_DWORD *)(a1 + 32);
          if (v22 == *(_DWORD *)(a1 + 36))
          {
            sub_1002A19E0(v6, v22 + 1);
            v22 = *(_DWORD *)(a1 + 32);
          }
          v23 = *(_QWORD *)(a1 + 24);
          v24 = v22 + 1;
          *(_DWORD *)(a1 + 32) = v22 + 1;
          *(_DWORD *)(v23 + 4 * v22) = v21;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_DWORD *)this + 4) - v25;
          if (v26 >= 1)
          {
            v27 = v26 / 5u;
            v28 = v27 >= *(_DWORD *)(a1 + 36) - v24 ? *(_DWORD *)(a1 + 36) - v24 : v27;
            if (v28 >= 1)
            {
              v29 = 0;
              while (*(_BYTE *)v25 == 45)
              {
                v30 = *(_DWORD *)(v25 + 1);
                if (v24 >= *(_DWORD *)(a1 + 36))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v49, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v31 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v48, v31);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v49);
                  v24 = *(_DWORD *)(a1 + 32);
                  v23 = *(_QWORD *)(a1 + 24);
                }
                *(_DWORD *)(a1 + 32) = v24 + 1;
                *(_DWORD *)(v23 + 4 * v24) = v30;
                ++v29;
                v25 += 5;
                ++v24;
                if (v28 == v29)
                {
                  v29 = v28;
                  break;
                }
              }
              if (v29)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v29);
            }
          }
LABEL_80:
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v20 < *((_QWORD *)this + 2))
          {
            v32 = *v20;
            if (v32 == 45)
            {
LABEL_63:
              *((_QWORD *)this + 1) = v20 + 1;
              continue;
            }
            if (v32 == 53)
              goto LABEL_83;
          }
          goto LABEL_2;
        }
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 2)
        {
          result = sub_100B320D4(this, v5);
          if (!(_DWORD)result)
            return result;
          goto LABEL_100;
        }
        if (v9 != 5)
        {
LABEL_26:
          if (v9 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        while (1)
        {
          v49[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v49) & 1) == 0)
            return 0;
          v33 = v49[0];
          v34 = *(_DWORD *)(a1 + 48);
          if (v34 == *(_DWORD *)(a1 + 52))
          {
            sub_1002A19E0(v5, v34 + 1);
            v34 = *(_DWORD *)(a1 + 48);
          }
          v35 = *(_QWORD *)(a1 + 40);
          v36 = v34 + 1;
          *(_DWORD *)(a1 + 48) = v34 + 1;
          *(_DWORD *)(v35 + 4 * v34) = v33;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_DWORD *)this + 4) - v37;
          if (v38 >= 1)
          {
            v39 = v38 / 5u;
            v40 = v39 >= *(_DWORD *)(a1 + 52) - v36 ? *(_DWORD *)(a1 + 52) - v36 : v39;
            if (v40 >= 1)
            {
              v41 = 0;
              while (*(_BYTE *)v37 == 53)
              {
                v42 = *(_DWORD *)(v37 + 1);
                if (v36 >= *(_DWORD *)(a1 + 52))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v49, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v43 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v48, v43);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v49);
                  v36 = *(_DWORD *)(a1 + 48);
                  v35 = *(_QWORD *)(a1 + 40);
                }
                *(_DWORD *)(a1 + 48) = v36 + 1;
                *(_DWORD *)(v35 + 4 * v36) = v42;
                ++v41;
                v37 += 5;
                ++v36;
                if (v40 == v41)
                {
                  v41 = v40;
                  break;
                }
              }
              if (v41)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v41);
            }
          }
LABEL_100:
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v20 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v44 = *v20;
          if (v44 != 53)
            break;
LABEL_83:
          *((_QWORD *)this + 1) = v20 + 1;
        }
        if (v44 != 61)
          continue;
        *((_QWORD *)this + 1) = v20 + 1;
LABEL_104:
        v49[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v49) & 1) != 0)
        {
          *(_DWORD *)(a1 + 56) = v49[0];
          *(_DWORD *)(a1 + 64) |= 0x40u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 != 5)
          goto LABEL_26;
        goto LABEL_104;
      default:
        v9 = TagFallback & 7;
        goto LABEL_26;
    }
  }
}

void sub_1013B28C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013B28E8(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), a2, a4);
  if ((*(_DWORD *)(v5 + 64) & 8) != 0)
LABEL_5:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), a2, a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(float *)(*(_QWORD *)(v5 + 24) + 4 * v7++), a3);
    while (v7 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 48) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(float *)(*(_QWORD *)(v5 + 40) + 4 * v8++), a3);
    while (v8 < *(int *)(v5 + 48));
  }
  if ((*(_BYTE *)(v5 + 64) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(float *)(v5 + 56), a3);
  return result;
}

uint64_t sub_1013B2A0C(_DWORD *a1, unsigned int a2)
{
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t result;

  v3 = *((unsigned __int8 *)a1 + 64);
  if (*((_BYTE *)a1 + 64))
  {
    if ((v3 & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[2];
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        v3 = a1[16];
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
    }
    else
    {
      v4 = 0;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[3];
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = a1[16];
    }
    else
    {
      v7 = 2;
    }
    v4 += v7;
LABEL_16:
    if ((v3 & 4) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
      if (v8 >= 0x80)
      {
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
        v3 = a1[16];
      }
      else
      {
        v9 = 2;
      }
      v4 += v9;
      if ((v3 & 8) == 0)
        goto LABEL_27;
    }
    else if ((v3 & 8) == 0)
    {
LABEL_27:
      if ((v3 & 0x40) != 0)
        v3 = v4 + 5;
      else
        v3 = v4;
      goto LABEL_30;
    }
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      v3 = a1[16];
    }
    else
    {
      v11 = 2;
    }
    v4 += v11;
    goto LABEL_27;
  }
LABEL_30:
  result = (5 * (a1[12] + a1[8]) + v3);
  a1[15] = result;
  return result;
}

void sub_1013B2B18(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1013B2004(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013B2B64()
{
  return 1;
}

_QWORD *sub_1013B2B6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.IonosphereVTECModel");
}

float sub_1013B2B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 2684);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6);
      v8 = *(_DWORD *)(a1 + 28);
      v9 = *(int *)(a1 + 24);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v8 + 1);
          v8 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v8 + 1;
        operator new();
      }
      v10 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v9 + 1;
      sub_1013B2004(*(_QWORD *)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *(int *)(a2 + 24));
  }
  LOBYTE(v11) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v11)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      v12 = *(_QWORD *)(a1 + 8);
      if (!v12)
        operator new();
      v13 = *(_QWORD *)(a2 + 8);
      if (!v13)
        v13 = *(_QWORD *)(qword_102314010 + 8);
      result = sub_1013AF080(v12, v13);
      v11 = *(_DWORD *)(a2 + 52);
    }
    if ((v11 & 4) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 4u;
      v14 = *(_QWORD *)(a1 + 40);
      if (!v14)
        operator new();
      v15 = *(_QWORD *)(a2 + 40);
      if (!v15)
        v15 = *(_QWORD *)(qword_102314010 + 40);
      return sub_1013B1590(v14, v15);
    }
  }
  return result;
}

void sub_1013B2DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013B2DCC(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1021B2DA0;
  v2 = a1 + 2;
  sub_1013B2E0C(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_1013B2E0C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102314010 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1013B2E6C(uint64_t *a1)
{
  sub_1013B2DCC(a1);
  operator delete();
}

void sub_1013B2E90()
{
  operator new();
}

uint64_t sub_1013B2ED0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 52);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 52) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(result + 52);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 40);
      if (result)
        result = sub_1013B1840(result);
    }
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t sub_1013B2F60(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t result;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v8 = TagFallback >> 3;
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_21;
      *(_DWORD *)(a1 + 52) |= 1u;
      v10 = *(unsigned int **)(a1 + 8);
      if (!v10)
        operator new();
      v41 = 0;
      v11 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v41))return 0;
      }
      else
      {
        v41 = *v11;
        *((_QWORD *)this + 1) = v11 + 1;
      }
      v12 = *((_DWORD *)this + 14);
      v13 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v12 + 1;
      if (v12 >= v13)
        return 0;
      v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41);
      if (!sub_1013AF1CC(v10, this, v15) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
      v16 = *((_DWORD *)this + 14);
      v17 = __OFSUB__(v16, 1);
      v18 = v16 - 1;
      if (v18 < 0 == v17)
        *((_DWORD *)this + 14) = v18;
      v19 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v19 < *((_QWORD *)this + 2) && *v19 == 18)
      {
        while (1)
        {
          *((_QWORD *)this + 1) = v19 + 1;
LABEL_33:
          v20 = *(_DWORD *)(a1 + 28);
          v21 = *(int *)(a1 + 24);
          if ((int)v21 >= v20)
          {
            if (v20 == *(_DWORD *)(a1 + 32))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v20 + 1);
              v20 = *(_DWORD *)(a1 + 28);
            }
            *(_DWORD *)(a1 + 28) = v20 + 1;
            operator new();
          }
          v22 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v21 + 1;
          v23 = *(_QWORD *)(v22 + 8 * v21);
          v42 = 0;
          v24 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v24 >= *((_QWORD *)this + 2) || *v24 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v42))return 0;
          }
          else
          {
            v42 = *v24;
            *((_QWORD *)this + 1) = v24 + 1;
          }
          v25 = *((_DWORD *)this + 14);
          v26 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v25 + 1;
          if (v25 >= v26)
            return 0;
          v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
          if (!sub_1013B22B0(v23, this, v28) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
          v29 = *((_DWORD *)this + 14);
          v17 = __OFSUB__(v29, 1);
          v30 = v29 - 1;
          if (v30 < 0 == v17)
            *((_DWORD *)this + 14) = v30;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v19 >= *((_QWORD *)this + 2))
            break;
          v31 = *v19;
          if (v31 != 18)
          {
            if (v31 == 26)
            {
              *((_QWORD *)this + 1) = v19 + 1;
LABEL_51:
              *(_DWORD *)(a1 + 52) |= 4u;
              v32 = *(_QWORD *)(a1 + 40);
              if (!v32)
                operator new();
              v43 = 0;
              v33 = (char *)*((_QWORD *)this + 1);
              if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
              }
              else
              {
                v43 = *v33;
                *((_QWORD *)this + 1) = v33 + 1;
              }
              v34 = *((_DWORD *)this + 14);
              v35 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v34 + 1;
              if (v34 >= v35)
                return 0;
              v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
              if (!sub_1013B1888(v32, this, v37) || !*((_BYTE *)this + 36))
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
              v38 = *((_DWORD *)this + 14);
              v17 = __OFSUB__(v38, 1);
              v39 = v38 - 1;
              if (v39 < 0 == v17)
                *((_DWORD *)this + 14) = v39;
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
            goto LABEL_2;
          }
        }
      }
    }
    if (v8 == 2)
    {
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_21;
      goto LABEL_33;
    }
    if (v8 == 3)
    {
      v9 = TagFallback & 7;
      if (v9 == 2)
        goto LABEL_51;
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_21:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1013B33D8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  if ((*(_BYTE *)(result + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102314010 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  if ((*(_BYTE *)(v5 + 52) & 4) != 0)
  {
    v8 = *(_QWORD *)(v5 + 40);
    if (!v8)
      v8 = *(_QWORD *)(qword_102314010 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1013B3490(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;

  if (!*(_BYTE *)(a1 + 52))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 52) & 4) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102314010 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AF3AC(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 52) & 4) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 40);
    if (!v8)
      v8 = *(_QWORD *)(qword_102314010 + 40);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013B1E60(v8, a2);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
  }
LABEL_18:
  v12 = *(_DWORD *)(a1 + 24);
  v13 = (v12 + v3);
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013B2A0C(*(_DWORD **)(*(_QWORD *)(a1 + 16)+ 8 * v14), a2);
      v16 = (int)v15;
      if (v15 >= 0x80)
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      else
        v17 = 1;
      v13 = (v16 + v13 + v17);
      ++v14;
    }
    while (v14 < *(int *)(a1 + 24));
  }
  *(_DWORD *)(a1 + 48) = v13;
  return v13;
}

float sub_1013B35B4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013B2B7C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013B3600()
{
  return 1;
}

_QWORD *sub_1013B3608@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.IonosphereCorrections");
}

float sub_1013B3618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE v22[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v22, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", 2966);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 36);
      v8 = *(int *)(a1 + 32);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v7 + 1);
          v7 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v8 + 1;
      sub_1013AFF50(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 32));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), *(_DWORD *)(a2 + 56) + *(_DWORD *)(a1 + 56));
  if (*(int *)(a2 + 56) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v11);
      v13 = *(_DWORD *)(a1 + 60);
      v14 = *(int *)(a1 + 56);
      if ((int)v14 >= v13)
      {
        if (v13 == *(_DWORD *)(a1 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), v13 + 1);
          v13 = *(_DWORD *)(a1 + 60);
        }
        *(_DWORD *)(a1 + 60) = v13 + 1;
        operator new();
      }
      v15 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 56) = v14 + 1;
      result = sub_1013B0E7C(*(_QWORD *)(v15 + 8 * v14), v12);
      ++v11;
    }
    while (v11 < *(int *)(a2 + 56));
  }
  LOBYTE(v16) = *(_BYTE *)(a2 + 76);
  if ((_BYTE)v16)
  {
    if ((*(_BYTE *)(a2 + 76) & 1) != 0)
    {
      *(_DWORD *)(a1 + 76) |= 1u;
      v17 = *(_QWORD *)(a1 + 8);
      if (!v17)
        operator new();
      v18 = *(_QWORD *)(a2 + 8);
      if (!v18)
        v18 = *(_QWORD *)(qword_102314018 + 8);
      result = sub_1013AF080(v17, v18);
      v16 = *(_DWORD *)(a2 + 76);
    }
    if ((v16 & 2) != 0)
    {
      *(_DWORD *)(a1 + 76) |= 2u;
      v19 = *(_QWORD *)(a1 + 16);
      if (!v19)
        operator new();
      v20 = *(_QWORD *)(a2 + 16);
      if (!v20)
        v20 = *(_QWORD *)(qword_102314018 + 16);
      return sub_1013B2B7C(v19, v20);
    }
  }
  return result;
}

void sub_1013B3910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1013B3928(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1021B2E18;
  v2 = a1 + 6;
  sub_1013B3974(a1);
  sub_10010C59C(v2);
  sub_10010C59C(a1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_1013B3974(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102314018 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1013B39D4(uint64_t *a1)
{
  sub_1013B3928(a1);
  operator delete();
}

uint64_t sub_1013B39F8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102314018;
  if (!qword_102314018)
  {
    sub_1013AE7E0(0, a2, a3, a4);
    return qword_102314018;
  }
  return result;
}

void sub_1013B3A24()
{
  operator new();
}

uint64_t sub_1013B3A74(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 76);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 76) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(result + 76);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_1013B2ED0(result);
    }
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(int *)(v1 + 56) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 76) = 0;
  return result;
}

uint64_t sub_1013B3B3C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unsigned int *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  _BYTE *v52;
  uint64_t result;
  unsigned int v54;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48);
  while (1)
  {
LABEL_2:
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 < *((_QWORD *)this + 2) && (*v7 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_20;
        *(_DWORD *)(a1 + 76) |= 1u;
        v10 = *(unsigned int **)(a1 + 8);
        if (!v10)
          operator new();
        v54 = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        v12 = *((_DWORD *)this + 14);
        v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13)
          return 0;
        v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1013AF1CC(v10, this, v15) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        v16 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v16, 1);
        v18 = v16 - 1;
        if (v18 < 0 == v17)
          *((_DWORD *)this + 14) = v18;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 18)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
        goto LABEL_32;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_20;
LABEL_32:
        *(_DWORD *)(a1 + 76) |= 2u;
        v20 = *(_QWORD *)(a1 + 16);
        if (!v20)
          operator new();
        v54 = 0;
        v21 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v21;
          *((_QWORD *)this + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)this + 14);
        v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23)
          return 0;
        v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1013B2F60(v20, this, v25) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        v26 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v17)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 < *((_QWORD *)this + 2) && *v28 == 26)
        {
          do
          {
            *((_QWORD *)this + 1) = v28 + 1;
LABEL_46:
            v29 = *(_DWORD *)(a1 + 36);
            v30 = *(int *)(a1 + 32);
            if ((int)v30 >= v29)
            {
              if (v29 == *(_DWORD *)(a1 + 40))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
                v29 = *(_DWORD *)(a1 + 36);
              }
              *(_DWORD *)(a1 + 36) = v29 + 1;
              operator new();
            }
            v31 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 32) = v30 + 1;
            v32 = *(_QWORD *)(v31 + 8 * v30);
            v54 = 0;
            v33 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
            }
            else
            {
              v54 = *v33;
              *((_QWORD *)this + 1) = v33 + 1;
            }
            v34 = *((_DWORD *)this + 14);
            v35 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v34 + 1;
            if (v34 >= v35)
              return 0;
            v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
            if (!sub_1013B046C(v32, this, v37) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
            v38 = *((_DWORD *)this + 14);
            v17 = __OFSUB__(v38, 1);
            v39 = v38 - 1;
            if (v39 < 0 == v17)
              *((_DWORD *)this + 14) = v39;
            v28 = (_BYTE *)*((_QWORD *)this + 1);
            if ((unint64_t)v28 >= *((_QWORD *)this + 2))
              goto LABEL_2;
            v40 = *v28;
          }
          while (v40 == 26);
          if (v40 == 34)
          {
            do
            {
              *((_QWORD *)this + 1) = v28 + 1;
LABEL_64:
              v41 = *(_DWORD *)(a1 + 60);
              v42 = *(int *)(a1 + 56);
              if ((int)v42 >= v41)
              {
                if (v41 == *(_DWORD *)(a1 + 64))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v41 + 1);
                  v41 = *(_DWORD *)(a1 + 60);
                }
                *(_DWORD *)(a1 + 60) = v41 + 1;
                operator new();
              }
              v43 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(a1 + 56) = v42 + 1;
              v44 = *(_QWORD *)(v43 + 8 * v42);
              v54 = 0;
              v45 = (char *)*((_QWORD *)this + 1);
              if ((unint64_t)v45 >= *((_QWORD *)this + 2) || *v45 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
              }
              else
              {
                v54 = *v45;
                *((_QWORD *)this + 1) = v45 + 1;
              }
              v46 = *((_DWORD *)this + 14);
              v47 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v46 + 1;
              if (v46 >= v47)
                return 0;
              v48 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
              if (!sub_1013B10AC(v44, this, v49) || !*((_BYTE *)this + 36))
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v48);
              v50 = *((_DWORD *)this + 14);
              v17 = __OFSUB__(v50, 1);
              v51 = v50 - 1;
              if (v51 < 0 == v17)
                *((_DWORD *)this + 14) = v51;
              v28 = (_BYTE *)*((_QWORD *)this + 1);
              v52 = (_BYTE *)*((_QWORD *)this + 2);
            }
            while (v28 < v52 && *v28 == 34);
            if (v28 == v52 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_46;
        goto LABEL_20;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_20;
        goto LABEL_64;
      default:
        v9 = TagFallback & 7;
LABEL_20:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1013B4110(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  v6 = *(_DWORD *)(result + 76);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102314018 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102314018 + 16);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    v10 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 56));
  }
  return result;
}

uint64_t sub_1013B41F0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;

  if (!*(_BYTE *)(a1 + 76))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 76) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 76) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102314018 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013AF3AC(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 76) & 2) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102314018 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013B3490(v8, a2);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
  }
LABEL_18:
  v12 = *(_DWORD *)(a1 + 32);
  v13 = v12 + v3;
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013B0C54(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v14), a2);
      v16 = (int)v15;
      if (v15 >= 0x80)
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      else
        v17 = 1;
      v13 += v16 + v17;
      ++v14;
    }
    while (v14 < *(int *)(a1 + 32));
  }
  v18 = *(_DWORD *)(a1 + 56);
  v19 = (v18 + v13);
  if (v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013B1460(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v20), a2);
      v22 = (int)v21;
      if (v21 >= 0x80)
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      else
        v23 = 1;
      v19 = (v22 + v19 + v23);
      ++v20;
    }
    while (v20 < *(int *)(a1 + 56));
  }
  *(_DWORD *)(a1 + 72) = v19;
  return v19;
}

float sub_1013B4368(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1013B3618(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013B43B4()
{
  return 1;
}

_QWORD *sub_1013B43BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RavenGnssAssistanceFile.AssistanceFileContents");
}

double sub_1013B43D0(double **a1, double **a2, double *a3, double a4)
{
  double v4;
  double *v5;
  double *v6;
  int v7;
  double v8;
  double v10;
  double v11;
  _BOOL4 v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v19;
  double v20;
  NSObject *v21;
  const char *v23;
  uint8_t *v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  v4 = a4 + -2592000.0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v12 = 0;
    v7 = 0;
    v13 = -INFINITY;
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      if (*v5 >= v4 + -0.0001 && *v5 < a4)
      {
        v10 = v5[2];
        if (v10 > 0.0)
        {
          ++v7;
          v8 = v8 + v10;
        }
      }
      v5 += 3;
    }
    while (v5 != v6);
    v11 = v8 / (double)v7;
    v12 = v7 >= 1;
    if (v7 >= 1)
      v13 = v11;
    else
      v13 = -INFINITY;
  }
  v14 = *a2;
  v15 = a2[1];
  if (*a2 == v15)
  {
    v17 = 0.0;
    if (v12)
    {
LABEL_25:
      v19 = v17 / (double)v7;
      goto LABEL_28;
    }
  }
  else
  {
    v16 = v4 + -0.0001;
    v17 = 0.0;
    do
    {
      if (*v14 >= v16 && *v14 < a4)
        v17 = v17 + v14[2];
      v14 += 3;
    }
    while (v14 != v15);
    if (v12)
      goto LABEL_25;
  }
  v19 = -INFINITY;
LABEL_28:
  v20 = *a3;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021B2F90);
  v21 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134284033;
    v32 = v20;
    v33 = 2049;
    v34 = v13;
    v35 = 2049;
    v36 = v19;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessAdjustment::Features,allBoutsBoutDurationSecCv,%{private}.2f,dailySteps30daysMean,%{private}.2f,dailyFlights30daysMean,%{private}.2f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021B2F90);
    v25 = 134284033;
    v26 = v20;
    v27 = 2049;
    v28 = v13;
    v29 = 2049;
    v30 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessAdjustment::Features,allBoutsBoutDurationSecCv,%{private}.2f,dailySteps30daysMean,%{private}.2f,dailyFlights30daysMean,%{private}.2f", &v25, 32);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessAdjustment::extractFeatures(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const SteadinessModelContinuousWalking_Generated::Features &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  return v20;
}

void sub_1013B46A0(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

double sub_1013B46CC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  double result;

  v2 = sub_101476A58(a1, a2);
  *v2 = off_1021B2FC0;
  v2[12] = 0;
  v2[13] = 0;
  v2[11] = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)((char *)v2 + 68) = 0u;
  return result;
}

uint64_t sub_1013B4708(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = 0x7FEFFFFFFFFFFFFFLL;
  return 1;
}

uint64_t sub_1013B4718(uint64_t a1, __int128 *a2, double a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(double *)(a1 + 112) = a3;
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  return 1;
}

uint64_t sub_1013B4740()
{
  return 1;
}

uint64_t sub_1013B4748(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_101125448();
  *(double *)(a1 + 104) = sub_101126C0C(v2) / 3.5;
  return 1;
}

_QWORD *sub_1013B4940(_QWORD *a1)
{
  *a1 = off_1021B2FC0;
  sub_100261F44((uint64_t)(a1 + 11));
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_1013B4988(_QWORD *a1)
{
  *a1 = off_1021B2FC0;
  sub_100261F44((uint64_t)(a1 + 11));
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

void sub_1013B49E0(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

uint64_t sub_1013B4A0C()
{
  const __CFArray *Children;
  const __CFArray *v1;
  const void *ValueAtIndex;
  uint64_t IntegerValue;
  uint64_t DataValue;
  uint64_t v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[1640];

  Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children || (v1 = Children, !CFArrayGetCount(Children)))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021B3040);
    v7 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Event has no children", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021B3040);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 17, "Event has no children", v11, 2, v11[0]);
    goto LABEL_26;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v1, 0);
  IntegerValue = IOHIDEventGetIntegerValue(ValueAtIndex, 65537);
  if (IOHIDEventGetIntegerValue(ValueAtIndex, 0x10000) != 65301 || IntegerValue != 2)
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021B3040);
    v9 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Event has no timestamp", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021B3040);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 17, "Event has no timestamp", v11, 2, v11[0]);
LABEL_26:
    v10 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "uint64_t sensorTimeFromHidChildEvent(IOHIDEventRef)", "%s\n", v8);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  DataValue = IOHIDEventGetDataValue(ValueAtIndex, 65540);
  v5 = IOHIDEventGetIntegerValue(ValueAtIndex, 65539);
  if (!DataValue)
    sub_1019509A4();
  if (v5 != 8)
    sub_101950B10();
  return *(_QWORD *)DataValue;
}

const __CFArray *sub_1013B4CF4(uint64_t a1, _BYTE *a2)
{
  const __CFArray *Children;
  const __CFArray *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t IntegerValue;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  NSObject *v15;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  Children = (const __CFArray *)IOHIDEventGetChildren(a1);
  v4 = Children;
  *a2 = 0;
  if (Children)
  {
    if (!CFArrayGetCount(Children))
      return 0;
    *a2 = 1;
    if (CFArrayGetCount(v4) < 1)
      return 0;
    v5 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      IntegerValue = IOHIDEventGetIntegerValue(ValueAtIndex, 65537);
      v8 = IOHIDEventGetIntegerValue(ValueAtIndex, 0x10000);
      v9 = IOHIDEventGetIntegerValue(ValueAtIndex, 65539);
      v10 = v9;
      if (v8 == 65301 && IntegerValue == 4 && v9 == 8)
        break;
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B3060);
      v11 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        v27 = v8;
        v28 = 2049;
        v29 = IntegerValue;
        v30 = 2049;
        v31 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] Invalid child event for BTC timestamp: usage page 0x%{private}lx usage 0x%{private}lx length %{private}zu", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B3060);
        v20 = 134284033;
        v21 = v8;
        v22 = 2049;
        v23 = IntegerValue;
        v24 = 2049;
        v25 = v10;
        LODWORD(v19) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryDeviceMotion] Invalid child event for BTC timestamp: usage page 0x%{private}lx usage 0x%{private}lx length %{private}zu", &v20, v19);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "uint64_t btcTimeFromHidChildEvent(IOHIDEventRef, BOOL &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      if (++v5 >= CFArrayGetCount(v4))
        return 0;
    }
    v4 = *(const __CFArray **)IOHIDEventGetDataValue(ValueAtIndex, 65540);
    v14 = sub_1001FCBB4();
    if (!v4)
    {
      if (v14 - *(double *)&qword_10230E690 > 1.0)
      {
        qword_10230E690 = *(_QWORD *)&v14;
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B3060);
        v15 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Invalid child BTC timestamp", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B3060);
          LOWORD(v20) = 0;
          LODWORD(v19) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] Invalid child BTC timestamp", &v20, v19);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 0, "uint64_t btcTimeFromHidChildEvent(IOHIDEventRef, BOOL &)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
      return 0;
    }
  }
  return v4;
}

BOOL sub_1013B50F0(void *a1, IOHIDServiceClientRef service, CFStringRef key)
{
  CFTypeRef v5;
  const void *v6;
  CFTypeID TypeID;
  BOOL v8;
  _BOOL8 v9;
  NSObject *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  CFStringRef v18;
  uint8_t buf[4];
  CFStringRef v20;

  v5 = IOHIDServiceClientCopyProperty(service, key);
  if (v5)
  {
    v6 = v5;
    TypeID = CFNumberGetTypeID();
    v8 = TypeID == CFGetTypeID(v6);
    v9 = v8;
    if (v8)
    {
      CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, a1);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3080);
      v11 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v20 = key;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3080);
        v17 = 138543362;
        v18 = key;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Invalid type for key %{public}@!", &v17, 12);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "BOOL getIntFromHIDService(int *, IOHIDServiceClientRef, CFStringRef)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    CFRelease(v6);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B3080);
    v10 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v20 = key;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3080);
      v17 = 138543362;
      v18 = key;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Key %{public}@ not found!", &v17, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL getIntFromHIDService(int *, IOHIDServiceClientRef, CFStringRef)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  return v9;
}

uint64_t sub_1013B5444(uint64_t a1, IOHIDServiceClientRef service, CFStringRef key)
{
  const __CFData *v5;
  const __CFData *v6;
  CFTypeID TypeID;
  UInt8 *BytePtr;
  CFIndex Length;
  size_t v10;
  NSObject *v11;
  uint64_t v12;
  CFTypeID v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  CFStringRef v21;
  uint8_t buf[16];
  uint64_t v23;

  v5 = (const __CFData *)IOHIDServiceClientCopyProperty(service, key);
  if (v5)
  {
    v6 = v5;
    TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(v6);
      Length = CFDataGetLength(v6);
      v10 = 0;
      if (Length)
      {
        while (BytePtr[v10])
        {
          if (Length == ++v10)
          {
            v10 = Length;
            break;
          }
        }
      }
      sub_10035ACF4(buf, BytePtr, v10);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 16) = v23;
    }
    else
    {
      v13 = CFStringGetTypeID();
      if (v13 != CFGetTypeID(v6))
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3080);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = key;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B3080);
          v20 = 138543362;
          v21 = key;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Invalid type for key %{public}@!", &v20, 12);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 0, "BOOL getStringFromHIDService(std::string &, IOHIDServiceClientRef, CFStringRef)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        v12 = 0;
        goto LABEL_25;
      }
      std::string::assign((std::string *)a1, (const std::string::value_type *)-[__CFData UTF8String](v6, "UTF8String"));
    }
    v12 = 1;
LABEL_25:
    CFRelease(v6);
    return v12;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B3080);
  v11 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = key;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B3080);
    v20 = 138543362;
    v21 = key;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Key %{public}@ not found!", &v20, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL getStringFromHIDService(std::string &, IOHIDServiceClientRef, CFStringRef)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return 0;
}

NSObject *sub_1013B5818(void *a1, IOHIDServiceClientRef service, __CFString *key, id a4)
{
  __CFString *v5;
  CFTypeRef v7;
  void *v8;
  CFTypeID TypeID;
  BOOL v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  __CFString *v20;
  id v21;
  id v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  __CFString *v27;
  uint8_t buf[4];
  _BYTE v29[14];
  __int16 v30;
  __CFString *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;

  v5 = key;
  v7 = IOHIDServiceClientCopyProperty(service, key);
  if (v7)
  {
    v8 = (void *)v7;
    TypeID = CFDataGetTypeID();
    v10 = TypeID == CFGetTypeID(v8);
    v11 = v10;
    if (v10)
    {
      if (objc_msgSend(v8, "length") == a4)
      {
        memcpy(a1, objc_msgSend(v8, "bytes"), (size_t)a4);
LABEL_16:
        CFRelease(v8);
        return v11;
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3080);
      v18 = qword_10229FC78;
      v13 = "[data length] == expected_length";
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)v29 = 0;
        *(_WORD *)&v29[4] = 2082;
        *(_QWORD *)&v29[6] = "";
        v30 = 2082;
        v31 = (__CFString *)-[__CFString UTF8String](v5, "UTF8String");
        v32 = 2050;
        v33 = objc_msgSend(v8, "length");
        v34 = 2082;
        v35 = "assert";
        v36 = 2081;
        v37 = "[data length] == expected_length";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3080);
      }
      v19 = qword_10229FC78;
      if (os_signpost_enabled((os_log_t)qword_10229FC78))
      {
        v20 = (__CFString *)-[__CFString UTF8String](v5, "UTF8String");
        v21 = objc_msgSend(v8, "length");
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)v29 = 0;
        *(_WORD *)&v29[4] = 2082;
        *(_QWORD *)&v29[6] = "";
        v30 = 2082;
        v31 = v20;
        v32 = 2050;
        v33 = v21;
        v34 = 2082;
        v35 = "assert";
        v36 = 2081;
        v37 = "[data length] == expected_length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected length!", "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3080);
      }
      v11 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v5 = (__CFString *)-[__CFString UTF8String](v5, "UTF8String");
        v22 = objc_msgSend(v8, "length");
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)v29 = 0;
        *(_WORD *)&v29[4] = 2082;
        *(_QWORD *)&v29[6] = "";
        v30 = 2082;
        v31 = v5;
        v32 = 2050;
        v33 = v22;
        v34 = 2082;
        v35 = "assert";
        v36 = 2081;
        v37 = "[data length] == expected_length";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm", 143, "getBytesFromHIDService");
    }
    else
    {
      v13 = (const char *)DefaultObserver;
      if (qword_10229FC70 == -1)
      {
LABEL_13:
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)v29 = v5;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (*((_QWORD *)v13 + 398) != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B3080);
          v26 = 138543362;
          v27 = v5;
          LODWORD(v25) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Invalid type for key %{public}@!", &v26, v25);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 0, "BOOL getBytesFromHIDService(void *, IOHIDServiceClientRef, CFStringRef, size_t)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        goto LABEL_16;
      }
    }
    dispatch_once(&qword_10229FC70, &stru_1021B3080);
    goto LABEL_13;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B3080);
  v12 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B3080);
    v26 = 138543362;
    v27 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Key %{public}@ not found!", &v26, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL getBytesFromHIDService(void *, IOHIDServiceClientRef, CFStringRef, size_t)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return 0;
}

void sub_1013B5DFC(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_1013B5E28(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1013B5E54(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

Class sub_1013B67E4()
{
  Class result;

  if (qword_10230E6A0 != -1)
    dispatch_once(&qword_10230E6A0, &stru_1021B30A0);
  result = objc_getClass("CRVehicleAccessoryManager");
  qword_10230E698 = (uint64_t)result;
  off_1022FF950 = sub_1013B6840;
  return result;
}

uint64_t sub_1013B6840()
{
  return qword_10230E698;
}

void sub_1013B684C(id a1)
{
  qword_10230E6A8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
}

void sub_1013B6874(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1013B6944(id a1)
{
  qword_10230EB00 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLGeoMapTilesPreloaderServiceSilo"));
}

void sub_1013B6D58()
{
  operator delete();
}

void sub_1013B6D7C(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 v20;
  int v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string::size_type size;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string::size_type v41;
  NSObject *v42;
  std::string *v43;
  __int128 v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  const char *v74;
  char *v75;
  std::string *v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  std::string v80;
  std::string v81;
  std::string __dst;
  std::string v83;
  std::string __p;
  char *v85[2];
  uint64_t v86;
  __int128 *v87;
  _BYTE v88[28];
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  _BYTE buf[64];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[20];

  sub_1001E4804(buf);
  v2 = *a1;
  v88[0] = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "EnableCLGMTPS", v88);
  v4 = v88[0];
  if (!v3)
    v4 = v2;
  *a1 = v4;
  v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1001E4804(buf);
  v8 = a1[33];
  v88[0] = 0;
  v9 = sub_1001E4874(*(uint64_t *)buf, "CLGMTPSClearPersistentStore", v88);
  v10 = v88[0];
  if (!v9)
    v10 = v8;
  a1[33] = v10;
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1001E4804(buf);
  v14 = a1[32];
  v88[0] = 0;
  v15 = sub_1001E4874(*(uint64_t *)buf, "CLGMTPSUseMotionStateStationaryAsXPCCriteria", v88);
  v16 = v88[0];
  if (!v15)
    v16 = v14;
  a1[32] = v16;
  v17 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_1001E4804(buf);
  v20 = a1[64];
  v88[0] = 0;
  v21 = sub_1001E4874(*(uint64_t *)buf, "CLGMTPSAddFakeNPLOIData", v88);
  v22 = v88[0];
  if (!v21)
    v22 = v20;
  a1[64] = v22;
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_1001E4804(v88);
  memset(&__p, 0, sizeof(__p));
  sub_1005F0F40(*(uint64_t *)v88, "CLGMTPSMinimumBatteryLevel", &__p, (uint64_t)buf);
  *(_OWORD *)v85 = *(_OWORD *)buf;
  v86 = *(_QWORD *)&buf[16];
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v26 = *(std::__shared_weak_count **)&v88[8];
  if (*(_QWORD *)&v88[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&v88[8] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v86) < 0)
  {
    if (!v85[1])
      goto LABEL_42;
    v29 = v85[0];
  }
  else
  {
    if (!HIBYTE(v86))
      goto LABEL_42;
    v29 = (const char *)v85;
  }
  *((_DWORD *)a1 + 1) = atoi(v29);
LABEL_42:
  memset(&v83, 0, sizeof(v83));
  sub_1001E4804(v88);
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = 0;
  sub_1005F0F40(*(uint64_t *)v88, "CLGMTPSPreCacheGeoTilesForCoordinate", &__dst, (uint64_t)buf);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  v83 = *(std::string *)buf;
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v30 = *(std::__shared_weak_count **)&v88[8];
  if (*(_QWORD *)&v88[8])
  {
    v31 = (unint64_t *)(*(_QWORD *)&v88[8] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v83.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(buf, 0, 24);
    sub_1013D01F4((uint64_t)a1, &v83, 0x2Cu, (uint64_t *)buf);
    v34 = *(_QWORD *)buf;
    if (*(_QWORD *)&buf[8] - *(_QWORD *)buf == 72)
    {
      v35 = *(const char **)buf;
      if (*(char *)(*(_QWORD *)buf + 23) < 0)
        v35 = **(const char ***)buf;
      *((double *)a1 + 1) = atof(v35);
      v36 = (const char *)(v34 + 24);
      if (*(char *)(v34 + 47) < 0)
        v36 = *(const char **)v36;
      *((double *)a1 + 2) = atof(v36);
      v37 = (const char *)(v34 + 48);
      if (*(char *)(v34 + 71) < 0)
        v37 = *(const char **)v37;
      *((double *)a1 + 3) = atof(v37);
    }
    *(_QWORD *)v88 = buf;
    sub_100259608((void ***)v88);
  }
  memset(&v81, 0, sizeof(v81));
  sub_1001E4804(v88);
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = 0;
  sub_1005F0F40(*(uint64_t *)v88, "CLGMTPSAddRegionConfig", &v80, (uint64_t)buf);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  v81 = *(std::string *)buf;
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v38 = *(std::__shared_weak_count **)&v88[8];
  if (*(_QWORD *)&v88[8])
  {
    v39 = (unint64_t *)(*(_QWORD *)&v88[8] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = v81.__r_.__value_.__l.__size_;
  if (v41)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v42 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      v43 = &v81;
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v81.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "CLGMTPS,addRegionConfig,regionConfigStr,%{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v76 = &v81;
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v76 = (std::string *)v81.__r_.__value_.__r.__words[0];
      *(_DWORD *)v88 = 136446210;
      *(_QWORD *)&v88[4] = v76;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,addRegionConfig,regionConfigStr,%{public}s", v88, 12);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "void CLGeoMapTilesPreloaderSettings::readDaemonSettings()", "%s\n", v77);
      if (v78 != buf)
        free(v78);
    }
    memset(v88, 0, 24);
    sub_1013D01F4((uint64_t)a1, &v81, 0x2Cu, (uint64_t *)v88);
    *(_DWORD *)buf = 16777472;
    buf[4] = 1;
    *(_DWORD *)&buf[5] = 0;
    *(_OWORD *)&buf[28] = xmmword_101BC0BA0;
    *(_OWORD *)&buf[44] = xmmword_101BC0BB0;
    *(_DWORD *)&buf[60] = 400;
    *(_QWORD *)&v44 = -1;
    *((_QWORD *)&v44 + 1) = -1;
    v100 = v44;
    v101 = v44;
    v102 = v44;
    v103 = v44;
    v104 = v44;
    *(_DWORD *)v105 = -1;
    *(_OWORD *)&v105[4] = xmmword_101BC0BC0;
    *(_OWORD *)&buf[12] = xmmword_101BC0BD0;
    if (sub_1000C4240())
      *(_DWORD *)&buf[16] = 4233600;
    DWORD2(v100) = 125000;
    DWORD1(v101) = 125000;
    LODWORD(v102) = 125000;
    HIDWORD(v102) = 15000;
    DWORD2(v103) = 25000;
    DWORD1(v104) = -1;
    *(_DWORD *)v105 = -1;
    if (*(_QWORD *)&v88[8] != *(_QWORD *)v88 && sub_100775CBC((uint64_t)buf, v88))
    {
      v87 = *(__int128 **)v88;
      v45 = sub_1013D0360((uint64_t **)a1 + 5, *(const void ***)v88, (uint64_t)&unk_101B9EB60, &v87);
      v46 = v102;
      *(_OWORD *)(v45 + 21) = v103;
      v47 = *(_OWORD *)v105;
      *(_OWORD *)(v45 + 23) = v104;
      *(_OWORD *)(v45 + 25) = v47;
      v48 = *(_DWORD *)&v105[16];
      v49 = *(_OWORD *)&buf[32];
      *(_OWORD *)(v45 + 13) = *(_OWORD *)&buf[48];
      v50 = v101;
      *(_OWORD *)(v45 + 15) = v100;
      *(_OWORD *)(v45 + 17) = v50;
      *(_OWORD *)(v45 + 19) = v46;
      v51 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v45 + 7) = *(_OWORD *)buf;
      *((_DWORD *)v45 + 54) = v48;
      *(_OWORD *)(v45 + 9) = v51;
      *(_OWORD *)(v45 + 11) = v49;
    }
    *(_QWORD *)buf = v88;
    sub_100259608((void ***)buf);
  }
  sub_100197040();
  if ((sub_100195F08() & 1) != 0)
  {
    v52 = 0;
  }
  else
  {
    sub_1001E4804(buf);
    v88[0] = 0;
    v53 = sub_1001E4874(*(uint64_t *)buf, "UseMapsBuildingTileStyleBasic", v88) ^ 1;
    if (v88[0])
      v52 = v53;
    else
      v52 = 1;
    v54 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  *((_DWORD *)a1 + 17) = v52;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v57 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    v58 = *a1;
    v59 = *((_QWORD *)a1 + 1);
    v60 = *((_QWORD *)a1 + 2);
    v61 = *((_QWORD *)a1 + 3);
    v62 = a1[33];
    v63 = *((_QWORD *)a1 + 7);
    v64 = *((_DWORD *)a1 + 1);
    v65 = *((_DWORD *)a1 + 17);
    *(_DWORD *)buf = 67241985;
    *(_DWORD *)&buf[4] = v58;
    *(_WORD *)&buf[8] = 2049;
    *(_QWORD *)&buf[10] = v59;
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v60;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = v61;
    *(_WORD *)&buf[38] = 1026;
    *(_DWORD *)&buf[40] = v62;
    *(_WORD *)&buf[44] = 1026;
    *(_DWORD *)&buf[46] = v63;
    *(_WORD *)&buf[50] = 1026;
    *(_DWORD *)&buf[52] = v64;
    *(_WORD *)&buf[56] = 1026;
    *(_DWORD *)&buf[58] = v65;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "CLGMTPS,readDaemonSettings,enabled,%{public}d,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,clearPersistentStore,%{public}d,additionalConfigs,%{public}d,batteryLevel,%{public}d,mapsBuildingTileStyleToUse,%{public}d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v66 = *a1;
    v67 = *((_QWORD *)a1 + 1);
    v68 = *((_QWORD *)a1 + 2);
    v69 = *((_QWORD *)a1 + 3);
    v70 = a1[33];
    v71 = *((_QWORD *)a1 + 7);
    v72 = *((_DWORD *)a1 + 1);
    v73 = *((_DWORD *)a1 + 17);
    *(_DWORD *)v88 = 67241985;
    *(_DWORD *)&v88[4] = v66;
    *(_WORD *)&v88[8] = 2049;
    *(_QWORD *)&v88[10] = v67;
    *(_WORD *)&v88[18] = 2049;
    *(_QWORD *)&v88[20] = v68;
    v89 = 2050;
    v90 = v69;
    v91 = 1026;
    v92 = v70;
    v93 = 1026;
    v94 = v71;
    v95 = 1026;
    v96 = v72;
    v97 = 1026;
    v98 = v73;
    LODWORD(v79) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,readDaemonSettings,enabled,%{public}d,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,clearPersistentStore,%{public}d,additionalConfigs,%{public}d,batteryLevel,%{public}d,mapsBuildingTileStyleToUse,%{public}d", v88, v79);
    v75 = (char *)v74;
    sub_100512490("Generic", 1, 0, 2, "void CLGeoMapTilesPreloaderSettings::readDaemonSettings()", "%s\n", v74);
    if (v75 != buf)
      free(v75);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
}

void sub_1013B7810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a49 < 0)
    operator delete(a44);
  _Unwind_Resume(exception_object);
}

void sub_1013B9F14(_Unwind_Exception *a1)
{
  sub_10187E514((uint64_t)&STACK[0x278]);
  _Unwind_Resume(a1);
}

void sub_1013B9FFC(uint64_t a1)
{
  uint64_t **v1;
  NSObject *v2;
  NSObject *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _WORD v7[8];
  uint8_t buf[4];

  v1 = (uint64_t **)(a1 + 8);
  *(_DWORD *)buf = 4;
  if (sub_10017BFFC(a1 + 8, (int *)buf))
  {
    *(_DWORD *)buf = 4;
    sub_1013D0C84(v1, (int *)buf);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGMTPS,tourist coarse location erased", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v7[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,tourist coarse location erased", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRoutineManagerInfo::eraseTouristLOIs()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  *(_DWORD *)buf = 6;
  if (sub_10017BFFC((uint64_t)v1, (int *)buf))
  {
    *(_DWORD *)buf = 6;
    sub_1013D0C84(v1, (int *)buf);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGMTPS,tourist signalEnv coarse location erased", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v7[0] = 0;
      LODWORD(v6) = 2;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,tourist signalEnv coarse location erased", v7, v6);
      sub_100512490("Generic", 1, 0, 2, "void CLRoutineManagerInfo::eraseTouristLOIs()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

BOOL sub_1013BA304(double *a1)
{
  return !sub_10011CE64(*a1, a1[1]) && sub_10011CE88(*a1, a1[1]);
}

BOOL sub_1013BA344(uint64_t a1)
{
  NSObject *v1;
  _BOOL8 result;
  const char *v3;
  double v4;
  NSObject *v5;
  uint8_t *v6;
  __int128 v7;
  uint8_t buf[4];
  double v9;

  if (*(double *)(a1 + 108) >= 0.0)
  {
    v4 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 108));
    if (v4 <= 43200.0)
      return 1;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLGMTPS,user location is too old,dT,%{public}.1lf", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LODWORD(v7) = 134349056;
      *(double *)((char *)&v7 + 4) = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,user location is too old,dT,%{public}.1lf", &v7, 12, v7);
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v1 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLGMTPS,user location not available", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(v7) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,user location not available", &v7, 2, v7);
LABEL_21:
      v6 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::isUserLocationGood() const", "%s\n", v3);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1013BA5F4(uint64_t **a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  NSObject *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v25;
  int v26;
  uint64_t **v27;
  __int16 v28;
  _DWORD v29[2];
  __int16 v30;
  uint64_t *v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  uint64_t *v35;

  v27 = a1;
  v4 = a1 + 12;
  ((void (*)(uint64_t **))(*a1)[2])(a1);
  v28 = 256;
  *(_DWORD *)buf = 3;
  if (sub_10017BFFC((uint64_t)v4, (int *)buf))
  {
    v26 = 3;
    v5 = sub_1013D0CFC(a2, &v26);
    v7 = (uint64_t)a1[12];
    if ((uint64_t **)v7 != a1 + 13)
    {
      v8 = v5;
      v9 = v6;
      do
      {
        if (*(_DWORD *)(v7 + 32) == 3)
        {
          if (v8 == v9)
          {
LABEL_17:
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021B3298);
            v14 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              v15 = *(_DWORD *)(v7 + 32);
              v16 = a1[14];
              *(_DWORD *)buf = 67240448;
              v33 = v15;
              v34 = 2050;
              v35 = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLGMTPS,element erased for type,%{public}d,size,%{public}ld", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021B3298);
              v20 = *(_DWORD *)(v7 + 32);
              v21 = a1[14];
              v29[0] = 67240448;
              v29[1] = v20;
              v30 = 2050;
              v31 = v21;
              LODWORD(v25) = 18;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,element erased for type,%{public}d,size,%{public}ld", v29, v25);
              v23 = (uint8_t *)v22;
              sub_100512490("Generic", 1, 0, 2, "void CLPersistentStoreData::clearStaleNPLOIDataInPersistentStoreObject(CoarseCoordinateMultiMap &)", "%s\n", v22);
              if (v23 != buf)
                free(v23);
            }
            v17 = sub_1013D16E4(v4, v7);
          }
          else
          {
            v10 = v8;
            while (*((_DWORD *)v10 + 8) != 3
                 || sub_10011CE64(*(double *)(v7 + 64), *(double *)(v7 + 72))
                 || sub_10011CE64(*((double *)v10 + 8), *((double *)v10 + 9))
                 || !sub_100512A74(*(double *)(v7 + 64), *(double *)(v7 + 72), *((double *)v10 + 8), *((double *)v10 + 9), 0.0000001))
            {
              v11 = (uint64_t *)v10[1];
              if (v11)
              {
                do
                {
                  v12 = v11;
                  v11 = (uint64_t *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  v12 = (uint64_t *)v10[2];
                  v13 = *v12 == (_QWORD)v10;
                  v10 = v12;
                }
                while (!v13);
              }
              v10 = v12;
              if (v12 == v9)
                goto LABEL_17;
            }
            v19 = *(uint64_t **)(v7 + 8);
            if (v19)
            {
              do
              {
                v17 = v19;
                v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v17 = *(uint64_t **)(v7 + 16);
                v13 = *v17 == v7;
                v7 = (uint64_t)v17;
              }
              while (!v13);
            }
          }
        }
        else
        {
          v18 = *(uint64_t **)(v7 + 8);
          if (v18)
          {
            do
            {
              v17 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v17 = *(uint64_t **)(v7 + 16);
              v13 = *v17 == v7;
              v7 = (uint64_t)v17;
            }
            while (!v13);
          }
        }
        v7 = (uint64_t)v17;
      }
      while (v17 != (uint64_t *)(a1 + 13));
    }
  }
  return ((uint64_t (*)(uint64_t **))(*a1)[3])(a1);
}

void sub_1013BA964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013BA99C@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 6)
    v2 = "Unknown";
  else
    v2 = off_1021B33C0[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t *sub_1013BA9C8(uint64_t a1, unsigned int a2, double *a3, int a4)
{
  unsigned int v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  __int128 v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  char *v27;
  char *v28;
  uint8_t *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint8_t *v40;
  char *v41;
  unsigned int v43;
  int v44;
  _QWORD v45[3];
  uint8_t v46[16];
  __int128 v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD *v50[2];
  _QWORD **v51;
  _QWORD *v52[2];
  uint8_t buf[8];
  __int16 v54;
  uint64_t v55;
  char v56;
  _QWORD *v57[3];
  _QWORD *v58[195];

  v6 = a2;
  v43 = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v8 = *(uint64_t **)(a1 + 96);
  v9 = (uint64_t *)(a1 + 104);
  if (v8 == (uint64_t *)(a1 + 104))
  {
LABEL_14:
    if (a4)
    {
      v49 = v50;
      v50[0] = 0;
      v52[0] = 0;
      v52[1] = 0;
      v50[1] = 0;
      v51 = v52;
      v13 = *((_OWORD *)a3 + 1);
      *(_OWORD *)v46 = *(_OWORD *)a3;
      v47 = v13;
      v48 = *((_OWORD *)a3 + 2);
      sub_1013D0800((uint64_t)buf, &v43, (__int128 *)v46);
      v14 = sub_1013D172C((uint64_t **)(a1 + 96), (uint64_t)buf);
      sub_100008848((uint64_t)v58, v58[1]);
      sub_100008848((uint64_t)v57, v57[1]);
      if (v9 == v14)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v18 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v19 = *(_QWORD *)(a1 + 112);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v43;
          v54 = 2050;
          v55 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to inserted for type,%{public}d,size,%{public}ld", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v36 = *(_QWORD *)(a1 + 112);
          v44 = 67240448;
          LODWORD(v45[0]) = v43;
          WORD2(v45[0]) = 2050;
          *(_QWORD *)((char *)v45 + 6) = v36;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,unable to inserted for type,%{public}d,size,%{public}ld", &v44, 18);
          v38 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 0, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
        v17 = 0;
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v15 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          v16 = *(_QWORD *)(a1 + 112);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v43;
          v54 = 2050;
          v55 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLGMTPS,new element inserted for type,%{public}d,size,%{public}ld", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v33 = *(_QWORD *)(a1 + 112);
          v44 = 67240448;
          LODWORD(v45[0]) = v43;
          WORD2(v45[0]) = 2050;
          *(_QWORD *)((char *)v45 + 6) = v33;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,new element inserted for type,%{public}d,size,%{public}ld", &v44, 18);
          v35 = (uint8_t *)v34;
          sub_100512490("Generic", 1, 0, 2, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        v17 = v14 + 5;
      }
      sub_100008848((uint64_t)&v51, v52[0]);
      sub_100008848((uint64_t)&v49, v50[0]);
    }
    else
    {
      v17 = 0;
    }
    goto LABEL_64;
  }
  while (1)
  {
    if (*((_DWORD *)v8 + 8) != v6)
      goto LABEL_8;
    if (v6 <= 5 && ((1 << v6) & 0x27) != 0)
    {
LABEL_22:
      v17 = v8 + 5;
      goto LABEL_64;
    }
    if (sub_10011CE64(*((double *)v8 + 8), *((double *)v8 + 9)))
      break;
    if (sub_100512A74(a3[3], a3[4], *((double *)v8 + 8), *((double *)v8 + 9), 0.0000001))
      goto LABEL_22;
    v6 = v43;
    if ((v43 & 0xFFFFFFFD) == 4)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v22 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v23 = v43 - 4 > 2 ? "Unknown" : off_1021B33A8[v43 - 4];
        sub_1015A2E04(buf, v23);
        v29 = v56 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v46 = 136446210;
        *(_QWORD *)&v46[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "CLGMTPS,using recycled tourist entry as location data did not match,%{public}s", v46, 0xCu);
        if (v56 < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v39 = qword_1022A00D8;
        sub_1013BA99C(v43, v46);
        if ((SBYTE7(v47) & 0x80u) == 0)
          v40 = v46;
        else
          v40 = *(uint8_t **)v46;
        v44 = 136446210;
        v45[0] = v40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 1, "CLGMTPS,using recycled tourist entry as location data did not match,%{public}s", &v44, 12);
        v28 = v41;
        if (SBYTE7(v47) < 0)
          operator delete(*(void **)v46);
        sub_100512490("Generic", 1, 0, 2, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v28);
LABEL_81:
        if (v28 != (char *)buf)
          free(v28);
        goto LABEL_63;
      }
      goto LABEL_63;
    }
LABEL_8:
    v10 = (uint64_t *)v8[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (uint64_t *)v8[2];
        v12 = *v11 == (_QWORD)v8;
        v8 = v11;
      }
      while (!v12);
    }
    v8 = v11;
    if (v11 == v9)
      goto LABEL_14;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v20 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v21 = v43 > 6 ? "Unknown" : off_1021B33C0[v43];
    sub_1015A2E04(buf, v21);
    v24 = v56 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v46 = 136446210;
    *(_QWORD *)&v46[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLGMTPS,null island in stored section data for type,%{public}s", v46, 0xCu);
    if (v56 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v25 = qword_1022A00D8;
    sub_1013BA99C(v43, v46);
    if ((SBYTE7(v47) & 0x80u) == 0)
      v26 = v46;
    else
      v26 = *(uint8_t **)v46;
    v44 = 136446210;
    v45[0] = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 16, "CLGMTPS,null island in stored section data for type,%{public}s", &v44, 12);
    v28 = v27;
    if (SBYTE7(v47) < 0)
      operator delete(*(void **)v46);
    sub_100512490("Generic", 1, 0, 0, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v28);
    goto LABEL_81;
  }
LABEL_63:
  v17 = v8 + 5;
  sub_1013CEC18((uint64_t)(v8 + 5));
  v30 = *(_OWORD *)a3;
  v31 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(v8 + 7) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(v8 + 9) = v31;
  *(_OWORD *)(v8 + 5) = v30;
LABEL_64:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v17;
}

void sub_1013BB26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1013BB2D8(uint64_t a1, double *a2)
{
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  _BOOL4 v12;

  result = sub_1013BA344(a1);
  if (result)
  {
    if (*(_DWORD *)(a1 + 200) == 2 || !sub_1013D0510((double *)a1, a2))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v5 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_DWORD *)(a1 + 200) == 2;
        *(_DWORD *)buf = 67240192;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLGMTPS,user location is far from LOI or is tourist,%{public}d", buf, 8u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v7 = *(_DWORD *)(a1 + 200) == 2;
        v10[0] = 67240192;
        v10[1] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,user location is far from LOI or is tourist,%{public}d", v10, 8);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::isUserLocal(const CLCoarseLocationData &) const", "%s\n", v8);
        if (v9 != buf)
          free(v9);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1013BB4CC(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  double v9;
  double v10;
  int v11;
  unsigned int v12;
  double v13;
  int v14;
  double v15;
  int v16;
  double v17;
  NSObject *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  NSObject *v27;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  CFAbsoluteTime Current;
  _QWORD *v33;
  pthread_mutex_t *v34;
  __int16 v35;
  int v36;
  _QWORD v37[3];
  uint8_t buf[4];
  _QWORD v39[203];

  v33 = a1;
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v35 = 256;
  Current = CFAbsoluteTimeGetCurrent();
  v8 = (_QWORD *)a1[12];
  v9 = 86400.0;
  if (v8 == a1 + 13)
  {
LABEL_37:
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v27 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)v39 = v9;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLGMTPS,getTimeToNextRefresh,dT,%{public}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v36 = 134349056;
      *(double *)v37 = v9;
      LODWORD(v31) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,getTimeToNextRefresh,dT,%{public}.1lf", &v36, v31);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "int CLPersistentStoreData::getTimeToNextRefresh(const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, const BOOL, const BOOL)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    goto LABEL_42;
  }
  v10 = -1.0;
  do
  {
    v11 = *((_DWORD *)v8 + 8);
    if (a4)
    {
      if (v11 != 6)
        goto LABEL_23;
    }
    else if (v11 == 6)
    {
      goto LABEL_23;
    }
    v12 = v11 & 0xFFFFFFFD;
    if (a3)
    {
      if (v12 != 4)
        goto LABEL_23;
    }
    else if (v12 == 4)
    {
      goto LABEL_23;
    }
    v13 = dbl_101CA13C0[(v11 - 5) < 2];
    v14 = *(_DWORD *)(a2 + 12 * v11 + 64);
    if (v14 >= 1)
    {
      v15 = sub_1013D0908((uint64_t)(v8 + 5), v8 + 11, &Current, (int)((double)v14 / v13 + 0.5) * (int)((double)v14 / v13 + 0.5));
      if (v15 > v10)
        v10 = v15;
      v11 = *((_DWORD *)v8 + 8);
    }
    v16 = *(_DWORD *)(a2 + 12 * v11 + 68);
    if (v16 >= 1)
    {
      v17 = sub_1013D0908((uint64_t)(v8 + 5), v8 + 14, &Current, (int)((double)v16 / v13 + 0.5) * (int)((double)v16 / v13 + 0.5));
      if (v17 > v10)
        v10 = v17;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v19 = *((_DWORD *)v8 + 8);
      *(_DWORD *)buf = 67240448;
      LODWORD(v39[0]) = v19;
      WORD2(v39[0]) = 2050;
      *(double *)((char *)v39 + 6) = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLGMTPS,getTimeToNextRefresh,type,%{public}d,dT,%{public}.1lf", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v23 = *((_DWORD *)v8 + 8);
      v36 = 67240448;
      LODWORD(v37[0]) = v23;
      WORD2(v37[0]) = 2050;
      *(double *)((char *)v37 + 6) = v10;
      LODWORD(v31) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,getTimeToNextRefresh,type,%{public}d,dT,%{public}.1lf", &v36, v31);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "int CLPersistentStoreData::getTimeToNextRefresh(const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, const BOOL, const BOOL)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
LABEL_23:
    v20 = (_QWORD *)v8[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v8[2];
        v22 = *v21 == (_QWORD)v8;
        v8 = v21;
      }
      while (!v22);
    }
    v8 = v21;
  }
  while (v21 != a1 + 13);
  if (v10 < 0.0)
    goto LABEL_37;
  v26 = (double)*(int *)(a2 + 16) - v10;
  if (v26 < 0.0)
  {
    v9 = 7200.0;
    goto LABEL_37;
  }
  v9 = v26 + 301.0;
LABEL_42:
  if (HIBYTE(v35))
  {
    if ((_BYTE)v35)
      pthread_mutex_unlock(v34);
    else
      (*(void (**)(_QWORD *))(*v33 + 24))(v33);
  }
  return (int)v9;
}

void sub_1013BB9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013BBD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1013BBD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[8];
  char v11;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1013BBE24;
  v10[3] = &unk_1021543F8;
  v11 = *(_BYTE *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10[4] = a3;
  v10[5] = v8;
  v10[6] = a2;
  v10[7] = v7;
  return objc_msgSend(v6, "async:", v10);
}

id sub_1013BBE24(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint8_t *v14;
  double v15;
  void *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  id v21;
  id v22;
  id v23;
  NSObject *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint8_t *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  int v50;
  double v51;
  uint8_t *v52;
  uint64_t v53;
  __int128 v54;
  uint8_t buf[4];
  unsigned int v56;
  __int16 v57;
  _BYTE v58[10];
  int v59;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (v2 == 2)
    {
      v3 = 0;
      v4 = 2;
    }
    else if (v2 == 1)
    {
      v3 = 0;
      v4 = 1;
    }
    else
    {
      v3 = 0;
      v4 = 7;
    }
  }
  else
  {
    v4 = 0;
    v3 = 1;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    v16 = *(void **)(a1 + 48);
    if (v16)
    {
      if (objc_msgSend(v16, "count"))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v17 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          v18 = objc_msgSend(*(id *)(a1 + 48), "count");
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(unsigned __int8 *)(a1 + 64);
          *(_DWORD *)buf = 67240704;
          v56 = v18;
          v57 = 1026;
          *(_DWORD *)v58 = v19;
          *(_WORD *)&v58[4] = 1026;
          *(_DWORD *)&v58[6] = v20;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLGMTPS,received routineManagerCallBack,count,%{public}d,for type,%{public}d,isSecondTry,%{public}d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v38 = qword_1022A00D8;
          v39 = objc_msgSend(*(id *)(a1 + 48), "count");
          v40 = *(_QWORD *)(a1 + 56);
          v41 = *(unsigned __int8 *)(a1 + 64);
          LODWORD(v53) = 67240704;
          HIDWORD(v53) = v39;
          LOWORD(v54) = 1026;
          *(_DWORD *)((char *)&v54 + 2) = v40;
          WORD3(v54) = 1026;
          DWORD2(v54) = v41;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 1, "CLGMTPS,received routineManagerCallBack,count,%{public}d,for type,%{public}d,isSecondTry,%{public}d", &v53, 20);
          v43 = (uint8_t *)v42;
          sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n", v42);
          if (v43 != buf)
            free(v43);
        }
        objc_msgSend(*(id *)(a1 + 40), "logRTLocationOfInterest:type:", *(_QWORD *)(a1 + 48), CFSTR("loisReceived"));
        v21 = objc_msgSend(*(id *)(a1 + 48), "sortedArrayUsingSelector:", "recentCompare:");
        objc_msgSend(*(id *)(a1 + 40), "logRTLocationOfInterest:type:", v21, CFSTR("loisSorted"));
        v22 = objc_msgSend(v21, "lastObject");
        if (v22)
        {
          v23 = v22;
          if (objc_msgSend(v22, "type") == *(id *)(a1 + 56))
            return objc_msgSend(*(id *)(a1 + 40), "computeCoarseLocationAndStore:", v23);
        }
        return objc_msgSend(*(id *)(a1 + 40), "fetchCoarseLocationForNextLOI:", v4);
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v35 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v36 = *(_QWORD *)(a1 + 56);
        v37 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)buf = 67240448;
        v56 = v36;
        v57 = 1026;
        *(_DWORD *)v58 = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "CLGMTPS,received zero entries in return when fetching LOIs for type,%{public}d,isSecondTry,%{public}d,requesting next", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return objc_msgSend(*(id *)(a1 + 40), "fetchCoarseLocationForNextLOI:", v4);
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v49 = *(_QWORD *)(a1 + 56);
      v50 = *(unsigned __int8 *)(a1 + 64);
      LODWORD(v53) = 67240448;
      HIDWORD(v53) = v49;
      LOWORD(v54) = 1026;
      *(_DWORD *)((char *)&v54 + 2) = v50;
      v51 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,received zero entries in return when fetching LOIs for type,%{public}d,isSecondTry,%{public}d,requesting next", &v53, 14);
      v30 = v52;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n", v51);
LABEL_40:
      if (v30 != buf)
        free(v30);
      return objc_msgSend(*(id *)(a1 + 40), "fetchCoarseLocationForNextLOI:", v4);
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a1 + 56);
      v27 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240448;
      v56 = v26;
      v57 = 1026;
      *(_DWORD *)v58 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLGMTPS,received nil in return when fetching LOIs for type,%{public}d,isSecondTry,%{public}d,requesting next", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 0))
      return objc_msgSend(*(id *)(a1 + 40), "fetchCoarseLocationForNextLOI:", v4);
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v28 = *(_QWORD *)(a1 + 56);
    v29 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v53) = 67240448;
    HIDWORD(v53) = v28;
    LOWORD(v54) = 1026;
    *(_DWORD *)((char *)&v54 + 2) = v29;
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,received nil in return when fetching LOIs for type,%{public}d,isSecondTry,%{public}d,requesting next", &v53, 14, v53, v54);
LABEL_39:
    v30 = v14;
    sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n", v15);
    goto LABEL_40;
  }
  v5 = v3 ^ 1;
  if (*(_BYTE *)(a1 + 64))
    v5 = 1;
  if ((v5 & 1) != 0 || (v6 = *(_QWORD *)(a1 + 40) + 368, *(_DWORD *)buf = 0, sub_10017BFFC(v6, (int *)buf)))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240707;
      v56 = v8;
      v57 = 2113;
      *(_QWORD *)v58 = v9;
      *(_WORD *)&v58[8] = 1026;
      v59 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGMTPS,received error when fetching LOIs for type,%{public}d,error,%{private}@,isSecondTry,%{public}d,requesting next", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return objc_msgSend(*(id *)(a1 + 40), "fetchCoarseLocationForNextLOI:", v4);
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v53) = 67240707;
    HIDWORD(v53) = v11;
    LOWORD(v54) = 2113;
    *(_QWORD *)((char *)&v54 + 2) = v12;
    WORD5(v54) = 1026;
    HIDWORD(v54) = v13;
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,received error when fetching LOIs for type,%{public}d,error,%{private}@,isSecondTry,%{public}d,requesting next", &v53, 24, v53, v54);
    goto LABEL_39;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v31 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 32);
    v34 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240707;
    v56 = v32;
    v57 = 2113;
    *(_QWORD *)v58 = v33;
    *(_WORD *)&v58[8] = 1026;
    v59 = v34;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "CLGMTPS,received error when fetching LOIs for type,%{public}d,error,%{private}@,isSecondTry,%{public}d,trying again for home LOI", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(_QWORD *)(a1 + 32);
    v46 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v53) = 67240707;
    HIDWORD(v53) = v44;
    LOWORD(v54) = 2113;
    *(_QWORD *)((char *)&v54 + 2) = v45;
    WORD5(v54) = 1026;
    HIDWORD(v54) = v46;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,received error when fetching LOIs for type,%{public}d,error,%{private}@,isSecondTry,%{public}d,trying again for home LOI", &v53, 24);
    v48 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
  return objc_msgSend(*(id *)(a1 + 40), "fetchLOIForType:isSecondTry:", 0, 1);
}

BOOL sub_1013BC9AC(uint64_t a1)
{
  _BOOL4 v3;
  double Current;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;

  if (*(double *)(a1 + 248) < 0.0)
    return 1;
  *(_DWORD *)buf = 3;
  v3 = sub_10017BFFC(a1 + 8, (int *)buf) == 0;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 248);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v6 = dbl_101CA13D0[v3];
  v7 = vabdd_f64(Current, v5);
  v8 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 248);
    *(_DWORD *)buf = 134349568;
    v19 = v9;
    v20 = 2050;
    v21 = v7;
    v22 = 2050;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLGMTPS,shouldQueryNPLOI,fNPLOIQueryTime,%{public}.1lf,dT,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v10 = *(_QWORD *)(a1 + 248);
    v12 = 134349568;
    v13 = v10;
    v14 = 2050;
    v15 = v7;
    v16 = 2050;
    v17 = v6;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,shouldQueryNPLOI,fNPLOIQueryTime,%{public}.1lf,dT,%{public}.1lf,threshold,%{public}.1lf", &v12, 32);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::shouldQueryNPLOI() const", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  return v7 > v6;
}

id sub_1013BCBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[7];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1013BCCCC;
  v8[3] = &unk_1021B3130;
  v8[4] = a3;
  v8[5] = a2;
  v8[6] = *(_QWORD *)(a1 + 32);
  v16 = *(_OWORD *)(a1 + 152);
  v17 = *(_OWORD *)(a1 + 168);
  v18 = *(_OWORD *)(a1 + 184);
  v19 = *(_DWORD *)(a1 + 200);
  v12 = *(_OWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 104);
  v14 = *(_OWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 72);
  return objc_msgSend(v6, "async:", v8);
}

void sub_1013BCCCC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t **v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  _BYTE *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  NSObject *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  id obj;
  uint64_t v83;
  _OWORD v84[10];
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[10];
  int v91;
  int v92;
  _BYTE v93[10];
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  uint8_t v102[128];
  uint8_t buf[4];
  _BYTE v104[10];
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;

  v1 = a1;
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(v1 + 32);
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)v104 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLGMTPS,NPLOI,received error when fetching,%{private}@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v79 = *(_QWORD *)(v1 + 32);
    v92 = 138477827;
    *(_QWORD *)v93 = v79;
    v65 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,NPLOI,received error when fetching,%{private}@", &v92, 12);
  }
  else
  {
    v4 = *(void **)(a1 + 40);
    if (v4)
    {
      v83 = v1;
      if (!objc_msgSend(v4, "count"))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v66 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "CLGMTPS,NPLOI,received zero entries in return when fetching", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          LOWORD(v92) = 0;
          v80 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,NPLOI,received zero entries in return when fetching", &v92, 2);
          sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v80);
          if (v80 != (char *)buf)
            free(v80);
        }
        v67 = *(_BYTE **)(v1 + 48);
        if (v67[144])
        {
          v68 = *(_OWORD *)(v1 + 168);
          v69 = *(_OWORD *)(v1 + 200);
          v90[8] = *(_OWORD *)(v1 + 184);
          v90[9] = v69;
          v91 = *(_DWORD *)(v1 + 216);
          v70 = *(_OWORD *)(v1 + 104);
          v71 = *(_OWORD *)(v1 + 136);
          v90[4] = *(_OWORD *)(v1 + 120);
          v90[5] = v71;
          v90[6] = *(_OWORD *)(v1 + 152);
          v90[7] = v68;
          v72 = *(_OWORD *)(v1 + 72);
          v90[0] = *(_OWORD *)(v1 + 56);
          v90[1] = v72;
          v90[2] = *(_OWORD *)(v1 + 88);
          v90[3] = v70;
          objc_msgSend(v67, "addFakeNPLOIDataForTesting:", v90);
        }
        return;
      }
      v5 = (uint64_t **)(*(_QWORD *)(v1 + 48) + 368);
      *(_DWORD *)buf = 3;
      sub_1013D0C84(v5, (int *)buf);
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      obj = *(id *)(v1 + 40);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v102, 16);
      if (!v6)
        return;
      v7 = v6;
      v8 = 0;
      v9 = v1 + 56;
      v10 = *(_QWORD *)v87;
      v11 = &qword_1022A0000;
LABEL_12:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v87 != v10)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v12);
        objc_msgSend(v13, "confidence");
        if (v14 >= 0.99)
        {
          v17 = v10;
          v18 = *(_QWORD *)(v1 + 48) + 368;
          *(_DWORD *)buf = 3;
          v19 = sub_10017BFFC(v18, (int *)buf);
          if (v19 >= 0xA)
          {
            v73 = v19;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021B3298);
            v74 = v11[27];
            if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
            {
              v75 = objc_msgSend(*(id *)(v1 + 40), "count");
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)v104 = v73;
              *(_WORD *)&v104[8] = 2050;
              v105 = 10;
              LOWORD(v106) = 1026;
              *(_DWORD *)((char *)&v106 + 2) = v75;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "CLGMTPS,NPLOI,currentSize,%{public}ld,is more than max allowed,%{public}ld,newTotalCount,%{public}d", buf, 0x1Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021B3298);
              v76 = qword_1022A00D8;
              v77 = objc_msgSend(*(id *)(v83 + 40), "count");
              v92 = 134349568;
              *(_QWORD *)v93 = v73;
              *(_WORD *)&v93[8] = 2050;
              v94 = 10;
              LOWORD(v95) = 1026;
              *(_DWORD *)((char *)&v95 + 2) = v77;
              LODWORD(v81) = 28;
              v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 1, "CLGMTPS,NPLOI,currentSize,%{public}ld,is more than max allowed,%{public}ld,newTotalCount,%{public}d", &v92, v81);
              sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v78);
              if (v78 != (char *)buf)
                goto LABEL_70;
            }
            return;
          }
          v20 = *(void **)(v1 + 48);
          objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
          v22 = v21;
          objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude");
          v24 = v23;
          objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "altitude");
          v26 = v25;
          objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "horizontalUncertainty");
          v28 = v27;
          objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "verticalUncertainty");
          v30 = v29;
          v31 = objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "referenceFrame");
          v32 = *(_OWORD *)(v9 + 144);
          v84[8] = *(_OWORD *)(v9 + 128);
          v84[9] = v32;
          v85 = *(_DWORD *)(v9 + 160);
          v33 = *(_OWORD *)(v9 + 80);
          v84[4] = *(_OWORD *)(v9 + 64);
          v84[5] = v33;
          v34 = *(_OWORD *)(v9 + 112);
          v84[6] = *(_OWORD *)(v9 + 96);
          v84[7] = v34;
          v35 = *(_OWORD *)(v9 + 16);
          v84[0] = *(_OWORD *)v9;
          v84[1] = v35;
          v36 = *(_OWORD *)(v9 + 48);
          v84[2] = *(_OWORD *)(v9 + 32);
          v84[3] = v36;
          objc_msgSend(v20, "computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:", 3, v31, v84, v8, v22, v24, v26, v28, v30);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v37 = v11[27];
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            v38 = objc_msgSend(*(id *)(v1 + 40), "count");
            v39 = objc_msgSend(v13, "modeOfTransportation");
            v40 = objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "type");
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
            v42 = v41;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude");
            v44 = v43;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "horizontalUncertainty");
            v46 = v45;
            objc_msgSend(v13, "confidence");
            *(_DWORD *)buf = 67241729;
            *(_DWORD *)v104 = v38;
            *(_WORD *)&v104[4] = 1026;
            *(_DWORD *)&v104[6] = v39;
            v1 = v83;
            LOWORD(v105) = 1026;
            *(_DWORD *)((char *)&v105 + 2) = v40;
            v11 = &qword_1022A0000;
            HIWORD(v105) = 2049;
            v106 = v42;
            v107 = 2049;
            v108 = v44;
            v109 = 2050;
            v110 = v46;
            v111 = 2050;
            v112 = v47;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLGMTPS,NPLOI,callback,total,%{public}d,transportMode,%{public}d,type,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,confidence,%{public}.1lf", buf, 0x3Cu);
          }
          v10 = v17;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021B3298);
            v51 = v11[27];
            v52 = objc_msgSend(*(id *)(v1 + 40), "count");
            v53 = objc_msgSend(v13, "modeOfTransportation");
            v54 = objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "type");
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
            v56 = v55;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude");
            v58 = v57;
            objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "horizontalUncertainty");
            v60 = v59;
            objc_msgSend(v13, "confidence");
            v92 = 67241729;
            *(_DWORD *)v93 = v52;
            *(_WORD *)&v93[4] = 1026;
            *(_DWORD *)&v93[6] = v53;
            LOWORD(v94) = 1026;
            *(_DWORD *)((char *)&v94 + 2) = v54;
            HIWORD(v94) = 2049;
            v95 = v56;
            v96 = 2049;
            v97 = v58;
            v98 = 2050;
            v99 = v60;
            v100 = 2050;
            v101 = v61;
            LODWORD(v81) = 60;
            v62 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "CLGMTPS,NPLOI,callback,total,%{public}d,transportMode,%{public}d,type,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,confidence,%{public}.1lf", &v92, v81);
            sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v62);
            if (v62 != (char *)buf)
              free(v62);
            v11 = &qword_1022A0000;
            v10 = v17;
            v1 = v83;
          }
          v8 = (v8 + 1);
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v15 = v11[27];
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v13, "confidence");
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v104 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLGMTPS,low NPLOI confidence,%{public}.2lf,skipped", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021B3298);
            v48 = v11[27];
            objc_msgSend(v13, "confidence");
            v92 = 134349056;
            *(_QWORD *)v93 = v49;
            LODWORD(v81) = 12;
            v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 1, "CLGMTPS,low NPLOI confidence,%{public}.2lf,skipped", &v92, v81);
            sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v50);
            if (v50 != (char *)buf)
              free(v50);
          }
          v1 = v83;
        }
        if (v7 == (id)++v12)
        {
          v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v102, 16);
          v7 = v63;
          if (v63)
            goto LABEL_12;
          return;
        }
      }
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v64 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "CLGMTPS,NPLOI,received nil in return when fetching", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    LOWORD(v92) = 0;
    v65 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,NPLOI,received nil in return when fetching", &v92, 2);
  }
  v78 = (char *)v65;
  sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v65);
  if (v78 != (char *)buf)
LABEL_70:
    free(v78);
}

double sub_1013BD8D0(uint64_t a1)
{
  if (sub_100182290(a1 + 32) && *(double *)(a1 + 108) >= 0.0)
    return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 108));
  else
    return -1.0;
}

void sub_1013BDC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_10187E514((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_1013BE01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_1013BE0C0(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  double v14;
  uint8_t *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;

  if (a3 || (a2 & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v11 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v12 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v12 = (_QWORD *)*v12;
      *(_DWORD *)buf = 136446466;
      v21 = v12;
      v22 = 2114;
      v23 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLGMTPS,TrackRun,Failed to remove subscription for,%{public}s,%{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v13 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v13 = (_QWORD *)*v13;
      v16 = 136446466;
      v17 = v13;
      v18 = 2114;
      v19 = a3;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,TrackRun,Failed to remove subscription for,%{public}s,%{public}@", &v16, 22);
      v10 = v15;
      sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService removeTrackRunSubscriptionForType:nploiIndex:]_block_invoke", "%s\n", v14);
      goto LABEL_28;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      v6 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136446210;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLGMTPS,TrackRun,Successfully removed subscription for,%{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v7 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v7 = (_QWORD *)*v7;
      v16 = 136446210;
      v17 = v7;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,TrackRun,Successfully removed subscription for,%{public}s", &v16, 12);
      v10 = v9;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService removeTrackRunSubscriptionForType:nploiIndex:]_block_invoke", "%s\n", v8);
LABEL_28:
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1013BE8BC(uint64_t a1, void *a2)
{
  int *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFAbsoluteTime Current;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  NSObject *v32;
  uint64_t **v33;
  uint64_t **v34;
  NSObject *v35;
  _BOOL4 v36;
  _BOOL4 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  int v42;
  void *v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  id *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint8_t *v67;
  int v68;
  const char *v69;
  uint8_t *v70;
  const char *v71;
  uint8_t *v72;
  const char *v73;
  uint8_t *v74;
  uint64_t v75;
  _OWORD v76[10];
  int v77;
  int v78;
  _BOOL4 v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  long double v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  uint8_t buf[8];
  _BYTE v95[32];
  uint64_t v96;
  _BYTE v97[10];
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;

  v4 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 3)
    sub_1013D0C84((uint64_t **)(*(_QWORD *)(a1 + 32) + 368), v4);
  v5 = (double *)(*(_QWORD *)(a1 + 32) + 224);
  v6 = *(double *)(a1 + 40);
  v7 = *(double *)(a1 + 48);
  objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
  v9 = v8;
  objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
  v11 = sub_10011E634(v5, v6, v7, v9, v10, 0.0);
  objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
  v13 = v12;
  objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
  v15 = v14;
  Current = CFAbsoluteTimeGetCurrent();
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 368);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v95 = v13;
  *(_QWORD *)&v95[8] = v15;
  *(long double *)&v95[16] = v11;
  *(_QWORD *)&v95[24] = v17;
  v96 = v18;
  *(CFAbsoluteTime *)v97 = Current;
  sub_1013D1224(v19, (int *)buf);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v20 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    v21 = *(_DWORD *)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 40);
    v22 = *(_QWORD *)(a1 + 48);
    objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
    v25 = v24;
    objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
    v27 = v26;
    v28 = sub_10017BFFC(*(_QWORD *)(a1 + 32) + 368, v4);
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384);
    *(_DWORD *)buf = 67241985;
    *(_DWORD *)&buf[4] = v21;
    *(_WORD *)v95 = 2049;
    *(_QWORD *)&v95[2] = v23;
    *(_WORD *)&v95[10] = 2049;
    *(_QWORD *)&v95[12] = v22;
    *(_WORD *)&v95[20] = 2049;
    *(_QWORD *)&v95[22] = v25;
    *(_WORD *)&v95[30] = 2049;
    v96 = v27;
    *(_WORD *)v97 = 2050;
    *(long double *)&v97[2] = v11;
    v98 = 2050;
    v99 = v28;
    v100 = 2050;
    v101 = v29;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "CLGMTPS,stored coarse location for type,%{public}d,orig,%{private}.7lf,%{private}.7lf,coarse,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,sizeForType,%{public}ld,totalSize,%{public}ld", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v56 = qword_1022A00D8;
    v57 = *(_DWORD *)(a1 + 56);
    v59 = *(_QWORD *)(a1 + 40);
    v58 = *(_QWORD *)(a1 + 48);
    objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
    v61 = v60;
    objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
    v63 = v62;
    v64 = sub_10017BFFC(*(_QWORD *)(a1 + 32) + 368, v4);
    v65 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384);
    v78 = 67241985;
    v79 = v57;
    v80 = 2049;
    v81 = v59;
    v82 = 2049;
    v83 = v58;
    v84 = 2049;
    v85 = v61;
    v86 = 2049;
    v87 = v63;
    v88 = 2050;
    v89 = v11;
    v90 = 2050;
    v91 = v64;
    v92 = 2050;
    v93 = v65;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 1, "CLGMTPS,stored coarse location for type,%{public}d,orig,%{private}.7lf,%{private}.7lf,coarse,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,sizeForType,%{public}ld,totalSize,%{public}ld", &v78, 78);
    v67 = (uint8_t *)v66;
    sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v66);
    if (v67 != buf)
      free(v67);
  }
  if (sub_1013BF2BC(a1 + 60) && !*v4)
  {
    v30 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 368);
    *(_DWORD *)buf = 5;
    sub_1013D0C84(v30, (int *)buf);
    v31 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 368);
    *(_DWORD *)buf = 5;
    *(_QWORD *)v95 = v13;
    *(_QWORD *)&v95[8] = v15;
    *(long double *)&v95[16] = v11;
    *(_QWORD *)&v95[24] = v17;
    v96 = v18;
    *(CFAbsoluteTime *)v97 = Current;
    sub_1013D1224(v31, (int *)buf);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v32 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "CLGMTPS,stored coarse location for SE", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(v78) = 0;
      LODWORD(v75) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,stored coarse location for SE", &v78, v75);
      v74 = (uint8_t *)v73;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
  }
  if (sub_1013BF300(a1 + 60) && *v4 == 4)
  {
    v33 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 368);
    *(_DWORD *)buf = 6;
    sub_1013D0C84(v33, (int *)buf);
    v34 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 368);
    *(_DWORD *)buf = 6;
    *(_QWORD *)v95 = v13;
    *(_QWORD *)&v95[8] = v15;
    *(long double *)&v95[16] = v11;
    *(_QWORD *)&v95[24] = v17;
    v96 = v18;
    *(CFAbsoluteTime *)v97 = Current;
    sub_1013D1224(v34, (int *)buf);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v35 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "CLGMTPS,stored coarse location for Tourist SE", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(v78) = 0;
      LODWORD(v75) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,stored coarse location for Tourist SE", &v78, v75);
      v72 = (uint8_t *)v71;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v71);
      if (v72 != buf)
        free(v72);
    }
  }
  if (sub_1008A7FBC())
    v36 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 168) != 0;
  else
    v36 = 0;
  sub_1001E4804(buf);
  LOBYTE(v78) = 0;
  if (sub_1001E4874(*(uint64_t *)buf, "EnableTrackRunPrecaching", (BOOL *)&v78))
    v37 = (_BYTE)v78 != 0;
  else
    v37 = v36;
  v38 = *(std::__shared_weak_count **)v95;
  if (*(_QWORD *)v95)
  {
    v39 = (unint64_t *)(*(_QWORD *)v95 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v41 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    v42 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 168);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v37;
    *(_WORD *)v95 = 1026;
    *(_DWORD *)&v95[2] = v42;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRun,EnableTrackRunPrecaching,%{public}d,fIsTrackPrecachingEnabled,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v68 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 168);
    v78 = 67240448;
    v79 = v37;
    v80 = 1026;
    LODWORD(v81) = v68;
    LODWORD(v75) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGMTPS,TrackRun,EnableTrackRunPrecaching,%{public}d,fIsTrackPrecachingEnabled,%{public}d", &v78, v75);
    v70 = (uint8_t *)v69;
    sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v69);
    if (v70 != buf)
      free(v70);
  }
  if (v37)
  {
    v43 = *(void **)(a1 + 32);
    v44 = *(unsigned int *)(a1 + 56);
    objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
    v46 = v45;
    objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
    v48 = v47;
    v49 = *(_OWORD *)(a1 + 204);
    v76[8] = *(_OWORD *)(a1 + 188);
    v76[9] = v49;
    v77 = *(_DWORD *)(a1 + 220);
    v50 = *(_OWORD *)(a1 + 140);
    v76[4] = *(_OWORD *)(a1 + 124);
    v76[5] = v50;
    v51 = *(_OWORD *)(a1 + 172);
    v76[6] = *(_OWORD *)(a1 + 156);
    v76[7] = v51;
    v52 = *(_OWORD *)(a1 + 76);
    v76[0] = *(_OWORD *)(a1 + 60);
    v76[1] = v52;
    v53 = *(_OWORD *)(a1 + 108);
    v76[2] = *(_OWORD *)(a1 + 92);
    v76[3] = v53;
    objc_msgSend(v43, "addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:", v44, v76, *(unsigned int *)(a1 + 224), v46, v48);
  }
  if (*v4 <= 2)
    objc_msgSend(*(id *)(a1 + 32), "fetchCoarseLocationForNextLOI:");
  v54 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v54 + 688))
  {
    objc_msgSend((id)v54, "setNewCriteria:", *(unsigned int *)(v54 + 348));
    v54 = *(_QWORD *)(a1 + 32);
  }
  v55 = *(id **)(v54 + 800);
  if (v55)
    sub_100D823A8(v55);
}

void sub_1013BF2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_100261F44((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_1013BF2BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 5))
    return *(unsigned __int8 *)(a1 + 6) != 0;
  if (*(_BYTE *)(a1 + 6))
    return 1;
  sub_100197040();
  return sub_1001AA9A8() == 115;
}

uint64_t sub_1013BF300(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 7))
    return *(unsigned __int8 *)(a1 + 8) != 0;
  if (*(_BYTE *)(a1 + 8))
    return 1;
  sub_100197040();
  return sub_1001AA9A8() == 115;
}

void sub_1013BFAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013BFBA0(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  double v14;
  uint8_t *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;

  if (a3 || (a2 & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v11 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v12 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v12 = (_QWORD *)*v12;
      *(_DWORD *)buf = 136446466;
      v21 = v12;
      v22 = 2114;
      v23 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLGMTPS,TrackRun,Subscription failed for,%{public}s,%{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v13 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v13 = (_QWORD *)*v13;
      v16 = 136446466;
      v17 = v13;
      v18 = 2114;
      v19 = a3;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,TrackRun,Subscription failed for,%{public}s,%{public}@", &v16, 22);
      v10 = v15;
      sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:]_block_invoke", "%s\n", v14);
      goto LABEL_28;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136446210;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRun,Subscription successfully added for,%{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v7 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v7 = (_QWORD *)*v7;
      v16 = 136446210;
      v17 = v7;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGMTPS,TrackRun,Subscription successfully added for,%{public}s", &v16, 12);
      v10 = v9;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:]_block_invoke", "%s\n", v8);
LABEL_28:
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1013C030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_10011A5A8(&a32);
  _Unwind_Resume(a1);
}

void sub_1013C2188(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x310], 8);
  sub_10187E514((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_1013C2240(uint64_t a1, int a2, void *a3)
{
  void *v3;
  uint64_t *v6;
  uint64_t *v7;
  NSObject *v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *i;
  int v20;
  double v21;
  uint64_t **v22;
  uint64_t **v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  int v28;
  double Current;
  double v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  _xpc_activity_s *v41;
  int v42;
  int v43;
  _DWORD *v44;
  NSObject *v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  xpc_activity_state_t state;
  uint64_t v51;
  xpc_activity_state_t v52;
  const char *v53;
  void **v54;
  int v55;
  double v56;
  double v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  void *v89[2];
  char v90;
  _DWORD *v91;
  _BYTE __p[12];
  __int16 v93;
  _BYTE v94[20];
  __int16 v95;
  _BOOL4 v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  double v120;
  __int16 v121;
  uint64_t *v122;
  _BYTE buf[12];
  __int16 v124;
  _BYTE v125[20];
  __int16 v126;
  _BOOL4 v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  double v151;
  __int16 v152;
  uint64_t *v153;

  v3 = a3;
  v6 = &qword_1022A0000;
  v7 = &qword_1022A0000;
  if (a3)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349571;
      *(_QWORD *)&buf[4] = objc_msgSend(v3, "code");
      v124 = 2114;
      *(_QWORD *)v125 = objc_msgSend(v3, "domain");
      *(_WORD *)&v125[8] = 2113;
      *(_QWORD *)&v125[10] = objc_msgSend(v3, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Warning,CLMM,CLGMTPS,preloadTiles reported error,%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v68 = qword_1022A00D8;
      *(_DWORD *)__p = 134349571;
      *(_QWORD *)&__p[4] = objc_msgSend(v3, "code");
      v93 = 2114;
      *(_QWORD *)v94 = objc_msgSend(v3, "domain");
      *(_WORD *)&v94[8] = 2113;
      *(_QWORD *)&v94[10] = objc_msgSend(v3, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 16, "#Warning,CLMM,CLGMTPS,preloadTiles reported error,%{public}lld (%{public}@) \"%{private}@\"", __p, 32);
      v70 = (char *)v69;
      sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
  }
  v10 = (int *)(a1 + 72);
  v9 = *(_DWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 32) + 616;
  v12 = *(unsigned __int8 *)(a1 + 84);
  v13 = a2 > 0 && v3 == 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 648);
  if (v13)
    ++v14;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 648) = v14;
  v13 = v12 == 0;
  v15 = 48;
  if (v13)
    v15 = 40;
  *(_QWORD *)(v11 + v15) += a2;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672);
  if ((v9 & 0xFFFFFFFD) == 4)
    ++v16;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672) = v16;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 680);
  if (v9 == 3)
    ++v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 680) = v17;
  v18 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 728);
  for (i = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 736); i; i = (uint64_t *)*i)
  {
    v20 = *((_DWORD *)i + 8);
    if (v9 >= v20)
    {
      if (v20 >= v9)
        goto LABEL_24;
      ++i;
    }
  }
  *(_QWORD *)buf = a1 + 72;
  sub_100041CE0(v18, (int *)(a1 + 72), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = 0;
LABEL_24:
  v21 = (sub_1001FCBB4() - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (a2 > 0)
  {
    v22 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 728);
    *(_QWORD *)buf = a1 + 72;
    v23 = sub_100041CE0(v22, (int *)(a1 + 72), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *((double *)v23 + 5) = v21 + *((double *)v23 + 5);
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v24 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    v25 = *v10;
    if (v25 > 6)
      v26 = "Unknown";
    else
      v26 = off_1021B33C0[v25];
    sub_1015A2E04(__p, v26);
    v83 = v3;
    v87 = a2;
    if (v94[9] >= 0)
      v27 = __p;
    else
      v27 = *(_BYTE **)__p;
    v28 = *(_DWORD *)(a1 + 76);
    Current = CFAbsoluteTimeGetCurrent();
    v30 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v31 = *(unsigned __int8 *)(a1 + 84);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v34 = *(_DWORD *)(v32 + 56);
    v33 = *(_DWORD *)(v32 + 60);
    v35 = *(_DWORD *)(v32 + 52);
    v37 = *(_QWORD *)(v32 + 64);
    v36 = *(_QWORD *)(v32 + 72);
    v38 = *(_QWORD *)(a1 + 32);
    v72 = *(_QWORD *)(v38 + 648);
    v73 = *(_QWORD *)(v38 + 656);
    v75 = v36;
    v77 = *(_QWORD *)(v38 + 664);
    v79 = *(_QWORD *)(v38 + 672);
    v81 = *(_QWORD *)(v38 + 680);
    v89[0] = (void *)(a1 + 72);
    v39 = sub_100041CE0((uint64_t **)(v38 + 728), (int *)(a1 + 72), (uint64_t)&unk_101B9EB60, (_DWORD **)v89)[5];
    *(_DWORD *)buf = 136450563;
    *(_QWORD *)&buf[4] = v27;
    v124 = 1026;
    *(_DWORD *)v125 = v28;
    *(_WORD *)&v125[4] = 2050;
    *(_QWORD *)&v125[6] = vabdd_f64(Current, v30);
    *(_WORD *)&v125[14] = 1026;
    *(_DWORD *)&v125[16] = v87;
    v126 = 1026;
    v127 = v83 != 0;
    v128 = 1026;
    v129 = v31;
    v130 = 1026;
    v131 = v33;
    v132 = 1026;
    v133 = v35;
    v134 = 1026;
    v135 = v34;
    v136 = 2049;
    v137 = v37;
    v138 = 2049;
    v139 = v75;
    v140 = 2050;
    v141 = v72;
    v142 = 2050;
    v143 = v73;
    v144 = 2050;
    v145 = v77;
    v146 = 2050;
    v147 = v79;
    v148 = 2050;
    v149 = v81;
    v150 = 2050;
    v151 = v21;
    v152 = 2050;
    v153 = v39;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "CLGMTPS,preloadTiles returned,type,%{public}s,section,%{public}d,after,%{public}.1lf,s,tileCount,%{public}d,error,%{public}d,building,%{public}d,spiral,%{public}d,rowcol,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,successfulCount,%{public}ld,totalRoad,%{public}ld,totalBuilding,%{public}ld,totalTouristSections,%{public}ld,totalNPLOISections,%{public}ld,timeTakenToDownloadMS,%{public}.3lf,actualDownloadInMS,%{public}.3lf", buf, 0x9Au);
    if ((v94[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v7 = &qword_1022A0000;
    v6 = &qword_1022A0000;
    v3 = v83;
    a2 = v87;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v85 = qword_1022A00D8;
    sub_1013BA99C(*(_DWORD *)(a1 + 72), v89);
    v88 = a2;
    if (v90 >= 0)
      v54 = v89;
    else
      v54 = (void **)v89[0];
    v55 = *(_DWORD *)(a1 + 76);
    v56 = CFAbsoluteTimeGetCurrent();
    v57 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v58 = *(unsigned __int8 *)(a1 + 84);
    v59 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v61 = *(_DWORD *)(v59 + 56);
    v60 = *(_DWORD *)(v59 + 60);
    v62 = *(_DWORD *)(v59 + 52);
    v63 = *(_QWORD *)(v59 + 64);
    v80 = *(_QWORD *)(v59 + 72);
    v64 = *(_QWORD *)(a1 + 32);
    v74 = *(_QWORD *)(v64 + 648);
    v76 = v63;
    v78 = *(_QWORD *)(v64 + 656);
    v82 = *(_QWORD *)(v64 + 664);
    v84 = *(_QWORD *)(v64 + 672);
    v86 = *(_QWORD *)(v64 + 680);
    v91 = (_DWORD *)(a1 + 72);
    v65 = sub_100041CE0((uint64_t **)(v64 + 728), v10, (uint64_t)&unk_101B9EB60, &v91)[5];
    *(_DWORD *)__p = 136450563;
    *(_QWORD *)&__p[4] = v54;
    v93 = 1026;
    *(_DWORD *)v94 = v55;
    *(_WORD *)&v94[4] = 2050;
    *(_QWORD *)&v94[6] = vabdd_f64(v56, v57);
    *(_WORD *)&v94[14] = 1026;
    *(_DWORD *)&v94[16] = v88;
    v95 = 1026;
    v96 = v3 != 0;
    v97 = 1026;
    v98 = v58;
    v99 = 1026;
    v100 = v60;
    v101 = 1026;
    v102 = v62;
    v103 = 1026;
    v104 = v61;
    v105 = 2049;
    v106 = v76;
    v107 = 2049;
    v108 = v80;
    v109 = 2050;
    v110 = v74;
    v111 = 2050;
    v112 = v78;
    v113 = 2050;
    v114 = v82;
    v115 = 2050;
    v116 = v84;
    v117 = 2050;
    v118 = v86;
    v119 = 2050;
    v120 = v21;
    v121 = 2050;
    v122 = v65;
    LODWORD(v71) = 154;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, 1, "CLGMTPS,preloadTiles returned,type,%{public}s,section,%{public}d,after,%{public}.1lf,s,tileCount,%{public}d,error,%{public}d,building,%{public}d,spiral,%{public}d,rowcol,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,successfulCount,%{public}ld,totalRoad,%{public}ld,totalBuilding,%{public}ld,totalTouristSections,%{public}ld,totalNPLOISections,%{public}ld,timeTakenToDownloadMS,%{public}.3lf,actualDownloadInMS,%{public}.3lf", __p, v71);
    v67 = v66;
    if (v90 < 0)
      operator delete(v89[0]);
    sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v67);
    v7 = &qword_1022A0000;
    v6 = &qword_1022A0000;
    if (v67 != buf)
      free(v67);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 212) = 0;
  v40 = *(_QWORD **)(a1 + 32);
  v41 = (_xpc_activity_s *)v40[86];
  if (v41)
  {
    v42 = *(_DWORD *)(a1 + 76);
    if (v42 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v43 = *(_DWORD *)(a1 + 80);
      if (v43 != 1 && (!v42 || v42 % v43))
      {
        objc_msgSend(v40, "downloadTilesOnXPCFire");
        return;
      }
    }
    if (*v10 != 4)
    {
      objc_msgSend(v40, "storeDataInPersistentStore");
      v41 = *(_xpc_activity_s **)(*(_QWORD *)(a1 + 32) + 688);
    }
    if (xpc_activity_set_state(v41, 5))
    {
      v44 = *(_DWORD **)(a1 + 32);
      if (v44[88] != v44[87])
        objc_msgSend(v44, "setNewCriteria:");
      return;
    }
    if (v6[26] != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v49 = v7[27];
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(*(_QWORD *)(a1 + 32) + 688));
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = state;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "CLGMTPS,failed to mark activity as Done,XPC error,currentState,%{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v6[26] != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v51 = v7[27];
      v52 = xpc_activity_get_state(*(xpc_activity_t *)(*(_QWORD *)(a1 + 32) + 688));
      *(_DWORD *)__p = 134349056;
      *(_QWORD *)&__p[4] = v52;
      LODWORD(v71) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 16, "CLGMTPS,failed to mark activity as Done,XPC error,currentState,%{public}ld", __p, v71);
      v48 = (char *)v53;
      sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v53);
      if (v48 != buf)
LABEL_64:
        free(v48);
    }
  }
  else
  {
    if (v6[26] != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v45 = v7[27];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "CLGMTPS,failed to mark activity as Done,activity does not exist", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v6[26] != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v46 = v7[27];
      *(_WORD *)__p = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 16, "CLGMTPS,failed to mark activity as Done,activity does not exist", __p, v71);
      v48 = (char *)v47;
      sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v47);
      if (v48 != buf)
        goto LABEL_64;
    }
  }
}

void sub_1013C2D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1013C3140(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, double a7)
{
  uint64_t **result;
  uint64_t **v13;
  int v14;
  int *v15;

  result = sub_1013CED70(a1, a2, 1);
  if (result)
  {
    if (a5)
      v13 = result + 9;
    else
      v13 = result + 6;
    sub_1013CFD30((uint64_t)result, (uint64_t)v13, a6);
    v14 = sub_1013CFFA8((uint64_t)v13, a3, a4);
    v15 = &v14;
    result = sub_100041CE0(v13, &v14, (uint64_t)&unk_101B9EB60, &v15);
    *((double *)result + 5) = a7;
  }
  return result;
}

id sub_1013C3328(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  _OWORD v26[10];
  int v27;
  _OWORD v28[3];
  _DWORD v29[2];
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v4 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)buf = 67241217;
    v39 = v5;
    v40 = 1026;
    v41 = a2;
    v42 = 2049;
    v43 = v6;
    v44 = 2049;
    v45 = v7;
    v46 = 1026;
    v47 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGMTPS,preloadWithSECheck,section,%{public}d,sigEnv,%{public}d,LL,%{private}.8lf,%{private}.8lf,loiType,%{public}d", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v20 = *(_DWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 64);
    v22 = *(_QWORD *)(a1 + 72);
    v23 = *(_DWORD *)(a1 + 104);
    v29[0] = 67241217;
    v29[1] = v20;
    v30 = 1026;
    v31 = a2;
    v32 = 2049;
    v33 = v21;
    v34 = 2049;
    v35 = v22;
    v36 = 1026;
    v37 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGMTPS,preloadWithSECheck,section,%{public}d,sigEnv,%{public}d,LL,%{private}.8lf,%{private}.8lf,loiType,%{public}d", v29, 40);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService preloadTilesAPICallForSectionWithSECheck:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:]_block_invoke", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  if ((a2 - 3) > 1)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v9 = *(_OWORD *)(a1 + 64);
  v28[0] = *(_OWORD *)(a1 + 48);
  v28[1] = v9;
  v28[2] = *(_OWORD *)(a1 + 80);
  v10 = *(double *)(a1 + 96);
  v11 = *(unsigned __int8 *)(a1 + 276);
  v13 = *(unsigned int *)(a1 + 104);
  v12 = *(unsigned int *)(a1 + 108);
  v14 = *(_OWORD *)(a1 + 128);
  v26[0] = *(_OWORD *)(a1 + 112);
  v26[1] = v14;
  v15 = *(_OWORD *)(a1 + 192);
  v26[4] = *(_OWORD *)(a1 + 176);
  v26[5] = v15;
  v16 = *(_OWORD *)(a1 + 160);
  v26[2] = *(_OWORD *)(a1 + 144);
  v26[3] = v16;
  v27 = *(_DWORD *)(a1 + 272);
  v17 = *(_OWORD *)(a1 + 256);
  v26[8] = *(_OWORD *)(a1 + 240);
  v26[9] = v17;
  v18 = *(_OWORD *)(a1 + 224);
  v26[6] = *(_OWORD *)(a1 + 208);
  v26[7] = v18;
  return objc_msgSend(*(id *)(a1 + 32), "preloadTilesAPICallForSection:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:", v28, v12, v11, v13, v26, *(_QWORD *)(a1 + 40), v10);
}

void sub_1013C3D20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (uint64_t *)v1[9];
  objc_msgSend(v1, "universe");
  sub_1013C3D6C(v2);
}

void sub_1013C3D6C(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  _BOOL4 v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t *v19;
  pthread_mutex_t *v20;
  __int16 v21;
  uint8_t buf[16];
  _DWORD v23[2];

  v19 = a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  v21 = 256;
  sub_1013CE9CC((uint64_t)a1);
  v2 = a1[11];
  if (v2)
  {
    if (sub_10052A950(v2))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1[11] + 936))(a1[11]);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v3 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v4 = sub_10052A950(a1[11]);
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGMTPS,pull,persistent store refreshed,empty,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v13 = qword_1022A00D8;
        v14 = sub_10052A950(a1[11]);
        v23[0] = 67240192;
        v23[1] = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 1, "CLGMTPS,pull,persistent store refreshed,empty,%{public}d", v23, 8);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    sub_100119F3C(v18);
    if (sub_100006BB4(a1[11], "CLGeoMapTilesPreloaderService", v18))
    {
      if (!sub_10052A950((uint64_t)v18))
        sub_100525A8C((uint64_t)v18);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v5 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLGMTPS,pull,no data in persistent store in top level nvp", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_38;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(v23[0]) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,pull,no data in persistent store in top level nvp", v23, v17);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v6);
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v11 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLGMTPS,pull,no data in persistent store", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_38;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(v23[0]) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,pull,no data in persistent store", v23, v17);
      v7 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v12);
    }
    if (v7 != buf)
      free(v7);
LABEL_38:
    sub_10011A5A8(v18);
    goto LABEL_39;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v8 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLGMTPS,invalid persistent store pointer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    LOWORD(v23[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,invalid persistent store pointer", v23, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
LABEL_39:
  if (HIBYTE(v21))
  {
    if ((_BYTE)v21)
      pthread_mutex_unlock(v20);
    else
      (*(void (**)(uint64_t *))(*v19 + 24))(v19);
  }
}

void sub_1013C5CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  sub_10011A5A8(&a23);
  a23 = &a39;
  sub_100259608((void ***)&a23);
  sub_10011A5A8(&a42);
  sub_10187E514((uint64_t)&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_1013C6104(uint64_t *a1, double a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  const char *v10;
  int v11;
  NSObject *v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  void **v16;
  const char *v17;
  std::string *v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  _BOOL4 v27;
  NSObject *v28;
  void **v29;
  uint64_t *v30;
  uint64_t *v31;
  void **v32;
  const char *v33;
  std::string *v34;
  NSObject *v35;
  const char *v36;
  std::string *v37;
  void **v38;
  NSObject *v39;
  void **v40;
  void **v42;
  const char *v43;
  std::string *v44;
  uint64_t v45;
  void *__p[2];
  int64_t v47;
  _BYTE v48[16];
  uint64_t *v49;
  __int16 v50;
  double v51;
  int v52;
  void **v53;
  int v54;
  void **v55;
  std::string buf[68];

  v51 = a2;
  v49 = a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  v50 = 256;
  sub_1013CE9CC((uint64_t)a1);
  if (a1[11])
  {
    sub_100119F3C(v48);
    v3 = (uint64_t *)a1[12];
    if (v3 != a1 + 13)
    {
      while (1)
      {
        if (!(*((_DWORD *)v3 + 32) + *((_DWORD *)v3 + 26)))
          goto LABEL_28;
        v4 = *((int *)v3 + 8);
        v5 = "Unknown";
        if (v4 <= 6)
          v5 = off_1021B33C0[v4];
        sub_1015A2E04(__p, v5);
        v6 = *((_DWORD *)v3 + 8);
        v7 = v6 > 5;
        v8 = (1 << v6) & 0x27;
        v9 = v7 || v8 == 0;
        if (v9)
          goto LABEL_15;
        sub_100119F3C(&v54);
        sub_1013CF918("RoadTiles", v3 + 11, (uint64_t)&v54);
        sub_1013CF918("BuildingTiles", v3 + 14, (uint64_t)&v54);
        v10 = v47 >= 0 ? (const char *)__p : (const char *)__p[0];
        if (sub_1000CADE4((uint64_t)v48, v10, (uint64_t)&v54))
          break;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v12 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          if (v47 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to set data for type,%{public}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          if (v47 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          v52 = 136446210;
          v53 = v16;
          LODWORD(v45) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,unable to set data for type,%{public}s", &v52, v45);
          v18 = (std::string *)v17;
          sub_100512490("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
        sub_10011A5A8(&v54);
        v11 = 0;
LABEL_25:
        if (SHIBYTE(v47) < 0)
          operator delete(__p[0]);
        if (!v11)
          goto LABEL_106;
LABEL_28:
        v14 = (uint64_t *)v3[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v3[2];
            v9 = *v15 == (_QWORD)v3;
            v3 = v15;
          }
          while (!v9);
        }
        v3 = v15;
        if (v15 == a1 + 13)
          goto LABEL_42;
      }
      sub_10011A5A8(&v54);
LABEL_15:
      v11 = 1;
      goto LABEL_25;
    }
LABEL_42:
    v19 = (uint64_t *)a1[15];
    if (v19 == a1 + 16)
    {
LABEL_92:
      sub_1015A2E04(__p, "NPLOI");
      if (v47 >= 0)
        v38 = __p;
      else
        v38 = (void **)__p[0];
      if (sub_10018A4CC((uint64_t)v48, (const char *)v38, &v51))
      {
        sub_1000CADE4(a1[11], "CLGeoMapTilesPreloaderService", (uint64_t)v48);
        (*(void (**)(uint64_t))(*(_QWORD *)a1[11] + 944))(a1[11]);
        sub_100525288(a1[11]);
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v39 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v40 = __p;
          if (v47 < 0)
            v40 = (void **)__p[0];
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to set data for type,%{public}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v42 = __p;
          if (v47 < 0)
            v42 = (void **)__p[0];
          v54 = 136446210;
          v55 = v42;
          LODWORD(v45) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,unable to set data for type,%{public}s", &v54, v45);
          v44 = (std::string *)v43;
          sub_100512490("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
      }
      if (SHIBYTE(v47) < 0)
        operator delete(__p[0]);
    }
    else
    {
      while (1)
      {
        if (*((_DWORD *)v19 + 32) + *((_DWORD *)v19 + 26))
        {
          v20 = *((int *)v19 + 8);
          v21 = "Unknown";
          if (v20 <= 6)
            v21 = off_1021B33C0[v20];
          sub_1015A2E04(buf, v21);
          if (byte_10230EAFF >= 0)
            v22 = (const std::string::value_type *)&qword_10230EAE8;
          else
            v22 = (const std::string::value_type *)qword_10230EAE8;
          if (byte_10230EAFF >= 0)
            v23 = byte_10230EAFF;
          else
            v23 = unk_10230EAF0;
          v24 = std::string::append(buf, v22, v23);
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v47 = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          sub_100119F3C(&v54);
          sub_1013CF918("RoadTiles", v19 + 11, (uint64_t)&v54);
          sub_1013CF918("BuildingTiles", v19 + 14, (uint64_t)&v54);
          if (v47 >= 0)
            v26 = __p;
          else
            v26 = (void **)__p[0];
          v27 = sub_1000CADE4((uint64_t)v48, (const char *)v26, (uint64_t)&v54);
          if (!v27)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021B3298);
            v28 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
            {
              if (v47 >= 0)
                v29 = __p;
              else
                v29 = (void **)__p[0];
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to set actualDownload data for type,%{public}s", (uint8_t *)buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021B3298);
              if (v47 >= 0)
                v32 = __p;
              else
                v32 = (void **)__p[0];
              v52 = 136446210;
              v53 = v32;
              LODWORD(v45) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,unable to set actualDownload data for type,%{public}s", &v52, v45);
              v34 = (std::string *)v33;
              sub_100512490("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", v33);
              if (v34 != buf)
                free(v34);
            }
          }
          sub_10011A5A8(&v54);
          if (SHIBYTE(v47) < 0)
            operator delete(__p[0]);
          if (!v27)
            break;
        }
        v30 = (uint64_t *)v19[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (uint64_t *)v19[2];
            v9 = *v31 == (_QWORD)v19;
            v19 = v31;
          }
          while (!v9);
        }
        v19 = v31;
        if (v31 == a1 + 16)
          goto LABEL_92;
      }
    }
LABEL_106:
    sub_10011A5A8(v48);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v35 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "CLGMTPS,invalid persistent store pointer", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,invalid persistent store pointer", __p, 2);
      v37 = (std::string *)v36;
      sub_100512490("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
}

void sub_1013C6A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a18 < 0)
    operator delete(__p);
  sub_10011A5A8(&a20);
  sub_10187E514((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1013C6E10(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
    sub_100525288(v2);
  v4 = *(_QWORD **)(a1 + 104);
  v3 = (_QWORD *)(a1 + 104);
  sub_1013D06FC((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
}

uint64_t sub_1013C7010(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = *(_QWORD **)(a1 + 96);
  v2 = (_QWORD *)(a1 + 104);
  if (v1 == (_QWORD *)(a1 + 104))
    return 0;
  LODWORD(result) = 0;
  do
  {
    v4 = (_QWORD *)v1[1];
    v5 = v1;
    if (v4)
    {
      do
      {
        v6 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v5[2];
        v7 = *v6 == (_QWORD)v5;
        v5 = v6;
      }
      while (!v7);
    }
    result = (result + *((_DWORD *)v1 + 32) + *((_DWORD *)v1 + 26));
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_1013C7244(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 96);
  v3 = (_QWORD *)(a1 + 104);
  if (v2 == (_QWORD *)(a1 + 104))
    return 0;
  result = 0;
  do
  {
    if (*((_DWORD *)v2 + 8) == a2)
      result = (result + *((_DWORD *)v2 + 32) + *((_DWORD *)v2 + 26));
    v5 = (_QWORD *)v2[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v2[2];
        v7 = *v6 == (_QWORD)v2;
        v2 = v6;
      }
      while (!v7);
    }
    v2 = v6;
  }
  while (v6 != v3);
  return result;
}

void sub_1013C74B8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;

  v6 = *a2;
  sub_1001AF190((char *)v7, (__int128 *)a3);
  v21 = *(_QWORD *)(a3 + 184);
  objc_msgSend(a4, "onClientManagerNotification:data:", v6, v7);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1013C7580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1013C7CC0(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6;
  __int16 v7;
  _BYTE v8[8];
  void *__p;
  char v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  void **v14;

  v6 = *a2;
  v7 = *a3;
  sub_10031F08C(v8, (uint64_t)(a3 + 4));
  v12 = *((_QWORD *)a3 + 13);
  memset(v13, 0, 24);
  sub_10055A7B8(v13, *((_QWORD *)a3 + 14), *((_QWORD *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3));
  v13[3] = *((_QWORD *)a3 + 17);
  objc_msgSend(a4, "onWifiServiceNotification:data:", v6, &v7);
  v14 = (void **)v13;
  sub_100279AA4(&v14);
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_1013C7D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_1005B5FEC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1013C8818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013C8A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1013C8C60(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *a2;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", v4, &v6);
}

void sub_1013C9E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CA068(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v6 = *a2;
  sub_100525028(v8);
  v9 = *(_QWORD *)(a3 + 16);
  objc_msgSend(a4, "onMobileAssetNotification:data:", v6, v8);
  return sub_10011A5A8(v8);
}

void sub_1013CA0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1013CA790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1013CAD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1013CAD4C(uint64_t a1, _xpc_activity_s *a2)
{
  double Current;
  xpc_activity_state_t state;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t v22;
  NSObject *v23;
  xpc_object_t v24;
  unsigned int v25;
  int *v26;
  const char **v27;
  const char *v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  xpc_activity_state_t v89;
  int v90;
  _BYTE v91[10];
  _BYTE v92[6];
  _BYTE v93[6];
  _BYTE v94[6];
  uint64_t v95;
  _BYTE v96[6];
  _BYTE v97[6];
  __int16 v98;
  int v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  unsigned int v113;
  __int16 v114;
  unsigned int v115;
  __int16 v116;
  unsigned int v117;
  __int16 v118;
  unsigned int v119;
  __int16 v120;
  unsigned int v121;
  __int16 v122;
  unsigned int v123;
  __int16 v124;
  unsigned int v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  uint8_t buf[4];
  _BYTE v133[10];
  _BYTE v134[6];
  _BYTE v135[6];
  _BYTE v136[6];
  uint64_t v137;
  _BYTE v138[6];
  _BYTE v139[6];
  __int16 v140;
  int v141;
  __int16 v142;
  double v143;
  __int16 v144;
  double v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  unsigned int v155;
  __int16 v156;
  unsigned int v157;
  __int16 v158;
  unsigned int v159;
  __int16 v160;
  unsigned int v161;
  __int16 v162;
  unsigned int v163;
  __int16 v164;
  unsigned int v165;
  __int16 v166;
  unsigned int v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  int v173;

  Current = CFAbsoluteTimeGetCurrent();
  if (xpc_activity_get_state(a2))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688) = a2;
    state = xpc_activity_get_state(a2);
    v6 = *(_QWORD **)(a1 + 32);
    v7 = v6[78];
    if (!v7)
    {
      objc_msgSend(v6, "pullDataFromPersistentStore");
      v6 = *(_QWORD **)(a1 + 32);
      v7 = v6[78];
    }
    v6[78] = v7 + 1;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = Current - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v11 = *(double *)(v9 + 616);
      v12 = 0.0;
      v87 = *(unsigned __int8 *)(v9 + 193);
      v85 = *(unsigned __int8 *)(v9 + 192);
      v83 = *(_DWORD *)(v9 + 216);
      v81 = *(_QWORD *)(v9 + 200);
      v77 = *(_DWORD *)(v9 + 352);
      v79 = *(unsigned __int8 *)(v9 + 212);
      if (v11 >= 0.0)
      {
        v12 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(v9 + 616));
        v9 = *(_QWORD *)(a1 + 32);
      }
      v69 = *(_QWORD *)(v9 + 624);
      v71 = *(_QWORD *)(v9 + 632);
      v73 = *(_QWORD *)(v9 + 640);
      v75 = *(_QWORD *)(v9 + 648);
      v68 = objc_msgSend((id)v9, "getPersistentStoreDataCount");
      v13 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 0);
      v14 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 1);
      v15 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 2);
      v16 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 4);
      v17 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 5);
      v18 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 6);
      v19 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(v19 + 656);
      v20 = *(_QWORD *)(v19 + 664);
      LODWORD(v19) = *(_DWORD *)(v19 + 560) == 2;
      *(_DWORD *)buf = 134354944;
      *(double *)v133 = v10;
      *(_WORD *)&v133[8] = 1026;
      *(_DWORD *)v134 = v87;
      *(_WORD *)&v134[4] = 1026;
      *(_DWORD *)v135 = v85;
      *(_WORD *)&v135[4] = 1026;
      *(_DWORD *)v136 = v83;
      *(_WORD *)&v136[4] = 2050;
      v137 = v81;
      *(_WORD *)v138 = 1026;
      *(_DWORD *)&v138[2] = v79;
      *(_WORD *)v139 = 1026;
      *(_DWORD *)&v139[2] = v77;
      v140 = 1026;
      v141 = state;
      v142 = 2050;
      v143 = v11;
      v144 = 2050;
      v145 = v12;
      v146 = 2050;
      v147 = v69;
      v148 = 2050;
      v149 = v71;
      v150 = 2050;
      v151 = v73;
      v152 = 2050;
      v153 = v75;
      v154 = 1026;
      v155 = v68;
      v156 = 1026;
      v157 = v13;
      v158 = 1026;
      v159 = v14;
      v160 = 1026;
      v161 = v15;
      v162 = 1026;
      v163 = v16;
      v164 = 1026;
      v165 = v17;
      v166 = 1026;
      v167 = v18;
      v168 = 2050;
      v169 = v21;
      v170 = 2050;
      v171 = v20;
      v172 = 1026;
      v173 = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLGMTPS,XPC callback,%{public}.1lf,charging,%{public}d,wifi,%{public}d,lsSTate,%{public}d,battery,%{public}.1lf,reqInProgress,%{public}d,interval,%{public}d,activityState,%{public}d,startTime,%{public}.1lf,dT,%{public}.1lf,callBack,%{public}ld,intervalChng,%{public}ld,dwnldReq,%{public}ld,success,%{public}ld,store,%{public}d,home,%{public}d,work,%{public}d,school,%{public}d,tourist,%{public}d,signEnv,%{public}d,touristSignEnv,%{public}d,road,%{public}ld,bldg,%{public}ld,touristMode,%{public}d", buf, 0xBAu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      v89 = state;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v88 = qword_1022A00D8;
      v38 = *(_QWORD *)(a1 + 32);
      v86 = *(unsigned __int8 *)(v38 + 193);
      v84 = *(unsigned __int8 *)(v38 + 192);
      v82 = *(_DWORD *)(v38 + 216);
      v80 = *(_QWORD *)(v38 + 200);
      v78 = *(unsigned __int8 *)(v38 + 212);
      v76 = *(_DWORD *)(v38 + 352);
      v39 = Current - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v40 = *(double *)(v38 + 616);
      v41 = 0.0;
      if (v40 >= 0.0)
      {
        v41 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(v38 + 616));
        v38 = *(_QWORD *)(a1 + 32);
      }
      v42 = *(_QWORD *)(v38 + 624);
      v70 = *(_QWORD *)(v38 + 632);
      v72 = *(_QWORD *)(v38 + 640);
      v74 = *(_QWORD *)(v38 + 648);
      v43 = objc_msgSend((id)v38, "getPersistentStoreDataCount");
      v44 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 0);
      v45 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 1);
      v46 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 2);
      v47 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 4);
      v48 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 5);
      v49 = objc_msgSend(*(id *)(a1 + 32), "getPersistentStoreDataCountForType:", 6);
      v50 = *(_QWORD *)(a1 + 32);
      v52 = *(_QWORD *)(v50 + 656);
      v51 = *(_QWORD *)(v50 + 664);
      LODWORD(v50) = *(_DWORD *)(v50 + 560) == 2;
      v90 = 134354944;
      *(double *)v91 = v39;
      *(_WORD *)&v91[8] = 1026;
      *(_DWORD *)v92 = v86;
      *(_WORD *)&v92[4] = 1026;
      *(_DWORD *)v93 = v84;
      *(_WORD *)&v93[4] = 1026;
      *(_DWORD *)v94 = v82;
      *(_WORD *)&v94[4] = 2050;
      v95 = v80;
      *(_WORD *)v96 = 1026;
      *(_DWORD *)&v96[2] = v78;
      *(_WORD *)v97 = 1026;
      *(_DWORD *)&v97[2] = v76;
      v98 = 1026;
      v99 = v89;
      v100 = 2050;
      v101 = v40;
      v102 = 2050;
      v103 = v41;
      v104 = 2050;
      v105 = v42;
      v106 = 2050;
      v107 = v70;
      v108 = 2050;
      v109 = v72;
      v110 = 2050;
      v111 = v74;
      v112 = 1026;
      v113 = v43;
      v114 = 1026;
      v115 = v44;
      v116 = 1026;
      v117 = v45;
      v118 = 1026;
      v119 = v46;
      v120 = 1026;
      v121 = v47;
      v122 = 1026;
      v123 = v48;
      v124 = 1026;
      v125 = v49;
      v126 = 2050;
      v127 = v52;
      v128 = 2050;
      v129 = v51;
      v130 = 1026;
      v131 = v50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v88, 1, "CLGMTPS,XPC callback,%{public}.1lf,charging,%{public}d,wifi,%{public}d,lsSTate,%{public}d,battery,%{public}.1lf,reqInProgress,%{public}d,interval,%{public}d,activityState,%{public}d,startTime,%{public}.1lf,dT,%{public}.1lf,callBack,%{public}ld,intervalChng,%{public}ld,dwnldReq,%{public}ld,success,%{public}ld,store,%{public}d,home,%{public}d,work,%{public}d,school,%{public}d,tourist,%{public}d,signEnv,%{public}d,touristSignEnv,%{public}d,road,%{public}ld,bldg,%{public}ld,touristMode,%{public}d", &v90, 186);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService setUpRepeatingActivityToDownloadTiles]_block_invoke", "%s\n", v53);
      if (v54 != buf)
        free(v54);
      state = v89;
    }
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = Current;
    if (state == 2)
      objc_msgSend(*(id *)(a1 + 32), "downloadTilesOnXPCFire");
  }
  else
  {
    v22 = xpc_activity_copy_criteria(a2);
    if (!v22)
      v22 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, *(int *)(*(_QWORD *)(a1 + 32) + 336));
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_NETWORK_UPLOAD_SIZE, *(int *)(*(_QWORD *)(a1 + 32) + 340));
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_EXPECTED_DURATION, *(int *)(*(_QWORD *)(a1 + 32) + 344));
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 112) && sub_1000C4240())
    {
      xpc_dictionary_set_string(v22, XPC_ACTIVITY_DESIRED_MOTION_STATE, XPC_ACTIVITY_MOTION_STATE_STATIONARY);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v23 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CLGMTPS,XPC activity,Added stationary criteria", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        LOWORD(v90) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,XPC activity,Added stationary criteria", &v90, 2);
        v66 = (uint8_t *)v65;
        sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService setUpRepeatingActivityToDownloadTiles]_block_invoke", "%s\n", v65);
        if (v66 != buf)
          free(v66);
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 357))
      xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_DISK_INTENSIVE, 1);
    v24 = xpc_dictionary_create(0, 0, 0);
    v25 = objc_msgSend(*(id *)(a1 + 32), "shouldUseAggressiveSettings");
    v26 = &OBJC_IVAR___CLGeoMapTilesPreloaderService_fMinimumBatterylevel;
    xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_ALLOW_BATTERY, v25);
    if (v25)
      v26 = &OBJC_IVAR___CLGeoMapTilesPreloaderService_fMinimumBatteryLevelAggressiveMode;
    v27 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
    if (!v25)
      v27 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
    xpc_dictionary_set_string(v22, XPC_ACTIVITY_PRIORITY, *v27);
    xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, v25 != 1);
    v28 = (const char *)objc_msgSend((id)off_1022FFAD8(), "cStringUsingEncoding:", 4);
    xpc_dictionary_set_int64(v24, v28, *(int *)(*(_QWORD *)(a1 + 32) + *v26));
    xpc_dictionary_set_value(v22, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA, v24);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 356) = v25;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 352) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 348);
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_INTERVAL, *(int *)(*(_QWORD *)(a1 + 32) + 352));
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      v30 = *(_QWORD *)(a1 + 32);
      v31 = *(_DWORD *)(v30 + 352);
      v32 = *(_DWORD *)(v30 + 328);
      v33 = *(_DWORD *)(v30 + 336);
      v34 = *(_DWORD *)(v30 + 340);
      v35 = *(_DWORD *)(v30 + 344);
      v36 = *(unsigned __int8 *)(v30 + 357);
      v37 = *(unsigned __int8 *)(v30 + 112);
      LODWORD(v30) = *(unsigned __int8 *)(v30 + 356);
      *(_DWORD *)buf = 67241984;
      *(_DWORD *)v133 = v31;
      *(_WORD *)&v133[4] = 1026;
      *(_DWORD *)&v133[6] = v32;
      *(_WORD *)v134 = 1026;
      *(_DWORD *)&v134[2] = v33;
      *(_WORD *)v135 = 1026;
      *(_DWORD *)&v135[2] = v34;
      *(_WORD *)v136 = 1026;
      *(_DWORD *)&v136[2] = v35;
      LOWORD(v137) = 1026;
      *(_DWORD *)((char *)&v137 + 2) = v36;
      HIWORD(v137) = 1026;
      *(_DWORD *)v138 = v37;
      *(_WORD *)&v138[4] = 1026;
      *(_DWORD *)v139 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "CLGMTPS,Setting repeating xpcActivity with interval,%{public}d,minimumBatterylevel,%{public}d,downloadSz,%{public}d,uploadSz,%{public}d,downloadTime,%{public}d,diskIntensive,%{public}d,stationary,%{public}d,aggressive,%{public}d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v55 = *(_QWORD *)(a1 + 32);
      v56 = *(_DWORD *)(v55 + 352);
      v57 = *(_DWORD *)(v55 + 328);
      v58 = *(_DWORD *)(v55 + 336);
      v59 = *(_DWORD *)(v55 + 340);
      v60 = *(_DWORD *)(v55 + 344);
      v61 = *(unsigned __int8 *)(v55 + 357);
      v62 = *(unsigned __int8 *)(v55 + 112);
      LODWORD(v55) = *(unsigned __int8 *)(v55 + 356);
      v90 = 67241984;
      *(_DWORD *)v91 = v56;
      *(_WORD *)&v91[4] = 1026;
      *(_DWORD *)&v91[6] = v57;
      *(_WORD *)v92 = 1026;
      *(_DWORD *)&v92[2] = v58;
      *(_WORD *)v93 = 1026;
      *(_DWORD *)&v93[2] = v59;
      *(_WORD *)v94 = 1026;
      *(_DWORD *)&v94[2] = v60;
      LOWORD(v95) = 1026;
      *(_DWORD *)((char *)&v95 + 2) = v61;
      HIWORD(v95) = 1026;
      *(_DWORD *)v96 = v62;
      *(_WORD *)&v96[4] = 1026;
      *(_DWORD *)v97 = v55;
      LODWORD(v67) = 50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,Setting repeating xpcActivity with interval,%{public}d,minimumBatterylevel,%{public}d,downloadSz,%{public}d,uploadSz,%{public}d,downloadTime,%{public}d,diskIntensive,%{public}d,stationary,%{public}d,aggressive,%{public}d", &v90, v67);
      v64 = (uint8_t *)v63;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService setUpRepeatingActivityToDownloadTiles]_block_invoke", "%s\n", v63);
      if (v64 != buf)
        free(v64);
    }
    xpc_activity_set_criteria(a2, v22);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688) = a2;
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = Current;
    xpc_release(v22);
    xpc_release(v24);
  }
}

void sub_1013CC4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013CCCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CD010(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t *v4;
  uint64_t **v6;
  int v7;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t **v12;
  int v13;
  int *v14;

  v13 = a2;
  v4 = *(uint64_t **)(a1 + 128);
  if (!v4)
    return 0;
  v6 = (uint64_t **)(a1 + 120);
  while (1)
  {
    v7 = *((_DWORD *)v4 + 8);
    if (v7 <= a2)
      break;
LABEL_6:
    v4 = (uint64_t *)*v4;
    if (!v4)
      return 0;
  }
  if (v7 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  v14 = &v13;
  if (a3)
  {
    v9 = sub_1013D1854(v6, &v13, (uint64_t)&unk_101B9EB60, &v14);
    v10 = (uint64_t)(v9 + 5);
    v11 = v9 + 14;
  }
  else
  {
    v12 = sub_1013D1854(v6, &v13, (uint64_t)&unk_101B9EB60, &v14);
    v10 = (uint64_t)(v12 + 5);
    v11 = v12 + 11;
  }
  return sub_1013D087C(a4, v10, v11);
}

void sub_1013CD460(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  _BOOL4 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  NSObject *v23;
  double v24;
  NSObject *v25;
  const char *v26;
  char *v27;
  uint8_t *v28;
  uint64_t v29;
  _OWORD v30[10];
  int v31;
  int v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint8_t buf[4];
  double v46;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v6 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    LODWORD(v46) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLGMTPS,touristMode callback,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    LODWORD(v34) = 67174657;
    DWORD1(v34) = a3;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,touristMode callback,%{private}d", &v34, 8);
    sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService onLocationNotification:data:]_block_invoke", "%s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
  if (!a3)
    return;
  objc_msgSend(*(id *)(a1 + 32), "registerForMotionStateMediatorNotification");
  v7 = *(void **)(a1 + 32);
  if (!v7)
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    goto LABEL_25;
  }
  objc_msgSend(v7, "getConfigFromMobileAssets");
  if (!BYTE3(v34))
  {
LABEL_25:
    v8 = *(_QWORD *)(a1 + 32);
    goto LABEL_26;
  }
  v8 = *(_QWORD *)(a1 + 32);
  if ((v41 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(v8 + 376);
    if (!v9)
      goto LABEL_23;
    v10 = (double)(int)v41 * 0.5;
    v11 = v8 + 376;
    do
    {
      v12 = *(_DWORD *)(v9 + 32);
      v13 = v12 < 4;
      if (v12 >= 4)
        v14 = (uint64_t *)v9;
      else
        v14 = (uint64_t *)(v9 + 8);
      if (!v13)
        v11 = v9;
      v9 = *v14;
    }
    while (*v14);
    if (v11 == v8 + 376)
      goto LABEL_23;
    if (*(int *)(v11 + 32) > 4)
      goto LABEL_23;
    v15 = sub_10083AEA8(v11 + 40);
    v8 = *(_QWORD *)(a1 + 32);
    if (!v15)
      goto LABEL_23;
    v16 = sub_10011E634((double *)(v8 + 224), *(double *)(v11 + 64), *(double *)(v11 + 72), *(double *)(a2 + 4), *(double *)(a2 + 12), 0.0);
    if (v16 >= v10)
    {
      v8 = *(_QWORD *)(a1 + 32);
LABEL_23:
      v17 = *(double *)(a2 + 4);
      v18 = *(double *)(a2 + 12);
      v19 = *(double *)(a2 + 28);
      v20 = *(double *)(a2 + 20);
      v21 = *(double *)(a2 + 36);
      v22 = *(unsigned int *)(a2 + 132);
      v30[8] = v42;
      v30[9] = v43;
      v31 = v44;
      v30[4] = v38;
      v30[5] = v39;
      v30[6] = v40;
      v30[7] = v41;
      v30[0] = v34;
      v30[1] = v35;
      v30[2] = v36;
      v30[3] = v37;
      objc_msgSend((id)v8, "computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:", 4, v22, v30, 0xFFFFFFFFLL, v17, v18, v19, v20, v21);
      return;
    }
    v24 = v16;
    *(CFAbsoluteTime *)(v11 + 80) = CFAbsoluteTimeGetCurrent();
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      v46 = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLGMTPS,close to last location,%{private}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v32 = 134283521;
      v33 = v24;
      LODWORD(v29) = 12;
      v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,close to last location,%{private}.1lf", &v32, v29);
LABEL_47:
      v28 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService onLocationNotification:data:]_block_invoke", "%s\n", v26);
      if (v28 != buf)
        free(v28);
      return;
    }
    return;
  }
LABEL_26:
  sub_1013B9FFC(v8 + 360);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v23 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    LODWORD(v46) = v41;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLGMTPS,touristMode not allowed,radius,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v32 = 67174657;
    LODWORD(v33) = v41;
    LODWORD(v29) = 8;
    v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,touristMode not allowed,radius,%{private}d", &v32, v29);
    goto LABEL_47;
  }
}

id sub_1013CDCEC(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", *a2, *a3);
}

void sub_1013CE108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013CE130(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v5;
  uint64_t v6;
  uint8_t *v7;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  _BYTE v17[10];
  id v18;
  __int16 v19;
  id v20;
  uint8_t buf[4];
  _BYTE v22[10];
  id v23;
  __int16 v24;
  id v25;

  if (a4)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134284035;
      *(_QWORD *)v22 = objc_msgSend(a4, "code");
      *(_WORD *)&v22[8] = 2113;
      v23 = objc_msgSend(a4, "domain");
      v24 = 2113;
      v25 = objc_msgSend(a4, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLGMTPS,Workout query returned error,%{private}ld,domain,%{private}@,description,%{private}@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v6 = qword_1022A00D8;
      v16 = 134284035;
      *(_QWORD *)v17 = objc_msgSend(a4, "code");
      *(_WORD *)&v17[8] = 2113;
      v18 = objc_msgSend(a4, "domain");
      v19 = 2113;
      v20 = objc_msgSend(a4, "localizedDescription");
      v7 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "CLGMTPS,Workout query returned error,%{private}ld,domain,%{private}@,description,%{private}@", &v16, 32);
      sub_100512490("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchWorkoutCount:]_block_invoke", "%s\n");
LABEL_23:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 760);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 760) = objc_msgSend(a3, "count");
    if (!v9)
    {
      v13 = *(_DWORD **)(a1 + 32);
      if ((int)v13[190] >= 1 && v13[140] == 2)
        objc_msgSend(v13, "setNewCriteria:", v13[87]);
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_DWORD *)(a1 + 40);
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 760);
      *(_DWORD *)buf = 67240705;
      *(_DWORD *)v22 = v11;
      *(_WORD *)&v22[4] = 1025;
      *(_DWORD *)&v22[6] = v12;
      LOWORD(v23) = 1025;
      *(_DWORD *)((char *)&v23 + 2) = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLGMTPS,Workout query successful,workouts in past,%{public}d,days,count,%{private}d,prevCount,%{private}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v14 = *(_DWORD *)(a1 + 40);
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 760);
      v16 = 67240705;
      *(_DWORD *)v17 = v14;
      *(_WORD *)&v17[4] = 1025;
      *(_DWORD *)&v17[6] = v15;
      LOWORD(v18) = 1025;
      *(_DWORD *)((char *)&v18 + 2) = v9;
      v7 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGMTPS,Workout query successful,workouts in past,%{public}d,days,count,%{private}d,prevCount,%{private}d", &v16, 20);
      sub_100512490("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchWorkoutCount:]_block_invoke", "%s\n");
      goto LABEL_23;
    }
  }
}

void sub_1013CE8F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_100008848(v1, *v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013CE910(_QWORD *a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v2 = sub_10055D44C(a1, "CLGeoMapTilesPreloaderService", 1, 1);
  sub_1002433B8(v2 + 16);
  sub_1015A2E04(__p, "CLGMTPSPersistentDataOSTransaction");
  sub_100D82360(a1 + 7, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  a1[13] = 0;
  a1[11] = 0;
  a1[12] = a1 + 13;
  a1[17] = 0;
  a1[16] = 0;
  a1[14] = 0;
  a1[15] = a1 + 16;
  return a1;
}

void sub_1013CE99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_10055D4D0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CE9CC(uint64_t result)
{
  if (!*(_QWORD *)(result + 88))
    operator new();
  return result;
}

void sub_1013CEBEC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1013CEC18(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  v11 = 0;
  v12 = 0;
  v10 = &v11;
  v2 = (_QWORD *)(a1 + 56);
  v3 = (_QWORD *)(a1 + 48);
  sub_100008848(a1 + 48, *(_QWORD **)(a1 + 56));
  v4 = v11;
  *(v2 - 1) = &v11;
  *v2 = v4;
  v5 = v12;
  v2[1] = v12;
  if (v5)
  {
    v4[2] = v2;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
    v4 = 0;
  }
  else
  {
    *v3 = v2;
  }
  sub_100008848((uint64_t)&v10, v4);
  v11 = 0;
  v12 = 0;
  v10 = &v11;
  v7 = *(_QWORD **)(a1 + 80);
  v6 = (_QWORD *)(a1 + 80);
  sub_100008848((uint64_t)(v6 - 1), v7);
  v8 = v11;
  *(v6 - 1) = v10;
  *v6 = v8;
  v9 = v12;
  v6[1] = v12;
  if (v9)
  {
    v8[2] = v6;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
    v8 = 0;
  }
  else
  {
    *(v6 - 1) = v6;
  }
  sub_100008848((uint64_t)&v10, v8);
}

uint64_t sub_1013CED00(uint64_t a1)
{
  sub_100008848(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_100008848(a1 + 56, *(_QWORD **)(a1 + 64));
  return a1;
}

uint64_t sub_1013CED38(uint64_t a1)
{
  sub_100008848(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_100008848(a1 + 48, *(_QWORD **)(a1 + 56));
  return a1;
}

uint64_t **sub_1013CED70(uint64_t a1, int a2, int a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  __int128 v11;
  _QWORD **v12;
  _QWORD *v13[2];
  _QWORD **v14;
  _QWORD *v15[2];
  int *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD *v21[2];
  _QWORD **v22;
  _QWORD *v23[2];
  int v24;

  v24 = a2;
  v5 = (uint64_t **)(a1 + 120);
  v6 = *(uint64_t **)(a1 + 128);
  if (v6)
  {
    v7 = *(uint64_t **)(a1 + 128);
    do
    {
      v8 = *((_DWORD *)v7 + 8);
      if (v8 <= a2)
      {
        if (v8 >= a2)
          goto LABEL_14;
        ++v7;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  if (a3)
  {
    v17 = 0u;
    *(_QWORD *)&v11 = 0;
    *((_QWORD *)&v11 + 1) = 0xBFF0000000000000;
    v12 = v13;
    v13[0] = 0;
    v15[0] = 0;
    v15[1] = 0;
    v13[1] = 0;
    v14 = v15;
    LODWORD(v16) = a2;
    v18 = 0u;
    v19 = v11;
    v20 = v21;
    v21[0] = 0;
    v23[0] = 0;
    v23[1] = 0;
    v21[1] = 0;
    v22 = v23;
    sub_1013D1940((uint64_t **)(a1 + 120), (int *)&v16, (uint64_t)&v16);
    sub_100008848((uint64_t)&v22, v23[0]);
    sub_100008848((uint64_t)&v20, v21[0]);
    sub_100008848((uint64_t)&v14, v15[0]);
    sub_100008848((uint64_t)&v12, v13[0]);
    v6 = *(uint64_t **)(a1 + 128);
  }
LABEL_14:
  while (v6)
  {
    v9 = *((_DWORD *)v6 + 8);
    if (v9 <= a2)
    {
      if (v9 >= a2)
      {
        v16 = &v24;
        return sub_1013D1854(v5, &v24, (uint64_t)&unk_101B9EB60, &v16) + 5;
      }
      ++v6;
    }
    v6 = (uint64_t *)*v6;
  }
  return 0;
}

void sub_1013CEEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1013CED00((uint64_t)&a21);
  sub_1013CED38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CEEF8(const char *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  _QWORD v10[2];
  _DWORD v11[3];
  _DWORD buf[3];

  sub_100119F3C(v10);
  if (sub_100006BB4(a2, a1, v10))
  {
    if (!sub_10052A950((uint64_t)v10))
      sub_100525A8C((uint64_t)v10);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136446210;
      *(_QWORD *)&buf[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLGMTPS,%{public}s,no section data available for this key", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v11[0] = 136446210;
      *(_QWORD *)&v11[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,%{public}s,no section data available for this key", v11, 12);
      v6 = (char *)v5;
      sub_100512490("Generic", 1, 0, 2, "void readTileSectionStatusData(const char *, const CLNameValuePair &, std::map<int, double> &)", "%s\n", v5);
LABEL_19:
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136446210;
      *(_QWORD *)&buf[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLGMTPS,key does not exist,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v11[0] = 136446210;
      *(_QWORD *)&v11[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,key does not exist,%{public}s", v11, 12);
      v6 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "void readTileSectionStatusData(const char *, const CLNameValuePair &, std::map<int, double> &)", "%s\n", v8);
      goto LABEL_19;
    }
  }
  return sub_10011A5A8(v10);
}

void sub_1013CF8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a17;
  sub_100259608(&a29);
  sub_10011A5A8(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CF918(const char *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  NSObject *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _BYTE v23[16];
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  std::string v32;

  sub_100119F3C(v23);
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      std::to_string(&v32, *((_DWORD *)v6 + 8));
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v32;
      else
        v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if (!sub_10018A4CC((uint64_t)v23, (const char *)v8, v6 + 5))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v9 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v10 = *((_DWORD *)v6 + 8);
          *(_DWORD *)buf = 136446466;
          v29 = a1;
          v30 = 1026;
          v31 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLGMTPS,%{public}s,failed to set sectionStatus for section,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v14 = *((_DWORD *)v6 + 8);
          v24 = 136446466;
          v25 = a1;
          v26 = 1026;
          v27 = v14;
          LODWORD(v21) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,%{public}s,failed to set sectionStatus for section,%{public}d", &v24, v21);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "void storeTileSectionStatusData(const char *, const std::map<int, double> &, CLNameValuePair &)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != v5);
  }
  if (!sub_1000CADE4(a3, a1, (uint64_t)v23))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v29 = a1;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLGMTPS,failed to set sectiondata for tile type,%{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LODWORD(v32.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)a1;
      LODWORD(v21) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,failed to set sectiondata for tile type,%{public}s", &v32, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void storeTileSectionStatusData(const char *, const std::map<int, double> &, CLNameValuePair &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  return sub_10011A5A8(v23);
}

void sub_1013CFCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1013CFD30(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t *v6;
  double Current;
  double v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  int v27;

  v5 = (uint64_t *)(a2 + 8);
  v6 = *(uint64_t **)a2;
  Current = CFAbsoluteTimeGetCurrent();
  if (v6 != v5)
  {
    v8 = Current;
    do
    {
      if (vabdd_f64(*((double *)v6 + 5), v8) <= (double)a3)
      {
        v13 = (uint64_t *)v6[1];
        if (v13)
        {
          do
          {
            v12 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v6[2];
            v14 = *v12 == (_QWORD)v6;
            v6 = v12;
          }
          while (!v14);
        }
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v9 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(_QWORD *)(a2 + 16);
          v11 = *((_DWORD *)v6 + 8);
          *(_DWORD *)buf = 134349312;
          v25 = v10;
          v26 = 1026;
          v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLGMTPS,tileInfo erased,size,%{public}ld,key,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B3298);
          v15 = *(_QWORD *)(a2 + 16);
          v16 = *((_DWORD *)v6 + 8);
          v20 = 134349312;
          v21 = v15;
          v22 = 1026;
          v23 = v16;
          LODWORD(v19) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,tileInfo erased,size,%{public}ld,key,%{public}d", &v20, v19);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLPersistentStoreLOITypeData::eraseAllDataNotInThisTimeIntervalFromCurrentTime(std::map<int, double> &, const int)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
        v12 = sub_10008A9F0((uint64_t **)a2, v6);
        operator delete(v6);
      }
      v6 = v12;
    }
    while (v12 != v5);
  }
}

uint64_t sub_1013CFFA8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  dispatch_once_t *v9;
  int v10;
  dispatch_once_t *v11;
  uint64_t *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v18;
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  v3 = a3;
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    if ((int)a3 <= 2 * a2)
      v6 = (2 * a2);
    else
      v6 = a3;
    v7 = &qword_1022A0000;
    v8 = &qword_1022A0000;
    v9 = &qword_1022A00D0;
    do
    {
      while (1)
      {
        v10 = *((_DWORD *)v4 + 8);
        if ((int)v3 >= v10)
          break;
LABEL_9:
        v4 = (uint64_t *)*v4;
        if (!v4)
          return v3;
      }
      if (v10 < (int)v3)
      {
        ++v4;
        goto LABEL_9;
      }
      if ((_DWORD)v3 == (_DWORD)v6)
        return v6;
      v11 = v9;
      if (v7[26] != -1)
        dispatch_once(v9, &stru_1021B3298);
      v3 = (v3 + 1);
      v12 = v8;
      v13 = v8[27];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v21 = v3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGMTPS,iterated to getUniqueKey,key,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(v11, &stru_1021B3298);
        v14 = v12[27];
        v19[0] = 67240192;
        v19[1] = v3;
        LODWORD(v18) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "CLGMTPS,iterated to getUniqueKey,key,%{public}d", v19, v18);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "int getUniqueKeyForStorage(const std::map<int, double> &, const int, int)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      v4 = *(uint64_t **)(a1 + 8);
      v9 = v11;
      v7 = &qword_1022A0000;
      v8 = v12;
    }
    while (v4);
  }
  return v3;
}

uint64_t sub_1013D01F4(uint64_t a1, const std::string *a2, unsigned __int8 a3, uint64_t *a4)
{
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (__cdecl **v10)(std::basic_stringstream<char> *__hidden);
  void *__p[2];
  uint64_t v13;
  void (__cdecl **v14[3])(std::basic_stringstream<char> *__hidden);
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  sub_100512D24(v14, a2, 24);
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  while (1)
  {
    v6 = sub_1004ACBE4(v14, (uint64_t)__p, a3);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    v7 = a4[1];
    if (v7 >= a4[2])
    {
      v9 = sub_1015E796C(a4, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        sub_100115CE4((_BYTE *)a4[1], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v8 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v13;
        *(_OWORD *)v7 = v8;
      }
      v9 = v7 + 24;
      a4[1] = v7 + 24;
    }
    a4[1] = v9;
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v14
  v14[2] = v10;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  return std::ios::~ios(&v17);
}

void sub_1013D0330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_1013D0360(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1013D03F4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_1013D03F4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0xE0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1013D0474(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1013D0458(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013D0474(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_10018755C((uint64_t)(__dst + 3));
  return __dst;
}

void sub_1013D04C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1013D04E4(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

BOOL sub_1013D0510(double *a1, double *a2)
{
  _BOOL8 result;
  double v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  double v10;
  uint8_t buf[4];
  double v12;

  result = sub_1013BA344((uint64_t)a1);
  if (result)
  {
    v5 = sub_10011E634(a1 + 26, *a2, a2[1], *(double *)((char *)a1 + 36), *(double *)((char *)a1 + 44), 0.0);
    if (v5 > 320000.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v6 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLGMTPS,user location distance from LOI,%{public}.1lf", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v9 = 134349056;
        v10 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLGMTPS,user location distance from LOI,%{public}.1lf", &v9, 12);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::isCoarseLOINearUserLocation(const CLCoarseLocationData &) const", "%s\n", v7);
        if (v8 != buf)
          free(v8);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1013D06FC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1013D06FC(a1, *a2);
    sub_1013D06FC(a1, a2[1]);
    sub_100008848((uint64_t)(a2 + 14), (_QWORD *)a2[15]);
    sub_100008848((uint64_t)(a2 + 11), (_QWORD *)a2[12]);
    operator delete(a2);
  }
}

uint64_t sub_1013D0754()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_10230EB18 != -1)
    dispatch_once(&qword_10230EB18, &stru_1021B32B8);
  v0 = (uint64_t *)dlsym((void *)qword_10230EB20, "_DASCTSMinBatteryLevelKey");
  if (v0)
  {
    result = *v0;
    qword_10230EB10 = result;
  }
  else
  {
    result = qword_10230EB10;
  }
  off_1022FFAD8 = sub_1013D07CC;
  return result;
}

uint64_t sub_1013D07CC()
{
  return qword_10230EB10;
}

void sub_1013D07D8(id a1)
{
  qword_10230EB20 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DuetActivityScheduler.framework/DuetActivityScheduler", 2);
}

uint64_t sub_1013D0800(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  *(_DWORD *)a1 = *a2;
  v5 = *a3;
  v6 = a3[1];
  *(_OWORD *)(a1 + 40) = a3[2];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  sub_1013D11D0((uint64_t *)(a1 + 56), (uint64_t)(a3 + 3));
  sub_1013D11D0((uint64_t *)(a1 + 80), (uint64_t)a3 + 72);
  return a1;
}

void sub_1013D0864(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100008848(v2, *(_QWORD **)(v1 + 64));
  _Unwind_Resume(a1);
}

uint64_t sub_1013D087C(double a1, uint64_t a2, _QWORD *a3)
{
  double Current;
  double *v6;
  double *v7;
  double *v8;
  uint64_t result;
  double *v10;
  double *v11;
  BOOL v12;

  Current = CFAbsoluteTimeGetCurrent();
  v8 = (double *)*a3;
  v7 = (double *)(a3 + 1);
  v6 = v8;
  if (v8 == v7)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if (vabdd_f64(v6[5], Current) > a1)
      result = result;
    else
      result = (result + 1);
    v10 = (double *)*((_QWORD *)v6 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(double **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (double *)*((_QWORD *)v6 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v6;
        v6 = v11;
      }
      while (!v12);
    }
    v6 = v11;
  }
  while (v11 != v7);
  return result;
}

double sub_1013D0908(uint64_t a1, _QWORD *a2, double *a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  double v8;
  double v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  NSObject *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  int v19;
  uint8_t *v20;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v8 = -1.0;
    while (1)
    {
      if (*((_DWORD *)v5 + 8) >= a4)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v14 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v15 = *((_DWORD *)v5 + 8);
          *(_DWORD *)buf = 67240448;
          v30 = v15;
          v31 = 2050;
          v32 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLGMTPS,getAgeOfOldestTileInfo,skipped,section,%{public}d,dT,%{public}.1lf", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_19;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v19 = *((_DWORD *)v5 + 8);
        v23 = 67240448;
        v24 = v19;
        v25 = 2050;
        v26 = v8;
        LODWORD(v22) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,getAgeOfOldestTileInfo,skipped,section,%{public}d,dT,%{public}.1lf", &v23, v22);
      }
      else
      {
        v9 = vabdd_f64(*a3, *((double *)v5 + 5));
        if (v9 > v8)
          v8 = v9;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v10 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v11 = *((_DWORD *)v5 + 8);
          *(_DWORD *)buf = 67240704;
          v30 = v11;
          v31 = 2050;
          v32 = v9;
          v33 = 2050;
          v34 = v8;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLGMTPS,getAgeOfOldestTileInfo,road,section,%{public}d,deltaT,%{public}.1lf,dT,%{public}.1lf", buf, 0x1Cu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_19;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v12 = *((_DWORD *)v5 + 8);
        v23 = 67240704;
        v24 = v12;
        v25 = 2050;
        v26 = v9;
        v27 = 2050;
        v28 = v8;
        LODWORD(v22) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,getAgeOfOldestTileInfo,road,section,%{public}d,deltaT,%{public}.1lf,dT,%{public}.1lf", &v23, v22);
      }
      v20 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "double CLPersistentStoreLOITypeData::getAgeOfOldestTileInfo(const std::map<int, double> &, const CFAbsoluteTime &, const int) const", "%s\n", v13);
      if (v20 != buf)
        free(v20);
LABEL_19:
      v16 = (_QWORD *)v5[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v5[2];
          v18 = *v17 == (_QWORD)v5;
          v5 = v17;
        }
        while (!v18);
      }
      v5 = v17;
      if (v17 == v4)
        return v8;
    }
  }
  return -1.0;
}

uint64_t sub_1013D0C84(uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v3 = sub_1013D0CFC((uint64_t)a1, a2);
  if (v3 == v4)
    return 0;
  v5 = v3;
  v6 = v4;
  v7 = 0;
  do
  {
    v8 = sub_10008A9F0(a1, v5);
    operator delete(v5);
    ++v7;
    v5 = v8;
  }
  while (v8 != v6);
  return v7;
}

uint64_t *sub_1013D0CFC(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *result;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (uint64_t *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = *((_DWORD *)v7 + 8);
      v9 = v8 < v4;
      if (v8 >= v4)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (!v9)
        result = v7;
      v7 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32))
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = (uint64_t *)v11;
      v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

_QWORD *sub_1013D0D94@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = sub_1013D0DEC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013D0DD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013D0DEC(_QWORD *a1, char *__s)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021B32E8;
  a1[1] = 0;
  sub_1013D0EA0((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1013D0E38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013D0E4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B32E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013D0E60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B32E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1013D0E94(uint64_t a1)
{
  return sub_100D823D4(a1 + 24);
}

void sub_1013D0EA0(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_1015A2E04(__p, __s);
  sub_100D82360(a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1013D0EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013D0F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    sub_1013D06FC(a2 + 120, *(_QWORD **)(a2 + 128));
    sub_1013D06FC(a2 + 96, *(_QWORD **)(a2 + 104));
    v3 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_100D823D4(a2 + 56);
    sub_10055D4D0(a2);
    operator delete();
  }
}

uint64_t sub_1013D0F7C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1013D0FD0((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1013D0FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1013D0FD0(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (_QWORD *)result + 1;
    do
    {
      result = sub_1013D1050(v5, v6, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1013D1050(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  __int128 v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = operator new(0x58uLL);
  v7 = *(_OWORD *)(a3 + 16);
  v6[2] = *(_OWORD *)a3;
  v6[3] = v7;
  v6[4] = *(_OWORD *)(a3 + 32);
  *((_QWORD *)v6 + 10) = *(_QWORD *)(a3 + 48);
  v8 = (uint64_t **)sub_1013D10E8(a1, a2, &v10, (_DWORD *)v6 + 8);
  sub_1000145B0(a1, v10, v8, (uint64_t *)v6);
  return v6;
}

void sub_1013D10D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013D10E8(_QWORD *a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;

  v4 = a1 + 1;
  if (a1 + 1 != a2 && *((_DWORD *)a2 + 8) < *a4)
  {
    while (1)
    {
      v5 = *v4;
      a2 = v4;
      if (!*v4)
        break;
      while (1)
      {
        v4 = (_QWORD *)v5;
        if (*(_DWORD *)(v5 + 32) >= *a4)
          break;
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          goto LABEL_19;
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a1 == a2)
  {
    v8 = a2;
  }
  else
  {
    if (v6)
    {
      v7 = (_QWORD *)*a2;
      do
      {
        v8 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      v9 = a2;
      do
      {
        v8 = (_QWORD *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (v10);
    }
    if (*a4 < *((_DWORD *)v8 + 8))
    {
      while (1)
      {
        v11 = *v4;
        a2 = v4;
        if (!*v4)
          goto LABEL_20;
        while (1)
        {
          v4 = (_QWORD *)v11;
          if (*a4 < *(_DWORD *)(v11 + 32))
            break;
          v11 = *(_QWORD *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6)
  {
    *a3 = v8;
    return v8 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t *sub_1013D11D0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100342484(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1013D120C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1013D1224(uint64_t **a1, int *a2)
{
  char *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (char *)operator new(0x58uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 8) = *a2;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 2);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 6);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 10);
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

void sub_1013D12CC()
{
  operator delete();
}

_QWORD *sub_1013D12E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B3338;
  result[1] = v3;
  return result;
}

uint64_t sub_1013D1314(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B3338;
  a2[1] = v2;
  return result;
}

void sub_1013D1330(uint64_t a1, char *a2)
{
  char v3;
  uint64_t v4;
  BOOL v5;
  NSObject *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v5 = 1;
  else
    v5 = *(_BYTE *)(v4 + 168) == 0;
  if (!v5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRun,precaching went from enabled to disabled, remove all subscriptions.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGMTPS,TrackRun,precaching went from enabled to disabled, remove all subscriptions.", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLGeoMapTilesPreloaderService::registerForTrackRunEnablementNotifications::(anonymous class)::operator()(const BOOL) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    for (i = 0; i != 5; ++i)
    {
      v8 = dword_101CA1510[i];
      if ((_DWORD)v8 == 3)
      {
        v9 = 0;
        do
        {
          objc_msgSend(*(id *)(a1 + 8), "removeTrackRunSubscriptionForType:nploiIndex:", 3, v9);
          v9 = (v9 + 1);
        }
        while ((_DWORD)v9 != 10);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 8), "removeTrackRunSubscriptionForType:nploiIndex:", v8, 0xFFFFFFFFLL);
      }
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_BYTE *)(v4 + 168) = v3;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v10 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 168);
    *(_DWORD *)buf = 67109120;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRunEnablementNotification,fIsTrackPrecachingEnabled,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 168);
    v17[0] = 67109120;
    v17[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGMTPS,TrackRunEnablementNotification,fIsTrackPrecachingEnabled,%d", v17);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLGeoMapTilesPreloaderService::registerForTrackRunEnablementNotifications::(anonymous class)::operator()(const BOOL) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

uint64_t sub_1013D169C(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021B3398))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1013D16D8()
{
  return &off_1021B3398;
}

uint64_t *sub_1013D16E4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, (uint64_t *)a2);
  sub_100008848(a2 + 112, *(_QWORD **)(a2 + 120));
  sub_100008848(a2 + 88, *(_QWORD **)(a2 + 96));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_1013D172C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x88uLL);
  v5 = (_DWORD *)sub_1013D17C0((uint64_t)(v4 + 4), a2);
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*v5 >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t sub_1013D17C0(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(result + 24) = v3;
  *(_OWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  v4 = (_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 64) = v5;
  v6 = result + 64;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 72) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a2 + 56) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  else
  {
    *(_QWORD *)(result + 56) = v6;
  }
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  v8 = (_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 88) = v9;
  v10 = result + 88;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 96) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(a2 + 80) = v8;
    *v8 = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    *(_QWORD *)(result + 80) = v10;
  }
  return result;
}

uint64_t **sub_1013D1854(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x88uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0xBFF0000000000000;
    *((_QWORD *)v11 + 12) = 0;
    *((_QWORD *)v11 + 11) = v11 + 96;
    *((_QWORD *)v11 + 16) = 0;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 13) = 0;
    *((_QWORD *)v11 + 14) = v11 + 120;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1013D1940(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x88uLL);
    sub_1013D17C0((uint64_t)(v10 + 4), a3);
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_1013D19FC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA1400;
      v1[3] = unk_101CA1410;
      v1[4] = xmmword_101CA1420;
      v1[0] = xmmword_101CA13E0;
      v1[1] = unk_101CA13F0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1013D1AD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1013D1AE8()
{
  sub_1015A2E04(&qword_10230E6B0, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E6B0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E6C8, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E6C8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230E6E0, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230E6E0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E6F8, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E6F8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E710, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E710, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E728, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E728, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E740, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E740, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E758, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E758, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E770, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E770, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E788, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E788, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E7A0, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E7A0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E7B8, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E7B8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E7D0, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E7D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E7E8, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E7E8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E800, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E800, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E818, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E818, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E830, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E830, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E848, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E848, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E860, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E860, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E878, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E878, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E890, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E890, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E8A8, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E8A8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E8C0, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E8C0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E8D8, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E8D8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E8F0, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E8F0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E908, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E908, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E920, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E920, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E938, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E938, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E950, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E950, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E968, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E968, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E980, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E980, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E998, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E998, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E9B0, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E9B0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E9C8, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E9C8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E9E0, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E9E0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230E9F8, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230E9F8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EA10, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EA10, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EA28, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EA28, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EA40, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EA40, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EA58, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EA58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EA70, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EA70, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EA88, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EA88, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EAA0, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EAA0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EAB8, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EAB8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230EAD0, "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230EAD0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230EAE8, "-Downloaded");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230EAE8, (void *)&_mh_execute_header);
}

uint64_t sub_1013D2244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v20;
  int *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;

  sub_100270E34((uint64_t)v26, a3);
  sub_100270E34((uint64_t)v24, a4);
  sub_100270E34((uint64_t)v22, a5);
  sub_100D6C128(a1, a2, CFSTR("Kappa"), 1, 2, (uint64_t)v26, (uint64_t)v24, (uint64_t)v22);
  v9 = v23;
  if (v23 == v22)
  {
    v10 = 4;
    v9 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v25;
  if (v25 == v24)
  {
    v12 = 4;
    v11 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
    goto LABEL_15;
  }
  if (v27)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *(_QWORD *)a1 = off_1021B3408;
  *(_QWORD *)(a1 + 136) = -1;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_QWORD *)(a1 + 200) = 0;
  sub_100119F3C(a1 + 216);
  v20 = 0;
  v21 = &v20;
  v15 = sub_1001F97E8(a1 + 176, &v20, (uint64_t)&unk_101B9EB60, &v21);
  *(_QWORD *)((char *)v15 + 20) = -1;
  *((_BYTE *)v15 + 28) = 0;
  v20 = 1;
  v21 = &v20;
  v16 = sub_1001F97E8(a1 + 176, &v20, (uint64_t)&unk_101B9EB60, &v21);
  *(_QWORD *)((char *)v16 + 20) = -1;
  *((_BYTE *)v16 + 28) = 0;
  v20 = 2;
  v21 = &v20;
  v17 = sub_1001F97E8(a1 + 176, &v20, (uint64_t)&unk_101B9EB60, &v21);
  *(_QWORD *)((char *)v17 + 20) = -1;
  *((_BYTE *)v17 + 28) = 0;
  v20 = 3;
  v21 = &v20;
  v18 = sub_1001F97E8(a1 + 176, &v20, (uint64_t)&unk_101B9EB60, &v21);
  *(_QWORD *)((char *)v18 + 20) = -1;
  *((_BYTE *)v18 + 28) = 0;
  return a1;
}

void sub_1013D24AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  sub_10011A5A8(v3);
  sub_100067AC4(v2);
  if (*(char *)(v1 + 175) < 0)
    operator delete(*v4);
  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013D25A4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLKappaConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 216, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_1013D277C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013D2798(uint64_t a1)
{
  return sub_100D6EF24(a1, 6, a1 + 216);
}

void sub_1013D27A4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if (*(_QWORD *)(a1 + 128))
  {
    std::string::assign((std::string *)(a1 + 152), "");
    if (sub_1013D29C8(a1, *(unsigned int *)(a1 + 136), *(unsigned int *)(a1 + 140), *(unsigned __int8 *)(a1 + 144)))(*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s,readAssetSpecialized,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
      v4 = qword_1022A02A8;
      v5 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v8 = 136446210;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 1, "#CLConfig,%{public}s,readAssetSpecialized,asset unavailable,ignoring", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLKappaConfigAsset::readAssetSpecialized()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

uint64_t sub_1013D29C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL4 v8;
  uint64_t *v9;
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  std::string::size_type size;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  std::string *p_s1;
  NSObject *v19;
  id v20;
  uint64_t v21;
  id v22;
  char *v23;
  NSObject *v24;
  id v25;
  uint64_t v26;
  id v27;
  char *v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  std::string *v41;
  uint64_t v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  id v48;
  std::string *v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  std::string __s1;
  _BYTE v54[16];
  _BYTE v55[16];
  int v56;
  id v57;
  __int16 v58;
  _BYTE v59[10];
  __int16 v60;
  int v61;
  __int16 v62;
  id v63;
  uint8_t buf[4];
  id v65;
  __int16 v66;
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  id v71;

  sub_100119F3C(v55);
  sub_100119F3C(v54);
  memset(&__s1, 0, sizeof(__s1));
  if (!*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v19 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
    {
      v20 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v65 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s,Kappa,asset unavailable,ignoring", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_77;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v21 = qword_1022A02A8;
    v22 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v56 = 136446210;
    v57 = v22;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 1, "#CLConfig,%{public}s,Kappa,asset unavailable,ignoring", &v56, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v23);
    goto LABEL_34;
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 216, (uint64_t)buf);
  sub_10011A5A8(buf);
  v8 = sub_100D6D640(a1, CFSTR("general.plist"), a1 + 216);
  if ((a3 & a2) == 0xFFFFFFFF)
    goto LABEL_66;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
  v9 = &qword_1022A0000;
  v10 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
  {
    v11 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
    *(_DWORD *)buf = 136447235;
    v65 = v11;
    v66 = 1026;
    *(_DWORD *)v67 = a2;
    *(_WORD *)&v67[4] = 1026;
    *(_DWORD *)&v67[6] = a3;
    v68 = 1026;
    v69 = a4;
    v70 = 2081;
    v71 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s,finding country for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d in %{private}s", buf, 0x28u);
    v9 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v43 = qword_1022A02A8;
    v44 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v45 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"), "absoluteString"), "UTF8String");
    v56 = 136447235;
    v57 = v44;
    v58 = 1026;
    *(_DWORD *)v59 = a2;
    *(_WORD *)&v59[4] = 1026;
    *(_DWORD *)&v59[6] = a3;
    v60 = 1026;
    v61 = a4;
    v62 = 2081;
    v63 = v45;
    v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 1, "#CLConfig,%{public}s,finding country for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d in %{private}s", &v56, 40);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v46);
    if (v46 != (char *)buf)
      free(v46);
    v9 = &qword_1022A0000;
  }
  if (sub_100D6D640(a1, CFSTR("country.plist"), (uint64_t)v55))
  {
    if ((sub_100D6DE14(a1, (uint64_t)v55, a2, a3, a4, (uint64_t)v54) & 1) != 0)
    {
      if (sub_1000BCB64((uint64_t)v54, "Name", &__s1))
      {
        v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v15 = *(unsigned __int8 *)(a1 + 175);
        v16 = (char)v15;
        if ((v15 & 0x80u) != 0)
          v15 = *(_QWORD *)(a1 + 160);
        if (size == v15)
        {
          if (v16 >= 0)
            v17 = (unsigned __int8 *)(a1 + 152);
          else
            v17 = *(unsigned __int8 **)(a1 + 152);
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == *v17)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                ++v17;
                if (!--v13)
                  goto LABEL_70;
              }
              goto LABEL_65;
            }
            goto LABEL_70;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v17, __s1.__r_.__value_.__l.__size_))
          {
LABEL_70:
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
            v39 = v9[85];
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              v40 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
              v41 = &__s1;
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v41 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136446466;
              v65 = v40;
              v66 = 2082;
              *(_QWORD *)v67 = v41;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s, already handled %{public}s", buf, 0x16u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_77;
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
            v47 = v9[85];
            v48 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
            v49 = &__s1;
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v49 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            v56 = 136446466;
            v57 = v48;
            v58 = 2082;
            *(_QWORD *)v59 = v49;
            LODWORD(v50) = 22;
            v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 1, "#CLConfig,%{public}s, already handled %{public}s", &v56, v50);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v23);
            goto LABEL_34;
          }
        }
LABEL_65:
        std::string::operator=((std::string *)(a1 + 152), &__s1);
        sub_10052523C((void *)(a1 + 216), (uint64_t)v54, 1);
        goto LABEL_66;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
      v33 = v9[85];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        v34 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446978;
        v65 = v34;
        v66 = 1026;
        *(_DWORD *)v67 = a2;
        *(_WORD *)&v67[4] = 1026;
        *(_DWORD *)&v67[6] = a3;
        v68 = 1026;
        v69 = a4;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s, ignoring country without name for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x1Eu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_77;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
      v35 = v9[85];
      v36 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v56 = 136446978;
      v57 = v36;
      v58 = 1026;
      *(_DWORD *)v59 = a2;
      *(_WORD *)&v59[4] = 1026;
      *(_DWORD *)&v59[6] = a3;
      v60 = 1026;
      v61 = a4;
      LODWORD(v50) = 30;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 1, "#CLConfig,%{public}s, ignoring country without name for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", &v56, v50);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v23);
LABEL_34:
      if (v23 != (char *)buf)
        free(v23);
      goto LABEL_77;
    }
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v29 = v9[85];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v30 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446978;
      v65 = v30;
      v66 = 1026;
      *(_DWORD *)v67 = a2;
      *(_WORD *)&v67[4] = 1026;
      *(_DWORD *)&v67[6] = a3;
      v68 = 1026;
      v69 = a4;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s, no country for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
      v31 = v9[85];
      v32 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v56 = 136446978;
      v57 = v32;
      v58 = 1026;
      *(_DWORD *)v59 = a2;
      *(_WORD *)&v59[4] = 1026;
      *(_DWORD *)&v59[6] = a3;
      v60 = 1026;
      v61 = a4;
      LODWORD(v50) = 30;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "#CLConfig,%{public}s, no country for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", &v56, v50);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v28);
      goto LABEL_52;
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v24 = v9[85];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v65 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s, failed to load country", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
      v26 = v9[85];
      v27 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v56 = 136446210;
      v57 = v27;
      LODWORD(v50) = 12;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#CLConfig,%{public}s, failed to load country", &v56, v50);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v28);
LABEL_52:
      if (v28 != (char *)buf)
        free(v28);
      if (v8)
        goto LABEL_67;
LABEL_77:
      v38 = 0;
      goto LABEL_78;
    }
  }
LABEL_66:
  if (!v8)
    goto LABEL_77;
LABEL_67:
  sub_1015A2E04(__p, (char *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v37 = (void *)sub_10011A5AC(a1 + 216);
  sub_1007FA930((__int128 *)__p, v37);
  if (v52 < 0)
    operator delete(__p[0]);
  v38 = 1;
LABEL_78:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  sub_10011A5A8(v54);
  sub_10011A5A8(v55);
  return v38;
}

void sub_1013D3524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a22 < 0)
    operator delete(__p);
  sub_10011A5A8(&a23);
  sub_10011A5A8(&a25);
  _Unwind_Resume(a1);
}

void sub_1013D35D8(uint64_t a1)
{
  sub_1013D3628(a1);
  operator delete();
}

void sub_1013D35FC(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1013D3628(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B3408;
  sub_10011A5A8(a1 + 216);
  sub_100067AC4(a1 + 176);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  return sub_100D6C25C(a1);
}

float sub_1013D3670(float a1, float a2)
{
  return powf((float)(a1 / -44331.0) + 1.0, 5.2559) * a2;
}

float sub_1013D36B0(float a1, float a2)
{
  return powf((float)(a1 / -44331.0) + 1.0, -5.2559) * a2;
}

void sub_1013D36F0(float a1, float a2)
{
  powf(a1 / a2, 0.19026);
}

float sub_1013D373C(float a1, float a2)
{
  return (float)((float)(a2 / 44331.0) / 0.19026) * powf(1.0 - (float)(a1 / 44331.0), -6.2559);
}

BOOL sub_1013D3788(float a1, float a2, float a3)
{
  _BOOL8 result;
  BOOL v6;

  result = 0;
  v6 = a2 < -180.0 || a2 > 180.0 || a1 < -90.0 || a1 > 90.0;
  if (!v6 && a3 > 0.0)
    return fabsf(a1) >= 0.0000001 || fabsf(a2) >= 0.0000001;
  return result;
}

uint64_t sub_1013D37FC(uint64_t a1, __int128 *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = &off_1021B34D8;
  v11 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)v11, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(v11 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (qword_10230EB28 != -1)
    dispatch_once(&qword_10230EB28, &stru_1021B34E8);
  *(double *)(a1 + 32) = a3;
  *(double *)(a1 + 40) = a4;
  *(double *)(a1 + 48) = a5;
  *(double *)(a1 + 56) = a6;
  return a1;
}

void sub_1013D38A8(id a1)
{
  operator new();
}

void sub_1013D38F8()
{
  operator delete();
}

uint64_t sub_1013D3920(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1021B34D8;
  v2 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v2;
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1013D3970(uint64_t a1)
{
  sub_1013D3920(a1);
  operator delete();
}

void sub_1013D3994(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  sqlite3_int64 *v5;
  char *v6;
  char **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _BYTE buf[40];

  v30 = 0;
  v31 = 0;
  v32 = 0;
  v2 = sub_10068878C();
  v3 = (_QWORD *)(a1 + 8);
  if (!sub_10068E594(v2, (char *)(a1 + 8), &v30))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B3518);
    v27 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      v28 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v28 = (_QWORD *)*v3;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLAvengerZoneMonitor: no zone information is found.\", \"fZoneName\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B3518);
    }
    v29 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLAvengerZoneMonitor: no zone information is found.", "{\"msg%{public}.0s\":\"CLAvengerZoneMonitor: no zone information is found.\", \"fZoneName\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    goto LABEL_41;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B3518);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v3;
    *(_WORD *)&buf[28] = 2049;
    *(_QWORD *)&buf[30] = (v31 - v30) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLAvengerZoneMonitor: polygon information is found.\", \"fZoneName\":%{private, location:escape_only}s, \"zones\":%{private}lu}", buf, 0x26u);
  }
  v5 = (sqlite3_int64 *)v30;
  v6 = v31;
  if (v30 != v31)
  {
    v7 = (char **)(a1 + 64);
    do
    {
      *(_QWORD *)&buf[32] = *v5;
      v8 = sub_10068878C();
      if (sub_10068F418(v8, v5, (double *)buf, (double *)&buf[16], (double *)&buf[8], (double *)&buf[24]))
      {
        v9 = *(_QWORD *)(a1 + 72);
        v10 = *(_QWORD *)(a1 + 80);
        if (v9 >= v10)
        {
          v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)*v7) >> 3);
          v15 = v14 + 1;
          if (v14 + 1 > 0x666666666666666)
            sub_100259694();
          v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)*v7) >> 3);
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x333333333333333)
            v17 = 0x666666666666666;
          else
            v17 = v15;
          if (v17)
            v18 = (char *)sub_100357184(a1 + 80, v17);
          else
            v18 = 0;
          v19 = &v18[40 * v14];
          v20 = *(_OWORD *)buf;
          v21 = *(_OWORD *)&buf[16];
          *((_QWORD *)v19 + 4) = *(_QWORD *)&buf[32];
          *(_OWORD *)v19 = v20;
          *((_OWORD *)v19 + 1) = v21;
          v23 = *(char **)(a1 + 64);
          v22 = *(char **)(a1 + 72);
          v24 = v19;
          if (v22 != v23)
          {
            do
            {
              v25 = *(_OWORD *)(v22 - 40);
              v26 = *(_OWORD *)(v22 - 24);
              *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v26;
              *(_OWORD *)(v24 - 40) = v25;
              v24 -= 40;
              v22 -= 40;
            }
            while (v22 != v23);
            v22 = *v7;
          }
          v13 = v19 + 40;
          *(_QWORD *)(a1 + 64) = v24;
          *(_QWORD *)(a1 + 72) = v19 + 40;
          *(_QWORD *)(a1 + 80) = &v18[40 * v17];
          if (v22)
            operator delete(v22);
        }
        else
        {
          v11 = *(_OWORD *)buf;
          v12 = *(_OWORD *)&buf[16];
          *(_QWORD *)(v9 + 32) = *(_QWORD *)&buf[32];
          *(_OWORD *)v9 = v11;
          *(_OWORD *)(v9 + 16) = v12;
          v13 = (char *)(v9 + 40);
        }
        *(_QWORD *)(a1 + 72) = v13;
      }
      ++v5;
    }
    while (v5 != (sqlite3_int64 *)v6);
LABEL_41:
    v5 = (sqlite3_int64 *)v30;
  }
  if (v5)
  {
    v31 = (char *)v5;
    operator delete(v5);
  }
}

void sub_1013D3D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1013D3DBC(uint64_t a1, double a2, double a3)
{
  _BOOL8 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  _BOOL4 v32;

  v6 = *(double *)a1 < a2 && *(double *)(a1 + 8) > a2 && *(double *)(a1 + 16) < a3 && *(double *)(a1 + 24) > a3;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B3518);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(double *)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v14[0] = 68291075;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1025;
    v18 = v8;
    v19 = 2049;
    v20 = v10;
    v21 = 2049;
    v22 = v11;
    v23 = 2049;
    v24 = v12;
    v25 = 2049;
    v26 = v9;
    v27 = 2049;
    v28 = a2;
    v29 = 2049;
    v30 = a3;
    v31 = 1025;
    v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isInside\", \"fZoneId\":%{private}d, \"minLat\":\"%{private}f\", \"maxLat\":\"%{private}f\", \"minLon\":\"%{private}f\", \"maxLon\":\"%{private}f\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"isInsize\":%{private}hhd}", (uint8_t *)v14, 0x5Au);
  }
  return v6;
}

void sub_1013D3F3C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

float sub_1013D3F68(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  sqlite3_stmt *v28;
  float v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  float v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *v36;
  sqlite3_stmt *v37;
  sqlite3_stmt *v38;
  sqlite3_stmt *v39;
  sqlite3_stmt *v40;
  sqlite3_stmt *v41;
  sqlite3_stmt *v42;
  float v43;
  sqlite3_stmt *v44;
  float v45;
  sqlite3_stmt *v46;
  float v47;
  sqlite3_stmt *v48;
  float v49;
  sqlite3_stmt *v50;
  float v51;
  sqlite3_stmt *v52;
  float result;

  v5 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)a3 = sqlite3_column_int(v5, 0);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 8) = sqlite3_column_double(v6, 1);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 16) = sqlite3_column_double(v7, 2);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 24) = sqlite3_column_int(v8, 3);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 28) = sqlite3_column_int(v9, 4);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 32) = sqlite3_column_int(v10, 5);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 36) = sqlite3_column_int(v11, 6);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 40) = sqlite3_column_double(v12, 7);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_BYTE *)(a3 + 48) = sqlite3_column_int(v13, 8);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 112) = sqlite3_column_double(v14, 9);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 120) = sqlite3_column_double(v15, 10);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 128) = sqlite3_column_double(v16, 11);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 136) = sqlite3_column_double(v17, 12);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 168) = sqlite3_column_int(v18, 13);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 172) = sqlite3_column_int(v19, 14);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 176) = sqlite3_column_int(v20, 15);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 180) = sqlite3_column_int(v21, 16);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 184) = sqlite3_column_int(v22, 17);
  v23 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 188) = sqlite3_column_int(v23, 18);
  v24 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 192) = sqlite3_column_int(v24, 19);
  v25 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 196) = sqlite3_column_int(v25, 20);
  v26 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 200) = sqlite3_column_int(v26, 21);
  v27 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 204) = sqlite3_column_int(v27, 22);
  v28 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v29 = sqlite3_column_double(v28, 23);
  *(float *)(a3 + 208) = v29;
  v30 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_BYTE *)(a3 + 212) = sqlite3_column_int(v30, 24) != 0;
  v31 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v32 = sqlite3_column_double(v31, 25);
  *(float *)(a3 + 216) = v32;
  v33 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_BYTE *)(a3 + 220) = sqlite3_column_int(v33, 26) != 0;
  v34 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(_DWORD *)(a3 + 52) = sqlite3_column_int(v34, 27);
  v35 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 56) = sqlite3_column_double(v35, 28);
  v36 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 64) = sqlite3_column_double(v36, 29);
  v37 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 72) = sqlite3_column_double(v37, 30);
  v38 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 80) = sqlite3_column_double(v38, 31);
  v39 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 88) = sqlite3_column_double(v39, 32);
  v40 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 96) = sqlite3_column_double(v40, 33);
  v41 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *(double *)(a3 + 104) = sqlite3_column_double(v41, 34);
  v42 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v43 = sqlite3_column_double(v42, 35);
  *(float *)(a3 + 144) = v43;
  v44 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v45 = sqlite3_column_double(v44, 36);
  *(float *)(a3 + 148) = v45;
  v46 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v47 = sqlite3_column_double(v46, 37);
  *(float *)(a3 + 152) = v47;
  v48 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v49 = sqlite3_column_double(v48, 38);
  *(float *)(a3 + 156) = v49;
  v50 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v51 = sqlite3_column_double(v50, 39);
  *(float *)(a3 + 160) = v51;
  v52 = (sqlite3_stmt *)sub_100026CC8(*a2);
  result = sqlite3_column_double(v52, 40);
  *(float *)(a3 + 164) = result;
  return result;
}

uint64_t sub_1013D42EC(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1013D43FC(a1, "MobilityBoutMetricsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021B3548;
  *(_QWORD *)(a1 + 72) = off_1021B3610;
  *(_QWORD *)(a1 + 528) = off_1021B3660;
  sub_100E81598((_QWORD *)(a1 + 536), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 552), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 568), 0, 0);
  *(_BYTE *)(a1 + 584) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  *(_QWORD *)(a1 + 160) = -[CLMobilityBoutMetricsRecorderCloudKitDelegate initWithBoutMetricsRecorderDb:]([CLMobilityBoutMetricsRecorderCloudKitDelegate alloc], "initWithBoutMetricsRecorderDb:", a1);
  return a1;
}

void sub_1013D43D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013D43FC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  int64x2_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021B3F40;
  *(_QWORD *)(a1 + 72) = off_1021B3FE8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B3F40;
  *(_QWORD *)(a1 + 72) = off_1021B3FE8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v13 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)(a1 + 288) = v13;
  *(int64x2_t *)(a1 + 304) = v13;
  *(int64x2_t *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1071225242;
  *(_BYTE *)(a1 + 436) = 0;
  *(_DWORD *)(a1 + 440) = 1116213084;
  *(_BYTE *)(a1 + 444) = 0;
  *(_DWORD *)(a1 + 448) = 12000;
  *(_QWORD *)(a1 + 456) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 464));
  *(_QWORD *)(a1 + 464) = &off_102138DD8;
  v14 = *(_QWORD *)(a1 + 112);
  v18 = a1 + 112;
  (*(void (**)(void))(v14 + 16))();
  v19 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v17 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  return a1;
}

void sub_1013D4800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[57] = off_102138DA8;
  sub_100427950(v27);
  sub_1013D96CC(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1013D48A4()
{
  JUMPOUT(0x1013D4884);
}

_QWORD *sub_1013D48AC(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B3FE8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B3F40;
  a1[57] = off_102138DA8;
  sub_100427950(a1 + 58);
  sub_1013D96CC(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1013D4928(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021B3548;
  a1[9] = off_1021B3610;
  a1[66] = off_1021B3660;
  v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0;
  }
  return sub_1013D48AC(a1);
}

_QWORD *sub_1013D497C(uint64_t a1)
{
  return sub_1013D4928((_QWORD *)(a1 - 72));
}

_QWORD *sub_1013D4984(uint64_t a1)
{
  return sub_1013D4928((_QWORD *)(a1 - 528));
}

void sub_1013D498C(_QWORD *a1)
{
  sub_1013D4928(a1);
  operator delete();
}

void sub_1013D49B0(uint64_t a1)
{
  sub_1013D4928((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_1013D49D8(uint64_t a1)
{
  sub_1013D4928((_QWORD *)(a1 - 528));
  operator delete();
}

void sub_1013D4A00(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  sub_10041B300(a1, a2, 0);
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021B3710);
  v3 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349056;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Wrote boutMetrics to db: startTime=%{public}.2f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B3710);
    v5 = *(_QWORD *)(a2 + 8);
    v8 = 134349056;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "Wrote boutMetrics to db: startTime=%{public}.2f", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMobility::BoutMetricsRecorderDb::addBoutMetrics(const BoutMetrics &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1013D4BB8(uint64_t a1, uint64_t a2)
{
  sub_1013D4A00((_QWORD *)(a1 - 528), a2);
}

BOOL sub_1013D4BC0(_QWORD *a1)
{
  void *v1;
  int v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v17);
  if (SHIBYTE(v18) < 0)
  {
    v1 = v17[1];
    operator delete(v17[0]);
    if (v1)
      goto LABEL_3;
  }
  else if (HIBYTE(v18))
  {
LABEL_3:
    if (sub_10008950C(a1 + 9))
    {
      sub_100263E50((uint64_t)v17);
      v5 = sub_100263F7C(&v18, (uint64_t)"SELECT * FROM ", 14);
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
      if ((v15 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v7 = v15;
      else
        v7 = (uint64_t)__p[1];
      v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
      sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? and boundaryType == ? ORDER BY rowid ASC", 80);
      if ((char)v15 < 0)
        operator delete(__p[0]);
      v9 = a1[10];
      std::stringbuf::str(__p, v19);
      if ((v15 & 0x80u) == 0)
        v10 = (char *)__p;
      else
        v10 = (char *)__p[0];
      sub_1000CDA68(v9, v10);
    }
    v2 = 2;
    return v2 != 2;
  }
  sub_101950C7C(v4);
  v13 = v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *(void **)((char *)v17
  v18 = v11;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v21);
  return v2 != 2;
}

void sub_1013D5058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a43);
  _Unwind_Resume(a1);
}

BOOL sub_1013D50C0(uint64_t a1)
{
  return sub_1013D4BC0((_QWORD *)(a1 - 528));
}

uint64_t sub_1013D50C8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1013D516C(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "MobilityBoutMetricsHistory", (const char **)&off_1021B3750, (const std::string::value_type **)&off_1022FFAE0, 0);
    *(_QWORD *)(a1 + 536) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM MobilityBoutMetricsHistory WHERE startTime >= ? ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 544) = v3;
    *(_QWORD *)(a1 + 552) = sub_10063D314(*(_QWORD *)(a1 + 80), "\t\t\tINSERT INTO MobilityBoutMetricsHistory(\t\t\t\tstartTime, endTime, stepCount, workoutType, terminationReason, numGaitMetrics, invalidGradePercentage, deviceSide, \t\t\t\twalkingSpeed, doubleSupportPercentage, stepLength, asymmetryPercentage, \t\t\t\tsegmentsRejectedByIsSwingStanceCycle, segmentsRejectedByIsNotRunning, segmentsRejectedByIsFeasibleWalkingSpeed, segmentsRejectedByIsPendular, segmentsRejectedByIsSufficientVerticalTwist, segmentsRejectedByIsCadenceConcordant, \t\t\t\twalkingSpeedRejectionStatus, doubleSupportPercentageRejectionStatus, stepLengthRejectionStatus, asymmetryPercentageRejectionStatus, userHeight, isHeightSet, userWeight, isWeightSet, \t\t\t\tboundaryType, cycleTimeMean, stepLengthEntropy, stepLengthPoincareSD1, stepLengthPoincareSD2, cycleTimeEntropy, cycleTimePoincareSD1, cycleTimePoincareSD2, stepIndexOfHarmonicityAP, stepIndexOfHarmonicityML, stepIndexOfHarmonicityVT, swingIndexOfHarmonicityAP, swingIndexOfHarmonicityML, swingIndexOfHarmonicityVT  \t\t\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 560) = v4;
    result = sub_10063D314(*(_QWORD *)(a1 + 80), "UPDATE MobilityBoutMetricsHistory SET \t\t\tstartTime = ?, endTime = ?, stepCount = ?, workoutType = ?, terminationReason = ?, numGaitMetrics = ?, invalidGradePercentage = ?, deviceSide = ?, \t\t\twalkingSpeed = ?, doubleSupportPercentage = ?, stepLength = ?, asymmetryPercentage = ?, \t\t\tsegmentsRejectedByIsSwingStanceCycle = ?, segmentsRejectedByIsNotRunning = ?, segmentsRejectedByIsFeasibleWalkingSpeed = ?, segmentsRejectedByIsPendular = ?, segmentsRejectedByIsSufficientVerticalTwist = ?, segmentsRejectedByIsCadenceConcordant = ?, \t\t\twalkingSpeedRejectionStatus = ?, doubleSupportPercentageRejectionStatus = ?, stepLengthRejectionStatus = ?, asymmetryPercentageRejectionStatus = ?, userHeight = ?, isHeightSet = ?, userWeight = ?, isWeightSet = ?, boundaryType = ?, cycleTimeMean = ?, stepLengthEntropy = ?, stepLengthPoincareSD1 = ?, stepLengthPoincareSD2 = ?, cycleTimeEntropy = ?, cycleTimePoincareSD1 = ?, cycleTimePoincareSD2 = ?, stepIndexOfHarmonicityAP = ?, stepIndexOfHarmonicityML = ?, stepIndexOfHarmonicityVT = ?, swingIndexOfHarmonicityAP = ?, swingIndexOfHarmonicityML = ?, swingIndexOfHarmonicityVT = ? \t\t\tWHERE rowid = ?");
    *(_QWORD *)(a1 + 568) = result;
    *(_QWORD *)(a1 + 576) = v5;
    *(_BYTE *)(a1 + 584) = 1;
  }
  return result;
}

BOOL sub_1013D516C(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "MobilityBoutMetricsHistory");
  if (result)
  {
    v3 = "asymmetryPercentageRejectionStatus";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "MobilityBoutMetricsHistory", (uint64_t)"asymmetryPercentageRejectionStatus", (uint64_t)&v3);
  }
  return result;
}

void sub_1013D5510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_1013D55A8(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *v36;
  sqlite3_stmt *v37;
  sqlite3_stmt *v38;
  sqlite3_stmt *v39;
  sqlite3_stmt *v40;
  sqlite3_stmt *v41;
  sqlite3_stmt *v42;
  sqlite3_stmt *v43;
  uint64_t v44;
  sqlite3_stmt *v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  _WORD v53[8];
  uint64_t v54[2];
  uint8_t buf[1640];

  if (sub_10008950C(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 584) || ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1), *(_BYTE *)(a1 + 584)))
    {
      sub_100087AF4((_QWORD *)(a1 + 552), v54);
      if (v54[0])
      {
        v4 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
        if (sub_1000890C4(v4, 1, *(double *)(a2 + 8)))
        {
          v5 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
          if (sub_1000890C4(v5, 2, *(double *)(a2 + 16)))
          {
            v6 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
            if (sub_10023C77C(v6, 3, *(_DWORD *)(a2 + 24)))
            {
              v7 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
              if (sub_1000CD75C(v7, 4, *(_DWORD *)(a2 + 28)))
              {
                v8 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                if (sub_1000CD75C(v8, 5, *(_DWORD *)(a2 + 32)))
                {
                  v9 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                  if (sub_10023C77C(v9, 6, *(_DWORD *)(a2 + 36)))
                  {
                    v10 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                    if (sub_1000890C4(v10, 7, *(double *)(a2 + 40)))
                    {
                      v11 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                      if (sub_1000CD75C(v11, 8, *(unsigned __int8 *)(a2 + 48)))
                      {
                        v12 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                        if (sub_1000890C4(v12, 9, *(double *)(a2 + 112)))
                        {
                          v13 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                          if (sub_1000890C4(v13, 10, *(double *)(a2 + 120)))
                          {
                            v14 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                            if (sub_1000890C4(v14, 11, *(double *)(a2 + 128)))
                            {
                              v15 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                              if (sub_1000890C4(v15, 12, *(double *)(a2 + 136)))
                              {
                                v16 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                if (sub_10023C77C(v16, 13, *(_DWORD *)(a2 + 168)))
                                {
                                  v17 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                  if (sub_10023C77C(v17, 14, *(_DWORD *)(a2 + 172)))
                                  {
                                    v18 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                    if (sub_10023C77C(v18, 15, *(_DWORD *)(a2 + 176)))
                                    {
                                      v19 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                      if (sub_10023C77C(v19, 16, *(_DWORD *)(a2 + 180)))
                                      {
                                        v20 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                        if (sub_10023C77C(v20, 17, *(_DWORD *)(a2 + 184)))
                                        {
                                          v21 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                          if (sub_10023C77C(v21, 18, *(_DWORD *)(a2 + 188)))
                                          {
                                            v22 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                            if (sub_10023C77C(v22, 19, *(_DWORD *)(a2 + 192)))
                                            {
                                              v23 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                              if (sub_10023C77C(v23, 20, *(_DWORD *)(a2 + 196)))
                                              {
                                                v24 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                if (sub_10023C77C(v24, 21, *(_DWORD *)(a2 + 200)))
                                                {
                                                  v25 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                  if (sub_10023C77C(v25, 22, *(_DWORD *)(a2 + 204)))
                                                  {
                                                    v26 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                    if (sub_1000890C4(v26, 23, *(float *)(a2 + 208)))
                                                    {
                                                      v27 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                      if (sub_1000CD75C(v27, 24, *(unsigned __int8 *)(a2 + 212)))
                                                      {
                                                        v28 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                        if (sub_1000890C4(v28, 25, *(float *)(a2 + 216)))
                                                        {
                                                          v29 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                          if (sub_1000CD75C(v29, 26, *(unsigned __int8 *)(a2 + 220)))
                                                          {
                                                            v30 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                            if (sub_1000CD75C(v30, 27, *(_DWORD *)(a2 + 52)))
                                                            {
                                                              v31 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                              if (sub_1000890C4(v31, 28, *(double *)(a2 + 56)))
                                                              {
                                                                v32 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                if (sub_1000890C4(v32, 29, *(double *)(a2 + 64)))
                                                                {
                                                                  v33 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                  if (sub_1000890C4(v33, 30, *(double *)(a2 + 72)))
                                                                  {
                                                                    v34 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                    if (sub_1000890C4(v34, 31, *(double *)(a2 + 80)))
                                                                    {
                                                                      v35 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                      if (sub_1000890C4(v35, 32, *(double *)(a2 + 88)))
                                                                      {
                                                                        v36 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                        if (sub_1000890C4(v36, 33, *(double *)(a2 + 96)))
                                                                        {
                                                                          v37 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                          if (sub_1000890C4(v37, 34, *(double *)(a2 + 104)))
                                                                          {
                                                                            v38 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                            if (sub_1000890C4(v38, 35, *(float *)(a2 + 144)))
                                                                            {
                                                                              v39 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                              if (sub_1000890C4(v39, 36, *(float *)(a2 + 148)))
                                                                              {
                                                                                v40 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                                if (sub_1000890C4(v40, 37, *(float *)(a2 + 152)))
                                                                                {
                                                                                  v41 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                                  if (sub_1000890C4(v41, 38, *(float *)(a2 + 156)))
                                                                                  {
                                                                                    v42 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                                    if (sub_1000890C4(v42, 39, *(float *)(a2 + 160)))
                                                                                    {
                                                                                      v43 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                                      if (sub_1000890C4(v43, 40, *(float *)(a2 + 164)))
                                                                                      {
                                                                                        v44 = *(_QWORD *)(a1 + 80);
                                                                                        v45 = (sqlite3_stmt *)sub_100026CC8(v54[0]);
                                                                                        sub_10023C9B0(v44, v45);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021B3710);
        v46 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "BoutMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_1021B3710);
          v53[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 17, "BoutMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", v53, 2);
          v50 = (uint8_t *)v49;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLMobility::BoutMetricsRecorderDb::insertRecordUL(const BoutMetrics &, BOOL)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
      }
      v47 = v54[0];
      v54[0] = 0;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021B3710);
      v48 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "Prepare SQL statements failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021B3710);
        LOWORD(v54[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Prepare SQL statements failed", v54, 2);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMobility::BoutMetricsRecorderDb::insertRecordUL(const BoutMetrics &, BOOL)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
    }
  }
}

void sub_1013D5CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013D5CE8(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B3730);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3730);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1013D6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

char *sub_1013D71A0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[111] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 11), *((_QWORD *)result + 12));
  *(_OWORD *)a2 = *(_OWORD *)(result + 88);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 13);
  return result;
}

char *sub_1013D71CC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 2), *((_QWORD *)result + 3));
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 4);
  return result;
}

uint64_t sub_1013D71F8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM MobilityBoutMetricsHistory ORDER BY startTime ASC LIMIT 1");
  return result;
}

void sub_1013D727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013D72A0(uint64_t a1)
{
  return sub_1013D71F8(a1 - 528);
}

uint64_t sub_1013D72A8(uint64_t a1)
{
  return sub_100219C4C(*(_QWORD *)(a1 + 80));
}

uint64_t sub_1013D72B0(uint64_t a1)
{
  return sub_100219C4C(*(_QWORD *)(a1 - 448));
}

BOOL sub_1013D72BC(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  id v6;
  int v7;
  CLSerializableMobilityBoutMetrics *v8;
  NSData *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  NSArray *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  _BYTE v20[25];
  int v21;
  __int128 v22;
  int64x2_t v23;
  int64x2_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  char v33;
  int v34;
  char v35;
  int v36;
  uint64_t v37;
  uint8_t buf[4];
  uint64_t v39;

  if (!a3)
    return 0;
  v6 = objc_alloc_init((Class)NSMutableArray);
  v18 = 0;
  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v22 = xmmword_101C158B0;
  v23 = vdupq_n_s64(0xFFF0000000000000);
  v24 = v23;
  v25 = 0xFFF0000000000000;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 1071225242;
  v33 = 0;
  v34 = 1116213084;
  v35 = 0;
  v7 = sub_100427DA8(a1, a2, (uint64_t)&v18);
  if (!v7)
  {
    do
    {
      v17 = 0;
      v8 = -[CLSerializableMobilityBoutMetrics initWithBoutMetrics:]([CLSerializableMobilityBoutMetrics alloc], "initWithBoutMetrics:", &v18);
      v9 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, &v17);
      if (v17)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021B3710);
        v10 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v39 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize bout metrics: %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_1021B3710);
          v36 = 138412290;
          v37 = v17;
          LODWORD(v16) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Unable to serialize bout metrics: %@", &v36, v16);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLMobility::BoutMetricsRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      else
      {
        objc_msgSend(v6, "addObject:", v9);
      }

      v13 = sub_100427DA8(a1, a2, (uint64_t)&v18);
    }
    while (!v13);
    v7 = v13;
  }
  v15 = (NSArray *)objc_msgSend(v6, "count");
  if (v15)
    v15 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v6);
  *a3 = v15;

  return v7 == 1;
}

BOOL sub_1013D75C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v10 = 0;
  v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(CLSerializableMobilityBoutMetrics, a2), a2, &v10);
  v5 = v10;
  if (v10)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021B3710);
    v6 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize bout metrics: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021B3710);
      v11 = 138412290;
      v12 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Unable to deserialize bout metrics: %@", &v11, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMobility::BoutMetricsRecorderDb::dataBlobToEntry(NSData *, BoutMetrics &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    objc_msgSend(v4, "getBoutMetrics:", a3);
  }
  return v5 == 0;
}

uint64_t sub_1013D77BC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101950DE4(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1013D7BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  sub_1018B38B4((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_1013D7C58(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_101950F4C(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1013D80D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_1013D8138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B3730);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B3730);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3730);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1013D8728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1013D8758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  v7 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 112) = v8;
  result = *(__n128 *)(a3 + 160);
  v11 = *(_OWORD *)(a3 + 176);
  v12 = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(a2 + 205) = *(_OWORD *)(a3 + 205);
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 192) = v12;
  *(__n128 *)(a2 + 160) = result;
  return result;
}

id *sub_1013D879C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  int v41;
  __int128 v42;
  _BYTE v43[25];
  int v44;
  __int128 v45;
  int64x2_t v46;
  int64x2_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  char v56;
  int v57;
  char v58;
  id v59[2];
  int v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  uint8_t buf[4];
  double v65;
  __int16 v66;
  uint64_t v67;

  v59[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v59[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v59);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v41 = 0;
  v44 = 0;
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  v45 = xmmword_101C158B0;
  v46 = vdupq_n_s64(0xFFF0000000000000);
  v47 = v46;
  v48 = 0xFFF0000000000000;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 1071225242;
  v56 = 0;
  v57 = 1116213084;
  v58 = 0;
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v41);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3730);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3730);
        LOWORD(v60) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v60, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = *(double *)&v42;
    v9 = v7 - *(double *)&v42;
    if (v7 - *(double *)&v42 < 0.0)
      v9 = -(v7 - *(double *)&v42);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B3730);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v65 = *(double *)&v42;
        v66 = 2050;
        v67 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3730);
        v32 = *(_QWORD *)(a2 + 8);
        v60 = 134349312;
        v61 = *(double *)&v42;
        v62 = 2050;
        v63 = v32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v60, 22);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = *(double *)&v42;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3730);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v65 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B3730);
          v35 = *(double *)(a2 + 8);
          v60 = 134217984;
          v61 = v35;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v60));
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v40 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B3730);
        v18 = v40;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v65 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B3730);
        v60 = 134217984;
        v61 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v60));
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v41, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  v25 = *(_OWORD *)(a2 + 96);
  v26 = *(_OWORD *)(a2 + 112);
  v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 336) = v26;
  v28 = *(_OWORD *)(a2 + 160);
  v29 = *(_OWORD *)(a2 + 176);
  v30 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 429) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 400) = v29;
  *(_OWORD *)(a1 + 416) = v30;
  *(_OWORD *)(a1 + 384) = v28;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v59);
}

void sub_1013D8F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
  sub_100131740(&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1013D8FAC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019510B4(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1013D920C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10195121C(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1013D9444(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101951384(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_1013D966C(uint64_t a1)
{
  return sub_1013D8138(a1 - 72);
}

void sub_1013D9674(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_1013D96A0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1013D96CC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 9;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 18;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_1013D9760(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1013D982C((uint64_t)a1, "MaxMetsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021B4038;
  a1[9] = off_1021B40F0;
  sub_100E81598(a1 + 42, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_1013D9800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013D982C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021B42A0;
  *(_QWORD *)(a1 + 72) = off_1021B4348;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B42A0;
  *(_QWORD *)(a1 + 72) = off_1021B4348;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1013D9BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_102138DA8;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1013D9C78()
{
  JUMPOUT(0x1013D9C58);
}

_QWORD *sub_1013D9C80(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B4348;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B42A0;
  a1[33] = off_102138DA8;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1013D9D00(uint64_t a1)
{
  return sub_1013D9C80((_QWORD *)(a1 - 72));
}

void sub_1013D9D08(_QWORD *a1)
{
  sub_1013D9C80(a1);
  operator delete();
}

void sub_1013D9D2C(uint64_t a1)
{
  sub_1013D9C80((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1013D9D54(uint64_t *a1, uint64_t a2)
{
  double Current;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 1.79769313e308 || !sub_10008950C(a1 + 9))
    return -1;
  sub_10001E638(a1[10]);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100087AF4(a1 + 42, &v13);
  v5 = (sqlite3_stmt *)sub_100026CC8(v13);
  if (sub_1000890C4(v5, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
  {
    v6 = a1[10];
    v7 = (sqlite3_stmt *)sub_100026CC8(v13);
    sub_10023C9B0(v6, v7);
    v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    v8 = -1;
  }
  sub_10001E99C(a1[10]);
  v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = *(_QWORD *)(v9 + 88);
  sub_100053048(v9, v10);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v8;
}

void sub_1013D9E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013D9E80(uint64_t a1, uint64_t a2)
{
  return sub_1013D9D54((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_1013D9E88(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from MaxMetsHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1013DA010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DA038(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  double v10;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v10 = sqlite3_column_double(v9, 3);
  result = 0;
  *(double *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1013DA0DC(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM MaxMetsHistory");
  return 0xFFFFFFFFLL;
}

void sub_1013DA17C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DA1A0(uint64_t a1)
{
  return sub_1013DA0DC(a1 - 72);
}

uint64_t sub_1013DA1A8(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM MaxMetsHistory WHERE endTime > ? and startTime <= ? ORDER BY startTime ASC");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B4180);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MaxMetsHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B4180);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "MaxMetsHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLMaxMetsRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<MaxMets> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_1013DA600(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DA62C(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_1013DA694((uint64_t)a1);
    sub_100634364(a1[10], "MaxMetsHistory", (const char **)&off_1021B41A0, (const std::string::value_type **)&off_1022FFAF0, 0);
    result = sub_10063D314(a1[10], "DELETE FROM MaxMetsHistory WHERE endTime < ?");
    a1[42] = result;
    a1[43] = v3;
  }
  return result;
}

BOOL sub_1013DA694(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "MaxMetsHistory");
  if (result)
  {
    v3 = "maxMets";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "MaxMetsHistory", (uint64_t)"maxMets", (uint64_t)&v3);
  }
  return result;
}

void sub_1013DA9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  sub_1018B38B4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DAA88(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM MaxMetsHistory");
  return result;
}

void sub_1013DAB1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DAB3C(uint64_t a1)
{
  return sub_1013DAA88(a1 - 72);
}

uint64_t sub_1013DAB44(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM MaxMetsHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1013DAC0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DAC2C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE MaxMetsHistory SET startTime = startTime + ?, endTime = endTime + ?");
  return result;
}

void sub_1013DACDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DACFC(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO MaxMetsHistory (startTime, endTime, maxMets) VALUES (?, ?, ?)");
  return result;
}

void sub_1013DADC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DADE4()
{
  return 0;
}

uint64_t sub_1013DADEC(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM MaxMetsHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_1013DAE6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DAE8C(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B4388);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B4388);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1013DC024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DC344(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1019514EC(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1013DC648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DC6B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B4388);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B4388);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B4388);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1013DCC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1013DCCAC(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  char v32[8];
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B4388);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B4388);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B4388);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v40 = v33;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B4388);
        v23 = *(_QWORD *)(a2 + 8);
        v35 = 134349312;
        v36 = v33;
        v37 = 2050;
        v38 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B4388);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B4388);
          v26 = *(double *)(a2 + 8);
          v35 = 134217984;
          v36 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B4388);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B4388);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_1013DD3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DD414(uint64_t a1)
{
  return sub_1013DC6B0(a1 - 72);
}

void sub_1013DD41C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1013DD448(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101951658(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1013DD708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DD770(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019517C4(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1013DD9D0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101951930(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1013DDC08(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101951A9C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1013DDE30(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

ALSLocationRequest *sub_1013DDE5C()
{
  ALSLocationRequest *v0;
  ALSLocationRequest *v1;

  v0 = objc_alloc_init(ALSLocationRequest);
  -[ALSLocationRequest setMeta:](v0, "setMeta:", sub_1013DDEA0());
  v1 = v0;
  return v0;
}

ALSMeta *sub_1013DDEA0()
{
  ALSMeta *v0;
  uint64_t v1;
  int v2;
  void **v3;
  NSStringEncoding v4;
  void **v5;
  NSString *v6;
  int v7;
  void **v8;
  NSStringEncoding v9;
  void **v10;
  NSString *v11;
  ALSMeta *v12;
  void *__p[2];
  char v15;

  v0 = objc_alloc_init(ALSMeta);
  v1 = sub_100197040();
  sub_10075A7A8(v1, (uint64_t)__p);
  v2 = v15;
  v3 = (void **)__p[0];
  v4 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
  if (v2 >= 0)
    v5 = __p;
  else
    v5 = v3;
  v6 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v5, v4);
  if (v15 < 0)
    operator delete(__p[0]);
  sub_100197040();
  sub_10075A1D4((uint64_t)__p);
  v7 = v15;
  v8 = (void **)__p[0];
  v9 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
  if (v7 >= 0)
    v10 = __p;
  else
    v10 = v8;
  v11 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v10, v9);
  if (v15 < 0)
    operator delete(__p[0]);
  -[ALSMeta setProductId:](v0, "setProductId:", v6);
  -[ALSMeta setSoftwareBuild:](v0, "setSoftwareBuild:", v11);
  v12 = v0;
  return v0;
}

void sub_1013DDFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ALSNearbyRequest *sub_1013DDFC8()
{
  ALSNearbyRequest *v0;
  ALSNearbyRequest *v1;

  v0 = objc_alloc_init(ALSNearbyRequest);
  -[ALSNearbyRequest setMeta:](v0, "setMeta:", sub_1013DDEA0());
  v1 = v0;
  return v0;
}

void sub_1013DE00C(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  double **v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  double *v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint8_t *v51;
  uint64_t v52;
  double v53[5];
  int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint8_t buf[4];
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;

  v3 = (void **)(a1 + 20);
  v2 = a1[20];
  v4 = (a1[21] - v2) >> 3;
  v5 = (double **)(a1 + 23);
  if (v4 == (((a1[18] - a1[17]) << 28) - 0x100000000) >> 32)
  {
    v6 = (double *)a1[23];
    if (v4 == (uint64_t)(a1[24] - (_QWORD)v6) >> 3)
      return;
  }
  else
  {
    v6 = *v5;
  }
  a1[16] = 0;
  a1[21] = v2;
  a1[24] = v6;
  sub_1002433B8((uint64_t)v53);
  v7 = a1[17];
  if (a1[18] - v7 != 16)
  {
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      v10 = sub_10011E634(v53, *(double *)(v7 + 16 * v8), *(double *)(v7 + 16 * v8 + 8), *(double *)(v7 + 16 * (v8 + 1)), *(double *)(v7 + 16 * (v8 + 1) + 8), 0.0);
      v11 = v10;
      v13 = (double *)a1[21];
      v12 = a1[22];
      if ((unint64_t)v13 >= v12)
      {
        v15 = (double *)*v3;
        v16 = ((char *)v13 - (_BYTE *)*v3) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_100259694();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_10025E6A0((uint64_t)(a1 + 22), v19);
          v15 = (double *)a1[20];
          v13 = (double *)a1[21];
        }
        else
        {
          v20 = 0;
        }
        v21 = (double *)&v20[8 * v16];
        *v21 = v11;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13-- - 1);
          *((_QWORD *)v21-- - 1) = v22;
        }
        a1[20] = v21;
        a1[21] = v14;
        a1[22] = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v10;
        v14 = v13 + 1;
      }
      a1[21] = v14;
      *((double *)a1 + 16) = v11 + *((double *)a1 + 16);
      v23 = sub_1010B9BE4(v53, *(double *)(a1[17] + 16 * v8), *(double *)(a1[17] + 16 * v8 + 8), *(double *)(a1[17] + 16 * v9), *(double *)(a1[17] + 16 * v9 + 8));
      if (v23 < 0.0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B43A8);
        v24 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v25 = a1[17];
          v26 = (uint64_t *)(v25 + 16 * v8);
          v28 = *v26;
          v27 = v26[1];
          v29 = (uint64_t *)(v25 + 16 * v9);
          v31 = *v29;
          v30 = v29[1];
          *(_DWORD *)buf = 134284289;
          v63 = v28;
          v64 = 2049;
          v65 = v27;
          v66 = 2049;
          v67 = v31;
          v68 = 2049;
          v69 = v30;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMMLE,invalid heading for flowline coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021B43A8);
          v43 = a1[17];
          v44 = (uint64_t *)(v43 + 16 * v8);
          v46 = *v44;
          v45 = v44[1];
          v47 = (uint64_t *)(v43 + 16 * v9);
          v49 = *v47;
          v48 = v47[1];
          v54 = 134284289;
          v55 = v46;
          v56 = 2049;
          v57 = v45;
          v58 = 2049;
          v59 = v49;
          v60 = 2049;
          v61 = v48;
          LODWORD(v52) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMLE,invalid heading for flowline coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf", &v54, v52);
          v51 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 0, "void CLMapFlowLine::computeSegmentDistancesAndHeading()", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
      }
      v33 = (double *)a1[24];
      v32 = a1[25];
      if ((unint64_t)v33 >= v32)
      {
        v35 = *v5;
        v36 = v33 - *v5;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          sub_100259694();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)sub_10025E6A0((uint64_t)(a1 + 25), v39);
          v35 = (double *)a1[23];
          v33 = (double *)a1[24];
        }
        else
        {
          v40 = 0;
        }
        v41 = (double *)&v40[8 * v36];
        *v41 = v23;
        v34 = v41 + 1;
        while (v33 != v35)
        {
          v42 = *((_QWORD *)v33-- - 1);
          *((_QWORD *)v41-- - 1) = v42;
        }
        a1[23] = v41;
        a1[24] = v34;
        a1[25] = &v40[8 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v33 = v23;
        v34 = v33 + 1;
      }
      a1[24] = v34;
      v7 = a1[17];
      ++v8;
    }
    while (((a1[18] - v7) >> 4) - 1 > v9);
  }
}

void sub_1013DE484(uint64_t a1, uint64_t a2, double a3, long double a4, double a5, long double a6)
{
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  double *v20;
  double *v21;
  BOOL v22;
  double v24;
  double v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  uint64_t *v40;
  _QWORD *v41[2];
  int v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  _BYTE buf[12];
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;

  sub_100080DCC(a4);
  v12 = v11;
  sub_100080DCC(a6);
  v14 = v13;
  v16 = *(char **)a2;
  for (i = *(_QWORD *)(a2 + 8); (char *)i != v16; i = sub_100261F44(i - 16))
    ;
  *(_QWORD *)(a2 + 8) = v16;
  v41[0] = 0;
  v41[1] = 0;
  v40 = (uint64_t *)v41;
  v19 = *(_QWORD **)(a1 + 40);
  v17 = a1 + 40;
  v18 = v19;
  if (v19 == (_QWORD *)(v17 + 8))
    goto LABEL_46;
  do
  {
    if (!v18[5])
      goto LABEL_40;
    *(_QWORD *)buf = v18 + 4;
    if (*((_BYTE *)sub_1013DE8EC(&v40, v18 + 4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf) + 40))
      goto LABEL_40;
    v21 = *(double **)(v18[5] + 136);
    v20 = *(double **)(v18[5] + 144);
    v22 = (((char *)v20 - (char *)v21) & 0xFFFFFFFF0) == 0 || v21 == v20;
    if (v22)
      goto LABEL_40;
    while (1)
    {
      if (*v21 < a3 || *v21 > a5)
        goto LABEL_28;
      if (v14 <= v12)
        break;
      v24 = v21[1];
      if (v24 >= v12 && v24 <= v14)
        goto LABEL_30;
LABEL_28:
      v21 += 2;
      if (v21 == v20)
        goto LABEL_40;
    }
    if (v14 >= v12)
      goto LABEL_28;
    v26 = v21[1];
    if (v26 >= v14 && v26 <= v12)
      goto LABEL_28;
LABEL_30:
    v28 = sub_1013DE9AC(v17, v18 + 4);
    v30 = v29;
    if (v28 != v29)
    {
      do
      {
        if (v28[4] == v18[4])
        {
          sub_1013DE00C((_QWORD *)v28[5]);
          sub_10033F68C((char **)a2, (__int128 *)(v28 + 5));
        }
        v31 = (_QWORD *)v28[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (_QWORD *)v28[2];
            v22 = *v32 == (_QWORD)v28;
            v28 = v32;
          }
          while (!v22);
        }
        v28 = v32;
      }
      while (v32 != v30);
    }
    *(_QWORD *)buf = v18 + 4;
    *((_BYTE *)sub_1013DE8EC(&v40, v18 + 4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf) + 40) = 1;
LABEL_40:
    v33 = (_QWORD *)v18[1];
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = (_QWORD *)*v33;
      }
      while (v33);
    }
    else
    {
      do
      {
        v34 = (_QWORD *)v18[2];
        v22 = *v34 == (_QWORD)v18;
        v18 = v34;
      }
      while (!v22);
    }
    v18 = v34;
  }
  while (v34 != (_QWORD *)(v17 + 8));
LABEL_46:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B43A8);
  v35 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v36 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
    *(_DWORD *)buf = 134350081;
    *(_QWORD *)&buf[4] = v36;
    v53 = 2049;
    v54 = a3;
    v55 = 2049;
    v56 = v12;
    v57 = 2049;
    v58 = a5;
    v59 = 2049;
    v60 = v14;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMLE,FlowlineBuffer,found roads,size,%{public}ld,min,%{private}.7lf,%{private}.7lf,max,%{private}.7lf,%{private}.7lf", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B43A8);
    v37 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
    v42 = 134350081;
    v43 = v37;
    v44 = 2049;
    v45 = a3;
    v46 = 2049;
    v47 = v12;
    v48 = 2049;
    v49 = a5;
    v50 = 2049;
    v51 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,FlowlineBuffer,found roads,size,%{public}ld,min,%{private}.7lf,%{private}.7lf,max,%{private}.7lf,%{private}.7lf", &v42, 52);
    v39 = (char *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLMapFlowLineBuffer::findFlowLinesInThisBox(double, double, double, double, std::vector<CLMapFlowLinePtr> &) const", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  sub_100008848((uint64_t)&v40, v41[0]);
}

void sub_1013DE898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_100008848((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_1013DE8C0(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t **sub_1013DE8EC(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_BYTE *)v11 + 40) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_1013DE9AC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = v3[4];
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (_QWORD *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = v7[4];
      v9 = v8 < v4;
      if (v8 >= v4)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (!v9)
        result = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= v11[4])
        v12 = v11 + 1;
      else
        v12 = v11;
      v11 = (_QWORD *)*v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t sub_1013DEA44()
{
  if (qword_10230EB30 != -1)
    dispatch_once(&qword_10230EB30, &stru_1021B43C8);
  return qword_102314028;
}

void sub_1013DEA84(id a1)
{
  operator new();
}

void sub_1013DEAD8()
{
  operator delete();
}

void sub_1013DEB00(uint64_t a1)
{
  sub_100A08120(a1);
  operator delete();
}

void sub_1013DEBC8(id a1)
{
  qword_10230EB38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMobileAssetManagerSilo"));
}

uint64_t sub_1013DEC7C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1013DF93C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230EB48 != -1)
    dispatch_once(&qword_10230EB48, block);
  return qword_102314030;
}

void sub_1013DF780()
{
  operator new();
}

void sub_1013DF82C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1013DF868(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021B45F8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1013DF93C()
{
  operator new();
}

void sub_1013DF984()
{
  operator delete();
}

void sub_1013DF9A8(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD v4[4];

  v3 = (_QWORD *)sub_1013DFAB8(a1, "CLMobileAssetManager", a2);
  *v3 = off_1021B4478;
  v3[14] = a2;
  v4[0] = off_1021B4770;
  v4[1] = v3;
  v4[3] = v4;
  sub_100D6795C((uint64_t)(v3 + 15), (uint64_t)a2, (uint64_t)v4);
}

void sub_1013DFA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  sub_1013DFB54(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1013DFAB8(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021B4620;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1013DFB38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013DFB54(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B4620;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1013DFBC8(_QWORD *a1)
{
  *a1 = off_1021B4478;
  sub_100D679D8((uint64_t)(a1 + 15));
  return sub_1013DFB54((uint64_t)a1);
}

void sub_1013DFBF8(_QWORD *a1)
{
  *a1 = off_1021B4478;
  sub_100D679D8((uint64_t)(a1 + 15));
  sub_1013DFB54((uint64_t)a1);
  operator delete();
}

void sub_1013DFC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B45A8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021B45A8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::removeClient(int) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1013DFEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FFBC0);
}

BOOL sub_1013DFEC4(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  _DWORD v46[406];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        sub_100119F3C(buf);
        *(_QWORD *)((char *)v46 + 2) = -1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1013E2474();
        }
        sub_10011A5A8(buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FFBC1;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B45A8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v45 = 1026;
    v46[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_1013E033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

BOOL sub_1013E035C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B45A8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1013E05DC(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B45A8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B45A8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1013E0964(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  sub_10052502C(a3, *(_QWORD *)(v8 + 64));
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v12 + 16);
  return 1;
}

uint64_t sub_1013E09E8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1013E1DDC(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1013E0A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013E0AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v9[16];
  uint64_t v10;

  sub_100119F3C(v9);
  v10 = -1;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v9, a3, a4, 0);
  return sub_10011A5A8(v9);
}

void sub_1013E0B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1013E0B30(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1013E1DDC(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1013E186C();
    os_activity_scope_leave(&state);
  }
}

void sub_1013E114C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1013E1198(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B45A8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::listClients() [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B45A8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::listClients() [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021B45A8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B45A8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::listClients() [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1013E1744(uint64_t a1)
{
  sub_1013E180C(a1);
  operator delete();
}

id sub_1013E1768(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1013E1F14(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1013E17B4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1013E17E0(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1013E180C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021B45F8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1013E186C()
{
  operator new();
}

void sub_1013E1908()
{
  operator delete();
}

void sub_1013E192C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1013E1F14(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1013E1D00(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B45A8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B45A8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1013E1D00(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1013E1F14(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_1013E1DDC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1013E1E34(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013E1E20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1013E1E34(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_1021B4700;
  a1[1] = 0;
  sub_100525028(a1 + 3);
  a1[5] = *(_QWORD *)(a2 + 16);
  return a1;
}

void sub_1013E1E78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E1E8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021B4700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E1EA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021B4700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1013E1ED4(uint64_t a1)
{
  return sub_10011A5A8(a1 + 24);
}

uint64_t sub_1013E1EE0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_10011A5A8(result);
    operator delete();
  }
  return result;
}

id sub_1013E1F14(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1013E1F60(a1);
  else
    return 0;
}

id sub_1013E1F60(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B4740);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA184ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B4740);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B4740);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA184ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B4740);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMobileAssetManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1013E230C(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1013E233C()
{
  operator delete();
}

_QWORD *sub_1013E2350(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021B4770;
  result[1] = v3;
  return result;
}

uint64_t sub_1013E2384(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021B4770;
  a2[1] = v2;
  return result;
}

uint64_t sub_1013E23A0(uint64_t a1, int *a2, uint64_t a3)
{
  int v5;
  _QWORD v7[3];
  int v8;

  v5 = *a2;
  sub_100525028(v7);
  v7[2] = *(_QWORD *)(a3 + 16);
  v8 = v5;
  (*(void (**)(_QWORD, int *, _QWORD *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), &v8, v7, 1, 0xFFFFFFFFLL, 0);
  return sub_10011A5A8(v7);
}

void sub_1013E2418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1013E242C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013E2468()
{
}

void sub_1013E2474()
{
  operator new();
}

void sub_1013E2510()
{
  operator delete();
}

uint64_t sub_1013E2534(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_10011A5A8(result);
    operator delete();
  }
  return result;
}

void sub_1013E260C(id a1)
{
  qword_10230EB68 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTrackingAvoidanceServiceSilo"));
}

void sub_1013E270C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013E2720(id a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!objc_opt_class(SPOwnerSession, v1))
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v2 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ut not supported on this platform because SPOwner.framework is not present", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0138, 0, "#ut not supported on this platform because SPOwner.framework is not present", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "+[CLTrackingAvoidanceService isSupported]_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    byte_10230EB78 = 0;
  }
}

void sub_1013E2E3C()
{
  operator delete();
}

void sub_1013E3404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013E3EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013E3EC8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;

  v6 = *a2;
  sub_1001AF190((char *)v7, (__int128 *)a3);
  v21 = *(_QWORD *)(a3 + 184);
  objc_msgSend(a4, "onClientManagerNotification:data:", v6, v7);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1013E3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1013E40A8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onGnssNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1013E41B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1013E43DC(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[10];

  v4 = *a2;
  v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  v7 = a3[3];
  v11[2] = a3[2];
  v11[3] = v7;
  v8 = a3[5];
  v11[4] = a3[4];
  v11[5] = v8;
  v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return objc_msgSend(a4, "onMotionStateNotification:data:", v4, v11);
}

id sub_1013E45D8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onGeoCountryConfigurationChanged:", objc_msgSend(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"), "countryCode"));
}

void sub_1013E49F4(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  const char *v10;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  uint64_t v28;

  if (a3)
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v5 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      v6 = *(void **)(a1 + 32);
      v21 = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2113;
      v26 = v6;
      v27 = 2114;
      v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
    }
    v7 = qword_1022A0138;
    if (os_signpost_enabled((os_log_t)qword_1022A0138))
    {
      v8 = *(void **)(a1 + 32);
      v21 = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2113;
      v26 = v8;
      v27 = 2114;
      v28 = a3;
      v9 = "#ut #loi error fetching LOI";
      v10 = "{\"msg%{public}.0s\":\"#ut #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\""
            ":%{public, location:escape_only}@}";
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, (uint8_t *)&v21, 0x26u);
    }
  }
  else if (a2)
  {
    if (objc_msgSend(objc_msgSend(a2, "location"), "referenceFrame") == 2)
    {
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
      v12 = qword_1022A0138;
      if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 40);
        v21 = 68289539;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2113;
        v26 = a2;
        v27 = 2113;
        v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #loi got China Shifted LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      }
    }
    else
    {
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
      v19 = qword_1022A0138;
      if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(_QWORD *)(a1 + 40);
        v21 = 68289539;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2113;
        v26 = a2;
        v27 = 2113;
        v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #loi received LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      }
      objc_msgSend(*(id *)(a1 + 48), "ingestTAEventIfTAServiceRunning:", +[CLTrackingAvoidanceService convertRTLocationOfInterest:](CLTrackingAvoidanceService, "convertRTLocationOfInterest:", a2));
    }
  }
  else
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v14 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_FAULT))
    {
      v15 = *(void **)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      v21 = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2113;
      v26 = v15;
      v27 = 2113;
      v28 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ut #loi received nil in return when fetching LOI\", \"visit\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
    }
    v7 = qword_1022A0138;
    if (os_signpost_enabled((os_log_t)qword_1022A0138))
    {
      v17 = *(void **)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
      v21 = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2113;
      v26 = v17;
      v27 = 2113;
      v28 = v18;
      v9 = "#ut #loi received nil in return when fetching LOI";
      v10 = "{\"msg%{public}.0s\":\"#ut #loi received nil in return when fetching LOI\", \"visit\":%{private, location:es"
            "cape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}";
      goto LABEL_9;
    }
  }
}

id sub_1013E52D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[7];

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1013E5350;
  v8[3] = &unk_10212BBA8;
  v8[4] = *(_QWORD *)(a1 + 32);
  v8[5] = a3;
  v8[6] = a2;
  return objc_msgSend(v6, "async:", v8);
}

void sub_1013E5350(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t *v14;
  double v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  int v26;
  uint64_t v27;
  uint8_t buf[4];
  _BYTE v29[14];
  __int16 v30;
  void *v31;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v2 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)v29 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ut #loi received error when fetching LOIs in batch: %{private}@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v20 = *(_QWORD *)(a1 + 40);
    v26 = 138477827;
    v27 = v20;
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0138, 16, "#ut #loi received error when fetching LOIs in batch: %{private}@", &v26, 12);
    goto LABEL_45;
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    if (objc_msgSend(v4, "count"))
    {
      v5 = *(void **)(*(_QWORD *)(a1 + 32) + 192);
      if (v5)

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192) = objc_alloc_init((Class)NSDate);
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v6 = *(void **)(a1 + 48);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v22;
        do
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v22 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v10);
            if (objc_msgSend(objc_msgSend(v11, "location"), "referenceFrame") == 2)
            {
              if (qword_1022A0130 != -1)
                dispatch_once(&qword_1022A0130, &stru_1021B4958);
              v12 = qword_1022A0138;
              if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289283;
                *(_DWORD *)v29 = 0;
                *(_WORD *)&v29[4] = 2082;
                *(_QWORD *)&v29[6] = "";
                v30 = 2113;
                v31 = v11;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #loi got China Shifted LOI\", \"loi\":%{private, location:escape_only}@}", buf, 0x1Cu);
              }
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 32), "ingestTAEventIfTAServiceRunning:", +[CLTrackingAvoidanceService convertRTLocationOfInterest:](CLTrackingAvoidanceService, "convertRTLocationOfInterest:", v11));
            }
            v10 = (char *)v10 + 1;
          }
          while (v8 != v10);
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        }
        while (v8);
      }
    }
    else
    {
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
      v16 = qword_1022A0138;
      if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#ut #loi received zero entities in return when fetching LOIs in batch", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0130 != -1)
          dispatch_once(&qword_1022A0130, &stru_1021B4958);
        LOWORD(v26) = 0;
        v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0138, 1, "#ut #loi received zero entities in return when fetching LOIs in batch", &v26, 2);
        v19 = v18;
        sub_100512490("Generic", 1, 0, 2, "-[CLTrackingAvoidanceService requestImportantLoisIfNeeded]_block_invoke", "%s\n", v17);
        goto LABEL_46;
      }
    }
  }
  else
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v13 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ut #loi received nil in return when fetching LOIs in batch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
      LOWORD(v26) = 0;
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0138, 16, "#ut #loi received nil in return when fetching LOIs in batch", &v26, 2);
LABEL_45:
      v19 = v14;
      sub_100512490("Generic", 1, 0, 0, "-[CLTrackingAvoidanceService requestImportantLoisIfNeeded]_block_invoke", "%s\n", v15);
LABEL_46:
      if (v19 != buf)
        free(v19);
    }
  }
}

id sub_1013E5A64(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *a2;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", v4, &v6);
}

void sub_1013E5BFC(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6;
  __int16 v7;
  _BYTE v8[8];
  void *__p;
  char v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  void **v14;

  v6 = *a2;
  v7 = *a3;
  sub_10031F08C(v8, (uint64_t)(a3 + 4));
  v12 = *((_QWORD *)a3 + 13);
  memset(v13, 0, 24);
  sub_10055A7B8(v13, *((_QWORD *)a3 + 14), *((_QWORD *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3));
  v13[3] = *((_QWORD *)a3 + 17);
  objc_msgSend(a4, "onWifiServiceNotification:data:", v6, &v7);
  v14 = (void **)v13;
  sub_100279AA4(&v14);
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_1013E5CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_1005B5FEC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1013E5DD4(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  int v16;

  v6 = *a2;
  v7[0] = *(_BYTE *)a3;
  sub_100985590((uint64_t)&v8, a3 + 8);
  v15 = *(_QWORD *)(a3 + 112);
  v16 = *(_DWORD *)(a3 + 120);
  objc_msgSend(a4, "onBluetoothServiceNotification:data:", v6, v7);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
}

void sub_1013E5E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100985540((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1013E5FD8(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  return _objc_msgSend(*(id *)(a1 + 32), "onVehicleStateNotification");
}

id sub_1013E6470(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onSignalEnvironmentNotification:data:", *a2, *a3);
}

id sub_1013E65F8(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", *a2, *a3);
}

void sub_1013E9858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  if (qword_1022A0130 != -1)
    dispatch_once(&qword_1022A0130, &stru_1021B4958);
  v8 = qword_1022A0138;
  if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284033;
    v19 = a2;
    v20 = 2049;
    v21 = a3;
    v22 = 2049;
    v23 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ut received vehicle state notification - state %{private}lu; hints %{private}lu; operator state %{private}lu",
      buf,
      0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v12 = 134284033;
    v13 = a2;
    v14 = 2049;
    v15 = a3;
    v16 = 2049;
    v17 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0138, 2, "#ut received vehicle state notification - state %{private}lu; hints %{private}lu; operator state %{private}lu",
      &v12,
      32);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "-[CLTrackingAvoidanceService onVehicleStateNotification]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a2 != 2)
    a2 = a2 == 1;
  if (a4 != 2)
    a4 = a4 == 1;
  v9 = objc_msgSend(objc_alloc((Class)TAVehicleStateNotification), "initWithVehicularState:andVehicularHints:andOperatorState:date:", a2, a3, a4, +[NSDate date](NSDate, "date"));
  objc_msgSend(*(id *)(a1 + 32), "ingestTAEventIfTAServiceRunning:", v9);

}

void sub_1013EA468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;

  v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1013EA4F4;
  v7[3] = &unk_102150F38;
  v7[4] = a3;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v9 = a2;
  dispatch_async(v6, v7);
}

id sub_1013EA4F4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  double Current;
  id result;
  void *v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t buf;
  __int16 v27;
  const char *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v2 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      buf = 68289539;
      v27 = 2082;
      v28 = "";
      v29 = 2081;
      v30 = v3;
      v31 = 2081;
      v32 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
    }
    v5 = qword_1022A0138;
    if (os_signpost_enabled((os_log_t)qword_1022A0138))
    {
      v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      buf = 68289539;
      v27 = 2082;
      v28 = "";
      v29 = 2081;
      v30 = v6;
      v31 = 2081;
      v32 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut received error in notifying SPD", "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
    }
    v8 = objc_msgSend(CFSTR("Alert_"), "stringByAppendingString:", +[CLTrackingAvoidanceService convertSPTrackingAvoidanceErrorToString:](CLTrackingAvoidanceService, "convertSPTrackingAvoidanceErrorToString:", objc_msgSend(*(id *)(a1 + 32), "code")));
    v9 = *(_QWORD *)(a1 + 48) + 224;
    Current = CFAbsoluteTimeGetCurrent();
    sub_100B44E54(v9, v8, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 216), Current);
    return objc_msgSend(*(id *)(a1 + 48), "notifyTAWithDeviceInformation:type:state:date:", objc_msgSend(*(id *)(a1 + 40), "latestAdvertisement"), 0, 2, +[NSDate now](NSDate, "now"));
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v12 = *(void **)(a1 + 56);
    result = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (result)
    {
      v14 = result;
      v15 = *(_QWORD *)v22;
      *(_QWORD *)&v13 = 68289283;
      v20 = v13;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v22 != v15)
            objc_enumerationMutation(v12);
          v17 = (uint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v16), "type", v20);
          switch(v17)
          {
            case 0:
              if (qword_1022A0130 != -1)
                dispatch_once(&qword_1022A0130, &stru_1021B4958);
              v18 = qword_1022A0138;
              if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
              {
                v19 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
                buf = v20;
                v27 = 2082;
                v28 = "";
                v29 = 2081;
                v30 = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut SPD successfully handled UT alert\", \"address\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
              }
              objc_msgSend(*(id *)(a1 + 48), "handleNotificationMetrics:", *(_QWORD *)(a1 + 40));
              objc_msgSend(*(id *)(a1 + 48), "incrementNotifications");
              goto LABEL_22;
            case 1:
              objc_msgSend(*(id *)(a1 + 48), "handleNotificationMetrics:", *(_QWORD *)(a1 + 40));
LABEL_22:
              v17 = 1;
              break;
            case 2:
              break;
            case 4:
              objc_msgSend(*(id *)(a1 + 48), "showEngineeringUIForOwnerUT:", *(_QWORD *)(a1 + 40));
              v17 = 3;
              break;
            default:
              v17 = 0;
              break;
          }
          objc_msgSend(*(id *)(a1 + 48), "notifyTAWithDeviceInformation:type:state:date:", objc_msgSend(*(id *)(a1 + 40), "latestAdvertisement"), v17, 2, +[NSDate now](NSDate, "now"));
          v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        result = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        v14 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_1013EAC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[5];
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1013EACC8;
  v8[3] = &unk_1021B4860;
  v8[4] = a3;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = a2;
  v9 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  return objc_msgSend(v6, "async:", v8);
}

uint64_t sub_1013EACC8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t (*v8)(void);
  unint64_t v9;
  NSObject *v10;
  id v11;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v2 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v13 = 68289539;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v3;
      v19 = 2081;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut received error in resolving device type with SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x26u);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
    }
    v5 = qword_1022A0138;
    if (os_signpost_enabled((os_log_t)qword_1022A0138))
    {
      v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v13 = 68289539;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v6;
      v19 = 2081;
      v20 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut received error in resolving device type with SPD", "{\"msg%{public}.0s\":\"#ut received error in resolving device type with SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x26u);
    }
    v8 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16);
  }
  else
  {
    v9 = +[CLTrackingAvoidanceService convertSPDetectedDeviceTypeToTADeviceType:](CLTrackingAvoidanceService, "convertSPDetectedDeviceTypeToTADeviceType:", *(_QWORD *)(a1 + 64));
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v10 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v13 = 68289539;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v11;
      v19 = 2081;
      v20 = objc_msgSend(+[TADeviceInformation deviceTypeToString:](TADeviceInformation, "deviceTypeToString:", v9), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut SPD resolved device type\", \"address\":%{private, location:escape_only}s, \"type\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x26u);
    }
    objc_msgSend(*(id *)(a1 + 48), "notifyTAWithDeviceInformation:type:state:date:", *(_QWORD *)(a1 + 40), v9, 0, +[NSDate now](NSDate, "now"));
    v8 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16);
  }
  return v8();
}

void sub_1013EB544(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  double Current;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;

  if (a2)
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v4 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v10[0] = 68289539;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2081;
      v14 = v5;
      v15 = 2081;
      v16 = objc_msgSend(+[TADeviceInformation deviceTypeToString:](TADeviceInformation, "deviceTypeToString:", a2), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#trackingAvoidanceService:requestingAdditionalInformation not submitting metrics due to metrics from known device\", \"address\":%{private, location:escape_only}s, \"type\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x26u);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v8 = *(void **)(a1 + 48);
    Current = CFAbsoluteTimeGetCurrent();
    sub_100B41AE0(v7 + 224, v6, v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), Current);
  }
}

void sub_1013EB6D0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double Current;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;

  if (a2)
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v4 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
      v10[0] = 68289539;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2081;
      v14 = v5;
      v15 = 2081;
      v16 = objc_msgSend(+[TADeviceInformation deviceTypeToString:](TADeviceInformation, "deviceTypeToString:", a2), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#trackingAvoidanceService:requestingAdditionalInformation not submitting metrics due to metrics from known device\", \"address\":%{private, location:escape_only}s, \"type\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x26u);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    Current = CFAbsoluteTimeGetCurrent();
    sub_100B424E8(v7 + 224, v6, v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), Current);
  }
}

void sub_1013EC1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013EC52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD block[5];
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1013EC5BC;
  block[3] = &unk_1021681D8;
  v7 = *(_QWORD *)(a1 + 48);
  block[4] = a3;
  v9 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v10 = a2;
  v11 = v7;
  dispatch_async(v6, block);
}

void sub_1013EC5BC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  id v4;
  id v5;
  NSObject *v6;
  const char *v7;
  id v8;
  id v9;
  NSString *v10;
  uint64_t v11;
  double Current;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  const char *v20;
  id v21;
  void *v22;
  id v23;
  NSDate *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  NSString *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t buf;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;

  v30 = +[NSString stringWithString:](NSString, "stringWithString:", +[CLTrackingAvoidanceService convertSPUnauthorizedTrackingObservationActionToString:](CLTrackingAvoidanceService, "convertSPUnauthorizedTrackingObservationActionToString:", *(_QWORD *)(a1 + 64)));
  if (!*(_QWORD *)(a1 + 32))
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v13 = *(void **)(a1 + 56);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (!v14)
      return;
    v15 = v14;
    v16 = *(_QWORD *)v32;
    while (1)
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v32 != v16)
          objc_enumerationMutation(v13);
        v18 = objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v17), "type");
        if (v18 == (id)4)
        {
          v28 = *(void **)(a1 + 48);
          v29 = objc_msgSend(*(id *)(a1 + 40), "latestAdvertisement");
          v24 = +[NSDate now](NSDate, "now");
          v25 = v28;
          v26 = v29;
          v27 = 3;
          goto LABEL_24;
        }
        if (v18 == (id)2)
        {
          v22 = *(void **)(a1 + 48);
          v23 = objc_msgSend(*(id *)(a1 + 40), "latestAdvertisement");
          v24 = +[NSDate now](NSDate, "now");
          v25 = v22;
          v26 = v23;
          v27 = 2;
LABEL_24:
          objc_msgSend(v25, "notifyTAWithDeviceInformation:type:state:date:", v26, v27, 0, v24);
          goto LABEL_25;
        }
        if (!v18)
        {
          if (qword_1022A0130 != -1)
            dispatch_once(&qword_1022A0130, &stru_1021B4958);
          v19 = qword_1022A0138;
          if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
          {
            v20 = -[NSString UTF8String](v30, "UTF8String");
            v21 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
            buf = 68289539;
            v37 = 2082;
            v38 = "";
            v39 = 2081;
            v40 = v20;
            v41 = 2081;
            v42 = v21;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut SPD successfully received ut observation action\", \"action\":%{private, location:escape_only}s, \"address\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
          }
        }
LABEL_25:
        v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (!v15)
        return;
    }
  }
  if (qword_1022A0130 != -1)
    dispatch_once(&qword_1022A0130, &stru_1021B4958);
  v2 = qword_1022A0138;
  if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
  {
    v3 = -[NSString UTF8String](v30, "UTF8String");
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
    buf = 68289795;
    v37 = 2082;
    v38 = "";
    v39 = 2081;
    v40 = v3;
    v41 = 2081;
    v42 = v4;
    v43 = 2081;
    v44 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"action\":%{private, location:escape_only}s, \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
  }
  v6 = qword_1022A0138;
  if (os_signpost_enabled((os_log_t)qword_1022A0138))
  {
    v7 = -[NSString UTF8String](v30, "UTF8String");
    v8 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "address"), "hexString"), "UTF8String");
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
    buf = 68289795;
    v37 = 2082;
    v38 = "";
    v39 = 2081;
    v40 = v7;
    v41 = 2081;
    v42 = v8;
    v43 = 2081;
    v44 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut received error in notifying SPD", "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"action\":%{private, location:escape_only}s, \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  }
  v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%@"), v30, +[CLTrackingAvoidanceService convertSPTrackingAvoidanceErrorToString:](CLTrackingAvoidanceService, "convertSPTrackingAvoidanceErrorToString:", objc_msgSend(*(id *)(a1 + 32), "code")));
  v11 = *(_QWORD *)(a1 + 48) + 224;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100B44E54(v11, v10, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 216), Current);
}

id sub_1013ECD08(uint64_t a1)
{
  id result;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1168), "objectForKey:", *(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = result;
    dispatch_release((dispatch_object_t)objc_msgSend(result, "fetchGroup"));
    v4 = objc_msgSend(objc_alloc((Class)TAAISFetchSuccess), "initWithUUID:withAISInfo:successType:date:", *(_QWORD *)(a1 + 40), objc_msgSend(v3, "accessoryInfo"), 0, +[NSDate now](NSDate, "now"));
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v5 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v8[0] = 68289539;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2113;
      v12 = v6;
      v13 = 1025;
      v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut AIS fetch timeout fired\", \"uuid\":%{private, location:escape_only}@, \"success\":%{private}hhd}", (uint8_t *)v8, 0x22u);
    }
    objc_msgSend(*(id *)(a1 + 32), "ingestTAEventIfTAServiceRunning:", v4);
    v7 = v4;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1168), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "cleanUpTAUnknownBeaconRecord:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1013F1E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1013F1EC4(uint64_t a1, void *a2)
{
  std::string *p_p;
  NSString *v5;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (sub_1000BCB64(*(_QWORD *)(a1 + 48), (const char *)objc_msgSend(a2, "cStringUsingEncoding:", 1), &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  }
  else
  {
    if (!objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", a2))
      goto LABEL_9;
    v5 = (NSString *)objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", a2);
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, a2);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1013F1F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013F1FA0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1013F1FC4(uint64_t a1)
{
  return sub_100261F44(a1 + 48);
}

void sub_1013F2390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013F32FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

id sub_1013F36E0(uint64_t a1)
{
  id v2;
  _QWORD v4[4];
  int8x16_t v5;
  uint64_t v6;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1013F3758;
  v4[3] = &unk_10212BBA8;
  v5 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v6 = *(_QWORD *)(a1 + 48);
  return objc_msgSend(v2, "async:", v4);
}

id sub_1013F3758(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[4];
  __int128 v8;
  void *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_1022A0130 != -1)
    dispatch_once(&qword_1022A0130, &stru_1021B4958);
  v2 = qword_1022A0138;
  if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Updating Significant Locations from Auth Cache Notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0138, 2, "Updating Significant Locations from Auth Cache Notification", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLTrackingAvoidanceService fetchStatusOfUTEnablementRequirementsForClient:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1013F3934;
  v7[3] = &unk_1021B4938;
  v8 = *(_OWORD *)(a1 + 40);
  v9 = v3;
  return objc_msgSend(v3, "getAuthorizationContextOfNonZonalClient:withReply:", CFSTR("com.apple.locationd.bundle-/System/Library/LocationBundles/Routine.bundle"), v7);
}

void sub_1013F3934(uint64_t a1, void *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "didFetchSignficantLocationsStatus:forClient:", objc_msgSend(a2, "isAuthorizedForServiceTypeMask:", 64), *(_QWORD *)(a1 + 40));

}

id sub_1013F3C8C(id *a1)
{
  id result;
  NSObject *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  id v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  id v17;

  result = a1[4];
  if (result)
  {
    dispatch_release((dispatch_object_t)objc_msgSend(result, "fetchGroup"));
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v3 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(a1[5], "identifier");
      v5 = objc_msgSend(a1[4], "allSuccess");
      v6 = objc_msgSend(objc_msgSend(a1[4], "accessoryInfo"), "descriptionDictionary");
      v9[0] = 68289795;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2113;
      v13 = v4;
      v14 = 1025;
      v15 = v5;
      v16 = 2113;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #posh AIS fetch done\", \"uuid\":%{private, location:escape_only}@, \"success\":%{private}hhd, \"info\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x2Cu);
    }
    v7 = objc_msgSend(objc_alloc((Class)TAAISFetchSuccess), "initWithUUID:withAISInfo:successType:date:", objc_msgSend(a1[5], "identifier"), objc_msgSend(a1[4], "accessoryInfo"), objc_msgSend(a1[4], "allSuccess"), +[NSDate now](NSDate, "now"));
    objc_msgSend(a1[6], "ingestTAEventIfTAServiceRunning:", v7);
    v8 = v7;
    objc_msgSend(*((id *)a1[6] + 146), "removeObjectForKey:", objc_msgSend(a1[5], "identifier"));
    return objc_msgSend(*((id *)a1[6] + 5), "cleanUpTAUnknownBeaconRecord:", objc_msgSend(a1[5], "identifier"));
  }
  return result;
}

id sub_1013F4118(id *a1)
{
  id result;
  NSObject *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  id v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  id v17;

  result = a1[4];
  if (result)
  {
    dispatch_release((dispatch_object_t)objc_msgSend(result, "fetchGroup"));
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v3 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(a1[5], "identifier");
      v5 = objc_msgSend(a1[4], "allSuccess");
      v6 = objc_msgSend(objc_msgSend(a1[4], "accessoryInfo"), "descriptionDictionary");
      v9[0] = 68289795;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2113;
      v13 = v4;
      v14 = 1025;
      v15 = v5;
      v16 = 2113;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut AIS fetch done\", \"uuid\":%{private, location:escape_only}@, \"success\":%{private}hhd, \"info\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x2Cu);
    }
    v7 = objc_msgSend(objc_alloc((Class)TAAISFetchSuccess), "initWithUUID:withAISInfo:successType:date:", objc_msgSend(a1[5], "identifier"), objc_msgSend(a1[4], "accessoryInfo"), objc_msgSend(a1[4], "allSuccess"), +[NSDate now](NSDate, "now"));
    objc_msgSend(a1[6], "ingestTAEventIfTAServiceRunning:", v7);
    v8 = v7;
    objc_msgSend(*((id *)a1[6] + 146), "removeObjectForKey:", objc_msgSend(a1[5], "identifier"));
    return objc_msgSend(*((id *)a1[6] + 5), "cleanUpTAUnknownBeaconRecord:", objc_msgSend(a1[5], "identifier"));
  }
  return result;
}

void sub_1013F5634(id a1)
{
  qword_1022A0138 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackingAvoidance");
}

void sub_1013F5660(uint64_t a1, char a2)
{
  id v2;
  NSURL *v3;

  if ((a2 & 3) == 1)
  {
    v2 = objc_msgSend(CFSTR("tap-to-radar://new"), "mutableCopy");
    objc_msgSend(v2, "appendString:", CFSTR("?Title=Offline%20Device%20Issues%20Detected"));
    objc_msgSend(v2, "appendString:", CFSTR("&Classification=Other%20Bug"));
    objc_msgSend(v2, "appendString:", CFSTR("&ComponentID=1074997&ComponentName=TrackingAvoidance&ComponentVersion=New%20Bugs"));
    objc_msgSend(v2, "appendString:", CFSTR("&Reproducibility=I%20Didn't%20Try"));
    objc_msgSend(v2, "appendFormat:", CFSTR("&Description=%@"), objc_msgSend(CFSTR("Please help us by answering the following questions to the best of your ability\n\nWhat activities have you engaged in in the past 30 minutes?\nWhat kind of device is this in relation to your Offline Device? (ME:Non-ME:Shared)"), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
    v3 = +[NSURL URLWithString:](NSURL, "URLWithString:", v2);

    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openURL:configuration:completionHandler:", v3, 0, &stru_1021B4978);
  }
}

void sub_1013F5740(id a1, NSDictionary *a2, NSError *a3)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (a3)
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v3 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut ut detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
    }
    v4 = qword_1022A0138;
    if (os_signpost_enabled((os_log_t)qword_1022A0138))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut ut detection failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#ut ut detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1013F58AC(uint64_t a1, char a2)
{
  id v2;
  NSURL *v3;

  if ((a2 & 3) == 1)
  {
    v2 = objc_msgSend(CFSTR("tap-to-radar://new"), "mutableCopy");
    objc_msgSend(v2, "appendString:", CFSTR("?Title=UT%20Staging%20Issues"));
    objc_msgSend(v2, "appendString:", CFSTR("&Classification=Other%20Bug"));
    objc_msgSend(v2, "appendString:", CFSTR("&ComponentID=1074997&ComponentName=TrackingAvoidance&ComponentVersion=New%20Bugs"));
    objc_msgSend(v2, "appendString:", CFSTR("&Reproducibility=I%20Didn't%20Try"));
    objc_msgSend(v2, "appendFormat:", CFSTR("&Description=%@"), objc_msgSend(CFSTR("Additional Information:"), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
    v3 = +[NSURL URLWithString:](NSURL, "URLWithString:", v2);

    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openURL:configuration:completionHandler:", v3, 0, &stru_1021B4998);
  }
}

void sub_1013F598C(id a1, NSDictionary *a2, NSError *a3)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (a3)
  {
    if (qword_1022A0130 != -1)
      dispatch_once(&qword_1022A0130, &stru_1021B4958);
    v3 = qword_1022A0138;
    if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut ut staged detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0130 != -1)
        dispatch_once(&qword_1022A0130, &stru_1021B4958);
    }
    v4 = qword_1022A0138;
    if (os_signpost_enabled((os_log_t)qword_1022A0138))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut ut staged detection failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#ut ut staged detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1013F5AF8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CA1A20;
      v1[3] = unk_101CA1A30;
      v1[4] = xmmword_101CA1A40;
      v1[0] = xmmword_101CA1A00;
      v1[1] = unk_101CA1A10;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1013F5BCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F5BE4()
{
  sub_1015A2E04(&stru_10230EB50, "TrackingAvoidanceService");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &stru_10230EB50, (void *)&_mh_execute_header);
}

uint64_t sub_1013F5C28(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  double v42;
  const char *v44;
  uint8_t *v45;
  __int16 v46[8];
  __int128 v47[3];
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  double v63;

  v12 = (std::__shared_weak_count *)a4[1];
  v52 = *a4;
  v53 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a5[1];
  v50 = *a5;
  v51 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (std::__shared_weak_count *)a6[1];
  v48 = *a6;
  v49 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v47[0] = xmmword_10230EB88;
  v47[1] = unk_10230EB98;
  v47[2] = xmmword_10230EBA8;
  sub_100D04860(a1, a2, 2, &v52, &v50, &v48, a9, a8, v47);
  v21 = v49;
  if (v49)
  {
    v22 = (unint64_t *)&v49->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v51;
  if (v51)
  {
    v25 = (unint64_t *)&v51->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v53;
  if (v53)
  {
    v28 = (unint64_t *)&v53->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)a1 = off_1021B4A50;
  *(_QWORD *)(a1 + 352) = *a3;
  v30 = a3[1];
  *(_QWORD *)(a1 + 360) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 368) = *a7;
  v33 = a7[1];
  *(_QWORD *)(a1 + 376) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_DWORD *)(a1 + 392) = 2000;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_QWORD *)(a1 + 432) = 0;
  v36 = (uint64_t *)(a1 + 448);
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), a1 + 392) & 1) == 0)
    *(_DWORD *)(a1 + 392) = 2000;
  v37 = sub_1000A3224();
  if (sub_10023E934((uint64_t)v37))
    operator new();
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021B4B50);
  v38 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApHarvester got disabled by CLWifi1Settings!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021B4B50);
    v46[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApHarvester got disabled by CLWifi1Settings!", v46, 2);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "CLSubHarvesterWifi::CLSubHarvesterWifi(id<CLIntersiloUniverse>, std::shared_ptr<CLWifiHarvestInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Configuration>, std::shared_ptr<CLHarvestSystemInterface::StatusMonitor>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLHarvestMonitorInterface::Gps>, CLHNetworkController *, CLHRequestStore *)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  v39 = *v36;
  *v36 = 0;
  if (v39)
    sub_1013F79F4(a1 + 448, v39);
  *(_QWORD *)(a1 + 384) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvester:", 2);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4B70);
  v40 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v42 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)buf = 68289795;
    v55 = 0;
    v56 = 2082;
    v57 = "";
    v58 = 2050;
    v59 = 2;
    v60 = 2049;
    v61 = v41;
    v62 = 2049;
    v63 = v42;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestPointCount\":%{private}lu, \"timeSinceLastUpload_s\":\"%{private}.09f\"}", buf, 0x30u);
  }
  sub_100CDADEC();
  return a1;
}

void sub_1013F6108(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_1013F79F4((uint64_t)v2, v4);
  sub_100008848(v1 + 424, *(_QWORD **)(v1 + 432));
  sub_100261F44(v1 + 368);
  sub_100261F44(v1 + 352);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F61A4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  return sub_1013F5C28(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1013F61B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v11);
  v4 = a1 + 280;
  v5 = unk_10230EB98;
  *(_OWORD *)v4 = xmmword_10230EB88;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 25) = unk_10230EBA1;
  if (sub_100006BB4(a2, "Wifi", v11))
    sub_1011E7A6C(v4, (uint64_t)v11);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4B70);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_1011E7898((double *)v4, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = 2;
    v18 = 2081;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v11);
}

void sub_1013F6334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F6354(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned int v3;

  v1 = atomic_load((unsigned __int8 *)&qword_10230EBC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_10230EBC0))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0)
      v3 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) >> 3) & 1;
    else
      LOBYTE(v3) = 0;
    byte_10230EBB8 = v3;
    __cxa_guard_release(&qword_10230EBC0);
  }
  return byte_10230EBB8;
}

void sub_1013F63F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230EBC0);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F6408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 8);
  return 1;
}

uint64_t sub_1013F646C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 8);
}

void sub_1013F64C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;

  v6 = *(double *)(a4 + 76);
  v7 = *(double *)(a1 + 408);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4B70);
  v8 = v6 - v7;
  v9 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_100204BE4(a1 + 280);
    v11 = v10;
    v12 = *(_DWORD *)(a1 + 392);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v23 = 68290307;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2050;
    v28 = 2;
    v29 = 2049;
    v30 = v8;
    v31 = 2049;
    v32 = v11;
    v33 = 1025;
    v34 = v12;
    v35 = 2049;
    v36 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onGpsNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{private}.09f\", \"harvestInterval_s\":\"%{private}.09f\", \"maxHarvestPointCount\":%{private}d, \"curHarvestPointCount\":%{private}lu}", (uint8_t *)&v23, 0x40u);
  }
  sub_100204BE4(a1 + 280);
  if (v8 >= v14
    && ((*(_DWORD *)(a1 + 392) & 0x80000000) != 0
     || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 392)))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 232))(*(_QWORD *)(a1 + 56)) & 1) != 0)
    {
      v15 = sub_1013F67CC(a1);
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352), v15, 1, 1);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a4 + 76);
      if ((v16 & 1) == 0)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021B4B70);
        v17 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          v23 = 68289539;
          v24 = 0;
          v25 = 2082;
          v26 = "";
          v27 = 2050;
          v28 = 2;
          v29 = 2049;
          *(_QWORD *)&v30 = (int)v15;
          v18 = "{\"msg%{public}.0s\":\"#warning: could not scan wifi\", \"subHarvester\":%{public, location:CLSubHarvest"
                "erIdentifier}lld, \"scanType\":%{private, location:CLWifiService_Type::ScanType}lld}";
          v19 = v17;
          v20 = OS_LOG_TYPE_DEFAULT;
          v21 = 38;
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, (uint8_t *)&v23, v21);
        }
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B4B70);
      v22 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v23 = 68289282;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2050;
        v28 = 2;
        v18 = "{\"msg%{public}.0s\":\"wifi not powered on; not scanning\", \"subHarvester\":%{public, location:CLSubHarve"
              "sterIdentifier}lld}";
        v19 = v22;
        v20 = OS_LOG_TYPE_DEBUG;
        v21 = 28;
        goto LABEL_18;
      }
    }
  }
}

uint64_t sub_1013F67CC(uint64_t a1)
{
  unsigned __int8 v1;
  char *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v1 = atomic_load((unsigned __int8 *)&qword_10230EBD0);
  if ((v1 & 1) == 0)
  {
    v8 = a1;
    v9 = __cxa_guard_acquire(&qword_10230EBD0);
    a1 = v8;
    if (v9)
    {
      dword_10230EBC8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 56) + 72))(*(_QWORD *)(v8 + 56));
      __cxa_guard_release(&qword_10230EBD0);
      a1 = v8;
    }
  }
  v2 = (char *)&unk_101CA1A70;
  if ((dword_10230EBC8 & 0x80000) != 0)
  {
    v3 = 7;
  }
  else
  {
    v2 = (char *)&unk_101CA1A77;
    v3 = 2;
  }
  v4 = *(unsigned int *)(a1 + 416);
  v5 = v2[v4];
  *(_DWORD *)(a1 + 416) = ((int)v4 + 1) % v3;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4B70);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v10[0] = 68289539;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = 2;
    v15 = 2049;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"next scan type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"nextScanType\":%{private, location:CLWifiService_Type::ScanType}lld}", (uint8_t *)v10, 0x26u);
  }
  return v5;
}

void sub_1013F695C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230EBD0);
  _Unwind_Resume(a1);
}

void sub_1013F6974(uint64_t a1, _OWORD *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  NSObject *v15;
  char v16;
  void *__p[2];
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;

  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 48))(*(_QWORD *)(a1 + 352), __p);
  v9 = *(_DWORD *)(a1 + 392);
  if (v9 < 0)
  {
    v12 = -1;
    v11 = 1;
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v11 = v9 - v10 == -1;
    if (v9 == v10)
      goto LABEL_3;
    v12 = v9 - v10;
  }
  v13 = 0;
  v14 = 1;
  do
  {
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3) <= v13)
      break;
    if (!sub_1013F6C3C(a1, a2, *a3 + 88 * v13, v8, a4))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B4B70);
      v15 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289282;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2050;
        v24 = 2;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Failed to harvest wifi point\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
    }
    v13 = v14;
    v16 = v12 > v14++ || v11;
  }
  while ((v16 & 1) != 0);
LABEL_3:
  sub_100D05194(a1);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1013F6B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1013F6B88(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 384), "count");
}

void sub_1013F6B90(uint64_t a1)
{
  double v2;
  uint64_t v3;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 384), "pruneSecondaryDataOlderThan:", v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1));
  sub_100CDADEC();
  v3 = *(_QWORD *)(a1 + 448);
  if (v3)
    sub_1004F7548(v3);
}

void sub_1013F6C00(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 2);
  v2 = *(_QWORD *)(a1 + 448);
  if (v2)
    sub_1004F73B0(v2);
}

BOOL sub_1013F6C3C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  NSObject *v9;
  int v10;
  NSObject *v11;
  _BOOL8 result;
  int v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  std::string *v23;
  id v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  std::string::size_type v28;
  int v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  char *v34;
  NSObject *v35;
  uint64_t **v36;
  uint64_t *v37;
  NSObject *v38;
  uint64_t v39;
  std::string::size_type v40;
  _QWORD v41[2];
  uint64_t (*v42)(uint64_t, unint64_t);
  void *v43;
  uint64_t v44;
  std::string::size_type v45;
  _BYTE buf[28];
  __int16 v47;
  std::string *v48;
  __int16 v49;
  uint64_t v50;
  std::string v51;

  if (*(_DWORD *)(a3 + 36) != 2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B4B70);
    v14 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v45 = *(_QWORD *)a3;
    sub_1000C2150(&v45, &v51);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v51;
    else
      v15 = (std::string *)v51.__r_.__value_.__r.__words[0];
    v16 = *(_DWORD *)(a3 + 36);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 2;
    v47 = 2081;
    v48 = v15;
    v49 = 1025;
    LODWORD(v50) = v16;
    v17 = "{\"msg%{public}.0s\":\"not an infrastructure ap, not harvesting\", \"subHarvester\":%{public, location:CLSubHa"
          "rvesterIdentifier}lld, \"macAddress\":%{private, location:escape_only}s, \"mode\":%{private}d}";
    v18 = v14;
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, v17, buf, 0x2Cu);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 352) + 40))(*(_QWORD *)(a1 + 352), *(unsigned int *)(a3 + 32)))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B4B70);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      v10 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 2;
      v47 = 1025;
      LODWORD(v48) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"bad wifi RSSI\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rssi\":%{private}d}", buf, 0x22u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B4B70);
    }
    v11 = qword_1022A0208;
    result = os_signpost_enabled((os_log_t)qword_1022A0208);
    if (result)
    {
      v13 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 2;
      v47 = 1025;
      LODWORD(v48) = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "bad wifi RSSI", "{\"msg%{public}.0s\":\"bad wifi RSSI\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rssi\":%{private}d}", buf, 0x22u);
      return 0;
    }
    return result;
  }
  if (sub_1002058D0(a3))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B4B70);
    v19 = qword_1022A0208;
    v20 = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v20)
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 2;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ignoring _nomap ssid\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      return 0;
    }
    return result;
  }
  *(_QWORD *)buf = *(_QWORD *)a3;
  v21 = sub_100129380((uint64_t)buf);
  v45 = v21;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v42 = sub_1013F76FC;
  v43 = &unk_1021B4B18;
  v44 = a1;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || (v22 = v42((uint64_t)v41, v21),
        v22 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24))))
  {
    v23 = (std::string *)objc_alloc_init((Class)CLPWifiAPLocation);
    v24 = sub_1001FFF00(a1, a2);
    unk_10231AF20(v23, "setLocation:", v24);

    v51.__r_.__value_.__r.__words[0] = *(_QWORD *)a3;
    sub_1000C2150(&v51, (std::string *)buf);
    if (buf[23] >= 0)
      v25 = buf;
    else
      v25 = *(_BYTE **)buf;
    unk_10231AF28(v23, "setMac:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    unk_10231AF30(v23, "setChannel:", *(unsigned int *)(a3 + 40));
    if (*(char *)(a3 + 31) < 0)
    {
      sub_100115CE4(buf, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)(a3 + 8);
      *(_QWORD *)&buf[16] = *(_QWORD *)(a3 + 24);
    }
    v31 = buf[23];
    if (buf[23] < 0)
      v31 = *(_QWORD *)&buf[8];
    unk_10231AF38(v23, "setHidden:", v31 == 0);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    unk_10231AF40(v23, "setRssi:", *(unsigned int *)(a3 + 32));
    unk_10231AF48(v23, "setScanTimestamp:", *(double *)(a3 + 56));
    v32 = 1;
    switch(a5)
    {
      case -1:
      case 13:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021B4B70);
        v33 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a5;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#Warning skipping harvesting CLWifiService_Type::ScanType %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021B4B70);
          LODWORD(v51.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v51.__r_.__value_.__r.__words[0]) = a5;
          v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#Warning skipping harvesting CLWifiService_Type::ScanType %d", &v51);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLSubHarvesterWifi::harvestWifi(const CLDaemonLocation &, const CLWifiService_Type::AccessPoint &, const std::string &, CLWifiService_Type::ScanType)", "%s\n", v34);
          goto LABEL_63;
        }
        break;
      case 0:
        goto LABEL_77;
      case 1:
        v32 = 2;
        goto LABEL_77;
      case 2:
        v32 = 3;
        goto LABEL_77;
      case 3:
        v32 = 4;
        goto LABEL_77;
      case 4:
        v32 = 5;
        goto LABEL_77;
      case 5:
        v32 = 6;
        goto LABEL_77;
      case 6:
        v32 = 7;
        goto LABEL_77;
      case 7:
        v32 = 8;
        goto LABEL_77;
      case 8:
        v32 = 9;
        goto LABEL_77;
      case 9:
        v32 = 10;
        goto LABEL_77;
      case 10:
        v32 = 11;
        goto LABEL_77;
      case 11:
        v32 = 12;
        goto LABEL_77;
      case 12:
        v32 = 13;
LABEL_77:
        unk_10231AF50(v23, "setScanType:", v32);
        break;
      default:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021B4B70);
        v35 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a5;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "Unknown scan type for wifi harvesting: %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021B4B70);
          LODWORD(v51.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v51.__r_.__value_.__r.__words[0]) = a5;
          v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "Unknown scan type for wifi harvesting: %d", &v51);
          sub_100512490("Generic", 1, 0, 0, "BOOL CLSubHarvesterWifi::harvestWifi(const CLDaemonLocation &, const CLWifiService_Type::AccessPoint &, const std::string &, CLWifiService_Type::ScanType)", "%s\n", v34);
LABEL_63:
          if (v34 != buf)
            free(v34);
        }
        break;
    }
    objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v23, v24, 3);
    ++*(_DWORD *)(a1 + 208);
    v36 = (uint64_t **)(a1 + 424);
    *(_QWORD *)buf = &v45;
    v37 = sub_10006221C((uint64_t **)(a1 + 424), &v45, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
    ++v37[5];
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B4B70);
    v38 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v45;
      v39 = sub_10006221C(v36, &v45, (uint64_t)&unk_101B9EB60, (uint64_t **)buf)[5];
      *(_DWORD *)buf = 68289795;
      *(_WORD *)&buf[8] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 2;
      v47 = 2113;
      v48 = v23;
      v49 = 2049;
      v50 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"wifiHarvest\":%{private, location:escape_only}@, \"measurementCount\":%{private}lu}", buf, 0x30u);
    }

    return 1;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4B70);
  v26 = qword_1022A0208;
  result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v40 = *(_QWORD *)a3;
    sub_1000C2150(&v40, &v51);
    v27 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
    v28 = v51.__r_.__value_.__r.__words[0];
    v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
    v30 = &v51;
    *(_DWORD *)buf = 68289795;
    if (v27 < 0)
      v30 = (std::string *)v28;
    *(_WORD *)&buf[8] = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 2;
    v47 = 2081;
    v48 = v30;
    v49 = 1025;
    LODWORD(v50) = v29;
    v17 = "{\"msg%{public}.0s\":\"exceeds max locations - ignoring\", \"subHarvester\":%{public, location:CLSubHarvesterI"
          "dentifier}lld, \"macAddress\":%{private, location:escape_only}s, \"maxHarvestPointsPer\":%{private}d}";
    v18 = v26;
    goto LABEL_17;
  }
  return result;
}

void sub_1013F7684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 73) < 0)
    operator delete(*(void **)(v24 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013F76FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(v2 + 432);
  if (!v3)
    return 0;
  v4 = (_QWORD *)(v2 + 432);
  v5 = (_QWORD *)(v2 + 432);
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v4 && v5[4] <= a2)
    return v5[5];
  else
    return 0;
}

void sub_1013F7750(uint64_t a1)
{
  id v2;
  id v3;
  CLHUploadRequest *v4;
  id v5;
  CLHUploadRequest *v6;
  id v7;
  CLHUploadRequest *v8;

  v2 = objc_alloc_init((Class)CLPCellWifiCollectionRequest);
  objc_msgSend(v2, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
  v3 = objc_msgSend(*(id *)(a1 + 384), "homeArchive");
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "overwritePrimaryObject:", v2);
    v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", v3);
    -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v4);

  }
  v5 = objc_msgSend(*(id *)(a1 + 384), "workArchive");
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "overwritePrimaryObject:", v2);
    v6 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", v5);
    -[CLHUploadRequest setEndpoint:](v6, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v6);

  }
  v7 = objc_msgSend(*(id *)(a1 + 384), "mainArchive");
  if (objc_msgSend(v7, "count"))
  {
    objc_msgSend(v7, "overwritePrimaryObject:", v2);
    v8 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", v7);
    -[CLHUploadRequest setEndpoint:](v8, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint"));
    objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v8);

  }
  sub_100008848(a1 + 424, *(_QWORD **)(a1 + 432));
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 432;
}

uint64_t sub_1013F78D0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021B4A50;
  v2 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v2)
    sub_1013F79F4(a1 + 448, v2);
  sub_100008848(a1 + 424, *(_QWORD **)(a1 + 432));
  sub_100261F44(a1 + 368);
  sub_100261F44(a1 + 352);
  return sub_100429668(a1);
}

void sub_1013F792C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021B4A50;
  v2 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v2)
    sub_1013F79F4(a1 + 448, v2);
  sub_100008848(a1 + 424, *(_QWORD **)(a1 + 432));
  sub_100261F44(a1 + 368);
  sub_100261F44(a1 + 352);
  sub_100429668(a1);
  operator delete();
}

void sub_1013F799C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1013F79C8(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_1013F79F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_QWORD *)(a2 + 24) = off_1021B19E0;
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    if (*(char *)(a2 + 87) < 0)
      operator delete(*(void **)(a2 + 64));
    sub_100261F44(a2 + 8);
    operator delete();
  }
}

void sub_1013F7A64()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1013F7B00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1013F7B18()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1013F7BA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F7BBC()
{
  return sub_1011E780C((uint64_t)&xmmword_10230EB88, 1, 2, 2, 1, 30.0, 43200.0, 43200.0);
}

BOOL sub_1013F7BF8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double v6;
  double v7;
  _BOOL8 result;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _BYTE v26[10];
  uint64_t v27;
  uint8_t buf[4];
  _BYTE v29[10];
  uint64_t v30;

  v4 = *(_DWORD *)(a1 + 128);
  if (!v4 || (v5 = *(_DWORD *)(a2 + 128)) == 0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v10 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_DWORD *)(a1 + 128);
      v12 = *(_DWORD *)(a2 + 128);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v29 = v11;
      *(_WORD *)&v29[4] = 1026;
      *(_DWORD *)&v29[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Location equality comparison failed, unknown location type,%{public}d,%{public}d", buf, 0xEu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v13 = *(_DWORD *)(a1 + 128);
    v14 = *(_DWORD *)(a2 + 128);
    v25 = 67240448;
    *(_DWORD *)v26 = v13;
    *(_WORD *)&v26[4] = 1026;
    *(_DWORD *)&v26[6] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "Location equality comparison failed, unknown location type,%{public}d,%{public}d", &v25, 14);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL cllcf::LCFusionProviderLocation::checkLocationTypesAndTimestampsEquality(const LCFusionProviderLocation &) const", "%s\n", v15);
LABEL_30:
    if (v16 != buf)
      free(v16);
    return 0;
  }
  v6 = *(double *)(a1 + 8);
  if (v6 > 0.0)
  {
    v7 = *(double *)(a2 + 8);
    if (v7 > 0.0)
    {
      result = 0;
      if (v4 == v5 && vabdd_f64(v6, v7) < 2.22044605e-16)
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
        v9 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Location equality comparison, location types and timestamps are identical.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
          LOWORD(v25) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "Location equality comparison, location types and timestamps are identical.", &v25, 2);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL cllcf::LCFusionProviderLocation::checkLocationTypesAndTimestampsEquality(const LCFusionProviderLocation &) const", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
        return 1;
      }
      return result;
    }
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
  v17 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)v29 = v18;
    *(_WORD *)&v29[8] = 2050;
    v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Location equality comparison failed, invalid location ios timestamp,%{public}.3f,%{public}.3f", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(a2 + 8);
    v25 = 134349312;
    *(_QWORD *)v26 = v20;
    *(_WORD *)&v26[8] = 2050;
    v27 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "Location equality comparison failed, invalid location ios timestamp,%{public}.3f,%{public}.3f", &v25, 22);
    v16 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL cllcf::LCFusionProviderLocation::checkLocationTypesAndTimestampsEquality(const LCFusionProviderLocation &) const", "%s\n", v22);
    goto LABEL_30;
  }
  return result;
}

void sub_1013F80D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1013F80DC(uint64_t a1, uint64_t a2, double a3)
{
  long double v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 4);
  if (*(double *)(a2 + 20) >= a3)
    a3 = *(double *)(a2 + 20);
  *(double *)(a1 + 40) = a3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 96);
  sub_100512B2C(*(long double *)(a1 + 24));
  sub_100080DCC(*(long double *)(a1 + 32));
  if (*(double *)(a1 + 56) <= 0.0)
    *(_QWORD *)(a1 + 48) = 0;
  if (*(double *)(a1 + 88) <= 0.0)
    *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  if (*(double *)(a1 + 104) <= 0.0)
  {
    *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
  else
  {
    v4 = *(double *)(a1 + 96);
    if (v4 >= 0.0)
      sub_1001C6800(v4);
  }
}

uint64_t sub_1013F81A8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 128) < 0xFu) & (0x20Eu >> *(_DWORD *)(a1 + 128));
}

double sub_1013F81C4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;

  if (*(double *)(a1 + 16) <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v12 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,ProviderLoc,getAge called while MCT not set", buf, 2u);
    }
    v11 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
      LOWORD(v24) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,ProviderLoc,getAge called while MCT not set", &v24, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval cllcf::LCFusionProviderLocation::getAge() const", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v2 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v3 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v4 = sub_100B30608(v3, buf);
      v5 = *(double *)(a1 + 16);
      v6 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v7 = sub_100B30608(v6, buf);
      v8 = sub_100B303DC();
      v9 = sub_100B309E0(v8);
      *(_DWORD *)buf = 134218496;
      v31 = v4 - v5;
      v32 = 2048;
      v33 = v7;
      v34 = 2048;
      v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ProviderLoc,getAge,age,%.3f,now_mct,%.3f,propagation_us,%.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
      v14 = qword_1022A01B8;
      v15 = sub_1005EEB24();
      v16 = *(double *)(a1 + 16);
      v17 = sub_1005EEB24();
      v18 = sub_100B303DC();
      v24 = 134218496;
      v25 = v15 - v16;
      v26 = 2048;
      v27 = v17;
      v28 = 2048;
      v29 = sub_100B309E0(v18);
      LODWORD(v23) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "ProviderLoc,getAge,age,%.3f,now_mct,%.3f,propagation_us,%.3f", COERCE_DOUBLE(&v24), v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval cllcf::LCFusionProviderLocation::getAge() const", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v10 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    return sub_100B30608(v10, buf) - *(double *)(a1 + 16);
  }
  return v11;
}

void sub_1013F8564(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_1013F8570(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *(double *)(a1 + 16);
  if (v2 > 0.0)
    return *a2 - v2;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Error,ProviderLoc,getAge called while MCT not set", buf, 2u);
  }
  v3 = -1.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,ProviderLoc,getAge called while MCT not set", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval cllcf::LCFusionProviderLocation::getAge(const CFTimeInterval &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v3;
}

void sub_1013F871C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1013F8728(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  double v69;
  uint8_t buf[4];
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  int v99;
  __int16 v100;
  double v101;

  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
  v2 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 40);
    v26 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 80);
    v9 = *(_QWORD *)(a1 + 96);
    v28 = *(_QWORD *)(a1 + 88);
    v30 = *(_QWORD *)(a1 + 104);
    v32 = *(_DWORD *)(a1 + 120);
    v34 = *(_QWORD *)(a1 + 112);
    v36 = *(unsigned __int8 *)(a1 + 124);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_DWORD *)buf = 134352897;
    v71 = v10;
    v72 = 2050;
    v73 = v4;
    v74 = 1026;
    v75 = v3;
    v76 = 2049;
    v77 = v5;
    v78 = 2049;
    v79 = v6;
    v80 = 2049;
    v81 = v7;
    v82 = 2049;
    v83 = v8;
    v84 = 2049;
    v85 = v9;
    v86 = 2049;
    v87 = v24;
    v88 = 2050;
    v89 = v26;
    v90 = 2050;
    v91 = v28;
    v92 = 2050;
    v93 = v30;
    v94 = 1026;
    v95 = v32;
    v96 = 2050;
    v97 = v34;
    v98 = 1026;
    v99 = v36;
    v100 = 2050;
    v101 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ProviderLoc:Log,%{public}.3f,%{public}.3f,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}.3f", buf, 0x96u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v37 = qword_1022A01B8;
    v12 = *(_DWORD *)(a1 + 128);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 80);
    v25 = *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 88);
    v19 = *(_QWORD *)(a1 + 96);
    v29 = *(_QWORD *)(a1 + 104);
    v31 = *(_DWORD *)(a1 + 120);
    v33 = *(_QWORD *)(a1 + 112);
    v35 = *(unsigned __int8 *)(a1 + 124);
    v20 = *(_QWORD *)(a1 + 8);
    v21 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v38 = 134352897;
    v39 = v20;
    v40 = 2050;
    v41 = v13;
    v42 = 1026;
    v43 = v12;
    v44 = 2049;
    v45 = v14;
    v46 = 2049;
    v47 = v15;
    v48 = 2049;
    v49 = v17;
    v50 = 2049;
    v51 = v18;
    v52 = 2049;
    v53 = v19;
    v54 = 2049;
    v55 = v16;
    v56 = 2050;
    v57 = v25;
    v58 = 2050;
    v59 = v27;
    v60 = 2050;
    v61 = v29;
    v62 = 1026;
    v63 = v31;
    v64 = 2050;
    v65 = v33;
    v66 = 1026;
    v67 = v35;
    v68 = 2050;
    v69 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "ProviderLoc:Log,%{public}.3f,%{public}.3f,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}.3f", &v38, 150);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "virtual void cllcf::LCFusionProviderLocation::debugPrint() const", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
}

void sub_1013F8AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1013F8ADC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  uint8_t buf[4];
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;

  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
  v6 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_DWORD *)(a1 + 128);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(a1 + 88);
    v17 = *(_QWORD *)(a1 + 96);
    v18 = *(_QWORD *)(a1 + 104);
    v19 = *(unsigned __int8 *)(a1 + 124);
    *(_DWORD *)buf = 134352643;
    v66 = v7;
    v67 = 2050;
    v68 = v8;
    v69 = 1026;
    v70 = v9;
    v71 = 2049;
    v72 = v10;
    v73 = 2049;
    v74 = v11;
    v75 = 2049;
    v76 = v12;
    v77 = 2049;
    v78 = v13;
    v79 = 2050;
    v80 = v14;
    v81 = 2049;
    v82 = v16;
    v83 = 2050;
    v84 = v15;
    v85 = 2049;
    v86 = v17;
    v87 = 2050;
    v88 = v18;
    v89 = 1026;
    v90 = v19;
    v91 = 1026;
    v92 = a3;
    v93 = 2082;
    v94 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ProviderLoc:PositionLog,%{public}.3f,%{public}.3f,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{public}.1f,%{private}.2f,%{public}.2f,%{private}.1f,%{public}.1f,%{public}d,%{public}d,%{public}s", buf, 0x8Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021B4C78);
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_DWORD *)(a1 + 128);
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 56);
    v28 = *(_QWORD *)(a1 + 80);
    v29 = *(_QWORD *)(a1 + 88);
    v30 = *(_QWORD *)(a1 + 96);
    v31 = *(_QWORD *)(a1 + 104);
    v32 = *(unsigned __int8 *)(a1 + 124);
    v35 = 134352643;
    v36 = v20;
    v37 = 2050;
    v38 = v21;
    v39 = 1026;
    v40 = v22;
    v41 = 2049;
    v42 = v23;
    v43 = 2049;
    v44 = v24;
    v45 = 2049;
    v46 = v25;
    v47 = 2049;
    v48 = v26;
    v49 = 2050;
    v50 = v27;
    v51 = 2049;
    v52 = v28;
    v53 = 2050;
    v54 = v29;
    v55 = 2049;
    v56 = v30;
    v57 = 2050;
    v58 = v31;
    v59 = 1026;
    v60 = v32;
    v61 = 1026;
    v62 = a3;
    v63 = 2082;
    v64 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "ProviderLoc:PositionLog,%{public}.3f,%{public}.3f,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{public}.1f,%{private}.2f,%{public}.2f,%{private}.1f,%{public}.1f,%{public}d,%{public}d,%{public}s", &v35, 140);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "virtual void cllcf::LCFusionProviderLocation::debugPrintLocation(const char *, int) const", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
}

void sub_1013F8DDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_1013F8DE8(uint64_t a1)
{
  __n128 result;

  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 40) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 56) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 72) = -1;
  *(__n128 *)(a1 + 80) = result;
  *(__n128 *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  return result;
}

void sub_1013F8E24(uint64_t a1)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 40) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 56) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 72) = -1;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 132) = _Q0;
  *(_DWORD *)(a1 + 140) = -1082130432;
  v10 = 0uLL;
  sub_1002B7674(a1 + 144, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_DWORD *)(a1 + 160) = 0;
}

void sub_1013F8EDC()
{
  operator delete();
}

_QWORD *sub_1013F8EF0(_QWORD *a1)
{
  *a1 = off_1021B4C10;
  sub_100261F44((uint64_t)(a1 + 18));
  return a1;
}

void sub_1013F8F20(_QWORD *a1)
{
  *a1 = off_1021B4C10;
  sub_100261F44((uint64_t)(a1 + 18));
  operator delete();
}

void sub_1013F8F60(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t sub_1013F8F8C(uint64_t a1)
{
  sub_100090AE4(a1, *(char **)(a1 + 8));
  return a1;
}

double sub_1013F8FB4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  double result;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a4[1];
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a5[1];
  *(_QWORD *)(a1 + 48) = *a5;
  *(_QWORD *)(a1 + 56) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_OWORD *)(a1 + 64) = xmmword_101CA1B68;
  *(_OWORD *)(a1 + 80) = unk_101CA1B78;
  *(_OWORD *)(a1 + 96) = xmmword_101CA1B88;
  *(_QWORD *)&result = 1092616192;
  *(_OWORD *)(a1 + 108) = *(__int128 *)((char *)&xmmword_101CA1B88 + 12);
  return result;
}

void sub_1013F905C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFAbsoluteTime Current;
  double v7;
  unsigned int v8;
  float v9;
  float v10;
  double v11;
  NSObject *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  double v28;
  double v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38;
  __int16 v39;
  CFAbsoluteTime v40;
  __int16 v41;
  double v42;
  uint8_t buf[8];
  _BYTE v44[10];
  __int16 v45;
  double v46;

  *(_QWORD *)a3 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a3 + 8) = Current;
  *(_DWORD *)(a3 + 16) = -1;
  *(_QWORD *)(a3 + 24) = 0;
  v7 = 0.0;
  if (*(int *)(a2 + 48) >= 30)
  {
    if (*(_BYTE *)(a1 + 121)
      && *(_BYTE *)(a1 + 122)
      && (v9 = *(float *)(a1 + 76), v9 > 0.0)
      && (v10 = *(float *)(a1 + 72), v10 > 0.0))
    {
      if (*(int *)(a2 + 40) < 1)
        v11 = 7.567717;
      else
        v11 = *(double *)a2 / v9;
      if (*(int *)(a2 + 44) <= 0)
        v13 = 1.8286;
      else
        v13 = *(double *)(a2 + 8);
      if (*(int *)(a2 + 52) <= 0)
        v14 = 498.0;
      else
        v14 = *(double *)(a2 + 24);
      if (*(int *)(a2 + 56) < 1)
        v15 = 0.369744;
      else
        v15 = *(double *)(a2 + 32) / sqrt(v10 * 0.55 * 9.81);
      sub_1015A2E04(buf, "constant");
      v16 = *(double *)sub_1013F95B4((uint64_t)&unk_10230EBD8, (const void **)buf);
      sub_1015A2E04(&v38, "activeEnergyBurned");
      v17 = *(double *)sub_1013F95B4((uint64_t)&unk_10230EBD8, (const void **)&v38);
      sub_1015A2E04(v36, "meanMaxHRPerDay");
      v27 = v17;
      v28 = v16;
      v29 = v15;
      v18 = *(double *)sub_1013F95B4((uint64_t)&unk_10230EBD8, (const void **)v36);
      sub_1015A2E04(v34, "meanRestingHRPerDay");
      v19 = v14;
      v20 = v13;
      v21 = *(double *)sub_1013F95B4((uint64_t)&unk_10230EBD8, (const void **)v34);
      v22 = *(double *)(a2 + 16);
      sub_1015A2E04(v32, "mean6MWTDPerDay");
      v23 = v11;
      v24 = *(double *)sub_1013F95B4((uint64_t)&unk_10230EBD8, (const void **)v32);
      sub_1015A2E04(__p, "meanWalkingSpeedPerDay");
      v7 = v28
         + v27 * v23
         + v18 * v20
         + v21 * v22
         + v24 * v19
         + *(double *)sub_1013F95B4((uint64_t)&unk_10230EBD8, (const void **)__p) * v29;
      *(double *)(a3 + 24) = v7;
      if (v31 < 0)
        operator delete(__p[0]);
      if (v33 < 0)
        operator delete(v32[0]);
      if (v35 < 0)
        operator delete(v34[0]);
      if (v37 < 0)
        operator delete(v36[0]);
      if (SBYTE3(v42) < 0)
        operator delete(v38);
      if (SBYTE3(v46) < 0)
        operator delete(*(void **)buf);
      sub_1018BEA14(buf, "CardioChangeEstimatorThreshold", &qword_101CA1BA8, 0);
      v8 = v7 > *(double *)v44;
    }
    else
    {
      v8 = 2;
    }
  }
  else
  {
    v8 = 3;
  }
  *(_DWORD *)(a3 + 16) = v8;
  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_1021B4C98);
  v12 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67175169;
    *(_DWORD *)&buf[4] = v8;
    *(_WORD *)v44 = 2049;
    *(CFAbsoluteTime *)&v44[2] = Current;
    v45 = 2049;
    v46 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Estimator,status,%{private}d,startTime,%{private}f,riskScore,%{private}f", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    LODWORD(v38) = 67175169;
    HIDWORD(v38) = v8;
    v39 = 2049;
    v40 = Current;
    v41 = 2049;
    v42 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "Estimator,status,%{private}d,startTime,%{private}f,riskScore,%{private}f", &v38, 28);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLCardioChange::EstimateResult CLCardioChangeEstimator::makeEstimate(const CLCardioChange::InputSample &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if (v8 <= 1)
    sub_100423B04(*(_QWORD *)a1, a3);
}

void sub_1013F9504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013F95B4(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_10019C424(a1, &v4, a2);
  if (!v2)
    sub_100263950("map::at:  key not found");
  return v2 + 56;
}

void sub_1013F95F0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _DWORD v25[2];
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 108) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v3;
  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_1021B4C98);
  v6 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 120);
    v8 = *(float *)(a1 + 84);
    v9 = *(_DWORD *)(a1 + 68);
    v10 = *(unsigned __int8 *)(a1 + 121);
    v11 = *(float *)(a1 + 72);
    v12 = *(unsigned __int8 *)(a1 + 122);
    v13 = *(float *)(a1 + 76);
    v14 = *(unsigned __int8 *)(a1 + 112);
    *(_DWORD *)buf = 67241985;
    v41 = v7;
    v42 = 2049;
    v43 = v8;
    v44 = 1025;
    v45 = v9;
    v46 = 1026;
    v47 = v10;
    v48 = 2049;
    v49 = v11;
    v50 = 1026;
    v51 = v12;
    v52 = 2049;
    v53 = v13;
    v54 = 1025;
    v55 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v15 = *(unsigned __int8 *)(a1 + 120);
    v16 = *(float *)(a1 + 84);
    v17 = *(_DWORD *)(a1 + 68);
    v18 = *(unsigned __int8 *)(a1 + 121);
    v19 = *(float *)(a1 + 72);
    v20 = *(unsigned __int8 *)(a1 + 122);
    v21 = *(float *)(a1 + 76);
    v22 = *(unsigned __int8 *)(a1 + 112);
    v25[0] = 67241985;
    v25[1] = v15;
    v26 = 2049;
    v27 = v16;
    v28 = 1025;
    v29 = v17;
    v30 = 1026;
    v31 = v18;
    v32 = 2049;
    v33 = v19;
    v34 = 1026;
    v35 = v20;
    v36 = 2049;
    v37 = v21;
    v38 = 1025;
    v39 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 2, "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", v25, 62);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLCardioChangeEstimator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

void sub_1013F9888(uint64_t a1, uint64_t **a2, double a3)
{
  uint64_t **v6;
  char *v7;
  char *v8;
  uint64_t **v9;
  int **v10;
  int **v11;
  int v12;
  int **v13;
  int **v14;
  uint64_t v15;
  void *__p;
  char *v17;
  uint64_t v18;
  int *v19;

  __p = 0;
  v17 = 0;
  v18 = 0;
  LODWORD(v19) = 0;
  v13 = &v19;
  v6 = sub_100041CE0(a2, (int *)&v19, (uint64_t)&unk_101B9EB60, (_DWORD **)&v13);
  sub_1013F99F4(a1, (uint64_t)&__p, *((double *)v6 + 5), a3);
  v7 = (char *)__p;
  v8 = v17;
  while (v7 != v8)
  {
    sub_100423B04(*(_QWORD *)(a1 + 16), (uint64_t)v7);
    v7 += 32;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v12 = 1;
  v19 = &v12;
  v9 = sub_100041CE0(a2, &v12, (uint64_t)&unk_101B9EB60, &v19);
  sub_1013F9D94(a1, (uint64_t)&v13, *((double *)v9 + 5), a3);
  v10 = v13;
  v11 = v14;
  if (v13 != v14)
  {
    do
    {
      sub_100423B04(*(_QWORD *)(a1 + 16), (uint64_t)v10);
      v10 += 4;
    }
    while (v10 != v11);
    v10 = v13;
  }
  if (v10)
  {
    v14 = v10;
    operator delete(v10);
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1013F99B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1013F99F4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  void *__p[4];
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;

  if (a3 == a4)
  {
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v8 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Up to date with processing data for VO2Max feature, startTime %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021B4C98);
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = *(void **)&a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "Up to date with processing data for VO2Max feature, startTime %f", COERCE_DOUBLE(__p));
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCardioChangeEstimator::calculateVO2MaxFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  memset(__p, 0, 24);
  v9 = (*(uint64_t (**)(_QWORD, void **, double, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), __p, a3, a4);
  if ((_DWORD)v9 == 100)
  {
    sub_1013FA138(a3, a4, v9, (uint64_t *)__p, a2);
  }
  else
  {
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v10 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349312;
      v21 = a3;
      v22 = 2050;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Estimator, failed to get VO2Max session records in time range, startTime: %{public}f, endTime: %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021B4C98);
      v15 = 134349312;
      v16 = a3;
      v17 = 2050;
      v18 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 16, "Estimator, failed to get VO2Max session records in time range, startTime: %{public}f, endTime: %{public}f", &v15, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLCardioChangeEstimator::calculateVO2MaxFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1013F9D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013F9D94(uint64_t a1, uint64_t a2, double a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  void *__p[4];
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;

  if (a3 == a4)
  {
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v8 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Up to date with processing data for HRRecovery feature, startTime %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021B4C98);
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = *(void **)&a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 0, "Up to date with processing data for HRRecovery feature, startTime %f", COERCE_DOUBLE(__p));
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCardioChangeEstimator::calculateHRRecoveryFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  memset(__p, 0, 24);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, void **, double, double))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0xFFFFFFFFLL, __p, a3, a4);
  if ((_DWORD)v9 == 100)
  {
    sub_1013FA4D0(a3, a4, v9, (uint64_t *)__p, a2);
  }
  else
  {
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v10 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349312;
      v21 = a3;
      v22 = 2050;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Estimator, failed to get HRRecovery session records in time range, startTime: %{public}f, endTime: %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021B4C98);
      v15 = 134349312;
      v16 = a3;
      v17 = 2050;
      v18 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 16, "Estimator, failed to get HRRecovery session records in time range, startTime: %{public}f, endTime: %{public}f", &v15, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLCardioChangeEstimator::calculateHRRecoveryFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1013FA110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013FA138(double a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v17;
  unint64_t v18;
  double *v19;
  char *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  double *v28;
  __int128 v29;
  double v30;
  unint64_t v31;
  double *v32;
  char *v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  double *v40;
  char *v41;
  __int128 v42;
  _QWORD *v43;
  double *v44;
  double v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;

  v7 = a1;
  v8 = a1 + 86400.0;
  v10 = *a4;
  v9 = a4[1];
  if (*a4 == v9)
    goto LABEL_49;
LABEL_2:
  v12 = 0;
  v13 = v7;
  v7 = v8;
  v14 = 0.0;
  do
  {
    v15 = *(double *)(v10 + 24);
    if (v15 < v13 || v15 >= v7)
    {
      v17 = 0.0;
      if (v14 > 0.0)
        v17 = v14 / (double)v12;
      v19 = *(double **)(a5 + 8);
      v18 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *(double **)a5;
        v22 = ((uint64_t)v19 - *(_QWORD *)a5) >> 5;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59)
          goto LABEL_70;
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 4 > v23)
          v23 = v24 >> 4;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
          v25 = 0x7FFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)sub_10025BA00(a5 + 16, v25);
          v21 = *(double **)a5;
          v19 = *(double **)(a5 + 8);
        }
        else
        {
          v26 = 0;
        }
        v27 = (double *)&v26[32 * v22];
        *v27 = 0.0;
        v27[1] = v13;
        *((_DWORD *)v27 + 4) = 0;
        v27[3] = v17;
        v28 = v27;
        if (v19 != v21)
        {
          do
          {
            v29 = *((_OWORD *)v19 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v19 - 2);
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 4;
            v19 -= 4;
          }
          while (v19 != v21);
          v21 = *(double **)a5;
        }
        v20 = (char *)(v27 + 4);
        *(_QWORD *)a5 = v28;
        *(_QWORD *)(a5 + 8) = v27 + 4;
        *(_QWORD *)(a5 + 16) = &v26[32 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v19 = 0.0;
        v19[1] = v13;
        *((_DWORD *)v19 + 4) = 0;
        v20 = (char *)(v19 + 4);
        v19[3] = v17;
      }
      *(_QWORD *)(a5 + 8) = v20;
      v8 = v7 + 86400.0;
      v9 = a4[1];
      v13 = v7;
      if (v10 == v9)
        goto LABEL_50;
      goto LABEL_2;
    }
    v14 = v14 + *(double *)(v10 + 136);
    ++v12;
    v10 += 144;
  }
  while (v10 != v9);
  if (v14 <= 0.0)
  {
    v8 = v7;
    goto LABEL_50;
  }
  v30 = v14 / (double)v12;
  v32 = *(double **)(a5 + 8);
  v31 = *(_QWORD *)(a5 + 16);
  if ((unint64_t)v32 < v31)
  {
    *v32 = 0.0;
    v32[1] = v13;
    *((_DWORD *)v32 + 4) = 0;
    v33 = (char *)(v32 + 4);
    v32[3] = v30;
    goto LABEL_48;
  }
  v34 = *(double **)a5;
  v35 = ((uint64_t)v32 - *(_QWORD *)a5) >> 5;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 59)
LABEL_70:
    sub_100259694();
  v37 = v31 - (_QWORD)v34;
  if (v37 >> 4 > v36)
    v36 = v37 >> 4;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
    v38 = 0x7FFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    v39 = (char *)sub_10025BA00(a5 + 16, v38);
    v34 = *(double **)a5;
    v32 = *(double **)(a5 + 8);
  }
  else
  {
    v39 = 0;
  }
  v40 = (double *)&v39[32 * v35];
  *v40 = 0.0;
  v40[1] = v13;
  v41 = &v39[32 * v38];
  *((_DWORD *)v40 + 4) = 0;
  v40[3] = v30;
  v33 = (char *)(v40 + 4);
  if (v32 != v34)
  {
    do
    {
      v42 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v40 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v40 - 1) = v42;
      v40 -= 4;
      v32 -= 4;
    }
    while (v32 != v34);
    v34 = *(double **)a5;
  }
  *(_QWORD *)a5 = v40;
  *(_QWORD *)(a5 + 8) = v33;
  *(_QWORD *)(a5 + 16) = v41;
  if (v34)
    operator delete(v34);
LABEL_48:
  *(_QWORD *)(a5 + 8) = v33;
  v8 = v7 + 86400.0;
LABEL_49:
  v13 = v7;
LABEL_50:
  if (v8 <= a2)
  {
    v43 = (_QWORD *)(a5 + 16);
    v44 = *(double **)(a5 + 8);
    do
    {
      v45 = v13;
      v13 = v8;
      if ((unint64_t)v44 >= *v43)
      {
        v46 = *(double **)a5;
        v47 = ((uint64_t)v44 - *(_QWORD *)a5) >> 5;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59)
          goto LABEL_70;
        v49 = *v43 - (_QWORD)v46;
        if (v49 >> 4 > v48)
          v48 = v49 >> 4;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_10025BA00(a5 + 16, v50);
          v46 = *(double **)a5;
          v44 = *(double **)(a5 + 8);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[32 * v47];
        *(_QWORD *)v52 = 0;
        *((double *)v52 + 1) = v45;
        *((_DWORD *)v52 + 4) = 0;
        *((_QWORD *)v52 + 3) = 0;
        v53 = v52;
        if (v44 != v46)
        {
          do
          {
            v54 = *((_OWORD *)v44 - 1);
            *((_OWORD *)v53 - 2) = *((_OWORD *)v44 - 2);
            *((_OWORD *)v53 - 1) = v54;
            v53 -= 32;
            v44 -= 4;
          }
          while (v44 != v46);
          v46 = *(double **)a5;
        }
        v44 = (double *)(v52 + 32);
        *(_QWORD *)a5 = v53;
        *(_QWORD *)(a5 + 8) = v52 + 32;
        *(_QWORD *)(a5 + 16) = &v51[32 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v44 = 0.0;
        v44[1] = v45;
        *((_DWORD *)v44 + 4) = 0;
        v44[3] = 0.0;
        v44 += 4;
      }
      *(_QWORD *)(a5 + 8) = v44;
      v8 = v13 + 86400.0;
    }
    while (v13 + 86400.0 <= a2);
  }
}

void sub_1013FA4D0(double a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v17;
  unint64_t v18;
  double *v19;
  char *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  double *v28;
  __int128 v29;
  double v30;
  unint64_t v31;
  double *v32;
  char *v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  double *v40;
  char *v41;
  __int128 v42;
  _QWORD *v43;
  double *v44;
  double v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;

  v7 = a1;
  v8 = a1 + 86400.0;
  v10 = *a4;
  v9 = a4[1];
  if (*a4 == v9)
    goto LABEL_49;
LABEL_2:
  v12 = 0;
  v13 = v7;
  v7 = v8;
  v14 = 0.0;
  do
  {
    v15 = *(double *)(v10 + 8);
    if (v15 < v13 || v15 >= v7)
    {
      v17 = 0.0;
      if (v14 > 0.0)
        v17 = v14 / (double)v12;
      v19 = *(double **)(a5 + 8);
      v18 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *(double **)a5;
        v22 = ((uint64_t)v19 - *(_QWORD *)a5) >> 5;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59)
          goto LABEL_70;
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 4 > v23)
          v23 = v24 >> 4;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
          v25 = 0x7FFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)sub_10025BA00(a5 + 16, v25);
          v21 = *(double **)a5;
          v19 = *(double **)(a5 + 8);
        }
        else
        {
          v26 = 0;
        }
        v27 = (double *)&v26[32 * v22];
        *v27 = 0.0;
        v27[1] = v13;
        *((_DWORD *)v27 + 4) = 1;
        v27[3] = v17;
        v28 = v27;
        if (v19 != v21)
        {
          do
          {
            v29 = *((_OWORD *)v19 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v19 - 2);
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 4;
            v19 -= 4;
          }
          while (v19 != v21);
          v21 = *(double **)a5;
        }
        v20 = (char *)(v27 + 4);
        *(_QWORD *)a5 = v28;
        *(_QWORD *)(a5 + 8) = v27 + 4;
        *(_QWORD *)(a5 + 16) = &v26[32 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v19 = 0.0;
        v19[1] = v13;
        *((_DWORD *)v19 + 4) = 1;
        v20 = (char *)(v19 + 4);
        v19[3] = v17;
      }
      *(_QWORD *)(a5 + 8) = v20;
      v8 = v7 + 86400.0;
      v9 = a4[1];
      v13 = v7;
      if (v10 == v9)
        goto LABEL_50;
      goto LABEL_2;
    }
    v14 = v14 + *(double *)(v10 + 112);
    ++v12;
    v10 += 160;
  }
  while (v10 != v9);
  if (!v12)
  {
    v8 = v7;
    goto LABEL_50;
  }
  v30 = v14 / (double)v12;
  v32 = *(double **)(a5 + 8);
  v31 = *(_QWORD *)(a5 + 16);
  if ((unint64_t)v32 < v31)
  {
    *v32 = 0.0;
    v32[1] = v13;
    *((_DWORD *)v32 + 4) = 1;
    v32[3] = v30;
    v33 = (char *)(v32 + 4);
    goto LABEL_48;
  }
  v34 = *(double **)a5;
  v35 = ((uint64_t)v32 - *(_QWORD *)a5) >> 5;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 59)
LABEL_70:
    sub_100259694();
  v37 = v31 - (_QWORD)v34;
  if (v37 >> 4 > v36)
    v36 = v37 >> 4;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
    v38 = 0x7FFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    v39 = (char *)sub_10025BA00(a5 + 16, v38);
    v34 = *(double **)a5;
    v32 = *(double **)(a5 + 8);
  }
  else
  {
    v39 = 0;
  }
  v40 = (double *)&v39[32 * v35];
  v41 = &v39[32 * v38];
  *v40 = 0.0;
  v40[1] = v13;
  *((_DWORD *)v40 + 4) = 1;
  v40[3] = v30;
  v33 = (char *)(v40 + 4);
  if (v32 != v34)
  {
    do
    {
      v42 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v40 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v40 - 1) = v42;
      v40 -= 4;
      v32 -= 4;
    }
    while (v32 != v34);
    v34 = *(double **)a5;
  }
  *(_QWORD *)a5 = v40;
  *(_QWORD *)(a5 + 8) = v33;
  *(_QWORD *)(a5 + 16) = v41;
  if (v34)
    operator delete(v34);
LABEL_48:
  *(_QWORD *)(a5 + 8) = v33;
  v8 = v7 + 86400.0;
LABEL_49:
  v13 = v7;
LABEL_50:
  if (v8 <= a2)
  {
    v43 = (_QWORD *)(a5 + 16);
    v44 = *(double **)(a5 + 8);
    do
    {
      v45 = v13;
      v13 = v8;
      if ((unint64_t)v44 >= *v43)
      {
        v46 = *(double **)a5;
        v47 = ((uint64_t)v44 - *(_QWORD *)a5) >> 5;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59)
          goto LABEL_70;
        v49 = *v43 - (_QWORD)v46;
        if (v49 >> 4 > v48)
          v48 = v49 >> 4;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_10025BA00(a5 + 16, v50);
          v46 = *(double **)a5;
          v44 = *(double **)(a5 + 8);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[32 * v47];
        *(_QWORD *)v52 = 0;
        *((double *)v52 + 1) = v45;
        *((_DWORD *)v52 + 4) = 1;
        *((_QWORD *)v52 + 3) = 0;
        v53 = v52;
        if (v44 != v46)
        {
          do
          {
            v54 = *((_OWORD *)v44 - 1);
            *((_OWORD *)v53 - 2) = *((_OWORD *)v44 - 2);
            *((_OWORD *)v53 - 1) = v54;
            v53 -= 32;
            v44 -= 4;
          }
          while (v44 != v46);
          v46 = *(double **)a5;
        }
        v44 = (double *)(v52 + 32);
        *(_QWORD *)a5 = v53;
        *(_QWORD *)(a5 + 8) = v52 + 32;
        *(_QWORD *)(a5 + 16) = &v51[32 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v44 = 0.0;
        v44[1] = v45;
        *((_DWORD *)v44 + 4) = 1;
        v44[3] = 0.0;
        v44 += 4;
      }
      *(_QWORD *)(a5 + 8) = v44;
      v8 = v13 + 86400.0;
    }
    while (v13 + 86400.0 <= a2);
  }
}

BOOL sub_1013FA874(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v4 = 86400.0 * floor(CFAbsoluteTimeGetCurrent() / 86400.0) - 7776000.0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v5 = sub_1004BD5D4(*(_QWORD *)(a1 + 16), &v11);
  if (v5 == 100)
  {
    sub_1013FA954((uint64_t *)&v11, (uint64_t)v9);
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    *(_QWORD *)(a2 + 64) = v10;
    v7 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v7;
    *(double *)a2 = v4;
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return v5 == 100;
}

void sub_1013FA934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013FA954(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _WORD v32[8];
  uint8_t buf[1632];

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v31 = 0;
    v30 = 0;
    v9 = 0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    do
    {
      switch(*(_DWORD *)(v3 + 16))
      {
        case 0xFFFFFFFF:
          if (qword_10229FF50 != -1)
            dispatch_once(&qword_10229FF50, &stru_1021B4C98);
          v18 = qword_10229FF58;
          if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Aggregate feature type not set for record", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF50 != -1)
              dispatch_once(&qword_10229FF50, &stru_1021B4C98);
            v32[0] = 0;
            LODWORD(v29) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 16, "Aggregate feature type not set for record", v32, v29);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 0, "CLCardioChange::RiskModelFeatureInput CLCardioChangeEstimator::computeRiskModelInputFromDailyAggregates(std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
          break;
        case 0:
          v21 = *(double *)(v3 + 24);
          if (v21 > 0.0)
          {
            v10 = v21 + v10;
            *(double *)(a2 + 8) = v10;
            ++v5;
          }
          break;
        case 1:
          v22 = *(double *)(v3 + 24);
          if (v22 > 0.0)
          {
            v11 = v22 + v11;
            *(double *)(a2 + 16) = v11;
            ++v6;
          }
          break;
        case 2:
          v23 = *(double *)(v3 + 24);
          if (v23 > 0.0)
          {
            v12 = v23 + v12;
            *(double *)(a2 + 24) = v12;
            ++v7;
          }
          break;
        case 3:
          v24 = *(double *)(v3 + 24);
          if (v24 > 0.0)
          {
            v13 = v24 + v13;
            *(double *)(a2 + 32) = v13;
            ++v8;
          }
          break;
        case 4:
          v25 = *(double *)(v3 + 24);
          if (v25 > 0.0)
          {
            v14 = v25 + v14;
            *(double *)(a2 + 40) = v14;
            ++v9;
          }
          break;
        case 5:
          v26 = *(double *)(v3 + 24);
          if (v26 > 0.0)
          {
            v15 = v26 + v15;
            *(double *)(a2 + 48) = v15;
            ++v30;
          }
          break;
        case 6:
          v27 = *(double *)(v3 + 24);
          if (v27 > 0.0)
          {
            v16 = v27 + v16;
            *(double *)(a2 + 56) = v16;
            LODWORD(v31) = v31 + 1;
          }
          break;
        case 7:
          v28 = *(double *)(v3 + 24);
          if (v28 > 0.0)
          {
            v17 = v28 + v17;
            *(double *)(a2 + 64) = v17;
            ++HIDWORD(v31);
          }
          break;
        default:
          break;
      }
      v3 += 32;
    }
    while (v3 != v4);
    if (v5)
      *(double *)(a2 + 8) = v10 / (double)v5;
    if (v6)
      *(double *)(a2 + 16) = v11 / (double)v6;
    if (v7)
      *(double *)(a2 + 24) = v12 / (double)v7;
    if (v8)
      *(double *)(a2 + 32) = v13 / (double)v8;
    if (v9)
      *(double *)(a2 + 40) = v14 / (double)v9;
    if (v30)
      *(double *)(a2 + 48) = v15 / (double)v30;
    if ((_DWORD)v31)
      *(double *)(a2 + 56) = v16 / (double)v31;
    if (HIDWORD(v31))
      *(double *)(a2 + 64) = v17 / (double)HIDWORD(v31);
  }
}

uint64_t sub_1013FAD4C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD v12[2];
  int v13;
  double v14;

  v3 = result;
  v12[0] = 0;
  v4 = *(double *)(a2 + 8);
  v12[1] = *(_QWORD *)a2;
  if (v4 > 0.0)
  {
    v13 = 8;
    v14 = v4;
    result = sub_100423B04(*(_QWORD *)(result + 16), (uint64_t)v12);
  }
  v5 = *(double *)(a2 + 16);
  if (v5 > 0.0)
  {
    v13 = 9;
    v14 = v5;
    result = sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  v6 = *(double *)(a2 + 24);
  if (v6 > 0.0)
  {
    v13 = 10;
    v14 = v6;
    result = sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  v7 = *(double *)(a2 + 32);
  if (v7 > 0.0)
  {
    v13 = 11;
    v14 = v7;
    result = sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  v8 = *(double *)(a2 + 40);
  if (v8 > 0.0)
  {
    v13 = 12;
    v14 = v8;
    result = sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  v9 = *(double *)(a2 + 48);
  if (v9 > 0.0)
  {
    v13 = 13;
    v14 = v9;
    result = sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  v10 = *(double *)(a2 + 56);
  if (v10 > 0.0)
  {
    v13 = 14;
    v14 = v10;
    result = sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  v11 = *(double *)(a2 + 64);
  if (v11 > 0.0)
  {
    v13 = 15;
    v14 = v11;
    return sub_100423B04(*(_QWORD *)(v3 + 16), (uint64_t)v12);
  }
  return result;
}

void sub_1013FAE9C(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  CFAbsoluteTime Current;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _BOOL4 v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  double v46;
  _BYTE v47[24];
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint8_t buf[4];
  _BYTE v60[18];
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;

  *(_QWORD *)a3 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a3 + 8) = Current;
  *(_DWORD *)(a3 + 16) = -1;
  *(_QWORD *)(a3 + 24) = 0;
  if (!*(_BYTE *)(a1 + 120))
  {
    *(_DWORD *)(a3 + 16) = 4;
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v32 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(CFAbsoluteTime *)v60 = Current;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Age not set, can't run risk model, startTime %f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v28 = qword_10229FF58;
    *(_DWORD *)v47 = 134217984;
    *(CFAbsoluteTime *)&v47[4] = Current;
    LODWORD(v46) = 12;
    v29 = "Age not set, can't run risk model, startTime %f";
LABEL_56:
    v31 = 1;
LABEL_57:
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v31, v29, v47, *(_QWORD *)&v46, *(_OWORD *)v47, *(_QWORD *)&v47[16]);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "CLCardioChange::EstimateResult CLCardioChangeEstimator::runRiskModel(CLCardioChange::RiskModelFeatureInput &)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
    return;
  }
  if (!*(_DWORD *)(a1 + 68))
  {
    *(_DWORD *)(a3 + 16) = 5;
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v33 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(CFAbsoluteTime *)v60 = Current;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Sex not set, can't run risk model startTime %f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v28 = qword_10229FF58;
    *(_DWORD *)v47 = 134217984;
    *(CFAbsoluteTime *)&v47[4] = Current;
    LODWORD(v46) = 12;
    v29 = "Sex not set, can't run risk model startTime %f";
    goto LABEL_56;
  }
  sub_1013FB684(a1, (uint64_t)a2);
  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_1021B4C98);
  v7 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_INFO))
  {
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    v10 = *((_QWORD *)a2 + 3);
    v11 = *((_QWORD *)a2 + 4);
    v12 = *((_QWORD *)a2 + 5);
    v13 = *((_QWORD *)a2 + 6);
    v14 = *((_QWORD *)a2 + 7);
    v15 = *((_QWORD *)a2 + 8);
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)v60 = v8;
    *(_WORD *)&v60[8] = 2048;
    *(_QWORD *)&v60[10] = v9;
    v61 = 2048;
    v62 = v10;
    v63 = 2048;
    v64 = v11;
    v65 = 2048;
    v66 = v12;
    v67 = 2048;
    v68 = v13;
    v69 = 2048;
    v70 = v14;
    v71 = 2048;
    v72 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Inputs used in the risk model after imputation,sessionVo2maxDailyMean_Window0to90_Mean,%.2f, sessionHRRecovery_DailyMean_Window0to90_Mean,%.2f, heartRateDailyMax_Window0To90_Mean,%.2f, sixMinuteWalkDistanceDailyMean_Window0To90_Mean,%.2f,walkingHeartRateAverageDailyMean_Window0To90_Mean, %.2f,walkingSpeedNormLegLengthDailyMax_Window0to90_Mean,%.2f,stairAscentSpeedDailyMean_Window0to90_Mean,%.2f, stairDescentSpeedDailyMean_Window0to90_Mean,%.2f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v34 = *((_QWORD *)a2 + 1);
    v35 = *((_QWORD *)a2 + 2);
    v36 = *((_QWORD *)a2 + 3);
    v37 = *((_QWORD *)a2 + 4);
    v38 = *((_QWORD *)a2 + 5);
    v39 = *((_QWORD *)a2 + 6);
    v40 = *((_QWORD *)a2 + 7);
    v41 = *((_QWORD *)a2 + 8);
    *(_DWORD *)v47 = 134219776;
    *(_QWORD *)&v47[4] = v34;
    *(_WORD *)&v47[12] = 2048;
    *(_QWORD *)&v47[14] = v35;
    *(_WORD *)&v47[22] = 2048;
    v48 = v36;
    v49 = 2048;
    v50 = v37;
    v51 = 2048;
    v52 = v38;
    v53 = 2048;
    v54 = v39;
    v55 = 2048;
    v56 = v40;
    v57 = 2048;
    v58 = v41;
    LODWORD(v46) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 1, "Inputs used in the risk model after imputation,sessionVo2maxDailyMean_Window0to90_Mean,%.2f, sessionHRRecovery_DailyMean_Window0to90_Mean,%.2f, heartRateDailyMax_Window0To90_Mean,%.2f, sixMinuteWalkDistanceDailyMean_Window0To90_Mean,%.2f,walkingHeartRateAverageDailyMean_Window0To90_Mean, %.2f,walkingSpeedNormLegLengthDailyMax_Window0to90_Mean,%.2f,stairAscentSpeedDailyMean_Window0to90_Mean,%.2f, stairDescentSpeedDailyMean_Window0to90_Mean,%.2f", COERCE_DOUBLE(v47), v46);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "CLCardioChange::EstimateResult CLCardioChangeEstimator::runRiskModel(CLCardioChange::RiskModelFeatureInput &)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  v16 = a2[1];
  if (v16 <= 0.0
    || (v17 = a2[2], v17 <= 0.0)
    || (v18 = a2[3], v18 <= 0.0)
    || (v19 = a2[4], v19 <= 0.0)
    || (v20 = a2[7], v20 <= 0.0)
    || (v21 = a2[8], v21 <= 0.0)
    || (v22 = a2[5], v22 <= 0.0)
    || (v23 = a2[6], v23 <= 0.0))
  {
    *(_DWORD *)(a3 + 16) = 2;
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v30 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Could not run risk model due to insufficient input data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021B4C98);
      v28 = qword_10229FF58;
      *(_WORD *)v47 = 0;
      LODWORD(v46) = 2;
      v29 = "Could not run risk model due to insufficient input data";
      goto LABEL_34;
    }
  }
  else
  {
    v24 = 0.0;
    if (*(_DWORD *)(a1 + 68) == 1)
      v24 = 1.0;
    v25 = 1.0
        / (exp(-(v24 * -0.580510263
               + 2.56936377
               + *(float *)(a1 + 84) * 0.0375412183
               + v16 * -0.0434542339
               + v17 * -0.00687964534
               + v18 * -0.018156946
               + v19 * -0.00298962705
               + v20 * -1.63084493
               + v21 * -3.3056337
               + v22 * -0.0141687166
               + v23 * -1.90431624))
         + 1.0);
    *(double *)(a3 + 24) = v25;
    sub_1018BEA14(buf, "CardioChangeRiskModelAlertThreshold", &qword_101CA1BB0, 0);
    v26 = v25 >= *(double *)&v60[4];
    *(_DWORD *)(a3 + 16) = v26;
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_1021B4C98);
    v27 = qword_10229FF58;
    if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)v60 = v25;
      *(_WORD *)&v60[8] = 1024;
      *(_DWORD *)&v60[10] = v26;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Risk model run successful, score, %f, status, %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_1021B4C98);
      v28 = qword_10229FF58;
      *(_DWORD *)v47 = 134218240;
      *(double *)&v47[4] = v25;
      *(_WORD *)&v47[12] = 1024;
      *(_DWORD *)&v47[14] = v26;
      LODWORD(v46) = 18;
      v29 = "Risk model run successful, score, %f, status, %d";
LABEL_34:
      v31 = 0;
      goto LABEL_57;
    }
  }
}

double sub_1013FB684(uint64_t a1, uint64_t a2)
{
  double result;

  if (*(double *)(a2 + 8) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 8) = 0;
  }
  if (*(double *)(a2 + 16) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 16) = 0;
  }
  if (*(double *)(a2 + 24) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 24) = 0;
  }
  if (*(double *)(a2 + 32) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 32) = 0;
  }
  if (*(double *)(a2 + 40) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 40) = 0;
  }
  if (*(double *)(a2 + 48) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 48) = 0;
  }
  if (*(double *)(a2 + 56) == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a2 + 56) = 0;
  }
  result = *(double *)(a2 + 64);
  if (result == 0.0)
  {
    sub_1004BD970(*(_QWORD *)(a1 + 16));
    result = 0.0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  return result;
}

void sub_1013FB84C(id a1)
{
  qword_10229FF58 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

uint64_t sub_1013FB878(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1013FB8F4((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1013FB8DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100090AE4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1013FB8F4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_1006754A0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1013FB974((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

double sub_1013FB974@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(v7, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(double *)(a2 + 24);
  *((double *)v6 + 7) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1013FB9FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1013FBA18()
{
  uint64_t i;
  const void *v2[4];
  _QWORD v3[4];
  _QWORD v4[4];
  _QWORD v5[4];
  _QWORD v6[4];
  _QWORD v7[4];

  sub_1015A2E04(v2, "constant");
  v2[3] = (const void *)0x401ED552E2FBE33BLL;
  sub_1015A2E04(v3, "activeEnergyBurned");
  v3[3] = 0x3F8700CD855970B5;
  sub_1015A2E04(v4, "meanMaxHRPerDay");
  v4[3] = 0xC0084A6FC58AB92CLL;
  sub_1015A2E04(v5, "meanRestingHRPerDay");
  v5[3] = 0x3F9BABEAD4F5903ALL;
  sub_1015A2E04(v6, "mean6MWTDPerDay");
  v6[3] = 0xBF69BB2788DB0575;
  sub_1015A2E04(v7, "meanWalkingSpeedPerDay");
  v7[3] = 0xC02AE4DD0D8CB07DLL;
  sub_1013FB878((uint64_t)&unk_10230EBD8, v2, 6);
  for (i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v7[i + 2]) < 0)
      operator delete((void *)v7[i]);
  }
  return __cxa_atexit((void (*)(void *))sub_1013F8F8C, &unk_10230EBD8, (void *)&_mh_execute_header);
}

void sub_1013FBBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void sub_1013FBC2C()
{
  JUMPOUT(0x1013FBC24);
}

void sub_1013FBC34()
{
  operator new();
}

BOOL sub_1013FBC78()
{
  sub_100197040();
  return sub_10019DF90();
}

uint64_t sub_1013FBC8C()
{
  sub_100197040();
  return sub_100195F08();
}

BOOL sub_1013FBCA4()
{
  id v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  _BOOL4 v7;

  v0 = -[objc_class getActivePairedDevice](-[objc_class sharedInstance](off_1022FFCE8(), "sharedInstance"), "getActivePairedDevice");
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B4D58);
  v1 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v7 = v0 != 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "@GtsMgr, nrIsPairingActive, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B4D58);
    v5[0] = 67240192;
    v5[1] = v0 != 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, nrIsPairingActive, %{public}d", v5, 8);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileSyncManagerExternal::isPairingActive() const", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v0 != 0;
}

id sub_1013FBE78()
{
  id v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  int v7;

  v0 = objc_msgSend(-[objc_class getActivePairedDevice](-[objc_class sharedInstance](off_1022FFCE8(), "sharedInstance"), "getActivePairedDevice"), "supportsCapability:", objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("58F7E0B5-513C-49C6-BE68-EACC9107342D")));
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B4D58);
  v1 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "GtsMgr, canDownload, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B4D58);
    v5[0] = 67109120;
    v5[1] = (_DWORD)v0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "GtsMgr, canDownload, %d", v5);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileSyncManagerExternal::canWatchDownloadTiles() const", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v0;
}

double sub_1013FC064()
{
  id v0;
  id v1;
  double v2;
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v0 = -[objc_class getActivePairedDevice](-[objc_class sharedInstance](off_1022FFCE8(), "sharedInstance"), "getActivePairedDevice");
  v1 = objc_msgSend(v0, "valueForProperty:", off_1022FFCF0());
  if (v1)
  {
    objc_msgSend(v1, "timeIntervalSinceNow");
    return -v2;
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B4D58);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsSync, inactive nil", buf, 2u);
    }
    v3 = 1209600.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B4D58);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, inactive nil", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLTileSyncManagerExternal::getWatchInactiveTime() const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return v3;
}

BOOL sub_1013FC23C()
{
  return sub_10019CFA0() == 1;
}

Class sub_1013FC258()
{
  Class result;

  if (qword_10230EBF8 != -1)
    dispatch_once(&qword_10230EBF8, &stru_1021B4D38);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_10230EBF0 = (uint64_t)result;
  off_1022FFCE8 = sub_1013FC2B4;
  return result;
}

uint64_t sub_1013FC2B4()
{
  return qword_10230EBF0;
}

void sub_1013FC2C0(id a1)
{
  qword_10230EC00 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

void sub_1013FC2E8(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1013FC314()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_10230EBF8 != -1)
    dispatch_once(&qword_10230EBF8, &stru_1021B4D38);
  v0 = (uint64_t *)dlsym((void *)qword_10230EC00, "NRDevicePropertyLastInactiveDate");
  if (v0)
  {
    result = *v0;
    qword_10230EC08 = result;
  }
  else
  {
    result = qword_10230EC08;
  }
  off_1022FFCF0 = sub_1013FC38C;
  return result;
}

uint64_t sub_1013FC38C()
{
  return qword_10230EC08;
}

void sub_1013FC5C4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

BOOL sub_1013FC5F0()
{
  return os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT);
}

BOOL sub_1013FC604()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 552), OS_LOG_TYPE_INFO);
}

BOOL sub_1013FC614()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 552));
}

uint64_t sub_1013FC620(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void *a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  __int128 v34[3];
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t buf;
  __int16 v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;

  v11 = (std::__shared_weak_count *)a4[1];
  v39 = *a4;
  v40 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count *)a5[1];
  v37 = *a5;
  v38 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)a6[1];
  v35 = *a6;
  v36 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v34[0] = xmmword_10230EC10;
  v34[1] = unk_10230EC20;
  v34[2] = xmmword_10230EC30;
  sub_100D04860(a1, a2, 12, &v39, &v37, &v35, (uint64_t)a8, a7, v34);
  v20 = v36;
  if (v36)
  {
    v21 = (unint64_t *)&v36->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_QWORD *)a1 = off_1021B4DA8;
  *(_QWORD *)(a1 + 352) = off_1021B4E98;
  *(_QWORD *)(a1 + 360) = *a3;
  v29 = a3[1];
  *(_QWORD *)(a1 + 368) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = a1 + 472;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = a1 + 520;
  *(_QWORD *)(a1 + 376) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 384) = objc_opt_new(NSMutableArray);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 360) + 16))(*(_QWORD *)(a1 + 360), a1 + 352);
  objc_msgSend(a8, "clearDataForHarvester:", 12);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4F60);
  v32 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289282;
    v42 = 2082;
    v43 = "";
    v44 = 2050;
    v45 = 12;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
  }
  return a1;
}

void sub_1013FC928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1013FC96C(uint64_t a1)
{
  void *v2;

  sub_10010D350(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_10010D350(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_10010D350(a1 + 56, *(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1013FC9C4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1021B4DA8;
  *(_QWORD *)(a1 + 352) = off_1021B4E98;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 24))(*(_QWORD *)(a1 + 360));
  sub_10010D350(a1 + 512, *(_QWORD **)(a1 + 520));
  sub_10010D350(a1 + 488, *(_QWORD **)(a1 + 496));
  sub_10010D350(a1 + 464, *(_QWORD **)(a1 + 472));
  v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(_QWORD *)(a1 + 448) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 360);
  return sub_100429668(a1);
}

uint64_t sub_1013FCA60(uint64_t a1)
{
  return sub_1013FC9C4(a1 - 352);
}

void sub_1013FCA68(uint64_t a1)
{
  sub_1013FC9C4(a1);
  operator delete();
}

void sub_1013FCA8C(uint64_t a1)
{
  sub_1013FC9C4(a1 - 352);
  operator delete();
}

uint64_t sub_1013FCAB8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230EC48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230EC48))
  {
    byte_10230EC40 = (sub_1001E4BF4() & 0x10) != 0;
    __cxa_guard_release(&qword_10230EC48);
  }
  return byte_10230EC40;
}

void sub_1013FCB14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230EC48);
  _Unwind_Resume(a1);
}

uint64_t sub_1013FCB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v11);
  v4 = a1 + 280;
  v5 = unk_10230EC20;
  *(_OWORD *)v4 = xmmword_10230EC10;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 25) = unk_10230EC29;
  if (sub_100006BB4(a2, "Altimeter", v11))
    sub_1011E7A6C(v4, (uint64_t)v11);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021B4F60);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_1011E7898((double *)v4, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = 12;
    v18 = 2081;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v11);
}

void sub_1013FCCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013FCCD0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  CLHUploadRequest *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  void *v14;
  CLHUploadRequest *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v2 = *(void **)(a1 + 376);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(v2);
        v7 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i));
        -[CLHUploadRequest setEndpoint:](v7, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "altimeterEndpoint"));
        objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v7);

        ++*(_DWORD *)(a1 + 420);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = *(void **)(a1 + 384);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v18;
    do
    {
      for (j = 0; j != v10; j = (char *)j + 1)
      {
        if (*(_QWORD *)v18 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)j);
        v14 = *(void **)(a1 + 400);
        if (v13 != v14)
        {
          v15 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", objc_msgSend(v13, "archive"));
          -[CLHUploadRequest setEndpoint:](v15, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "altimeterEndpoint"));
          objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v15);

        }
        sub_1013FCF34(a1, v13, v13 == v14);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v10);
  }
  sub_1013FCFC4((_QWORD *)a1);
  sub_101216918(a1 + 408);
  objc_msgSend(*(id *)(a1 + 376), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 384), "removeAllObjects");
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 400) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 64))(*(_QWORD *)(a1 + 360));
}

void sub_1013FCF34(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v5;
  float v6;

  if (a3)
    ++*(_DWORD *)(a1 + 408);
  else
    ++*(_DWORD *)(a1 + 412);
  v5 = a1 + 408;
  sub_101216BDC(a1 + 408, (int)objc_msgSend(a2, "apHarvestCount"), a3);
  objc_msgSend(a2, "score");
  sub_1012171C4(v5, a3, v6);
  sub_101216ED0(v5, (int)objc_msgSend(objc_msgSend(a2, "macsNotInALSDatabase"), "count"), a3);
}

void sub_1013FCFC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  char v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[5];
  void *v31;
  void *v32;
  uint64_t v33;
  char v34;
  _QWORD v35[5];
  void *v36;
  void *v37;
  uint64_t v38;
  char v39;
  _QWORD v40[5];
  void *__p;
  void *v42;
  uint64_t v43;
  char v44;
  void *v45;
  void *v46;
  uint64_t v47;
  char v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  _QWORD v52[6];
  _QWORD v53[5];
  _QWORD v54[5];
  _QWORD v55[5];
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[6];

  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_1013FE990;
  v59[3] = &unk_102131FE8;
  v59[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.floortransition"), v59);
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472;
  v58[2] = sub_1013FEA24;
  v58[3] = &unk_102131FE8;
  v58[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.floortransition"), v58);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_1013FEAB8;
  v57[3] = &unk_102131FE8;
  v57[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.hvac"), v57);
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472;
  v56[2] = sub_1013FEB4C;
  v56[3] = &unk_102131FE8;
  v56[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.hvac"), v56);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_1013FEBE0;
  v55[3] = &unk_102131FE8;
  v55[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.alsrequest"), v55);
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_1013FEC74;
  v54[3] = &unk_102131FE8;
  v54[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.alsrequest"), v54);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_1013FED08;
  v53[3] = &unk_102131FE8;
  v53[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.alsrequest"), v53);
  v3 = a1[55];
  v2 = a1[56];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      if (*(_DWORD *)(v3 + 4 * v4))
      {
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_1013FED9C;
        v52[3] = &unk_102139B90;
        v52[4] = a1;
        v52[5] = v4;
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.alsrequestaps"), v52);
        v3 = a1[55];
        v2 = a1[56];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 2);
  }
  v5 = (_QWORD *)a1[58];
  if (v5 != a1 + 59)
  {
    do
    {
      v48 = *((_BYTE *)v5 + 32);
      v50 = 0;
      v51 = 0;
      v49 = 0;
      sub_10027205C(&v49, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
      v6 = v48;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      sub_10027205C(&v45, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 2);
      v7 = v45;
      v8 = (uint64_t)v46;
      if (v46 == v45)
      {
        v7 = v46;
        if (!v46)
          goto LABEL_15;
      }
      else
      {
        v9 = 0;
        v10 = ((_BYTE *)v46 - (_BYTE *)v45) >> 2;
        do
        {
          if (*((_DWORD *)v7 + v9))
          {
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3321888768;
            v40[2] = sub_1013FEE4C;
            v40[3] = &unk_1021B4EC0;
            v44 = v6;
            v40[4] = v9;
            v42 = 0;
            v43 = 0;
            __p = 0;
            sub_10027205C(&__p, v7, v8, v10);
            AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.prioritizedaps"), v40);
            if (__p)
            {
              v42 = __p;
              operator delete(__p);
            }
          }
          ++v9;
          v7 = v45;
          v8 = (uint64_t)v46;
          v10 = ((_BYTE *)v46 - (_BYTE *)v45) >> 2;
        }
        while (v9 < v10);
        if (!v45)
          goto LABEL_15;
      }
      v46 = v7;
      operator delete(v7);
LABEL_15:
      if (v49)
      {
        v50 = v49;
        operator delete(v49);
      }
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v5[2];
          v13 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != a1 + 59);
  }
  v14 = (_QWORD *)a1[61];
  if (v14 != a1 + 62)
  {
    do
    {
      v48 = *((_BYTE *)v14 + 32);
      v50 = 0;
      v51 = 0;
      v49 = 0;
      sub_10027205C(&v49, (const void *)v14[5], v14[6], (uint64_t)(v14[6] - v14[5]) >> 2);
      v15 = v48;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      sub_10027205C(&v45, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 2);
      v16 = v45;
      v17 = (uint64_t)v46;
      if (v46 == v45)
      {
        v16 = v46;
        if (!v46)
          goto LABEL_35;
      }
      else
      {
        v18 = 0;
        v19 = ((_BYTE *)v46 - (_BYTE *)v45) >> 2;
        do
        {
          if (*((_DWORD *)v16 + v18))
          {
            v35[0] = _NSConcreteStackBlock;
            v35[1] = 3321888768;
            v35[2] = sub_1013FEF50;
            v35[3] = &unk_1021B4EC0;
            v39 = v15;
            v35[4] = v18;
            v37 = 0;
            v38 = 0;
            v36 = 0;
            sub_10027205C(&v36, v16, v17, v19);
            AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.unknownaps"), v35);
            if (v36)
            {
              v37 = v36;
              operator delete(v36);
            }
          }
          ++v18;
          v16 = v45;
          v17 = (uint64_t)v46;
          v19 = ((_BYTE *)v46 - (_BYTE *)v45) >> 2;
        }
        while (v18 < v19);
        if (!v45)
          goto LABEL_35;
      }
      v46 = v16;
      operator delete(v16);
LABEL_35:
      if (v49)
      {
        v50 = v49;
        operator delete(v49);
      }
      v20 = (_QWORD *)v14[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v14[2];
          v13 = *v21 == (_QWORD)v14;
          v14 = v21;
        }
        while (!v13);
      }
      v14 = v21;
    }
    while (v21 != a1 + 62);
  }
  v22 = (_QWORD *)a1[64];
  if (v22 != a1 + 65)
  {
    do
    {
      v48 = *((_BYTE *)v22 + 32);
      v50 = 0;
      v51 = 0;
      v49 = 0;
      sub_10027205C(&v49, (const void *)v22[5], v22[6], (uint64_t)(v22[6] - v22[5]) >> 2);
      v23 = v48;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      sub_10027205C(&v45, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 2);
      v24 = v45;
      v25 = (uint64_t)v46;
      if (v46 == v45)
      {
        v24 = v46;
        if (!v46)
          goto LABEL_55;
      }
      else
      {
        v26 = 0;
        v27 = ((_BYTE *)v46 - (_BYTE *)v45) >> 2;
        do
        {
          if (*((_DWORD *)v24 + v26))
          {
            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3321888768;
            v30[2] = sub_1013FF020;
            v30[3] = &unk_1021B4EC0;
            v34 = v23;
            v30[4] = v26;
            v32 = 0;
            v33 = 0;
            v31 = 0;
            sub_10027205C(&v31, v24, v25, v27);
            AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.altimeter.maxdeltaheight"), v30);
            if (v31)
            {
              v32 = v31;
              operator delete(v31);
            }
          }
          ++v26;
          v24 = v45;
          v25 = (uint64_t)v46;
          v27 = ((_BYTE *)v46 - (_BYTE *)v45) >> 2;
        }
        while (v26 < v27);
        if (!v45)
          goto LABEL_55;
      }
      v46 = v24;
      operator delete(v24);
LABEL_55:
      if (v49)
      {
        v50 = v49;
        operator delete(v49);
      }
      v28 = (_QWORD *)v22[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v22[2];
          v13 = *v29 == (_QWORD)v22;
          v22 = v29;
        }
        while (!v13);
      }
      v22 = v29;
    }
    while (v29 != a1 + 65);
  }
}

void sub_1013FD5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013FD63C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 40))(*(_QWORD *)(a1 + 360));
  return 1;
}

uint64_t sub_1013FD660(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 48))(*(_QWORD *)(a1 + 360));
}

char *sub_1013FD670(uint64_t a1)
{
  char *v2;

  v2 = (char *)objc_msgSend(*(id *)(a1 + 376), "count");
  return &v2[(_QWORD)objc_msgSend(*(id *)(a1 + 384), "count")];
}

id sub_1013FD6A4(uint64_t a1)
{
  double v2;
  double v3;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v3 = v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  return _objc_msgSend(*(id *)(a1 + 72), "pruneSecondaryDataOlderThan:forHarvester:", 12, v3);
}

uint64_t sub_1013FD6F8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 12);
  objc_msgSend(*(id *)(a1 + 376), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 384), "removeAllObjects");
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 400) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 64))(*(_QWORD *)(a1 + 360));
}

void sub_1013FD748(double a1, double a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  float v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  float v12;
  double *v13;
  double v14;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  double v19;
  float v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  double v25;
  _DWORD v26[2];
  __int16 v27;
  const char *v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  v4 = a4[7];
  v5 = 0.0;
  if (a4[8] == v4
    || (v6 = a4[10],
        v7 = (_QWORD *)(v4 + 8 * (v6 >> 8)),
        v8 = *v7 + 16 * v6,
        v9 = *(_QWORD *)(v4 + (((a4[11] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*((_BYTE *)a4 + 88) + v6),
        v8 == v9))
  {
    v12 = 3.4028e38;
  }
  else
  {
    v12 = 3.4028e38;
    do
    {
      v13 = *(double **)v8;
      v14 = **(double **)v8;
      if (v14 >= a1 && v14 <= a2)
      {
        v16 = *(std::__shared_weak_count **)(v8 + 8);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        v19 = v13[1];
        if (v19 < 30.0)
          goto LABEL_16;
        v20 = v19;
        if (v19 > v5)
          v5 = v19;
        if (v19 >= v12)
LABEL_16:
          v20 = v12;
        if (v16)
        {
          v21 = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v12 = v20;
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        v23 = v7[1];
        ++v7;
        v8 = v23;
      }
    }
    while (v8 != v9);
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021B4F80);
  v24 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
  {
    v25 = sub_1009FAACC(v12);
    v26[0] = 68289795;
    v26[1] = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2049;
    v30 = v5;
    v31 = 2049;
    v32 = v12;
    v33 = 2049;
    v34 = v25 - sub_1009FAACC(v5);
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getMaximumAltitudeDelta\", \"highest pressure\":\"%{private}f\", \"lowest pressure\":\"%{private}f\", \"altitude delta\":\"%{private}f\"}", (uint8_t *)v26, 0x30u);
  }
  if (v5 > v12)
  {
    sub_1009FAACC(v12);
    sub_1009FAACC(v5);
  }
}

BOOL sub_1013FD9B8(uint64_t a1)
{
  _BOOL8 result;

  result = sub_10018FDEC((double *)a1);
  if (result)
    return !sub_100219C3C(a1) && *(_DWORD *)(a1 + 92) != -1;
  return result;
}

void sub_1013FDA08(uint64_t a1, int a2)
{
  id v3;
  uint64_t *v4;
  __objc2_class *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  __objc2_class *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  NSObject *v31;
  unsigned int v32;
  id v33;
  id v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  id v41;
  uint64_t v42;
  id obj;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  std::string v50;
  _OWORD v51[6];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t *v61;
  _QWORD *v62[2];
  _BYTE __p[48];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _BYTE v68[128];
  _BYTE v69[128];

  sub_1013FE070(a1, __p);
  sub_1013FDFBC(a1, &v61);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = *(id *)(a1 + 384);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v69, 16, a1);
  if (v3)
  {
    v4 = (uint64_t *)v62;
    v5 = DefaultObserver;
    v45 = *(_QWORD *)v58;
    do
    {
      v6 = 0;
      v46 = v3;
      do
      {
        if (*(_QWORD *)v58 != v45)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v6);
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        v56 = 0u;
        v49 = v7;
        v8 = objc_msgSend(v7, "macsNotInALSDatabase");
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v53, v68, 16);
        v47 = v6;
        v10 = 0;
        v11 = 0;
        if (v9)
        {
          v12 = *(_QWORD *)v54;
          do
          {
            v13 = 0;
            v48 = v9;
            do
            {
              if (*(_QWORD *)v54 != v12)
                objc_enumerationMutation(v8);
              v52 = nullsub_34(objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)v13), "unsignedLongLongValue"));
              v14 = sub_100191618((uint64_t)&v61, &v52);
              v15 = v14;
              if (v4 == v14)
              {
                v11 = (v11 + 1);
              }
              else
              {
                v16 = *(_OWORD *)(v14 + 11);
                v51[2] = *(_OWORD *)(v14 + 9);
                v51[3] = v16;
                v17 = *(_OWORD *)(v14 + 15);
                v51[4] = *(_OWORD *)(v14 + 13);
                v51[5] = v17;
                v18 = *(_OWORD *)(v14 + 7);
                v51[0] = *(_OWORD *)(v14 + 5);
                v51[1] = v18;
                if (sub_1013FD9B8((uint64_t)v51))
                {
                  v19 = *((unsigned int *)v15 + 33);
                  if (v19 < objc_msgSend(v49, "apHarvestCount"))
                    objc_msgSend(v49, "setApHarvestCount:", v19);
                }
                if (v5[92].info != (__objc2_class_ro *)-1)
                  dispatch_once(&qword_10229FE80, &stru_1021B4F80);
                ++v10;
                v20 = qword_10229FE88;
                if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
                {
                  v21 = v10;
                  v22 = v12;
                  v23 = v11;
                  v24 = v8;
                  v25 = v4;
                  v26 = v5;
                  v27 = v15 + 4;
                  v28 = v15[10];
                  v29 = *((int *)v15 + 33);
                  sub_1000C2254(v27, &v50);
                  v30 = &v50;
                  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v30 = (std::string *)v50.__r_.__value_.__r.__words[0];
                  *(_QWORD *)__p = 68289795;
                  *(_WORD *)&__p[8] = 2082;
                  *(_QWORD *)&__p[10] = "";
                  *(_WORD *)&__p[18] = 2049;
                  *(_QWORD *)&__p[20] = v28;
                  *(_WORD *)&__p[28] = 2049;
                  *(_QWORD *)&__p[30] = v29;
                  *(_WORD *)&__p[38] = 2081;
                  *(_QWORD *)&__p[40] = v30;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"updateAPs\", \"vertical accuracy\":\"%{private}f\", \"harvest count\":%{private}lu, \"MAC\":%{private, location:escape_only}s}", __p, 0x30u);
                  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v50.__r_.__value_.__l.__data_);
                  v5 = v26;
                  v4 = v25;
                  v8 = v24;
                  v11 = v23;
                  v12 = v22;
                  v10 = v21;
                  v9 = v48;
                }
              }
              v13 = (char *)v13 + 1;
            }
            while (v9 != v13);
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v53, v68, 16);
          }
          while (v9);
        }
        if (v5[92].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        v31 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
        {
          v32 = objc_msgSend(v49, "apHarvestCount");
          *(_QWORD *)__p = 68289795;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2049;
          *(_QWORD *)&__p[20] = v32;
          *(_WORD *)&__p[28] = 1025;
          *(_DWORD *)&__p[30] = v10;
          *(_WORD *)&__p[34] = 1025;
          *(_DWORD *)&__p[36] = v11;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Archive updated after ALS response\", \"apHarvestCount\":%{private}lu, \"updated APs\":%{private}u, \"APs still not in ALS database\":%{private}u}", __p, 0x28u);
        }
        if (a2)
        {
          objc_msgSend(objc_msgSend(v49, "macsNotInALSDatabase"), "removeAllObjects");
        }
        else
        {
          v33 = objc_alloc((Class)NSMutableSet);
          v34 = objc_msgSend(v33, "initWithCapacity:", v62[1]);
          v35 = v61;
          if (v61 != v4)
          {
            do
            {
              v36 = *((_OWORD *)v35 + 6);
              v64 = *((_OWORD *)v35 + 5);
              v65 = v36;
              v66 = *((_OWORD *)v35 + 7);
              v67 = v35[16];
              v37 = *((_OWORD *)v35 + 3);
              *(_OWORD *)__p = *((_OWORD *)v35 + 2);
              *(_OWORD *)&__p[16] = v37;
              *(_OWORD *)&__p[32] = *((_OWORD *)v35 + 4);
              objc_msgSend(v34, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", sub_100129380((uint64_t)__p)));
              v38 = (uint64_t *)v35[1];
              if (v38)
              {
                do
                {
                  v39 = v38;
                  v38 = (uint64_t *)*v38;
                }
                while (v38);
              }
              else
              {
                do
                {
                  v39 = (uint64_t *)v35[2];
                  v40 = *v39 == (_QWORD)v35;
                  v35 = v39;
                }
                while (!v40);
              }
              v35 = v39;
            }
            while (v39 != v4);
          }
          objc_msgSend(objc_msgSend(v49, "macsNotInALSDatabase"), "minusSet:", v34);
        }
        v6 = v47 + 1;
      }
      while ((id)(v47 + 1) != v46);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
    }
    while (v3);
  }
  v41 = objc_msgSend(*(id *)(v42 + 384), "count");
  if ((unint64_t)v41 > (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v42 + 360) + 32))(*(_QWORD *)(v42 + 360)))
    sub_1013FE278(v42);
  sub_100008848((uint64_t)&v61, v62[0]);
}

void sub_1013FDF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,_QWORD *a55,uint64_t a56,void *__p,uint64_t a58)
{
  sub_100008848((uint64_t)&a54, a55);
  _Unwind_Resume(a1);
}

void sub_1013FDFBC(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  (*(void (**)(uint64_t **__return_ptr))(**(_QWORD **)(a1 + 360) + 88))(a2);
  v3 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      if (*((_BYTE *)v3 + 128) || *((double *)v3 + 13) == 0.0)
      {
        v4 = sub_10008A9F0(a2, v3);
        operator delete(v3);
      }
      else
      {
        v5 = (uint64_t *)v3[1];
        if (v5)
        {
          do
          {
            v4 = v5;
            v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v4 = (uint64_t *)v3[2];
            v6 = *v4 == (_QWORD)v3;
            v3 = v4;
          }
          while (!v6);
        }
      }
      v3 = v4;
    }
    while (v4 != (uint64_t *)(a2 + 1));
  }
}

void sub_1013FE070(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t *v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(__n128 *, __n128 *);
  void (*v15)(uint64_t);
  void *v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v4 = objc_alloc_init((Class)NSMutableSet);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = *(void **)(a1 + 384);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v5);
        objc_msgSend(v4, "unionSet:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i), "macsNotInALSDatabase"));
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v6);
  }
  v11 = 0;
  v12 = &v11;
  v13 = 0x4812000000;
  v14 = sub_10020736C;
  v15 = sub_100207E5C;
  v16 = &unk_102080316;
  __p = 0;
  v18 = 0;
  v19 = 0;
  sub_1002FF5A4(&__p, (unint64_t)objc_msgSend(v4, "count"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1014006B0;
  v10[3] = &unk_1021B4EF8;
  v10[4] = &v11;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v10);
  v9 = v12;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_10025EA00(a2, (const void *)v9[6], v9[7], (v9[7] - v9[6]) >> 3);
  _Block_object_dispose(&v11, 8);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_1013FE248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1013FE278(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  id v5;
  void *v6;
  id v7;
  id result;
  _QWORD v9[2];
  id v10;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360));
  v3 = v2 + 1;
  if (v2 + 1 >= 0)
    v4 = v2 + 1;
  else
    v4 = v2 + 2;
  v5 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("apHarvestCount"), 1);
  v6 = *(void **)(a1 + 384);
  v10 = v5;
  v7 = objc_msgSend(objc_msgSend(v6, "sortedArrayUsingDescriptors:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1)), "subarrayWithRange:", (uint64_t)v4 >> 1, v3 - (v4 >> 1));
  v9[0] = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("score"), 0);
  v9[1] = v5;
  result = objc_msgSend(objc_msgSend(v7, "sortedArrayUsingDescriptors:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 2)), "lastObject");
  *(_QWORD *)(a1 + 400) = result;
  return result;
}

void sub_1013FE3A4(uint64_t a1, void *a2, unsigned int *a3, _QWORD *a4, double a5, double a6)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double *v15;
  double v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  __objc2_class *v26;
  __objc2_class *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  NSObject *isa;
  uint64_t v33;
  uint64_t v34;
  std::string *p_p;
  NSObject *v36;
  __objc2_class *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  int v41;
  std::string *v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  std::string __p;
  _OWORD v52[6];
  uint64_t *v53;
  _QWORD *v54[2];
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59[2];
  uint8_t buf[8];
  _BYTE v61[10];
  __int16 v62;
  _BYTE v63[10];
  _BYTE v64[10];
  _BYTE v65[10];
  __int16 v66;
  std::string *v67;

  v59[0] = 0;
  v59[1] = 0;
  v58 = (uint64_t *)v59;
  v7 = a4[13];
  v8 = (uint64_t *)v59;
  if (a4[14] != v7)
  {
    v9 = a4[16];
    v10 = (_QWORD *)(v7 + 8 * (v9 >> 8));
    v11 = *v10 + 16 * v9;
    v12 = *(_QWORD *)(v7 + (((a4[17] + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a4 + 136) + v9);
    v8 = (uint64_t *)v59;
    if (v11 != v12)
    {
      do
      {
        v15 = *(double **)v11;
        v16 = **(double **)v11;
        if (v16 >= a5 && v16 <= a6)
        {
          v18 = *(std::__shared_weak_count **)(v11 + 8);
          *(_QWORD *)buf = *(_QWORD *)v11;
          *(_QWORD *)v61 = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          v21 = (uint64_t *)(v15 + 1);
          if (!sub_1000AC008((_QWORD *)v15 + 1))
            sub_1001909A4(&v58, v21, v21);
          if (v18)
          {
            v22 = (unint64_t *)&v18->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        v11 += 16;
        if (v11 - *v10 == 4096)
        {
          v24 = v10[1];
          ++v10;
          v11 = v24;
        }
      }
      while (v11 != v12);
      v8 = v58;
    }
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  sub_1013FE938((uint64_t)&v55, 0, v8, v59);
  sub_1013FDFBC(a1, &v53);
  *a3 = -1;
  v25 = v53;
  if (v53 != (uint64_t *)v54)
  {
    v26 = DefaultObserver;
    v27 = DefaultObserver;
    do
    {
      v28 = *(_OWORD *)(v25 + 11);
      v52[2] = *(_OWORD *)(v25 + 9);
      v52[3] = v28;
      v29 = *(_OWORD *)(v25 + 15);
      v52[4] = *(_OWORD *)(v25 + 13);
      v52[5] = v29;
      v30 = *(_OWORD *)(v25 + 7);
      v52[0] = *(_OWORD *)(v25 + 5);
      v52[1] = v30;
      if (sub_1013FD9B8((uint64_t)v52))
      {
        v31 = *((_DWORD *)v25 + 33);
        if (v31 < *a3)
          *a3 = v31;
        if (v26[92].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        isa = v27[93].isa;
        if (!os_log_type_enabled(isa, OS_LOG_TYPE_DEBUG))
          goto LABEL_43;
        v33 = v25[10];
        v34 = *((int *)v25 + 33);
        sub_1000C2254(v25 + 4, &__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_QWORD *)buf = 68289795;
        *(_WORD *)v61 = 2082;
        *(_QWORD *)&v61[2] = "";
        v62 = 2049;
        *(_QWORD *)v63 = v33;
        *(_WORD *)&v63[8] = 2049;
        *(_QWORD *)v64 = v34;
        *(_WORD *)&v64[8] = 2081;
        *(_QWORD *)v65 = p_p;
        _os_log_impl((void *)&_mh_execute_header, isa, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"prioritizeAPs valid for prioritizing\", \"vertical accuracy\":\"%{private}f\", \"harvest count\":%{private}lu, \"MAC\":%{private, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        if (v26[92].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        v36 = v27[93].isa;
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          goto LABEL_43;
        v37 = v26;
        v38 = sub_100219C3C((uint64_t)(v25 + 5));
        v39 = sub_10018FDEC((double *)v25 + 5);
        v40 = v25[10];
        v41 = *((_DWORD *)v25 + 33);
        sub_1000C2254(v25 + 4, &__p);
        v42 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_QWORD *)buf = 68290307;
        *(_WORD *)v61 = 2082;
        *(_QWORD *)&v61[2] = "";
        v62 = 1025;
        *(_DWORD *)v63 = v38;
        *(_WORD *)&v63[4] = 1025;
        *(_DWORD *)&v63[6] = v39;
        *(_WORD *)v64 = 2049;
        *(_QWORD *)&v64[2] = v40;
        *(_WORD *)v65 = 2049;
        *(_QWORD *)&v65[2] = v41 != -1;
        v66 = 2081;
        v67 = v42;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"prioritizeAPs not valid for prioritizing\", \"moving\":%{private}hhd, \"valid\":%{private}hhd, \"vertical accuracy\":\"%{private}f\", \"harvest count set\":%{private}lu, \"MAC\":%{private, location:escape_only}s}", buf, 0x3Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v26 = v37;
      }
      v27 = DefaultObserver;
LABEL_43:
      sub_10071D274(&v58, v25 + 4);
      v43 = (uint64_t *)v25[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t *)v25[2];
          v45 = *v44 == (_QWORD)v25;
          v25 = v44;
        }
        while (!v45);
      }
      v25 = v44;
    }
    while (v44 != (uint64_t *)v54);
  }
  v46 = v58;
  if (v58 != (uint64_t *)v59)
  {
    do
    {
      *(_QWORD *)buf = v46[4];
      objc_msgSend(a2, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", sub_100129380((uint64_t)buf)));
      v47 = (uint64_t *)v46[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (uint64_t *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (uint64_t *)v46[2];
          v45 = *v48 == (_QWORD)v46;
          v46 = v48;
        }
        while (!v45);
      }
      v46 = v48;
    }
    while (v48 != (uint64_t *)v59);
  }
  sub_100008848((uint64_t)&v53, v54[0]);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  sub_100008848((uint64_t)&v58, v59[0]);
}

void sub_1013FE8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;

  if (__p)
    operator delete(__p);
  sub_100008848(v38 - 216, *(_QWORD **)(v38 - 208));
  _Unwind_Resume(a1);
}

char *sub_1013FE938(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_101400C84(a1, a2, a3, a4, v4);
}

NSDictionary *sub_1013FE990(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("traces");
  v4[0] = CFSTR("uploaded");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 412));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FEA24(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("traces");
  v4[0] = CFSTR("discarded");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 408));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FEAB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("traces");
  v4[0] = CFSTR("uploaded");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 420));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FEB4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("traces");
  v4[0] = CFSTR("discarded");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 416));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FEBE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("requests");
  v4[0] = CFSTR("sent");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 424));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FEC74(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("requests");
  v4[0] = CFSTR("disallowed");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 428));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FED08(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v3[1] = CFSTR("requests");
  v4[0] = CFSTR("unnecessary");
  v3[0] = CFSTR("status");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 432));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

NSDictionary *sub_1013FED9C(uint64_t a1)
{
  uint64_t v2;
  NSNumber *v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v5[0] = CFSTR("apsBucketed");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 40));
  v5[1] = CFSTR("requests");
  v6[0] = v3;
  v6[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(v2 + 440) + 4 * *(_QWORD *)(a1 + 40)));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
}

NSDictionary *sub_1013FEE4C(uint64_t a1)
{
  const __CFString *v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v2 = CFSTR("uploaded");
  if (*(_BYTE *)(a1 + 64))
    v2 = CFSTR("discarded");
  v5[0] = v2;
  v4[0] = CFSTR("status");
  v4[1] = CFSTR("apsBucketed");
  v5[1] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  v4[2] = CFSTR("traces");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 32)));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

_QWORD *sub_1013FEF1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_10027205C(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
}

void sub_1013FEF38(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

NSDictionary *sub_1013FEF50(uint64_t a1)
{
  const __CFString *v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v2 = CFSTR("uploaded");
  if (*(_BYTE *)(a1 + 64))
    v2 = CFSTR("discarded");
  v5[0] = v2;
  v4[0] = CFSTR("status");
  v4[1] = CFSTR("apsBucketed");
  v5[1] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  v4[2] = CFSTR("traces");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 32)));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

NSDictionary *sub_1013FF020(uint64_t a1)
{
  const __CFString *v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v2 = CFSTR("uploaded");
  if (*(_BYTE *)(a1 + 64))
    v2 = CFSTR("discarded");
  v5[0] = v2;
  v4[0] = CFSTR("status");
  v4[1] = CFSTR("heightsBucketed");
  v5[1] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  v4[2] = CFSTR("traces");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 32)));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

id sub_1013FF0F0(uint64_t a1, void *a2, _QWORD *a3)
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  double v10;
  double v11;
  id v12;
  double v13;
  float v14;
  float v15;
  id v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  signed int v23;
  NSObject *v24;
  double v25;
  uint64_t v27;
  CLHarvestFloorTransitionRequestArchive *v28;
  id v29;
  double v30;
  NSObject *v31;
  NSObject *v32;
  unsigned int v33;
  uint8_t buf[8];
  _BYTE v35[10];
  __int16 v36;
  id v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  double v41;

  v6 = objc_msgSend(a2, "fType");
  if (v6 == (id)4)
  {
    objc_msgSend(a2, "fStartTime");
    v11 = v10;
    v12 = objc_msgSend(a2, "fEndTime");
    sub_1013FD748(v11, v13, (uint64_t)v12, a3);
    v15 = v14;
    v33 = 0;
    v16 = objc_alloc_init((Class)NSMutableSet);
    objc_msgSend(a2, "fStartTime");
    v18 = v17;
    objc_msgSend(a2, "fEndTime");
    sub_1013FE3A4(a1, v16, &v33, a3, v18, v19);
    if (objc_msgSend(v16, "count"))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 56))(*(_QWORD *)(a1 + 360));
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021B4F80);
    v20 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      v21 = objc_msgSend(v16, "count");
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v35 = 2082;
      *(_QWORD *)&v35[2] = "";
      v36 = 2049;
      v37 = v21;
      v38 = 1025;
      v39 = v33;
      v40 = 2049;
      v41 = v15;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"setupArchiveForTrack\", \"count macs not in ALS db\":%{private}lu, \"apHarvestCount\":%{private}u, \"max delta altitude\":\"%{private}.1f\"}", buf, 0x2Cu);
    }
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360));
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 384), "count") <= (int)v22)
    {
      v27 = v22 << 32;
      v9 = objc_msgSend(*(id *)(a1 + 72), "archiveForHarvester:withSuffix:", 12, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("HVAC-ft-%lu"), objc_msgSend(*(id *)(a1 + 384), "count")));
      v28 = [CLHarvestFloorTransitionRequestArchive alloc];
      v29 = objc_msgSend(*(id *)(a1 + 384), "count");
      *(float *)&v30 = v15;
      objc_msgSend(*(id *)(a1 + 384), "addObject:", -[CLHarvestFloorTransitionRequestArchive initWithArchive:index:score:apHarvestCount:macsNotInALSDatabase:](v28, "initWithArchive:index:score:apHarvestCount:macsNotInALSDatabase:", v9, v29, v33, v16, v30));
      if (objc_msgSend(*(id *)(a1 + 384), "count") != (id)(((uint64_t)&_mh_execute_header + v27) >> 32))
      {
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        v32 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v35 = 2082;
          *(_QWORD *)&v35[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"New floor transition, maximum transitions not reached\"}", buf, 0x12u);
        }
        goto LABEL_18;
      }
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      v31 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v35 = 2082;
        *(_QWORD *)&v35[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"New floor transition, maximum transitions just reached; saving in extra slot\"}",
          buf,
          0x12u);
      }
    }
    else
    {
      v23 = objc_msgSend(*(id *)(a1 + 400), "index");
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      v24 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v35 = 2082;
        *(_QWORD *)&v35[2] = "";
        v36 = 1025;
        LODWORD(v37) = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"New floor transition, maximum number of floor transitions reached, replacing an existing floor transition\", \"index\":%{private}d}", buf, 0x18u);
      }
      v9 = objc_msgSend(*(id *)(a1 + 72), "archiveForHarvester:withSuffix:", 12, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("HVAC-ft-%lu"), v23));
      sub_1013FCF34(a1, *(void **)(a1 + 400), 1u);
      objc_msgSend(*(id *)(a1 + 400), "setApHarvestCount:", v33);
      *(float *)&v25 = v15;
      objc_msgSend(*(id *)(a1 + 400), "setScore:", v25);
      objc_msgSend(*(id *)(a1 + 400), "setMacsNotInALSDatabase:", v16);
    }
    sub_1013FE278(a1);
LABEL_18:
    sub_1013FF63C(a1);
    goto LABEL_19;
  }
  if (v6 != (id)3)
    return 0;
  v7 = objc_msgSend(*(id *)(a1 + 376), "count");
  *(_QWORD *)buf = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360));
  *(_QWORD *)v35 = v8;
  if ((unint64_t)v7 >= sub_100FC2F94((uint64_t)buf))
  {
    v9 = 0;
    ++*(_DWORD *)(a1 + 416);
    return v9;
  }
  v9 = objc_msgSend(*(id *)(a1 + 72), "archiveForHarvester:withSuffix:", 12, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("HVAC-%lu"), objc_msgSend(*(id *)(a1 + 376), "count")));
  objc_msgSend(*(id *)(a1 + 376), "addObject:", v9);
LABEL_19:
  objc_msgSend(v9, "eraseAllData");
  return v9;
}

void sub_1013FF63C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  void *__p;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _BYTE v20[10];
  __int16 v21;
  unsigned int v22;

  sub_1013FE070(a1, &v13);
  if (v13 == v14)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021B4F80);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "No need to query ALS, no macs to query", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "No need to query ALS, no macs to query", &v12, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterAltimeter::queryALSIfNeeded()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    ++*(_DWORD *)(a1 + 432);
  }
  else
  {
    v12 = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 360) + 72))(*(_QWORD *)(a1 + 360), &v12) & 1) != 0)
    {
      sub_100A470A4(&v11, 3);
      ++*(_DWORD *)(a1 + 424);
      sub_101216994((_QWORD *)(a1 + 408), (unint64_t)(v14 - (_BYTE *)v13) >> 3);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      v2 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        v19 = 2049;
        *(_QWORD *)v20 = (v14 - (_BYTE *)v13) >> 3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Querying ALS\", \"query count\":%{private}lu}", buf, 0x1Cu);
      }
      v3 = *(_QWORD *)(a1 + 360);
      v9 = 0;
      v10 = 0;
      __p = 0;
      sub_10025EA00(&__p, v13, (uint64_t)v14, (v14 - (_BYTE *)v13) >> 3);
      (*(void (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 80))(v3, &__p, 1, 1, v11);
      if (__p)
      {
        v9 = __p;
        operator delete(__p);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 428);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      v5 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289795;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        v19 = 1025;
        *(_DWORD *)v20 = v12 & 1;
        *(_WORD *)&v20[4] = 1025;
        *(_DWORD *)&v20[6] = (v12 >> 2) & 1;
        v21 = 1025;
        v22 = (v12 >> 1) & 1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Not allowed to query ALS reason(s)\", \"location services\":%{private}hhd, \"OTA setting\":%{private}hhd, \"reachability\":%{private}hhd}", buf, 0x24u);
      }
    }
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_1013FF9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1013FFA44(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CLPLocation *v20;
  CLPLocation *v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint8_t *v31;
  unsigned __int8 v32[16];
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  id v42;

  v7 = sub_1013FF0F0(a1, a3, a4);
  if (v7)
  {
    v8 = v7;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021B4F80);
    v9 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(a3, "fStartTime");
      v11 = v10;
      objc_msgSend(a3, "fEndTime");
      v13 = v12;
      objc_msgSend(a3, "fType");
      *(_DWORD *)buf = 68289795;
      v34 = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2049;
      v38 = v11;
      v39 = 2049;
      v40 = v13;
      v41 = 2049;
      v42 = objc_msgSend(a3, "fType");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"track\", \"start\":\"%{private}f\", \"stop\":\"%{private}f\", \"context\":%{private, location:CLBarometerCalibration_Types::Context}lld}", buf, 0x30u);
    }
    v14 = (void *)objc_opt_new(CLPAltimeterCollectionRequest);
    objc_msgSend(v14, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
    objc_msgSend(v14, "setCollectionType:", 1);
    v15 = objc_msgSend(a3, "fType") == (id)3;
    objc_msgSend(a3, "fStartTime");
    v17 = v16;
    objc_msgSend(a3, "fStartTime");
    v19 = v18;
    v20 = objc_opt_new(CLPLocation);
    if (v20)
    {
      v21 = v20;
      v22 = v17 - floor(v19 / dbl_101CA1C00[v15]) * dbl_101CA1C00[v15];
      -[CLPLocation setTimestamp:](v20, "setTimestamp:", CFAbsoluteTimeGetCurrent() - v22);
      objc_msgSend(a3, "fLocationHorizontalUncertainty");
      *(float *)&v23 = v23;
      -[CLPLocation setHorizontalAccuracy:](v21, "setHorizontalAccuracy:", v23);
      objc_msgSend(a3, "fLocationCoordinates");
      -[CLPLocation setLatitude:](v21, "setLatitude:");
      objc_msgSend(a3, "fLocationCoordinates");
      -[CLPLocation setLongitude:](v21, "setLongitude:", v24);
      objc_msgSend(v14, "setLocation:", v21);

      v25 = (void *)objc_opt_new(CLPContext);
      objc_msgSend(v25, "setType:", objc_msgSend(a3, "fType"));
      objc_msgSend(v14, "setContext:", v25);

      objc_msgSend(a3, "fStartTime");
      objc_msgSend(a3, "setFStartTime:", v26 - v22);
      objc_msgSend(a3, "fEndTime");
      objc_msgSend(a3, "setFEndTime:", v27 - v22);
      objc_msgSend(a3, "fStartTime");
      objc_msgSend(v14, "setStartTimestamp:");
      objc_msgSend(a3, "fEndTime");
      sub_1013FFEBC(v22, (uint64_t)objc_msgSend(v14, "setStopTimestamp:"), v8, a4, a3);
      sub_10140004C(v22, v28, v8, a4, a3);
      if (objc_msgSend(a3, "fType") == (id)4)
        sub_10140025C(v22, 4, v8, a4, a3);
      objc_msgSend(v8, "overwritePrimaryObject:", v14);

      v32[0] = 0;
      sub_1018BF25C(buf, "BarometerCalibrationSubmitOnTrack", v32, 0);
      if (buf[1])
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    }
    else
    {
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      v29 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLP memory allocation error", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        *(_WORD *)v32 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "CLP memory allocation error", v32, 2);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLSubHarvesterAltimeter::onBarometerCalibrationData(const CLBarometerCalibration_Types::Notification, CLBarometerCalibrationTrack *, const CLBarometerCalibration_Types::CLBarometerCalibrationBuffers &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
  }
}

void sub_1013FFEBC(double a1, uint64_t a2, void *a3, _QWORD *a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v13;
  double v14;
  double v15;
  std::__shared_weak_count *v16;
  double *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  id v20;
  double v21;
  double v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;

  v5 = a4[7];
  if (a4[8] != v5)
  {
    v6 = a4[10];
    v7 = (_QWORD *)(v5 + 8 * (v6 >> 8));
    v8 = *v7 + 16 * v6;
    v9 = *(_QWORD *)(v5 + (((a4[11] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a4 + 88) + v6);
    while (v8 != v9)
    {
      v13 = **(double **)v8 - a1;
      objc_msgSend(a5, "fStartTime");
      if (v13 >= v14)
      {
        objc_msgSend(a5, "fEndTime");
        if (v13 <= v15)
        {
          v17 = *(double **)v8;
          v16 = *(std::__shared_weak_count **)(v8 + 8);
          v26 = *(double **)v8;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          v20 = (id)objc_opt_new(CLPIndoorPressure);
          objc_msgSend(v20, "setTimestamp:", v13, v26, v16);
          v21 = v17[1];
          *(float *)&v21 = v21;
          objc_msgSend(v20, "setPressure:", v21);
          v22 = v17[2];
          *(float *)&v22 = v22;
          objc_msgSend(v20, "setTemperature:", v22);
          objc_msgSend(a3, "writeSecondaryObject:toField:", v20, 7);
          if (v16)
          {
            v23 = (unint64_t *)&v16->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        v25 = v7[1];
        ++v7;
        v8 = v25;
      }
    }
  }
}

void sub_101400038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10140004C(double a1, uint64_t a2, void *a3, _QWORD *a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v13;
  double v14;
  double v15;
  double v16;
  std::__shared_weak_count *v17;
  double *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  id v21;
  std::string *p_p;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::string __p;
  double *v27;
  std::__shared_weak_count *v28;

  v5 = a4[13];
  if (a4[14] != v5)
  {
    v6 = a4[16];
    v7 = (_QWORD *)(v5 + 8 * (v6 >> 8));
    v8 = *v7 + 16 * v6;
    v9 = *(_QWORD *)(v5 + (((a4[17] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a4 + 136) + v6);
    while (v8 != v9)
    {
      v13 = objc_autoreleasePoolPush();
      v14 = **(double **)v8 - a1;
      objc_msgSend(a5, "fStartTime");
      if (v14 >= v15)
      {
        objc_msgSend(a5, "fEndTime");
        if (v14 <= v16)
        {
          v18 = *(double **)v8;
          v17 = *(std::__shared_weak_count **)(v8 + 8);
          v27 = *(double **)v8;
          v28 = v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          v21 = (id)objc_opt_new(CLPIndoorWifiScan);
          sub_1000C2150((_QWORD *)v18 + 1, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          objc_msgSend(v21, "setMac:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          objc_msgSend(v21, "setRssi:", *((unsigned int *)v18 + 6));
          objc_msgSend(v21, "setHidden:", *((unsigned __int8 *)v18 + 20));
          objc_msgSend(v21, "setChannel:", *((unsigned int *)v18 + 4));
          objc_msgSend(v21, "setTimestamp:", v14);
          objc_msgSend(a3, "writeSecondaryObject:toField:", v21, 8);
          if (v17)
          {
            v23 = (unint64_t *)&v17->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
      }
      objc_autoreleasePoolPop(v13);
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        v25 = v7[1];
        ++v7;
        v8 = v25;
      }
    }
  }
}

void sub_10140022C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100261F44((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10140025C(double a1, uint64_t a2, void *a3, _QWORD *a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  CLPLocation *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  double v29;
  _BOOL8 v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  _DWORD v43[2];
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  uint64_t v49;

  v5 = a4[1];
  if (a4[2] != v5)
  {
    v6 = a4[4];
    v7 = (_QWORD *)(v5 + 8 * (v6 >> 8));
    v8 = *v7 + 16 * v6;
    v9 = *(_QWORD *)(v5 + (((a4[5] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a4 + 40) + v6);
    while (v8 != v9)
    {
      v12 = objc_autoreleasePoolPush();
      v13 = **(double **)v8;
      objc_msgSend(a5, "fStartTime");
      v14 = v13 - a1;
      if (v14 >= v15)
      {
        objc_msgSend(a5, "fEndTime");
        if (v14 <= v16)
        {
          v17 = *(double **)v8;
          v18 = *(std::__shared_weak_count **)(v8 + 8);
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          v21 = objc_opt_new(CLPLocation);
          -[CLPLocation setTimestamp:](v21, "setTimestamp:", v14);
          -[CLPLocation setLatitude:](v21, "setLatitude:", v17[1]);
          -[CLPLocation setLongitude:](v21, "setLongitude:", v17[2]);
          v22 = v17[4];
          *(float *)&v22 = v22;
          -[CLPLocation setHorizontalAccuracy:](v21, "setHorizontalAccuracy:", v22);
          v23 = v17[3];
          *(float *)&v23 = v23;
          -[CLPLocation setAltitude:](v21, "setAltitude:", v23);
          v24 = v17[5];
          *(float *)&v24 = v24;
          -[CLPLocation setVerticalAccuracy:](v21, "setVerticalAccuracy:", v24);
          -[CLPLocation setProvider:](v21, "setProvider:", *((unsigned int *)v17 + 25));
          v25 = v17[10];
          *(float *)&v25 = v25;
          -[CLPLocation setSpeed:](v21, "setSpeed:", v25);
          v26 = v17[11];
          *(float *)&v26 = v26;
          -[CLPLocation setSpeedAccuracy:](v21, "setSpeedAccuracy:", v26);
          v27 = (id)objc_opt_new(CLPBaroCalibrationIndication);
          v28 = v27;
          v29 = v17[15];
          v30 = v29 > 0.0 && v29 != 1.79769313e308;
          objc_msgSend(v27, "setIsCalibratedBarometricAlt:", v30);
          objc_msgSend(v28, "setIsMapMatched:", *((_DWORD *)v17 + 26) == 2);
          objc_msgSend(v28, "setMapMatchRoadType:", *((unsigned int *)v17 + 38));
          v17[18] = (double)vcvtad_u64_f64(v17[18] * 100.0) / 100.0;
          objc_msgSend(v28, "setOutdoorConfidence:");
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_1021B4F80);
          v31 = qword_10229FE88;
          if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
          {
            v32 = *((_DWORD *)v17 + 38);
            v33 = *((_QWORD *)v17 + 18);
            *(_DWORD *)buf = 67174913;
            v47 = v32;
            v48 = 2049;
            v49 = v33;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "mapMatchRoadType,%{private}d,outdoorConfidence,%{private}.3lf", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE80 != -1)
              dispatch_once(&qword_10229FE80, &stru_1021B4F80);
            v37 = *((_DWORD *)v17 + 38);
            v38 = *((_QWORD *)v17 + 18);
            v43[0] = 67174913;
            v43[1] = v37;
            v44 = 2049;
            v45 = v38;
            LODWORD(v41) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "mapMatchRoadType,%{private}d,outdoorConfidence,%{private}.3lf", v43, v41);
            v40 = (uint8_t *)v39;
            sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterAltimeter::processLocationSource(CLHRequestArchive *, const CLBarometerCalibration_Types::CLBarometerCalibrationBuffers &, CFAbsoluteTime, CLBarometerCalibrationTrack *)", "%s\n", v39);
            if (v40 != buf)
              free(v40);
          }
          -[CLPLocation setBaroCalibrationIndication:](v21, "setBaroCalibrationIndication:", v28);
          objc_msgSend(a3, "writeSecondaryObject:toField:", v21, 9);
          if (v18)
          {
            v34 = (unint64_t *)&v18->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
      }
      objc_autoreleasePoolPop(v12);
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        v36 = v7[1];
        ++v7;
        v8 = v36;
      }
    }
  }
}

void sub_101400678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014006A8(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  sub_1013FFA44(a1 - 352, a2, a3, a4);
}

void sub_1014006B0(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = nullsub_34(objc_msgSend(a2, "unsignedLongLongValue"));
  v4 = v3;
  v5 = (uint64_t *)v2[7];
  v6 = v2[8];
  if ((unint64_t)v5 >= v6)
  {
    v8 = (uint64_t *)v2[6];
    v9 = v5 - v8;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v10 = v6 - (_QWORD)v8;
    v11 = (uint64_t)(v6 - (_QWORD)v8) >> 2;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0((uint64_t)(v2 + 8), v12);
      v8 = (uint64_t *)v2[6];
      v5 = (uint64_t *)v2[7];
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    while (v5 != v8)
    {
      v16 = *--v5;
      *--v14 = v16;
    }
    v2[6] = v14;
    v2[7] = v7;
    v2[8] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = v3;
    v7 = v5 + 1;
  }
  v2[7] = v7;
}

void sub_1014007A0(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  *(_DWORD *)(a1 + 392) = a2;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021B4F80);
  v3 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289283;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1025;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ALS server request tag\", \"tag\":%{private}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_101400888(uint64_t a1, int a2)
{
  sub_1014007A0(a1 - 352, a2);
}

void sub_101400890(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  _BOOL4 v18;
  int v19;
  void *v20;
  void *v21;
  _DWORD v22[4];
  uint8_t buf[8];
  _BYTE v24[10];
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  int v28;

  if (*a3 != 3)
  {
    if (*a3 == 1)
    {
      v7 = *(_DWORD *)(a1 + 392);
      v8 = *a4;
      if (a4[1] >= 1)
        sub_1013FDA08(a1, v7 == v8);
      if (v7 == v8)
      {
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        v9 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
        {
          v10 = *a3 != 3;
          v11 = a4[1];
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v24 = 2082;
          *(_QWORD *)&v24[2] = "";
          v25 = 1025;
          v26 = v10;
          v27 = 1025;
          v28 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received response to harvest ALS request.\", \"Success\":%{private}hhd, \"APs\":%{private}d}", buf, 0x1Eu);
        }
        *(_DWORD *)(a1 + 392) = -1;
      }
      else
      {
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        v17 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
        {
          v18 = *a3 != 3;
          v19 = a4[1];
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v24 = 2082;
          *(_QWORD *)&v24[2] = "";
          v25 = 1025;
          v26 = v18;
          v27 = 1025;
          v28 = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received response to non-harvest ALS request\", \"Success\":%{private}hhd, \"APs\":%{private}d}", buf, 0x1Eu);
        }
      }
      sub_1013FE070(a1, buf);
      v20 = *(void **)buf;
      v21 = *(void **)v24;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)v24 = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (v21 == v20)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 64))(*(_QWORD *)(a1 + 360));
        *(_DWORD *)(a1 + 392) = -1;
      }
    }
    else
    {
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021B4F80);
      v12 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *a3;
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown notification %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_1021B4F80);
        v14 = *a3;
        v22[0] = 67240192;
        v22[1] = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "#Warning Got unknown notification %{public}d", v22, 8);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAltimeter::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
}

void sub_101400C24(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  sub_101400890(a1 - 352, a2, a3, a4);
}

void sub_101400C2C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_101400C58(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

char *sub_101400C84(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      __p = a3;
      sub_100346A7C((_QWORD **)&__p, a5);
      v20 = *(char **)(a1 + 8);
      v21 = v20 - v5;
      if (a5 > (v20 - v5) >> 3)
      {
        __p = v7;
        sub_100346A7C((_QWORD **)&__p, v21 >> 3);
        sub_100DC72D4(a1, __p, a4);
        if (v21 < 1)
          return v5;
        v20 = *(char **)(a1 + 8);
      }
      v22 = &v5[8 * a5];
      v23 = &v20[-8 * a5];
      v24 = v20;
      if ((unint64_t)v23 < v12)
      {
        v24 = v20;
        do
        {
          v25 = *(_QWORD *)v23;
          v23 += 8;
          *(_QWORD *)v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v20 != v22)
        memmove(&v20[-8 * ((v20 - v22) >> 3)], v5, v20 - v22);
      sub_101400ED0(v7, __p, v5);
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 >> 61)
        sub_100259694();
      v15 = (a2 - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v36 = v9;
      if (v17)
        v18 = (char *)sub_10025E6A0(v9, v17);
      else
        v18 = 0;
      v26 = &v18[8 * v15];
      __p = v18;
      v33 = v26;
      v35 = &v18[8 * v17];
      v27 = &v26[8 * a5];
      do
      {
        *(_QWORD *)v26 = v7[4];
        v26 += 8;
        v28 = (_QWORD *)v7[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v7[2];
            v30 = *v29 == (_QWORD)v7;
            v7 = v29;
          }
          while (!v30);
        }
        v7 = v29;
      }
      while (v26 != v27);
      v34 = v27;
      v5 = sub_10107BE08((void **)a1, (uint64_t)&__p, v5);
      if (v34 != v33)
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_101400E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101400ED0(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      v3 = (_QWORD *)result[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)result[2];
          v5 = *v4 == (_QWORD)result;
          result = v4;
        }
        while (!v5);
      }
      ++a3;
      result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

uint64_t sub_101400F28()
{
  return sub_1011E780C((uint64_t)&xmmword_10230EC10, 1, 2, 2, 1, 0.0, 21600.0, 21600.0);
}

void sub_101401020()
{
  operator delete();
}

id sub_101401044(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onSurfaceCalibration:", a1);
}

void sub_1014013EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_101401440(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_10140146C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021B4FD0;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1014015A0;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1014015B4;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101401578(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1014015A0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1014015B4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1014015D0(uint64_t a1)
{
  sub_10140189C(a1);
  operator delete();
}

id sub_1014015F4(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  __int128 __dst;
  int v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  int v37;

  *(_QWORD *)&__dst = 0x7FEFFFFFFFFFFFFFLL;
  if (a4 >= 0x10)
    v8 = 16;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B5010);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v31 = 0x8000000101CA1CB3 & 0x7FFFFFFFFFFFFFFFLL;
      v32 = 2048;
      v33 = 16;
      v34 = 2048;
      v35 = a4;
      v36 = 1024;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B5010);
      v22 = 136315906;
      v23 = 0x8000000101CA1CB3 & 0x7FFFFFFFFFFFFFFFLL;
      v24 = 2048;
      v25 = 16;
      v26 = 2048;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v22, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::CMSurfaceCalibrationSample>::dispatchData(int, const void *, size_t) [T = CLWaterSubmersion_Types::CMSurfaceCalibrationSample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1014018F4;
  v18[3] = &unk_10217BDB0;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_10140189C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B4FD0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1014018F4(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_101401938(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101401964(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = off_1021B5040;
  sub_100478868(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0x4090000041900000;
  v2 = sub_100127B9C();
  sub_100081C10(v2, &v7);
  sub_100526804(v7, "SemiStatVMThreshold", (float *)(a1 + 32));
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_101401A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101401A20(uint64_t a1, float a2)
{
  uint64_t result;

  result = sub_101401964(a1);
  *(float *)(result + 36) = a2;
  return result;
}

uint64_t sub_101401A48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 48))(*(_QWORD *)(a2 + 40));
}

void sub_101401A58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  int v7;
  _BOOL4 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  float v16;
  uint8_t *v17;
  float v18;
  uint64_t v19;
  float v20;
  uint8_t *v21;
  float v22;
  float v23;
  float v24;
  int v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  double v30;
  uint64_t v31;
  int v32;
  double v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  double v37;
  _BYTE v38[32];
  _BYTE v39[20];
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  uint8_t buf[4];
  int v47;
  _BYTE v48[10];
  __int16 v49;
  double v50;
  _BYTE v51[10];
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  double v63;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  v6 = *(float *)(a2 + 296);
  if (*(_BYTE *)(a2 + 352) || v6 > 1.0)
  {
    v7 = *(unsigned __int8 *)(a2 + 324);
    v8 = *(_BYTE *)(a2 + 324) == 0;
    sub_10023BB98(a1 + 8, a2, (uint64_t)buf);
    v9 = *(float *)&v50;
    v10 = *(float *)v51;
    *(_DWORD *)(a3 + 32) = 0;
    v11 = 0.0;
    if (v6 > *(float *)(a1 + 32))
    {
      sub_1006B2E70();
      v11 = v12;
    }
    v13 = flt_101CA1CF8[v8];
    if (*(_BYTE *)(a2 + 352))
    {
      v14 = *(_DWORD *)(a1 + 36);
      *(float *)buf = v9;
      v47 = v14;
      *(float *)v48 = v13;
      *(float *)&v48[4] = v11;
      v15 = 4;
      v16 = v9;
      v17 = buf;
      do
      {
        if (v16 < *(float *)&buf[v15])
        {
          v16 = *(float *)&buf[v15];
          v17 = &buf[v15];
        }
        v15 += 4;
      }
      while (v15 != 16);
      v18 = *(float *)v17;
      *(_DWORD *)(a3 + 20) = *(_DWORD *)v17;
      *(float *)buf = v10;
      v47 = 1067869798;
      *(float *)v48 = v13;
      *(float *)&v48[4] = v11;
      v19 = 4;
      v20 = v10;
      v21 = buf;
      do
      {
        if (v20 < *(float *)&buf[v19])
        {
          v20 = *(float *)&buf[v19];
          v21 = &buf[v19];
        }
        v19 += 4;
      }
      while (v19 != 16);
      v22 = *(float *)v21;
    }
    else
    {
      if (v9 >= v13)
        v23 = v9;
      else
        v23 = flt_101CA1CF8[v8];
      if (v23 >= v11)
        v18 = v23;
      else
        v18 = v11;
      *(float *)(a3 + 20) = v18;
      if (v10 >= v13)
        v24 = v10;
      else
        v24 = v13;
      if (v24 >= v11)
        v22 = v24;
      else
        v22 = v11;
    }
    *(float *)(a3 + 28) = v22;
    *(float *)(a3 + 12) = v22;
    if (v22 != v10 || v10 <= 2.1)
      v26 = 1;
    else
      v26 = 12;
    *(_DWORD *)(a3 + 36) = v26;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B5080);
    v27 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v28 = *(_QWORD *)(a2 + 112);
      v29 = *(_DWORD *)(a2 + 152);
      v30 = *(float *)(a1 + 36);
      *(_DWORD *)buf = 67111424;
      v47 = v7;
      *(_WORD *)v48 = 2048;
      *(double *)&v48[2] = v11;
      v49 = 2048;
      v50 = v9;
      *(_WORD *)v51 = 2048;
      *(double *)&v51[2] = v13;
      v52 = 2048;
      v53 = v18;
      v54 = 2048;
      v55 = v28;
      v56 = 2048;
      v57 = v22;
      v58 = 2048;
      v59 = v10;
      v60 = 1024;
      v61 = v29;
      v62 = 2048;
      v63 = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Semistationary, Standing, %d, metsFromIntensity, %.1f, userMetsFromSteps, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromSteps, %.1f, activityType, %d, floor, %f", buf, 0x5Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B5080);
      v31 = *(_QWORD *)(a2 + 112);
      v32 = *(_DWORD *)(a2 + 152);
      v33 = *(float *)(a1 + 36);
      LODWORD(v37) = 67111424;
      HIDWORD(v37) = v7;
      *(_WORD *)v38 = 2048;
      *(double *)&v38[2] = v11;
      *(_WORD *)&v38[10] = 2048;
      *(double *)&v38[12] = v9;
      *(_WORD *)&v38[20] = 2048;
      *(double *)&v38[22] = v13;
      *(_WORD *)&v38[30] = 2048;
      *(_WORD *)v39 = 2048;
      *(_QWORD *)&v39[2] = v31;
      *(_WORD *)&v39[10] = 2048;
      *(double *)&v39[12] = v22;
      v40 = 2048;
      v41 = v10;
      v42 = 1024;
      v43 = v32;
      v44 = 2048;
      v45 = v33;
      LODWORD(v36) = 94;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Semistationary, Standing, %d, metsFromIntensity, %.1f, userMetsFromSteps, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromSteps, %.1f, activityType, %d, floor, %f", &v37, v36, v37, *(double *)v38, *(double *)&v38[8], *(double *)&v38[16], *(double *)&v38[24], v18, *(_DWORD *)v39, *(double *)&v39[8]);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieSemiStatModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
  }
}

void sub_101401E7C()
{
  operator delete();
}

void sub_101401E90(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_101401EBC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  double v4;
  double v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  int v10;
  double v11;
  uint8_t buf[4];
  double v13;

  *(_QWORD *)a1 = off_1021B50B0;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 1067030938;
  v9 = -1;
  v2 = sub_1001FD94C();
  sub_1001C1194(v2, (uint64_t)CFSTR("NumActiveCalibrations"), &v9);
  if (v9 >= 1)
    *(_DWORD *)(a1 + 12) = 1067869798;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B5100);
  v3 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 134217984;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedestrian, metsHrUpperBound, %.1f ", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B5100);
    v6 = *(float *)(a1 + 12);
    v10 = 134217984;
    v11 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Pedestrian, metsHrUpperBound, %.1f ", COERCE_DOUBLE(&v10));
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLCaloriePedestrianModelInterface::CLCaloriePedestrianModelInterface()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return a1;
}

uint64_t sub_1014020D0(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;

  v2 = a2[70];
  if (v2 <= 0.0)
    return 0;
  v3 = a2[57];
  if (v3 <= 0.0)
    return 0;
  v4 = vabdd_f64(v2 / (v3 * 60.0), round(v2 / (v3 * 60.0)));
  v5 = vabdd_f64(0.5, v4);
  if (v5 >= v4)
    v5 = v4;
  v6 = a2[71];
  if (v5 < 0.05 && v6 < 0.899999976)
    return 1;
  if (v5 >= 0.05 && (v5 <= 0.075 ? (v7 = v6 < 0.75) : (v7 = 0), v7))
    return 1;
  else
    return 0;
}

void sub_101402164(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_101402190(uint64_t a1)
{
  const mach_header_64 *v2;
  uint64_t v3;
  int32x2_t v4;
  int64x2_t v5;
  float32x2_t v6;
  __float2 v7;
  __float2 v8;
  float *v9;
  float64x2_t v11;
  float64x2_t v12;
  float v13;
  float32x2x2_t v14;

  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 8) = 256;
  *(_DWORD *)a1 = 8;
  v2 = &_mh_execute_header;
  v3 = 152;
  v11 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v12 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    v4 = vneg_s32((int32x2_t)v2);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    v6 = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_s64(v5), v12), v11));
    v13 = v6.f32[0];
    v7 = __sincosf_stret(v6.f32[1]);
    v8 = __sincosf_stret(v13);
    v14.val[1] = (float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v8.__sinval));
    v14.val[0] = (float32x2_t)__PAIR64__(LODWORD(v7.__cosval), LODWORD(v8.__cosval));
    v9 = (float *)(a1 + v3);
    vst2_f32(v9, v14);
    v2 = (const mach_header_64 *)vadd_s32((int32x2_t)v2, (int32x2_t)0x200000002);
    v3 += 16;
  }
  while (v3 != 2200);
  sub_101402280(256, (int *)(a1 + 16));
  return a1;
}

uint64_t sub_101402280(uint64_t result, int *a2)
{
  float v2;
  int v3;
  int v4;

  v2 = sqrtf((float)(int)result);
  v3 = 4;
  do
  {
    while ((int)result % v3)
    {
      v4 = v3 + 2;
      if (v3 == 2)
        v4 = 3;
      if (v3 == 4)
        v3 = 2;
      else
        v3 = v4;
      if (v2 < (float)v3)
        v3 = result;
    }
    result = ((int)result / v3);
    *a2 = v3;
    a2[1] = result;
    a2 += 2;
  }
  while ((int)result > 1);
  return result;
}

void sub_1014022DC(uint64_t a1, _DWORD *a2, unsigned __int16 *a3)
{
  int *v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float *v9;
  float32x2_t *v10;
  unint64_t v11;
  float32x2_t v12;
  float v13;
  uint64_t v14;

  v5 = (int *)(a1 + 8);
  bzero(&v13, 8 * *(int *)(a1 + 8));
  sub_1014023BC(&v13, a3, 0, 1, 1u, v5 + 2, (uint64_t)v5);
  *a2 = 0;
  v6 = *v5;
  if ((int)v6 >= 4)
  {
    v7 = v6 >> 1;
    v8 = (float)(int)v6;
    v9 = (float *)(a2 + 1);
    v10 = (float32x2_t *)&v14;
    v11 = v7 - 1;
    do
    {
      v12 = *v10++;
      *v9++ = sqrtf(vaddv_f32(vmul_f32(v12, v12)) / v8);
      --v11;
    }
    while (v11);
  }
}

void sub_1014023BC(float *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7)
{
  float *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  uint64_t v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  NSObject *v70;
  const char *v71;
  uint8_t *v72;
  int v74;
  _DWORD v77[4];
  uint8_t buf[4];
  int v79;

  v9 = a1;
  v10 = a6[1];
  v11 = v10 * *a6;
  v74 = *a6;
  if (v10 == 1)
  {
    v12 = a4 * a5;
    v13 = 8 * v11;
    v14 = a1;
    do
    {
      *v14 = *(float *)sub_1004784C4(a2, (int)a3);
      v14 += 2;
      LODWORD(a3) = a3 + v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    v15 = 0;
    v16 = a6 + 2;
    v17 = *a6 * a4;
    v18 = a4 * a5;
    v19 = 8 * v11;
    do
    {
      sub_1014023BC(&v9[v15 / 4], a2, a3, v17, a5, v16, a7);
      a3 = (a3 + v18);
      v15 += 8 * v10;
    }
    while (v19 != v15);
  }
  if (v74 == 2)
  {
    v60 = (float *)(*(_QWORD *)(a7 + 136) + 4);
    v61 = 2 * v10;
    do
    {
      v62 = &v9[v61];
      v63 = *(v60 - 1);
      v64 = v9[v61];
      v65 = v9[v61 + 1];
      v66 = (float)(v64 * v63) - (float)(v65 * *v60);
      v67 = (float)(v63 * v65) + (float)(v64 * *v60);
      v68 = v9[1] - v67;
      *v62 = *v9 - v66;
      v62[1] = v68;
      v69 = v67 + v9[1];
      *v9 = v66 + *v9;
      v9[1] = v69;
      v9 += 2;
      v60 += 2 * a4;
      --v10;
    }
    while (v10);
  }
  else
  {
    v20 = v10;
    if (v74 == 4)
    {
      v21 = 2 * v10;
      v22 = v9 + 1;
      v23 = (float *)(*(_QWORD *)(a7 + 136) + 4);
      v24 = 4 * v10;
      v25 = *(_DWORD *)(a7 + 4);
      v26 = 6 * v10;
      v27 = v23;
      v28 = v23;
      do
      {
        v29 = &v22[v21];
        v30 = *(v23 - 1);
        v31 = v22[v21 - 1];
        v32 = v22[2 * v10];
        v33 = (float)(v31 * v30) - (float)(v32 * *v23);
        v34 = (float)(v30 * v32) + (float)(v31 * *v23);
        v35 = &v22[v24];
        v36 = *(v27 - 1);
        v37 = v22[v24 - 1];
        v38 = v22[4 * v10];
        v39 = (float)(v37 * v36) - (float)(v38 * *v27);
        v40 = (float)(v36 * v38) + (float)(v37 * *v27);
        v41 = &v22[v26];
        v42 = *(v28 - 1);
        v43 = v22[v26 - 1];
        v44 = v22[6 * v10];
        v45 = (float)(v43 * v42) - (float)(v44 * *v28);
        v46 = (float)(v42 * v44) + (float)(v43 * *v28);
        v47 = *(v22 - 1);
        v48 = v47 - v39;
        v49 = *v22 - v40;
        v50 = v39 + v47;
        v51 = v40 + *v22;
        *(v22 - 1) = v50;
        *v22 = v51;
        v52 = v34 + v46;
        v53 = v33 - v45;
        v54 = v34 - v46;
        *(v35 - 1) = v50 - (float)(v33 + v45);
        *v35 = v51 - v52;
        v55 = v52 + *v22;
        *(v22 - 1) = (float)(v33 + v45) + *(v22 - 1);
        *v22 = v55;
        if (v25)
        {
          v56 = v48 + v54;
          v57 = v49 - v53;
          v58 = v48 - v54;
          v59 = v49 + v53;
        }
        else
        {
          v58 = v48 + v54;
          v59 = v49 - v53;
          v56 = v48 - v54;
          v57 = v49 + v53;
        }
        v22[2 * v10] = v59;
        v22[6 * v10] = v57;
        v22 += 2;
        v28 += 6 * a4;
        *(v29 - 1) = v58;
        v27 += 4 * a4;
        v23 += 2 * a4;
        *(v41 - 1) = v56;
        --v20;
      }
      while (v20);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B5140);
      v70 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v79 = v74;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "Error in FFT,p,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B5140);
        v77[0] = 67109120;
        v77[1] = v74;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Error in FFT,p,%d", v77);
        v72 = (uint8_t *)v71;
        sub_100512490("Generic", 1, 0, 0, "void kf_work(kiss_fft_cpx *, const CMQueue<scalar_32> &, int, const size_t, int, const int *, const kiss_fft_state *)", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
    }
  }
}

void sub_1014027D0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1014027FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double Current;
  int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  const char *v15;
  NSString *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  void **v39;
  uint64_t v40;
  NSDictionary *(*v41)(uint64_t);
  void *v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  double v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  __int16 v77;
  double v78;

  Current = CFAbsoluteTimeGetCurrent();
  v6 = *(_DWORD *)(a2 + 1);
  if (v6 < 0x8000)
  {
    if (v6 <= 127)
    {
      if ((v6 - 4) <= 0x3C && ((1 << (v6 - 4)) & 0x1000000010001101) != 0)
        goto LABEL_48;
      if (v6 < 3)
      {
        v9 = 0;
        goto LABEL_55;
      }
      goto LABEL_101;
    }
    if (v6 > 4127)
    {
      if (v6 >= 12288)
      {
        if (v6 != 12288 && v6 != 0x4000)
          goto LABEL_101;
      }
      else if (v6 != 4128 && v6 != 0x2000)
      {
        goto LABEL_101;
      }
    }
    else if (v6 > 511)
    {
      if (v6 != 512 && v6 != 4096)
        goto LABEL_101;
    }
    else if (v6 != 128 && v6 != 256)
    {
      goto LABEL_101;
    }
    goto LABEL_54;
  }
  if (v6 < 528384)
  {
    if (v6 > 262271)
    {
      if (v6 >= 397312)
      {
        if (v6 != 397312 && v6 != 462848)
          goto LABEL_101;
        goto LABEL_54;
      }
      if (v6 == 262272)
        goto LABEL_54;
      v10 = 327808;
    }
    else
    {
      if (v6 > 131199)
      {
        if (v6 != 131200 && v6 != 196608)
          goto LABEL_101;
        goto LABEL_54;
      }
      if (v6 == 0x8000)
        goto LABEL_54;
      v10 = 65664;
    }
    if (v6 != v10)
      goto LABEL_101;
    goto LABEL_54;
  }
  if (v6 <= 786447)
  {
    if (v6 > 655423)
    {
      if (v6 == 655424)
        goto LABEL_48;
      v7 = 720912;
    }
    else
    {
      if (v6 == 528384)
        goto LABEL_54;
      v7 = 589888;
    }
LABEL_47:
    if (v6 == v7)
      goto LABEL_48;
LABEL_101:
    sub_1019521CC();
  }
  if (v6 <= 917515)
  {
    if (v6 != 786448)
    {
      v7 = 851980;
      goto LABEL_47;
    }
LABEL_48:
    v9 = 2;
    goto LABEL_55;
  }
  if (v6 != 0x200000 && v6 != 0x100000)
  {
    v7 = 917516;
    goto LABEL_47;
  }
LABEL_54:
  v9 = 1;
LABEL_55:
  v11 = *(unsigned __int8 *)(a2 + 13);
  v12 = *(unsigned __int8 *)(a2 + 14);
  v13 = *(unsigned __int8 *)(a2 + 15);
  switch(*(_BYTE *)(a2 + 13))
  {
    case 1:
      v14 = "Portrait";
      break;
    case 2:
      v14 = "PortraitUpsideDown";
      break;
    case 3:
      v14 = "LandscapeLeft";
      break;
    case 4:
      v14 = "LandscapeRight";
      break;
    case 5:
      v14 = "FaceUp";
      break;
    case 6:
      v14 = "FaceDown";
      break;
    case 7:
      sub_1019521F4((uint64_t)NSString, v3, v4);
    default:
      v14 = "Ambiguous";
      break;
  }
  switch(*(_BYTE *)(a2 + 14))
  {
    case 1:
      v15 = "Portrait";
      break;
    case 2:
      v15 = "PortraitUpsideDown";
      break;
    case 3:
      v15 = "LandscapeLeft";
      break;
    case 4:
      v15 = "LandscapeRight";
      break;
    case 5:
      v15 = "FaceUp";
      break;
    case 6:
      v15 = "FaceDown";
      break;
    case 7:
      sub_1019521F4((uint64_t)NSString, v3, v4);
    default:
      v15 = "Ambiguous";
      break;
  }
  *(double *)&v16 = COERCE_DOUBLE(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%sTo%s"), v14, v15));
  v17 = (unsigned __int128)(*(uint64_t *)(a2 + 5) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (qword_10229FCE0 != -1)
    dispatch_once(&qword_10229FCE0, &stru_1021B5188);
  v18 = Current * 1000000.0;
  v19 = (v17 >> 18) + ((unint64_t)v17 >> 63);
  v20 = qword_10229FCE8;
  v21 = os_log_type_enabled((os_log_t)qword_10229FCE8, OS_LOG_TYPE_DEBUG);
  if (v21)
  {
    switch(*(_BYTE *)(a2 + 13))
    {
      case 1:
        v24 = "Portrait";
        break;
      case 2:
        v24 = "PortraitUpsideDown";
        break;
      case 3:
        v24 = "LandscapeLeft";
        break;
      case 4:
        v24 = "LandscapeRight";
        break;
      case 5:
        v24 = "FaceUp";
        break;
      case 6:
        v24 = "FaceDown";
        break;
      case 7:
        sub_1019521F4(v21, v22, v23);
      default:
        v24 = "Ambiguous";
        break;
    }
    switch(*(_BYTE *)(a2 + 14))
    {
      case 1:
        v25 = "Portrait";
        break;
      case 2:
        v25 = "PortraitUpsideDown";
        break;
      case 3:
        v25 = "LandscapeLeft";
        break;
      case 4:
        v25 = "LandscapeRight";
        break;
      case 5:
        v25 = "FaceUp";
        break;
      case 6:
        v25 = "FaceDown";
        break;
      case 7:
        sub_1019521F4(v21, v22, v23);
      default:
        v25 = "Ambiguous";
        break;
    }
    v26 = *(unsigned __int8 *)(a2 + 16);
    *(_DWORD *)buf = 136316674;
    v66 = v24;
    v67 = 2080;
    v68 = v25;
    v69 = 1024;
    v70 = v13;
    v71 = 1024;
    v72 = v26;
    v73 = 2048;
    v74 = v19;
    v75 = 1024;
    v76 = v9;
    v77 = 2048;
    v78 = v18;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[CLOrientationStatisticsRecorder] fromOrientation: %s, toOrientation: %s, displayState: %u, isAPAwake: %u, timeSinceLastOrientationChange: %llu, generalMotionState: %u, timestamp: %.3f", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCE0 != -1)
      dispatch_once(&qword_10229FCE0, &stru_1021B5188);
    v30 = qword_10229FCE8;
    v31 = sub_101402F50(*(unsigned __int8 *)(a2 + 13), v28, v29);
    v34 = sub_101402F50(*(unsigned __int8 *)(a2 + 14), v32, v33);
    v35 = *(unsigned __int8 *)(a2 + 16);
    v51 = 136316674;
    v52 = v31;
    v53 = 2080;
    v54 = v34;
    v55 = 1024;
    v56 = v13;
    v57 = 1024;
    v58 = v35;
    v59 = 2048;
    v60 = v19;
    v61 = 1024;
    v62 = v9;
    v63 = 2048;
    v64 = v18;
    LODWORD(v38) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "[CLOrientationStatisticsRecorder] fromOrientation: %s, toOrientation: %s, displayState: %u, isAPAwake: %u, timeSinceLastOrientationChange: %llu, generalMotionState: %u, timestamp: %.3f", (const char *)&v51, v38, (_DWORD)v39, v40, v41, (_DWORD)v42, v43);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLOrientationStatisticsLogger::feedOrientationStatistics(const OrientationStatistics &)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v39 = _NSConcreteStackBlock;
  v40 = 3221225472;
  v41 = sub_101402FD4;
  v42 = &unk_1021B5168;
  v44 = v18;
  v47 = v11;
  v48 = v12;
  v45 = a2;
  v46 = v19;
  v49 = v13;
  v50 = v9;
  v43 = *(double *)&v16;
  return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.DeviceOrientationChanged"), &v39);
}

const char *sub_101402F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *result;

  switch((int)a1)
  {
    case 1:
      result = "Portrait";
      break;
    case 2:
      result = "PortraitUpsideDown";
      break;
    case 3:
      result = "LandscapeLeft";
      break;
    case 4:
      result = "LandscapeRight";
      break;
    case 5:
      result = "FaceUp";
      break;
    case 6:
      result = "FaceDown";
      break;
    case 7:
      sub_1019521F4(a1, a2, a3);
    default:
      result = "Ambiguous";
      break;
  }
  return result;
}

NSDictionary *sub_101402FD4(uint64_t a1)
{
  NSNumber *v2;
  uint64_t v3;
  _QWORD v5[8];
  _QWORD v6[8];

  v5[0] = CFSTR("logTimestamp");
  v6[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v5[1] = CFSTR("fromOrientation");
  v6[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64));
  v5[2] = CFSTR("toOrientation");
  v6[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 68));
  v5[3] = CFSTR("displayState");
  v6[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v5[4] = CFSTR("isAPAwake");
  v6[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 16));
  v5[5] = CFSTR("timeSinceLastOrientationChange");
  v6[5] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 56));
  v5[6] = CFSTR("motionState");
  v2 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76));
  v5[7] = CFSTR("transitionType");
  v3 = *(_QWORD *)(a1 + 32);
  v6[6] = v2;
  v6[7] = v3;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 8);
}

void sub_101403118(id a1)
{
  qword_10229FCE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Orientation");
}

void sub_101403144(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 86, a4);
}

uint64_t sub_10140319C(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_101403314(a1, "CLWorkloadCalibratorRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021B51B8;
  *(_QWORD *)(a1 + 72) = off_1021B5270;
  sub_100E81598((_QWORD *)(a1 + 336), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 352), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 368), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 384), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 400), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 416), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 432), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 448), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 464), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 480), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 496), 0, 0);
  *(_OWORD *)(a1 + 512) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_1014032E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101403314(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021B5350;
  *(_QWORD *)(a1 + 72) = off_1021B53F8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B5350;
  *(_QWORD *)(a1 + 72) = off_1021B53F8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 240) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1014036BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_10213DEB0;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_101403760()
{
  JUMPOUT(0x101403740);
}

_QWORD *sub_101403768(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B53F8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B5350;
  a1[33] = off_10213DEB0;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1014037E4(_QWORD *a1)
{
  *a1 = off_1021B51B8;
  a1[9] = off_1021B5270;
  sub_101403828((uint64_t)a1, 0, 0);
  return sub_101403768(a1);
}

void sub_101403828(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 512) = a2;
    v6 = *(const void **)(a1 + 520);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 520) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_101952218();
    sub_10140389C(v7);
  }
}

_QWORD *sub_1014038A0(uint64_t a1)
{
  return sub_1014037E4((_QWORD *)(a1 - 72));
}

void sub_1014038A8(_QWORD *a1)
{
  sub_1014037E4(a1);
  operator delete();
}

void sub_1014038CC(uint64_t a1)
{
  sub_1014037E4((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1014038F4()
{
  return -1;
}

uint64_t sub_1014038FC()
{
  return -1;
}

uint64_t sub_101403904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  _DWORD v26[2];
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30[3];
  __int16 v31;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v30[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v31 = 256;
  if (sub_10008950C(v6))
  {
    sub_100087AF4((_QWORD *)(a1 + 352), v30);
    while (!sub_101403AF8(v30, (uint64_t)v26))
    {
      v8 = v26[0];
      v7 = v26[1];
      v9 = v27;
      v10 = v28;
      v11 = v29;
      v13 = *(_DWORD **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(_DWORD **)a2;
        v16 = ((uint64_t)v13 - *(_QWORD *)a2) >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          sub_100259694();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 4 > v17)
          v17 = v18 >> 4;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_10025BA00(a2 + 16, v19);
          v15 = *(_DWORD **)a2;
          v13 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[32 * v16];
        *(_DWORD *)v21 = v8;
        *((_DWORD *)v21 + 1) = v7;
        *((float *)v21 + 2) = v9;
        *((float *)v21 + 3) = v10;
        *((_QWORD *)v21 + 2) = v11;
        v22 = v21;
        if (v13 != v15)
        {
          do
          {
            v23 = *((_OWORD *)v13 - 1);
            *((_OWORD *)v22 - 2) = *((_OWORD *)v13 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 32;
            v13 -= 8;
          }
          while (v13 != v15);
          v15 = *(_DWORD **)a2;
        }
        v14 = v21 + 32;
        *(_QWORD *)a2 = v22;
        *(_QWORD *)(a2 + 8) = v21 + 32;
        *(_QWORD *)(a2 + 16) = &v20[32 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v26[0];
        v13[1] = v7;
        *((float *)v13 + 2) = v9;
        *((float *)v13 + 3) = v10;
        v14 = (char *)(v13 + 8);
        *((_QWORD *)v13 + 2) = v11;
      }
      *(_QWORD *)(a2 + 8) = v14;
    }
    v24 = v30[0];
    v30[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_101403AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101403AF8(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  double v11;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 4) = sqlite3_column_int(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v11 = sqlite3_column_double(v10, 4);
  result = 0;
  *(double *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_101403BAC(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 336), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_101403C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101403C64(uint64_t a1)
{
  return sub_101403BAC(a1 - 72);
}

uint64_t sub_101403C6C(_QWORD *a1, uint64_t a2, int a3, float a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  int v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  NSObject *v32;
  uint64_t result;
  const char *v34;
  uint8_t *v35;
  __int16 v36[8];
  uint64_t v37;
  _QWORD *v38;
  pthread_mutex_t *v39;
  __int16 v40;
  uint8_t buf[4];
  int v42;
  double v43;
  double v44;
  uint64_t v45;

  v9 = a1[14];
  v8 = a1 + 14;
  v10 = v8 - 5;
  v38 = v8;
  (*(void (**)(void))(v9 + 16))();
  v40 = 256;
  if (!sub_10008950C(v10))
    goto LABEL_32;
  sub_100087AF4(a1 + 46, &v37);
  if (v37)
  {
    v11 = (sqlite3_stmt *)sub_100026CC8(v37);
    if (sub_1000CD75C(v11, 1, a3))
    {
      v12 = (sqlite3_stmt *)sub_100026CC8(v37);
      if (sub_1000890C4(v12, 2, a4))
      {
        v13 = a1[10];
        v14 = (sqlite3_stmt *)sub_100026CC8(v37);
        sub_10023C9B0(v13, v14);
      }
    }
    while (!sub_101403AF8(&v37, (uint64_t)buf))
    {
      v16 = *(_DWORD *)buf;
      v15 = v42;
      v17 = v43;
      v18 = v44;
      v19 = v45;
      v21 = *(_DWORD **)(a2 + 8);
      v20 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *(_DWORD **)a2;
        v24 = ((uint64_t)v21 - *(_QWORD *)a2) >> 5;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59)
          sub_100259694();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 4 > v25)
          v25 = v26 >> 4;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
          v27 = 0x7FFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_10025BA00(a2 + 16, v27);
          v23 = *(_DWORD **)a2;
          v21 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[32 * v24];
        *(_DWORD *)v29 = v16;
        *((_DWORD *)v29 + 1) = v15;
        *((float *)v29 + 2) = v17;
        *((float *)v29 + 3) = v18;
        *((_QWORD *)v29 + 2) = v19;
        v30 = v29;
        if (v21 != v23)
        {
          do
          {
            v31 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 32;
            v21 -= 8;
          }
          while (v21 != v23);
          v23 = *(_DWORD **)a2;
        }
        v22 = v29 + 32;
        *(_QWORD *)a2 = v30;
        *(_QWORD *)(a2 + 8) = v29 + 32;
        *(_QWORD *)(a2 + 16) = &v28[32 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v21 = *(_DWORD *)buf;
        v21[1] = v15;
        *((float *)v21 + 2) = v17;
        *((float *)v21 + 3) = v18;
        v22 = (char *)(v21 + 8);
        *((_QWORD *)v21 + 2) = v19;
      }
      *(_QWORD *)(a2 + 8) = v22;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B5300);
    v32 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "WorkloadCalibratorRecorderDb: failed to prepare getActTypeAndStdDevAsc #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B5300);
      v36[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "WorkloadCalibratorRecorderDb: failed to prepare getActTypeAndStdDevAsc #InvalidPreparedSQLStatement", v36, 2);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 0, "void CLWorkloadCalibratorRecorderDb::getAllRecordsByActivityTypeAndMaximumStandardDeviation(std::vector<CLWorkloadCalibratorEntry> &, const int, const float) const", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
  }
  result = v37;
  v37 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (HIBYTE(v40))
  {
LABEL_32:
    if ((_BYTE)v40)
      return pthread_mutex_unlock(v39);
    else
      return (*(uint64_t (**)(_QWORD *))(*v38 + 24))(v38);
  }
  return result;
}

void sub_101403FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101404038(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint64_t v18[3];
  __int16 v19;
  uint8_t buf[1640];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v18[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v19 = 256;
  if (sub_10008950C(v6))
  {
    sub_100087AF4((_QWORD *)(a1 + 384), v18);
    v7 = (sqlite3_stmt *)sub_100026CC8(v18[0]);
    if (sub_1000890C4(v7, 1, a2))
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = (sqlite3_stmt *)sub_100026CC8(v18[0]);
      sub_10023C9B0(v8, v9);
      v10 = *(_QWORD *)(a1 + 80);
      if (*(uint64_t *)(v10 + 88) <= 0)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = *(_QWORD *)(v10 + 88);
      sub_100053048(v10, v11);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B5320);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B5320);
        v17[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Failed to delete records", v17, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkloadCalibratorRecorderDb::deleteRecordsBefore(CFTimeInterval)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    v13 = v18[0];
    v18[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_101404298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014042E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1[10]))
  {
    sub_100634364(a1[10], "WorkloadCalibratorHistory", (const char **)&qword_10230EC50, (const std::string::value_type **)&qword_10230ED70, 0);
    a1[42] = sub_10063D314(a1[10], "SELECT COUNT(*) FROM WorkloadCalibratorHistory WHERE activityType == ?");
    a1[43] = v2;
    a1[44] = sub_10063D314(a1[10], "SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime ASC");
    a1[45] = v3;
    a1[46] = sub_10063D314(a1[10], "SELECT * FROM WorkloadCalibratorHistory WHERE activityType == ? AND standardDeviation <= ? ORDER BY startTime ASC");
    a1[47] = v4;
    a1[48] = sub_10063D314(a1[10], "DELETE FROM WorkloadCalibratorHistory WHERE startTime < ?");
    a1[49] = v5;
    a1[50] = sub_10063D314(a1[10], "DELETE FROM WorkloadCalibratorHistory WHERE startTime > ?");
    a1[51] = v6;
    a1[52] = sub_10063D314(a1[10], "DELETE FROM WorkloadCalibratorHistory");
    a1[53] = v7;
    a1[54] = sub_10063D314(a1[10], "INSERT INTO WorkloadCalibratorHistory (activityType, valueAverage, standardDeviation, startTime) VALUES (?, ?, ?, ?)");
    a1[55] = v8;
    a1[58] = sub_10063D314(a1[10], "SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime DESC LIMIT 1");
    a1[59] = v9;
    a1[56] = sub_10063D314(a1[10], "UPDATE WorkloadCalibratorHistory SET startTime = startTime + ?");
    a1[57] = v10;
    a1[60] = sub_10063D314(a1[10], "DELETE FROM WorkloadCalibratorHistory WHERE id not in (SELECT id FROM WorkloadCalibratorHistory ORDER BY id DESC LIMIT ?) AND activityType = ?");
    a1[61] = v11;
    a1[62] = sub_10063D314(a1[10], "UPDATE WorkloadCalibratorHistory SET valueAverage= ?, standardDeviation= ? WHERE startTime = ? AND activityType = ?");
    a1[63] = v12;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B5320);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B5320);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Device is locked and we are unable to open the database.", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkloadCalibratorRecorderDb::prepareSQLStatements()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

uint64_t sub_10140457C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 416), &v7);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v7);
    sub_10023C9B0(v3, v4);
    v5 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = *(_QWORD *)(v5 + 88);
    sub_100053048(v5, v6);
    *(_DWORD *)(a1 + 132) = 0;
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101404604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101404628(uint64_t a1)
{
  return sub_10140457C(a1 - 72);
}

uint64_t sub_101404630(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
    sub_100087AF4((_QWORD *)(a1 + 400), &v14);
    v5 = (sqlite3_stmt *)sub_100026CC8(v14);
    if (sub_1000890C4(v5, 3, *(double *)(a2 + 16)))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v14);
      sub_10023C9B0(v6, v7);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B5320);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to delete records.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B5320);
        v13 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Failed to delete records.", &v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLWorkloadCalibratorRecorderDb::deleteRecordsAfterInsertUL(const CLWorkloadCalibratorEntry &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    v9 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v9 + 88) <= 0)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = *(_QWORD *)(v9 + 88);
    sub_100053048(v9, v10);
    result = v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10140486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10140489C(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 448), &v12);
    v5 = (sqlite3_stmt *)sub_100026CC8(v12);
    if (sub_1000890C4(v5, 1, a2))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v12);
      sub_10023C9B0(v6, v7);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B5320);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B5320);
        v11 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Failed to shift records.", &v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLWorkloadCalibratorRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    result = v12;
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101404A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101404AC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 432), &v11);
    v5 = (sqlite3_stmt *)sub_100026CC8(v11);
    if (sub_1000CD75C(v5, 1, *(_DWORD *)(a2 + 4)))
    {
      v6 = (sqlite3_stmt *)sub_100026CC8(v11);
      if (sub_1000890C4(v6, 2, *(float *)(a2 + 8)))
      {
        v7 = (sqlite3_stmt *)sub_100026CC8(v11);
        if (sub_1000890C4(v7, 3, *(float *)(a2 + 12)))
        {
          v8 = (sqlite3_stmt *)sub_100026CC8(v11);
          if (sub_1000890C4(v8, 4, *(double *)(a2 + 16)))
          {
            v9 = *(_QWORD *)(a1 + 80);
            v10 = (sqlite3_stmt *)sub_100026CC8(v11);
            sub_10023C9B0(v9, v10);
          }
        }
      }
    }
    result = v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101404B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101404BC0(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 480), &v13);
    v7 = (sqlite3_stmt *)sub_100026CC8(v13);
    if (sub_1000CD75C(v7, 1, a2))
    {
      v8 = (sqlite3_stmt *)sub_100026CC8(v13);
      if (sub_1000CD75C(v8, 2, a3))
      {
        v9 = *(_QWORD *)(a1 + 80);
        v10 = (sqlite3_stmt *)sub_100026CC8(v13);
        sub_10023C9B0(v9, v10);
        v11 = *(_QWORD *)(a1 + 80);
        if (*(uint64_t *)(v11 + 88) <= 0)
          v12 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v12 = *(_QWORD *)(v11 + 88);
        sub_100053048(v11, v12);
      }
    }
    result = v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101404C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101404CA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 496), &v11);
    v5 = (sqlite3_stmt *)sub_100026CC8(v11);
    if (sub_1000890C4(v5, 1, *(float *)(a2 + 8)))
    {
      v6 = (sqlite3_stmt *)sub_100026CC8(v11);
      if (sub_1000890C4(v6, 2, *(float *)(a2 + 12)))
      {
        v7 = (sqlite3_stmt *)sub_100026CC8(v11);
        if (sub_1000890C4(v7, 3, *(double *)(a2 + 16)))
        {
          v8 = (sqlite3_stmt *)sub_100026CC8(v11);
          if (sub_1000CD75C(v8, 4, *(_DWORD *)(a2 + 4)))
          {
            v9 = *(_QWORD *)(a1 + 80);
            v10 = (sqlite3_stmt *)sub_100026CC8(v11);
            sub_10023C9B0(v9, v10);
          }
        }
      }
    }
    result = v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101404D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101404DA4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  double v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  double v23;
  double v24;
  double v25[5];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  _BYTE buf[1634];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B5320);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a2 + 4);
      v7 = *(float *)(a2 + 8);
      v8 = *(float *)(a2 + 12);
      v9 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v7;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v8;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WorkloadCalibratorDb (%d,%f,%f,%f).", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B5320);
      v18 = *(float *)(a2 + 8);
      v19 = *(float *)(a2 + 12);
      v20 = *(_QWORD *)(a2 + 16);
      v28 = __PAIR64__(*(_DWORD *)(a2 + 4), 67109888);
      v29 = 2048;
      v30 = v18;
      v31 = 2048;
      v32 = v19;
      v33 = 2048;
      v34 = v20;
      LODWORD(v23) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WorkloadCalibratorDb (%d,%f,%f,%f).", &v28, v23, v24, v25[0]);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkloadCalibratorRecorderDb::insertRecordUL(const CLWorkloadCalibratorEntry &, BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v10;
    sub_100087AF4((_QWORD *)(a1 + 432), &v28);
    v11 = (sqlite3_stmt *)sub_100026CC8(v28);
    if (sub_1000CD75C(v11, 1, *(_DWORD *)(a2 + 4)))
    {
      v12 = (sqlite3_stmt *)sub_100026CC8(v28);
      if (sub_1000890C4(v12, 2, *(float *)(a2 + 8)))
      {
        v13 = (sqlite3_stmt *)sub_100026CC8(v28);
        if (sub_1000890C4(v13, 3, *(float *)(a2 + 12)))
        {
          v14 = (sqlite3_stmt *)sub_100026CC8(v28);
          if (sub_1000890C4(v14, 4, *(double *)(a2 + 16)))
          {
            v15 = *(_QWORD *)(a1 + 80);
            v16 = (sqlite3_stmt *)sub_100026CC8(v28);
            sub_10023C9B0(v15, v16);
            ++*(_DWORD *)(a1 + 132);
            v17 = *(void **)(a1 + 512);
            if (v17)
            {
              if (*(_QWORD *)(a1 + 520))
              {
                *(_QWORD *)&v25[0] = _NSConcreteStackBlock;
                *(_QWORD *)&v25[1] = 3221225472;
                *(_QWORD *)&v25[2] = sub_1014050FC;
                *(_QWORD *)&v25[3] = &unk_1021382B0;
                *(_QWORD *)&v25[4] = a1;
                v26 = *(_OWORD *)buf;
                v27 = *(_OWORD *)&buf[16];
                objc_msgSend(v17, "async:", v25);
              }
            }
          }
        }
      }
    }
    result = v28;
    v28 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1014050D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014050FC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v4[2];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520);
  v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v4);
}

uint64_t sub_101405138()
{
  return 0;
}

uint64_t sub_101405140(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 464), &v11);
  v4 = sub_101403AF8(&v11, (uint64_t)&v8);
  if (!(_DWORD)v4)
  {
    v5 = vcvt_f32_f64(v9);
    *a2 = v8;
    a2[1] = v5;
    a2[2] = v10;
  }
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_1014051D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014051F4(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1019523A0(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1014054F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_101405560(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B5300);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B5300);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B5300);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLWorkloadCalibratorEntry>::setDatabaseAccessible() [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_101405B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101405B5C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  _BYTE v32[16];
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 240) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B5300);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B5300);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 16);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B5300);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)buf = 134349312;
        v40 = v33;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B5300);
        v23 = *(_QWORD *)(a2 + 16);
        v35 = 134349312;
        v36 = v33;
        v37 = 2050;
        v38 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 16);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B5300);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 16);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B5300);
          v26 = *(double *)(a2 + 16);
          v35 = 134217984;
          v36 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B5300);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B5300);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_101406298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014062C4(uint64_t a1)
{
  return sub_101405560(a1 - 72);
}

void sub_1014062CC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1014062F8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_101406324(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10195250C(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1014065E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10140664C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101952678(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1014068AC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019527E4(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_101406AE4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101952950(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101406D0C()
{
  qword_10230EC50 = (uint64_t)"id";
  dword_10230EC58 = 1;
  word_10230EC5C = 1;
  byte_10230EC60 = 0;
  byte_10230EC78 = 0;
  qword_10230EC80 = (uint64_t)"activityType";
  dword_10230EC88 = 1;
  word_10230EC8C = 0;
  byte_10230EC90 = 0;
  byte_10230ECA8 = 0;
  qword_10230ECB0 = (uint64_t)"valueAverage";
  dword_10230ECB8 = 2;
  word_10230ECBC = 0;
  byte_10230ECC0 = 0;
  byte_10230ECD8 = 0;
  qword_10230ECE0 = (uint64_t)"standardDeviation";
  dword_10230ECE8 = 2;
  word_10230ECEC = 0;
  byte_10230ECF0 = 0;
  byte_10230ED08 = 0;
  qword_10230ED10 = (uint64_t)"startTime";
  dword_10230ED18 = 2;
  word_10230ED1C = 0;
  byte_10230ED20 = 0;
  byte_10230ED38 = 0;
  qword_10230ED40 = 0;
  dword_10230ED48 = 5;
  word_10230ED4C = 0;
  byte_10230ED50 = 0;
  byte_10230ED68 = 0;
  qword_10230ED70 = (uint64_t)"activityType";
  *(_QWORD *)algn_10230ED78 = "startTime";
  qword_10230ED80 = 0;
}

void sub_101406DD4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_1021B5448;
  v5[6] = 0;
  sub_101499948();
}

void sub_101406E64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_101406E90(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSwimDataSubscription::onSwimNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B5508);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimDataSubscription::onSwimNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B5508);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimDataSubscription::onSwimNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10140808C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101407048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10140706C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1021B5448;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[6];
    a1[6] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return sub_10002FA68((uint64_t)a1);
}

void sub_1014070CC(_QWORD *a1)
{
  sub_10140706C(a1);
  operator delete();
}

_QWORD *sub_1014070F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_1021B5778;
  v15[1] = sub_101407410;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageSwimDataUpdate");
  sub_100BBA974((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_1021B5828;
  v13[1] = sub_10140781C;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageSwimDataQuery");
  sub_100BBA974((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_1021B5828;
  v11[1] = sub_101407C88;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageSwimSWOLFSessionQuery");
  sub_100BBA974((uint64_t)v22, (uint64_t)v11);
  sub_101409424(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_101407304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_101407410(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  _WORD v17[8];
  uint64_t v18;
  NSNumber *v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B5548);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v27 = 2048;
    v28 = a1;
    v29 = 1024;
    v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SwimData subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B5548);
    v11 = *(_QWORD *)(a1 + 24);
    v20 = 138412802;
    v21 = v11;
    v22 = 2048;
    v23 = a1;
    v24 = 1024;
    v25 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "SwimData subscription changed, %@, %p, %d", &v20, 28);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleRequestSwimDataUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v20 = 0;
  if ((sub_101408390(a1, (int *)&v20) & 1) != 0)
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 0, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 0);
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B5528);
    v10 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to swim updates.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B5528);
      v17[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "#Warning Failed to subscribe to swim updates.", v17, v16);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleRequestSwimDataUpdate(BOOL, const CLNameValuePair &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v18 = CMErrorMessage;
    v19 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    sub_101408458(a1, buf);
  }

}

void sub_1014077DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10140781C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  uint64_t v11;
  CLOSTransaction *v12;
  void *v13;
  std::__shared_weak_count *v14;
  CLConnectionMessage *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CLConnectionMessage *v21;
  NSObject *v22;
  CLConnectionMessage *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  __int16 v27[6];
  unsigned int v28;
  _QWORD v29[5];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  CLConnectionMessage *v40;
  std::__shared_weak_count *v41;
  _OWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  _UNKNOWN **v45;
  uint8_t buf[16];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  NSNumber *v57;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v28 = 0;
  if ((sub_101408390(a1, (int *)&v28) & 1) != 0)
  {
    v6 = objc_opt_class(CMSwimData, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (v11 = CMSwimKeyDataRecord, objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMSwimKeyDataRecord)))
    {
      v12 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDaemonClient.SwimNotifierQuery");
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      *(_OWORD *)buf = 0u;
      objc_msgSend(objc_msgSend(v10, "objectForKeyedSubscript:", v11), "convertToSwimEntry:", buf);
      v13 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
      v42[6] = v52;
      v42[7] = v53;
      v42[8] = v54;
      v42[2] = v48;
      v42[3] = v49;
      v42[4] = v50;
      v42[5] = v51;
      v42[0] = *(_OWORD *)buf;
      v42[1] = v47;
      v29[1] = 3321888768;
      v36 = v52;
      v37 = v53;
      v38 = v54;
      v32 = v48;
      v33 = v49;
      v34 = v50;
      v35 = v51;
      v30 = *(_OWORD *)buf;
      v43 = v55;
      v29[0] = _NSConcreteStackBlock;
      v29[2] = sub_1014084F8;
      v29[3] = &unk_1021B5470;
      v31 = v47;
      v15 = *(CLConnectionMessage **)a2;
      v14 = *(std::__shared_weak_count **)(a2 + 8);
      v39 = v55;
      v40 = v15;
      v41 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v29[4] = v12;
      objc_msgSend(v13, "queryUsingRecord:withReply:", v42, v29);
      v18 = v41;
      if (v41)
      {
        v19 = (unint64_t *)&v41->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B5528);
      v22 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_1021B5528);
        v27[0] = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 17, "Programmer error: Wrong parameters were passed.", v27, v26);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 0, "void CLSwimDataSubscription::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      v23 = *(CLConnectionMessage **)a2;
      v44 = CMErrorMessage;
      v45 = &off_10221DBC8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
      CLConnectionMessage::sendReply(v23);
    }
  }
  else
  {
    v21 = *(CLConnectionMessage **)a2;
    v56 = CMErrorMessage;
    v57 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v28);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
    CLConnectionMessage::sendReply(v21);
  }

}

void sub_101407C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101407C88(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  uint64_t v10;
  CLOSTransaction *v11;
  void *v12;
  id v13;
  std::__shared_weak_count *v14;
  CLConnectionMessage *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CLConnectionMessage *v21;
  NSObject *v22;
  CLConnectionMessage *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD v27[7];
  std::__shared_weak_count *v28;
  __int16 v29[8];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint8_t buf[1640];
  uint64_t v37;
  NSNumber *v38;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  if ((sub_101408390(a1, &v33) & 1) != 0)
  {
    v6 = objc_opt_class(NSUUID, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8);
    v10 = CMSwimSWOLFSessionIdKey;
    if (objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMSwimSWOLFSessionIdKey))
    {
      v11 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDaemonClient.SWOLFQueryForSessionId");
      v12 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
      v13 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", v10);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3321888768;
      v27[2] = sub_1014087C4;
      v27[3] = &unk_1021B54A8;
      v15 = *(CLConnectionMessage **)a2;
      v14 = *(std::__shared_weak_count **)(a2 + 8);
      v27[5] = &v30;
      v27[6] = v15;
      v28 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v27[4] = v11;
      objc_msgSend(v12, "querySessionSWOLF:withReply:", v13, v27);
      v18 = v28;
      if (v28)
      {
        v19 = (unint64_t *)&v28->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B5528);
      v22 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "SWOLF query,empty request", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_1021B5528);
        v29[0] = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 17, "SWOLF query,empty request", v29, v26);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 0, "void CLSwimDataSubscription::handleSWOLFQueryForSessionId(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      v23 = *(CLConnectionMessage **)a2;
      v34 = CMErrorMessage;
      v35 = &off_10221DBC8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
      CLConnectionMessage::sendReply(v23);
    }
  }
  else
  {
    v21 = *(CLConnectionMessage **)a2;
    v37 = CMErrorMessage;
    v38 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v31 + 6));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
    CLConnectionMessage::sendReply(v21);
  }
  _Block_object_dispose(&v30, 8);

}

void sub_101408038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_10140808C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  id v11;
  uint64_t v12;
  NSArray *v13;
  int v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _BYTE buf[12];
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  if (!*a3)
  {
    v5 = objc_msgSend(objc_alloc((Class)CMSwimData), "initWithSwimEntry:", a4);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B5528);
    v6 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v5;
      v21 = 2112;
      v22 = v7;
      v23 = 2048;
      v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B5528);
      v8 = *(_QWORD *)(a1 + 24);
      v14 = 138412802;
      v15 = v5;
      v16 = 2112;
      v17 = v8;
      v18 = 2048;
      v19 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "%@, %@, %p", &v14, 32);
      v10 = (char *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimDataSubscription::onSwimNotification(int, const CLSwimNotifier_Type::Notification &, const CLSwimNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v11 = v5;
    v12 = CMSwimKeyDataArray;
    v13 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);

    sub_1014082E8(a1, buf);
  }
}

void sub_1014082E8(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021B5898, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10140837C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101408390(uint64_t a1, int *a2)
{
  char v4;
  char v5;
  int v6;
  uint64_t result;
  void *__p;
  char v9;

  sub_1015A2E04(&__p, "com.apple.locationd.natalimetry");
  v4 = sub_1002255E0(a1);
  v5 = v4;
  if ((v9 & 0x80000000) == 0)
  {
    if ((v4 & 1) != 0)
      goto LABEL_3;
LABEL_8:
    v6 = 110;
    goto LABEL_10;
  }
  operator delete(__p);
  if ((v5 & 1) == 0)
    goto LABEL_8;
LABEL_3:
  if (sub_1001BBC08(a1))
  {
    if (sub_1014964D8(*(_QWORD *)(a1 + 8)) && (sub_1001B7910() & 0x40000000) != 0)
      return 1;
    v6 = 109;
  }
  else
  {
    v6 = 111;
  }
LABEL_10:
  result = 0;
  *a2 = v6;
  return result;
}

void sub_10140843C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101408458(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_1021B5898, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1014084E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014084F8(uint64_t a1, void *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  id v26;
  char v27[48];
  char out[40];
  uint64_t v29;
  void *v30;

  if (a2)
    v4 = a2;
  else
    v4 = &__NSArray0__struct;
  v29 = CMSwimKeyDataArray;
  v30 = v4;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  memset(out, 0, 37);
  memset(v27, 0, 37);
  uuid_unparse((const unsigned __int8 *)(a1 + 48), out);
  uuid_unparse((const unsigned __int8 *)(a1 + 64), v27);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021B5528);
  v5 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218754;
    v20 = v6;
    v21 = 2080;
    v22 = out;
    v23 = 2080;
    v24 = v27;
    v25 = 2048;
    v26 = objc_msgSend(a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Query: id, %llu, session, %s, db, %s, Response (numel): %lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B5528);
    v7 = qword_10229FCA8;
    v8 = *(_QWORD *)(a1 + 40);
    v11 = 134218754;
    v12 = v8;
    v13 = 2080;
    v14 = out;
    v15 = 2080;
    v16 = v27;
    v17 = 2048;
    v18 = objc_msgSend(a2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "Query: id, %llu, session, %s, db, %s, Response (numel): %lu", &v11, 42);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 192));

}

uint64_t sub_101408798(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(result + 200) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1014087BC(uint64_t a1)
{
  return sub_100261F44(a1 + 192);
}

void sub_1014087C4(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSNumber *v22;
  uint8_t buf[4];
  id v24;

  if ((_DWORD)a3 == 100)
  {
    v19 = CMSwimSWOLFDataKey;
    v20 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B5528);
    v5 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(a2, "description");
      *(_DWORD *)buf = 138412290;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Session SWOLF Query Result: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B5528);
      v11 = qword_10229FCA8;
      v17 = 138412290;
      v18 = objc_msgSend(a2, "description");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "Session SWOLF Query Result: %@", &v17, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleSWOLFQueryForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 48));

  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021B5528);
    v8 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 67240192;
      LODWORD(v24) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error querying session swolf, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_1021B5528);
      v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v17 = 67240192;
      LODWORD(v18) = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 16, "Error querying session swolf, %{public}d", &v17, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLSwimDataSubscription::handleSWOLFQueryForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v10 = *(_QWORD *)(a1 + 48);
    v21 = CMErrorMessage;
    v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    CLConnectionMessage::sendReply(v10);
  }
}

void sub_101408B88(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101408BB4(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_101408BE0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101408C10()
{
  operator delete();
}

_QWORD *sub_101408C24()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B5578;
  return result;
}

void sub_101408C48(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B5578;
}

double sub_101408C60(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;

  v2 = *a2;
  result = **a2;
  v4 = 0.0;
  while (v2 != a2[1])
  {
    v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_101408C8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101408CC8()
{
}

void sub_101408CD8()
{
  operator delete();
}

_QWORD *sub_101408CEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B55F8;
  return result;
}

void sub_101408D10(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B55F8;
}

double sub_101408D28(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;
  double *v5;

  v2 = a2[1];
  result = **a2;
  v4 = 0.0;
  if (*a2 != v2)
  {
    v5 = *a2;
    do
    {
      v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_101408D78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101408DB4()
{
}

void sub_101408DC4()
{
  operator delete();
}

_QWORD *sub_101408DD8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B5678;
  return result;
}

void sub_101408DFC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B5678;
}

BOOL sub_101408E14(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_101408E24(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101408E60()
{
}

void sub_101408E70()
{
  operator delete();
}

_QWORD *sub_101408E84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021B56F8;
  return result;
}

void sub_101408EA8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021B56F8;
}

BOOL sub_101408EC0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_101408ED8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101408F14()
{
}

__n128 sub_101408F20(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B5778;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101408F5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B5778;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101408F80(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_101408FD0(a1 + 8, a2, a3);
}

uint64_t sub_101408F88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101408FC4()
{
}

void sub_101408FD0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_101409054(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10140903C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101409054(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B57E8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B57E8);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_10140923C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_101409258(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_101409284(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B5828;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1014092C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B5828;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1014092E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101409334(a1 + 8, a2, a3);
}

uint64_t sub_1014092EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101409328()
{
}

void sub_101409334(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_101409408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101409424(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_10140949C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101409488(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10140949C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10140971C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101409704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10140971C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_101409790(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101409778(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101409790(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1014097E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101409804()
{
  xmmword_10230ED90 = xmmword_101CA1DF0;
  unk_10230EDA0 = xmmword_101CA1E00;
  xmmword_10230EDB0 = xmmword_101CA1E10;
  unk_10230EDC0 = xmmword_101CA1E20;
  xmmword_10230EDD0 = xmmword_101CA1E30;
  unk_10230EDE0 = xmmword_101CA1E40;
  xmmword_10230EDF0 = xmmword_101CA1E50;
  unk_10230EE00 = xmmword_101CA1E60;
  xmmword_10230EE10 = xmmword_101CA1E70;
  unk_10230EE20 = xmmword_101CA1E80;
  xmmword_10230EE30 = xmmword_101CA1E90;
  unk_10230EE40 = xmmword_101CA1EA0;
  qword_10230EE50 = (uint64_t)off_1021B5578;
  qword_10230EE68 = (uint64_t)&qword_10230EE50;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_10230EE50, (void *)&_mh_execute_header);
  qword_10230EE70 = (uint64_t)off_1021B55F8;
  qword_10230EE88 = (uint64_t)&qword_10230EE70;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_10230EE70, (void *)&_mh_execute_header);
  qword_10230EE90 = (uint64_t)off_1021B5678;
  qword_10230EEA8 = (uint64_t)&qword_10230EE90;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_10230EE90, (void *)&_mh_execute_header);
  qword_10230EEB0 = (uint64_t)off_1021B56F8;
  qword_10230EEC8 = (uint64_t)&qword_10230EEB0;
  return __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_10230EEB0, (void *)&_mh_execute_header);
}

void sub_1014099EC(id a1)
{
  qword_10230EED0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLClientAuthorizationCacheSilo"));
}

void sub_10140A6E8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void sub_10140AAE8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10140AFA8(uint64_t a1, void *a2)
{
  NSDate *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD v24[7];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t buf;
  __int16 v45;
  const char *v46;
  __int16 v47;
  _BYTE v48[34];

  v4 = sub_10140CA50((_QWORD *)a1);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 6);
    v7 = *(_QWORD *)(a1 + 64);
    buf = 68290050;
    v45 = 2082;
    v46 = "";
    v47 = 1026;
    *(_DWORD *)v48 = v6;
    *(_WORD *)&v48[4] = 2114;
    *(_QWORD *)&v48[6] = v4;
    *(_WORD *)&v48[14] = 2114;
    *(_QWORD *)&v48[16] = v7;
    *(_WORD *)&v48[24] = 2114;
    *(_QWORD *)&v48[26] = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("activeType"));
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#INFO #slv authorization status\", \"isAuthorized\":%{public}hhd, \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x36u);
  }
  if ((objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 6) & 1) != 0)
  {
    if ((objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 12) & 1) != 0)
    {
      sub_10140BE9C(a1, (uint64_t)a2, v4);
    }
    else
    {
      objc_msgSend(a2, "coordinate");
      v12 = v11;
      objc_msgSend(a2, "coordinate");
      v14 = v13;
      objc_msgSend(a2, "horizontalAccuracy");
      v16 = v15;
      v17 = *(void **)(a1 + 280);
      v18 = objc_alloc((Class)CLLocation);
      v25 = 0xFFFF;
      v26 = v12;
      v27 = v14;
      v28 = v16;
      __asm { FMOV            V0.2D, #-1.0 }
      v29 = xmmword_101BAFEE0;
      v30 = _Q0;
      v31 = _Q0;
      v32 = 0xBFF0000000000000;
      v35 = 0;
      v36 = 0;
      v34 = 0xBFF0000000000000;
      v33 = 0;
      v37 = 0;
      v38 = 0xBFF0000000000000;
      v39 = 0x7FFFFFFF;
      v41 = 0;
      v42 = 0;
      v40 = 0;
      v43 = 0;
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10140CA94;
      v24[3] = &unk_1021B5990;
      v24[5] = v4;
      v24[6] = a1;
      v24[4] = a2;
      objc_msgSend(v17, "snapLocation:withReply:", objc_msgSend(v18, "initWithClientLocation:", &v25), v24);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("activeType"));
      buf = 68289794;
      v45 = 2082;
      v46 = "";
      v47 = 2114;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 2114;
      *(_QWORD *)&v48[10] = v9;
      *(_WORD *)&v48[18] = 2114;
      *(_QWORD *)&v48[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #slv Got visit when we should be unsubscribed\", \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
    }
  }
}

uint64_t sub_10140B2DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B58F0;
  sub_100223FD8(a1);

  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 280) = 0;

  *(_QWORD *)(a1 + 264) = 0;
  objc_msgSend(*(id *)(a1 + 256), "invalidate");

  *(_QWORD *)(a1 + 256) = 0;
  return sub_100720438(a1);
}

void sub_10140B34C(uint64_t a1)
{
  sub_10140B2DC(a1);
  operator delete();
}

_QWORD *sub_10140B370@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_1021B5AB0;
  v11[1] = sub_10140B5D8;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageSignificantLocationVisit");
  sub_100BB1B4C((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_1021B5AB0;
  v9[1] = sub_10140BA54;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageSignificantLocationVisitState");
  sub_100BB1B4C((uint64_t)v16, (uint64_t)v9);
  sub_10140D854(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_10140B508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_10140B5D8(_QWORD *a1, CLConnectionMessage **a2)
{
  id v4;
  const __CFDictionary *Dictionary;
  NSObject *v6;
  uint64_t v7;
  CLConnectionMessage *v8;
  char isEntitled;
  char v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint8_t v23[16];
  uint8_t buf[8];
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _BOOL4 v30;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v23, Dictionary);
  v22 = 0;
  if ((sub_1001E4874((uint64_t)v23, "kCLConnectionMessageSubscribeKey", &v22) & 1) != 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1[8];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v7;
      v29 = 1026;
      v30 = v22;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Client subscribe\", \"client\":%{public, location:escape_only}@, \"subscribe\":%{public}hhd}", buf, 0x22u);
    }
    if (!v22)
    {
      sub_10140CBE8(a1, 0);
      goto LABEL_20;
    }
    v21 = 0;
    if (!sub_1001E4B84((uint64_t)v23, "kCLConnectionMessageSignificantLocationVisitTypeKey", &v21))
      goto LABEL_10;
    v8 = *a2;
    sub_1015A2E04(buf, "com.apple.locationd.slv_configurer");
    isEntitled = CLConnectionMessage::isEntitled(v8, buf);
    v10 = isEntitled;
    if (SBYTE3(v28) < 0)
    {
      operator delete(*(void **)buf);
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else if ((isEntitled & 1) != 0)
    {
LABEL_10:
      sub_10140CBE8(a1, v21 | (unint64_t)&_mh_execute_header);
      goto LABEL_20;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v18 = a1[8];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLV configuration\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    }
    v19 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v20 = a1[8];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v20;
      v13 = "Client is not entitled to provide #SLV configuration";
      v14 = "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLV configuration\", \"client\":%{public, location:escape_only}@}";
      v15 = v19;
      v16 = 28;
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      v13 = "Couldn't get value for kCLConnectionMessageSubscribeKey key";
      v14 = "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}";
      v15 = v12;
      v16 = 18;
LABEL_18:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, buf, v16);
    }
  }
LABEL_20:
  sub_10011A5A8(v23);

}

void sub_10140B9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
    operator delete(__p);
  sub_10011A5A8(&a11);

  _Unwind_Resume(a1);
}

void sub_10140BA54(uint64_t a1)
{
  id v2;
  NSDate *v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  _QWORD v21[6];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  _BYTE v27[34];

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  v3 = sub_10140CA50((_QWORD *)a1);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 6);
    v6 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 68290050;
    v24 = 2082;
    v23 = 0;
    v25 = "";
    v26 = 1026;
    *(_DWORD *)v27 = v5;
    *(_WORD *)&v27[4] = 2114;
    *(_QWORD *)&v27[6] = v3;
    *(_WORD *)&v27[14] = 2114;
    *(_QWORD *)&v27[16] = v6;
    *(_WORD *)&v27[24] = 2114;
    *(_QWORD *)&v27[26] = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("activeType"));
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#INFO #slv authorization status\", \"isAuthorized\":%{public}hhd, \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@}", buf, 0x36u);
  }
  v7 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 6);
  if (v3)
    v8 = v7;
  else
    v8 = 0;
  if ((v8 & 1) != 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v9 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_msgSend(*(id *)(a1 + 128), "silo");
      *(_DWORD *)buf = 68289282;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      *(_QWORD *)v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv We can retrieve the visit\", \"Silo\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*(_QWORD *)(a1 + 264))
    {
      v11 = objc_alloc((Class)RTStoredVisitFetchOptions);
      v12 = objc_msgSend(v11, "initWithAscending:confidence:dateInterval:labelVisit:limit:", 0, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh), 0, 1, &off_10221DBE0);
      v13 = *(void **)(a1 + 264);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10140CC74;
      v21[3] = &unk_1021B59B8;
      v21[4] = v3;
      v21[5] = a1;
      objc_msgSend(v13, "fetchStoredVisitsWithOptions:withReply:", v12, v21);
      goto LABEL_24;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v20 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v17 = "{\"msg%{public}.0s\":\"#Warning #slv CLRoutineMonitor is not supported.\"}";
      v18 = v20;
      v19 = 18;
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 64);
      v16 = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("activeType"));
      *(_DWORD *)buf = 68289794;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      *(_QWORD *)v27 = v3;
      *(_WORD *)&v27[8] = 2114;
      *(_QWORD *)&v27[10] = v15;
      *(_WORD *)&v27[18] = 2114;
      *(_QWORD *)&v27[20] = v16;
      v17 = "{\"msg%{public}.0s\":\"#Warning #slv Got visit state request when we should be unsubscribed\", \"commencemen"
            "tDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public"
            ", location:escape_only}@}";
      v18 = v14;
      v19 = 48;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    }
  }
LABEL_24:

}

void sub_10140BE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10140BE54(uint64_t a1, void *a2)
{
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a2, "encodeWithCoder:", v3);
  return objc_msgSend(v3, "encodedData");
}

void sub_10140BE9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  _BOOL8 v8;
  uint64_t v9;
  NSDictionary *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD v30[7];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const __CFString *v50;
  id v51;
  uint64_t buf;
  __int16 v53;
  const char *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  unsigned int v62;

  v5 = +[CLVisit _visitWithVisit:authDate:](CLVisit, "_visitWithVisit:authDate:", a2, a3);
  if (v5)
  {
    v6 = v5;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v7 = qword_1022A01C8;
    v8 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 64);
      buf = 68289539;
      v53 = 2082;
      v54 = "";
      v55 = 2113;
      v56 = v6;
      v57 = 2114;
      v58 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Sending visit to client\", \"visit\":%{private, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    v50 = CFSTR("kCLConnectionMessageSignificantLocationVisitKey");
    v51 = sub_10140BE54(v8, v6);
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
    v11 = objc_msgSend(*(id *)(a1 + 64), "legacyClientKey");
    objc_msgSend(v6, "coordinate");
    v13 = v12;
    objc_msgSend(v6, "coordinate");
    v15 = v14;
    objc_msgSend(v6, "horizontalAccuracy");
    v17 = v16;
    v18 = objc_alloc((Class)CLLocation);
    v31 = 0xFFFF;
    v32 = v13;
    v33 = v15;
    v34 = v17;
    __asm { FMOV            V0.2D, #-1.0 }
    v35 = xmmword_101BAFEE0;
    v36 = _Q0;
    v37 = _Q0;
    v38 = 0xBFF0000000000000;
    v41 = 0;
    v42 = 0;
    v40 = 0xBFF0000000000000;
    v39 = 0;
    v43 = 0;
    v44 = 0xBFF0000000000000;
    v45 = 0x7FFFFFFF;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    v49 = 0;
    v24 = objc_msgSend(v18, "initWithClientLocation:", &v31);
    v25 = *(void **)(a1 + 288);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10140C1C4;
    v30[3] = &unk_1021B5940;
    v30[5] = v11;
    v30[6] = a1;
    v30[4] = v10;
    objc_msgSend(v25, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 6, v11, v24, v30);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v26 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(_QWORD *)(a1 + 64);
      v28 = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("activeType"));
      v29 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 6);
      buf = 68290050;
      v53 = 2082;
      v54 = "";
      v55 = 2114;
      v56 = a3;
      v57 = 2114;
      v58 = v27;
      v59 = 2114;
      v60 = v28;
      v61 = 1026;
      v62 = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Dropping visit because there's nothing left after slicing out unauthorized bits\", \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@, \"authorized\":%{public}hhd}", (uint8_t *)&buf, 0x36u);
    }
  }
}

_QWORD *sub_10140C1C4(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = result;
    v3 = result[6];
    sub_10140C218(v3, result + 4, 10.0);
    return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v3 + 128), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager")), "launchApplication:requiringAuthForServiceMask:", v2[5], 64);
  }
  return result;
}

void sub_10140C218(uint64_t a1, _QWORD *a2, double a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 *v8;
  _QWORD *i;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSString *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void **v32;

  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationVisit");
  sub_10140DCFC((uint64_t)__p, a2, &v28);
  v25 = 64;
  v26 = v28;
  v27 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v32 = __p;
  v8 = sub_100212538(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v32);
  *((_QWORD *)v8 + 5) = v25;
  sub_100349198((_QWORD *)v8 + 6, &v26);
  for (i = *(_QWORD **)(a1 + 176); i; i = (_QWORD *)*i)
  {
    v10 = i[2];
    v23 = v28;
    v24 = v29;
    if (v29)
    {
      v11 = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 16))(v10, &v23, 64);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (a3 >= 0.0)
  {
    sub_10140DC34(a1, a3);
  }
  else
  {
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kCLConnectionMessageSignificantLocationVisit");
    objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v16), "invalidate");
    objc_msgSend(*(id *)(a1 + 240), "setObject:forKeyedSubscript:", 0, v16);
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
}

void sub_10140C430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10140C474(uint64_t a1, char *a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  NSDictionary *v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v29;
  void *v30;
  _QWORD v32[6];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  const __CFString *v52;
  id v53;
  uint64_t buf;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  uint64_t v60;

  if (a2)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 64);
      buf = 68289539;
      v55 = 2082;
      v56 = "";
      v57 = 2113;
      v58 = a2;
      v59 = 2114;
      v60 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Preparing visit info for client\", \"visit\":%{private, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    v6 = objc_alloc((Class)CLVisit);
    objc_msgSend(a2, "coordinate");
    v8 = v7;
    v10 = v9;
    objc_msgSend(a2, "horizontalAccuracy");
    v12 = objc_msgSend(v6, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:", +[NSDate distantPast](NSDate, "distantPast"), +[NSDate distantFuture](NSDate, "distantFuture"), +[NSDate distantPast](NSDate, "distantPast"), objc_msgSend(a2, "_placeInference"), v8, v10, v11);
    v52 = CFSTR("kCLConnectionMessageSignificantLocationVisitStateKey");
    v53 = sub_10140BE54((uint64_t)v12, v12);
    v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 64);
      buf = 68289539;
      v55 = 2082;
      v56 = "";
      v57 = 2081;
      v58 = "";
      v59 = 2114;
      v60 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Preparing visit info for client\", \"visit\":%{private, location:escape_only}s, \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    v13 = (NSDictionary *)&__NSDictionary0__struct;
  }
  v16 = objc_msgSend(*(id *)(a1 + 64), "legacyClientKey");
  objc_msgSend(a2, "coordinate");
  v18 = v17;
  objc_msgSend(a2, "coordinate");
  v20 = v19;
  objc_msgSend(a2, "horizontalAccuracy");
  v22 = v21;
  v23 = objc_alloc((Class)CLLocation);
  v33 = 0xFFFF;
  v34 = v18;
  v35 = v20;
  v36 = v22;
  __asm { FMOV            V0.2D, #-1.0 }
  v37 = xmmword_101BAFEE0;
  v38 = _Q0;
  v39 = _Q0;
  v40 = 0xBFF0000000000000;
  v43 = 0;
  v44 = 0;
  v42 = 0xBFF0000000000000;
  v41 = 0;
  v45 = 0;
  v46 = 0xBFF0000000000000;
  v47 = 0x7FFFFFFF;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v51 = 0;
  v29 = objc_msgSend(v23, "initWithClientLocation:", &v33);
  v30 = *(void **)(a1 + 288);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_10140C7D8;
  v32[3] = &unk_1021B5968;
  v32[4] = v13;
  v32[5] = a1;
  return objc_msgSend(v30, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 6, v16, v29, v32);
}

void sub_10140C7D8(uint64_t a1, int a2)
{
  if (a2)
    sub_10140C7F4(*(_QWORD *)(a1 + 40), (_QWORD *)(a1 + 32), 10.0);
}

void sub_10140C7F4(uint64_t a1, _QWORD *a2, double a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 *v8;
  _QWORD *i;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSString *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void **v32;

  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationVisitState");
  sub_10140DCFC((uint64_t)__p, a2, &v28);
  v25 = 64;
  v26 = v28;
  v27 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v32 = __p;
  v8 = sub_100212538(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v32);
  *((_QWORD *)v8 + 5) = v25;
  sub_100349198((_QWORD *)v8 + 6, &v26);
  for (i = *(_QWORD **)(a1 + 176); i; i = (_QWORD *)*i)
  {
    v10 = i[2];
    v23 = v28;
    v24 = v29;
    if (v29)
    {
      v11 = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 16))(v10, &v23, 64);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (a3 >= 0.0)
  {
    sub_10140DDD0(a1, a3);
  }
  else
  {
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kCLConnectionMessageSignificantLocationVisitState");
    objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v16), "invalidate");
    objc_msgSend(*(id *)(a1 + 240), "setObject:forKeyedSubscript:", 0, v16);
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
}

void sub_10140CA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDate *sub_10140CA50(_QWORD *a1)
{
  NSDate *result;

  result = (NSDate *)sub_1001FE40C(a1, (uint64_t)CFSTR("startDate"));
  if (result)
  {
    -[NSDate doubleValue](result, "doubleValue");
    return +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  }
  return result;
}

void sub_10140CA94(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_10140CAC8(a1, a2, *(void **)(a1 + 32));
  sub_10140BE9C(v3, (uint64_t)v4, *(void **)(a1 + 40));
}

id sub_10140CAC8(uint64_t a1, void *a2, void *a3)
{
  double v5;
  double v6;
  id v7;
  double v8;
  double v10;
  double v11;
  double v12;

  if (a2)
  {
    objc_msgSend(a2, "clientLocation");
    v5 = v11;
    objc_msgSend(a2, "clientLocation");
    v6 = v10;
    v7 = objc_alloc((Class)CLVisit);
    objc_msgSend(a2, "clientLocation");
    v8 = v12;
  }
  else
  {
    v7 = objc_alloc((Class)CLVisit);
    v8 = 0.0;
    v6 = 0.0;
    v5 = 0.0;
  }
  return objc_msgSend(v7, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:", objc_msgSend(a3, "arrivalDate"), objc_msgSend(a3, "departureDate"), objc_msgSend(a3, "detectionDate"), objc_msgSend(a3, "_placeInference"), v5, v6, v8);
}

id sub_10140CBE8(_QWORD *a1, uint64_t a2)
{
  id result;
  NSNumber *v5;

  result = (id)sub_1001FE40C(a1, (uint64_t)CFSTR("activeType"));
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!result)
      return result;
    v5 = 0;
    goto LABEL_7;
  }
  if (!result || (result = objc_msgSend(result, "intValue"), (_DWORD)result != (_DWORD)a2))
  {
    v5 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2);
LABEL_7:
    sub_100E539FC((uint64_t)a1, (uint64_t)CFSTR("activeType"), (uint64_t)v5);
    sub_100E53AAC((uint64_t)a1);
    return (id)sub_1001FE338((uint64_t)a1);
  }
  return result;
}

void sub_10140CC74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  _QWORD v37[7];
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _WORD v57[8];
  uint8_t buf[4];
  int v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  id v63;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v8 = objc_msgSend(*(id *)(v6 + 128), "silo");
    *(_DWORD *)buf = 68289282;
    v59 = 0;
    v60 = 2082;
    v61 = "";
    v62 = 2114;
    v63 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv inside the fetchStoredVisitsWithOptions block\", \"Silo\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  objc_msgSend(*(id *)(v6 + 128), "silo");
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
  v9 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v10 = objc_msgSend(*(id *)(v6 + 128), "silo");
    *(_DWORD *)buf = 68289282;
    v59 = 0;
    v60 = 2082;
    v61 = "";
    v62 = 2114;
    v63 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv after the DBG_ASSERT_INSIDE\", \"Silo\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (a3)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v59 = 0;
      v60 = 2082;
      v61 = "";
      v62 = 2114;
      v63 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#slv: CoreRoutine error while getting stored visits.\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289282;
      v59 = 0;
      v60 = 2082;
      v61 = "";
      v62 = 2114;
      v63 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slv: CoreRoutine error while getting stored visits.", "{\"msg%{public}.0s\":\"#slv: CoreRoutine error while getting stored visits.\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    v13 = objc_msgSend(a2, "firstObject");
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      v59 = 0;
      v60 = 2082;
      v61 = "";
      v62 = 2113;
      v63 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv: last RTVisit returned.\", \"RTVisit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    if (v13)
    {
      if (objc_msgSend(v13, "type") == (id)1)
        v13 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", v13);
      else
        v13 = 0;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      v59 = 0;
      v60 = 2082;
      v61 = "";
      v62 = 2113;
      v63 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv: last visit returned.\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    if ((objc_msgSend(*(id *)(v6 + 136), "isAuthorizedForServiceType:", 12) & 1) != 0 || !v13)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
      v32 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#slv: using full precision or lastVisit is nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
        v57[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "#slv: using full precision or lastVisit is nil", v57, 2);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLVisitMonitoringSubscription::handleMessageSignificantLocationVisitState(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      sub_10140C474(v6, (char *)v13);
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
      v16 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#slv: using corrective compensation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021B5A80);
        v57[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "#slv: using corrective compensation", v57, 2);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLVisitMonitoringSubscription::handleMessageSignificantLocationVisitState(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      objc_msgSend(v13, "coordinate");
      v18 = v17;
      objc_msgSend(v13, "coordinate");
      v20 = v19;
      objc_msgSend(v13, "horizontalAccuracy");
      v22 = v21;
      v23 = *(void **)(v6 + 280);
      v24 = objc_alloc((Class)CLLocation);
      v38 = 0xFFFF;
      v39 = v18;
      v40 = v20;
      v41 = v22;
      __asm { FMOV            V0.2D, #-1.0 }
      v42 = xmmword_101BAFEE0;
      v43 = _Q0;
      v44 = _Q0;
      v45 = 0xBFF0000000000000;
      v48 = 0;
      v49 = 0;
      v47 = 0xBFF0000000000000;
      v46 = 0;
      v50 = 0;
      v51 = 0xBFF0000000000000;
      v52 = 0x7FFFFFFF;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      v56 = 0;
      v30 = objc_msgSend(v24, "initWithClientLocation:", &v38);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_10140D3DC;
      v37[3] = &unk_1021B5990;
      v31 = *(_QWORD *)(a1 + 32);
      v37[4] = v13;
      v37[5] = v31;
      v37[6] = v6;
      objc_msgSend(v23, "snapLocation:withReply:", v30, v37);
    }
  }
}

id sub_10140D3DC(uint64_t a1, void *a2)
{
  uint64_t v2;
  char *v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (char *)sub_10140CAC8(a1, a2, *(void **)(a1 + 32));
  return sub_10140C474(v2, v3);
}

void sub_10140D408(uint64_t a1)
{
  sub_100223FD8(a1);

  *(_QWORD *)(a1 + 264) = 0;
}

uint64_t sub_10140D434(uint64_t result, int a2)
{
  uint64_t v3;
  void *v4;

  v3 = result;
  if (!*(_BYTE *)(result + 276))
  {
LABEL_4:
    if (a2 == 1)
    {
      objc_msgSend(*(id *)(v3 + 264), "startLeechingVisitsForClient:", *(_QWORD *)(v3 + 256));
    }
    else if (!a2)
    {
      objc_msgSend(*(id *)(v3 + 264), "startMonitoringVisitsForClient:", *(_QWORD *)(v3 + 256));
    }
    *(_DWORD *)(v3 + 272) = a2;
    *(_BYTE *)(v3 + 276) = 1;
    objc_msgSend(objc_msgSend(*(id *)(v3 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    v4 = *(void **)(v3 + 64);
    if (v4)
      objc_msgSend(v4, "clientName");
    sub_100248320();
  }
  if (*(_DWORD *)(result + 272) != a2)
  {
    sub_100223FD8(result);
    goto LABEL_4;
  }
  return result;
}

void sub_10140D578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_10140D58C(uint64_t a1)
{
  id v2;
  _QWORD *v3;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), CFSTR("ClientKeyPath"));
  v3 = (_QWORD *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v3 = (_QWORD *)*v3;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), CFSTR("SubscriptionStorageName"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 136)), CFSTR("AuthContext"));
  if (*(_BYTE *)(a1 + 276))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 272)), CFSTR("RunningType"));
  return v2;
}

void sub_10140D65C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10140D688(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_10140D6B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021B5AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10140D6F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021B5AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10140D714(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10140D764(a1 + 8, a2, a3);
}

uint64_t sub_10140D71C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10140D758()
{
}

void sub_10140D764(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_10140D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10140D854(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_10140D8CC(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10140D8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10140D8CC(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10140DB4C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_10140DB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10140DB4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10140DBC0(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10140DBA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10140DBC0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10140DC18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

id sub_10140DC34(uint64_t a1, double a2)
{
  NSString *v4;
  id v5;
  _QWORD v7[5];

  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kCLConnectionMessageSignificantLocationVisit");
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10140DD5C;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(v5, "setHandler:", v7);
  objc_msgSend(v5, "setNextFireDelay:", a2);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4), "invalidate");
  return objc_msgSend(*(id *)(a1 + 240), "setObject:forKeyedSubscript:", v5, v4);
}

_QWORD *sub_10140DCFC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1005E0CAC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10140DD48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10140DD5C(uint64_t a1)
{
  sub_10140DD64(*(_QWORD *)(a1 + 32));
}

void sub_10140DD64(uint64_t a1)
{
  _QWORD *v1;
  void *__p[2];
  char v3;

  v1 = (_QWORD *)(a1 + 200);
  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationVisit");
  sub_1010030DC(v1, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_10140DDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10140DDD0(uint64_t a1, double a2)
{
  NSString *v4;
  id v5;
  _QWORD v7[5];

  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kCLConnectionMessageSignificantLocationVisitState");
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10140DE98;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(v5, "setHandler:", v7);
  objc_msgSend(v5, "setNextFireDelay:", a2);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4), "invalidate");
  return objc_msgSend(*(id *)(a1 + 240), "setObject:forKeyedSubscript:", v5, v4);
}

void sub_10140DE98(uint64_t a1)
{
  sub_10140DEA0(*(_QWORD *)(a1 + 32));
}

void sub_10140DEA0(uint64_t a1)
{
  _QWORD *v1;
  void *__p[2];
  char v3;

  v1 = (_QWORD *)(a1 + 200);
  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationVisitState");
  sub_1010030DC(v1, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_10140DEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10140E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10140E6C4(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionManagerNotification:data:", *a2, *a3);
}

void sub_10140ED64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10140EFF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD v29[7];
  uint64_t v30;
  int v31;
  id v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  id v36;
  uint8_t buf[4];
  id v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  id v42;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021B5B78);
  v8 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v38) = objc_msgSend(a3, "statusCode");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "HTTP Response for Server registration, statusCode: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021B5B78);
    v21 = qword_10229FD98;
    v31 = 67240192;
    LODWORD(v32) = objc_msgSend(a3, "statusCode");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 1, "HTTP Response for Server registration, statusCode: %{public}d", &v31, 8);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if (a4 || (uint64_t)objc_msgSend(a3, "statusCode") < 200 || (uint64_t)objc_msgSend(a3, "statusCode") >= 300)
  {
    v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", a2, 4);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021B5B78);
    v16 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v17 = objc_msgSend(a3, "statusCode");
      *(_DWORD *)buf = 134349570;
      v38 = v17;
      v39 = 2112;
      v40 = a4;
      v41 = 2112;
      v42 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to register subject, statusCode: %{public}ld, error: %@, response: %@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B5B78);
      v24 = qword_10229FD98;
      v25 = objc_msgSend(a3, "statusCode");
      v31 = 134349570;
      v32 = v25;
      v33 = 2112;
      v34 = a4;
      v35 = 2112;
      v36 = v15;
      LODWORD(v28) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 16, "Unable to register subject, statusCode: %{public}ld, error: %@, response: %@", &v31, v28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }

  }
  else
  {
    v30 = 0;
    v9 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a2, 1, &v30);
    v10 = v9;
    if (!v9 || v30)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B5B78);
      v18 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v38 = v10;
        v39 = 2112;
        v40 = v30;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Unable to parse response for register subject, responseDictionary: %@, error: %@", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_1021B5B78);
        v31 = 138412546;
        v32 = v10;
        v33 = 2112;
        v34 = v30;
        LODWORD(v28) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Unable to parse response for register subject, responseDictionary: %@, error: %@", &v31, v28);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
    else
    {
      v11 = objc_msgSend(v9, "objectForKey:", CFSTR("subjectId"));
      v12 = objc_msgSend(v10, "objectForKey:", CFSTR("token"));
      if (v11)
      {
        v13 = v12;
        if (v12)
        {
          v14 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472;
          v29[2] = sub_10140F6A8;
          v29[3] = &unk_10212BBA8;
          v29[4] = *(_QWORD *)(a1 + 32);
          v29[5] = v11;
          v29[6] = v13;
          objc_msgSend(v14, "async:", v29);
        }
      }
    }
  }
}

id sub_10140F6A8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *(_QWORD *)(a1 + 40));
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = objc_msgSend(*(id *)(a1 + 48), "copy");

  objc_msgSend(*(id *)(a1 + 32), "_saveSubjectUUID:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend(*(id *)(a1 + 32), "_saveSubjectAuth:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021B5B78);
  v3 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    *(_DWORD *)buf = 138478083;
    v18 = v6;
    v19 = 2113;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Successfully registered device, subject UUID: %{private}@, subject Auth: %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021B5B78);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(v8 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    v13 = 138478083;
    v14 = v10;
    v15 = 2113;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Successfully registered device, subject UUID: %{private}@, subject Auth: %{private}@", &v13, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_enableDataCollection");
}

void sub_10140FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101411A78(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_registerDevice");
}

void sub_10141236C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10141264C(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_101412678(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_101412758(a1, "VO2MaxSessionAttributesHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021B5BA8;
  *(_QWORD *)(a1 + 72) = off_1021B5C60;
  sub_100E81598((_QWORD *)(a1 + 384), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 400), 0, 0);
  *(_BYTE *)(a1 + 416) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_10141272C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101412758(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021B5F50;
  *(_QWORD *)(a1 + 72) = off_1021B5FF8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021B5F50;
  *(_QWORD *)(a1 + 72) = off_1021B5FF8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 12000;
  *(_QWORD *)(a1 + 312) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 320));
  *(_QWORD *)(a1 + 320) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_101412B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[39] = off_102138DA8;
  sub_100427950(v27);
  sub_100FFA444(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_101412BA8()
{
  JUMPOUT(0x101412B88);
}

_QWORD *sub_101412BB0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021B5FF8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021B5F50;
  a1[39] = off_102138DA8;
  sub_100427950(a1 + 40);
  sub_100FFA444(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_101412C30(uint64_t a1)
{
  return sub_101412BB0((_QWORD *)(a1 - 72));
}

void sub_101412C38(_QWORD *a1)
{
  sub_101412BB0(a1);
  operator delete();
}

void sub_101412C5C(uint64_t a1)
{
  sub_101412BB0((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_101412C84(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    if (!*(_BYTE *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxSessionAttributesHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_101412DB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101412DD4(uint64_t a1, uint64_t a2)
{
  return sub_101412C84(a1 - 72, a2);
}

uint64_t sub_101412DDC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxSessionAttributesHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_101412FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101413024(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  const unsigned __int8 *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  const void *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  const void *v19;
  sqlite3_stmt *v20;
  id v21;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v9 = sqlite3_column_text(v8, 2);
  uuid_parse((const char *)v9, (unsigned __int8 *)(a2 + 16));
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v10, 3);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 4);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v12, 5);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 52) = sqlite3_column_int(v13, 6) != 0;
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v14, 7);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v16 = sqlite3_column_blob(v15, 8);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 64) = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v16, sqlite3_column_bytes(v17, 8));
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v19 = sqlite3_column_blob(v18, 9);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v19, sqlite3_column_bytes(v20, 9));
  result = 0;
  *(_QWORD *)(a2 + 72) = v21;
  return result;
}

uint64_t sub_1014131C4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxSessionAttributesHistory");
  return 0xFFFFFFFFLL;
}

void sub_101413264(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101413288(uint64_t a1)
{
  return sub_1014131C4(a1 - 72);
}

uint64_t sub_101413290(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t result;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  uint64_t v19;
  char out[40];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 400), &v19);
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 16), out);
    v7 = (sqlite3_stmt *)sub_100026CC8(v19);
    if (sub_1000890C4(v7, 1, *(double *)(a2 + 8)))
    {
      v8 = (sqlite3_stmt *)sub_100026CC8(v19);
      if (sub_1000C9E20(v8, 2, out))
      {
        v9 = (sqlite3_stmt *)sub_100026CC8(v19);
        if (sub_1000890C4(v9, 3, *(double *)(a2 + 32)))
        {
          v10 = (sqlite3_stmt *)sub_100026CC8(v19);
          if (sub_1000890C4(v10, 4, *(double *)(a2 + 40)))
          {
            v11 = (sqlite3_stmt *)sub_100026CC8(v19);
            if (sub_10023C77C(v11, 5, *(_DWORD *)(a2 + 48)))
            {
              v12 = (sqlite3_stmt *)sub_100026CC8(v19);
              if (sub_1000CD75C(v12, 6, *(unsigned __int8 *)(a2 + 52)))
              {
                v13 = (sqlite3_stmt *)sub_100026CC8(v19);
                if (sub_1000CD75C(v13, 7, *(_DWORD *)(a2 + 56)))
                {
                  v14 = (sqlite3_stmt *)sub_100026CC8(v19);
                  if (sub_10063FC3C(v14, 8, *(void **)(a2 + 64)))
                  {
                    v15 = (sqlite3_stmt *)sub_100026CC8(v19);
                    if (sub_10063FC3C(v15, 9, *(void **)(a2 + 72)))
                    {
                      v16 = (sqlite3_stmt *)sub_100026CC8(v19);
                      if (sub_1000CC50C(v16, 10, a3))
                      {
                        v17 = *(_QWORD *)(a1 + 80);
                        v18 = (sqlite3_stmt *)sub_100026CC8(v19);
                        sub_10023C9B0(v17, v18);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    result = v19;
    v19 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_101413440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10141346C(uint64_t a1, const unsigned __int8 *a2, char **a3)
{
  sqlite3_stmt *v6;
  char *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  NSObject *v28;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  char out[48];
  uint8_t buf[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_100087AF4((_QWORD *)(a1 + 384), &v33);
    v39 = 0uLL;
    v6 = (sqlite3_stmt *)sub_100026CC8(v33);
    if (sub_1000C9E20(v6, 1, out))
    {
      while (!sub_101413024(&v33, (uint64_t)buf))
      {
        v7 = a3[1];
        v8 = (unint64_t)a3[2];
        if ((unint64_t)v7 >= v8)
        {
          v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a3) >> 4);
          v14 = v13 + 1;
          if (v13 + 1 > 0x333333333333333)
            sub_100259694();
          v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)*a3) >> 4);
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x199999999999999)
            v16 = 0x333333333333333;
          else
            v16 = v14;
          if (v16)
            v17 = (char *)sub_1002952D4((uint64_t)(a3 + 2), v16);
          else
            v17 = 0;
          v18 = &v17[80 * v13];
          *(_OWORD *)v18 = *(_OWORD *)buf;
          v19 = v36;
          v20 = v37;
          v21 = v39;
          *((_OWORD *)v18 + 3) = v38;
          *((_OWORD *)v18 + 4) = v21;
          *((_OWORD *)v18 + 1) = v19;
          *((_OWORD *)v18 + 2) = v20;
          v23 = *a3;
          v22 = a3[1];
          v24 = v18;
          if (v22 != *a3)
          {
            do
            {
              *((_OWORD *)v24 - 5) = *((_OWORD *)v22 - 5);
              v25 = *((_OWORD *)v22 - 4);
              v26 = *((_OWORD *)v22 - 3);
              v27 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v27;
              *((_OWORD *)v24 - 4) = v25;
              *((_OWORD *)v24 - 3) = v26;
              v24 -= 80;
              v22 -= 80;
            }
            while (v22 != v23);
            v22 = *a3;
          }
          v12 = v18 + 80;
          *a3 = v24;
          a3[1] = v18 + 80;
          a3[2] = &v17[80 * v16];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_OWORD *)v7 = *(_OWORD *)buf;
          v9 = v36;
          v10 = v37;
          v11 = v39;
          *((_OWORD *)v7 + 3) = v38;
          *((_OWORD *)v7 + 4) = v11;
          *((_OWORD *)v7 + 1) = v9;
          *((_OWORD *)v7 + 2) = v10;
          v12 = v7 + 80;
        }
        a3[1] = v12;
      }
    }
    v30 = v33;
    v33 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    return 100;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B5CF0);
    v28 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021B5CF0);
      *(_WORD *)out = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxSessionAttributesHistory, DB not accessible", out, 2);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSessionAttributesRecorderDb::queryBySessionId(const unsigned char *, std::vector<VO2MaxSessionAttributes> &) const", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    return 109;
  }
}

void sub_1014137B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014137E0(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT MIN(startTime) FROM VO2MaxSessionAttributesHistory WHERE algorithmVersion >= ?");
  return 0;
}

void sub_1014138AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014138CC(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT sah.* from VO2MaxSessionAttributesHistory sah WHERE sah.startTime > ? AND EXISTS (SELECT sh.id FROM VO2MaxSummaryHistory sh WHERE sh.sessionId = sah.sessionId)");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B5CF0);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B5CF0);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxSessionAttributesHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSessionAttributesRecorderDb::getSessionsWithClusters(std::vector<VO2MaxSessionAttributes> &, const CFAbsoluteTime) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_101413C20(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_101413C4C(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxSessionAttributesHistory WHERE startTime >= ? and startTime <= ? ORDER BY startTime ASC");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B5CF0);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B5CF0);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxSessionAttributesHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxSessionAttributesRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<VO2MaxSessionAttributes> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_101413FBC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_101413FE8(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  char out[48];
  uint8_t buf[1632];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxSummaryHistory WHERE sessionId = ?");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021B5D10);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unable to save fetched output data from CloudKit. Device is locked and we are unable to open the database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021B5D10);
    *(_WORD *)out = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "Unable to save fetched output data from CloudKit. Device is locked and we are unable to open the database", out, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, const std::vector<VO2MaxSummary> &, const VO2MaxOutput &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 0;
}

void sub_101415128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (!v15)
    {
LABEL_3:
      if (!v14)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v14)
  {
LABEL_5:
    if (a12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
      if (!v13)
      {
LABEL_7:
        if (!v12)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    else if (!v13)
    {
      goto LABEL_7;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v12)
LABEL_9:
      _Unwind_Resume(exception_object);
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    goto LABEL_9;
  }
LABEL_4:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  goto LABEL_5;
}

_QWORD *sub_101415228@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxSessionAttributesHistory");
}

_QWORD *sub_101415238@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxSessionAttributesHistory");
}

uint64_t sub_101415248(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1014152CC(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxSessionAttributesHistory", (const char **)&off_1021B5D30, (const std::string::value_type **)&off_1022FFD58, 0);
    *(_QWORD *)(a1 + 384) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxSessionAttributesHistory WHERE sessionId = ?");
    *(_QWORD *)(a1 + 392) = v3;
    result = sub_10063D314(*(_QWORD *)(a1 + 80), "UPDATE VO2MaxSessionAttributesHistory SET startTime = ?, sessionId = ?, meanMaxMets = ?, prior = ?, hardwareType = ?, betaBlockerUse = ?, algorithmVersion = ?, outputCloudKitSystemFields = ?, inputCloudKitSystemFields = ? WHERE id = ?");
    *(_QWORD *)(a1 + 400) = result;
    *(_QWORD *)(a1 + 408) = v4;
    *(_BYTE *)(a1 + 416) = 1;
  }
  return result;
}

BOOL sub_1014152CC(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxSessionAttributesHistory");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxSessionAttributesHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_1014156C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  if (a21 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_1018B38B4((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_101415760(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxSessionAttributesHistory");
  return result;
}

void sub_1014157F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101415814(uint64_t a1)
{
  return sub_101415760(a1 - 72);
}

uint64_t sub_10141581C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM VO2MaxSessionAttributesHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1014158E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101415904(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE VO2MaxSessionAttributesHistory SET startTime = startTime + ?");
  return result;
}

void sub_10141599C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014159BC(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxSessionAttributesHistory (startTime, sessionId, meanMaxMets, prior, hardwareType, betaBlockerUse, algorithmVersion, outputCloudKitSystemFields, inputCloudKitSystemFields) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_101415B58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_101415B80()
{
  return 0;
}

uint64_t sub_101415B88(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxSessionAttributesHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_101415C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101415C28(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B6038);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B6038);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_101416DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void sub_1014170E0(uint64_t a1)
{
  sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxSessionAttributesHistorySessionIdIndex'");
}

void sub_101417554(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014175A8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE VO2MaxSessionAttributesHistory AS sa SET outputCloudKitSystemFields = NULL WHERE sa.sessionId IN (SELECT DISTINCT sh.sessionId FROM VO2MaxStagingSummaryHistory AS sh)");
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021B5D10);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021B5D10);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxSessionAttributesHistory, DB not accessible", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVO2MaxSessionAttributesRecorderDb::updateSessionsNeedingCloudKitSyncForOutputs() const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

void sub_101417790(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014177B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101952B8C(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101417B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 169) < 0)
    operator delete(*(void **)(v4 - 192));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101417BB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021B6038);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B6038);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B6038);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1014181A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1014181D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

id *sub_1014181F4(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;
  char v43[8];
  double v44;
  uint64_t v45;
  uint64_t v46;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v45 = 0;
  v46 = 0;
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B6038);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B6038);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v44;
    v9 = v7 - v44;
    if (v7 - v44 < 0.0)
      v9 = -(v7 - v44);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B6038);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v40 = v44;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B6038);
        v25 = *(_QWORD *)(a2 + 8);
        v35 = 134349312;
        v36 = v44;
        v37 = 2050;
        v38 = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v44;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B6038);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B6038);
          v28 = *(double *)(a2 + 8);
          v35 = 134217984;
          v36 = v28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B6038);
        v18 = v33;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B6038);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  v21 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 240) = v21;
  *(_OWORD *)(a1 + 256) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_101418944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101418970(uint64_t a1)
{
  return sub_101417BB8(a1 - 72);
}

void sub_101418978(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1014189A4(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_1014189D0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101952CF8(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_101418D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101418D88(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101952E64(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101418FE8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101952FD0(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_101419220(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10195313C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101419448(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101419474(uint64_t a1, uint64_t *a2, int a3, double *a4)
{
  NSObject *v6;
  uint64_t v7;
  double v8;
  uint64_t result;
  double *v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if ((unint64_t)*a2 < 0x2E)
  {
    switch(a3)
    {
      case 1:
        result = 0;
        v10 = (double *)&unk_101CA2898;
        break;
      case 3:
        result = 0;
        v10 = (double *)&unk_101CA2B78;
        break;
      case 4:
        result = 0;
        v10 = (double *)&unk_101CA2CE8;
        break;
      case 6:
        result = 0;
        v10 = (double *)&unk_101CA2E58;
        break;
      default:
        result = 0;
        v10 = (double *)&unk_101CA2A08;
        break;
    }
    v8 = v10[*a2];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      v7 = *a2;
      *(_DWORD *)buf = 134217984;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupCn0ProbabilityGivenOutdoor(),index out of bound,%lu", buf, 0xCu);
    }
    v8 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v11 = *a2;
      v13 = 134217984;
      v14 = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupCn0ProbabilityGivenOutdoor(),index out of bound,%lu", &v13);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupCn0ProbabilityGivenOutdoor(const std::size_t &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    result = 0xFFFFFFFFLL;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_1014196D8(uint64_t a1, uint64_t *a2, double *a3)
{
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if ((unint64_t)*a2 < 0x2E)
  {
    result = 0;
    v7 = dbl_101CA2FC8[*a2];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      v6 = *a2;
      *(_DWORD *)buf = 134217984;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupCn0ProbabilityGivenIndoor(),index out of bound,%lu", buf, 0xCu);
    }
    v7 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v9 = *a2;
      v11 = 134217984;
      v12 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupCn0ProbabilityGivenIndoor(),index out of bound,%lu", &v11);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupCn0ProbabilityGivenIndoor(const std::size_t &, double &) const", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    result = 0xFFFFFFFFLL;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_1014198C0(uint64_t a1, uint64_t *a2, int a3, double *a4)
{
  NSObject *v6;
  uint64_t v7;
  double v8;
  uint64_t result;
  double *v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if ((unint64_t)*a2 < 0x47)
  {
    switch(a3)
    {
      case 1:
        result = 0;
        v10 = (double *)&unk_101CA3138;
        break;
      case 3:
        result = 0;
        v10 = (double *)&unk_101CA35A8;
        break;
      case 4:
        result = 0;
        v10 = (double *)&unk_101CA37E0;
        break;
      case 6:
        result = 0;
        v10 = (double *)&unk_101CA3A18;
        break;
      default:
        result = 0;
        v10 = (double *)&unk_101CA3370;
        break;
    }
    v8 = v10[*a2];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      v7 = *a2;
      *(_DWORD *)buf = 134217984;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu", buf, 0xCu);
    }
    v8 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v11 = *a2;
      v13 = 134217984;
      v14 = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu", &v13);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupNumSatsProbabilityGivenOutdoor(const std::size_t &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    result = 0xFFFFFFFFLL;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_101419B24(uint64_t a1, uint64_t *a2, double *a3)
{
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if ((unint64_t)*a2 < 0x47)
  {
    result = 0;
    v7 = dbl_101CA3C50[*a2];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      v6 = *a2;
      *(_DWORD *)buf = 134217984;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu", buf, 0xCu);
    }
    v7 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v9 = *a2;
      v11 = 134217984;
      v12 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu", &v11);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupNumSatsProbabilityGivenIndoor(const std::size_t &, double &) const", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    result = 0xFFFFFFFFLL;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_101419D0C(uint64_t a1, unsigned int a2, double *a3)
{
  uint64_t v4;
  NSObject *v5;
  double v6;
  uint64_t result;
  char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v4 = a2;
  if (a2 < 4)
  {
    result = 0;
    v6 = dbl_101CA3E88[a2];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu", buf, 0xCu);
    }
    v6 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v9 = 134217984;
      v10 = v4;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu", &v9);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupGnssAvailabilityStateProbabilityGivenOutdoor(const CLGnssAvailabilityPredictor::PredictionType, double &) const", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    result = 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_101419EE8(uint64_t a1, unsigned int a2, double *a3)
{
  uint64_t v4;
  NSObject *v5;
  double v6;
  uint64_t result;
  char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v4 = a2;
  if (a2 < 4)
  {
    result = 0;
    v6 = dbl_101CA3EA0[a2];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu", buf, 0xCu);
    }
    v6 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v9 = 134217984;
      v10 = v4;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu", &v9);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupGnssAvailabilityStateProbabilityGivenIndoor(const CLGnssAvailabilityPredictor::PredictionType, double &) const", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    result = 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_10141A0C4(uint64_t a1, double *a2, double *a3, _QWORD *a4)
{
  double v5;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v5 = *a3;
  if (*a3 <= 0.0 || v5 > 5.0)
  {
    if (v5 <= 5.0 || v5 > 10.0)
    {
      if (v5 <= 10.0 || v5 > 15.0)
      {
        if (v5 <= 15.0 || v5 > 30.0)
        {
          if (v5 <= 30.0 || v5 > 45.0)
          {
            v11 = v5 > 90.0 || v5 <= 45.0;
            v10 = 5;
            if (v11)
              v10 = -1;
          }
          else
          {
            v10 = 4;
          }
        }
        else
        {
          v10 = 3;
        }
      }
      else
      {
        v10 = 2;
      }
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  sub_10141A1A4(a1, a2, &dbl_101CA3F88[4 * v10], &dbl_101CA3F88[4 * v10 + 1], &dbl_101CA3F88[4 * v10 + 2], &dbl_101CA3F88[4 * v10 + 3]);
  *a4 = v12;
  return 0;
}

void sub_10141A1A4(uint64_t a1, double *a2, double *a3, double *a4, _QWORD *a5, double *a6)
{
  double v6;

  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v6 = *a4;
    if ((*(_QWORD *)a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)a6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *a6 > 0.0
      && v6 != 0.0)
    {
      exp(-(*a2 - *a3) / v6);
    }
  }
}

uint64_t sub_10141A27C(uint64_t a1, double *a2, _QWORD *a3)
{
  uint64_t v4;

  sub_10141A1A4(a1, a2, &dbl_101CA4048, &dbl_101CA4050, &qword_101CA4058, &dbl_101CA4060);
  *a3 = v4;
  return 0;
}

void sub_10141A2C4(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_10141A2F0()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_10141A354()
{
  operator delete();
}

void sub_10141A378(int a1, uint64_t a2)
{
  sub_10141B470(a2, a1);
}

uint64_t sub_10141A388()
{
  if (qword_10230EEE0 != -1)
    dispatch_once(&qword_10230EEE0, &stru_1021B6078);
  return qword_102314038;
}

void sub_10141A3CC(uint64_t a1)
{
  sub_101221A0C(a1, (uint64_t)"CLAccessoryDeviceMotion", 4);
}

void sub_10141A4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_101221A60(v2);
  _Unwind_Resume(a1);
}

void sub_10141A4CC(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

__n128 sub_10141A4F0@<Q0>(int a1@<W1>, int a2@<W2>, __int128 *a3@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  __int128 *v14;
  __int128 *v15;
  __n128 result;
  __int128 *v17;
  int v18;
  __int128 *v19;
  int v20;
  __int128 *v21;
  int v22;
  __int128 *v23;
  int v24;
  __int128 *v25;
  int v26;
  __int128 *v27;
  int v28;
  __int128 *v29;
  int v30;
  __int128 *v31;
  int v32;
  __int128 *v33;
  int v34;
  __int128 *v35;
  int v36;
  __int128 *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;

  v3 = atomic_load((unsigned __int8 *)qword_10230EF00);
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v39 = a1;
    v50 = a2;
    v18 = __cxa_guard_acquire(qword_10230EF00);
    a1 = v39;
    a2 = v50;
    a3 = v17;
    if (v18)
    {
      xmmword_10230EEF0 = xmmword_101CA4080;
      sub_10012C97C((float32x4_t *)&xmmword_10230EEF0, (float32x4_t)xmmword_101CA4080);
      __cxa_guard_release(qword_10230EF00);
      a3 = v17;
      a1 = v39;
      a2 = v50;
    }
  }
  v4 = atomic_load((unsigned __int8 *)qword_10230EF20);
  if ((v4 & 1) == 0)
  {
    v19 = a3;
    v40 = a1;
    v51 = a2;
    v20 = __cxa_guard_acquire(qword_10230EF20);
    a1 = v40;
    a2 = v51;
    a3 = v19;
    if (v20)
    {
      xmmword_10230EF10 = xmmword_101CA4090;
      sub_10012C97C((float32x4_t *)&xmmword_10230EF10, (float32x4_t)xmmword_101CA4090);
      __cxa_guard_release(qword_10230EF20);
      a3 = v19;
      a1 = v40;
      a2 = v51;
    }
  }
  v5 = atomic_load((unsigned __int8 *)qword_10230EF40);
  if ((v5 & 1) == 0)
  {
    v21 = a3;
    v41 = a1;
    v52 = a2;
    v22 = __cxa_guard_acquire(qword_10230EF40);
    a1 = v41;
    a2 = v52;
    a3 = v21;
    if (v22)
    {
      xmmword_10230EF30 = xmmword_101CA40A0;
      sub_10012C97C((float32x4_t *)&xmmword_10230EF30, (float32x4_t)xmmword_101CA40A0);
      __cxa_guard_release(qword_10230EF40);
      a3 = v21;
      a1 = v41;
      a2 = v52;
    }
  }
  v6 = atomic_load((unsigned __int8 *)qword_10230EF60);
  if ((v6 & 1) == 0)
  {
    v23 = a3;
    v42 = a1;
    v53 = a2;
    v24 = __cxa_guard_acquire(qword_10230EF60);
    a1 = v42;
    a2 = v53;
    a3 = v23;
    if (v24)
    {
      xmmword_10230EF50 = xmmword_101CA40B0;
      sub_10012C97C((float32x4_t *)&xmmword_10230EF50, (float32x4_t)xmmword_101CA40B0);
      __cxa_guard_release(qword_10230EF60);
      a3 = v23;
      a1 = v42;
      a2 = v53;
    }
  }
  v7 = atomic_load((unsigned __int8 *)qword_10230EF80);
  if ((v7 & 1) == 0)
  {
    v25 = a3;
    v43 = a1;
    v54 = a2;
    v26 = __cxa_guard_acquire(qword_10230EF80);
    a1 = v43;
    a2 = v54;
    a3 = v25;
    if (v26)
    {
      xmmword_10230EF70 = xmmword_101CA40C0;
      sub_10012C97C((float32x4_t *)&xmmword_10230EF70, (float32x4_t)xmmword_101CA40C0);
      __cxa_guard_release(qword_10230EF80);
      a3 = v25;
      a1 = v43;
      a2 = v54;
    }
  }
  v8 = atomic_load((unsigned __int8 *)qword_10230EFA0);
  if ((v8 & 1) == 0)
  {
    v27 = a3;
    v44 = a1;
    v55 = a2;
    v28 = __cxa_guard_acquire(qword_10230EFA0);
    a1 = v44;
    a2 = v55;
    a3 = v27;
    if (v28)
    {
      xmmword_10230EF90 = xmmword_101CA40D0;
      sub_10012C97C((float32x4_t *)&xmmword_10230EF90, (float32x4_t)xmmword_101CA40D0);
      __cxa_guard_release(qword_10230EFA0);
      a3 = v27;
      a1 = v44;
      a2 = v55;
    }
  }
  v9 = atomic_load((unsigned __int8 *)qword_10230EFC0);
  if ((v9 & 1) == 0)
  {
    v29 = a3;
    v45 = a1;
    v56 = a2;
    v30 = __cxa_guard_acquire(qword_10230EFC0);
    a1 = v45;
    a2 = v56;
    a3 = v29;
    if (v30)
    {
      xmmword_10230EFB0 = xmmword_101CA40E0;
      sub_10012C97C((float32x4_t *)&xmmword_10230EFB0, (float32x4_t)xmmword_101CA40E0);
      __cxa_guard_release(qword_10230EFC0);
      a3 = v29;
      a1 = v45;
      a2 = v56;
    }
  }
  v10 = atomic_load((unsigned __int8 *)qword_10230EFE0);
  if ((v10 & 1) == 0)
  {
    v31 = a3;
    v46 = a1;
    v57 = a2;
    v32 = __cxa_guard_acquire(qword_10230EFE0);
    a1 = v46;
    a2 = v57;
    a3 = v31;
    if (v32)
    {
      xmmword_10230EFD0 = xmmword_101CA40F0;
      sub_10012C97C((float32x4_t *)&xmmword_10230EFD0, (float32x4_t)xmmword_101CA40F0);
      __cxa_guard_release(qword_10230EFE0);
      a3 = v31;
      a1 = v46;
      a2 = v57;
    }
  }
  v11 = atomic_load((unsigned __int8 *)qword_10230F000);
  if ((v11 & 1) == 0)
  {
    v33 = a3;
    v47 = a1;
    v58 = a2;
    v34 = __cxa_guard_acquire(qword_10230F000);
    a1 = v47;
    a2 = v58;
    a3 = v33;
    if (v34)
    {
      xmmword_10230EFF0 = xmmword_101CA4090;
      sub_10012C97C((float32x4_t *)&xmmword_10230EFF0, (float32x4_t)xmmword_101CA4090);
      __cxa_guard_release(qword_10230F000);
      a3 = v33;
      a1 = v47;
      a2 = v58;
    }
  }
  v12 = atomic_load((unsigned __int8 *)qword_10230F020);
  if ((v12 & 1) == 0)
  {
    v35 = a3;
    v48 = a1;
    v59 = a2;
    v36 = __cxa_guard_acquire(qword_10230F020);
    a1 = v48;
    a2 = v59;
    a3 = v35;
    if (v36)
    {
      xmmword_10230F010 = xmmword_101CA40A0;
      sub_10012C97C((float32x4_t *)&xmmword_10230F010, (float32x4_t)xmmword_101CA40A0);
      __cxa_guard_release(qword_10230F020);
      a3 = v35;
      a1 = v48;
      a2 = v59;
    }
  }
  v13 = atomic_load((unsigned __int8 *)&qword_10230F040);
  if ((v13 & 1) == 0)
  {
    v37 = a3;
    v49 = a1;
    v60 = a2;
    v38 = __cxa_guard_acquire(&qword_10230F040);
    a1 = v49;
    a2 = v60;
    a3 = v37;
    if (v38)
    {
      xmmword_10230F030 = xmmword_101CA4100;
      sub_10012C97C((float32x4_t *)&xmmword_10230F030, (float32x4_t)xmmword_101CA4100);
      __cxa_guard_release(&qword_10230F040);
      a3 = v37;
      a1 = v49;
      a2 = v60;
    }
  }
  switch(a1)
  {
    case 1:
      v14 = &xmmword_10230EF30;
      v15 = &xmmword_10230EF10;
      goto LABEL_17;
    case 2:
      v14 = &xmmword_10230EF50;
      break;
    case 3:
      v14 = &xmmword_10230EF90;
      v15 = &xmmword_10230EF70;
      goto LABEL_17;
    case 4:
      v14 = &xmmword_10230EFD0;
      v15 = &xmmword_10230EFB0;
      goto LABEL_17;
    case 5:
      v14 = &xmmword_10230F010;
      v15 = &xmmword_10230EFF0;
LABEL_17:
      if (a2 == 2)
        v14 = v15;
      break;
    case 6:
      v14 = &xmmword_10230F030;
      break;
    default:
      v14 = &xmmword_10230EEF0;
      break;
  }
  result = (__n128)*v14;
  *a3 = *v14;
  return result;
}

void sub_10141A9D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230F040);
  _Unwind_Resume(a1);
}

double sub_10141AA8C(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  double v10;
  int v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  int v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  int v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  _BYTE v30[24];
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Unrecognized interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      *(_DWORD *)v30 = 67240192;
      *(_DWORD *)&v30[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryDeviceMotion] Unrecognized interval notification %{public}d", v30, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return v5;
  }
  sub_101221BDC(a1);
  v10 = *a3;
  *(double *)(a1 + 256) = *a3;
  if (v10 <= 0.00001)
  {
    if (*(_BYTE *)(a1 + 29))
      (*(void (**)(_QWORD, const __CFString *, _UNKNOWN **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("MaxFIFOEvents"), &off_10221DC10);
    sub_1012220F4(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v12 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Low latency mode and time sync reset", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_37;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    *(_WORD *)v30 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Low latency mode and time sync reset", v30, 2, *(_OWORD *)v30, *(_QWORD *)&v30[16]);
    goto LABEL_61;
  }
  *(_BYTE *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  if (!*(_BYTE *)(a1 + 28))
  {
    if (*(_BYTE *)(a1 + 29))
      (*(void (**)(_QWORD, const __CFString *, _UNKNOWN **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("MaxFIFOEvents"), &off_10221DC10);
    goto LABEL_28;
  }
  if (!*(_BYTE *)(a1 + 29)
    || ((*(void (**)(_QWORD, const __CFString *, _UNKNOWN **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("MaxFIFOEvents"), &off_10221DBF8), *(double *)(a1 + 256) > 0.0200100001))
  {
LABEL_28:
    sub_1012220C8(a1, 0);
    v11 = 1;
    goto LABEL_29;
  }
  sub_1012220C8(a1, 1);
  v11 = 2;
LABEL_29:
  *(_DWORD *)(a1 + 248) = v11;
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_1021B6100);
  v14 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(a1 + 248);
    if (*(_BYTE *)(a1 + 28))
      v16 = "YES";
    else
      v16 = "NO";
    *(_DWORD *)buf = 136446466;
    v32 = v16;
    v33 = 1026;
    v34 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Low latency mode: %{public}s. TimeSync type: %{public}d", buf, 0x12u);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_37;
  bzero(buf, 0x65CuLL);
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_1021B6100);
  if (*(_BYTE *)(a1 + 28))
    v24 = "YES";
  else
    v24 = "NO";
  v25 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)v30 = 136446466;
  *(_QWORD *)&v30[4] = v24;
  *(_WORD *)&v30[12] = 1026;
  *(_DWORD *)&v30[14] = v25;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Low latency mode: %{public}s. TimeSync type: %{public}d", v30, 18, *(_OWORD *)v30, *(_QWORD *)&v30[16]);
LABEL_61:
  v26 = (uint8_t *)v13;
  sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
  if (v26 != buf)
    free(v26);
LABEL_37:
  if (*(_BYTE *)(a1 + 29))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v17 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(const char **)(a1 + 256);
      *(_DWORD *)buf = 134349056;
      v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v21 = *(_QWORD *)(a1 + 256);
      *(_DWORD *)v30 = 134349056;
      *(_QWORD *)&v30[4] = v21;
      LODWORD(v29) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Setting update interval to %{public}f", v30, v29);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    sub_10006B4E0(*(_QWORD *)(a1 + 32), *(double *)(a1 + 256));
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v19 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Skip setting interval for monitor type client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      *(_WORD *)v30 = 0;
      LODWORD(v29) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Skip setting interval for monitor type client", v30, v29);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
  return *(double *)(a1 + 256);
}

BOOL sub_10141B238(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = result;
    sub_101221BDC(result);
    result = sub_101221B44(v3);
    *(_DWORD *)(v3 + 264) = result;
  }
  return result;
}

uint64_t sub_10141B268(uint64_t a1)
{
  _BOOL4 v2;
  int v3;
  uint64_t result;
  int *v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  const char *v10;
  char *v11;
  int v12;
  const __CFString *v13;
  uint8_t buf[1640];

  v2 = sub_101221B44(a1);
  v3 = *(_DWORD *)(a1 + 264);
  result = sub_101221B44(a1);
  if (v3 != (_DWORD)result)
  {
    v5 = (int *)(a1 + 264);
    *(_DWORD *)(a1 + 264) = v2;
    if (v2 <= 1)
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v6 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v7 = sub_101221AF4(*v5);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] sending accessory status to clients: %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v8 = qword_10229FD88;
        v9 = sub_101221AF4(*v5);
        v12 = 138543362;
        v13 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "[AccessoryDeviceMotion] sending accessory status to clients: %{public}@", &v12, 12);
        v11 = (char *)v10;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::sendAccessoryStatus()", "%s\n", v10);
        if (v11 != (char *)buf)
          free(v11);
      }
      *(_QWORD *)buf = sub_100078B88();
      return sub_10012AC18(a1, 2, a1 + 264, 4);
    }
  }
  return result;
}

void sub_10141B470(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v7;
  const __CFString *v8;
  uint64_t v9;
  const __CFString *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const __CFString *v14;
  uint8_t buf[4];
  const __CFString *v16;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v3 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      LODWORD(v16) = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received unsupported event %{private}d from AudioAccessoryInterface", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v13 = 67174657;
      LODWORD(v14) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] Received unsupported event %{private}d from AudioAccessoryInterface", &v13, 8);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 268) = sub_101221B70();
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v7 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_101221AD0(*(_DWORD *)(a1 + 268));
      *(_DWORD *)buf = 138543362;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Received InEar status update from AudioAccessoryInterface - %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v9 = qword_10229FD88;
      v10 = sub_101221AD0(*(_DWORD *)(a1 + 268));
      v13 = 138543362;
      v14 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "[AccessoryDeviceMotion] Received InEar status update from AudioAccessoryInterface - %{public}@", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    if (!*(_DWORD *)(a1 + 48))
      *(_BYTE *)(a1 + 30) = 0;
  }
}

void sub_10141B7A0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char v5;
  __IOHIDServiceClient *v6;
  NSObject *v7;
  float32x4_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned __int8 v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  int v19;
  NSObject *v20;
  const __CFString *v21;
  const __CFString *v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  const __CFString *v26;
  const __CFString *v27;
  __int128 *v28;
  __int128 *v29;
  const char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  int v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  _BYTE v39[24];
  __int16 v40;
  int v41;
  int16x4_t v42;
  _BYTE __p[24];
  _BYTE v44[24];
  uint64_t v45;
  _BYTE v46[20];
  char v47;
  __int128 v48;

  v4 = atomic_load((unsigned __int8 *)&qword_10230F0A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10230F0A8))
  {
    sub_10141C360((uint64_t)&dword_10230F048);
    __cxa_atexit((void (*)(void *))sub_1018BA85C, &dword_10230F048, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230F0A8);
  }
  if (*(_BYTE *)(a1 + 30))
    goto LABEL_3;
  *(_BYTE *)(a1 + 30) = 1;
  *(_DWORD *)__p = 0;
  sub_1015A2E04(&__p[8], "N/A");
  sub_1015A2E04(&v44[8], "N/A");
  *(_QWORD *)v46 = 0;
  *(_QWORD *)&v46[8] = 0;
  *(_DWORD *)&v46[16] = 1065353216;
  v47 = 0;
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = 0x3F80000000000000;
  dword_10230F048 = 0;
  if (byte_10230F067 < 0)
    operator delete((void *)xmmword_10230F050);
  v5 = 0;
  xmmword_10230F050 = *(_OWORD *)&__p[8];
  unk_10230F060 = *(_QWORD *)v44;
  v44[7] = 0;
  __p[8] = 0;
  if (byte_10230F07F < 0)
  {
    operator delete((void *)xmmword_10230F068);
    v5 = v44[7];
  }
  xmmword_10230F068 = *(_OWORD *)&v44[8];
  unk_10230F078 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  dword_10230F080 = *(_DWORD *)v46;
  xmmword_10230F084 = *(_OWORD *)&v46[4];
  byte_10230F094 = v47;
  xmmword_10230F098 = v48;
  if (v5 < 0)
    operator delete(*(void **)&__p[8]);
  if (!sub_101221D6C(a1, &dword_10230F048))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v11 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Service not found!", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryDeviceMotion] Service not found!", &v34, 2);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v12);
      if (v13 != __p)
        free(v13);
    }
    return;
  }
  v6 = (__IOHIDServiceClient *)sub_100A0A3A0(*(_QWORD *)(a1 + 32));
  if (sub_1013B5818(&v42, v6, CFSTR("H2HTransformation"), (id)8))
  {
    byte_10230F094 = 1;
    *(float32x4_t *)__p = vmulq_f32(vcvtq_f32_s32(vmovl_s16(v42)), (float32x4_t)vdupq_n_s32(0x38000100u));
    sub_10012C97C((float32x4_t *)__p, *(float32x4_t *)__p);
    xmmword_10230F098 = *(_OWORD *)__p;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v7 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 134349824;
      *(double *)&__p[4] = *(float *)&xmmword_10230F098;
      *(_WORD *)&__p[12] = 2050;
      *(double *)&__p[14] = *((float *)&xmmword_10230F098 + 1);
      *(_WORD *)&__p[22] = 2050;
      *(double *)v44 = *((float *)&xmmword_10230F098 + 2);
      *(_WORD *)&v44[8] = 2050;
      *(double *)&v44[10] = *((float *)&xmmword_10230F098 + 3);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Received headset to head transformation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", __p, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v34 = 134349824;
      v35 = *(float *)&xmmword_10230F098;
      v36 = 2050;
      v37 = *((float *)&xmmword_10230F098 + 1);
      v38 = 2050;
      *(double *)v39 = *((float *)&xmmword_10230F098 + 2);
      *(_WORD *)&v39[8] = 2050;
      *(double *)&v39[10] = *((float *)&xmmword_10230F098 + 3);
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Received headset to head transformation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", &v34, 42);
      v10 = (char *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v9);
LABEL_78:
      if (v10 != __p)
        free(v10);
    }
  }
  else
  {
    byte_10230F094 = 0;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v14 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Warning! Headset to Head transformation is not available from the accessory.", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Warning! Headset to Head transformation is not available from the accessory.", &v34, 2);
      v10 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v32);
      goto LABEL_78;
    }
  }
  if (byte_10230F094)
  {
    v15 = atomic_load((unsigned __int8 *)&qword_10230F0D0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_10230F0D0))
    {
      xmmword_10230F0C0 = xmmword_101CA4110;
      sub_10012C97C((float32x4_t *)&xmmword_10230F0C0, (float32x4_t)xmmword_101CA4110);
      __cxa_guard_release(&qword_10230F0D0);
    }
    sub_100B61EC4((uint64_t)&xmmword_10230F098, (float *)&xmmword_10230F0C0, (float32x4_t *)__p, v8);
    xmmword_10230F084 = *(_OWORD *)__p;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v16 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 134349824;
      *(double *)&__p[4] = *(float *)&xmmword_10230F084;
      *(_WORD *)&__p[12] = 2050;
      *(double *)&__p[14] = *((float *)&xmmword_10230F084 + 1);
      *(_WORD *)&__p[22] = 2050;
      *(double *)v44 = *((float *)&xmmword_10230F084 + 2);
      *(_WORD *)&v44[8] = 2050;
      *(double *)&v44[10] = *((float *)&xmmword_10230F084 + 3);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Derived device frame orientation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", __p, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v34 = 134349824;
      v35 = *(float *)&xmmword_10230F084;
      v36 = 2050;
      v37 = *((float *)&xmmword_10230F084 + 1);
      v38 = 2050;
      *(double *)v39 = *((float *)&xmmword_10230F084 + 2);
      *(_WORD *)&v39[8] = 2050;
      *(double *)&v39[10] = *((float *)&xmmword_10230F084 + 3);
      LODWORD(v33) = 42;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryDeviceMotion] Derived device frame orientation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", &v34, v33);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v17);
      if (v18 != __p)
        free(v18);
    }
  }
  else
  {
    sub_10141A4F0(dword_10230F080, dword_10230F048, (__int128 *)__p);
    xmmword_10230F084 = *(_OWORD *)__p;
  }
  if (dword_10230F080 > 8)
  {
    v19 = 0;
  }
  else
  {
    v19 = 1;
    if (((1 << dword_10230F080) & 0x1BB) != 0)
    {
      if (dword_10230F048 == 2)
        v19 = 1;
      else
        v19 = 2;
    }
  }
  dword_10230F0B0 = v19;
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_1021B6100);
  v20 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    v21 = sub_101221AA8(dword_10230F080);
    v22 = sub_101221B20(dword_10230F0B0);
    if (byte_10230F067 >= 0)
      v23 = &xmmword_10230F050;
    else
      v23 = (__int128 *)xmmword_10230F050;
    if (byte_10230F07F >= 0)
      v24 = &xmmword_10230F068;
    else
      v24 = (__int128 *)xmmword_10230F068;
    *(_DWORD *)__p = 138479107;
    *(_QWORD *)&__p[4] = v21;
    *(_WORD *)&__p[12] = 2114;
    *(_QWORD *)&__p[14] = v22;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)v44 = dword_10230F048;
    *(_WORD *)&v44[4] = 2081;
    *(_QWORD *)&v44[6] = v23;
    *(_WORD *)&v44[14] = 2081;
    *(_QWORD *)&v44[16] = v24;
    LOWORD(v45) = 1026;
    *(_DWORD *)((char *)&v45 + 2) = dword_10230F080;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] config,%{private}@,location,%{public}@,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s,hardwareModel,%{public}d", __p, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v25 = qword_10229FD88;
    v26 = sub_101221AA8(dword_10230F080);
    v27 = sub_101221B20(dword_10230F0B0);
    if (byte_10230F067 >= 0)
      v28 = &xmmword_10230F050;
    else
      v28 = (__int128 *)xmmword_10230F050;
    if (byte_10230F07F >= 0)
      v29 = &xmmword_10230F068;
    else
      v29 = (__int128 *)xmmword_10230F068;
    v34 = 138479107;
    v35 = *(double *)&v26;
    v36 = 2114;
    v37 = *(double *)&v27;
    v38 = 1026;
    *(_DWORD *)v39 = dword_10230F048;
    *(_WORD *)&v39[4] = 2081;
    *(_QWORD *)&v39[6] = v28;
    *(_WORD *)&v39[14] = 2081;
    *(_QWORD *)&v39[16] = v29;
    v40 = 1026;
    v41 = dword_10230F080;
    LODWORD(v33) = 54;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 0, "[AccessoryDeviceMotion] config,%{private}@,location,%{public}@,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s,hardwareModel,%{public}d", &v34, v33);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v30);
    if (v31 != __p)
      free(v31);
  }
  sub_10012AC18(a1, 1, (uint64_t)&dword_10230F048, 96);
  if (*(_BYTE *)(a1 + 30))
  {
LABEL_3:
    *(_DWORD *)(a2 + 104) = dword_10230F0B0;
    sub_10012AC18(a1, 0, a2, 144);
  }
}

void sub_10141C318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_guard_abort(&qword_10230F0D0);
  _Unwind_Resume(a1);
}

uint64_t sub_10141C360(uint64_t a1)
{
  _QWORD *v2;

  *(_DWORD *)a1 = 0;
  v2 = (_QWORD *)(a1 + 32);
  sub_1015A2E04((_QWORD *)(a1 + 8), "N/A");
  sub_1015A2E04(v2, "N/A");
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x3F80000000000000;
  return a1;
}

void sub_10141C3C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10141C3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *DataValue;
  uint64_t IntegerValue;
  BOOL v8;
  uint64_t v9;
  unint64_t TimeStamp;
  const __CFArray *v11;
  float32x4_t v12;
  id v13;
  id v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  double v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  _BYTE *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char v52;
  unsigned __int8 v53;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  char *v57;
  int v58;
  float v59;
  float v60;
  unsigned int v61;
  int v62;
  int v63;
  BOOL v65;
  __int128 *v66;
  unsigned int v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  const char *v73;
  NSObject *v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char *v84;
  NSObject *v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  NSObject *v92;
  NSObject *v93;
  const char *v94;
  char *v95;
  const char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  float v107;
  unsigned __int16 v108;
  __int128 v109;
  double v110;
  uint64_t v111;
  float v112;
  __int128 v113;
  _OWORD v114[2];
  int v115;
  int v116;
  _BYTE v117[30];
  _WORD v118[10];
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  double v135;
  __int16 v136;
  double v137;
  __int16 v138;
  double v139;
  __int16 v140;
  int v141;
  __int16 v142;
  double v143;
  __int16 v144;
  int v145;
  _BYTE buf[34];
  _WORD v147[10];
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  int v170;
  __int16 v171;
  double v172;
  __int16 v173;
  int v174;

  DataValue = (unsigned __int8 *)IOHIDEventGetDataValue(a4, 65540);
  IntegerValue = IOHIDEventGetIntegerValue(a4, 65539);
  if (DataValue)
    v8 = IntegerValue == 0;
  else
    v8 = 1;
  if (v8)
    return;
  v9 = IntegerValue;
  *(_QWORD *)&v104 = 0;
  *((_QWORD *)&v104 + 1) = 0x3F80000000000000;
  v108 = 0;
  v109 = 0uLL;
  TimeStamp = IOHIDEventGetTimeStamp(a4);
  v110 = sub_100127828(TimeStamp);
  v113 = 0u;
  memset(v114, 0, sizeof(v114));
  v115 = 0;
  HIBYTE(v103) = 0;
  v11 = sub_1013B4CF4(a4, (_BYTE *)&v103 + 7);
  *(_QWORD *)((char *)v114 + 4) = v11;
  v12.i32[1] = HIDWORD(v110);
  *((double *)&v109 + 1) = v110;
  if (HIBYTE(v103) && v11)
  {
    v13 = sub_101222118(a1, (uint64_t)v11);
    if (!v13)
      goto LABEL_47;
    v14 = v13;
    v15 = sub_100127828((unint64_t)v13);
    v16 = v110 - v15;
    if (v110 - v15 <= -3600.0 || v16 >= 3600.0)
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v26 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)((char *)v114 + 4);
        v28 = IOHIDEventGetTimeStamp(a4);
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v28;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v14;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Abnormal TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v29 = qword_10229FD88;
        v30 = *(_QWORD *)((char *)v114 + 4);
        v31 = IOHIDEventGetTimeStamp(a4);
        v116 = 134349824;
        *(_QWORD *)v117 = v30;
        *(_WORD *)&v117[8] = 2050;
        *(_QWORD *)&v117[10] = v31;
        *(_WORD *)&v117[18] = 2050;
        *(_QWORD *)&v117[20] = v14;
        *(_WORD *)&v117[28] = 2050;
        *(_QWORD *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
        LODWORD(v103) = 42;
        v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 16, "[AccessoryDeviceMotion] Abnormal TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", &v116, v103);
        goto LABEL_29;
      }
    }
    else
    {
      *(double *)((char *)v114 + 12) = v110 - v15;
      *((double *)&v109 + 1) = v15;
      LODWORD(v114[0]) = *(_DWORD *)(a1 + 248);
      if (v16 <= 0.100000001)
      {
        if (v16 <= 0.0)
        {
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v41 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
          {
            v42 = *(_QWORD *)((char *)v114 + 4);
            v43 = IOHIDEventGetTimeStamp(a4);
            *(_DWORD *)buf = 134349824;
            *(_QWORD *)&buf[4] = v42;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v43;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v14;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Zero or Negative TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_1021B6100);
            v98 = qword_10229FD88;
            v99 = *(_QWORD *)((char *)v114 + 4);
            v100 = IOHIDEventGetTimeStamp(a4);
            v116 = 134349824;
            *(_QWORD *)v117 = v99;
            *(_WORD *)&v117[8] = 2050;
            *(_QWORD *)&v117[10] = v100;
            *(_WORD *)&v117[18] = 2050;
            *(_QWORD *)&v117[20] = v14;
            *(_WORD *)&v117[28] = 2050;
            *(_QWORD *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            LODWORD(v103) = 42;
            v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v98, 16, "[AccessoryDeviceMotion] Zero or Negative TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", &v116, v103);
            goto LABEL_29;
          }
        }
        else
        {
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v33 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
          {
            v34 = *(_QWORD *)((char *)v114 + 4);
            v35 = IOHIDEventGetTimeStamp(a4);
            *(_DWORD *)buf = 134349824;
            *(_QWORD *)&buf[4] = v34;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v35;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v14;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_1021B6100);
            v36 = qword_10229FD88;
            v37 = *(_QWORD *)((char *)v114 + 4);
            v38 = IOHIDEventGetTimeStamp(a4);
            v116 = 134349824;
            *(_QWORD *)v117 = v37;
            *(_WORD *)&v117[8] = 2050;
            *(_QWORD *)&v117[10] = v38;
            *(_WORD *)&v117[18] = 2050;
            *(_QWORD *)&v117[20] = v14;
            *(_WORD *)&v117[28] = 2050;
            *(_QWORD *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
            LODWORD(v103) = 42;
            v39 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "[AccessoryDeviceMotion] W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", &v116, v103);
            v32 = v40;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v39);
            goto LABEL_30;
          }
        }
      }
      else
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v17 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          v18 = *(_QWORD *)((char *)v114 + 4);
          v19 = IOHIDEventGetTimeStamp(a4);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v19;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v14;
          *(_WORD *)&buf[32] = 2050;
          *(_QWORD *)v147 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] High TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v20 = qword_10229FD88;
          v21 = *(_QWORD *)((char *)v114 + 4);
          v22 = IOHIDEventGetTimeStamp(a4);
          v116 = 134349824;
          *(_QWORD *)v117 = v21;
          *(_WORD *)&v117[8] = 2050;
          *(_QWORD *)&v117[10] = v22;
          *(_WORD *)&v117[18] = 2050;
          *(_QWORD *)&v117[20] = v14;
          *(_WORD *)&v117[28] = 2050;
          *(_QWORD *)v118 = (uint64_t)(*(double *)((char *)v114 + 12) * 1000000000.0);
          LODWORD(v103) = 42;
          v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 16, "[AccessoryDeviceMotion] High TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", &v116, v103);
LABEL_29:
          v32 = v23;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v24);
LABEL_30:
          if (v32 != buf)
            free(v32);
        }
      }
    }
  }
  else if (!HIBYTE(v103))
  {
    LODWORD(v114[0]) = *(_DWORD *)(a1 + 248);
    v25 = mach_absolute_time();
    *(double *)v12.i64 = sub_100127828(v25);
    v110 = *(double *)v12.i64;
  }
LABEL_47:
  v44 = *DataValue;
  if (v44 >= 4 && v9 == 47 || v44 == 3 && v9 == 49)
  {
    DWORD2(v113) = *(unsigned __int16 *)(DataValue + 45);
    if ((*(_WORD *)(DataValue + 1) & 0x80) == 0)
    {
      *(_QWORD *)&v109 = *(_QWORD *)(DataValue + 3);
      v45 = (float)*(__int16 *)(DataValue + 13) / 32767.0;
      v46 = (float)*(__int16 *)(DataValue + 15) / 32767.0;
      *(float *)buf = (float)*(__int16 *)(DataValue + 11) / 32767.0;
      *(float *)&buf[4] = v45;
      v12.f32[0] = sqrtf(fmaxf((float)((float)(1.0 - (float)(*(float *)buf * *(float *)buf)) - (float)(v45 * v45))- (float)(v46 * v46), 0.0));
      *(float *)&buf[8] = v46;
      *(_DWORD *)&buf[12] = v12.i32[0];
      sub_10012C97C((float32x4_t *)buf, v12);
      v104 = *(_OWORD *)buf;
      v47 = (float)*(__int16 *)(DataValue + 31) * 0.00097656;
      v48 = (float)*(__int16 *)(DataValue + 33) * 0.00097656;
      *((float *)&v106 + 2) = (float)*(__int16 *)(DataValue + 29) * 0.00097656;
      *((float *)&v106 + 3) = v47;
      v107 = v48;
      v49 = (float)*(__int16 *)(DataValue + 17) * 0.0019531;
      v50 = (float)*(__int16 *)(DataValue + 21);
      v51 = (float)*(__int16 *)(DataValue + 19) * 0.0019531;
      *(float *)&v105 = v49;
      *((float *)&v105 + 1) = v51;
      *((float *)&v105 + 2) = v50 * 0.0019531;
      if (v44 < 5)
      {
        *(_WORD *)((char *)&v115 + 1) = 0;
        LOWORD(v49) = *(_WORD *)(DataValue + 23);
        LOWORD(v51) = *(_WORD *)(DataValue + 25);
        LOWORD(v50) = *(_WORD *)(DataValue + 27);
        *((float *)&v105 + 3) = (float)LODWORD(v49) * 0.00000011921;
        *(float *)&v106 = (float)LODWORD(v51) * 0.00000011921;
        *((float *)&v106 + 1) = (float)LODWORD(v50) * 0.00000011921;
      }
      else
      {
        LOWORD(v49) = *(_WORD *)(DataValue + 23);
        *((float *)&v105 + 3) = (float)LODWORD(v49) * 0.00000011921;
        *(float *)&v106 = *((float *)&v105 + 3);
        *((float *)&v106 + 1) = *((float *)&v105 + 3);
        if (v44 == 5)
        {
          v52 = 0;
          v53 = 0;
        }
        else
        {
          v53 = DataValue[25];
          v52 = 1;
        }
        BYTE2(v115) = v52;
        BYTE1(v115) = v53;
        if (DataValue[26] || DataValue[27] || (LOBYTE(v58) = DataValue[28], (_BYTE)v58))
          v58 = (*(unsigned __int16 *)(DataValue + 1) >> 9) & 1;
        LOBYTE(v115) = v58;
        *((float *)&v114[1] + 1) = (float)(char)DataValue[26] / 127.0;
        *((float *)&v114[1] + 2) = (float)(char)DataValue[27] / 127.0;
        *((float *)&v114[1] + 3) = (float)(char)DataValue[28] / 127.0;
      }
      v59 = (float)*(__int16 *)(DataValue + 37) * 0.00097656;
      v60 = (float)*(__int16 *)(DataValue + 39) * 0.00097656;
      *(float *)&v111 = (float)*(__int16 *)(DataValue + 35) * 0.00097656;
      *((float *)&v111 + 1) = v59;
      v112 = v60;
      LODWORD(v113) = *(_DWORD *)(DataValue + 41);
      v61 = *(unsigned __int16 *)(DataValue + 1);
      v62 = (v61 >> 14) & 2;
      if ((v61 & 0x4000) != 0)
        v62 = 1;
      DWORD1(v113) = v62;
      v108 = v61 & 0x3FFF;
      v63 = *(_DWORD *)(a1 + 268);
      v65 = v63 == 4 || v63 == 2;
      HIBYTE(v115) = v65;
      v66 = (__int128 *)(a1 + 104);
      v67 = *(_DWORD *)(a1 + 204);
      if (DWORD2(v113) && DWORD2(v113) == v67)
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v68 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          v69 = *(_DWORD *)(a1 + 204);
          v70 = *(_QWORD *)(a1 + 160);
          *(_DWORD *)buf = 67240960;
          *(_DWORD *)&buf[4] = v69;
          *(_WORD *)&buf[8] = 2050;
          *(_QWORD *)&buf[10] = v70;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v113);
          *(_WORD *)&buf[24] = 2050;
          *(_QWORD *)&buf[26] = v109;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received duplicate packets: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_129;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v71 = *(_DWORD *)(a1 + 204);
        v72 = *(_QWORD *)(a1 + 160);
        v116 = 67240960;
        *(_DWORD *)v117 = v71;
        *(_WORD *)&v117[4] = 2050;
        *(_QWORD *)&v117[6] = v72;
        *(_WORD *)&v117[14] = 1026;
        *(_DWORD *)&v117[16] = DWORD2(v113);
        *(_WORD *)&v117[20] = 2050;
        *(_QWORD *)&v117[22] = v109;
        LODWORD(v103) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] Received duplicate packets: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", &v116, v103);
      }
      else if (DWORD2(v113) < 3 || DWORD2(v113) >= v67)
      {
        if ((unint64_t)v109 < 0xC351 || (unint64_t)v109 >= *(_QWORD *)(a1 + 160))
        {
          if (!LODWORD(v114[0]) || !*(_DWORD *)(a1 + 212) || *((double *)&v109 + 1) >= *(double *)(a1 + 168))
            goto LABEL_129;
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v85 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
          {
            v86 = *(_DWORD *)(a1 + 204);
            v87 = *(_QWORD *)(a1 + 168);
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v86;
            *(_WORD *)&buf[8] = 2050;
            *(_QWORD *)&buf[10] = v87;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = DWORD2(v113);
            *(_WORD *)&buf[24] = 2050;
            *(_QWORD *)&buf[26] = *((_QWORD *)&v109 + 1);
            _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] TimeSynced timestamp went backward: lastSeq,%{public}d,lastTimestamp,%{public}.3f,currSeq,%{public}d,currTimestamp,%{public}.3f", buf, 0x22u);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_129;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v101 = *(_DWORD *)(a1 + 204);
          v102 = *(_QWORD *)(a1 + 168);
          v116 = 67240960;
          *(_DWORD *)v117 = v101;
          *(_WORD *)&v117[4] = 2050;
          *(_QWORD *)&v117[6] = v102;
          *(_WORD *)&v117[14] = 1026;
          *(_DWORD *)&v117[16] = DWORD2(v113);
          *(_WORD *)&v117[20] = 2050;
          *(_QWORD *)&v117[22] = *((_QWORD *)&v109 + 1);
          LODWORD(v103) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] TimeSynced timestamp went backward: lastSeq,%{public}d,lastTimestamp,%{public}.3f,currSeq,%{public}d,currTimestamp,%{public}.3f", &v116, v103);
        }
        else
        {
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v79 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
          {
            v80 = *(_DWORD *)(a1 + 204);
            v81 = *(_QWORD *)(a1 + 160);
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v80;
            *(_WORD *)&buf[8] = 2050;
            *(_QWORD *)&buf[10] = v81;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = DWORD2(v113);
            *(_WORD *)&buf[24] = 2050;
            *(_QWORD *)&buf[26] = v109;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received backward W2 GTB timestamp: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_129;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_1021B6100);
          v82 = *(_DWORD *)(a1 + 204);
          v83 = *(_QWORD *)(a1 + 160);
          v116 = 67240960;
          *(_DWORD *)v117 = v82;
          *(_WORD *)&v117[4] = 2050;
          *(_QWORD *)&v117[6] = v83;
          *(_WORD *)&v117[14] = 1026;
          *(_DWORD *)&v117[16] = DWORD2(v113);
          *(_WORD *)&v117[20] = 2050;
          *(_QWORD *)&v117[22] = v109;
          LODWORD(v103) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] Received backward W2 GTB timestamp: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", &v116, v103);
        }
      }
      else
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v74 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          v75 = *(_DWORD *)(a1 + 204);
          v76 = *(_QWORD *)(a1 + 160);
          *(_DWORD *)buf = 67240960;
          *(_DWORD *)&buf[4] = v75;
          *(_WORD *)&buf[8] = 2050;
          *(_QWORD *)&buf[10] = v76;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v113);
          *(_WORD *)&buf[24] = 2050;
          *(_QWORD *)&buf[26] = v109;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received backward sequence number: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_129;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v77 = *(_DWORD *)(a1 + 204);
        v78 = *(_QWORD *)(a1 + 160);
        v116 = 67240960;
        *(_DWORD *)v117 = v77;
        *(_WORD *)&v117[4] = 2050;
        *(_QWORD *)&v117[6] = v78;
        *(_WORD *)&v117[14] = 1026;
        *(_DWORD *)&v117[16] = DWORD2(v113);
        *(_WORD *)&v117[20] = 2050;
        *(_QWORD *)&v117[22] = v109;
        LODWORD(v103) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] Received backward sequence number: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", &v116, v103);
      }
      v84 = (char *)v73;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v73);
      if (v84 != buf)
        free(v84);
LABEL_129:
      if (v66 != &v104)
        *v66 = v104;
      v88 = v106;
      *(_OWORD *)(a1 + 120) = v105;
      *(_OWORD *)(a1 + 136) = v88;
      *(float *)(a1 + 152) = v107;
      *(_WORD *)(a1 + 156) = v108;
      *(_OWORD *)(a1 + 160) = v109;
      *(double *)(a1 + 176) = v110;
      *(_QWORD *)(a1 + 184) = v111;
      *(float *)(a1 + 192) = v112;
      v89 = v113;
      v90 = v114[0];
      v91 = v114[1];
      *(_DWORD *)(a1 + 244) = v115;
      *(_OWORD *)(a1 + 228) = v91;
      *(_OWORD *)(a1 + 212) = v90;
      *(_OWORD *)(a1 + 196) = v89;
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v92 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67241216;
        *(_DWORD *)&buf[4] = DWORD2(v113);
        *(_WORD *)&buf[8] = 2050;
        *(_QWORD *)&buf[10] = v109;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = *((_QWORD *)&v109 + 1);
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v114[0];
        v147[0] = 2050;
        *(_QWORD *)&v147[1] = *(_QWORD *)((char *)v114 + 12);
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "[AccessoryDeviceMotion] seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,TimeSyncStatus,%{public}u,latency,%{public}20.20f", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v116 = 67241216;
        *(_DWORD *)v117 = DWORD2(v113);
        *(_WORD *)&v117[4] = 2050;
        *(_QWORD *)&v117[6] = v109;
        *(_WORD *)&v117[14] = 2050;
        *(_QWORD *)&v117[16] = *((_QWORD *)&v109 + 1);
        *(_WORD *)&v117[24] = 1026;
        *(_DWORD *)&v117[26] = v114[0];
        v118[0] = 2050;
        *(_QWORD *)&v118[1] = *(_QWORD *)((char *)v114 + 12);
        LODWORD(v103) = 44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryDeviceMotion] seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,TimeSyncStatus,%{public}u,latency,%{public}20.20f", &v116, v103);
        v95 = (char *)v94;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v94);
        if (v95 != buf)
          free(v95);
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v93 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134353664;
        *(double *)&buf[4] = *(float *)&v104;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = *((float *)&v104 + 1);
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = *((float *)&v104 + 2);
        *(_WORD *)&buf[32] = 2050;
        *(double *)v147 = *((float *)&v104 + 3);
        v147[4] = 2050;
        *(double *)&v147[5] = *(float *)&v105;
        v147[9] = 2050;
        v148 = *((float *)&v105 + 1);
        v149 = 2050;
        v150 = *((float *)&v105 + 2);
        v151 = 2050;
        v152 = *((float *)&v105 + 3);
        v153 = 2050;
        v154 = *(float *)&v106;
        v155 = 2050;
        v156 = *((float *)&v106 + 1);
        v157 = 2050;
        v158 = *((float *)&v106 + 2);
        v159 = 2050;
        v160 = *((float *)&v106 + 3);
        v161 = 2050;
        v162 = v107;
        v163 = 2050;
        v164 = *(float *)&v111;
        v165 = 2050;
        v166 = *((float *)&v111 + 1);
        v167 = 2050;
        v168 = v112;
        v169 = 1026;
        v170 = v108;
        v171 = 2050;
        v172 = *(float *)&v113;
        v173 = 1026;
        v174 = DWORD1(v113);
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] q.x,%{public}20.20f,q.y,%{public}20.20f,q.z,%{public}20.20f,q.w,%{public}20.20f,rotationRate.x,%{public}20.20f,rotationRate.y,%{public}20.20f,rotationRate.z,%{public}20.20f,variance.x,%{public}20.20f,variance.y,%{public}20.20f,variance.z,%{public}20.20f,userAccel.x,%{public}20.20f,userAccel.y,%{public}20.20f,userAccel.z,%{public}20.20f,filteredAccel.x,%{public}20.20f,filteredAccel.y,%{public}20.20f,filteredAccel.z,%{public}20.20f,status,%{public}04x,quiescentNoise,%{public}20.20f,quiescentMode,%{public}d", buf, 0xB8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021B6100);
        v116 = 134353664;
        *(double *)v117 = *(float *)&v104;
        *(_WORD *)&v117[8] = 2050;
        *(double *)&v117[10] = *((float *)&v104 + 1);
        *(_WORD *)&v117[18] = 2050;
        *(double *)&v117[20] = *((float *)&v104 + 2);
        *(_WORD *)&v117[28] = 2050;
        *(double *)v118 = *((float *)&v104 + 3);
        v118[4] = 2050;
        *(double *)&v118[5] = *(float *)&v105;
        v118[9] = 2050;
        v119 = *((float *)&v105 + 1);
        v120 = 2050;
        v121 = *((float *)&v105 + 2);
        v122 = 2050;
        v123 = *((float *)&v105 + 3);
        v124 = 2050;
        v125 = *(float *)&v106;
        v126 = 2050;
        v127 = *((float *)&v106 + 1);
        v128 = 2050;
        v129 = *((float *)&v106 + 2);
        v130 = 2050;
        v131 = *((float *)&v106 + 3);
        v132 = 2050;
        v133 = v107;
        v134 = 2050;
        v135 = *(float *)&v111;
        v136 = 2050;
        v137 = *((float *)&v111 + 1);
        v138 = 2050;
        v139 = v112;
        v140 = 1026;
        v141 = v108;
        v142 = 2050;
        v143 = *(float *)&v113;
        v144 = 1026;
        v145 = DWORD1(v113);
        LODWORD(v103) = 184;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryDeviceMotion] q.x,%{public}20.20f,q.y,%{public}20.20f,q.z,%{public}20.20f,q.w,%{public}20.20f,rotationRate.x,%{public}20.20f,rotationRate.y,%{public}20.20f,rotationRate.z,%{public}20.20f,variance.x,%{public}20.20f,variance.y,%{public}20.20f,variance.z,%{public}20.20f,userAccel.x,%{public}20.20f,userAccel.y,%{public}20.20f,userAccel.z,%{public}20.20f,filteredAccel.x,%{public}20.20f,filteredAccel.y,%{public}20.20f,filteredAccel.z,%{public}20.20f,status,%{public}04x,quiescentNoise,%{public}20.20f,quiescentMode,%{public}d", &v116, v103);
        v97 = (char *)v96;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v96);
        if (v97 != buf)
          free(v97);
      }
      sub_10141B7A0(a1, (uint64_t)&v104);
      return;
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v54 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Invalid IMU error on accessory", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      LOWORD(v116) = 0;
      LODWORD(v103) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryDeviceMotion] Invalid IMU error on accessory", &v116, v103);
LABEL_71:
      v57 = (char *)v55;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v55);
      if (v57 != buf)
        free(v57);
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021B6100);
    v56 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v44;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Invalid accessory device motion packet size %{public}ld and version %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021B6100);
      v116 = 134349312;
      *(_QWORD *)v117 = v9;
      *(_WORD *)&v117[8] = 1026;
      *(_DWORD *)&v117[10] = v44;
      LODWORD(v103) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryDeviceMotion] Invalid accessory device motion packet size %{public}ld and version %{public}d", &v116, v103);
      goto LABEL_71;
    }
  }
}

