uint64_t sub_1015841A4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE2E0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015841BC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015841E0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_1021BE2E0;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_DWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 28) = v3 | 4;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 12) = v7;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_101584288(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "debugY", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "outputB", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101584358(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101584764(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8), 0x186A0u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0x186A1u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0x186A2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  return result;
}

uint64_t sub_10158482C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE318;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101584844(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101584868(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_1021BE318;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_DWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 28) = v3 | 4;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 12) = v7;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_101584910(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "debugY", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "outputB", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015849E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101584DEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8), 0x186A0u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0x186A1u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0x186A2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  return result;
}

uint64_t sub_101584EB4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE350;
  *(_QWORD *)(result + 204) = 0;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_101584ED0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101584EF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;
  char v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  char v66;
  char v67;
  unint64_t v68;
  char v69;
  char v70;
  char v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  char v76;
  unint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  char v87;
  char v88;
  char v89;
  unint64_t v90;
  char v91;
  char v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  char v98;
  unint64_t v99;
  char v100;
  char v101;

  *(_QWORD *)result = &off_1021BE350;
  *(_QWORD *)(result + 204) = 0;
  *(_DWORD *)(result + 212) = 0;
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 1) != 0)
  {
    v4 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 214) = 0;
    *(_WORD *)(result + 212) = 0;
    v3 = 1;
    *(_QWORD *)(result + 204) = 1;
    *(_QWORD *)(result + 8) = v6;
    v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
    v2 = *(_QWORD *)(a2 + 204);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  v4 = 0;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10uLL;
    *(_QWORD *)(result + 204) = v3;
    *(_WORD *)(result + 212) = 0;
    *(_BYTE *)(result + 214) = 0;
    *(_DWORD *)(result + 40) = v7;
    v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
    v2 = *(_QWORD *)(a2 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v8 = *(_BYTE *)(a2 + 188);
    v4 = 2;
    *(_QWORD *)(result + 204) = v3;
    *(_BYTE *)(result + 214) = 0;
    *(_WORD *)(result + 212) = 2;
    *(_BYTE *)(result + 188) = v8;
    v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
    v2 = *(_QWORD *)(a2 + 204);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v5 & 4) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 108);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 108) = v9;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  v10 = *(_BYTE *)(a2 + 189);
  v11 = v4 >> 16;
  v4 |= 4uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v11;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 189) = v10;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_QWORD *)(result + 16) = v12;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  v13 = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 112) = v13;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  v14 = *(_DWORD *)(a2 + 80);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 80) = v14;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  v15 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 48) = v15;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x400000000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  v16 = *(_DWORD *)(a2 + 128);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 128) = v16;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x400000000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  v17 = *(_BYTE *)(a2 + 181);
  v3 |= 0x400000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 181) = v17;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  v18 = *(_BYTE *)(a2 + 157);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 157) = v18;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  v19 = *(_BYTE *)(a2 + 197);
  v20 = v4 >> 16;
  v4 |= 0x400uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v20;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 197) = v19;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  v21 = *(_BYTE *)(a2 + 165);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 165) = v21;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  v22 = *(_BYTE *)(a2 + 173);
  v3 |= 0x4000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 173) = v22;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  v23 = *(_BYTE *)(a2 + 190);
  v24 = v4 >> 16;
  v4 |= 8uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v24;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 190) = v23;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  v25 = *(_DWORD *)(a2 + 96);
  v3 |= 0x40000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 96) = v25;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  v26 = *(_DWORD *)(a2 + 64);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 64) = v26;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000000000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  v27 = *(_DWORD *)(a2 + 144);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 144) = v27;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x4000000000000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  v28 = *(_BYTE *)(a2 + 185);
  v3 |= 0x4000000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 185) = v28;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  v29 = *(_BYTE *)(a2 + 161);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 161) = v29;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  v30 = *(_BYTE *)(a2 + 201);
  v31 = v4 >> 16;
  v4 |= 0x4000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v31;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 201) = v30;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x40000000000000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  v32 = *(_BYTE *)(a2 + 169);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 169) = v32;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x40000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  v33 = *(_BYTE *)(a2 + 177);
  v3 |= 0x40000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 177) = v33;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  v34 = *(_BYTE *)(a2 + 193);
  v35 = v4 >> 16;
  v4 |= 0x40uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v35;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 193) = v34;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  v36 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_QWORD *)(result + 24) = v36;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x800000) == 0)
  {
LABEL_31:
    if ((v2 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  v37 = *(_DWORD *)(a2 + 116);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 116) = v37;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x8000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  v38 = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 84) = v38;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x80) == 0)
  {
LABEL_33:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  v39 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 52) = v39;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  v40 = *(_DWORD *)(a2 + 132);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 132) = v40;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x800000000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  v41 = *(_BYTE *)(a2 + 182);
  v3 |= 0x800000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 182) = v41;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  v42 = *(_BYTE *)(a2 + 158);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 158) = v42;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  v43 = *(_BYTE *)(a2 + 198);
  v44 = v4 >> 16;
  v4 |= 0x800uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v44;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 198) = v43;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  v45 = *(_BYTE *)(a2 + 166);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 166) = v45;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x8000000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x10) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  v46 = *(_BYTE *)(a2 + 174);
  v3 |= 0x8000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 174) = v46;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x10) == 0)
  {
LABEL_40:
    if ((v2 & 0x80000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  v47 = *(_BYTE *)(a2 + 191);
  v48 = v4 >> 16;
  v4 |= 0x10uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v48;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 191) = v47;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x80000) == 0)
  {
LABEL_41:
    if ((v2 & 0x800) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  v49 = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 100) = v49;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x800) == 0)
  {
LABEL_42:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  v50 = *(_DWORD *)(a2 + 68);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 68) = v50;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  v51 = *(_DWORD *)(a2 + 148);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 148) = v51;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  v52 = *(_BYTE *)(a2 + 186);
  v3 |= 0x8000000000000000;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 186) = v52;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x8000) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  v53 = *(_BYTE *)(a2 + 162);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 162) = v53;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x8000) == 0)
  {
LABEL_46:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  v54 = *(_BYTE *)(a2 + 202);
  v55 = v4 >> 16;
  v4 |= 0x8000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v55;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 202) = v54;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000000000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  v56 = *(_BYTE *)(a2 + 170);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 170) = v56;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x80000000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  v57 = *(_BYTE *)(a2 + 178);
  v3 |= 0x80000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 178) = v57;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x80) == 0)
  {
LABEL_49:
    if ((v2 & 8) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  v58 = *(_BYTE *)(a2 + 194);
  v59 = v4 >> 16;
  v4 |= 0x80uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v59;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 194) = v58;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 8) == 0)
  {
LABEL_50:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  v60 = *(_QWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_QWORD *)(result + 32) = v60;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x10000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  v61 = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 120) = v61;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x10000) == 0)
  {
LABEL_52:
    if ((v2 & 0x100) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  v62 = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 88) = v62;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x100) == 0)
  {
LABEL_53:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  v63 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 56) = v63;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v2 & 0x1000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  v64 = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 136) = v64;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x1000000000000000) == 0)
  {
LABEL_55:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  v65 = *(_BYTE *)(a2 + 183);
  v3 |= 0x1000000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 183) = v65;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  v66 = *(_BYTE *)(a2 + 159);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 159) = v66;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x1000) == 0)
  {
LABEL_57:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  v67 = *(_BYTE *)(a2 + 199);
  v68 = v4 >> 16;
  v4 |= 0x1000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v68;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 199) = v67;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v2 & 0x10000000000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  v69 = *(_BYTE *)(a2 + 167);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 167) = v69;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x10000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x20) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  v70 = *(_BYTE *)(a2 + 175);
  v3 |= 0x10000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 175) = v70;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x20) == 0)
  {
LABEL_60:
    if ((v2 & 0x100000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  v71 = *(_BYTE *)(a2 + 192);
  v72 = v4 >> 16;
  v4 |= 0x20uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v72;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 192) = v71;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x100000) == 0)
  {
LABEL_61:
    if ((v2 & 0x1000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  v73 = *(_DWORD *)(a2 + 104);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 104) = v73;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x1000) == 0)
  {
LABEL_62:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  v74 = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 72) = v74;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_63:
    if ((v5 & 1) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  v75 = *(_DWORD *)(a2 + 152);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 152) = v75;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 1) == 0)
  {
LABEL_64:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  v76 = *(_BYTE *)(a2 + 187);
  v77 = v4 >> 16;
  v4 |= 1uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v77;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 187) = v76;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x10000) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  v78 = *(_BYTE *)(a2 + 163);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 163) = v78;
  v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  v79 = *(_BYTE *)(a2 + 203);
  *(_WORD *)(result + 212) = v4;
  v4 |= 0x10000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 203) = v79;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_67:
    if ((v2 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  v80 = *(_BYTE *)(a2 + 171);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 171) = v80;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  v81 = *(_BYTE *)(a2 + 179);
  v3 |= 0x100000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 179) = v81;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_69:
    if ((v2 & 0x2000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  v82 = *(_BYTE *)(a2 + 195);
  v83 = v4 >> 16;
  v4 |= 0x100uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v83;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 195) = v82;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x2000) == 0)
  {
LABEL_70:
    if ((v2 & 0x20) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  v84 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 76) = v84;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x20) == 0)
  {
LABEL_71:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  v85 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 44) = v85;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_72:
    if ((v2 & 0x200000000000000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  v86 = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 124) = v86;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x200000000000000) == 0)
  {
LABEL_73:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  v87 = *(_BYTE *)(a2 + 180);
  v3 |= 0x200000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 180) = v87;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x200) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  v88 = *(_BYTE *)(a2 + 156);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 156) = v88;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_75:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  v89 = *(_BYTE *)(a2 + 196);
  v90 = v4 >> 16;
  v4 |= 0x200uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v90;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 196) = v89;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_76:
    if ((v2 & 0x2000000000000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  v91 = *(_BYTE *)(a2 + 164);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 164) = v91;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x2000000000000) == 0)
  {
LABEL_77:
    if ((v2 & 0x20000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  v92 = *(_BYTE *)(a2 + 172);
  v3 |= 0x2000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 172) = v92;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x20000) == 0)
  {
LABEL_78:
    if ((v2 & 0x200) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  v93 = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 92) = v93;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x200) == 0)
  {
LABEL_79:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  v94 = *(_DWORD *)(a2 + 60);
  v3 |= 0x200uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 60) = v94;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_80:
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  v95 = *(_DWORD *)(a2 + 140);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 140) = v95;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x2000000000000000) == 0)
  {
LABEL_81:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  v96 = *(_BYTE *)(a2 + 184);
  v3 |= 0x2000000000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 184) = v96;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  v97 = *(_BYTE *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 160) = v97;
  v2 = *(_QWORD *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x2000) == 0)
  {
LABEL_83:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  v98 = *(_BYTE *)(a2 + 200);
  v99 = v4 >> 16;
  LODWORD(v4) = v4 | 0x2000;
  *(_QWORD *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v99;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 200) = v98;
  v2 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_84:
    if ((v2 & 0x20000000000000) == 0)
      return result;
LABEL_164:
    v101 = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(result + 204) = v3 | 0x20000000000000;
    *(_WORD *)(result + 212) = v4;
    *(_BYTE *)(result + 214) = BYTE2(v4);
    *(_BYTE *)(result + 176) = v101;
    return result;
  }
LABEL_163:
  v100 = *(_BYTE *)(a2 + 168);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 168) = v100;
  if ((*(_QWORD *)(a2 + 204) & 0x20000000000000) != 0)
    goto LABEL_164;
  return result;
}

uint64_t sub_101585F74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  int v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000000) != 0)
  {
    PB::TextFormatter::format(this, "chaosMet", *(_BYTE *)(a1 + 156));
    v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    v5 = *(_QWORD *)(a1 + 204);
    if ((v5 & 0x400000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  if ((v5 & 0x400000000) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "chaosMet0", *(_BYTE *)(a1 + 157));
    v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    v5 = *(_QWORD *)(a1 + 204);
  }
LABEL_6:
  if ((v5 & 0x800000000) != 0)
  {
    PB::TextFormatter::format(this, "chaosMet1", *(_BYTE *)(a1 + 158));
    v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    v5 = *(_QWORD *)(a1 + 204);
    if ((v5 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x2000000000) == 0)
        goto LABEL_9;
      goto LABEL_89;
    }
  }
  else if ((v5 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "chaosMet2", *(_BYTE *)(a1 + 159));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "chaosMetRollover", *(_BYTE *)(a1 + 160));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_11;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "chaosMetRollover0", *(_BYTE *)(a1 + 161));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "chaosMetRollover1", *(_BYTE *)(a1 + 162));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "chaosMetRollover2", *(_BYTE *)(a1 + 163));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_14;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "chaosOrSaturationMet", *(_BYTE *)(a1 + 164));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_15;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "chaosOrSaturationMet0", *(_BYTE *)(a1 + 165));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "chaosOrSaturationMet1", *(_BYTE *)(a1 + 166));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_17;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "chaosOrSaturationMet2", *(_BYTE *)(a1 + 167));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_18;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover", *(_BYTE *)(a1 + 168));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_19;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover0", *(_BYTE *)(a1 + 169));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_20;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover1", *(_BYTE *)(a1 + 170));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_21;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover2", *(_BYTE *)(a1 + 171));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_22;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet", *(_BYTE *)(a1 + 172));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_23;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet0", *(_BYTE *)(a1 + 173));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_24;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet1", *(_BYTE *)(a1 + 174));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet2", *(_BYTE *)(a1 + 175));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover", *(_BYTE *)(a1 + 176));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_27;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover0", *(_BYTE *)(a1 + 177));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_28;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover1", *(_BYTE *)(a1 + 178));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_29;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover2", *(_BYTE *)(a1 + 179));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_30;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "energyMet", *(_BYTE *)(a1 + 180));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "energyMet0", *(_BYTE *)(a1 + 181));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "energyMet1", *(_BYTE *)(a1 + 182));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_33;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "energyMet2", *(_BYTE *)(a1 + 183));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "energyMetRollover", *(_BYTE *)(a1 + 184));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_35;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "energyMetRollover0", *(_BYTE *)(a1 + 185));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 1) == 0)
      goto LABEL_36;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "energyMetRollover1", *(_BYTE *)(a1 + 186));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 1) == 0)
  {
LABEL_36:
    if ((v5 & 0x10) == 0)
      goto LABEL_37;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "energyMetRollover2", *(_BYTE *)(a1 + 187));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_37:
    if ((v5 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "epochNumber", *(_DWORD *)(a1 + 40));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20) == 0)
  {
LABEL_38:
    if ((v5 & 0x40) == 0)
      goto LABEL_39;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "maxChaos", *(float *)(a1 + 44));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_39:
    if ((v5 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "maxChaos0", *(float *)(a1 + 48));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_40:
    if ((v5 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "maxChaos1", *(float *)(a1 + 52));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_41:
    if ((v5 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "maxChaos2", *(float *)(a1 + 56));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_42:
    if ((v5 & 0x400) == 0)
      goto LABEL_43;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "maxChaosRollover", *(float *)(a1 + 60));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400) == 0)
  {
LABEL_43:
    if ((v5 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "maxChaosRollover0", *(float *)(a1 + 64));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0)
      goto LABEL_45;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "maxChaosRollover1", *(float *)(a1 + 68));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "maxChaosRollover2", *(float *)(a1 + 72));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000) == 0)
      goto LABEL_47;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "maxEnergy", *(float *)(a1 + 76));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "maxEnergy0", *(float *)(a1 + 80));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000) == 0)
      goto LABEL_49;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "maxEnergy1", *(float *)(a1 + 84));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000) == 0)
      goto LABEL_50;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "maxEnergy2", *(float *)(a1 + 88));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000) == 0)
  {
LABEL_50:
    if ((v5 & 0x40000) == 0)
      goto LABEL_51;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "maxEnergyRollover", *(float *)(a1 + 92));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000) == 0)
  {
LABEL_51:
    if ((v5 & 0x80000) == 0)
      goto LABEL_52;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "maxEnergyRollover0", *(float *)(a1 + 96));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000) == 0)
  {
LABEL_52:
    if ((v5 & 0x100000) == 0)
      goto LABEL_53;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "maxEnergyRollover1", *(float *)(a1 + 100));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000) == 0)
  {
LABEL_53:
    if ((v5 & 0x200000) == 0)
      goto LABEL_54;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "maxEnergyRollover2", *(float *)(a1 + 104));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000) == 0)
  {
LABEL_54:
    if ((v5 & 0x400000) == 0)
      goto LABEL_55;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 108));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400000) == 0)
  {
LABEL_55:
    if ((v5 & 0x800000) == 0)
      goto LABEL_56;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "maxRMS0", *(float *)(a1 + 112));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_57;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "maxRMS1", *(float *)(a1 + 116));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_57:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_58;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "maxRMS2", *(float *)(a1 + 120));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_59;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "maxSaturation", *(float *)(a1 + 124));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_60;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "maxSaturation0", *(float *)(a1 + 128));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_61;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxSaturation1", *(float *)(a1 + 132));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_62;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxSaturation2", *(float *)(a1 + 136));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_63;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxSaturationRollover", *(float *)(a1 + 140));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxSaturationRollover0", *(float *)(a1 + 144));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_65;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "maxSaturationRollover1", *(float *)(a1 + 148));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_65:
    if ((v6 & 2) == 0)
      goto LABEL_66;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "maxSaturationRollover2", *(float *)(a1 + 152));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 2) == 0)
  {
LABEL_66:
    if ((v6 & 4) == 0)
      goto LABEL_67;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "passThru", *(_BYTE *)(a1 + 188));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 4) == 0)
  {
LABEL_67:
    if ((v6 & 8) == 0)
      goto LABEL_68;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "passThruRollover", *(_BYTE *)(a1 + 189));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 8) == 0)
  {
LABEL_68:
    if ((v6 & 0x10) == 0)
      goto LABEL_69;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "passthru0", *(_BYTE *)(a1 + 190));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x10) == 0)
  {
LABEL_69:
    if ((v6 & 0x20) == 0)
      goto LABEL_70;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "passthru1", *(_BYTE *)(a1 + 191));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x20) == 0)
  {
LABEL_70:
    if ((v6 & 0x40) == 0)
      goto LABEL_71;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "passthru2", *(_BYTE *)(a1 + 192));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x40) == 0)
  {
LABEL_71:
    if ((v6 & 0x80) == 0)
      goto LABEL_72;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "passthruRollover0", *(_BYTE *)(a1 + 193));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x80) == 0)
  {
LABEL_72:
    if ((v6 & 0x100) == 0)
      goto LABEL_73;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "passthruRollover1", *(_BYTE *)(a1 + 194));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x100) == 0)
  {
LABEL_73:
    if ((v6 & 0x200) == 0)
      goto LABEL_74;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "passthruRollover2", *(_BYTE *)(a1 + 195));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x200) == 0)
  {
LABEL_74:
    if ((v6 & 0x400) == 0)
      goto LABEL_75;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "saturationMet", *(_BYTE *)(a1 + 196));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x400) == 0)
  {
LABEL_75:
    if ((v6 & 0x800) == 0)
      goto LABEL_76;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "saturationMet0", *(_BYTE *)(a1 + 197));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x800) == 0)
  {
LABEL_76:
    if ((v6 & 0x1000) == 0)
      goto LABEL_77;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(this, "saturationMet1", *(_BYTE *)(a1 + 198));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x1000) == 0)
  {
LABEL_77:
    if ((v6 & 0x2000) == 0)
      goto LABEL_78;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(this, "saturationMet2", *(_BYTE *)(a1 + 199));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x2000) == 0)
  {
LABEL_78:
    if ((v6 & 0x4000) == 0)
      goto LABEL_79;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(this, "saturationMetRollover", *(_BYTE *)(a1 + 200));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x4000) == 0)
  {
LABEL_79:
    if ((v6 & 0x8000) == 0)
      goto LABEL_80;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(this, "saturationMetRollover0", *(_BYTE *)(a1 + 201));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x8000) == 0)
  {
LABEL_80:
    if ((v6 & 0x10000) == 0)
      goto LABEL_81;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(this, "saturationMetRollover1", *(_BYTE *)(a1 + 202));
  v5 = *(_QWORD *)(a1 + 204);
  if (((*(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16)) & 0x10000) == 0)
  {
LABEL_81:
    if ((v5 & 1) == 0)
      goto LABEL_82;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(this, "saturationMetRollover2", *(_BYTE *)(a1 + 203));
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 1) == 0)
  {
LABEL_82:
    if ((v5 & 2) == 0)
      goto LABEL_83;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 2) == 0)
  {
LABEL_83:
    if ((v5 & 4) == 0)
      goto LABEL_84;
LABEL_164:
    PB::TextFormatter::format(this, "timestamp1", *(_QWORD *)(a1 + 24));
    if ((*(_QWORD *)(a1 + 204) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_85;
  }
LABEL_163:
  PB::TextFormatter::format(this, "timestamp0", *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 4) != 0)
    goto LABEL_164;
LABEL_84:
  if ((v5 & 8) != 0)
LABEL_85:
    PB::TextFormatter::format(this, "timestamp2", *(_QWORD *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101586D60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  BOOL v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  BOOL v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  BOOL v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  BOOL v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  BOOL v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  BOOL v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  BOOL v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  BOOL v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  BOOL v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  BOOL v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  BOOL v181;
  uint64_t result;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  BOOL v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  BOOL v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  BOOL v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  BOOL v203;
  unint64_t v204;
  unint64_t v205;
  int v206;
  BOOL v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  BOOL v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  int v222;
  BOOL v223;
  char v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  BOOL v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  BOOL v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  BOOL v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  BOOL v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  BOOL v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  BOOL v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  BOOL v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  char v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  BOOL v287;
  unint64_t v288;
  unint64_t v289;
  int v290;
  BOOL v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  BOOL v295;
  char v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  BOOL v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 204;
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 1102)
      {
        switch((int)v21)
        {
          case 1103:
            *(_QWORD *)v8 |= 4uLL;
            v46 = *((_QWORD *)this + 1);
            v47 = *((_QWORD *)this + 2);
            v48 = *(_QWORD *)this;
            if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
            {
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v52 = v46 + 1;
                *((_QWORD *)this + 1) = v46 + 1;
                v53 = *(_BYTE *)(v48 + v46);
                v51 |= (unint64_t)(v53 & 0x7F) << v49;
                if ((v53 & 0x80) == 0)
                  goto LABEL_398;
                v49 += 7;
                v46 = v52;
                v15 = v50++ > 8;
              }
              while (!v15);
LABEL_272:
              v51 = 0;
              goto LABEL_398;
            }
            v313 = 0;
            v314 = 0;
            v51 = 0;
            if (v47 <= v46)
              v47 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v47 == v46)
              {
                v51 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v315 = v46 + 1;
                v316 = *(_BYTE *)(v48 + v46);
                *((_QWORD *)this + 1) = v315;
                v51 |= (unint64_t)(v316 & 0x7F) << v313;
                if (v316 < 0)
                {
                  v313 += 7;
                  v46 = v315;
                  v15 = v314++ > 8;
                  if (v15)
                    goto LABEL_272;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
              }
              break;
            }
LABEL_398:
            *(_QWORD *)(a1 + 24) = v51;
            goto LABEL_378;
          case 1104:
            *(_QWORD *)v8 |= 0x800000uLL;
            v242 = *((_QWORD *)this + 1);
            if (v242 > 0xFFFFFFFFFFFFFFFBLL || v242 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v242);
            goto LABEL_377;
          case 1105:
            *(_QWORD *)v8 |= 0x8000uLL;
            v243 = *((_QWORD *)this + 1);
            if (v243 > 0xFFFFFFFFFFFFFFFBLL || v243 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v243);
            goto LABEL_377;
          case 1106:
            *(_QWORD *)v8 |= 0x80uLL;
            v244 = *((_QWORD *)this + 1);
            if (v244 > 0xFFFFFFFFFFFFFFFBLL || v244 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v244);
            goto LABEL_377;
          case 1107:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v245 = *((_QWORD *)this + 1);
            if (v245 > 0xFFFFFFFFFFFFFFFBLL || v245 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v245);
            goto LABEL_377;
          case 1108:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v246 = *((_QWORD *)this + 1);
            if (v246 >= *((_QWORD *)this + 2))
            {
              v249 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v247 = v246 + 1;
              v248 = *(unsigned __int8 *)(*(_QWORD *)this + v246);
              *((_QWORD *)this + 1) = v247;
              v249 = v248 != 0;
            }
            *(_BYTE *)(a1 + 182) = v249;
            goto LABEL_378;
          case 1109:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v250 = *((_QWORD *)this + 1);
            if (v250 >= *((_QWORD *)this + 2))
            {
              v253 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v251 = v250 + 1;
              v252 = *(unsigned __int8 *)(*(_QWORD *)this + v250);
              *((_QWORD *)this + 1) = v251;
              v253 = v252 != 0;
            }
            *(_BYTE *)(a1 + 158) = v253;
            goto LABEL_378;
          case 1110:
            v254 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x800u;
            *(_BYTE *)(v8 + 10) = v254;
            v255 = *((_QWORD *)this + 1);
            if (v255 >= *((_QWORD *)this + 2))
            {
              v258 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v256 = v255 + 1;
              v257 = *(unsigned __int8 *)(*(_QWORD *)this + v255);
              *((_QWORD *)this + 1) = v256;
              v258 = v257 != 0;
            }
            *(_BYTE *)(a1 + 198) = v258;
            goto LABEL_378;
          case 1111:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v259 = *((_QWORD *)this + 1);
            if (v259 >= *((_QWORD *)this + 2))
            {
              v262 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v260 = v259 + 1;
              v261 = *(unsigned __int8 *)(*(_QWORD *)this + v259);
              *((_QWORD *)this + 1) = v260;
              v262 = v261 != 0;
            }
            *(_BYTE *)(a1 + 166) = v262;
            goto LABEL_378;
          case 1112:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v263 = *((_QWORD *)this + 1);
            if (v263 >= *((_QWORD *)this + 2))
            {
              v266 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v264 = v263 + 1;
              v265 = *(unsigned __int8 *)(*(_QWORD *)this + v263);
              *((_QWORD *)this + 1) = v264;
              v266 = v265 != 0;
            }
            *(_BYTE *)(a1 + 174) = v266;
            goto LABEL_378;
          case 1113:
            v267 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x10u;
            *(_BYTE *)(v8 + 10) = v267;
            v268 = *((_QWORD *)this + 1);
            if (v268 >= *((_QWORD *)this + 2))
            {
              v271 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v269 = v268 + 1;
              v270 = *(unsigned __int8 *)(*(_QWORD *)this + v268);
              *((_QWORD *)this + 1) = v269;
              v271 = v270 != 0;
            }
            *(_BYTE *)(a1 + 191) = v271;
            goto LABEL_378;
          case 1114:
            *(_QWORD *)v8 |= 0x80000uLL;
            v272 = *((_QWORD *)this + 1);
            if (v272 > 0xFFFFFFFFFFFFFFFBLL || v272 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v272);
            goto LABEL_377;
          case 1115:
            *(_QWORD *)v8 |= 0x800uLL;
            v273 = *((_QWORD *)this + 1);
            if (v273 > 0xFFFFFFFFFFFFFFFBLL || v273 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v273);
            goto LABEL_377;
          case 1116:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v274 = *((_QWORD *)this + 1);
            if (v274 <= 0xFFFFFFFFFFFFFFFBLL && v274 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v274);
LABEL_377:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_232:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_378;
          case 1117:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v275 = *((_QWORD *)this + 1);
            if (v275 >= *((_QWORD *)this + 2))
            {
              v278 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v276 = v275 + 1;
              v277 = *(unsigned __int8 *)(*(_QWORD *)this + v275);
              *((_QWORD *)this + 1) = v276;
              v278 = v277 != 0;
            }
            *(_BYTE *)(a1 + 186) = v278;
            goto LABEL_378;
          case 1118:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v279 = *((_QWORD *)this + 1);
            if (v279 >= *((_QWORD *)this + 2))
            {
              v282 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v280 = v279 + 1;
              v281 = *(unsigned __int8 *)(*(_QWORD *)this + v279);
              *((_QWORD *)this + 1) = v280;
              v282 = v281 != 0;
            }
            *(_BYTE *)(a1 + 162) = v282;
            goto LABEL_378;
          case 1119:
            v283 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x8000u;
            *(_BYTE *)(v8 + 10) = v283;
            v284 = *((_QWORD *)this + 1);
            if (v284 >= *((_QWORD *)this + 2))
            {
              v287 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v285 = v284 + 1;
              v286 = *(unsigned __int8 *)(*(_QWORD *)this + v284);
              *((_QWORD *)this + 1) = v285;
              v287 = v286 != 0;
            }
            *(_BYTE *)(a1 + 202) = v287;
            goto LABEL_378;
          case 1120:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v288 = *((_QWORD *)this + 1);
            if (v288 >= *((_QWORD *)this + 2))
            {
              v291 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v289 = v288 + 1;
              v290 = *(unsigned __int8 *)(*(_QWORD *)this + v288);
              *((_QWORD *)this + 1) = v289;
              v291 = v290 != 0;
            }
            *(_BYTE *)(a1 + 170) = v291;
            goto LABEL_378;
          case 1121:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v292 = *((_QWORD *)this + 1);
            if (v292 >= *((_QWORD *)this + 2))
            {
              v295 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v293 = v292 + 1;
              v294 = *(unsigned __int8 *)(*(_QWORD *)this + v292);
              *((_QWORD *)this + 1) = v293;
              v295 = v294 != 0;
            }
            *(_BYTE *)(a1 + 178) = v295;
            goto LABEL_378;
          case 1122:
            v296 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x80u;
            *(_BYTE *)(v8 + 10) = v296;
            v297 = *((_QWORD *)this + 1);
            if (v297 >= *((_QWORD *)this + 2))
            {
              v300 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v298 = v297 + 1;
              v299 = *(unsigned __int8 *)(*(_QWORD *)this + v297);
              *((_QWORD *)this + 1) = v298;
              v300 = v299 != 0;
            }
            *(_BYTE *)(a1 + 194) = v300;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1203:
                *(_QWORD *)v8 |= 8uLL;
                v30 = *((_QWORD *)this + 1);
                v31 = *((_QWORD *)this + 2);
                v32 = *(_QWORD *)this;
                if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
                {
                  v33 = 0;
                  v34 = 0;
                  v35 = 0;
                  do
                  {
                    v36 = v30 + 1;
                    *((_QWORD *)this + 1) = v30 + 1;
                    v37 = *(_BYTE *)(v32 + v30);
                    v35 |= (unint64_t)(v37 & 0x7F) << v33;
                    if ((v37 & 0x80) == 0)
                      goto LABEL_390;
                    v33 += 7;
                    v30 = v36;
                    v15 = v34++ > 8;
                  }
                  while (!v15);
LABEL_258:
                  v35 = 0;
                  goto LABEL_390;
                }
                v305 = 0;
                v306 = 0;
                v35 = 0;
                if (v31 <= v30)
                  v31 = *((_QWORD *)this + 1);
                break;
              case 1204:
                *(_QWORD *)v8 |= 0x1000000uLL;
                v121 = *((_QWORD *)this + 1);
                if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v121);
                goto LABEL_377;
              case 1205:
                *(_QWORD *)v8 |= 0x10000uLL;
                v122 = *((_QWORD *)this + 1);
                if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v122);
                goto LABEL_377;
              case 1206:
                *(_QWORD *)v8 |= 0x100uLL;
                v123 = *((_QWORD *)this + 1);
                if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v123);
                goto LABEL_377;
              case 1207:
                *(_QWORD *)v8 |= 0x10000000uLL;
                v124 = *((_QWORD *)this + 1);
                if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v124);
                goto LABEL_377;
              case 1208:
                *(_QWORD *)v8 |= 0x1000000000000000uLL;
                v125 = *((_QWORD *)this + 1);
                if (v125 >= *((_QWORD *)this + 2))
                {
                  v128 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v126 = v125 + 1;
                  v127 = *(unsigned __int8 *)(*(_QWORD *)this + v125);
                  *((_QWORD *)this + 1) = v126;
                  v128 = v127 != 0;
                }
                *(_BYTE *)(a1 + 183) = v128;
                goto LABEL_378;
              case 1209:
                *(_QWORD *)v8 |= 0x1000000000uLL;
                v129 = *((_QWORD *)this + 1);
                if (v129 >= *((_QWORD *)this + 2))
                {
                  v132 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v130 = v129 + 1;
                  v131 = *(unsigned __int8 *)(*(_QWORD *)this + v129);
                  *((_QWORD *)this + 1) = v130;
                  v132 = v131 != 0;
                }
                *(_BYTE *)(a1 + 159) = v132;
                goto LABEL_378;
              case 1210:
                v133 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x1000u;
                *(_BYTE *)(v8 + 10) = v133;
                v134 = *((_QWORD *)this + 1);
                if (v134 >= *((_QWORD *)this + 2))
                {
                  v137 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v135 = v134 + 1;
                  v136 = *(unsigned __int8 *)(*(_QWORD *)this + v134);
                  *((_QWORD *)this + 1) = v135;
                  v137 = v136 != 0;
                }
                *(_BYTE *)(a1 + 199) = v137;
                goto LABEL_378;
              case 1211:
                *(_QWORD *)v8 |= 0x100000000000uLL;
                v138 = *((_QWORD *)this + 1);
                if (v138 >= *((_QWORD *)this + 2))
                {
                  v141 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v139 = v138 + 1;
                  v140 = *(unsigned __int8 *)(*(_QWORD *)this + v138);
                  *((_QWORD *)this + 1) = v139;
                  v141 = v140 != 0;
                }
                *(_BYTE *)(a1 + 167) = v141;
                goto LABEL_378;
              case 1212:
                *(_QWORD *)v8 |= 0x10000000000000uLL;
                v142 = *((_QWORD *)this + 1);
                if (v142 >= *((_QWORD *)this + 2))
                {
                  v145 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v143 = v142 + 1;
                  v144 = *(unsigned __int8 *)(*(_QWORD *)this + v142);
                  *((_QWORD *)this + 1) = v143;
                  v145 = v144 != 0;
                }
                *(_BYTE *)(a1 + 175) = v145;
                goto LABEL_378;
              case 1213:
                v146 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x20u;
                *(_BYTE *)(v8 + 10) = v146;
                v147 = *((_QWORD *)this + 1);
                if (v147 >= *((_QWORD *)this + 2))
                {
                  v150 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v148 = v147 + 1;
                  v149 = *(unsigned __int8 *)(*(_QWORD *)this + v147);
                  *((_QWORD *)this + 1) = v148;
                  v150 = v149 != 0;
                }
                *(_BYTE *)(a1 + 192) = v150;
                goto LABEL_378;
              case 1214:
                *(_QWORD *)v8 |= 0x100000uLL;
                v151 = *((_QWORD *)this + 1);
                if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v151);
                goto LABEL_377;
              case 1215:
                *(_QWORD *)v8 |= 0x1000uLL;
                v152 = *((_QWORD *)this + 1);
                if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v152);
                goto LABEL_377;
              case 1216:
                *(_QWORD *)v8 |= (unint64_t)&_mh_execute_header;
                v153 = *((_QWORD *)this + 1);
                if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v153);
                goto LABEL_377;
              case 1217:
                v154 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 1u;
                *(_BYTE *)(v8 + 10) = v154;
                v155 = *((_QWORD *)this + 1);
                if (v155 >= *((_QWORD *)this + 2))
                {
                  v158 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v156 = v155 + 1;
                  v157 = *(unsigned __int8 *)(*(_QWORD *)this + v155);
                  *((_QWORD *)this + 1) = v156;
                  v158 = v157 != 0;
                }
                *(_BYTE *)(a1 + 187) = v158;
                goto LABEL_378;
              case 1218:
                *(_QWORD *)v8 |= 0x10000000000uLL;
                v159 = *((_QWORD *)this + 1);
                if (v159 >= *((_QWORD *)this + 2))
                {
                  v162 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v160 = v159 + 1;
                  v161 = *(unsigned __int8 *)(*(_QWORD *)this + v159);
                  *((_QWORD *)this + 1) = v160;
                  v162 = v161 != 0;
                }
                *(_BYTE *)(a1 + 163) = v162;
                goto LABEL_378;
              case 1219:
                v163 = *(unsigned __int16 *)(v8 + 8);
                v164 = (v163 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x10000u) >> 16;
                *(_WORD *)(v8 + 8) = v163;
                *(_BYTE *)(v8 + 10) = v164;
                v165 = *((_QWORD *)this + 1);
                if (v165 >= *((_QWORD *)this + 2))
                {
                  v168 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v166 = v165 + 1;
                  v167 = *(unsigned __int8 *)(*(_QWORD *)this + v165);
                  *((_QWORD *)this + 1) = v166;
                  v168 = v167 != 0;
                }
                *(_BYTE *)(a1 + 203) = v168;
                goto LABEL_378;
              case 1220:
                *(_QWORD *)v8 |= 0x1000000000000uLL;
                v169 = *((_QWORD *)this + 1);
                if (v169 >= *((_QWORD *)this + 2))
                {
                  v172 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v170 = v169 + 1;
                  v171 = *(unsigned __int8 *)(*(_QWORD *)this + v169);
                  *((_QWORD *)this + 1) = v170;
                  v172 = v171 != 0;
                }
                *(_BYTE *)(a1 + 171) = v172;
                goto LABEL_378;
              case 1221:
                *(_QWORD *)v8 |= 0x100000000000000uLL;
                v173 = *((_QWORD *)this + 1);
                if (v173 >= *((_QWORD *)this + 2))
                {
                  v176 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v174 = v173 + 1;
                  v175 = *(unsigned __int8 *)(*(_QWORD *)this + v173);
                  *((_QWORD *)this + 1) = v174;
                  v176 = v175 != 0;
                }
                *(_BYTE *)(a1 + 179) = v176;
                goto LABEL_378;
              case 1222:
                v177 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x100u;
                *(_BYTE *)(v8 + 10) = v177;
                v178 = *((_QWORD *)this + 1);
                if (v178 >= *((_QWORD *)this + 2))
                {
                  v181 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v179 = v178 + 1;
                  v180 = *(unsigned __int8 *)(*(_QWORD *)this + v178);
                  *((_QWORD *)this + 1) = v179;
                  v181 = v180 != 0;
                }
                *(_BYTE *)(a1 + 195) = v181;
                goto LABEL_378;
              default:
LABEL_153:
                result = PB::Reader::skip(this, v21, v12 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                goto LABEL_378;
            }
            break;
        }
        while (1)
        {
          if (v31 == v30)
          {
            v35 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_390;
          }
          v307 = v30 + 1;
          v308 = *(_BYTE *)(v32 + v30);
          *((_QWORD *)this + 1) = v307;
          v35 |= (unint64_t)(v308 & 0x7F) << v305;
          if ((v308 & 0x80) == 0)
            break;
          v305 += 7;
          v30 = v307;
          v15 = v306++ > 8;
          if (v15)
            goto LABEL_258;
        }
        if (*((_BYTE *)this + 24))
          v35 = 0;
LABEL_390:
        *(_QWORD *)(a1 + 32) = v35;
      }
      else
      {
        switch((int)v21)
        {
          case 'e':
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)this + 1);
            v23 = *((_QWORD *)this + 2);
            v24 = *(_QWORD *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)this + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_386;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_251:
              v27 = 0;
              goto LABEL_386;
            }
            v301 = 0;
            v302 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v303 = v22 + 1;
                v304 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)this + 1) = v303;
                v27 |= (unint64_t)(v304 & 0x7F) << v301;
                if (v304 < 0)
                {
                  v301 += 7;
                  v22 = v303;
                  v15 = v302++ > 8;
                  if (v15)
                    goto LABEL_251;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_386:
            *(_QWORD *)(a1 + 8) = v27;
            goto LABEL_378;
          case 'f':
            *(_QWORD *)v8 |= 0x10uLL;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            v56 = *(_QWORD *)this;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)this + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_402;
                v57 += 7;
                v54 = v60;
                v15 = v58++ > 8;
              }
              while (!v15);
LABEL_279:
              LODWORD(v59) = 0;
              goto LABEL_402;
            }
            v317 = 0;
            v318 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v55 == v54)
              {
                LODWORD(v59) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v319 = v54 + 1;
                v320 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)this + 1) = v319;
                v59 |= (unint64_t)(v320 & 0x7F) << v317;
                if (v320 < 0)
                {
                  v317 += 7;
                  v54 = v319;
                  v15 = v318++ > 8;
                  if (v15)
                    goto LABEL_279;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v59) = 0;
              }
              break;
            }
LABEL_402:
            *(_DWORD *)(a1 + 40) = v59;
            goto LABEL_378;
          case 'g':
            v62 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 2u;
            *(_BYTE *)(v8 + 10) = v62;
            v63 = *((_QWORD *)this + 1);
            if (v63 >= *((_QWORD *)this + 2))
            {
              v66 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v64 = v63 + 1;
              v65 = *(unsigned __int8 *)(*(_QWORD *)this + v63);
              *((_QWORD *)this + 1) = v64;
              v66 = v65 != 0;
            }
            *(_BYTE *)(a1 + 188) = v66;
            goto LABEL_378;
          case 'h':
            *(_QWORD *)v8 |= 0x200000uLL;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v67);
            goto LABEL_377;
          case 'i':
            *(_QWORD *)v8 |= 0x2000uLL;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_377;
          case 'j':
            *(_QWORD *)v8 |= 0x20uLL;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_377;
          case 'k':
            *(_QWORD *)v8 |= 0x2000000uLL;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_377;
          case 'l':
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v71 = *((_QWORD *)this + 1);
            if (v71 >= *((_QWORD *)this + 2))
            {
              v74 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v72 = v71 + 1;
              v73 = *(unsigned __int8 *)(*(_QWORD *)this + v71);
              *((_QWORD *)this + 1) = v72;
              v74 = v73 != 0;
            }
            *(_BYTE *)(a1 + 180) = v74;
            goto LABEL_378;
          case 'm':
            *(_QWORD *)v8 |= 0x200000000uLL;
            v75 = *((_QWORD *)this + 1);
            if (v75 >= *((_QWORD *)this + 2))
            {
              v78 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v76 = v75 + 1;
              v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
              *((_QWORD *)this + 1) = v76;
              v78 = v77 != 0;
            }
            *(_BYTE *)(a1 + 156) = v78;
            goto LABEL_378;
          case 'n':
            v79 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x200u;
            *(_BYTE *)(v8 + 10) = v79;
            v80 = *((_QWORD *)this + 1);
            if (v80 >= *((_QWORD *)this + 2))
            {
              v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v81 = v80 + 1;
              v82 = *(unsigned __int8 *)(*(_QWORD *)this + v80);
              *((_QWORD *)this + 1) = v81;
              v83 = v82 != 0;
            }
            *(_BYTE *)(a1 + 196) = v83;
            goto LABEL_378;
          case 'o':
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 >= *((_QWORD *)this + 2))
            {
              v87 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v85 = v84 + 1;
              v86 = *(unsigned __int8 *)(*(_QWORD *)this + v84);
              *((_QWORD *)this + 1) = v85;
              v87 = v86 != 0;
            }
            *(_BYTE *)(a1 + 164) = v87;
            goto LABEL_378;
          case 'p':
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v88 = *((_QWORD *)this + 1);
            if (v88 >= *((_QWORD *)this + 2))
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
              *((_QWORD *)this + 1) = v89;
              v91 = v90 != 0;
            }
            *(_BYTE *)(a1 + 172) = v91;
            goto LABEL_378;
          case 'q':
            v92 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 4u;
            *(_BYTE *)(v8 + 10) = v92;
            v93 = *((_QWORD *)this + 1);
            if (v93 >= *((_QWORD *)this + 2))
            {
              v96 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v94 = v93 + 1;
              v95 = *(unsigned __int8 *)(*(_QWORD *)this + v93);
              *((_QWORD *)this + 1) = v94;
              v96 = v95 != 0;
            }
            *(_BYTE *)(a1 + 189) = v96;
            goto LABEL_378;
          case 'r':
            *(_QWORD *)v8 |= 0x20000uLL;
            v97 = *((_QWORD *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v97);
            goto LABEL_377;
          case 's':
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v98);
            goto LABEL_377;
          case 't':
            *(_QWORD *)v8 |= 0x20000000uLL;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_377;
          case 'u':
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 >= *((_QWORD *)this + 2))
            {
              v103 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v101 = v100 + 1;
              v102 = *(unsigned __int8 *)(*(_QWORD *)this + v100);
              *((_QWORD *)this + 1) = v101;
              v103 = v102 != 0;
            }
            *(_BYTE *)(a1 + 184) = v103;
            goto LABEL_378;
          case 'v':
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v104 = *((_QWORD *)this + 1);
            if (v104 >= *((_QWORD *)this + 2))
            {
              v107 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v105 = v104 + 1;
              v106 = *(unsigned __int8 *)(*(_QWORD *)this + v104);
              *((_QWORD *)this + 1) = v105;
              v107 = v106 != 0;
            }
            *(_BYTE *)(a1 + 160) = v107;
            goto LABEL_378;
          case 'w':
            v108 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x2000u;
            *(_BYTE *)(v8 + 10) = v108;
            v109 = *((_QWORD *)this + 1);
            if (v109 >= *((_QWORD *)this + 2))
            {
              v112 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v110 = v109 + 1;
              v111 = *(unsigned __int8 *)(*(_QWORD *)this + v109);
              *((_QWORD *)this + 1) = v110;
              v112 = v111 != 0;
            }
            *(_BYTE *)(a1 + 200) = v112;
            goto LABEL_378;
          case 'x':
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 >= *((_QWORD *)this + 2))
            {
              v116 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v114 = v113 + 1;
              v115 = *(unsigned __int8 *)(*(_QWORD *)this + v113);
              *((_QWORD *)this + 1) = v114;
              v116 = v115 != 0;
            }
            *(_BYTE *)(a1 + 168) = v116;
            goto LABEL_378;
          case 'y':
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v117 = *((_QWORD *)this + 1);
            if (v117 >= *((_QWORD *)this + 2))
            {
              v120 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v118 = v117 + 1;
              v119 = *(unsigned __int8 *)(*(_QWORD *)this + v117);
              *((_QWORD *)this + 1) = v118;
              v120 = v119 != 0;
            }
            *(_BYTE *)(a1 + 176) = v120;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1003:
                *(_QWORD *)v8 |= 2uLL;
                v38 = *((_QWORD *)this + 1);
                v39 = *((_QWORD *)this + 2);
                v40 = *(_QWORD *)this;
                if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
                {
                  v41 = 0;
                  v42 = 0;
                  v43 = 0;
                  do
                  {
                    v44 = v38 + 1;
                    *((_QWORD *)this + 1) = v38 + 1;
                    v45 = *(_BYTE *)(v40 + v38);
                    v43 |= (unint64_t)(v45 & 0x7F) << v41;
                    if ((v45 & 0x80) == 0)
                      goto LABEL_394;
                    v41 += 7;
                    v38 = v44;
                    v15 = v42++ > 8;
                  }
                  while (!v15);
LABEL_265:
                  v43 = 0;
                  goto LABEL_394;
                }
                v309 = 0;
                v310 = 0;
                v43 = 0;
                if (v39 <= v38)
                  v39 = *((_QWORD *)this + 1);
                break;
              case 1004:
                *(_QWORD *)v8 |= 0x400000uLL;
                v183 = *((_QWORD *)this + 1);
                if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v183);
                goto LABEL_377;
              case 1005:
                *(_QWORD *)v8 |= 0x4000uLL;
                v184 = *((_QWORD *)this + 1);
                if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v184);
                goto LABEL_377;
              case 1006:
                *(_QWORD *)v8 |= 0x40uLL;
                v185 = *((_QWORD *)this + 1);
                if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v185);
                goto LABEL_377;
              case 1007:
                *(_QWORD *)v8 |= 0x4000000uLL;
                v186 = *((_QWORD *)this + 1);
                if (v186 > 0xFFFFFFFFFFFFFFFBLL || v186 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v186);
                goto LABEL_377;
              case 1008:
                *(_QWORD *)v8 |= 0x400000000000000uLL;
                v187 = *((_QWORD *)this + 1);
                if (v187 >= *((_QWORD *)this + 2))
                {
                  v190 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v188 = v187 + 1;
                  v189 = *(unsigned __int8 *)(*(_QWORD *)this + v187);
                  *((_QWORD *)this + 1) = v188;
                  v190 = v189 != 0;
                }
                *(_BYTE *)(a1 + 181) = v190;
                goto LABEL_378;
              case 1009:
                *(_QWORD *)v8 |= 0x400000000uLL;
                v191 = *((_QWORD *)this + 1);
                if (v191 >= *((_QWORD *)this + 2))
                {
                  v194 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v192 = v191 + 1;
                  v193 = *(unsigned __int8 *)(*(_QWORD *)this + v191);
                  *((_QWORD *)this + 1) = v192;
                  v194 = v193 != 0;
                }
                *(_BYTE *)(a1 + 157) = v194;
                goto LABEL_378;
              case 1010:
                v195 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x400u;
                *(_BYTE *)(v8 + 10) = v195;
                v196 = *((_QWORD *)this + 1);
                if (v196 >= *((_QWORD *)this + 2))
                {
                  v199 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v197 = v196 + 1;
                  v198 = *(unsigned __int8 *)(*(_QWORD *)this + v196);
                  *((_QWORD *)this + 1) = v197;
                  v199 = v198 != 0;
                }
                *(_BYTE *)(a1 + 197) = v199;
                goto LABEL_378;
              case 1011:
                *(_QWORD *)v8 |= 0x40000000000uLL;
                v200 = *((_QWORD *)this + 1);
                if (v200 >= *((_QWORD *)this + 2))
                {
                  v203 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v201 = v200 + 1;
                  v202 = *(unsigned __int8 *)(*(_QWORD *)this + v200);
                  *((_QWORD *)this + 1) = v201;
                  v203 = v202 != 0;
                }
                *(_BYTE *)(a1 + 165) = v203;
                goto LABEL_378;
              case 1012:
                *(_QWORD *)v8 |= 0x4000000000000uLL;
                v204 = *((_QWORD *)this + 1);
                if (v204 >= *((_QWORD *)this + 2))
                {
                  v207 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v205 = v204 + 1;
                  v206 = *(unsigned __int8 *)(*(_QWORD *)this + v204);
                  *((_QWORD *)this + 1) = v205;
                  v207 = v206 != 0;
                }
                *(_BYTE *)(a1 + 173) = v207;
                goto LABEL_378;
              case 1013:
                v208 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 8u;
                *(_BYTE *)(v8 + 10) = v208;
                v209 = *((_QWORD *)this + 1);
                if (v209 >= *((_QWORD *)this + 2))
                {
                  v212 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v210 = v209 + 1;
                  v211 = *(unsigned __int8 *)(*(_QWORD *)this + v209);
                  *((_QWORD *)this + 1) = v210;
                  v212 = v211 != 0;
                }
                *(_BYTE *)(a1 + 190) = v212;
                goto LABEL_378;
              case 1014:
                *(_QWORD *)v8 |= 0x40000uLL;
                v213 = *((_QWORD *)this + 1);
                if (v213 > 0xFFFFFFFFFFFFFFFBLL || v213 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v213);
                goto LABEL_377;
              case 1015:
                *(_QWORD *)v8 |= 0x400uLL;
                v214 = *((_QWORD *)this + 1);
                if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v214);
                goto LABEL_377;
              case 1016:
                *(_QWORD *)v8 |= 0x40000000uLL;
                v215 = *((_QWORD *)this + 1);
                if (v215 > 0xFFFFFFFFFFFFFFFBLL || v215 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v215);
                goto LABEL_377;
              case 1017:
                *(_QWORD *)v8 |= 0x4000000000000000uLL;
                v216 = *((_QWORD *)this + 1);
                if (v216 >= *((_QWORD *)this + 2))
                {
                  v219 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v217 = v216 + 1;
                  v218 = *(unsigned __int8 *)(*(_QWORD *)this + v216);
                  *((_QWORD *)this + 1) = v217;
                  v219 = v218 != 0;
                }
                *(_BYTE *)(a1 + 185) = v219;
                goto LABEL_378;
              case 1018:
                *(_QWORD *)v8 |= 0x4000000000uLL;
                v220 = *((_QWORD *)this + 1);
                if (v220 >= *((_QWORD *)this + 2))
                {
                  v223 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v221 = v220 + 1;
                  v222 = *(unsigned __int8 *)(*(_QWORD *)this + v220);
                  *((_QWORD *)this + 1) = v221;
                  v223 = v222 != 0;
                }
                *(_BYTE *)(a1 + 161) = v223;
                goto LABEL_378;
              case 1019:
                v224 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x4000u;
                *(_BYTE *)(v8 + 10) = v224;
                v225 = *((_QWORD *)this + 1);
                if (v225 >= *((_QWORD *)this + 2))
                {
                  v228 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v226 = v225 + 1;
                  v227 = *(unsigned __int8 *)(*(_QWORD *)this + v225);
                  *((_QWORD *)this + 1) = v226;
                  v228 = v227 != 0;
                }
                *(_BYTE *)(a1 + 201) = v228;
                goto LABEL_378;
              case 1020:
                *(_QWORD *)v8 |= 0x400000000000uLL;
                v229 = *((_QWORD *)this + 1);
                if (v229 >= *((_QWORD *)this + 2))
                {
                  v232 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v230 = v229 + 1;
                  v231 = *(unsigned __int8 *)(*(_QWORD *)this + v229);
                  *((_QWORD *)this + 1) = v230;
                  v232 = v231 != 0;
                }
                *(_BYTE *)(a1 + 169) = v232;
                goto LABEL_378;
              case 1021:
                *(_QWORD *)v8 |= 0x40000000000000uLL;
                v233 = *((_QWORD *)this + 1);
                if (v233 >= *((_QWORD *)this + 2))
                {
                  v236 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v234 = v233 + 1;
                  v235 = *(unsigned __int8 *)(*(_QWORD *)this + v233);
                  *((_QWORD *)this + 1) = v234;
                  v236 = v235 != 0;
                }
                *(_BYTE *)(a1 + 177) = v236;
                goto LABEL_378;
              case 1022:
                v237 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x40u;
                *(_BYTE *)(v8 + 10) = v237;
                v238 = *((_QWORD *)this + 1);
                if (v238 >= *((_QWORD *)this + 2))
                {
                  v241 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v239 = v238 + 1;
                  v240 = *(unsigned __int8 *)(*(_QWORD *)this + v238);
                  *((_QWORD *)this + 1) = v239;
                  v241 = v240 != 0;
                }
                *(_BYTE *)(a1 + 193) = v241;
                goto LABEL_378;
              default:
                goto LABEL_153;
            }
            break;
        }
        while (1)
        {
          if (v39 == v38)
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_394;
          }
          v311 = v38 + 1;
          v312 = *(_BYTE *)(v40 + v38);
          *((_QWORD *)this + 1) = v311;
          v43 |= (unint64_t)(v312 & 0x7F) << v309;
          if ((v312 & 0x80) == 0)
            break;
          v309 += 7;
          v38 = v311;
          v15 = v310++ > 8;
          if (v15)
            goto LABEL_265;
        }
        if (*((_BYTE *)this + 24))
          v43 = 0;
LABEL_394:
        *(_QWORD *)(a1 + 16) = v43;
      }
LABEL_378:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101588788(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 204);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 0x65u);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(unsigned __int16 *)(result + 212) | (*(unsigned __int8 *)(result + 214) << 16);
  if ((v4 & 0x10) != 0)
  {
LABEL_5:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x66u);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 188), 0x67u);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x200000) == 0)
    {
LABEL_8:
      if ((v4 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x68u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x69u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x6Au);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0x6Bu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 0x6Cu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 156), 0x6Du);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 196), 0x6Eu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 164), 0x6Fu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 172), 0x70u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 4) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 189), 0x71u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 0x72u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0x73u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x74u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 0x75u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x76u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 200), 0x77u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 168), 0x78u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 176), 0x79u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x3EBu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 0x3ECu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x3EDu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0x3EEu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0x3EFu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x3F0u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 157), 0x3F1u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x400) == 0)
  {
LABEL_33:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 197), 0x3F2u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 165), 0x3F3u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 8) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 173), 0x3F4u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 8) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 190), 0x3F5u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0x3F6u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x3F7u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x3F8u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 185), 0x3F9u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x4000) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 161), 0x3FAu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x4000) == 0)
  {
LABEL_42:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 201), 0x3FBu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 169), 0x3FCu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 177), 0x3FDu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 4) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 193), 0x3FEu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_46:
    if ((v4 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x44Fu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000) == 0)
  {
LABEL_47:
    if ((v4 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x450u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000) == 0)
  {
LABEL_48:
    if ((v4 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x451u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_49:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x452u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x453u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000000) == 0)
  {
LABEL_51:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 182), 0x454u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 158), 0x455u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 198), 0x456u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 166), 0x457u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x10) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 174), 0x458u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x10) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 191), 0x459u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0x45Au);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0x45Bu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 0x45Cu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 186), 0x45Du);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 162), 0x45Eu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x8000) == 0)
  {
LABEL_62:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 202), 0x45Fu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_63:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 170), 0x460u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x80) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 178), 0x461u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x80) == 0)
  {
LABEL_65:
    if ((v4 & 8) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 194), 0x462u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 0x4B3u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 0x4B4u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000) == 0)
  {
LABEL_68:
    if ((v4 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x4B5u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_69:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x4B6u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 0x4B7u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 183), 0x4B8u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x1000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 159), 0x4B9u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x1000) == 0)
  {
LABEL_73:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 199), 0x4BAu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 167), 0x4BBu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x20) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 175), 0x4BCu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x20) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 192), 0x4BDu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000) == 0)
  {
LABEL_77:
    if ((v4 & 0x1000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x4BEu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000) == 0)
  {
LABEL_78:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x4BFu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v5 & 1) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  result = PB::Writer::write(this, *(float *)(v3 + 152), 0x4C0u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 1) == 0)
  {
LABEL_80:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 187), 0x4C1u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x10000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 163), 0x4C2u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_82:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 203), 0x4C3u);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 171), 0x4C4u);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  if ((*(_QWORD *)(v3 + 204) & 0x100000000000000) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 195), 0x4C6u);
  }
LABEL_163:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 179), 0x4C5u);
  if ((*(_WORD *)(v3 + 212) & 0x100) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 195), 0x4C6u);
  return result;
}

uint64_t sub_101589450(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE388;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101589468(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10158948C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)result = &off_1021BE388;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 32) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 32) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_DWORD *)(result + 28) = v7;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101589518(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "searchTimestamp", *(_QWORD *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "roadClass", *(_DWORD *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015895C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_74;
                  }
                  v41 = v20++;
                  v42 = *(_BYTE *)(v21 + v41);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_73;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_73:
                v2 = v41 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_74;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_74:
              *(_QWORD *)(a1 + 16) = v24;
              goto LABEL_85;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_78:
                    v2 = v45 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_78;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_79;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_79:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_85;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_83:
                    v2 = v49 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_83;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_84;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 28) = v37;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101589A40(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  return result;
}

uint64_t sub_101589AD4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE3C0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101589AEC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101589B10(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)result = &off_1021BE3C0;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 40) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 32) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 36) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      v8 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(result + 40) = v3 | 2;
      *(_QWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 40) = v3;
  *(_QWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_101589BB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "roadClass", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "epochLastTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101589C88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t result;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) <= 103)
    {
      if ((_DWORD)v20 == 101)
      {
        *(_BYTE *)(a1 + 40) |= 4u;
        v39 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v40 = *(_QWORD *)this;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v39)
            {
              v43 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_108;
            }
            v60 = v39++;
            v61 = *(_BYTE *)(v40 + v60);
            *((_QWORD *)this + 1) = v39;
            v43 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v43 = 0;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)this + 24))
            v43 = 0;
LABEL_107:
          v2 = v60 + 1;
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          while (1)
          {
            v2 = v39 + 1;
            *((_QWORD *)this + 1) = v39 + 1;
            v44 = *(_BYTE *)(v40 + v39);
            v43 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0)
              break;
            v41 += 7;
            v39 = v2;
            v14 = v42++ > 8;
            if (v14)
            {
              v43 = 0;
              break;
            }
          }
        }
LABEL_108:
        *(_QWORD *)(a1 + 24) = v43;
      }
      else
      {
        if ((_DWORD)v20 != 103)
        {
LABEL_58:
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_109;
        }
        *(_BYTE *)(a1 + 40) |= 8u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
    }
    else
    {
      switch((_DWORD)v20)
      {
        case 0x68:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v27 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
          {
            v50 = 0;
            v51 = 0;
            v31 = 0;
            if (v2 <= v27)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v27)
              {
                LODWORD(v31) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_98;
              }
              v52 = v27++;
              v53 = *(_BYTE *)(v28 + v52);
              *((_QWORD *)this + 1) = v27;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0)
                break;
              v50 += 7;
              v14 = v51++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                goto LABEL_97;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v31) = 0;
LABEL_97:
            v2 = v52 + 1;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            while (1)
            {
              v2 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                break;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                break;
              }
            }
          }
LABEL_98:
          *(_DWORD *)(a1 + 36) = v31;
          break;
        case 0xC9:
          *(_BYTE *)(a1 + 40) |= 1u;
          v33 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v34 = *(_QWORD *)this;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            v54 = 0;
            v55 = 0;
            v37 = 0;
            if (v2 <= v33)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v33)
              {
                v37 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_103;
              }
              v56 = v33++;
              v57 = *(_BYTE *)(v34 + v56);
              *((_QWORD *)this + 1) = v33;
              v37 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0)
                break;
              v54 += 7;
              v14 = v55++ > 8;
              if (v14)
              {
                v37 = 0;
                goto LABEL_102;
              }
            }
            if (*((_BYTE *)this + 24))
              v37 = 0;
LABEL_102:
            v2 = v56 + 1;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v2 = v33 + 1;
              *((_QWORD *)this + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                break;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
              if (v14)
              {
                v37 = 0;
                break;
              }
            }
          }
LABEL_103:
          *(_QWORD *)(a1 + 8) = v37;
          break;
        case 0xCA:
          *(_BYTE *)(a1 + 40) |= 2u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v46 = 0;
            v47 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                v25 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_93;
              }
              v48 = v21++;
              v49 = *(_BYTE *)(v22 + v48);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0)
                break;
              v46 += 7;
              v14 = v47++ > 8;
              if (v14)
              {
                v25 = 0;
                goto LABEL_92;
              }
            }
            if (*((_BYTE *)this + 24))
              v25 = 0;
LABEL_92:
            v2 = v48 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                v25 = 0;
                break;
              }
            }
          }
LABEL_93:
          *(_QWORD *)(a1 + 16) = v25;
          break;
        default:
          goto LABEL_58;
      }
    }
LABEL_109:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_10158A1F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 24), 0x65u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0x67u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x68u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCAu);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xC9u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCAu);
  return result;
}

uint64_t sub_10158A2A8(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE3F8;
  *(_DWORD *)(result + 324) = 0;
  *(_QWORD *)(result + 316) = 0;
  return result;
}

void sub_10158A2C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10158A2EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  char v9;
  char v10;
  float result;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  int v26;
  char v27;
  unint64_t v28;

  *(_QWORD *)a1 = &off_1021BE3F8;
  v2 = (uint64_t *)(a1 + 316);
  *(_DWORD *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 316) = 0;
  v3 = (uint64_t *)(a2 + 316);
  v4 = *(_QWORD *)(a2 + 316);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 326) = 0;
    *(_WORD *)(a1 + 324) = 0;
    v5 = 1;
    *v2 = 1;
    *(_QWORD *)(a1 + 8) = v8;
    LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
    v4 = *v3;
    if ((*(_WORD *)(a2 + 324) & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(unsigned __int16 *)(a2 + 324);
  LODWORD(v8) = v7 | (*(unsigned __int8 *)(a2 + 326) << 16);
  if ((v7 & 0x8000) != 0)
  {
LABEL_5:
    v9 = *(_BYTE *)(a2 + 310);
    v6 = 0x8000;
    *v2 = v5;
    *(_BYTE *)(a1 + 326) = 0;
    *(_WORD *)(a1 + 324) = 0x8000;
    *(_BYTE *)(a1 + 310) = v9;
    LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
    v4 = *v3;
  }
LABEL_6:
  if ((v8 & 0x10000) != 0)
  {
    v10 = *(_BYTE *)(a2 + 311);
    *(_WORD *)(a1 + 324) = v6;
    v6 |= 0x10000uLL;
    *v2 = v5;
    *(_BYTE *)(a1 + 326) = BYTE2(v6);
    *(_BYTE *)(a1 + 311) = v10;
    LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
    v4 = *v3;
    if ((*v3 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v4 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v4 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 180);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 180) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_9:
    if ((v8 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  result = *(float *)(a2 + 84);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 84) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 8) == 0)
  {
LABEL_10:
    if ((v8 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  result = *(float *)(a2 + 280);
  v8 = v6 >> 16;
  v6 |= 8uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 280) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x2000) == 0)
  {
LABEL_11:
    if ((v8 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  v12 = *(_BYTE *)(a2 + 308);
  v13 = v6 >> 16;
  v6 |= 0x2000uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v13;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 308) = v12;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x400) == 0)
  {
LABEL_12:
    if ((v8 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  v14 = *(_BYTE *)(a2 + 305);
  v15 = v6 >> 16;
  v6 |= 0x400uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v15;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 305) = v14;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  v16 = *(_BYTE *)(a2 + 304);
  v17 = v6 >> 16;
  v6 |= 0x200uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v17;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 304) = v16;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v8 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  v18 = *(_DWORD *)(a2 + 112);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(_DWORD *)(a1 + 112) = v18;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x1000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  v19 = *(_BYTE *)(a2 + 307);
  v20 = v6 >> 16;
  v6 |= 0x1000uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v20;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 307) = v19;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  result = *(float *)(a2 + 108);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 108) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  result = *(float *)(a2 + 208);
  v5 |= 0x2000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 208) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  result = *(float *)(a2 + 204);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 204) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  result = *(float *)(a2 + 212);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 212) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  result = *(float *)(a2 + 36);
  v5 |= 0x40uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 36) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_21:
    if ((v4 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  result = *(float *)(a2 + 16);
  v5 |= 2uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 16) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_22:
    if ((v8 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  result = *(float *)(a2 + 72);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 72) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((v8 & 0x40000) == 0)
  {
LABEL_23:
    if ((v8 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  v21 = *(_BYTE *)(a2 + 313);
  *(_WORD *)(a1 + 324) = v6;
  v6 |= 0x40000uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(_BYTE *)(a1 + 313) = v21;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x800) == 0)
  {
LABEL_24:
    if ((v8 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  v22 = *(_BYTE *)(a2 + 306);
  v23 = v6 >> 16;
  v6 |= 0x800uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v23;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 306) = v22;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x4000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  v24 = *(_BYTE *)(a2 + 309);
  v25 = v6 >> 16;
  v6 |= 0x4000uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v25;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 309) = v24;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  result = *(float *)(a2 + 224);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 224) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  result = *(float *)(a2 + 216);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 216) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v8 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  v26 = *(_DWORD *)(a2 + 220);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(_DWORD *)(a1 + 220) = v26;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  v4 = *v3;
  if ((v8 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  v27 = *(_BYTE *)(a2 + 312);
  *(_WORD *)(a1 + 324) = v6;
  v6 |= 0x20000uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(_BYTE *)(a1 + 312) = v27;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  result = *(float *)(a2 + 228);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 228) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  result = *(float *)(a2 + 248);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 248) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x80000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  result = *(float *)(a2 + 88);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 88) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  result = *(float *)(a2 + 184);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 184) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((v8 & 0x10) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  result = *(float *)(a2 + 284);
  v8 = v6 >> 16;
  v6 |= 0x10uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 284) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  result = *(float *)(a2 + 232);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 232) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  result = *(float *)(a2 + 252);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 252) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x100000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  result = *(float *)(a2 + 92);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 92) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  result = *(float *)(a2 + 188);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 188) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((v8 & 0x20) == 0)
  {
LABEL_39:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  result = *(float *)(a2 + 288);
  v8 = v6 >> 16;
  v6 |= 0x20uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 288) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  result = *(float *)(a2 + 236);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 236) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  result = *(float *)(a2 + 256);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 256) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_42:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  result = *(float *)(a2 + 96);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 96) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  result = *(float *)(a2 + 192);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 192) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((v8 & 0x40) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  result = *(float *)(a2 + 292);
  v8 = v6 >> 16;
  v6 |= 0x40uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 292) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  result = *(float *)(a2 + 40);
  v5 |= 0x80uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 40) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v4 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  result = *(float *)(a2 + 52);
  v5 |= 0x400uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 52) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_47:
    if ((v4 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  result = *(float *)(a2 + 48);
  v5 |= 0x200uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 48) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_48:
    if ((v4 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  result = *(float *)(a2 + 44);
  v5 |= 0x100uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 44) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_49:
    if ((v4 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  result = *(float *)(a2 + 20);
  v5 |= 4uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 20) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_50:
    if ((v4 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  result = *(float *)(a2 + 32);
  v5 |= 0x20uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 32) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_51:
    if ((v4 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  result = *(float *)(a2 + 28);
  v5 |= 0x10uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 28) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_52:
    if ((v4 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  result = *(float *)(a2 + 24);
  v5 |= 8uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 24) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  result = *(float *)(a2 + 56);
  v5 |= 0x800uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 56) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_54:
    if ((v4 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  result = *(float *)(a2 + 68);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 68) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_55:
    if ((v4 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  result = *(float *)(a2 + 64);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 64) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_56:
    if ((v4 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  result = *(float *)(a2 + 60);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 60) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_57:
    if ((v4 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  result = *(float *)(a2 + 76);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 76) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_58:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  result = *(float *)(a2 + 80);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 80) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  result = *(float *)(a2 + 240);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 240) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  result = *(float *)(a2 + 260);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 260) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  result = *(float *)(a2 + 100);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 100) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v8 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  result = *(float *)(a2 + 196);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 196) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((v8 & 0x80) == 0)
  {
LABEL_63:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  result = *(float *)(a2 + 296);
  v8 = v6 >> 16;
  v6 |= 0x80uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 296) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  result = *(float *)(a2 + 244);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 244) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  result = *(float *)(a2 + 264);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 264) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_66:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  result = *(float *)(a2 + 104);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 104) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v8 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  result = *(float *)(a2 + 200);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 200) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((v8 & 0x100) == 0)
  {
LABEL_68:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  result = *(float *)(a2 + 300);
  v8 = v6 >> 16;
  v6 |= 0x100uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 300) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  result = *(float *)(a2 + 140);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 140) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  result = *(float *)(a2 + 144);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 144) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  result = *(float *)(a2 + 120);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 120) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  result = *(float *)(a2 + 116);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 116) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  result = *(float *)(a2 + 136);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 136) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  result = *(float *)(a2 + 132);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 132) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  result = *(float *)(a2 + 128);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 128) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  result = *(float *)(a2 + 124);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 124) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  result = *(float *)(a2 + 172);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 172) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  result = *(float *)(a2 + 176);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 176) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  result = *(float *)(a2 + 152);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 152) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  result = *(float *)(a2 + 148);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 148) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  result = *(float *)(a2 + 168);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 168) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  result = *(float *)(a2 + 164);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 164) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  v4 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  result = *(float *)(a2 + 160);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 160) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v8 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  result = *(float *)(a2 + 156);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 156) = result;
  LOBYTE(v8) = *(_WORD *)(a2 + 324);
  if ((*(_WORD *)(a2 + 324) & 2) == 0)
  {
LABEL_85:
    if ((v8 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  result = *(float *)(a2 + 272);
  v8 = v6 >> 16;
  v6 |= 2uLL;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 272) = result;
  LOBYTE(v8) = *(_WORD *)(a2 + 324);
  if ((*(_WORD *)(a2 + 324) & 4) == 0)
  {
LABEL_86:
    if ((v8 & 1) == 0)
      return result;
LABEL_168:
    result = *(float *)(a2 + 268);
    *v2 = v5;
    *(_BYTE *)(a1 + 326) = BYTE2(v6);
    *(_WORD *)(a1 + 324) = v6 | 1;
    *(float *)(a1 + 268) = result;
    return result;
  }
LABEL_167:
  result = *(float *)(a2 + 276);
  v28 = v6 >> 16;
  LODWORD(v6) = v6 | 4;
  *v2 = v5;
  *(_BYTE *)(a1 + 326) = v28;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 276) = result;
  if ((*(_WORD *)(a2 + 324) & 1) != 0)
    goto LABEL_168;
  return result;
}

uint64_t sub_10158B3E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 316);
  v6 = *(_QWORD *)(a1 + 316);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "audioRolloverDvChaosThreshold", *(float *)(a1 + 16));
    v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    v6 = *v5;
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdCenter", *(float *)(a1 + 20));
    v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    v6 = *v5;
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdMax", *(float *)(a1 + 24));
    v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    v6 = *v5;
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_91;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdMin", *(float *)(a1 + 28));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdStretch", *(float *)(a1 + 32));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThreshold", *(float *)(a1 + 36));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdCenter", *(float *)(a1 + 40));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdMax", *(float *)(a1 + 44));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdMin", *(float *)(a1 + 48));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdStretch", *(float *)(a1 + 52));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdCenter", *(float *)(a1 + 56));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdMax", *(float *)(a1 + 60));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdMin", *(float *)(a1 + 64));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdStretch", *(float *)(a1 + 68));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v6 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "audioRolloverDvRmsThreshold", *(float *)(a1 + 72));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v6 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "baroEscalateMaxAccelNormThreshold", *(float *)(a1 + 76));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v6 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "baroEscalateSpinNormThreshold", *(float *)(a1 + 80));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v6 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "cumulativeRotation", *(float *)(a1 + 84));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "cumulativeRotationThreshold", *(float *)(a1 + 88));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithAudio", *(float *)(a1 + 92));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v6 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudio", *(float *)(a1 + 96));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 100));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 104));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 108));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "detectorRegime", *(_DWORD *)(a1 + 112));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x200) == 0)
  {
LABEL_30:
    if ((v7 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "hasAudioInEpoch", *(_BYTE *)(a1 + 304));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x400) == 0)
  {
LABEL_31:
    if ((v7 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "isAudioRollover", *(_BYTE *)(a1 + 305));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x800) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "isAudioRolloverDv", *(_BYTE *)(a1 + 306));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x1000) == 0)
  {
LABEL_33:
    if ((v7 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "isAudioSupported", *(_BYTE *)(a1 + 307));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x2000) == 0)
  {
LABEL_34:
    if ((v7 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "isBaro", *(_BYTE *)(a1 + 308));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x4000) == 0)
  {
LABEL_35:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "isCompanionConnected", *(_BYTE *)(a1 + 309));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "lowSenseWithAudioCumulativeRotationThreshold", *(float *)(a1 + 116));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxAccelNormThreshold", *(float *)(a1 + 120));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_39;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "lowSenseWithAudioParBaroCumulativeRotationThreshold", *(float *)(a1 + 124));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "lowSenseWithAudioParBaroNormThreshold", *(float *)(a1 + 128));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 132));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "lowSenseWithAudioZgtimeThreshold", *(float *)(a1 + 136));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "lowSenseWithAudiodvThreshold1", *(float *)(a1 + 140));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "lowSenseWithAudiodvThreshold2", *(float *)(a1 + 144));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioCumulativeRotationThreshold", *(float *)(a1 + 148));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxAccelNormThreshold", *(float *)(a1 + 152));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioParBaroCumulativeRotationThreshold", *(float *)(a1 + 156));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_48;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioParBaroNormThreshold", *(float *)(a1 + 160));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_49;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioPeakPressureThreshold", *(float *)(a1 + 164));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_50;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioZgtimeThreshold", *(float *)(a1 + 168));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_51;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "lowSenseWithoutAudiodvThreshold1", *(float *)(a1 + 172));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_52;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "lowSenseWithoutAudiodvThreshold2", *(float *)(a1 + 176));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_53;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 180));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "maxAccelNormThreshold", *(float *)(a1 + 184));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithAudio", *(float *)(a1 + 188));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_56;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 192));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_57;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 196));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_58;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 200));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_59;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxAudioRolloverChaos", *(float *)(a1 + 204));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_60;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxAudioRolloverEnergy", *(float *)(a1 + 208));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_61;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxAudioRolloverRms", *(float *)(a1 + 212));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_62;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 216));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_63;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "numShortAudio", *(_DWORD *)(a1 + 220));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x8000) == 0)
      goto LABEL_64;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 224));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x8000) == 0)
  {
LABEL_64:
    if ((v7 & 0x10000) == 0)
      goto LABEL_65;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "rolloverCrashDetectorDecision", *(_BYTE *)(a1 + 310));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x10000) == 0)
  {
LABEL_65:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_66;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "rolloverCrashDetectorDecisionLowSense", *(_BYTE *)(a1 + 311));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_67;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1", *(float *)(a1 + 228));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithAudio", *(float *)(a1 + 232));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_69;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudio", *(float *)(a1 + 236));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_70;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 240));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *(float *)(a1 + 244));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2", *(float *)(a1 + 248));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithAudio", *(float *)(a1 + 252));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudio", *(float *)(a1 + 256));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 260));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 1) == 0)
      goto LABEL_76;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *(float *)(a1 + 264));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 1) == 0)
  {
LABEL_76:
    if ((v7 & 0x20000) == 0)
      goto LABEL_77;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(this, "shortAudioMaxPulseThreshold", *(float *)(a1 + 268));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x20000) == 0)
  {
LABEL_77:
    if ((v7 & 2) == 0)
      goto LABEL_78;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(this, "shortAudioMet", *(_BYTE *)(a1 + 312));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 2) == 0)
  {
LABEL_78:
    if ((v7 & 4) == 0)
      goto LABEL_79;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(this, "shortAudioNumThreshold", *(float *)(a1 + 272));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 4) == 0)
  {
LABEL_79:
    if ((v7 & 0x40000) == 0)
      goto LABEL_80;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(this, "shortAudioPeakPressureThreshold", *(float *)(a1 + 276));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x40000) == 0)
  {
LABEL_80:
    if ((v6 & 1) == 0)
      goto LABEL_81;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(this, "strongerAudioRollover", *(_BYTE *)(a1 + 313));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_81:
    if ((v7 & 8) == 0)
      goto LABEL_82;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 8) == 0)
  {
LABEL_82:
    if ((v7 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(this, "zgTime", *(float *)(a1 + 280));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x10) == 0)
  {
LABEL_83:
    if ((v7 & 0x20) == 0)
      goto LABEL_84;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(this, "zgTimeThreshold", *(float *)(a1 + 284));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x20) == 0)
  {
LABEL_84:
    if ((v7 & 0x40) == 0)
      goto LABEL_85;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(this, "zgTimeThresholdWithAudio", *(float *)(a1 + 288));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x40) == 0)
  {
LABEL_85:
    if ((v7 & 0x80) == 0)
      goto LABEL_86;
LABEL_168:
    PB::TextFormatter::format(this, "zgTimeThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 296));
    if ((*(_WORD *)(a1 + 324) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_87;
  }
LABEL_167:
  PB::TextFormatter::format(this, "zgTimeThresholdWithoutAudio", *(float *)(a1 + 292));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x80) != 0)
    goto LABEL_168;
LABEL_86:
  if ((v7 & 0x100) != 0)
LABEL_87:
    PB::TextFormatter::format(this, "zgTimeThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 300));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10158C250(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  uint64_t result;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 316;
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100)
      {
        switch((_DWORD)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v165 = *((_QWORD *)this + 1);
            v166 = *((_QWORD *)this + 2);
            v167 = *(_QWORD *)this;
            if (v165 > 0xFFFFFFFFFFFFFFF5 || v165 + 10 > v166)
            {
              v187 = 0;
              v188 = 0;
              v170 = 0;
              if (v166 <= v165)
                v166 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v166 == v165)
                {
                  v170 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_339;
                }
                v189 = v165 + 1;
                v190 = *(_BYTE *)(v167 + v165);
                *((_QWORD *)this + 1) = v189;
                v170 |= (unint64_t)(v190 & 0x7F) << v187;
                if ((v190 & 0x80) == 0)
                  break;
                v187 += 7;
                v165 = v189;
                v15 = v188++ > 8;
                if (v15)
                {
LABEL_318:
                  v170 = 0;
                  goto LABEL_339;
                }
              }
              if (*((_BYTE *)this + 24))
                v170 = 0;
            }
            else
            {
              v168 = 0;
              v169 = 0;
              v170 = 0;
              while (1)
              {
                v171 = v165 + 1;
                *((_QWORD *)this + 1) = v165 + 1;
                v172 = *(_BYTE *)(v167 + v165);
                v170 |= (unint64_t)(v172 & 0x7F) << v168;
                if ((v172 & 0x80) == 0)
                  break;
                v168 += 7;
                v165 = v171;
                v15 = v169++ > 8;
                if (v15)
                  goto LABEL_318;
              }
            }
LABEL_339:
            *(_QWORD *)(a1 + 8) = v170;
            break;
          case 2:
            v173 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x8000u;
            *(_BYTE *)(v8 + 10) = v173;
            v174 = *((_QWORD *)this + 1);
            if (v174 >= *((_QWORD *)this + 2))
            {
              v177 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v175 = v174 + 1;
              v176 = *(unsigned __int8 *)(*(_QWORD *)this + v174);
              *((_QWORD *)this + 1) = v175;
              v177 = v176 != 0;
            }
            *(_BYTE *)(a1 + 310) = v177;
            break;
          case 3:
            v23 = *(unsigned __int16 *)(v8 + 8);
            v24 = (v23 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x10000u) >> 16;
            *(_WORD *)(v8 + 8) = v23;
            *(_BYTE *)(v8 + 10) = v24;
            v25 = *((_QWORD *)this + 1);
            if (v25 >= *((_QWORD *)this + 2))
            {
              v28 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v26 = v25 + 1;
              v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
              *((_QWORD *)this + 1) = v26;
              v28 = v27 != 0;
            }
            *(_BYTE *)(a1 + 311) = v28;
            break;
          default:
LABEL_278:
            result = PB::Reader::skip(this, v21, v12 & 7, 0);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 101:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v22 = *((_QWORD *)this + 1);
            if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v22);
            goto LABEL_322;
          case 102:
            *(_QWORD *)v8 |= 0x40000uLL;
            v29 = *((_QWORD *)this + 1);
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v29);
            goto LABEL_322;
          case 103:
            v30 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 8u;
            *(_BYTE *)(v8 + 10) = v30;
            v31 = *((_QWORD *)this + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(_QWORD *)this + v31);
            goto LABEL_322;
          case 104:
            v32 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x2000u;
            *(_BYTE *)(v8 + 10) = v32;
            v33 = *((_QWORD *)this + 1);
            if (v33 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v34 = v33 + 1;
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v33);
              *((_QWORD *)this + 1) = v34;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 308) = v36;
            goto LABEL_323;
          case 105:
            v37 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x400u;
            *(_BYTE *)(v8 + 10) = v37;
            v38 = *((_QWORD *)this + 1);
            if (v38 >= *((_QWORD *)this + 2))
            {
              v41 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v39 = v38 + 1;
              v40 = *(unsigned __int8 *)(*(_QWORD *)this + v38);
              *((_QWORD *)this + 1) = v39;
              v41 = v40 != 0;
            }
            *(_BYTE *)(a1 + 305) = v41;
            goto LABEL_323;
          case 106:
            v42 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x200u;
            *(_BYTE *)(v8 + 10) = v42;
            v43 = *((_QWORD *)this + 1);
            if (v43 >= *((_QWORD *)this + 2))
            {
              v46 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
              *((_QWORD *)this + 1) = v44;
              v46 = v45 != 0;
            }
            *(_BYTE *)(a1 + 304) = v46;
            goto LABEL_323;
          case 107:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v47 = *((_QWORD *)this + 1);
            v48 = *((_QWORD *)this + 2);
            v49 = *(_QWORD *)this;
            if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
            {
              v50 = 0;
              v51 = 0;
              v52 = 0;
              do
              {
                v53 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v54 = *(_BYTE *)(v49 + v47);
                v52 |= (unint64_t)(v54 & 0x7F) << v50;
                if ((v54 & 0x80) == 0)
                  goto LABEL_331;
                v50 += 7;
                v47 = v53;
                v15 = v51++ > 8;
              }
              while (!v15);
LABEL_294:
              LODWORD(v52) = 0;
              goto LABEL_331;
            }
            v179 = 0;
            v180 = 0;
            v52 = 0;
            if (v48 <= v47)
              v48 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v48 == v47)
              {
                LODWORD(v52) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v181 = v47 + 1;
                v182 = *(_BYTE *)(v49 + v47);
                *((_QWORD *)this + 1) = v181;
                v52 |= (unint64_t)(v182 & 0x7F) << v179;
                if (v182 < 0)
                {
                  v179 += 7;
                  v47 = v181;
                  v15 = v180++ > 8;
                  if (v15)
                    goto LABEL_294;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v52) = 0;
              }
              break;
            }
LABEL_331:
            *(_DWORD *)(a1 + 112) = v52;
            goto LABEL_323;
          case 108:
            v55 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x1000u;
            *(_BYTE *)(v8 + 10) = v55;
            v56 = *((_QWORD *)this + 1);
            if (v56 >= *((_QWORD *)this + 2))
            {
              v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v57 = v56 + 1;
              v58 = *(unsigned __int8 *)(*(_QWORD *)this + v56);
              *((_QWORD *)this + 1) = v57;
              v59 = v58 != 0;
            }
            *(_BYTE *)(a1 + 307) = v59;
            goto LABEL_323;
          case 109:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v60 = *((_QWORD *)this + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v60);
            goto LABEL_322;
          case 110:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v61 = *((_QWORD *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v61);
            goto LABEL_322;
          case 111:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v62 = *((_QWORD *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v62);
            goto LABEL_322;
          case 112:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v63 = *((_QWORD *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v63);
            goto LABEL_322;
          case 113:
            *(_QWORD *)v8 |= 0x40uLL;
            v64 = *((_QWORD *)this + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v64);
            goto LABEL_322;
          case 114:
            *(_QWORD *)v8 |= 2uLL;
            v65 = *((_QWORD *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v65);
            goto LABEL_322;
          case 115:
            *(_QWORD *)v8 |= 0x8000uLL;
            v66 = *((_QWORD *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v66);
            goto LABEL_322;
          case 116:
            v67 = *(unsigned __int16 *)(v8 + 8);
            v68 = (v67 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x40000u) >> 16;
            *(_WORD *)(v8 + 8) = v67;
            *(_BYTE *)(v8 + 10) = v68;
            v69 = *((_QWORD *)this + 1);
            if (v69 >= *((_QWORD *)this + 2))
            {
              v72 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v70 = v69 + 1;
              v71 = *(unsigned __int8 *)(*(_QWORD *)this + v69);
              *((_QWORD *)this + 1) = v70;
              v72 = v71 != 0;
            }
            *(_BYTE *)(a1 + 313) = v72;
            goto LABEL_323;
          case 117:
            v73 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x800u;
            *(_BYTE *)(v8 + 10) = v73;
            v74 = *((_QWORD *)this + 1);
            if (v74 >= *((_QWORD *)this + 2))
            {
              v77 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v75 = v74 + 1;
              v76 = *(unsigned __int8 *)(*(_QWORD *)this + v74);
              *((_QWORD *)this + 1) = v75;
              v77 = v76 != 0;
            }
            *(_BYTE *)(a1 + 306) = v77;
            goto LABEL_323;
          case 118:
            v78 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x4000u;
            *(_BYTE *)(v8 + 10) = v78;
            v79 = *((_QWORD *)this + 1);
            if (v79 >= *((_QWORD *)this + 2))
            {
              v82 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v80 = v79 + 1;
              v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
              *((_QWORD *)this + 1) = v80;
              v82 = v81 != 0;
            }
            *(_BYTE *)(a1 + 309) = v82;
            goto LABEL_323;
          case 119:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v83);
            goto LABEL_322;
          case 120:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)this + v84);
            goto LABEL_322;
          case 121:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v85 = *((_QWORD *)this + 1);
            v86 = *((_QWORD *)this + 2);
            v87 = *(_QWORD *)this;
            if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
            {
              v88 = 0;
              v89 = 0;
              v90 = 0;
              do
              {
                v91 = v85 + 1;
                *((_QWORD *)this + 1) = v85 + 1;
                v92 = *(_BYTE *)(v87 + v85);
                v90 |= (unint64_t)(v92 & 0x7F) << v88;
                if ((v92 & 0x80) == 0)
                  goto LABEL_335;
                v88 += 7;
                v85 = v91;
                v15 = v89++ > 8;
              }
              while (!v15);
LABEL_309:
              LODWORD(v90) = 0;
              goto LABEL_335;
            }
            v183 = 0;
            v184 = 0;
            v90 = 0;
            if (v86 <= v85)
              v86 = *((_QWORD *)this + 1);
            break;
          case 122:
            v93 = *(unsigned __int16 *)(v8 + 8);
            v94 = (v93 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x20000u) >> 16;
            *(_WORD *)(v8 + 8) = v93;
            *(_BYTE *)(v8 + 10) = v94;
            v95 = *((_QWORD *)this + 1);
            if (v95 >= *((_QWORD *)this + 2))
            {
              v98 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v96 = v95 + 1;
              v97 = *(unsigned __int8 *)(*(_QWORD *)this + v95);
              *((_QWORD *)this + 1) = v96;
              v98 = v97 != 0;
            }
            *(_BYTE *)(a1 + 312) = v98;
            goto LABEL_323;
          case 201:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_322;
          case 202:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 248) = *(_DWORD *)(*(_QWORD *)this + v100);
            goto LABEL_322;
          case 203:
            *(_QWORD *)v8 |= 0x80000uLL;
            v101 = *((_QWORD *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v101);
            goto LABEL_322;
          case 204:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v102);
            goto LABEL_322;
          case 205:
            v103 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x10u;
            *(_BYTE *)(v8 + 10) = v103;
            v104 = *((_QWORD *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 284) = *(_DWORD *)(*(_QWORD *)this + v104);
            goto LABEL_322;
          case 206:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v105 = *((_QWORD *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v105);
            goto LABEL_322;
          case 207:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v106 = *((_QWORD *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(_QWORD *)this + v106);
            goto LABEL_322;
          case 208:
            *(_QWORD *)v8 |= 0x100000uLL;
            v107 = *((_QWORD *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v107);
            goto LABEL_322;
          case 209:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v108 = *((_QWORD *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v108);
            goto LABEL_322;
          case 210:
            v109 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x20u;
            *(_BYTE *)(v8 + 10) = v109;
            v110 = *((_QWORD *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 288) = *(_DWORD *)(*(_QWORD *)this + v110);
            goto LABEL_322;
          case 231:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)this + v111);
            goto LABEL_322;
          case 232:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v112 = *((_QWORD *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(_QWORD *)this + v112);
            goto LABEL_322;
          case 233:
            *(_QWORD *)v8 |= 0x200000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v113);
            goto LABEL_322;
          case 234:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v114 = *((_QWORD *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v114);
            goto LABEL_322;
          case 235:
            v115 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x40u;
            *(_BYTE *)(v8 + 10) = v115;
            v116 = *((_QWORD *)this + 1);
            if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 292) = *(_DWORD *)(*(_QWORD *)this + v116);
            goto LABEL_322;
          case 236:
            *(_QWORD *)v8 |= 0x80uLL;
            v117 = *((_QWORD *)this + 1);
            if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v117);
            goto LABEL_322;
          case 237:
            *(_QWORD *)v8 |= 0x400uLL;
            v118 = *((_QWORD *)this + 1);
            if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v118);
            goto LABEL_322;
          case 238:
            *(_QWORD *)v8 |= 0x200uLL;
            v119 = *((_QWORD *)this + 1);
            if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v119);
            goto LABEL_322;
          case 239:
            *(_QWORD *)v8 |= 0x100uLL;
            v120 = *((_QWORD *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v120);
            goto LABEL_322;
          case 240:
            *(_QWORD *)v8 |= 4uLL;
            v121 = *((_QWORD *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v121);
            goto LABEL_322;
          case 241:
            *(_QWORD *)v8 |= 0x20uLL;
            v122 = *((_QWORD *)this + 1);
            if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v122);
            goto LABEL_322;
          case 242:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)this + 1);
            if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v123);
            goto LABEL_322;
          case 243:
            *(_QWORD *)v8 |= 8uLL;
            v124 = *((_QWORD *)this + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v124);
            goto LABEL_322;
          case 244:
            *(_QWORD *)v8 |= 0x800uLL;
            v125 = *((_QWORD *)this + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v125);
            goto LABEL_322;
          case 245:
            *(_QWORD *)v8 |= 0x4000uLL;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v126);
            goto LABEL_322;
          case 246:
            *(_QWORD *)v8 |= 0x2000uLL;
            v127 = *((_QWORD *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v127);
            goto LABEL_322;
          case 247:
            *(_QWORD *)v8 |= 0x1000uLL;
            v128 = *((_QWORD *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v128);
            goto LABEL_322;
          case 248:
            *(_QWORD *)v8 |= 0x10000uLL;
            v129 = *((_QWORD *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v129);
            goto LABEL_322;
          case 249:
            *(_QWORD *)v8 |= 0x20000uLL;
            v130 = *((_QWORD *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v130);
            goto LABEL_322;
          case 250:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v131 = *((_QWORD *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(_QWORD *)this + v131);
            goto LABEL_322;
          case 251:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v132 = *((_QWORD *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(_QWORD *)this + v132);
            goto LABEL_322;
          case 252:
            *(_QWORD *)v8 |= 0x400000uLL;
            v133 = *((_QWORD *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v133);
            goto LABEL_322;
          case 253:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v134 = *((_QWORD *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v134);
            goto LABEL_322;
          case 254:
            v135 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x80u;
            *(_BYTE *)(v8 + 10) = v135;
            v136 = *((_QWORD *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 296) = *(_DWORD *)(*(_QWORD *)this + v136);
            goto LABEL_322;
          case 255:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v137 = *((_QWORD *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(_QWORD *)this + v137);
            goto LABEL_322;
          case 256:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v138 = *((_QWORD *)this + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(_QWORD *)this + v138);
            goto LABEL_322;
          case 257:
            *(_QWORD *)v8 |= 0x800000uLL;
            v139 = *((_QWORD *)this + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v139);
            goto LABEL_322;
          case 258:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v140 = *((_QWORD *)this + 1);
            if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v140);
            goto LABEL_322;
          case 259:
            v141 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x100u;
            *(_BYTE *)(v8 + 10) = v141;
            v142 = *((_QWORD *)this + 1);
            if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 300) = *(_DWORD *)(*(_QWORD *)this + v142);
            goto LABEL_322;
          case 260:
            *(_QWORD *)v8 |= (unint64_t)&_mh_execute_header;
            v143 = *((_QWORD *)this + 1);
            if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v143);
            goto LABEL_322;
          case 261:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v144 = *((_QWORD *)this + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v144);
            goto LABEL_322;
          case 262:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v145 = *((_QWORD *)this + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v145);
            goto LABEL_322;
          case 263:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v146 = *((_QWORD *)this + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v146);
            goto LABEL_322;
          case 264:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v147 = *((_QWORD *)this + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v147);
            goto LABEL_322;
          case 265:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v148 = *((_QWORD *)this + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v148);
            goto LABEL_322;
          case 266:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v149 = *((_QWORD *)this + 1);
            if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v149);
            goto LABEL_322;
          case 267:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v150 = *((_QWORD *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v150);
            goto LABEL_322;
          case 268:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v151 = *((_QWORD *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v151);
            goto LABEL_322;
          case 269:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v152 = *((_QWORD *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v152);
            goto LABEL_322;
          case 270:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v153 = *((_QWORD *)this + 1);
            if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v153);
            goto LABEL_322;
          case 271:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v154 = *((_QWORD *)this + 1);
            if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v154);
            goto LABEL_322;
          case 272:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v155 = *((_QWORD *)this + 1);
            if (v155 > 0xFFFFFFFFFFFFFFFBLL || v155 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v155);
            goto LABEL_322;
          case 273:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v156 = *((_QWORD *)this + 1);
            if (v156 > 0xFFFFFFFFFFFFFFFBLL || v156 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v156);
            goto LABEL_322;
          case 274:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v157 = *((_QWORD *)this + 1);
            if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v157);
            goto LABEL_322;
          case 275:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v158 = *((_QWORD *)this + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v158);
            goto LABEL_322;
          case 276:
            v159 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 2u;
            *(_BYTE *)(v8 + 10) = v159;
            v160 = *((_QWORD *)this + 1);
            if (v160 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 272) = *(_DWORD *)(*(_QWORD *)this + v160);
            goto LABEL_322;
          case 277:
            v161 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 4u;
            *(_BYTE *)(v8 + 10) = v161;
            v162 = *((_QWORD *)this + 1);
            if (v162 > 0xFFFFFFFFFFFFFFFBLL || v162 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 276) = *(_DWORD *)(*(_QWORD *)this + v162);
            goto LABEL_322;
          case 278:
            v163 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 1u;
            *(_BYTE *)(v8 + 10) = v163;
            v164 = *((_QWORD *)this + 1);
            if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 268) = *(_DWORD *)(*(_QWORD *)this + v164);
LABEL_322:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_268:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_323;
          default:
            goto LABEL_278;
        }
        while (1)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_335;
          }
          v185 = v85 + 1;
          v186 = *(_BYTE *)(v87 + v85);
          *((_QWORD *)this + 1) = v185;
          v90 |= (unint64_t)(v186 & 0x7F) << v183;
          if ((v186 & 0x80) == 0)
            break;
          v183 += 7;
          v85 = v185;
          v15 = v184++ > 8;
          if (v15)
            goto LABEL_309;
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v90) = 0;
LABEL_335:
        *(_DWORD *)(a1 + 220) = v90;
      }
LABEL_323:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10158D9C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result;
  v4 = (uint64_t *)(result + 316);
  v5 = *(_QWORD *)(result + 316);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((v4[1] & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(unsigned __int16 *)(result + 324);
  v7 = v6 | (*(unsigned __int8 *)(result + 326) << 16);
  if ((v6 & 0x8000) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 310), 2u);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
  }
LABEL_6:
  if ((v7 & 0x10000) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 311), 3u);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((*v4 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v5 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 180), 0x65u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v7 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x66u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 8) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 280), 0x67u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 308), 0x68u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 305), 0x69u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 304), 0x6Au);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v7 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x6Bu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 307), 0x6Cu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x6Du);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 208), 0x6Eu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, *(float *)(v3 + 204), 0x6Fu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this, *(float *)(v3 + 212), 0x70u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v5 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0x71u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 0x72u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_22:
    if ((v7 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x73u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x40000) == 0)
  {
LABEL_23:
    if ((v7 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 313), 0x74u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x800) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 306), 0x75u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x4000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 309), 0x76u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, *(float *)(v3 + 224), 0x77u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, *(float *)(v3 + 216), 0x78u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 220), 0x79u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 312), 0x7Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this, *(float *)(v3 + 228), 0xC9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this, *(float *)(v3 + 248), 0xCAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0xCBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this, *(float *)(v3 + 184), 0xCCu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, *(float *)(v3 + 284), 0xCDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, *(float *)(v3 + 232), 0xCEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, *(float *)(v3 + 252), 0xCFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_37:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 0xD0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, *(float *)(v3 + 188), 0xD1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x20) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this, *(float *)(v3 + 288), 0xD2u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this, *(float *)(v3 + 236), 0xE7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, *(float *)(v3 + 256), 0xE8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_42:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0xE9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, *(float *)(v3 + 192), 0xEAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x40) == 0)
  {
LABEL_44:
    if ((v5 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::write(this, *(float *)(v3 + 292), 0xEBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_45:
    if ((v5 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xECu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_46:
    if ((v5 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0xEDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_47:
    if ((v5 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0xEEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_48:
    if ((v5 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0xEFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_49:
    if ((v5 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0xF0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_50:
    if ((v5 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xF1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_51:
    if ((v5 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xF2u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xF3u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_53:
    if ((v5 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0xF4u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_54:
    if ((v5 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xF5u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xF6u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xF7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_57:
    if ((v5 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0xF8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_58:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0xF9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this, *(float *)(v3 + 240), 0xFAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this, *(float *)(v3 + 260), 0xFBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_61:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xFCu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this, *(float *)(v3 + 196), 0xFDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x80) == 0)
  {
LABEL_63:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this, *(float *)(v3 + 296), 0xFEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::write(this, *(float *)(v3 + 244), 0xFFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, *(float *)(v3 + 264), 0x100u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_66:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x101u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::write(this, *(float *)(v3 + 200), 0x102u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x100) == 0)
  {
LABEL_68:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this, *(float *)(v3 + 300), 0x103u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x104u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x105u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 0x106u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x107u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 0x108u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x109u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0x10Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0x10Bu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  result = PB::Writer::write(this, *(float *)(v3 + 172), 0x10Cu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  result = PB::Writer::write(this, *(float *)(v3 + 176), 0x10Du);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  result = PB::Writer::write(this, *(float *)(v3 + 152), 0x10Eu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 0x10Fu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  result = PB::Writer::write(this, *(float *)(v3 + 168), 0x110u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  result = PB::Writer::write(this, *(float *)(v3 + 164), 0x111u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  result = PB::Writer::write(this, *(float *)(v3 + 160), 0x112u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v7 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 0x113u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 2) == 0)
  {
LABEL_85:
    if ((v7 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  result = PB::Writer::write(this, *(float *)(v3 + 272), 0x114u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 4) == 0)
  {
LABEL_86:
    if ((v7 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 268), 0x116u);
  }
LABEL_167:
  result = PB::Writer::write(this, *(float *)(v3 + 276), 0x115u);
  if ((v4[1] & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 268), 0x116u);
  return result;
}

_QWORD *sub_10158E6E0(_QWORD *result)
{
  *result = &off_1021BE430;
  *(_QWORD *)((char *)result + 364) = 0;
  *(_QWORD *)((char *)result + 356) = 0;
  return result;
}

void sub_10158E704(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10158E728(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  char v72;
  int v73;
  int v74;
  int v75;
  char v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;

  *(_QWORD *)a1 = &off_1021BE430;
  v2 = (uint64_t *)(a1 + 356);
  *(_QWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 356) = 0;
  v3 = (uint64_t *)(a2 + 356);
  v4 = *(_QWORD *)(a2 + 356);
  if ((v4 & 0x800000) != 0)
  {
    v6 = 0;
    result = *(float *)(a2 + 132);
    v5 = 0x800000;
    *v2 = 0x800000;
    *(_QWORD *)(a1 + 364) = 0;
    *(float *)(a1 + 132) = result;
    v4 = *v3;
    v7 = *(_QWORD *)(a2 + 364);
    if ((*v3 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v4 & 0x400000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 128);
    v5 |= 0x400000uLL;
    *v2 = v5;
    *(_QWORD *)(a1 + 364) = 0;
    *(float *)(a1 + 128) = result;
    v4 = *v3;
    v7 = *(_QWORD *)(a2 + 364);
  }
LABEL_6:
  if ((v4 & 0x1000000) != 0)
  {
    v11 = *(_DWORD *)(a2 + 136);
    v5 |= 0x1000000uLL;
    *v2 = v5;
    *(_QWORD *)(a1 + 364) = 0;
    *(_DWORD *)(a1 + 136) = v11;
    v4 = *v3;
    v7 = *(_QWORD *)(a2 + 364);
    if ((*v3 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v7 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v4 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  v12 = *(_DWORD *)(a2 + 248);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 248) = v12;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  result = *(float *)(a2 + 296);
  v6 = 1;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = 1;
  *(float *)(a1 + 296) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  result = *(float *)(a2 + 272);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 272) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  result = *(float *)(a2 + 224);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 224) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  result = *(float *)(a2 + 220);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 220) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  result = *(float *)(a2 + 76);
  v5 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 76) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  v13 = *(_DWORD *)(a2 + 260);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 260) = v13;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  v14 = *(_DWORD *)(a2 + 140);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 140) = v14;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v7 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  result = *(float *)(a2 + 104);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 104) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 8) == 0)
  {
LABEL_17:
    if ((v7 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  result = *(float *)(a2 + 308);
  v6 |= 8uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 308) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  result = *(float *)(a2 + 312);
  v6 |= 0x10uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 312) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  v15 = *(_DWORD *)(a2 + 212);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 212) = v15;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  v16 = *(_DWORD *)(a2 + 204);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 204) = v16;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  result = *(float *)(a2 + 240);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 240) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v7 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  v17 = *(_DWORD *)(a2 + 280);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 280) = v17;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 2) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  v18 = *(_DWORD *)(a2 + 300);
  v6 |= 2uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 300) = v18;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  v19 = *(_QWORD *)(a2 + 64);
  v5 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_QWORD *)(a1 + 64) = v19;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 1) == 0)
  {
LABEL_25:
    if ((v7 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  v20 = *(_QWORD *)(a2 + 8);
  v5 |= 1uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_QWORD *)(a1 + 8) = v20;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x40) == 0)
  {
LABEL_26:
    if ((v7 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  v21 = *(_BYTE *)(a2 + 317);
  v6 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 317) = v21;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x80) == 0)
  {
LABEL_27:
    if ((v7 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  v22 = *(_BYTE *)(a2 + 318);
  v6 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 318) = v22;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x8000) == 0)
  {
LABEL_28:
    if ((v7 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  v23 = *(_BYTE *)(a2 + 326);
  v6 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 326) = v23;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x10000) == 0)
  {
LABEL_29:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  v24 = *(_BYTE *)(a2 + 327);
  v6 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 327) = v24;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  v25 = *(_BYTE *)(a2 + 338);
  v6 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 338) = v25;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  v26 = *(_BYTE *)(a2 + 336);
  v6 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 336) = v26;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x1000) == 0)
  {
LABEL_32:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  v27 = *(_BYTE *)(a2 + 323);
  v6 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 323) = v27;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  v28 = *(_BYTE *)(a2 + 339);
  v6 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 339) = v28;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  v29 = *(_BYTE *)(a2 + 340);
  v6 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 340) = v29;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x200) == 0)
  {
LABEL_35:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  v30 = *(_BYTE *)(a2 + 320);
  v6 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 320) = v30;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  v31 = *(_BYTE *)(a2 + 335);
  v6 |= 0x1000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 335) = v31;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x2000) == 0)
  {
LABEL_37:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  v32 = *(_BYTE *)(a2 + 324);
  v6 |= 0x2000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 324) = v32;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  v33 = *(_BYTE *)(a2 + 337);
  v6 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 337) = v33;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x80000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  v34 = *(_BYTE *)(a2 + 330);
  v6 |= 0x80000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 330) = v34;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  v35 = *(_BYTE *)(a2 + 348);
  v6 |= 0x2000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 348) = v35;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  v36 = *(_BYTE *)(a2 + 344);
  v6 |= 0x200000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 344) = v36;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  v37 = *(_BYTE *)(a2 + 349);
  v6 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 349) = v37;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  v38 = *(_BYTE *)(a2 + 345);
  v6 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 345) = v38;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  v39 = *(_BYTE *)(a2 + 341);
  v6 |= 0x40000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 341) = v39;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x800) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  v40 = *(_BYTE *)(a2 + 322);
  v6 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 322) = v40;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  v41 = *(_BYTE *)(a2 + 331);
  v6 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 331) = v41;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  v42 = *(_BYTE *)(a2 + 350);
  v6 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 350) = v42;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  v43 = *(_BYTE *)(a2 + 346);
  v6 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 346) = v43;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_49:
    if ((v7 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  v44 = *(_DWORD *)(a2 + 108);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 108) = v44;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x400000) == 0)
  {
LABEL_50:
    if ((v7 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  v45 = *(_BYTE *)(a2 + 333);
  v6 |= 0x400000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 333) = v45;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x800000) == 0)
  {
LABEL_51:
    if ((v7 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  v46 = *(_BYTE *)(a2 + 334);
  v6 |= 0x800000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 334) = v46;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x20) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  v47 = *(_BYTE *)(a2 + 316);
  v6 |= 0x20uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 316) = v47;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_53:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  v48 = *(_DWORD *)(a2 + 112);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 112) = v48;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  v49 = *(_BYTE *)(a2 + 353);
  v6 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 353) = v49;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  v50 = *(_BYTE *)(a2 + 351);
  v6 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 351) = v50;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  v51 = *(_BYTE *)(a2 + 352);
  v6 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 352) = v51;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  v52 = *(_BYTE *)(a2 + 343);
  v6 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 343) = v52;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  v53 = *(_BYTE *)(a2 + 342);
  v6 |= 0x80000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 342) = v53;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  v54 = *(_DWORD *)(a2 + 252);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 252) = v54;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  v55 = *(_DWORD *)(a2 + 256);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 256) = v55;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  v56 = *(_DWORD *)(a2 + 144);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 144) = v56;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  v57 = *(_DWORD *)(a2 + 148);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 148) = v57;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x20000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  v58 = *(_BYTE *)(a2 + 328);
  v6 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 328) = v58;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x4000) == 0)
  {
LABEL_64:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  v59 = *(_BYTE *)(a2 + 325);
  v6 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 325) = v59;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  v60 = *(_DWORD *)(a2 + 188);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 188) = v60;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  v61 = *(_DWORD *)(a2 + 116);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 116) = v61;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  v62 = *(_DWORD *)(a2 + 184);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 184) = v62;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  result = *(float *)(a2 + 288);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 288) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  result = *(float *)(a2 + 292);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 292) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  result = *(float *)(a2 + 268);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 268) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  v63 = *(_DWORD *)(a2 + 276);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 276) = v63;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  v64 = *(_DWORD *)(a2 + 284);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 284) = v64;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x400) == 0)
  {
LABEL_73:
    if ((v4 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  v65 = *(_BYTE *)(a2 + 321);
  v6 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 321) = v65;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  v66 = *(_DWORD *)(a2 + 96);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 96) = v66;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_75:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  result = *(float *)(a2 + 88);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 88) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  v67 = *(_DWORD *)(a2 + 216);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 216) = v67;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  v68 = *(_DWORD *)(a2 + 264);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 264) = v68;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x40) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  v69 = *(_QWORD *)(a2 + 56);
  v5 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_QWORD *)(a1 + 56) = v69;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  v70 = *(_DWORD *)(a2 + 228);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 228) = v70;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  v71 = *(_DWORD *)(a2 + 232);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 232) = v71;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_81:
    if ((v4 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  result = *(float *)(a2 + 120);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 120) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x400) == 0)
  {
LABEL_82:
    if ((v4 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  result = *(float *)(a2 + 80);
  v5 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 80) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_83:
    if ((v4 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  result = *(float *)(a2 + 124);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 124) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x800) == 0)
  {
LABEL_84:
    if ((v4 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  result = *(float *)(a2 + 84);
  v5 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 84) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x100) == 0)
  {
LABEL_85:
    if ((v7 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  result = *(float *)(a2 + 72);
  v5 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 72) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x200000) == 0)
  {
LABEL_86:
    if ((v7 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  v72 = *(_BYTE *)(a2 + 332);
  v6 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 332) = v72;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 4) == 0)
  {
LABEL_87:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  v73 = *(_DWORD *)(a2 + 304);
  v6 |= 4uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 304) = v73;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  v74 = *(_DWORD *)(a2 + 152);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 152) = v74;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  v75 = *(_DWORD *)(a2 + 160);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 160) = v75;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  v76 = *(_BYTE *)(a2 + 347);
  v6 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 347) = v76;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  v77 = *(_DWORD *)(a2 + 164);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 164) = v77;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  v78 = *(_DWORD *)(a2 + 156);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 156) = v78;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  result = *(float *)(a2 + 244);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 244) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  v79 = *(_DWORD *)(a2 + 192);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 192) = v79;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v4 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  v80 = *(_DWORD *)(a2 + 196);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 196) = v80;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_96:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  result = *(float *)(a2 + 100);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(float *)(a1 + 100) = result;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  v81 = *(_DWORD *)(a2 + 208);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 208) = v81;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  v82 = *(_DWORD *)(a2 + 200);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 200) = v82;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  v83 = *(_DWORD *)(a2 + 180);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 180) = v83;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  v84 = *(_DWORD *)(a2 + 168);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 168) = v84;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  v85 = *(_DWORD *)(a2 + 176);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 176) = v85;
  v4 = *v3;
  v7 = *(_QWORD *)(a2 + 364);
  if ((v7 & 0x100) == 0)
  {
LABEL_102:
    if ((v7 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  v86 = *(_BYTE *)(a2 + 319);
  v6 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 319) = v86;
  v4 = *v3;
  if ((*(_QWORD *)(a2 + 364) & 0x40000) == 0)
  {
LABEL_103:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  v87 = *(_BYTE *)(a2 + 329);
  v6 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 329) = v87;
  if ((*v3 & 0x200000000) != 0)
  {
LABEL_104:
    v9 = *(_DWORD *)(a2 + 172);
    *v2 = v5 | 0x200000000;
    *(_QWORD *)(a1 + 364) = v6;
    *(_DWORD *)(a1 + 172) = v9;
  }
LABEL_105:
  v10 = *v3;
  if ((*v3 & 2) != 0)
  {
    v88 = *(_QWORD *)(a2 + 16);
    *v2 |= 2uLL;
    *(_QWORD *)(a1 + 16) = v88;
    v10 = *v3;
    if ((*v3 & 0x20) == 0)
    {
LABEL_107:
      if ((v10 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  v89 = *(_QWORD *)(a2 + 48);
  *v2 |= 0x20uLL;
  *(_QWORD *)(a1 + 48) = v89;
  v10 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_108:
    if ((v10 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  v90 = *(_QWORD *)(a2 + 24);
  *v2 |= 4uLL;
  *(_QWORD *)(a1 + 24) = v90;
  v10 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_109:
    if ((v10 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  v91 = *(_QWORD *)(a2 + 32);
  *v2 |= 8uLL;
  *(_QWORD *)(a1 + 32) = v91;
  v10 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_110:
    if ((v10 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  v92 = *(_QWORD *)(a2 + 40);
  *v2 |= 0x10uLL;
  *(_QWORD *)(a1 + 40) = v92;
  v10 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v10 & 0x2000) == 0)
      return result;
LABEL_217:
    result = *(float *)(a2 + 92);
    *v2 |= 0x2000uLL;
    *(float *)(a1 + 92) = result;
    return result;
  }
LABEL_216:
  v93 = *(_DWORD *)(a2 + 236);
  *v2 |= 0x2000000000000uLL;
  *(_DWORD *)(a1 + 236) = v93;
  if ((*v3 & 0x2000) != 0)
    goto LABEL_217;
  return result;
}

uint64_t sub_10158F330(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 356);
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "anyLowSense", *(_BYTE *)(a1 + 316));
    v6 = *(_QWORD *)(a1 + 364);
  }
  v7 = *v5;
  if ((*v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "autocorrelationPeriodicCount", *(float *)(a1 + 72));
    v7 = *v5;
    v6 = *(_QWORD *)(a1 + 364);
    if ((*v5 & 0x200) == 0)
    {
LABEL_5:
      if ((v6 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_108;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "autocorrelationPeriodicCountThreshold", *(float *)(a1 + 76));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v7 & 1) == 0)
      goto LABEL_7;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "crashDetectorDecision", *(_BYTE *)(a1 + 317));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 1) == 0)
  {
LABEL_7:
    if ((v7 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "crashTimestamp", *(_QWORD *)(a1 + 8));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v7 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "cumulativeRotation", *(float *)(a1 + 80));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v7 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "cumulativeRotationHarmonicMean", *(float *)(a1 + 84));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 88));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "deltaRealTrigger", *(float *)(a1 + 92));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v7 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "deltaSteps", *(_DWORD *)(a1 + 96));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v7 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 100));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "distanceToNearestRoadThreshold", *(float *)(a1 + 104));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "earlyCrashDetectorDecision", *(_BYTE *)(a1 + 318));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "escalationCandidate", *(_BYTE *)(a1 + 319));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "escalationCandidateSuppressed", *(_BYTE *)(a1 + 320));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v7 & 2) == 0)
      goto LABEL_19;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "faultCounter", *(_DWORD *)(a1 + 108));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 2) == 0)
  {
LABEL_19:
    if ((v6 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "firstTimestampMAPDecision", *(_QWORD *)(a1 + 16));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "hasSteps", *(_BYTE *)(a1 + 321));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v6 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "highSensitivityBitmap", *(_DWORD *)(a1 + 112));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_22:
    if ((v6 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "isAirbagDetectedOverWindow", *(_BYTE *)(a1 + 322));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "isAutocorrelationDecided", *(_BYTE *)(a1 + 323));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "isCrashDetected", *(_BYTE *)(a1 + 324));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x4000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "isDecisionMadeAtBoundary", *(_BYTE *)(a1 + 325));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000) == 0)
      goto LABEL_27;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "isDescalationDecided", *(_BYTE *)(a1 + 326));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "isDescalationRequired", *(_BYTE *)(a1 + 327));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "isEvaluatingMovingGps", *(_BYTE *)(a1 + 328));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_29:
    if ((v6 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "isFreeFallDetectedEpoch", *(_BYTE *)(a1 + 329));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x80000) == 0)
  {
LABEL_30:
    if ((v6 & 0x100000) == 0)
      goto LABEL_31;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "isHighSpeedCrashDetected", *(_BYTE *)(a1 + 330));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_31:
    if ((v6 & 0x200000) == 0)
      goto LABEL_32;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "isHighSpeedCrashDetectedOverWindow", *(_BYTE *)(a1 + 331));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_32:
    if ((v6 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "isHighSpeedDetectedOverWindow", *(_BYTE *)(a1 + 332));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_33:
    if ((v6 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "isLowSensCrashDetected", *(_BYTE *)(a1 + 333));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "isLowSensRolloverCrashDetected", *(_BYTE *)(a1 + 334));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "isMAPFPDecided", *(_BYTE *)(a1 + 335));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "isQuiescenceDecided", *(_BYTE *)(a1 + 336));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_38;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "isRolloverCrashDetected", *(_BYTE *)(a1 + 337));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "isStepsDecided", *(_BYTE *)(a1 + 338));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "isTriggerClustersDecided", *(_BYTE *)(a1 + 339));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v7 & 4) == 0)
      goto LABEL_41;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "isUshaFPDecided", *(_BYTE *)(a1 + 340));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 4) == 0)
  {
LABEL_41:
    if ((v7 & 8) == 0)
      goto LABEL_42;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "lastLocalRealTriggerTimestamp", *(_QWORD *)(a1 + 24));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 8) == 0)
  {
LABEL_42:
    if ((v7 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "lastRemoteRealTriggerTimestamp", *(_QWORD *)(a1 + 32));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10) == 0)
  {
LABEL_43:
    if ((v7 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "lastRemoteSampleTimestamp", *(_QWORD *)(a1 + 40));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20) == 0)
  {
LABEL_44:
    if ((v7 & 0x80000) == 0)
      goto LABEL_45;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "lastTimestampMAPDecision", *(_QWORD *)(a1 + 48));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "lowSpeedOrFakeCountAtBoundaryThreshold", *(_DWORD *)(a1 + 116));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x200000) == 0)
      goto LABEL_47;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 120));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_47:
    if ((v7 & 0x400000) == 0)
      goto LABEL_48;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "maxPulseHarmonicMean", *(float *)(a1 + 124));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_48:
    if ((v7 & 0x800000) == 0)
      goto LABEL_49;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "maximumHoldDuration", *(float *)(a1 + 128));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_49:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_50;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "minimumHoldDuration", *(float *)(a1 + 132));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_51;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "movingCountThreshold", *(_DWORD *)(a1 + 136));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_52;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "movingCountThresholdFromSydneyB", *(_DWORD *)(a1 + 140));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_53;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "movingGpsCount", *(_DWORD *)(a1 + 144));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "movingGpsCountTotal", *(_DWORD *)(a1 + 148));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_55;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(this, "numAudioSkiing", *(_DWORD *)(a1 + 152));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_56;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(this, "numAudioSkiingThreshold", *(_DWORD *)(a1 + 156));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(this, "numBaroIncreasesSkiing", *(_DWORD *)(a1 + 160));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_58;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(this, "numBaroIncreasesSkiingThreshold", *(_DWORD *)(a1 + 164));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_58:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_59;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(this, "numDeescalationAOI", *(_DWORD *)(a1 + 168));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_60;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(this, "numDeescalationMAP", *(_DWORD *)(a1 + 172));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_60:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_61;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(this, "numDeescalationTwoLevel", *(_DWORD *)(a1 + 176));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_62;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(this, "numDeescalationUsha", *(_DWORD *)(a1 + 180));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_63;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(this, "numGpsSamplesInHistory", *(_DWORD *)(a1 + 184));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_64;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(this, "numLowOrFakeGpsSamplesInHistory", *(_DWORD *)(a1 + 188));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_64:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_65;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(this, "numTriggersWithRecentSkiLiftDetected", *(_DWORD *)(a1 + 192));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_66;
    goto LABEL_168;
  }
LABEL_167:
  PB::TextFormatter::format(this, "numTriggersWithTrueBtHint", *(_DWORD *)(a1 + 196));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_169;
  }
LABEL_168:
  PB::TextFormatter::format(this, "numUshaCPEpoch", *(_DWORD *)(a1 + 200));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_68;
    goto LABEL_170;
  }
LABEL_169:
  PB::TextFormatter::format(this, "numUshaCPEpochThreshold", *(_DWORD *)(a1 + 204));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x80000000000) == 0)
      goto LABEL_69;
    goto LABEL_171;
  }
LABEL_170:
  PB::TextFormatter::format(this, "numUshaFPEpoch", *(_DWORD *)(a1 + 208));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_69:
    if ((v7 & 0x100000000000) == 0)
      goto LABEL_70;
    goto LABEL_172;
  }
LABEL_171:
  PB::TextFormatter::format(this, "numUshaFPEpochThreshold", *(_DWORD *)(a1 + 212));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_70:
    if ((v7 & 0x200000000000) == 0)
      goto LABEL_71;
    goto LABEL_173;
  }
LABEL_172:
  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 216));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0)
      goto LABEL_72;
    goto LABEL_174;
  }
LABEL_173:
  PB::TextFormatter::format(this, "quiescenceCumulativeRotationHarmonicMeanThreshold", *(float *)(a1 + 220));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_175;
  }
LABEL_174:
  PB::TextFormatter::format(this, "quiescenceMaxPulseHarmonicMeanThreshold", *(float *)(a1 + 224));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v7 & 0x1000000000000) == 0)
      goto LABEL_74;
    goto LABEL_176;
  }
LABEL_175:
  PB::TextFormatter::format(this, "quiescencePulseEpochCount", *(_DWORD *)(a1 + 228));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_74:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_75;
    goto LABEL_177;
  }
LABEL_176:
  PB::TextFormatter::format(this, "quiescenceSpinEpochCount", *(_DWORD *)(a1 + 232));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x4000000000000) == 0)
      goto LABEL_76;
    goto LABEL_178;
  }
LABEL_177:
  PB::TextFormatter::format(this, "sameEventState", *(_DWORD *)(a1 + 236));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_76:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_77;
    goto LABEL_179;
  }
LABEL_178:
  PB::TextFormatter::format(this, "secondDeescalationHoldDuration", *(float *)(a1 + 240));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_180;
  }
LABEL_179:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfAutocorrelationCondition", *(_BYTE *)(a1 + 341));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_181;
  }
LABEL_180:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfJointDetectionCondition", *(_BYTE *)(a1 + 342));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_80;
    goto LABEL_182;
  }
LABEL_181:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfMAPFPCondition", *(_BYTE *)(a1 + 343));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_80:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_81;
    goto LABEL_183;
  }
LABEL_182:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfMovingCondition", *(_BYTE *)(a1 + 344));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x400000000) == 0)
  {
LABEL_81:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_82;
    goto LABEL_184;
  }
LABEL_183:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfQuiescenceCondition", *(_BYTE *)(a1 + 345));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x800000000) == 0)
  {
LABEL_82:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_83;
    goto LABEL_185;
  }
LABEL_184:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfSkiLiftCondition", *(_BYTE *)(a1 + 346));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_83:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_84;
    goto LABEL_186;
  }
LABEL_185:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfSkiingCondition", *(_BYTE *)(a1 + 347));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_84:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_85;
    goto LABEL_187;
  }
LABEL_186:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfStaticCondition", *(_BYTE *)(a1 + 348));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_85:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_86;
    goto LABEL_188;
  }
LABEL_187:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfStepsCondition", *(_BYTE *)(a1 + 349));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_86:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_87;
    goto LABEL_189;
  }
LABEL_188:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfTriggerClustersCondition", *(_BYTE *)(a1 + 350));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_87:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_88;
    goto LABEL_190;
  }
LABEL_189:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfTwoLevelSensitivityCondition", *(_BYTE *)(a1 + 351));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_88:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_89;
    goto LABEL_191;
  }
LABEL_190:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfUshaFPCondition", *(_BYTE *)(a1 + 352));
  v7 = *v5;
  if ((*(_QWORD *)(a1 + 364) & 0x40000000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x8000000000000) == 0)
      goto LABEL_90;
    goto LABEL_192;
  }
LABEL_191:
  PB::TextFormatter::format(this, "shouldEnableHighSensBecauseOfDistanceToRoadCondition", *(_BYTE *)(a1 + 353));
  v7 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_90:
    if ((v7 & 0x10000000000000) == 0)
      goto LABEL_91;
    goto LABEL_193;
  }
LABEL_192:
  PB::TextFormatter::format(this, "skiingPressureChangeOverEpochThreshold", *(float *)(a1 + 244));
  v7 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_91:
    if ((v7 & 0x20000000000000) == 0)
      goto LABEL_92;
    goto LABEL_194;
  }
LABEL_193:
  PB::TextFormatter::format(this, "staticCountThreshold", *(_DWORD *)(a1 + 248));
  v7 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_92:
    if ((v7 & 0x40000000000000) == 0)
      goto LABEL_93;
    goto LABEL_195;
  }
LABEL_194:
  PB::TextFormatter::format(this, "staticGpsCount", *(_DWORD *)(a1 + 252));
  v7 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_93:
    if ((v7 & 0x80000000000000) == 0)
      goto LABEL_94;
    goto LABEL_196;
  }
LABEL_195:
  PB::TextFormatter::format(this, "staticGpsCountTotal", *(_DWORD *)(a1 + 256));
  v7 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_94:
    if ((v7 & 0x100000000000000) == 0)
      goto LABEL_95;
    goto LABEL_197;
  }
LABEL_196:
  PB::TextFormatter::format(this, "stationaryCountMissingAsNoOpThreshold", *(_DWORD *)(a1 + 260));
  v7 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_95:
    if ((v7 & 0x40) == 0)
      goto LABEL_96;
    goto LABEL_198;
  }
LABEL_197:
  PB::TextFormatter::format(this, "stepCountEventTimestamp", *(_DWORD *)(a1 + 264));
  v7 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_96:
    if ((v7 & 0x200000000000000) == 0)
      goto LABEL_97;
    goto LABEL_199;
  }
LABEL_198:
  PB::TextFormatter::format(this, "stepCountEventTimestamp64", *(_QWORD *)(a1 + 56));
  v7 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_97:
    if ((v7 & 0x400000000000000) == 0)
      goto LABEL_98;
    goto LABEL_200;
  }
LABEL_199:
  PB::TextFormatter::format(this, "stepsCadence", *(float *)(a1 + 268));
  v7 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_98:
    if ((v7 & 0x800000000000000) == 0)
      goto LABEL_99;
    goto LABEL_201;
  }
LABEL_200:
  PB::TextFormatter::format(this, "stepsCadenceThreshold", *(float *)(a1 + 272));
  v7 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_99:
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_100;
    goto LABEL_202;
  }
LABEL_201:
  PB::TextFormatter::format(this, "stepsCount", *(_DWORD *)(a1 + 276));
  v7 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_100:
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_101;
    goto LABEL_203;
  }
LABEL_202:
  PB::TextFormatter::format(this, "stepsCountThreshold", *(_DWORD *)(a1 + 280));
  v7 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x4000000000000000) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
LABEL_203:
  PB::TextFormatter::format(this, "stepsDeescalatedAtOpp", *(_DWORD *)(a1 + 284));
  if ((*v5 & 0x4000000000000000) != 0)
LABEL_102:
    PB::TextFormatter::format(this, "stepsEpochCount", *(float *)(a1 + 288));
LABEL_103:
  v8 = *v5;
  if (*v5 < 0)
  {
    PB::TextFormatter::format(this, "stepsPerMinute", *(float *)(a1 + 292));
    v8 = *v5;
    v9 = *(_QWORD *)(a1 + 364);
    if ((v9 & 1) == 0)
      goto LABEL_207;
    goto LABEL_206;
  }
  v9 = *(_QWORD *)(a1 + 364);
  if ((v9 & 1) != 0)
  {
LABEL_206:
    PB::TextFormatter::format(this, "stepsPerMinuteThreshold", *(float *)(a1 + 296));
    v8 = *v5;
    v9 = *(_QWORD *)(a1 + 364);
  }
LABEL_207:
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(this, "stepsSecondOpportunityLookbackLength", *(_DWORD *)(a1 + 300));
    v9 = *(_QWORD *)(a1 + 364);
    if ((*v5 & 0x80) == 0)
    {
LABEL_209:
      if ((v9 & 4) == 0)
        goto LABEL_210;
      goto LABEL_216;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_209;
  }
  PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 64));
  v9 = *(_QWORD *)(a1 + 364);
  if ((v9 & 4) == 0)
  {
LABEL_210:
    if ((v9 & 8) == 0)
      goto LABEL_211;
LABEL_217:
    PB::TextFormatter::format(this, "ushaCumulativeRotationThreshold", *(float *)(a1 + 308));
    if ((*(_QWORD *)(a1 + 364) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_212;
  }
LABEL_216:
  PB::TextFormatter::format(this, "triggerClusterDeescalationWindowBoundary", *(_DWORD *)(a1 + 304));
  v9 = *(_QWORD *)(a1 + 364);
  if ((v9 & 8) != 0)
    goto LABEL_217;
LABEL_211:
  if ((v9 & 0x10) != 0)
LABEL_212:
    PB::TextFormatter::format(this, "ushaPeakPressureThreshold", *(float *)(a1 + 312));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015900D0(_DWORD *a1, PB::Reader *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t result;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  char v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  unint64_t v231;
  unint64_t v232;
  int v233;
  BOOL v234;
  unint64_t v235;
  unint64_t v236;
  int v237;
  BOOL v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char v242;
  unsigned int v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char v250;
  unsigned int v251;
  uint64_t v252;
  unint64_t v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  unint64_t v261;
  char v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  BOOL v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  BOOL v286;
  unint64_t v287;
  unint64_t v288;
  int v289;
  BOOL v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  BOOL v294;
  unint64_t v295;
  unint64_t v296;
  int v297;
  BOOL v298;
  unint64_t v299;
  unint64_t v300;
  int v301;
  BOOL v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  BOOL v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char v310;
  unsigned int v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  unint64_t v315;
  unint64_t v316;
  int v317;
  BOOL v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  BOOL v322;
  unint64_t v323;
  unint64_t v324;
  int v325;
  BOOL v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  char v330;
  unsigned int v331;
  uint64_t v332;
  unint64_t v333;
  char v334;
  unint64_t v335;
  unint64_t v336;
  int v337;
  BOOL v338;
  unint64_t v339;
  unint64_t v340;
  int v341;
  BOOL v342;
  unint64_t v343;
  unint64_t v344;
  int v345;
  BOOL v346;
  unint64_t v347;
  unint64_t v348;
  int v349;
  BOOL v350;
  unint64_t v351;
  unint64_t v352;
  int v353;
  BOOL v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  char v358;
  unsigned int v359;
  uint64_t v360;
  unint64_t v361;
  char v362;
  unint64_t v363;
  unint64_t v364;
  int v365;
  BOOL v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  BOOL v370;
  unint64_t v371;
  unint64_t v372;
  int v373;
  BOOL v374;
  unint64_t v375;
  unint64_t v376;
  int v377;
  BOOL v378;
  unint64_t v379;
  unint64_t v380;
  int v381;
  BOOL v382;
  unint64_t v383;
  unint64_t v384;
  int v385;
  BOOL v386;
  unint64_t v387;
  unint64_t v388;
  int v389;
  BOOL v390;
  unint64_t v391;
  unint64_t v392;
  int v393;
  BOOL v394;
  unint64_t v395;
  unint64_t v396;
  int v397;
  BOOL v398;
  unint64_t v399;
  unint64_t v400;
  int v401;
  BOOL v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  BOOL v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  char v410;
  unsigned int v411;
  uint64_t v412;
  unint64_t v413;
  char v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  char v419;
  unsigned int v420;
  uint64_t v421;
  unint64_t v422;
  char v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  char v427;
  unsigned int v428;
  uint64_t v429;
  unint64_t v430;
  char v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  char v435;
  unsigned int v436;
  uint64_t v437;
  unint64_t v438;
  char v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  char v448;
  unsigned int v449;
  uint64_t v450;
  unint64_t v451;
  char v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  char v456;
  unsigned int v457;
  uint64_t v458;
  unint64_t v459;
  char v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  char v464;
  unsigned int v465;
  uint64_t v466;
  unint64_t v467;
  char v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  char v472;
  unsigned int v473;
  uint64_t v474;
  unint64_t v475;
  char v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  char v480;
  unsigned int v481;
  uint64_t v482;
  unint64_t v483;
  char v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  char v488;
  unsigned int v489;
  uint64_t v490;
  unint64_t v491;
  char v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  char v496;
  unsigned int v497;
  uint64_t v498;
  unint64_t v499;
  char v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  char v504;
  unsigned int v505;
  uint64_t v506;
  unint64_t v507;
  char v508;
  unint64_t v509;
  unint64_t v510;
  int v511;
  BOOL v512;
  unint64_t v513;
  unint64_t v514;
  int v515;
  BOOL v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  char v520;
  unsigned int v521;
  uint64_t v522;
  unint64_t v523;
  char v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  char v528;
  unsigned int v529;
  uint64_t v530;
  unint64_t v531;
  char v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  char v536;
  unsigned int v537;
  uint64_t v538;
  unint64_t v539;
  char v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  char v544;
  unsigned int v545;
  uint64_t v546;
  unint64_t v547;
  char v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  char v552;
  unsigned int v553;
  uint64_t v554;
  unint64_t v555;
  char v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  char v560;
  unsigned int v561;
  uint64_t v562;
  unint64_t v563;
  char v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  char v568;
  unsigned int v569;
  uint64_t v570;
  unint64_t v571;
  char v572;
  unint64_t v573;
  unint64_t v575;
  unint64_t v576;
  uint64_t v577;
  char v578;
  unsigned int v579;
  uint64_t v580;
  unint64_t v581;
  char v582;
  char v583;
  unsigned int v584;
  unint64_t v585;
  char v586;
  char v587;
  unsigned int v588;
  unint64_t v589;
  char v590;
  char v591;
  unsigned int v592;
  unint64_t v593;
  char v594;
  char v595;
  unsigned int v596;
  unint64_t v597;
  char v598;
  char v599;
  unsigned int v600;
  unint64_t v601;
  char v602;
  char v603;
  unsigned int v604;
  unint64_t v605;
  char v606;
  char v607;
  unsigned int v608;
  unint64_t v609;
  char v610;
  char v611;
  unsigned int v612;
  unint64_t v613;
  char v614;
  char v615;
  unsigned int v616;
  unint64_t v617;
  char v618;
  char v619;
  unsigned int v620;
  unint64_t v621;
  char v622;
  char v623;
  unsigned int v624;
  unint64_t v625;
  char v626;
  char v627;
  unsigned int v628;
  unint64_t v629;
  char v630;
  char v631;
  unsigned int v632;
  unint64_t v633;
  char v634;
  char v635;
  unsigned int v636;
  unint64_t v637;
  char v638;
  char v639;
  unsigned int v640;
  unint64_t v641;
  char v642;
  char v643;
  unsigned int v644;
  unint64_t v645;
  char v646;
  char v647;
  unsigned int v648;
  unint64_t v649;
  char v650;
  char v651;
  unsigned int v652;
  unint64_t v653;
  char v654;
  char v655;
  unsigned int v656;
  unint64_t v657;
  char v658;
  char v659;
  unsigned int v660;
  unint64_t v661;
  char v662;
  char v663;
  unsigned int v664;
  unint64_t v665;
  char v666;
  char v667;
  unsigned int v668;
  unint64_t v669;
  char v670;
  char v671;
  unsigned int v672;
  unint64_t v673;
  char v674;
  char v675;
  unsigned int v676;
  unint64_t v677;
  char v678;
  char v679;
  unsigned int v680;
  unint64_t v681;
  char v682;
  char v683;
  unsigned int v684;
  unint64_t v685;
  char v686;
  char v687;
  unsigned int v688;
  unint64_t v689;
  char v690;
  char v691;
  unsigned int v692;
  unint64_t v693;
  char v694;
  char v695;
  unsigned int v696;
  unint64_t v697;
  char v698;
  char v699;
  unsigned int v700;
  unint64_t v701;
  char v702;
  char v703;
  unsigned int v704;
  unint64_t v705;
  char v706;
  char v707;
  unsigned int v708;
  unint64_t v709;
  char v710;
  char v711;
  unsigned int v712;
  unint64_t v713;
  char v714;
  char v715;
  unsigned int v716;
  unint64_t v717;
  char v718;
  char v719;
  unsigned int v720;
  unint64_t v721;
  char v722;
  char v723;
  unsigned int v724;
  unint64_t v725;
  char v726;
  char v727;
  unsigned int v728;
  unint64_t v729;
  char v730;
  char v731;
  unsigned int v732;
  unint64_t v733;
  char v734;
  char v735;
  unsigned int v736;
  unint64_t v737;
  char v738;
  char v739;
  unsigned int v740;
  unint64_t v741;
  char v742;
  char v743;
  unsigned int v744;
  unint64_t v745;
  char v746;
  char v747;
  unsigned int v748;
  unint64_t v749;
  char v750;
  char v751;
  unsigned int v752;
  unint64_t v753;
  char v754;
  char v755;
  unsigned int v756;
  unint64_t v757;
  char v758;
  char v759;
  unsigned int v760;
  unint64_t v761;
  char v762;
  char v763;
  unsigned int v764;
  unint64_t v765;
  char v766;
  _BYTE *v767;

  v10 = (unint64_t *)((char *)this + 8);
  v9 = *((_QWORD *)this + 1);
  v12 = (char *)this + 24;
  v11 = *((unsigned __int8 *)this + 24);
  v13 = *((_QWORD *)this + 2);
  if (v9 < v13 && v11 == 0)
  {
    v17 = a1;
    v18 = a1 + 89;
    v767 = (char *)this + 24;
    do
    {
      v19 = *(_QWORD *)this;
      if (v9 > 0xFFFFFFFFFFFFFFF5 || v9 + 10 > v13)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        if (v9 > v13)
          v13 = v9;
        while (1)
        {
          if (v13 == v9)
          {
            v22 = 0;
            *v12 = 1;
            goto LABEL_25;
          }
          v29 = v9 + 1;
          v30 = *(_BYTE *)(v19 + v9);
          *v10 = v29;
          v28 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
            break;
          v26 += 7;
          v9 = v29;
          v25 = v27++ > 8;
          if (v25)
          {
LABEL_20:
            v22 = 0;
            goto LABEL_25;
          }
        }
        if (*v12)
          v22 = 0;
        else
          v22 = v28;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = v9 + 1;
          *v10 = v9 + 1;
          v24 = *(_BYTE *)(v19 + v9);
          v22 |= (unint64_t)(v24 & 0x7F) << v20;
          if ((v24 & 0x80) == 0)
            break;
          v20 += 7;
          v9 = v23;
          v25 = v21++ > 8;
          if (v25)
            goto LABEL_20;
        }
      }
LABEL_25:
      v31 = v22 & 7;
      v11 = *v12;
      if (*v12)
        v32 = 1;
      else
        v32 = v31 == 4;
      if (v32)
        break;
      v33 = v22 >> 3;
      if ((int)(v22 >> 3) > 400)
      {
        if ((int)v33 <= 900)
        {
          if ((int)v33 > 600)
          {
            if ((int)v33 > 700)
            {
              switch((int)v33)
              {
                case 801:
                  *v18 |= 0x100000uLL;
                  v68 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[30] = *(_DWORD *)(*(_QWORD *)this + v68);
                  goto LABEL_942;
                case 802:
                  *v18 |= 0x400uLL;
                  v440 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v440 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[20] = *(_DWORD *)(*(_QWORD *)this + v440);
                  goto LABEL_942;
                case 803:
                  *v18 |= 0x200000uLL;
                  v441 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v441 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[31] = *(_DWORD *)(*(_QWORD *)this + v441);
                  goto LABEL_942;
                case 804:
                  *v18 |= 0x800uLL;
                  v442 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v442 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[21] = *(_DWORD *)(*(_QWORD *)this + v442);
LABEL_942:
                  *((_QWORD *)this + 1) += 4;
                  break;
                default:
                  if ((_DWORD)v33 == 701)
                  {
                    *v18 |= 0x800000000000uLL;
                    v461 = *((_QWORD *)this + 1);
                    v462 = *((_QWORD *)this + 2);
                    v463 = *(_QWORD *)this;
                    if (v461 > 0xFFFFFFFFFFFFFFF5 || v461 + 10 > v462)
                    {
                      v707 = 0;
                      v708 = 0;
                      v466 = 0;
                      if (v462 <= v461)
                        v462 = *((_QWORD *)this + 1);
                      while (1)
                      {
                        if (v462 == v461)
                        {
                          LODWORD(v466) = 0;
                          *v12 = 1;
                          goto LABEL_1070;
                        }
                        v709 = v461 + 1;
                        v710 = *(_BYTE *)(v463 + v461);
                        *v10 = v709;
                        v466 |= (unint64_t)(v710 & 0x7F) << v707;
                        if ((v710 & 0x80) == 0)
                          break;
                        v707 += 7;
                        v461 = v709;
                        v25 = v708++ > 8;
                        if (v25)
                        {
LABEL_835:
                          LODWORD(v466) = 0;
                          goto LABEL_1070;
                        }
                      }
                      if (*v12)
                        LODWORD(v466) = 0;
                    }
                    else
                    {
                      v464 = 0;
                      v465 = 0;
                      v466 = 0;
                      while (1)
                      {
                        v467 = v461 + 1;
                        *v10 = v461 + 1;
                        v468 = *(_BYTE *)(v463 + v461);
                        v466 |= (unint64_t)(v468 & 0x7F) << v464;
                        if ((v468 & 0x80) == 0)
                          break;
                        v464 += 7;
                        v461 = v467;
                        v25 = v465++ > 8;
                        if (v25)
                          goto LABEL_835;
                      }
                    }
LABEL_1070:
                    v17[57] = v466;
                  }
                  else
                  {
                    if ((_DWORD)v33 != 702)
                      goto LABEL_141;
                    *v18 |= 0x1000000000000uLL;
                    v78 = *((_QWORD *)this + 1);
                    v79 = *((_QWORD *)this + 2);
                    v80 = *(_QWORD *)this;
                    if (v78 > 0xFFFFFFFFFFFFFFF5 || v78 + 10 > v79)
                    {
                      v611 = 0;
                      v612 = 0;
                      v83 = 0;
                      if (v79 <= v78)
                        v79 = *((_QWORD *)this + 1);
                      v12 = v767;
                      v17 = a1;
                      while (1)
                      {
                        if (v79 == v78)
                        {
                          LODWORD(v83) = 0;
                          *v767 = 1;
                          goto LABEL_998;
                        }
                        v613 = v78 + 1;
                        v614 = *(_BYTE *)(v80 + v78);
                        *v10 = v613;
                        v83 |= (unint64_t)(v614 & 0x7F) << v611;
                        if ((v614 & 0x80) == 0)
                          break;
                        v611 += 7;
                        v78 = v613;
                        v25 = v612++ > 8;
                        if (v25)
                        {
LABEL_596:
                          LODWORD(v83) = 0;
                          goto LABEL_998;
                        }
                      }
                      if (*v767)
                        LODWORD(v83) = 0;
                    }
                    else
                    {
                      v81 = 0;
                      v82 = 0;
                      v83 = 0;
                      v12 = v767;
                      v17 = a1;
                      while (1)
                      {
                        v84 = v78 + 1;
                        *v10 = v78 + 1;
                        v85 = *(_BYTE *)(v80 + v78);
                        v83 |= (unint64_t)(v85 & 0x7F) << v81;
                        if ((v85 & 0x80) == 0)
                          break;
                        v81 += 7;
                        v78 = v84;
                        v25 = v82++ > 8;
                        if (v25)
                          goto LABEL_596;
                      }
                    }
LABEL_998:
                    v17[58] = v83;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v33)
              {
                case 601:
                  v18[1] |= 0x400uLL;
                  v56 = *((_QWORD *)this + 1);
                  if (v56 >= *((_QWORD *)this + 2))
                  {
                    v59 = 0;
                    v12 = v767;
                    v17 = a1;
                    *v767 = 1;
                  }
                  else
                  {
                    v57 = v56 + 1;
                    v58 = *(unsigned __int8 *)(*(_QWORD *)this + v56);
                    *((_QWORD *)this + 1) = v57;
                    v59 = v58 != 0;
                    v12 = v767;
                    v17 = a1;
                  }
                  *((_BYTE *)v17 + 321) = v59;
                  goto LABEL_514;
                case 602:
                  *v18 |= 0x4000uLL;
                  v407 = *((_QWORD *)this + 1);
                  v408 = *((_QWORD *)this + 2);
                  v409 = *(_QWORD *)this;
                  if (v407 <= 0xFFFFFFFFFFFFFFF5 && v407 + 10 <= v408)
                  {
                    v410 = 0;
                    v411 = 0;
                    v412 = 0;
                    v12 = v767;
                    v17 = a1;
                    do
                    {
                      v413 = v407 + 1;
                      *v10 = v407 + 1;
                      v414 = *(_BYTE *)(v409 + v407);
                      v412 |= (unint64_t)(v414 & 0x7F) << v410;
                      if ((v414 & 0x80) == 0)
                        goto LABEL_1052;
                      v410 += 7;
                      v407 = v413;
                      v25 = v411++ > 8;
                    }
                    while (!v25);
LABEL_788:
                    LODWORD(v412) = 0;
                    goto LABEL_1052;
                  }
                  v683 = 0;
                  v684 = 0;
                  v412 = 0;
                  if (v408 <= v407)
                    v408 = *((_QWORD *)this + 1);
                  v12 = v767;
                  v17 = a1;
                  while (2)
                  {
                    if (v408 == v407)
                    {
                      LODWORD(v412) = 0;
                      *v767 = 1;
                    }
                    else
                    {
                      v685 = v407 + 1;
                      v686 = *(_BYTE *)(v409 + v407);
                      *v10 = v685;
                      v412 |= (unint64_t)(v686 & 0x7F) << v683;
                      if (v686 < 0)
                      {
                        v683 += 7;
                        v407 = v685;
                        v25 = v684++ > 8;
                        if (v25)
                          goto LABEL_788;
                        continue;
                      }
                      if (*v767)
                        LODWORD(v412) = 0;
                    }
                    break;
                  }
LABEL_1052:
                  v17[24] = v412;
                  goto LABEL_514;
                case 603:
                  *v18 |= 0x1000uLL;
                  v415 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v415 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_401;
                  v17 = a1;
                  a1[22] = *(_DWORD *)(*(_QWORD *)this + v415);
                  goto LABEL_940;
                case 604:
                  *v18 |= 0x100000000000uLL;
                  v416 = *((_QWORD *)this + 1);
                  v417 = *((_QWORD *)this + 2);
                  v418 = *(_QWORD *)this;
                  if (v416 <= 0xFFFFFFFFFFFFFFF5 && v416 + 10 <= v417)
                  {
                    v419 = 0;
                    v420 = 0;
                    v421 = 0;
                    v12 = v767;
                    v17 = a1;
                    do
                    {
                      v422 = v416 + 1;
                      *v10 = v416 + 1;
                      v423 = *(_BYTE *)(v418 + v416);
                      v421 |= (unint64_t)(v423 & 0x7F) << v419;
                      if ((v423 & 0x80) == 0)
                        goto LABEL_1055;
                      v419 += 7;
                      v416 = v422;
                      v25 = v420++ > 8;
                    }
                    while (!v25);
LABEL_796:
                    LODWORD(v421) = 0;
                    goto LABEL_1055;
                  }
                  v687 = 0;
                  v688 = 0;
                  v421 = 0;
                  if (v417 <= v416)
                    v417 = *((_QWORD *)this + 1);
                  v12 = v767;
                  v17 = a1;
                  while (2)
                  {
                    if (v417 == v416)
                    {
                      LODWORD(v421) = 0;
                      *v767 = 1;
                    }
                    else
                    {
                      v689 = v416 + 1;
                      v690 = *(_BYTE *)(v418 + v416);
                      *v10 = v689;
                      v421 |= (unint64_t)(v690 & 0x7F) << v687;
                      if (v690 < 0)
                      {
                        v687 += 7;
                        v416 = v689;
                        v25 = v688++ > 8;
                        if (v25)
                          goto LABEL_796;
                        continue;
                      }
                      if (*v767)
                        LODWORD(v421) = 0;
                    }
                    break;
                  }
LABEL_1055:
                  v17[54] = v421;
                  goto LABEL_514;
                case 605:
                  *v18 |= 0x100000000000000uLL;
                  v424 = *((_QWORD *)this + 1);
                  v425 = *((_QWORD *)this + 2);
                  v426 = *(_QWORD *)this;
                  if (v424 <= 0xFFFFFFFFFFFFFFF5 && v424 + 10 <= v425)
                  {
                    v427 = 0;
                    v428 = 0;
                    v429 = 0;
                    v12 = v767;
                    v17 = a1;
                    do
                    {
                      v430 = v424 + 1;
                      *v10 = v424 + 1;
                      v431 = *(_BYTE *)(v426 + v424);
                      v429 |= (unint64_t)(v431 & 0x7F) << v427;
                      if ((v431 & 0x80) == 0)
                        goto LABEL_1058;
                      v427 += 7;
                      v424 = v430;
                      v25 = v428++ > 8;
                    }
                    while (!v25);
LABEL_804:
                    LODWORD(v429) = 0;
                    goto LABEL_1058;
                  }
                  v691 = 0;
                  v692 = 0;
                  v429 = 0;
                  if (v425 <= v424)
                    v425 = *((_QWORD *)this + 1);
                  v12 = v767;
                  v17 = a1;
                  while (2)
                  {
                    if (v425 == v424)
                    {
                      LODWORD(v429) = 0;
                      *v767 = 1;
                    }
                    else
                    {
                      v693 = v424 + 1;
                      v694 = *(_BYTE *)(v426 + v424);
                      *v10 = v693;
                      v429 |= (unint64_t)(v694 & 0x7F) << v691;
                      if (v694 < 0)
                      {
                        v691 += 7;
                        v424 = v693;
                        v25 = v692++ > 8;
                        if (v25)
                          goto LABEL_804;
                        continue;
                      }
                      if (*v767)
                        LODWORD(v429) = 0;
                    }
                    break;
                  }
LABEL_1058:
                  v17[66] = v429;
                  goto LABEL_514;
                case 606:
                  *v18 |= 0x40uLL;
                  v432 = *((_QWORD *)this + 1);
                  v433 = *((_QWORD *)this + 2);
                  v434 = *(_QWORD *)this;
                  if (v432 <= 0xFFFFFFFFFFFFFFF5 && v432 + 10 <= v433)
                  {
                    v435 = 0;
                    v436 = 0;
                    v437 = 0;
                    v12 = v767;
                    v17 = a1;
                    do
                    {
                      v438 = v432 + 1;
                      *v10 = v432 + 1;
                      v439 = *(_BYTE *)(v434 + v432);
                      v437 |= (unint64_t)(v439 & 0x7F) << v435;
                      if ((v439 & 0x80) == 0)
                        goto LABEL_1061;
                      v435 += 7;
                      v432 = v438;
                      v25 = v436++ > 8;
                    }
                    while (!v25);
LABEL_812:
                    v437 = 0;
                    goto LABEL_1061;
                  }
                  v695 = 0;
                  v696 = 0;
                  v437 = 0;
                  if (v433 <= v432)
                    v433 = *((_QWORD *)this + 1);
                  v12 = v767;
                  v17 = a1;
                  break;
                default:
                  goto LABEL_141;
              }
              while (1)
              {
                if (v433 == v432)
                {
                  v437 = 0;
                  *v767 = 1;
                  goto LABEL_1061;
                }
                v697 = v432 + 1;
                v698 = *(_BYTE *)(v434 + v432);
                *v10 = v697;
                v437 |= (unint64_t)(v698 & 0x7F) << v695;
                if ((v698 & 0x80) == 0)
                  break;
                v695 += 7;
                v432 = v697;
                v25 = v696++ > 8;
                if (v25)
                  goto LABEL_812;
              }
              if (*v767)
                v437 = 0;
LABEL_1061:
              *((_QWORD *)v17 + 7) = v437;
            }
          }
          else
          {
            switch((int)v33)
            {
              case 401:
                *v18 |= 0x20000000000000uLL;
                v36 = *((_QWORD *)this + 1);
                v37 = *((_QWORD *)this + 2);
                v38 = *(_QWORD *)this;
                if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
                {
                  v39 = 0;
                  v40 = 0;
                  v41 = 0;
                  do
                  {
                    v42 = v36 + 1;
                    *v10 = v36 + 1;
                    v43 = *(_BYTE *)(v38 + v36);
                    v41 |= (unint64_t)(v43 & 0x7F) << v39;
                    if ((v43 & 0x80) == 0)
                      goto LABEL_992;
                    v39 += 7;
                    v36 = v42;
                    v25 = v40++ > 8;
                  }
                  while (!v25);
LABEL_576:
                  LODWORD(v41) = 0;
                  goto LABEL_992;
                }
                v603 = 0;
                v604 = 0;
                v41 = 0;
                if (v37 <= v36)
                  v37 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v37 == v36)
                  {
                    LODWORD(v41) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v605 = v36 + 1;
                    v606 = *(_BYTE *)(v38 + v36);
                    *v10 = v605;
                    v41 |= (unint64_t)(v606 & 0x7F) << v603;
                    if (v606 < 0)
                    {
                      v603 += 7;
                      v36 = v605;
                      v25 = v604++ > 8;
                      if (v25)
                        goto LABEL_576;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v41) = 0;
                  }
                  break;
                }
LABEL_992:
                v17[63] = v41;
                goto LABEL_514;
              case 402:
                *v18 |= 0x40000000000000uLL;
                v207 = *((_QWORD *)this + 1);
                v208 = *((_QWORD *)this + 2);
                v209 = *(_QWORD *)this;
                if (v207 <= 0xFFFFFFFFFFFFFFF5 && v207 + 10 <= v208)
                {
                  v210 = 0;
                  v211 = 0;
                  v212 = 0;
                  do
                  {
                    v213 = v207 + 1;
                    *v10 = v207 + 1;
                    v214 = *(_BYTE *)(v209 + v207);
                    v212 |= (unint64_t)(v214 & 0x7F) << v210;
                    if ((v214 & 0x80) == 0)
                      goto LABEL_1025;
                    v210 += 7;
                    v207 = v213;
                    v25 = v211++ > 8;
                  }
                  while (!v25);
LABEL_659:
                  LODWORD(v212) = 0;
                  goto LABEL_1025;
                }
                v647 = 0;
                v648 = 0;
                v212 = 0;
                if (v208 <= v207)
                  v208 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v208 == v207)
                  {
                    LODWORD(v212) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v649 = v207 + 1;
                    v650 = *(_BYTE *)(v209 + v207);
                    *v10 = v649;
                    v212 |= (unint64_t)(v650 & 0x7F) << v647;
                    if (v650 < 0)
                    {
                      v647 += 7;
                      v207 = v649;
                      v25 = v648++ > 8;
                      if (v25)
                        goto LABEL_659;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v212) = 0;
                  }
                  break;
                }
LABEL_1025:
                v17[64] = v212;
                goto LABEL_514;
              case 403:
                *v18 |= 0x4000000uLL;
                v215 = *((_QWORD *)this + 1);
                v216 = *((_QWORD *)this + 2);
                v217 = *(_QWORD *)this;
                if (v215 <= 0xFFFFFFFFFFFFFFF5 && v215 + 10 <= v216)
                {
                  v218 = 0;
                  v219 = 0;
                  v220 = 0;
                  do
                  {
                    v221 = v215 + 1;
                    *v10 = v215 + 1;
                    v222 = *(_BYTE *)(v217 + v215);
                    v220 |= (unint64_t)(v222 & 0x7F) << v218;
                    if ((v222 & 0x80) == 0)
                      goto LABEL_1028;
                    v218 += 7;
                    v215 = v221;
                    v25 = v219++ > 8;
                  }
                  while (!v25);
LABEL_666:
                  LODWORD(v220) = 0;
                  goto LABEL_1028;
                }
                v651 = 0;
                v652 = 0;
                v220 = 0;
                if (v216 <= v215)
                  v216 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v216 == v215)
                  {
                    LODWORD(v220) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v653 = v215 + 1;
                    v654 = *(_BYTE *)(v217 + v215);
                    *v10 = v653;
                    v220 |= (unint64_t)(v654 & 0x7F) << v651;
                    if (v654 < 0)
                    {
                      v651 += 7;
                      v215 = v653;
                      v25 = v652++ > 8;
                      if (v25)
                        goto LABEL_666;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v220) = 0;
                  }
                  break;
                }
LABEL_1028:
                v17[36] = v220;
                goto LABEL_514;
              case 404:
                *v18 |= 0x8000000uLL;
                v223 = *((_QWORD *)this + 1);
                v224 = *((_QWORD *)this + 2);
                v225 = *(_QWORD *)this;
                if (v223 <= 0xFFFFFFFFFFFFFFF5 && v223 + 10 <= v224)
                {
                  v226 = 0;
                  v227 = 0;
                  v228 = 0;
                  do
                  {
                    v229 = v223 + 1;
                    *v10 = v223 + 1;
                    v230 = *(_BYTE *)(v225 + v223);
                    v228 |= (unint64_t)(v230 & 0x7F) << v226;
                    if ((v230 & 0x80) == 0)
                      goto LABEL_1031;
                    v226 += 7;
                    v223 = v229;
                    v25 = v227++ > 8;
                  }
                  while (!v25);
LABEL_673:
                  LODWORD(v228) = 0;
                  goto LABEL_1031;
                }
                v655 = 0;
                v656 = 0;
                v228 = 0;
                if (v224 <= v223)
                  v224 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v224 == v223)
                  {
                    LODWORD(v228) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v657 = v223 + 1;
                    v658 = *(_BYTE *)(v225 + v223);
                    *v10 = v657;
                    v228 |= (unint64_t)(v658 & 0x7F) << v655;
                    if (v658 < 0)
                    {
                      v655 += 7;
                      v223 = v657;
                      v25 = v656++ > 8;
                      if (v25)
                        goto LABEL_673;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v228) = 0;
                  }
                  break;
                }
LABEL_1031:
                v17[37] = v228;
                goto LABEL_514;
              case 405:
                v18[1] |= 0x20000uLL;
                v231 = *((_QWORD *)this + 1);
                if (v231 >= *((_QWORD *)this + 2))
                {
                  v234 = 0;
                  *v12 = 1;
                }
                else
                {
                  v232 = v231 + 1;
                  v233 = *(unsigned __int8 *)(*(_QWORD *)this + v231);
                  *((_QWORD *)this + 1) = v232;
                  v234 = v233 != 0;
                }
                *((_BYTE *)v17 + 328) = v234;
                goto LABEL_514;
              case 406:
                v18[1] |= 0x4000uLL;
                v235 = *((_QWORD *)this + 1);
                if (v235 >= *((_QWORD *)this + 2))
                {
                  v238 = 0;
                  *v12 = 1;
                }
                else
                {
                  v236 = v235 + 1;
                  v237 = *(unsigned __int8 *)(*(_QWORD *)this + v235);
                  *((_QWORD *)this + 1) = v236;
                  v238 = v237 != 0;
                }
                *((_BYTE *)v17 + 325) = v238;
                goto LABEL_514;
              case 407:
                *v18 |= 0x2000000000uLL;
                v239 = *((_QWORD *)this + 1);
                v240 = *((_QWORD *)this + 2);
                v241 = *(_QWORD *)this;
                if (v239 <= 0xFFFFFFFFFFFFFFF5 && v239 + 10 <= v240)
                {
                  v242 = 0;
                  v243 = 0;
                  v244 = 0;
                  do
                  {
                    v245 = v239 + 1;
                    *v10 = v239 + 1;
                    v246 = *(_BYTE *)(v241 + v239);
                    v244 |= (unint64_t)(v246 & 0x7F) << v242;
                    if ((v246 & 0x80) == 0)
                      goto LABEL_1034;
                    v242 += 7;
                    v239 = v245;
                    v25 = v243++ > 8;
                  }
                  while (!v25);
LABEL_684:
                  LODWORD(v244) = 0;
                  goto LABEL_1034;
                }
                v659 = 0;
                v660 = 0;
                v244 = 0;
                if (v240 <= v239)
                  v240 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v240 == v239)
                  {
                    LODWORD(v244) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v661 = v239 + 1;
                    v662 = *(_BYTE *)(v241 + v239);
                    *v10 = v661;
                    v244 |= (unint64_t)(v662 & 0x7F) << v659;
                    if (v662 < 0)
                    {
                      v659 += 7;
                      v239 = v661;
                      v25 = v660++ > 8;
                      if (v25)
                        goto LABEL_684;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v244) = 0;
                  }
                  break;
                }
LABEL_1034:
                v17[47] = v244;
                goto LABEL_514;
              case 408:
                *v18 |= 0x80000uLL;
                v247 = *((_QWORD *)this + 1);
                v248 = *((_QWORD *)this + 2);
                v249 = *(_QWORD *)this;
                if (v247 <= 0xFFFFFFFFFFFFFFF5 && v247 + 10 <= v248)
                {
                  v250 = 0;
                  v251 = 0;
                  v252 = 0;
                  do
                  {
                    v253 = v247 + 1;
                    *v10 = v247 + 1;
                    v254 = *(_BYTE *)(v249 + v247);
                    v252 |= (unint64_t)(v254 & 0x7F) << v250;
                    if ((v254 & 0x80) == 0)
                      goto LABEL_1037;
                    v250 += 7;
                    v247 = v253;
                    v25 = v251++ > 8;
                  }
                  while (!v25);
LABEL_691:
                  LODWORD(v252) = 0;
                  goto LABEL_1037;
                }
                v663 = 0;
                v664 = 0;
                v252 = 0;
                if (v248 <= v247)
                  v248 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v248 == v247)
                  {
                    LODWORD(v252) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v665 = v247 + 1;
                    v666 = *(_BYTE *)(v249 + v247);
                    *v10 = v665;
                    v252 |= (unint64_t)(v666 & 0x7F) << v663;
                    if (v666 < 0)
                    {
                      v663 += 7;
                      v247 = v665;
                      v25 = v664++ > 8;
                      if (v25)
                        goto LABEL_691;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v252) = 0;
                  }
                  break;
                }
LABEL_1037:
                v17[29] = v252;
                goto LABEL_514;
              case 409:
                *v18 |= 0x1000000000uLL;
                v255 = *((_QWORD *)this + 1);
                v256 = *((_QWORD *)this + 2);
                v257 = *(_QWORD *)this;
                if (v255 <= 0xFFFFFFFFFFFFFFF5 && v255 + 10 <= v256)
                {
                  v258 = 0;
                  v259 = 0;
                  v260 = 0;
                  do
                  {
                    v261 = v255 + 1;
                    *v10 = v255 + 1;
                    v262 = *(_BYTE *)(v257 + v255);
                    v260 |= (unint64_t)(v262 & 0x7F) << v258;
                    if ((v262 & 0x80) == 0)
                      goto LABEL_1040;
                    v258 += 7;
                    v255 = v261;
                    v25 = v259++ > 8;
                  }
                  while (!v25);
LABEL_698:
                  LODWORD(v260) = 0;
                  goto LABEL_1040;
                }
                v667 = 0;
                v668 = 0;
                v260 = 0;
                if (v256 <= v255)
                  v256 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v256 == v255)
                  {
                    LODWORD(v260) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v669 = v255 + 1;
                    v670 = *(_BYTE *)(v257 + v255);
                    *v10 = v669;
                    v260 |= (unint64_t)(v670 & 0x7F) << v667;
                    if (v670 < 0)
                    {
                      v667 += 7;
                      v255 = v669;
                      v25 = v668++ > 8;
                      if (v25)
                        goto LABEL_698;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v260) = 0;
                  }
                  break;
                }
LABEL_1040:
                v17[46] = v260;
                goto LABEL_514;
              default:
                switch((int)v33)
                {
                  case 501:
                    *v18 |= 0x4000000000000000uLL;
                    v69 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
                      goto LABEL_401;
                    v17 = a1;
                    a1[72] = *(_DWORD *)(*(_QWORD *)this + v69);
                    goto LABEL_940;
                  case 502:
                    *v18 |= 0x8000000000000000;
                    v443 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v443 + 4 > *((_QWORD *)this + 2))
                      goto LABEL_401;
                    v17 = a1;
                    a1[73] = *(_DWORD *)(*(_QWORD *)this + v443);
                    goto LABEL_940;
                  case 503:
                    *v18 |= 0x200000000000000uLL;
                    v444 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v444 + 4 > *((_QWORD *)this + 2))
                      goto LABEL_401;
                    v17 = a1;
                    a1[67] = *(_DWORD *)(*(_QWORD *)this + v444);
                    goto LABEL_940;
                  case 504:
                    *v18 |= 0x800000000000000uLL;
                    v445 = *((_QWORD *)this + 1);
                    v446 = *((_QWORD *)this + 2);
                    v447 = *(_QWORD *)this;
                    if (v445 <= 0xFFFFFFFFFFFFFFF5 && v445 + 10 <= v446)
                    {
                      v448 = 0;
                      v449 = 0;
                      v450 = 0;
                      v12 = v767;
                      v17 = a1;
                      do
                      {
                        v451 = v445 + 1;
                        *v10 = v445 + 1;
                        v452 = *(_BYTE *)(v447 + v445);
                        v450 |= (unint64_t)(v452 & 0x7F) << v448;
                        if ((v452 & 0x80) == 0)
                          goto LABEL_1064;
                        v448 += 7;
                        v445 = v451;
                        v25 = v449++ > 8;
                      }
                      while (!v25);
LABEL_820:
                      LODWORD(v450) = 0;
                      goto LABEL_1064;
                    }
                    v699 = 0;
                    v700 = 0;
                    v450 = 0;
                    if (v446 <= v445)
                      v446 = *((_QWORD *)this + 1);
                    v12 = v767;
                    v17 = a1;
                    while (2)
                    {
                      if (v446 == v445)
                      {
                        LODWORD(v450) = 0;
                        *v767 = 1;
                      }
                      else
                      {
                        v701 = v445 + 1;
                        v702 = *(_BYTE *)(v447 + v445);
                        *v10 = v701;
                        v450 |= (unint64_t)(v702 & 0x7F) << v699;
                        if (v702 < 0)
                        {
                          v699 += 7;
                          v445 = v701;
                          v25 = v700++ > 8;
                          if (v25)
                            goto LABEL_820;
                          continue;
                        }
                        if (*v767)
                          LODWORD(v450) = 0;
                      }
                      break;
                    }
LABEL_1064:
                    v17[69] = v450;
                    goto LABEL_514;
                  case 505:
                    *v18 |= 0x2000000000000000uLL;
                    v453 = *((_QWORD *)this + 1);
                    v454 = *((_QWORD *)this + 2);
                    v455 = *(_QWORD *)this;
                    if (v453 <= 0xFFFFFFFFFFFFFFF5 && v453 + 10 <= v454)
                    {
                      v456 = 0;
                      v457 = 0;
                      v458 = 0;
                      v12 = v767;
                      v17 = a1;
                      do
                      {
                        v459 = v453 + 1;
                        *v10 = v453 + 1;
                        v460 = *(_BYTE *)(v455 + v453);
                        v458 |= (unint64_t)(v460 & 0x7F) << v456;
                        if ((v460 & 0x80) == 0)
                          goto LABEL_1067;
                        v456 += 7;
                        v453 = v459;
                        v25 = v457++ > 8;
                      }
                      while (!v25);
LABEL_828:
                      LODWORD(v458) = 0;
                      goto LABEL_1067;
                    }
                    v703 = 0;
                    v704 = 0;
                    v458 = 0;
                    if (v454 <= v453)
                      v454 = *((_QWORD *)this + 1);
                    v12 = v767;
                    v17 = a1;
                    break;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            while (1)
            {
              if (v454 == v453)
              {
                LODWORD(v458) = 0;
                *v767 = 1;
                goto LABEL_1067;
              }
              v705 = v453 + 1;
              v706 = *(_BYTE *)(v455 + v453);
              *v10 = v705;
              v458 |= (unint64_t)(v706 & 0x7F) << v703;
              if ((v706 & 0x80) == 0)
                break;
              v703 += 7;
              v453 = v705;
              v25 = v704++ > 8;
              if (v25)
                goto LABEL_828;
            }
            if (*v767)
              LODWORD(v458) = 0;
LABEL_1067:
            v17[71] = v458;
          }
        }
        else if ((int)v33 <= 1200)
        {
          if ((int)v33 <= 1100)
          {
            switch((_DWORD)v33)
            {
              case 0x385:
                *v18 |= 0x100uLL;
                v123 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
                {
LABEL_401:
                  v12 = v767;
                  v17 = a1;
LABEL_513:
                  *v12 = 1;
                }
                else
                {
                  v17 = a1;
                  a1[18] = *(_DWORD *)(*(_QWORD *)this + v123);
LABEL_940:
                  *((_QWORD *)this + 1) += 4;
                  v12 = v767;
                }
                break;
              case 0x386:
                v18[1] |= 0x200000uLL;
                v124 = *((_QWORD *)this + 1);
                if (v124 >= *((_QWORD *)this + 2))
                {
                  v127 = 0;
                  v12 = v767;
                  v17 = a1;
                  *v767 = 1;
                }
                else
                {
                  v125 = v124 + 1;
                  v126 = *(unsigned __int8 *)(*(_QWORD *)this + v124);
                  *((_QWORD *)this + 1) = v125;
                  v127 = v126 != 0;
                  v12 = v767;
                  v17 = a1;
                }
                *((_BYTE *)v17 + 332) = v127;
                break;
              case 0x3E9:
                v18[1] |= 4uLL;
                v70 = *((_QWORD *)this + 1);
                v71 = *((_QWORD *)this + 2);
                v72 = *(_QWORD *)this;
                if (v70 > 0xFFFFFFFFFFFFFFF5 || v70 + 10 > v71)
                {
                  v587 = 0;
                  v588 = 0;
                  v75 = 0;
                  if (v71 <= v70)
                    v71 = *((_QWORD *)this + 1);
                  v12 = v767;
                  v17 = a1;
                  while (1)
                  {
                    if (v71 == v70)
                    {
                      LODWORD(v75) = 0;
                      *v767 = 1;
                      goto LABEL_953;
                    }
                    v589 = v70 + 1;
                    v590 = *(_BYTE *)(v72 + v70);
                    *v10 = v589;
                    v75 |= (unint64_t)(v590 & 0x7F) << v587;
                    if ((v590 & 0x80) == 0)
                      break;
                    v587 += 7;
                    v70 = v589;
                    v25 = v588++ > 8;
                    if (v25)
                    {
LABEL_541:
                      LODWORD(v75) = 0;
                      goto LABEL_953;
                    }
                  }
                  if (*v767)
                    LODWORD(v75) = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = 0;
                  v75 = 0;
                  v12 = v767;
                  v17 = a1;
                  while (1)
                  {
                    v76 = v70 + 1;
                    *v10 = v70 + 1;
                    v77 = *(_BYTE *)(v72 + v70);
                    v75 |= (unint64_t)(v77 & 0x7F) << v73;
                    if ((v77 & 0x80) == 0)
                      break;
                    v73 += 7;
                    v70 = v76;
                    v25 = v74++ > 8;
                    if (v25)
                      goto LABEL_541;
                  }
                }
LABEL_953:
                v17[76] = v75;
                break;
              default:
LABEL_141:
                v128 = v7;
                v129 = a6;
                v130 = v18;
                v131 = v8;
                v132 = a7;
                result = PB::Reader::skip(this, v33, v31, 0);
                a7 = v132;
                v8 = v131;
                v18 = v130;
                a6 = v129;
                v7 = v128;
                v12 = v767;
                v17 = a1;
                if (!(_DWORD)result)
                  return result;
                break;
            }
          }
          else
          {
            switch((int)v33)
            {
              case 1101:
                *v18 |= 0x10000000uLL;
                v60 = *((_QWORD *)this + 1);
                v61 = *((_QWORD *)this + 2);
                v62 = *(_QWORD *)this;
                if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
                {
                  v63 = 0;
                  v64 = 0;
                  v65 = 0;
                  v12 = v767;
                  v17 = a1;
                  do
                  {
                    v66 = v60 + 1;
                    *v10 = v60 + 1;
                    v67 = *(_BYTE *)(v62 + v60);
                    v65 |= (unint64_t)(v67 & 0x7F) << v63;
                    if ((v67 & 0x80) == 0)
                      goto LABEL_950;
                    v63 += 7;
                    v60 = v66;
                    v25 = v64++ > 8;
                  }
                  while (!v25);
LABEL_533:
                  LODWORD(v65) = 0;
                  goto LABEL_950;
                }
                v583 = 0;
                v584 = 0;
                v65 = 0;
                if (v61 <= v60)
                  v61 = *((_QWORD *)this + 1);
                v12 = v767;
                v17 = a1;
                while (2)
                {
                  if (v61 == v60)
                  {
                    LODWORD(v65) = 0;
                    *v767 = 1;
                  }
                  else
                  {
                    v585 = v60 + 1;
                    v586 = *(_BYTE *)(v62 + v60);
                    *v10 = v585;
                    v65 |= (unint64_t)(v586 & 0x7F) << v583;
                    if (v586 < 0)
                    {
                      v583 += 7;
                      v60 = v585;
                      v25 = v584++ > 8;
                      if (v25)
                        goto LABEL_533;
                      continue;
                    }
                    if (*v767)
                      LODWORD(v65) = 0;
                  }
                  break;
                }
LABEL_950:
                v17[38] = v65;
                goto LABEL_514;
              case 1102:
                *v18 |= 0x40000000uLL;
                v94 = *((_QWORD *)this + 1);
                v95 = *((_QWORD *)this + 2);
                v96 = *(_QWORD *)this;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  v12 = v767;
                  v17 = a1;
                  do
                  {
                    v100 = v94 + 1;
                    *v10 = v94 + 1;
                    v101 = *(_BYTE *)(v96 + v94);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0)
                      goto LABEL_956;
                    v97 += 7;
                    v94 = v100;
                    v25 = v98++ > 8;
                  }
                  while (!v25);
LABEL_549:
                  LODWORD(v99) = 0;
                  goto LABEL_956;
                }
                v591 = 0;
                v592 = 0;
                v99 = 0;
                if (v95 <= v94)
                  v95 = *((_QWORD *)this + 1);
                v12 = v767;
                v17 = a1;
                while (2)
                {
                  if (v95 == v94)
                  {
                    LODWORD(v99) = 0;
                    *v767 = 1;
                  }
                  else
                  {
                    v593 = v94 + 1;
                    v594 = *(_BYTE *)(v96 + v94);
                    *v10 = v593;
                    v99 |= (unint64_t)(v594 & 0x7F) << v591;
                    if (v594 < 0)
                    {
                      v591 += 7;
                      v94 = v593;
                      v25 = v592++ > 8;
                      if (v25)
                        goto LABEL_549;
                      continue;
                    }
                    if (*v767)
                      LODWORD(v99) = 0;
                  }
                  break;
                }
LABEL_956:
                v17[40] = v99;
                goto LABEL_514;
              case 1103:
                v18[1] |= 0x1000000000uLL;
                v102 = *((_QWORD *)this + 1);
                if (v102 >= *((_QWORD *)this + 2))
                {
                  v105 = 0;
                  v12 = v767;
                  v17 = a1;
                  *v767 = 1;
                }
                else
                {
                  v103 = v102 + 1;
                  v104 = *(unsigned __int8 *)(*(_QWORD *)this + v102);
                  *((_QWORD *)this + 1) = v103;
                  v105 = v104 != 0;
                  v12 = v767;
                  v17 = a1;
                }
                *((_BYTE *)v17 + 347) = v105;
                goto LABEL_514;
              case 1104:
                *v18 |= 0x80000000uLL;
                v106 = *((_QWORD *)this + 1);
                v107 = *((_QWORD *)this + 2);
                v108 = *(_QWORD *)this;
                if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
                {
                  v109 = 0;
                  v110 = 0;
                  v111 = 0;
                  v12 = v767;
                  v17 = a1;
                  do
                  {
                    v112 = v106 + 1;
                    *v10 = v106 + 1;
                    v113 = *(_BYTE *)(v108 + v106);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0)
                      goto LABEL_959;
                    v109 += 7;
                    v106 = v112;
                    v25 = v110++ > 8;
                  }
                  while (!v25);
LABEL_559:
                  LODWORD(v111) = 0;
                  goto LABEL_959;
                }
                v595 = 0;
                v596 = 0;
                v111 = 0;
                if (v107 <= v106)
                  v107 = *((_QWORD *)this + 1);
                v12 = v767;
                v17 = a1;
                while (2)
                {
                  if (v107 == v106)
                  {
                    LODWORD(v111) = 0;
                    *v767 = 1;
                  }
                  else
                  {
                    v597 = v106 + 1;
                    v598 = *(_BYTE *)(v108 + v106);
                    *v10 = v597;
                    v111 |= (unint64_t)(v598 & 0x7F) << v595;
                    if (v598 < 0)
                    {
                      v595 += 7;
                      v106 = v597;
                      v25 = v596++ > 8;
                      if (v25)
                        goto LABEL_559;
                      continue;
                    }
                    if (*v767)
                      LODWORD(v111) = 0;
                  }
                  break;
                }
LABEL_959:
                v17[41] = v111;
                goto LABEL_514;
              case 1105:
                *v18 |= 0x20000000uLL;
                v114 = *((_QWORD *)this + 1);
                v115 = *((_QWORD *)this + 2);
                v116 = *(_QWORD *)this;
                if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
                {
                  v117 = 0;
                  v118 = 0;
                  v119 = 0;
                  v12 = v767;
                  v17 = a1;
                  do
                  {
                    v120 = v114 + 1;
                    *v10 = v114 + 1;
                    v121 = *(_BYTE *)(v116 + v114);
                    v119 |= (unint64_t)(v121 & 0x7F) << v117;
                    if ((v121 & 0x80) == 0)
                      goto LABEL_962;
                    v117 += 7;
                    v114 = v120;
                    v25 = v118++ > 8;
                  }
                  while (!v25);
LABEL_567:
                  LODWORD(v119) = 0;
                  goto LABEL_962;
                }
                v599 = 0;
                v600 = 0;
                v119 = 0;
                if (v115 <= v114)
                  v115 = *((_QWORD *)this + 1);
                v12 = v767;
                v17 = a1;
                break;
              case 1106:
                *v18 |= 0x8000000000000uLL;
                v122 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_401;
                v17 = a1;
                a1[61] = *(_DWORD *)(*(_QWORD *)this + v122);
                goto LABEL_940;
              default:
                goto LABEL_141;
            }
            while (1)
            {
              if (v115 == v114)
              {
                LODWORD(v119) = 0;
                *v767 = 1;
                goto LABEL_962;
              }
              v601 = v114 + 1;
              v602 = *(_BYTE *)(v116 + v114);
              *v10 = v601;
              v119 |= (unint64_t)(v602 & 0x7F) << v599;
              if ((v602 & 0x80) == 0)
                break;
              v599 += 7;
              v114 = v601;
              v25 = v600++ > 8;
              if (v25)
                goto LABEL_567;
            }
            if (*v767)
              LODWORD(v119) = 0;
LABEL_962:
            v17[39] = v119;
          }
        }
        else
        {
          switch((int)v33)
          {
            case 1301:
              *v18 |= 0x8000uLL;
              v35 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
                goto LABEL_513;
              v17[25] = *(_DWORD *)(*(_QWORD *)this + v35);
              goto LABEL_942;
            case 1302:
              *v18 |= 0x40000000000uLL;
              v469 = *((_QWORD *)this + 1);
              v470 = *((_QWORD *)this + 2);
              v471 = *(_QWORD *)this;
              if (v469 <= 0xFFFFFFFFFFFFFFF5 && v469 + 10 <= v470)
              {
                v472 = 0;
                v473 = 0;
                v474 = 0;
                do
                {
                  v475 = v469 + 1;
                  *v10 = v469 + 1;
                  v476 = *(_BYTE *)(v471 + v469);
                  v474 |= (unint64_t)(v476 & 0x7F) << v472;
                  if ((v476 & 0x80) == 0)
                    goto LABEL_1078;
                  v472 += 7;
                  v469 = v475;
                  v25 = v473++ > 8;
                }
                while (!v25);
LABEL_850:
                LODWORD(v474) = 0;
                goto LABEL_1078;
              }
              v715 = 0;
              v716 = 0;
              v474 = 0;
              if (v470 <= v469)
                v470 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v470 == v469)
                {
                  LODWORD(v474) = 0;
                  *v12 = 1;
                }
                else
                {
                  v717 = v469 + 1;
                  v718 = *(_BYTE *)(v471 + v469);
                  *v10 = v717;
                  v474 |= (unint64_t)(v718 & 0x7F) << v715;
                  if (v718 < 0)
                  {
                    v715 += 7;
                    v469 = v717;
                    v25 = v716++ > 8;
                    if (v25)
                      goto LABEL_850;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v474) = 0;
                }
                break;
              }
LABEL_1078:
              v17[52] = v474;
              break;
            case 1303:
              *v18 |= 0x10000000000uLL;
              v477 = *((_QWORD *)this + 1);
              v478 = *((_QWORD *)this + 2);
              v479 = *(_QWORD *)this;
              if (v477 <= 0xFFFFFFFFFFFFFFF5 && v477 + 10 <= v478)
              {
                v480 = 0;
                v481 = 0;
                v482 = 0;
                do
                {
                  v483 = v477 + 1;
                  *v10 = v477 + 1;
                  v484 = *(_BYTE *)(v479 + v477);
                  v482 |= (unint64_t)(v484 & 0x7F) << v480;
                  if ((v484 & 0x80) == 0)
                    goto LABEL_1082;
                  v480 += 7;
                  v477 = v483;
                  v25 = v481++ > 8;
                }
                while (!v25);
LABEL_857:
                LODWORD(v482) = 0;
                goto LABEL_1082;
              }
              v719 = 0;
              v720 = 0;
              v482 = 0;
              if (v478 <= v477)
                v478 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v478 == v477)
                {
                  LODWORD(v482) = 0;
                  *v12 = 1;
                }
                else
                {
                  v721 = v477 + 1;
                  v722 = *(_BYTE *)(v479 + v477);
                  *v10 = v721;
                  v482 |= (unint64_t)(v722 & 0x7F) << v719;
                  if (v722 < 0)
                  {
                    v719 += 7;
                    v477 = v721;
                    v25 = v720++ > 8;
                    if (v25)
                      goto LABEL_857;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v482) = 0;
                }
                break;
              }
LABEL_1082:
              v17[50] = v482;
              break;
            case 1304:
              *v18 |= 0x800000000uLL;
              v485 = *((_QWORD *)this + 1);
              v486 = *((_QWORD *)this + 2);
              v487 = *(_QWORD *)this;
              if (v485 <= 0xFFFFFFFFFFFFFFF5 && v485 + 10 <= v486)
              {
                v488 = 0;
                v489 = 0;
                v490 = 0;
                do
                {
                  v491 = v485 + 1;
                  *v10 = v485 + 1;
                  v492 = *(_BYTE *)(v487 + v485);
                  v490 |= (unint64_t)(v492 & 0x7F) << v488;
                  if ((v492 & 0x80) == 0)
                    goto LABEL_1086;
                  v488 += 7;
                  v485 = v491;
                  v25 = v489++ > 8;
                }
                while (!v25);
LABEL_864:
                LODWORD(v490) = 0;
                goto LABEL_1086;
              }
              v723 = 0;
              v724 = 0;
              v490 = 0;
              if (v486 <= v485)
                v486 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v486 == v485)
                {
                  LODWORD(v490) = 0;
                  *v12 = 1;
                }
                else
                {
                  v725 = v485 + 1;
                  v726 = *(_BYTE *)(v487 + v485);
                  *v10 = v725;
                  v490 |= (unint64_t)(v726 & 0x7F) << v723;
                  if (v726 < 0)
                  {
                    v723 += 7;
                    v485 = v725;
                    v25 = v724++ > 8;
                    if (v25)
                      goto LABEL_864;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v490) = 0;
                }
                break;
              }
LABEL_1086:
              v17[45] = v490;
              break;
            case 1305:
              *v18 |= (unint64_t)&_mh_execute_header;
              v493 = *((_QWORD *)this + 1);
              v494 = *((_QWORD *)this + 2);
              v495 = *(_QWORD *)this;
              if (v493 <= 0xFFFFFFFFFFFFFFF5 && v493 + 10 <= v494)
              {
                v496 = 0;
                v497 = 0;
                v498 = 0;
                do
                {
                  v499 = v493 + 1;
                  *v10 = v493 + 1;
                  v500 = *(_BYTE *)(v495 + v493);
                  v498 |= (unint64_t)(v500 & 0x7F) << v496;
                  if ((v500 & 0x80) == 0)
                    goto LABEL_1090;
                  v496 += 7;
                  v493 = v499;
                  v25 = v497++ > 8;
                }
                while (!v25);
LABEL_871:
                LODWORD(v498) = 0;
                goto LABEL_1090;
              }
              v727 = 0;
              v728 = 0;
              v498 = 0;
              if (v494 <= v493)
                v494 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v494 == v493)
                {
                  LODWORD(v498) = 0;
                  *v12 = 1;
                }
                else
                {
                  v729 = v493 + 1;
                  v730 = *(_BYTE *)(v495 + v493);
                  *v10 = v729;
                  v498 |= (unint64_t)(v730 & 0x7F) << v727;
                  if (v730 < 0)
                  {
                    v727 += 7;
                    v493 = v729;
                    v25 = v728++ > 8;
                    if (v25)
                      goto LABEL_871;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v498) = 0;
                }
                break;
              }
LABEL_1090:
              v17[42] = v498;
              break;
            case 1306:
              *v18 |= 0x400000000uLL;
              v501 = *((_QWORD *)this + 1);
              v502 = *((_QWORD *)this + 2);
              v503 = *(_QWORD *)this;
              if (v501 <= 0xFFFFFFFFFFFFFFF5 && v501 + 10 <= v502)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                do
                {
                  v507 = v501 + 1;
                  *v10 = v501 + 1;
                  v508 = *(_BYTE *)(v503 + v501);
                  v506 |= (unint64_t)(v508 & 0x7F) << v504;
                  if ((v508 & 0x80) == 0)
                    goto LABEL_1094;
                  v504 += 7;
                  v501 = v507;
                  v25 = v505++ > 8;
                }
                while (!v25);
LABEL_878:
                LODWORD(v506) = 0;
                goto LABEL_1094;
              }
              v731 = 0;
              v732 = 0;
              v506 = 0;
              if (v502 <= v501)
                v502 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v502 == v501)
                {
                  LODWORD(v506) = 0;
                  *v12 = 1;
                }
                else
                {
                  v733 = v501 + 1;
                  v734 = *(_BYTE *)(v503 + v501);
                  *v10 = v733;
                  v506 |= (unint64_t)(v734 & 0x7F) << v731;
                  if (v734 < 0)
                  {
                    v731 += 7;
                    v501 = v733;
                    v25 = v732++ > 8;
                    if (v25)
                      goto LABEL_878;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v506) = 0;
                }
                break;
              }
LABEL_1094:
              v17[44] = v506;
              break;
            case 1307:
              v18[1] |= 0x100uLL;
              v509 = *((_QWORD *)this + 1);
              if (v509 >= *((_QWORD *)this + 2))
              {
                v512 = 0;
                *v12 = 1;
              }
              else
              {
                v510 = v509 + 1;
                v511 = *(unsigned __int8 *)(*(_QWORD *)this + v509);
                *((_QWORD *)this + 1) = v510;
                v512 = v511 != 0;
              }
              *((_BYTE *)v17 + 319) = v512;
              break;
            case 1308:
              v18[1] |= 0x40000uLL;
              v513 = *((_QWORD *)this + 1);
              if (v513 >= *((_QWORD *)this + 2))
              {
                v516 = 0;
                *v12 = 1;
              }
              else
              {
                v514 = v513 + 1;
                v515 = *(unsigned __int8 *)(*(_QWORD *)this + v513);
                *((_QWORD *)this + 1) = v514;
                v516 = v515 != 0;
              }
              *((_BYTE *)v17 + 329) = v516;
              break;
            case 1309:
              *v18 |= 0x200000000uLL;
              v517 = *((_QWORD *)this + 1);
              v518 = *((_QWORD *)this + 2);
              v519 = *(_QWORD *)this;
              if (v517 <= 0xFFFFFFFFFFFFFFF5 && v517 + 10 <= v518)
              {
                v520 = 0;
                v521 = 0;
                v522 = 0;
                do
                {
                  v523 = v517 + 1;
                  *v10 = v517 + 1;
                  v524 = *(_BYTE *)(v519 + v517);
                  v522 |= (unint64_t)(v524 & 0x7F) << v520;
                  if ((v524 & 0x80) == 0)
                    goto LABEL_1098;
                  v520 += 7;
                  v517 = v523;
                  v25 = v521++ > 8;
                }
                while (!v25);
LABEL_889:
                LODWORD(v522) = 0;
                goto LABEL_1098;
              }
              v735 = 0;
              v736 = 0;
              v522 = 0;
              if (v518 <= v517)
                v518 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v518 == v517)
                {
                  LODWORD(v522) = 0;
                  *v12 = 1;
                }
                else
                {
                  v737 = v517 + 1;
                  v738 = *(_BYTE *)(v519 + v517);
                  *v10 = v737;
                  v522 |= (unint64_t)(v738 & 0x7F) << v735;
                  if (v738 < 0)
                  {
                    v735 += 7;
                    v517 = v737;
                    v25 = v736++ > 8;
                    if (v25)
                      goto LABEL_889;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v522) = 0;
                }
                break;
              }
LABEL_1098:
              v17[43] = v522;
              break;
            case 1310:
              *v18 |= 2uLL;
              v525 = *((_QWORD *)this + 1);
              v526 = *((_QWORD *)this + 2);
              v527 = *(_QWORD *)this;
              if (v525 <= 0xFFFFFFFFFFFFFFF5 && v525 + 10 <= v526)
              {
                v528 = 0;
                v529 = 0;
                v530 = 0;
                do
                {
                  v531 = v525 + 1;
                  *v10 = v525 + 1;
                  v532 = *(_BYTE *)(v527 + v525);
                  v530 |= (unint64_t)(v532 & 0x7F) << v528;
                  if ((v532 & 0x80) == 0)
                    goto LABEL_1102;
                  v528 += 7;
                  v525 = v531;
                  v25 = v529++ > 8;
                }
                while (!v25);
LABEL_896:
                v530 = 0;
                goto LABEL_1102;
              }
              v739 = 0;
              v740 = 0;
              v530 = 0;
              if (v526 <= v525)
                v526 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v526 == v525)
                {
                  v530 = 0;
                  *v12 = 1;
                }
                else
                {
                  v741 = v525 + 1;
                  v742 = *(_BYTE *)(v527 + v525);
                  *v10 = v741;
                  v530 |= (unint64_t)(v742 & 0x7F) << v739;
                  if (v742 < 0)
                  {
                    v739 += 7;
                    v525 = v741;
                    v25 = v740++ > 8;
                    if (v25)
                      goto LABEL_896;
                    continue;
                  }
                  if (*v12)
                    v530 = 0;
                }
                break;
              }
LABEL_1102:
              *((_QWORD *)v17 + 2) = v530;
              break;
            case 1311:
              *v18 |= 0x20uLL;
              v533 = *((_QWORD *)this + 1);
              v534 = *((_QWORD *)this + 2);
              v535 = *(_QWORD *)this;
              if (v533 <= 0xFFFFFFFFFFFFFFF5 && v533 + 10 <= v534)
              {
                v536 = 0;
                v537 = 0;
                v538 = 0;
                do
                {
                  v539 = v533 + 1;
                  *v10 = v533 + 1;
                  v540 = *(_BYTE *)(v535 + v533);
                  v538 |= (unint64_t)(v540 & 0x7F) << v536;
                  if ((v540 & 0x80) == 0)
                    goto LABEL_1106;
                  v536 += 7;
                  v533 = v539;
                  v25 = v537++ > 8;
                }
                while (!v25);
LABEL_903:
                v538 = 0;
                goto LABEL_1106;
              }
              v743 = 0;
              v744 = 0;
              v538 = 0;
              if (v534 <= v533)
                v534 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v534 == v533)
                {
                  v538 = 0;
                  *v12 = 1;
                }
                else
                {
                  v745 = v533 + 1;
                  v746 = *(_BYTE *)(v535 + v533);
                  *v10 = v745;
                  v538 |= (unint64_t)(v746 & 0x7F) << v743;
                  if (v746 < 0)
                  {
                    v743 += 7;
                    v533 = v745;
                    v25 = v744++ > 8;
                    if (v25)
                      goto LABEL_903;
                    continue;
                  }
                  if (*v12)
                    v538 = 0;
                }
                break;
              }
LABEL_1106:
              *((_QWORD *)v17 + 6) = v538;
              break;
            case 1312:
              *v18 |= 4uLL;
              v541 = *((_QWORD *)this + 1);
              v542 = *((_QWORD *)this + 2);
              v543 = *(_QWORD *)this;
              if (v541 <= 0xFFFFFFFFFFFFFFF5 && v541 + 10 <= v542)
              {
                v544 = 0;
                v545 = 0;
                v546 = 0;
                do
                {
                  v547 = v541 + 1;
                  *v10 = v541 + 1;
                  v548 = *(_BYTE *)(v543 + v541);
                  v546 |= (unint64_t)(v548 & 0x7F) << v544;
                  if ((v548 & 0x80) == 0)
                    goto LABEL_1110;
                  v544 += 7;
                  v541 = v547;
                  v25 = v545++ > 8;
                }
                while (!v25);
LABEL_910:
                v546 = 0;
                goto LABEL_1110;
              }
              v747 = 0;
              v748 = 0;
              v546 = 0;
              if (v542 <= v541)
                v542 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v542 == v541)
                {
                  v546 = 0;
                  *v12 = 1;
                }
                else
                {
                  v749 = v541 + 1;
                  v750 = *(_BYTE *)(v543 + v541);
                  *v10 = v749;
                  v546 |= (unint64_t)(v750 & 0x7F) << v747;
                  if (v750 < 0)
                  {
                    v747 += 7;
                    v541 = v749;
                    v25 = v748++ > 8;
                    if (v25)
                      goto LABEL_910;
                    continue;
                  }
                  if (*v12)
                    v546 = 0;
                }
                break;
              }
LABEL_1110:
              *((_QWORD *)v17 + 3) = v546;
              break;
            case 1313:
              *v18 |= 8uLL;
              v549 = *((_QWORD *)this + 1);
              v550 = *((_QWORD *)this + 2);
              v551 = *(_QWORD *)this;
              if (v549 <= 0xFFFFFFFFFFFFFFF5 && v549 + 10 <= v550)
              {
                v552 = 0;
                v553 = 0;
                v554 = 0;
                do
                {
                  v555 = v549 + 1;
                  *v10 = v549 + 1;
                  v556 = *(_BYTE *)(v551 + v549);
                  v554 |= (unint64_t)(v556 & 0x7F) << v552;
                  if ((v556 & 0x80) == 0)
                    goto LABEL_1114;
                  v552 += 7;
                  v549 = v555;
                  v25 = v553++ > 8;
                }
                while (!v25);
LABEL_917:
                v554 = 0;
                goto LABEL_1114;
              }
              v751 = 0;
              v752 = 0;
              v554 = 0;
              if (v550 <= v549)
                v550 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v550 == v549)
                {
                  v554 = 0;
                  *v12 = 1;
                }
                else
                {
                  v753 = v549 + 1;
                  v754 = *(_BYTE *)(v551 + v549);
                  *v10 = v753;
                  v554 |= (unint64_t)(v754 & 0x7F) << v751;
                  if (v754 < 0)
                  {
                    v751 += 7;
                    v549 = v753;
                    v25 = v752++ > 8;
                    if (v25)
                      goto LABEL_917;
                    continue;
                  }
                  if (*v12)
                    v554 = 0;
                }
                break;
              }
LABEL_1114:
              *((_QWORD *)v17 + 4) = v554;
              break;
            case 1314:
              *v18 |= 0x10uLL;
              v557 = *((_QWORD *)this + 1);
              v558 = *((_QWORD *)this + 2);
              v559 = *(_QWORD *)this;
              if (v557 <= 0xFFFFFFFFFFFFFFF5 && v557 + 10 <= v558)
              {
                v560 = 0;
                v561 = 0;
                v562 = 0;
                do
                {
                  v563 = v557 + 1;
                  *v10 = v557 + 1;
                  v564 = *(_BYTE *)(v559 + v557);
                  v562 |= (unint64_t)(v564 & 0x7F) << v560;
                  if ((v564 & 0x80) == 0)
                    goto LABEL_1118;
                  v560 += 7;
                  v557 = v563;
                  v25 = v561++ > 8;
                }
                while (!v25);
LABEL_924:
                v562 = 0;
                goto LABEL_1118;
              }
              v755 = 0;
              v756 = 0;
              v562 = 0;
              if (v558 <= v557)
                v558 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v558 == v557)
                {
                  v562 = 0;
                  *v12 = 1;
                }
                else
                {
                  v757 = v557 + 1;
                  v758 = *(_BYTE *)(v559 + v557);
                  *v10 = v757;
                  v562 |= (unint64_t)(v758 & 0x7F) << v755;
                  if (v758 < 0)
                  {
                    v755 += 7;
                    v557 = v757;
                    v25 = v756++ > 8;
                    if (v25)
                      goto LABEL_924;
                    continue;
                  }
                  if (*v12)
                    v562 = 0;
                }
                break;
              }
LABEL_1118:
              *((_QWORD *)v17 + 5) = v562;
              break;
            case 1315:
              *v18 |= 0x2000000000000uLL;
              v565 = *((_QWORD *)this + 1);
              v566 = *((_QWORD *)this + 2);
              v567 = *(_QWORD *)this;
              if (v565 <= 0xFFFFFFFFFFFFFFF5 && v565 + 10 <= v566)
              {
                v568 = 0;
                v569 = 0;
                v570 = 0;
                do
                {
                  v571 = v565 + 1;
                  *v10 = v565 + 1;
                  v572 = *(_BYTE *)(v567 + v565);
                  v570 |= (unint64_t)(v572 & 0x7F) << v568;
                  if ((v572 & 0x80) == 0)
                    goto LABEL_1122;
                  v568 += 7;
                  v565 = v571;
                  v25 = v569++ > 8;
                }
                while (!v25);
LABEL_931:
                LODWORD(v570) = 0;
                goto LABEL_1122;
              }
              v759 = 0;
              v760 = 0;
              v570 = 0;
              if (v566 <= v565)
                v566 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v566 == v565)
                {
                  LODWORD(v570) = 0;
                  *v12 = 1;
                }
                else
                {
                  v761 = v565 + 1;
                  v762 = *(_BYTE *)(v567 + v565);
                  *v10 = v761;
                  v570 |= (unint64_t)(v762 & 0x7F) << v759;
                  if (v762 < 0)
                  {
                    v759 += 7;
                    v565 = v761;
                    v25 = v760++ > 8;
                    if (v25)
                      goto LABEL_931;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v570) = 0;
                }
                break;
              }
LABEL_1122:
              v17[59] = v570;
              break;
            case 1316:
              *v18 |= 0x2000uLL;
              v573 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v573 + 4 > *((_QWORD *)this + 2))
                goto LABEL_513;
              v17[23] = *(_DWORD *)(*(_QWORD *)this + v573);
              goto LABEL_942;
            default:
              if ((_DWORD)v33 == 1201)
              {
                *v18 |= 0x4000000000uLL;
                v575 = *((_QWORD *)this + 1);
                v576 = *((_QWORD *)this + 2);
                v577 = *(_QWORD *)this;
                if (v575 > 0xFFFFFFFFFFFFFFF5 || v575 + 10 > v576)
                {
                  v763 = 0;
                  v764 = 0;
                  v580 = 0;
                  if (v576 <= v575)
                    v576 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v576 == v575)
                    {
                      LODWORD(v580) = 0;
                      *v12 = 1;
                      goto LABEL_1126;
                    }
                    v765 = v575 + 1;
                    v766 = *(_BYTE *)(v577 + v575);
                    *v10 = v765;
                    v580 |= (unint64_t)(v766 & 0x7F) << v763;
                    if ((v766 & 0x80) == 0)
                      break;
                    v763 += 7;
                    v575 = v765;
                    v25 = v764++ > 8;
                    if (v25)
                    {
LABEL_938:
                      LODWORD(v580) = 0;
                      goto LABEL_1126;
                    }
                  }
                  if (*v12)
                    LODWORD(v580) = 0;
                }
                else
                {
                  v578 = 0;
                  v579 = 0;
                  v580 = 0;
                  while (1)
                  {
                    v581 = v575 + 1;
                    *v10 = v575 + 1;
                    v582 = *(_BYTE *)(v577 + v575);
                    v580 |= (unint64_t)(v582 & 0x7F) << v578;
                    if ((v582 & 0x80) == 0)
                      break;
                    v578 += 7;
                    v575 = v581;
                    v25 = v579++ > 8;
                    if (v25)
                      goto LABEL_938;
                  }
                }
LABEL_1126:
                v17[48] = v580;
              }
              else
              {
                if ((_DWORD)v33 != 1202)
                  goto LABEL_141;
                *v18 |= 0x8000000000uLL;
                v86 = *((_QWORD *)this + 1);
                v87 = *((_QWORD *)this + 2);
                v88 = *(_QWORD *)this;
                if (v86 > 0xFFFFFFFFFFFFFFF5 || v86 + 10 > v87)
                {
                  v711 = 0;
                  v712 = 0;
                  v91 = 0;
                  if (v87 <= v86)
                    v87 = *((_QWORD *)this + 1);
                  v12 = v767;
                  v17 = a1;
                  while (1)
                  {
                    if (v87 == v86)
                    {
                      LODWORD(v91) = 0;
                      *v767 = 1;
                      goto LABEL_1074;
                    }
                    v713 = v86 + 1;
                    v714 = *(_BYTE *)(v88 + v86);
                    *v10 = v713;
                    v91 |= (unint64_t)(v714 & 0x7F) << v711;
                    if ((v714 & 0x80) == 0)
                      break;
                    v711 += 7;
                    v86 = v713;
                    v25 = v712++ > 8;
                    if (v25)
                    {
LABEL_843:
                      LODWORD(v91) = 0;
                      goto LABEL_1074;
                    }
                  }
                  if (*v767)
                    LODWORD(v91) = 0;
                }
                else
                {
                  v89 = 0;
                  v90 = 0;
                  v91 = 0;
                  v12 = v767;
                  v17 = a1;
                  while (1)
                  {
                    v92 = v86 + 1;
                    *v10 = v86 + 1;
                    v93 = *(_BYTE *)(v88 + v86);
                    v91 |= (unint64_t)(v93 & 0x7F) << v89;
                    if ((v93 & 0x80) == 0)
                      break;
                    v89 += 7;
                    v86 = v92;
                    v25 = v90++ > 8;
                    if (v25)
                      goto LABEL_843;
                  }
                }
LABEL_1074:
                v17[49] = v91;
              }
              break;
          }
        }
      }
      else
      {
        switch((int)v33)
        {
          case 301:
            v18[1] |= 0x2000uLL;
            v44 = *((_QWORD *)this + 1);
            if (v44 >= *((_QWORD *)this + 2))
            {
              v47 = 0;
              *v12 = 1;
            }
            else
            {
              v45 = v44 + 1;
              v46 = *(unsigned __int8 *)(*(_QWORD *)this + v44);
              *((_QWORD *)this + 1) = v45;
              v47 = v46 != 0;
            }
            *((_BYTE *)v17 + 324) = v47;
            goto LABEL_514;
          case 302:
            v18[1] |= 0x4000000uLL;
            v263 = *((_QWORD *)this + 1);
            if (v263 >= *((_QWORD *)this + 2))
            {
              v266 = 0;
              *v12 = 1;
            }
            else
            {
              v264 = v263 + 1;
              v265 = *(unsigned __int8 *)(*(_QWORD *)this + v263);
              *((_QWORD *)this + 1) = v264;
              v266 = v265 != 0;
            }
            *((_BYTE *)v17 + 337) = v266;
            goto LABEL_514;
          case 303:
            v18[1] |= 0x80000uLL;
            v267 = *((_QWORD *)this + 1);
            if (v267 >= *((_QWORD *)this + 2))
            {
              v270 = 0;
              *v12 = 1;
            }
            else
            {
              v268 = v267 + 1;
              v269 = *(unsigned __int8 *)(*(_QWORD *)this + v267);
              *((_QWORD *)this + 1) = v268;
              v270 = v269 != 0;
            }
            *((_BYTE *)v17 + 330) = v270;
            goto LABEL_514;
          case 304:
            v18[1] |= 0x2000000000uLL;
            v271 = *((_QWORD *)this + 1);
            if (v271 >= *((_QWORD *)this + 2))
            {
              v274 = 0;
              *v12 = 1;
            }
            else
            {
              v272 = v271 + 1;
              v273 = *(unsigned __int8 *)(*(_QWORD *)this + v271);
              *((_QWORD *)this + 1) = v272;
              v274 = v273 != 0;
            }
            *((_BYTE *)v17 + 348) = v274;
            goto LABEL_514;
          case 305:
            v18[1] |= 0x200000000uLL;
            v275 = *((_QWORD *)this + 1);
            if (v275 >= *((_QWORD *)this + 2))
            {
              v278 = 0;
              *v12 = 1;
            }
            else
            {
              v276 = v275 + 1;
              v277 = *(unsigned __int8 *)(*(_QWORD *)this + v275);
              *((_QWORD *)this + 1) = v276;
              v278 = v277 != 0;
            }
            *((_BYTE *)v17 + 344) = v278;
            goto LABEL_514;
          case 306:
            v18[1] |= 0x4000000000uLL;
            v279 = *((_QWORD *)this + 1);
            if (v279 >= *((_QWORD *)this + 2))
            {
              v282 = 0;
              *v12 = 1;
            }
            else
            {
              v280 = v279 + 1;
              v281 = *(unsigned __int8 *)(*(_QWORD *)this + v279);
              *((_QWORD *)this + 1) = v280;
              v282 = v281 != 0;
            }
            *((_BYTE *)v17 + 349) = v282;
            goto LABEL_514;
          case 307:
            v18[1] |= 0x400000000uLL;
            v283 = *((_QWORD *)this + 1);
            if (v283 >= *((_QWORD *)this + 2))
            {
              v286 = 0;
              *v12 = 1;
            }
            else
            {
              v284 = v283 + 1;
              v285 = *(unsigned __int8 *)(*(_QWORD *)this + v283);
              *((_QWORD *)this + 1) = v284;
              v286 = v285 != 0;
            }
            *((_BYTE *)v17 + 345) = v286;
            goto LABEL_514;
          case 308:
            v18[1] |= 0x40000000uLL;
            v287 = *((_QWORD *)this + 1);
            if (v287 >= *((_QWORD *)this + 2))
            {
              v290 = 0;
              *v12 = 1;
            }
            else
            {
              v288 = v287 + 1;
              v289 = *(unsigned __int8 *)(*(_QWORD *)this + v287);
              *((_QWORD *)this + 1) = v288;
              v290 = v289 != 0;
            }
            *((_BYTE *)v17 + 341) = v290;
            goto LABEL_514;
          case 309:
            v18[1] |= 0x800uLL;
            v291 = *((_QWORD *)this + 1);
            if (v291 >= *((_QWORD *)this + 2))
            {
              v294 = 0;
              *v12 = 1;
            }
            else
            {
              v292 = v291 + 1;
              v293 = *(unsigned __int8 *)(*(_QWORD *)this + v291);
              *((_QWORD *)this + 1) = v292;
              v294 = v293 != 0;
            }
            *((_BYTE *)v17 + 322) = v294;
            goto LABEL_514;
          case 310:
            v18[1] |= 0x100000uLL;
            v295 = *((_QWORD *)this + 1);
            if (v295 >= *((_QWORD *)this + 2))
            {
              v298 = 0;
              *v12 = 1;
            }
            else
            {
              v296 = v295 + 1;
              v297 = *(unsigned __int8 *)(*(_QWORD *)this + v295);
              *((_QWORD *)this + 1) = v296;
              v298 = v297 != 0;
            }
            *((_BYTE *)v17 + 331) = v298;
            goto LABEL_514;
          case 311:
            v18[1] |= 0x8000000000uLL;
            v299 = *((_QWORD *)this + 1);
            if (v299 >= *((_QWORD *)this + 2))
            {
              v302 = 0;
              *v12 = 1;
            }
            else
            {
              v300 = v299 + 1;
              v301 = *(unsigned __int8 *)(*(_QWORD *)this + v299);
              *((_QWORD *)this + 1) = v300;
              v302 = v301 != 0;
            }
            *((_BYTE *)v17 + 350) = v302;
            goto LABEL_514;
          case 312:
            v18[1] |= 0x800000000uLL;
            v303 = *((_QWORD *)this + 1);
            if (v303 >= *((_QWORD *)this + 2))
            {
              v306 = 0;
              *v12 = 1;
            }
            else
            {
              v304 = v303 + 1;
              v305 = *(unsigned __int8 *)(*(_QWORD *)this + v303);
              *((_QWORD *)this + 1) = v304;
              v306 = v305 != 0;
            }
            *((_BYTE *)v17 + 346) = v306;
            goto LABEL_514;
          case 313:
            *v18 |= 0x20000uLL;
            v307 = *((_QWORD *)this + 1);
            v308 = *((_QWORD *)this + 2);
            v309 = *(_QWORD *)this;
            if (v307 <= 0xFFFFFFFFFFFFFFF5 && v307 + 10 <= v308)
            {
              v310 = 0;
              v311 = 0;
              v312 = 0;
              do
              {
                v313 = v307 + 1;
                *v10 = v307 + 1;
                v314 = *(_BYTE *)(v309 + v307);
                v312 |= (unint64_t)(v314 & 0x7F) << v310;
                if ((v314 & 0x80) == 0)
                  goto LABEL_1043;
                v310 += 7;
                v307 = v313;
                v25 = v311++ > 8;
              }
              while (!v25);
LABEL_727:
              LODWORD(v312) = 0;
              goto LABEL_1043;
            }
            v671 = 0;
            v672 = 0;
            v312 = 0;
            if (v308 <= v307)
              v308 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v308 == v307)
              {
                LODWORD(v312) = 0;
                *v12 = 1;
              }
              else
              {
                v673 = v307 + 1;
                v674 = *(_BYTE *)(v309 + v307);
                *v10 = v673;
                v312 |= (unint64_t)(v674 & 0x7F) << v671;
                if (v674 < 0)
                {
                  v671 += 7;
                  v307 = v673;
                  v25 = v672++ > 8;
                  if (v25)
                    goto LABEL_727;
                  continue;
                }
                if (*v12)
                  LODWORD(v312) = 0;
              }
              break;
            }
LABEL_1043:
            v17[27] = v312;
            goto LABEL_514;
          case 314:
            v18[1] |= 0x400000uLL;
            v315 = *((_QWORD *)this + 1);
            if (v315 >= *((_QWORD *)this + 2))
            {
              v318 = 0;
              *v12 = 1;
            }
            else
            {
              v316 = v315 + 1;
              v317 = *(unsigned __int8 *)(*(_QWORD *)this + v315);
              *((_QWORD *)this + 1) = v316;
              v318 = v317 != 0;
            }
            *((_BYTE *)v17 + 333) = v318;
            goto LABEL_514;
          case 315:
            v18[1] |= 0x800000uLL;
            v319 = *((_QWORD *)this + 1);
            if (v319 >= *((_QWORD *)this + 2))
            {
              v322 = 0;
              *v12 = 1;
            }
            else
            {
              v320 = v319 + 1;
              v321 = *(unsigned __int8 *)(*(_QWORD *)this + v319);
              *((_QWORD *)this + 1) = v320;
              v322 = v321 != 0;
            }
            *((_BYTE *)v17 + 334) = v322;
            goto LABEL_514;
          case 316:
            v18[1] |= 0x20uLL;
            v323 = *((_QWORD *)this + 1);
            if (v323 >= *((_QWORD *)this + 2))
            {
              v326 = 0;
              *v12 = 1;
            }
            else
            {
              v324 = v323 + 1;
              v325 = *(unsigned __int8 *)(*(_QWORD *)this + v323);
              *((_QWORD *)this + 1) = v324;
              v326 = v325 != 0;
            }
            *((_BYTE *)v17 + 316) = v326;
            goto LABEL_514;
          case 317:
            *v18 |= 0x40000uLL;
            v327 = *((_QWORD *)this + 1);
            v328 = *((_QWORD *)this + 2);
            v329 = *(_QWORD *)this;
            if (v327 <= 0xFFFFFFFFFFFFFFF5 && v327 + 10 <= v328)
            {
              v330 = 0;
              v331 = 0;
              v332 = 0;
              do
              {
                v333 = v327 + 1;
                *v10 = v327 + 1;
                v334 = *(_BYTE *)(v329 + v327);
                v332 |= (unint64_t)(v334 & 0x7F) << v330;
                if ((v334 & 0x80) == 0)
                  goto LABEL_1046;
                v330 += 7;
                v327 = v333;
                v25 = v331++ > 8;
              }
              while (!v25);
LABEL_740:
              LODWORD(v332) = 0;
              goto LABEL_1046;
            }
            v675 = 0;
            v676 = 0;
            v332 = 0;
            if (v328 <= v327)
              v328 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v328 == v327)
              {
                LODWORD(v332) = 0;
                *v12 = 1;
              }
              else
              {
                v677 = v327 + 1;
                v678 = *(_BYTE *)(v329 + v327);
                *v10 = v677;
                v332 |= (unint64_t)(v678 & 0x7F) << v675;
                if (v678 < 0)
                {
                  v675 += 7;
                  v327 = v677;
                  v25 = v676++ > 8;
                  if (v25)
                    goto LABEL_740;
                  continue;
                }
                if (*v12)
                  LODWORD(v332) = 0;
              }
              break;
            }
LABEL_1046:
            v17[28] = v332;
            goto LABEL_514;
          case 318:
            v18[1] |= 0x40000000000uLL;
            v335 = *((_QWORD *)this + 1);
            if (v335 >= *((_QWORD *)this + 2))
            {
              v338 = 0;
              *v12 = 1;
            }
            else
            {
              v336 = v335 + 1;
              v337 = *(unsigned __int8 *)(*(_QWORD *)this + v335);
              *((_QWORD *)this + 1) = v336;
              v338 = v337 != 0;
            }
            *((_BYTE *)v17 + 353) = v338;
            goto LABEL_514;
          case 319:
            v18[1] |= 0x10000000000uLL;
            v339 = *((_QWORD *)this + 1);
            if (v339 >= *((_QWORD *)this + 2))
            {
              v342 = 0;
              *v12 = 1;
            }
            else
            {
              v340 = v339 + 1;
              v341 = *(unsigned __int8 *)(*(_QWORD *)this + v339);
              *((_QWORD *)this + 1) = v340;
              v342 = v341 != 0;
            }
            *((_BYTE *)v17 + 351) = v342;
            goto LABEL_514;
          case 320:
            v18[1] |= 0x20000000000uLL;
            v343 = *((_QWORD *)this + 1);
            if (v343 >= *((_QWORD *)this + 2))
            {
              v346 = 0;
              *v12 = 1;
            }
            else
            {
              v344 = v343 + 1;
              v345 = *(unsigned __int8 *)(*(_QWORD *)this + v343);
              *((_QWORD *)this + 1) = v344;
              v346 = v345 != 0;
            }
            *((_BYTE *)v17 + 352) = v346;
            goto LABEL_514;
          case 321:
            v18[1] |= (unint64_t)&_mh_execute_header;
            v347 = *((_QWORD *)this + 1);
            if (v347 >= *((_QWORD *)this + 2))
            {
              v350 = 0;
              *v12 = 1;
            }
            else
            {
              v348 = v347 + 1;
              v349 = *(unsigned __int8 *)(*(_QWORD *)this + v347);
              *((_QWORD *)this + 1) = v348;
              v350 = v349 != 0;
            }
            *((_BYTE *)v17 + 343) = v350;
            goto LABEL_514;
          case 322:
            v18[1] |= 0x80000000uLL;
            v351 = *((_QWORD *)this + 1);
            if (v351 >= *((_QWORD *)this + 2))
            {
              v354 = 0;
              *v12 = 1;
            }
            else
            {
              v352 = v351 + 1;
              v353 = *(unsigned __int8 *)(*(_QWORD *)this + v351);
              *((_QWORD *)this + 1) = v352;
              v354 = v353 != 0;
            }
            *((_BYTE *)v17 + 342) = v354;
            goto LABEL_514;
          default:
            switch((int)v33)
            {
              case 1:
                *v18 |= 0x800000uLL;
                v34 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[33] = *(_DWORD *)(*(_QWORD *)this + v34);
                goto LABEL_942;
              case 2:
                *v18 |= 0x400000uLL;
                v133 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[32] = *(_DWORD *)(*(_QWORD *)this + v133);
                goto LABEL_942;
              case 3:
                *v18 |= 0x1000000uLL;
                v134 = *((_QWORD *)this + 1);
                v135 = *((_QWORD *)this + 2);
                v136 = *(_QWORD *)this;
                if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
                {
                  v137 = 0;
                  v138 = 0;
                  v139 = 0;
                  do
                  {
                    v140 = v134 + 1;
                    *v10 = v134 + 1;
                    v141 = *(_BYTE *)(v136 + v134);
                    v139 |= (unint64_t)(v141 & 0x7F) << v137;
                    if ((v141 & 0x80) == 0)
                      goto LABEL_1001;
                    v137 += 7;
                    v134 = v140;
                    v25 = v138++ > 8;
                  }
                  while (!v25);
LABEL_603:
                  LODWORD(v139) = 0;
                  goto LABEL_1001;
                }
                v615 = 0;
                v616 = 0;
                v139 = 0;
                if (v135 <= v134)
                  v135 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v135 == v134)
                  {
                    LODWORD(v139) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v617 = v134 + 1;
                    v618 = *(_BYTE *)(v136 + v134);
                    *v10 = v617;
                    v139 |= (unint64_t)(v618 & 0x7F) << v615;
                    if (v618 < 0)
                    {
                      v615 += 7;
                      v134 = v617;
                      v25 = v616++ > 8;
                      if (v25)
                        goto LABEL_603;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v139) = 0;
                  }
                  break;
                }
LABEL_1001:
                v17[34] = v139;
                goto LABEL_514;
              case 4:
                *v18 |= 0x10000000000000uLL;
                v142 = *((_QWORD *)this + 1);
                v143 = *((_QWORD *)this + 2);
                v144 = *(_QWORD *)this;
                if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
                {
                  v145 = 0;
                  v146 = 0;
                  v147 = 0;
                  do
                  {
                    v148 = v142 + 1;
                    *v10 = v142 + 1;
                    v149 = *(_BYTE *)(v144 + v142);
                    v147 |= (unint64_t)(v149 & 0x7F) << v145;
                    if ((v149 & 0x80) == 0)
                      goto LABEL_1004;
                    v145 += 7;
                    v142 = v148;
                    v25 = v146++ > 8;
                  }
                  while (!v25);
LABEL_610:
                  LODWORD(v147) = 0;
                  goto LABEL_1004;
                }
                v619 = 0;
                v620 = 0;
                v147 = 0;
                if (v143 <= v142)
                  v143 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v143 == v142)
                  {
                    LODWORD(v147) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v621 = v142 + 1;
                    v622 = *(_BYTE *)(v144 + v142);
                    *v10 = v621;
                    v147 |= (unint64_t)(v622 & 0x7F) << v619;
                    if (v622 < 0)
                    {
                      v619 += 7;
                      v142 = v621;
                      v25 = v620++ > 8;
                      if (v25)
                        goto LABEL_610;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v147) = 0;
                  }
                  break;
                }
LABEL_1004:
                v17[62] = v147;
                goto LABEL_514;
              case 5:
                v18[1] |= 1uLL;
                v150 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[74] = *(_DWORD *)(*(_QWORD *)this + v150);
                goto LABEL_942;
              case 6:
                *v18 |= 0x400000000000000uLL;
                v151 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[68] = *(_DWORD *)(*(_QWORD *)this + v151);
                goto LABEL_942;
              case 7:
                *v18 |= 0x400000000000uLL;
                v152 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[56] = *(_DWORD *)(*(_QWORD *)this + v152);
                goto LABEL_942;
              case 8:
                *v18 |= 0x200000000000uLL;
                v153 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[55] = *(_DWORD *)(*(_QWORD *)this + v153);
                goto LABEL_942;
              case 9:
                *v18 |= 0x200uLL;
                v154 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[19] = *(_DWORD *)(*(_QWORD *)this + v154);
                goto LABEL_942;
              case 10:
                *v18 |= 0x80000000000000uLL;
                v155 = *((_QWORD *)this + 1);
                v156 = *((_QWORD *)this + 2);
                v157 = *(_QWORD *)this;
                if (v155 <= 0xFFFFFFFFFFFFFFF5 && v155 + 10 <= v156)
                {
                  v158 = 0;
                  v159 = 0;
                  v160 = 0;
                  do
                  {
                    v161 = v155 + 1;
                    *v10 = v155 + 1;
                    v162 = *(_BYTE *)(v157 + v155);
                    v160 |= (unint64_t)(v162 & 0x7F) << v158;
                    if ((v162 & 0x80) == 0)
                      goto LABEL_1007;
                    v158 += 7;
                    v155 = v161;
                    v25 = v159++ > 8;
                  }
                  while (!v25);
LABEL_617:
                  LODWORD(v160) = 0;
                  goto LABEL_1007;
                }
                v623 = 0;
                v624 = 0;
                v160 = 0;
                if (v156 <= v155)
                  v156 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v156 == v155)
                  {
                    LODWORD(v160) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v625 = v155 + 1;
                    v626 = *(_BYTE *)(v157 + v155);
                    *v10 = v625;
                    v160 |= (unint64_t)(v626 & 0x7F) << v623;
                    if (v626 < 0)
                    {
                      v623 += 7;
                      v155 = v625;
                      v25 = v624++ > 8;
                      if (v25)
                        goto LABEL_617;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v160) = 0;
                  }
                  break;
                }
LABEL_1007:
                v17[65] = v160;
                goto LABEL_514;
              case 11:
                *v18 |= 0x2000000uLL;
                v163 = *((_QWORD *)this + 1);
                v164 = *((_QWORD *)this + 2);
                v165 = *(_QWORD *)this;
                if (v163 <= 0xFFFFFFFFFFFFFFF5 && v163 + 10 <= v164)
                {
                  v166 = 0;
                  v167 = 0;
                  v168 = 0;
                  do
                  {
                    v169 = v163 + 1;
                    *v10 = v163 + 1;
                    v170 = *(_BYTE *)(v165 + v163);
                    v168 |= (unint64_t)(v170 & 0x7F) << v166;
                    if ((v170 & 0x80) == 0)
                      goto LABEL_1010;
                    v166 += 7;
                    v163 = v169;
                    v25 = v167++ > 8;
                  }
                  while (!v25);
LABEL_624:
                  LODWORD(v168) = 0;
                  goto LABEL_1010;
                }
                v627 = 0;
                v628 = 0;
                v168 = 0;
                if (v164 <= v163)
                  v164 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v164 == v163)
                  {
                    LODWORD(v168) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v629 = v163 + 1;
                    v630 = *(_BYTE *)(v165 + v163);
                    *v10 = v629;
                    v168 |= (unint64_t)(v630 & 0x7F) << v627;
                    if (v630 < 0)
                    {
                      v627 += 7;
                      v163 = v629;
                      v25 = v628++ > 8;
                      if (v25)
                        goto LABEL_624;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v168) = 0;
                  }
                  break;
                }
LABEL_1010:
                v17[35] = v168;
                goto LABEL_514;
              case 12:
                *v18 |= 0x10000uLL;
                v171 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v171 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[26] = *(_DWORD *)(*(_QWORD *)this + v171);
                goto LABEL_942;
              case 13:
                v18[1] |= 8uLL;
                v172 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[77] = *(_DWORD *)(*(_QWORD *)this + v172);
                goto LABEL_942;
              case 14:
                v18[1] |= 0x10uLL;
                v173 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[78] = *(_DWORD *)(*(_QWORD *)this + v173);
                goto LABEL_942;
              case 15:
                *v18 |= 0x80000000000uLL;
                v174 = *((_QWORD *)this + 1);
                v175 = *((_QWORD *)this + 2);
                v176 = *(_QWORD *)this;
                if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
                {
                  v177 = 0;
                  v178 = 0;
                  v179 = 0;
                  do
                  {
                    v180 = v174 + 1;
                    *v10 = v174 + 1;
                    v181 = *(_BYTE *)(v176 + v174);
                    v179 |= (unint64_t)(v181 & 0x7F) << v177;
                    if ((v181 & 0x80) == 0)
                      goto LABEL_1013;
                    v177 += 7;
                    v174 = v180;
                    v25 = v178++ > 8;
                  }
                  while (!v25);
LABEL_631:
                  LODWORD(v179) = 0;
                  goto LABEL_1013;
                }
                v631 = 0;
                v632 = 0;
                v179 = 0;
                if (v175 <= v174)
                  v175 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v175 == v174)
                  {
                    LODWORD(v179) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v633 = v174 + 1;
                    v634 = *(_BYTE *)(v176 + v174);
                    *v10 = v633;
                    v179 |= (unint64_t)(v634 & 0x7F) << v631;
                    if (v634 < 0)
                    {
                      v631 += 7;
                      v174 = v633;
                      v25 = v632++ > 8;
                      if (v25)
                        goto LABEL_631;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v179) = 0;
                  }
                  break;
                }
LABEL_1013:
                v17[53] = v179;
                goto LABEL_514;
              case 16:
                *v18 |= 0x20000000000uLL;
                v182 = *((_QWORD *)this + 1);
                v183 = *((_QWORD *)this + 2);
                v184 = *(_QWORD *)this;
                if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
                {
                  v185 = 0;
                  v186 = 0;
                  v187 = 0;
                  do
                  {
                    v188 = v182 + 1;
                    *v10 = v182 + 1;
                    v189 = *(_BYTE *)(v184 + v182);
                    v187 |= (unint64_t)(v189 & 0x7F) << v185;
                    if ((v189 & 0x80) == 0)
                      goto LABEL_1016;
                    v185 += 7;
                    v182 = v188;
                    v25 = v186++ > 8;
                  }
                  while (!v25);
LABEL_638:
                  LODWORD(v187) = 0;
                  goto LABEL_1016;
                }
                v635 = 0;
                v636 = 0;
                v187 = 0;
                if (v183 <= v182)
                  v183 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v183 == v182)
                  {
                    LODWORD(v187) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v637 = v182 + 1;
                    v638 = *(_BYTE *)(v184 + v182);
                    *v10 = v637;
                    v187 |= (unint64_t)(v638 & 0x7F) << v635;
                    if (v638 < 0)
                    {
                      v635 += 7;
                      v182 = v637;
                      v25 = v636++ > 8;
                      if (v25)
                        goto LABEL_638;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v187) = 0;
                  }
                  break;
                }
LABEL_1016:
                v17[51] = v187;
                goto LABEL_514;
              case 17:
                *v18 |= 0x4000000000000uLL;
                v190 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[60] = *(_DWORD *)(*(_QWORD *)this + v190);
                goto LABEL_942;
              case 18:
                *v18 |= 0x1000000000000000uLL;
                v191 = *((_QWORD *)this + 1);
                v192 = *((_QWORD *)this + 2);
                v193 = *(_QWORD *)this;
                if (v191 <= 0xFFFFFFFFFFFFFFF5 && v191 + 10 <= v192)
                {
                  v194 = 0;
                  v195 = 0;
                  v196 = 0;
                  do
                  {
                    v197 = v191 + 1;
                    *v10 = v191 + 1;
                    v198 = *(_BYTE *)(v193 + v191);
                    v196 |= (unint64_t)(v198 & 0x7F) << v194;
                    if ((v198 & 0x80) == 0)
                      goto LABEL_1019;
                    v194 += 7;
                    v191 = v197;
                    v25 = v195++ > 8;
                  }
                  while (!v25);
LABEL_645:
                  LODWORD(v196) = 0;
                  goto LABEL_1019;
                }
                v639 = 0;
                v640 = 0;
                v196 = 0;
                if (v192 <= v191)
                  v192 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v192 == v191)
                  {
                    LODWORD(v196) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v641 = v191 + 1;
                    v642 = *(_BYTE *)(v193 + v191);
                    *v10 = v641;
                    v196 |= (unint64_t)(v642 & 0x7F) << v639;
                    if (v642 < 0)
                    {
                      v639 += 7;
                      v191 = v641;
                      v25 = v640++ > 8;
                      if (v25)
                        goto LABEL_645;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v196) = 0;
                  }
                  break;
                }
LABEL_1019:
                v17[70] = v196;
                goto LABEL_514;
              case 19:
                v18[1] |= 2uLL;
                v199 = *((_QWORD *)this + 1);
                v200 = *((_QWORD *)this + 2);
                v201 = *(_QWORD *)this;
                if (v199 <= 0xFFFFFFFFFFFFFFF5 && v199 + 10 <= v200)
                {
                  v202 = 0;
                  v203 = 0;
                  v204 = 0;
                  do
                  {
                    v205 = v199 + 1;
                    *v10 = v199 + 1;
                    v206 = *(_BYTE *)(v201 + v199);
                    v204 |= (unint64_t)(v206 & 0x7F) << v202;
                    if ((v206 & 0x80) == 0)
                      goto LABEL_1022;
                    v202 += 7;
                    v199 = v205;
                    v25 = v203++ > 8;
                  }
                  while (!v25);
LABEL_652:
                  LODWORD(v204) = 0;
                  goto LABEL_1022;
                }
                v643 = 0;
                v644 = 0;
                v204 = 0;
                if (v200 <= v199)
                  v200 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v200 == v199)
                  {
                    LODWORD(v204) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v645 = v199 + 1;
                    v646 = *(_BYTE *)(v201 + v199);
                    *v10 = v645;
                    v204 |= (unint64_t)(v646 & 0x7F) << v643;
                    if (v646 < 0)
                    {
                      v643 += 7;
                      v199 = v645;
                      v25 = v644++ > 8;
                      if (v25)
                        goto LABEL_652;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v204) = 0;
                  }
                  break;
                }
LABEL_1022:
                v17[75] = v204;
                goto LABEL_514;
              default:
                switch((int)v33)
                {
                  case 'e':
                    *v18 |= 0x80uLL;
                    v48 = *((_QWORD *)this + 1);
                    v49 = *((_QWORD *)this + 2);
                    v50 = *(_QWORD *)this;
                    if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
                    {
                      v51 = 0;
                      v52 = 0;
                      v53 = 0;
                      v12 = v767;
                      v17 = a1;
                      do
                      {
                        v54 = v48 + 1;
                        *v10 = v48 + 1;
                        v55 = *(_BYTE *)(v50 + v48);
                        v53 |= (unint64_t)(v55 & 0x7F) << v51;
                        if ((v55 & 0x80) == 0)
                          goto LABEL_995;
                        v51 += 7;
                        v48 = v54;
                        v25 = v52++ > 8;
                      }
                      while (!v25);
LABEL_586:
                      v53 = 0;
                      goto LABEL_995;
                    }
                    v607 = 0;
                    v608 = 0;
                    v53 = 0;
                    if (v49 <= v48)
                      v49 = *((_QWORD *)this + 1);
                    v12 = v767;
                    v17 = a1;
                    while (2)
                    {
                      if (v49 == v48)
                      {
                        v53 = 0;
                        *v767 = 1;
                      }
                      else
                      {
                        v609 = v48 + 1;
                        v610 = *(_BYTE *)(v50 + v48);
                        *v10 = v609;
                        v53 |= (unint64_t)(v610 & 0x7F) << v607;
                        if (v610 < 0)
                        {
                          v607 += 7;
                          v48 = v609;
                          v25 = v608++ > 8;
                          if (v25)
                            goto LABEL_586;
                          continue;
                        }
                        if (*v767)
                          v53 = 0;
                      }
                      break;
                    }
LABEL_995:
                    *((_QWORD *)v17 + 8) = v53;
                    goto LABEL_514;
                  case 'f':
                    *v18 |= 1uLL;
                    v355 = *((_QWORD *)this + 1);
                    v356 = *((_QWORD *)this + 2);
                    v357 = *(_QWORD *)this;
                    if (v355 <= 0xFFFFFFFFFFFFFFF5 && v355 + 10 <= v356)
                    {
                      v358 = 0;
                      v359 = 0;
                      v360 = 0;
                      v12 = v767;
                      v17 = a1;
                      do
                      {
                        v361 = v355 + 1;
                        *v10 = v355 + 1;
                        v362 = *(_BYTE *)(v357 + v355);
                        v360 |= (unint64_t)(v362 & 0x7F) << v358;
                        if ((v362 & 0x80) == 0)
                          goto LABEL_1049;
                        v358 += 7;
                        v355 = v361;
                        v25 = v359++ > 8;
                      }
                      while (!v25);
LABEL_758:
                      v360 = 0;
                      goto LABEL_1049;
                    }
                    v679 = 0;
                    v680 = 0;
                    v360 = 0;
                    if (v356 <= v355)
                      v356 = *((_QWORD *)this + 1);
                    v12 = v767;
                    v17 = a1;
                    break;
                  case 'g':
                    v18[1] |= 0x40uLL;
                    v363 = *((_QWORD *)this + 1);
                    if (v363 >= *((_QWORD *)this + 2))
                    {
                      v366 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v364 = v363 + 1;
                      v365 = *(unsigned __int8 *)(*(_QWORD *)this + v363);
                      *((_QWORD *)this + 1) = v364;
                      v366 = v365 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 317) = v366;
                    goto LABEL_514;
                  case 'h':
                    v18[1] |= 0x80uLL;
                    v367 = *((_QWORD *)this + 1);
                    if (v367 >= *((_QWORD *)this + 2))
                    {
                      v370 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v368 = v367 + 1;
                      v369 = *(unsigned __int8 *)(*(_QWORD *)this + v367);
                      *((_QWORD *)this + 1) = v368;
                      v370 = v369 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 318) = v370;
                    goto LABEL_514;
                  case 'i':
                    v18[1] |= 0x8000uLL;
                    v371 = *((_QWORD *)this + 1);
                    if (v371 >= *((_QWORD *)this + 2))
                    {
                      v374 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v372 = v371 + 1;
                      v373 = *(unsigned __int8 *)(*(_QWORD *)this + v371);
                      *((_QWORD *)this + 1) = v372;
                      v374 = v373 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 326) = v374;
                    goto LABEL_514;
                  case 'j':
                    v18[1] |= 0x10000uLL;
                    v375 = *((_QWORD *)this + 1);
                    if (v375 >= *((_QWORD *)this + 2))
                    {
                      v378 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v376 = v375 + 1;
                      v377 = *(unsigned __int8 *)(*(_QWORD *)this + v375);
                      *((_QWORD *)this + 1) = v376;
                      v378 = v377 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 327) = v378;
                    goto LABEL_514;
                  case 'k':
                    v18[1] |= 0x8000000uLL;
                    v379 = *((_QWORD *)this + 1);
                    if (v379 >= *((_QWORD *)this + 2))
                    {
                      v382 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v380 = v379 + 1;
                      v381 = *(unsigned __int8 *)(*(_QWORD *)this + v379);
                      *((_QWORD *)this + 1) = v380;
                      v382 = v381 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 338) = v382;
                    goto LABEL_514;
                  case 'l':
                    v18[1] |= 0x2000000uLL;
                    v383 = *((_QWORD *)this + 1);
                    if (v383 >= *((_QWORD *)this + 2))
                    {
                      v386 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v384 = v383 + 1;
                      v385 = *(unsigned __int8 *)(*(_QWORD *)this + v383);
                      *((_QWORD *)this + 1) = v384;
                      v386 = v385 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 336) = v386;
                    goto LABEL_514;
                  case 'm':
                    v18[1] |= 0x1000uLL;
                    v387 = *((_QWORD *)this + 1);
                    if (v387 >= *((_QWORD *)this + 2))
                    {
                      v390 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v388 = v387 + 1;
                      v389 = *(unsigned __int8 *)(*(_QWORD *)this + v387);
                      *((_QWORD *)this + 1) = v388;
                      v390 = v389 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 323) = v390;
                    goto LABEL_514;
                  case 'n':
                    v18[1] |= 0x10000000uLL;
                    v391 = *((_QWORD *)this + 1);
                    if (v391 >= *((_QWORD *)this + 2))
                    {
                      v394 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v392 = v391 + 1;
                      v393 = *(unsigned __int8 *)(*(_QWORD *)this + v391);
                      *((_QWORD *)this + 1) = v392;
                      v394 = v393 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 339) = v394;
                    goto LABEL_514;
                  case 'o':
                    v18[1] |= 0x20000000uLL;
                    v395 = *((_QWORD *)this + 1);
                    if (v395 >= *((_QWORD *)this + 2))
                    {
                      v398 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v396 = v395 + 1;
                      v397 = *(unsigned __int8 *)(*(_QWORD *)this + v395);
                      *((_QWORD *)this + 1) = v396;
                      v398 = v397 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 340) = v398;
                    goto LABEL_514;
                  case 'p':
                    v18[1] |= 0x200uLL;
                    v399 = *((_QWORD *)this + 1);
                    if (v399 >= *((_QWORD *)this + 2))
                    {
                      v402 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v400 = v399 + 1;
                      v401 = *(unsigned __int8 *)(*(_QWORD *)this + v399);
                      *((_QWORD *)this + 1) = v400;
                      v402 = v401 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 320) = v402;
                    goto LABEL_514;
                  case 'q':
                    v18[1] |= 0x1000000uLL;
                    v403 = *((_QWORD *)this + 1);
                    if (v403 >= *((_QWORD *)this + 2))
                    {
                      v406 = 0;
                      v12 = v767;
                      v17 = a1;
                      *v767 = 1;
                    }
                    else
                    {
                      v404 = v403 + 1;
                      v405 = *(unsigned __int8 *)(*(_QWORD *)this + v403);
                      *((_QWORD *)this + 1) = v404;
                      v406 = v405 != 0;
                      v12 = v767;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 335) = v406;
                    goto LABEL_514;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            break;
        }
        while (1)
        {
          if (v356 == v355)
          {
            v360 = 0;
            *v767 = 1;
            goto LABEL_1049;
          }
          v681 = v355 + 1;
          v682 = *(_BYTE *)(v357 + v355);
          *v10 = v681;
          v360 |= (unint64_t)(v682 & 0x7F) << v679;
          if ((v682 & 0x80) == 0)
            break;
          v679 += 7;
          v355 = v681;
          v25 = v680++ > 8;
          if (v25)
            goto LABEL_758;
        }
        if (*v767)
          v360 = 0;
LABEL_1049:
        *((_QWORD *)v17 + 1) = v360;
      }
LABEL_514:
      v9 = *((_QWORD *)this + 1);
      v13 = *((_QWORD *)this + 2);
      v11 = *((unsigned __int8 *)this + 24);
    }
    while (v9 < v13 && v11 == 0);
  }
  return v11 == 0;
}

uint64_t sub_101593EDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = (uint64_t *)(result + 356);
  v5 = *(_QWORD *)(result + 356);
  if ((v5 & 0x800000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 132), 1u);
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(result + 364);
  if ((v5 & 0x400000) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 128), 2u);
    v5 = *v4;
    v6 = v4[1];
  }
LABEL_6:
  if ((v5 & 0x1000000) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 3u);
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v6 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 248), 4u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, *(float *)(v3 + 296), 5u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, *(float *)(v3 + 272), 6u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, *(float *)(v3 + 224), 7u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, *(float *)(v3 + 220), 8u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 9u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 260), 0xAu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xBu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v6 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0xCu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 8) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, *(float *)(v3 + 308), 0xDu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, *(float *)(v3 + 312), 0xEu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0xFu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 204), 0x10u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, *(float *)(v3 + 240), 0x11u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v6 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 280), 0x12u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 2) == 0)
  {
LABEL_23:
    if ((v5 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 300), 0x13u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 64), 0x65u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 1) == 0)
  {
LABEL_25:
    if ((v6 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0x66u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40) == 0)
  {
LABEL_26:
    if ((v6 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 317), 0x67u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 318), 0x68u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 326), 0x69u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000) == 0)
  {
LABEL_29:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 327), 0x6Au);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 338), 0x6Bu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 336), 0x6Cu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 323), 0x6Du);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 339), 0x6Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 340), 0x6Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200) == 0)
  {
LABEL_35:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 320), 0x70u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 335), 0x71u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000) == 0)
  {
LABEL_37:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 324), 0x12Du);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 337), 0x12Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 330), 0x12Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 348), 0x130u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 344), 0x131u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 349), 0x132u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 345), 0x133u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 341), 0x134u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800) == 0)
  {
LABEL_45:
    if ((v6 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 322), 0x135u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000) == 0)
  {
LABEL_46:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 331), 0x136u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 350), 0x137u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 346), 0x138u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000) == 0)
  {
LABEL_49:
    if ((v6 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x139u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000) == 0)
  {
LABEL_50:
    if ((v6 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 333), 0x13Au);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000) == 0)
  {
LABEL_51:
    if ((v6 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 334), 0x13Bu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20) == 0)
  {
LABEL_52:
    if ((v5 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 316), 0x13Cu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000) == 0)
  {
LABEL_53:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x13Du);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 353), 0x13Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 351), 0x13Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 352), 0x140u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 343), 0x141u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 342), 0x142u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 252), 0x191u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 256), 0x192u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 0x193u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x194u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 328), 0x195u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000) == 0)
  {
LABEL_64:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 325), 0x196u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x197u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000) == 0)
  {
LABEL_66:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x198u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 0x199u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  result = PB::Writer::write(this, *(float *)(v3 + 288), 0x1F5u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  result = PB::Writer::write(this, *(float *)(v3 + 292), 0x1F6u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  result = PB::Writer::write(this, *(float *)(v3 + 268), 0x1F7u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 276), 0x1F8u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 284), 0x1F9u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400) == 0)
  {
LABEL_73:
    if ((v5 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 321), 0x259u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000) == 0)
  {
LABEL_74:
    if ((v5 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x25Au);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000) == 0)
  {
LABEL_75:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x25Bu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 216), 0x25Cu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 264), 0x25Du);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 0x25Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 228), 0x2BDu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 232), 0x2BEu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000) == 0)
  {
LABEL_81:
    if ((v5 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 0x321u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400) == 0)
  {
LABEL_82:
    if ((v5 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x322u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000) == 0)
  {
LABEL_83:
    if ((v5 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0x323u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x324u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100) == 0)
  {
LABEL_85:
    if ((v6 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x385u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000) == 0)
  {
LABEL_86:
    if ((v6 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 332), 0x386u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 4) == 0)
  {
LABEL_87:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 304), 0x3E9u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0x44Du);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0x44Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 347), 0x44Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0x450u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0x451u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  result = PB::Writer::write(this, *(float *)(v3 + 244), 0x452u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x4B1u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v5 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x4B2u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000) == 0)
  {
LABEL_96:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0x515u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0x516u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 200), 0x517u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 0x518u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0x519u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v6 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x51Au);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100) == 0)
  {
LABEL_102:
    if ((v6 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 319), 0x51Bu);
  v5 = *v4;
  if ((v4[1] & 0x40000) == 0)
  {
LABEL_103:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 329), 0x51Cu);
  if ((*v4 & 0x200000000) != 0)
LABEL_104:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x51Du);
LABEL_105:
  v7 = *v4;
  if ((*v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x51Eu);
    v7 = *v4;
    if ((*v4 & 0x20) == 0)
    {
LABEL_107:
      if ((v7 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 48), 0x51Fu);
  v7 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_108:
    if ((v7 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x520u);
  v7 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_109:
    if ((v7 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 0x521u);
  v7 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_110:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0x522u);
  v7 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v7 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 92), 0x524u);
  }
LABEL_216:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 236), 0x523u);
  if ((*v4 & 0x2000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 92), 0x524u);
  return result;
}

double sub_101594AC8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BE468;
  *(_DWORD *)(a1 + 204) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

void sub_101594B00(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1021BE468;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

void sub_101594B80(PB::Base *a1)
{
  sub_101594B00(a1);
  operator delete();
}

uint64_t sub_101594BA4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  *(_QWORD *)a1 = &off_1021BE468;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_DWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x1000) != 0)
  {
    v9 = *(_DWORD *)(a2 + 196);
    v8 = 4096;
    *(_WORD *)(a1 + 204) = 4096;
    *(_DWORD *)(a1 + 196) = v9;
    v7 = *(_WORD *)(a2 + 204);
    if ((v7 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = 0;
  if ((*(_WORD *)(a2 + 204) & 0x800) != 0)
  {
LABEL_5:
    v10 = *(_DWORD *)(a2 + 192);
    v8 |= 0x800u;
    *(_WORD *)(a1 + 204) = v8;
    *(_DWORD *)(a1 + 192) = v10;
    v7 = *(_WORD *)(a2 + 204);
  }
LABEL_6:
  if ((v7 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(a2 + 160);
    v8 |= 0x10u;
    *(_WORD *)(a1 + 204) = v8;
    *(_QWORD *)(a1 + 160) = v13;
    v7 = *(_WORD *)(a2 + 204);
    if ((v7 & 0x4000) == 0)
    {
LABEL_8:
      if ((v7 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_BYTE *)(a2 + 201);
  v8 |= 0x4000u;
  *(_WORD *)(a1 + 204) = v8;
  *(_BYTE *)(a1 + 201) = v14;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x400) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v15 = *(_DWORD *)(a2 + 188);
  v8 |= 0x400u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 188) = v15;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x2000) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v16 = *(_BYTE *)(a2 + 200);
  v8 |= 0x2000u;
  *(_WORD *)(a1 + 204) = v8;
  *(_BYTE *)(a1 + 200) = v16;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v17 = *(_QWORD *)(a2 + 144);
  v8 |= 4u;
  *(_WORD *)(a1 + 204) = v8;
  *(_QWORD *)(a1 + 144) = v17;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_QWORD *)(a2 + 152);
  v8 |= 8u;
  *(_WORD *)(a1 + 204) = v8;
  *(_QWORD *)(a1 + 152) = v18;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v19 = *(_DWORD *)(a2 + 180);
  v8 |= 0x100u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 180) = v19;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x80) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v20 = *(_DWORD *)(a2 + 176);
  v8 |= 0x80u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 176) = v20;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 1) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v21 = *(_DWORD *)(a2 + 172);
  v8 |= 0x40u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 172) = v21;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 1) == 0)
  {
LABEL_16:
    if ((v7 & 2) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v22 = *(_QWORD *)(a2 + 128);
  v8 |= 1u;
  *(_WORD *)(a1 + 204) = v8;
  *(_QWORD *)(a1 + 128) = v22;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 2) == 0)
  {
LABEL_17:
    if ((v7 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v23 = *(_QWORD *)(a2 + 136);
  v8 |= 2u;
  *(_WORD *)(a1 + 204) = v8;
  *(_QWORD *)(a1 + 136) = v23;
  v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x200) == 0)
  {
LABEL_18:
    if ((v7 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_34:
  v24 = *(_DWORD *)(a2 + 184);
  v8 |= 0x200u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 184) = v24;
  if ((*(_WORD *)(a2 + 204) & 0x20) != 0)
  {
LABEL_19:
    v11 = *(_DWORD *)(a2 + 168);
    *(_WORD *)(a1 + 204) = v8 | 0x20;
    *(_DWORD *)(a1 + 168) = v11;
  }
LABEL_20:
  if (a1 != a2)
  {
    sub_10034F2B0((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_10034F2B0(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_101594E34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "deltaGravity", *(float *)(a1 + 168));
    v5 = *(_WORD *)(a1 + 204);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp", *(_QWORD *)(a1 + 128));
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "epochLastTimestamp", *(_QWORD *)(a1 + 136));
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "isSlowRollDetected", *(_BYTE *)(a1 + 200));
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "isSpinDetected", *(_BYTE *)(a1 + 201));
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "maxDeltaAngleLong", *(float *)(a1 + 172));
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_35:
  PB::TextFormatter::format(this, "maxDeltaAngleShort", *(float *)(a1 + 176));
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "slowRollCumCoherentAngle", *(float *)(a1 + 180));
LABEL_10:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "slowRollSegmentMaxAxisVariance", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "slowRollSegmentMaxFiltRotRate", v11);
  }
  v12 = *(float **)(a1 + 56);
  v13 = *(float **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "slowRollSegmentMinFiltRotRate", v14);
  }
  v15 = *(unint64_t **)(a1 + 80);
  v16 = *(unint64_t **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "slowRollSegmentStartTimes", v17);
  }
  v18 = *(unint64_t **)(a1 + 104);
  v19 = *(unint64_t **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "slowRollSegmentStopTimes", v20);
  }
  v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 4) != 0)
  {
    PB::TextFormatter::format(this, "slowRollStartTime", *(_QWORD *)(a1 + 144));
    v21 = *(_WORD *)(a1 + 204);
    if ((v21 & 8) == 0)
    {
LABEL_22:
      if ((v21 & 0x200) == 0)
        goto LABEL_23;
      goto LABEL_39;
    }
  }
  else if ((v21 & 8) == 0)
  {
    goto LABEL_22;
  }
  PB::TextFormatter::format(this, "slowRollStopTime", *(_QWORD *)(a1 + 152));
  v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x200) == 0)
  {
LABEL_23:
    if ((v21 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "spatialSamplingCount", *(_DWORD *)(a1 + 184));
  v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x400) == 0)
  {
LABEL_24:
    if ((v21 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "spinCumulativeRotation", *(float *)(a1 + 188));
  v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x800) == 0)
  {
LABEL_25:
    if ((v21 & 0x1000) == 0)
      goto LABEL_26;
LABEL_42:
    PB::TextFormatter::format(this, "spinGravityAngleThresholdDegrees", *(float *)(a1 + 196));
    if ((*(_WORD *)(a1 + 204) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_41:
  PB::TextFormatter::format(this, "spinCumulativeRotationThresholdDegrees", *(float *)(a1 + 192));
  v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x1000) != 0)
    goto LABEL_42;
LABEL_26:
  if ((v21 & 0x10) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101595130(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  void **v11;
  void **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  BOOL v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  _DWORD *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  _DWORD *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  _DWORD *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;
  char v191;
  unsigned int v192;
  unint64_t v193;
  char v194;
  char v195;
  unsigned int v196;
  unint64_t v197;
  char v198;
  char v199;
  unsigned int v200;
  unint64_t v201;
  char v202;
  char v203;
  unsigned int v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  char *v208;
  _QWORD *v209;
  unint64_t v210;
  char *v211;
  unint64_t v212;
  char *v213;
  _DWORD *v214;
  unint64_t v215;
  char *v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  char v259;
  unsigned int v260;
  unint64_t v262;
  char v263;
  uint64_t v264;
  unint64_t v265;
  char v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  char v272;
  unsigned int v273;
  unint64_t v275;
  char v276;
  unint64_t v277;
  char v278;
  char *v279;
  int v280;
  char *v281;
  int v282;
  char *v283;
  int v284;
  unint64_t v285;
  void **v288;
  void **v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void **v293;
  _BYTE v294[16];

  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((unsigned __int8 *)this + 24);
  if (v5 < v6 && v7 == 0)
  {
    v292 = a1 + 48;
    v293 = (void **)(a1 + 32);
    v11 = (void **)(a1 + 56);
    v12 = (void **)(a1 + 8);
    v290 = a1 + 24;
    v291 = a1 + 72;
    v13 = (_QWORD *)(a1 + 120);
    v288 = (void **)(a1 + 80);
    v289 = (void **)(a1 + 104);
    v14 = (_QWORD *)(a1 + 96);
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v5 > 0xFFFFFFFFFFFFFFF5 || v5 + 10 > v6)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v5 + 1;
        *((_QWORD *)this + 1) = v5 + 1;
        v20 = *(_BYTE *)(v15 + v5);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v5 = v19;
        v104 = v17++ > 8;
        if (v104)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v18 & 7;
      if ((_DWORD)v26 == 4)
      {
        v7 = 0;
        return v7 == 0;
      }
      v27 = v18 >> 3;
      if ((int)(v18 >> 3) > 200)
      {
        switch((int)v27)
        {
          case 201:
            *(_WORD *)(a1 + 204) |= 1u;
            v36 = *((_QWORD *)this + 1);
            v37 = *((_QWORD *)this + 2);
            v38 = *(_QWORD *)this;
            if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
            {
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v42 = v36 + 1;
                *((_QWORD *)this + 1) = v36 + 1;
                v43 = *(_BYTE *)(v38 + v36);
                v41 |= (unint64_t)(v43 & 0x7F) << v39;
                if ((v43 & 0x80) == 0)
                  goto LABEL_368;
                v39 += 7;
                v36 = v42;
                v104 = v40++ > 8;
              }
              while (!v104);
LABEL_271:
              v41 = 0;
              goto LABEL_368;
            }
            v187 = 0;
            v188 = 0;
            v41 = 0;
            if (v37 <= v36)
              v37 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v37 == v36)
              {
                v41 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v189 = v36 + 1;
                v190 = *(_BYTE *)(v38 + v36);
                *((_QWORD *)this + 1) = v189;
                v41 |= (unint64_t)(v190 & 0x7F) << v187;
                if (v190 < 0)
                {
                  v187 += 7;
                  v36 = v189;
                  v104 = v188++ > 8;
                  if (v104)
                    goto LABEL_271;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v41 = 0;
              }
              break;
            }
LABEL_368:
            *(_QWORD *)(a1 + 128) = v41;
            goto LABEL_460;
          case 202:
            *(_WORD *)(a1 + 204) |= 2u;
            v73 = *((_QWORD *)this + 1);
            v74 = *((_QWORD *)this + 2);
            v75 = *(_QWORD *)this;
            if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
            {
              v76 = 0;
              v77 = 0;
              v78 = 0;
              do
              {
                v79 = v73 + 1;
                *((_QWORD *)this + 1) = v73 + 1;
                v80 = *(_BYTE *)(v75 + v73);
                v78 |= (unint64_t)(v80 & 0x7F) << v76;
                if ((v80 & 0x80) == 0)
                  goto LABEL_377;
                v76 += 7;
                v73 = v79;
                v104 = v77++ > 8;
              }
              while (!v104);
LABEL_296:
              v78 = 0;
              goto LABEL_377;
            }
            v199 = 0;
            v200 = 0;
            v78 = 0;
            if (v74 <= v73)
              v74 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v74 == v73)
              {
                v78 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v201 = v73 + 1;
                v202 = *(_BYTE *)(v75 + v73);
                *((_QWORD *)this + 1) = v201;
                v78 |= (unint64_t)(v202 & 0x7F) << v199;
                if (v202 < 0)
                {
                  v199 += 7;
                  v73 = v201;
                  v104 = v200++ > 8;
                  if (v104)
                    goto LABEL_296;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v78 = 0;
              }
              break;
            }
LABEL_377:
            *(_QWORD *)(a1 + 136) = v78;
            goto LABEL_460;
          case 203:
            *(_WORD *)(a1 + 204) |= 0x200u;
            v81 = *((_QWORD *)this + 1);
            v82 = *((_QWORD *)this + 2);
            v83 = *(_QWORD *)this;
            if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
            {
              v84 = 0;
              v85 = 0;
              v86 = 0;
              do
              {
                v87 = v81 + 1;
                *((_QWORD *)this + 1) = v81 + 1;
                v88 = *(_BYTE *)(v83 + v81);
                v86 |= (unint64_t)(v88 & 0x7F) << v84;
                if ((v88 & 0x80) == 0)
                  goto LABEL_380;
                v84 += 7;
                v81 = v87;
                v104 = v85++ > 8;
              }
              while (!v104);
LABEL_303:
              LODWORD(v86) = 0;
              goto LABEL_380;
            }
            v203 = 0;
            v204 = 0;
            v86 = 0;
            if (v82 <= v81)
              v82 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v82 == v81)
              {
                LODWORD(v86) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v205 = v81 + 1;
                v206 = *(_BYTE *)(v83 + v81);
                *((_QWORD *)this + 1) = v205;
                v86 |= (unint64_t)(v206 & 0x7F) << v203;
                if (v206 < 0)
                {
                  v203 += 7;
                  v81 = v205;
                  v104 = v204++ > 8;
                  if (v104)
                    goto LABEL_303;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v86) = 0;
              }
              break;
            }
LABEL_380:
            *(_DWORD *)(a1 + 184) = v86;
            goto LABEL_460;
          case 204:
            *(_WORD *)(a1 + 204) |= 0x20u;
            v89 = *((_QWORD *)this + 1);
            if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v89);
            goto LABEL_459;
          case 205:
            if ((_DWORD)v26 == 2)
            {
              v90 = v4;
              if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0)
                return 0;
              if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
              {
                v91 = *(char **)(a1 + 88);
                do
                {
                  if ((unint64_t)v91 >= *v14)
                  {
                    v92 = (char *)*v288;
                    v93 = (v91 - (_BYTE *)*v288) >> 3;
                    v94 = v93 + 1;
                    if ((unint64_t)(v93 + 1) >> 61)
                      goto LABEL_473;
                    v95 = *v14 - (_QWORD)v92;
                    if (v95 >> 2 > v94)
                      v94 = v95 >> 2;
                    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
                      v96 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v96 = v94;
                    if (v96)
                    {
                      v97 = (char *)sub_10025E6A0((uint64_t)v14, v96);
                      v92 = *(char **)(a1 + 80);
                      v91 = *(char **)(a1 + 88);
                    }
                    else
                    {
                      v97 = 0;
                    }
                    v98 = &v97[8 * v93];
                    *(_QWORD *)v98 = 0;
                    v99 = v98 + 8;
                    while (v91 != v92)
                    {
                      v100 = *((_QWORD *)v91 - 1);
                      v91 -= 8;
                      *((_QWORD *)v98 - 1) = v100;
                      v98 -= 8;
                    }
                    *(_QWORD *)(a1 + 80) = v98;
                    *(_QWORD *)(a1 + 88) = v99;
                    *(_QWORD *)(a1 + 96) = &v97[8 * v96];
                    if (v92)
                      operator delete(v92);
                    v91 = v99;
                  }
                  else
                  {
                    *(_QWORD *)v91 = 0;
                    v91 += 8;
                  }
                  *(_QWORD *)(a1 + 88) = v91;
                  v102 = *((_QWORD *)this + 1);
                  v101 = *((_QWORD *)this + 2);
                  v103 = *(_QWORD *)this;
                  v104 = v102 > 0xFFFFFFFFFFFFFFF5 || v102 + 10 > v101;
                  if (v104)
                  {
                    v105 = 0;
                    v106 = 0;
                    v112 = 0;
                    if (v101 <= v102)
                      v107 = *((_QWORD *)this + 1);
                    else
                      v107 = *((_QWORD *)this + 2);
                    while (1)
                    {
                      if (v107 == v102)
                        goto LABEL_315;
                      v108 = v102++;
                      v109 = *(_BYTE *)(v103 + v108);
                      *((_QWORD *)this + 1) = v102;
                      v112 |= (unint64_t)(v109 & 0x7F) << v105;
                      if ((v109 & 0x80) == 0)
                        break;
                      v105 += 7;
                      v104 = v106++ > 8;
                      if (v104)
                      {
                        v112 = 0;
                        goto LABEL_132;
                      }
                    }
                    if (*((_BYTE *)this + 24))
                      v112 = 0;
LABEL_132:
                    v113 = v108 + 1;
                  }
                  else
                  {
                    v110 = 0;
                    v111 = 0;
                    v112 = 0;
                    while (1)
                    {
                      v113 = v102 + 1;
                      *((_QWORD *)this + 1) = v102 + 1;
                      v114 = *(_BYTE *)(v103 + v102);
                      v112 |= (unint64_t)(v114 & 0x7F) << v110;
                      if ((v114 & 0x80) == 0)
                        break;
                      v110 += 7;
                      v102 = v113;
                      v104 = v111++ > 8;
                      if (v104)
                      {
                        v112 = 0;
                        break;
                      }
                    }
                  }
                  *((_QWORD *)v91 - 1) = v112;
                }
                while (v113 < v101 && !*((_BYTE *)this + 24));
              }
              goto LABEL_316;
            }
            v208 = *(char **)(a1 + 88);
            v207 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v208 >= v207)
            {
              v219 = (char *)*v288;
              v220 = (v208 - (_BYTE *)*v288) >> 3;
              v221 = v220 + 1;
              if ((unint64_t)(v220 + 1) >> 61)
LABEL_473:
                sub_100259694();
              v222 = v4;
              v223 = v207 - (_QWORD)v219;
              if (v223 >> 2 > v221)
                v221 = v223 >> 2;
              if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
                v224 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v224 = v221;
              if (v224)
              {
                v225 = (char *)sub_10025E6A0((uint64_t)v14, v224);
                v219 = *(char **)(a1 + 80);
                v208 = *(char **)(a1 + 88);
              }
              else
              {
                v225 = 0;
              }
              v254 = &v225[8 * v220];
              *(_QWORD *)v254 = 0;
              v209 = v254 + 8;
              while (v208 != v219)
              {
                v255 = *((_QWORD *)v208 - 1);
                v208 -= 8;
                *((_QWORD *)v254 - 1) = v255;
                v254 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v254;
              *(_QWORD *)(a1 + 88) = v209;
              *(_QWORD *)(a1 + 96) = &v225[8 * v224];
              if (v219)
                operator delete(v219);
              v4 = v222;
            }
            else
            {
              *(_QWORD *)v208 = 0;
              v209 = v208 + 8;
            }
            *(_QWORD *)(a1 + 88) = v209;
            v256 = *((_QWORD *)this + 1);
            v257 = *((_QWORD *)this + 2);
            v258 = *(_QWORD *)this;
            v259 = 0;
            v260 = 0;
            if (v256 <= 0xFFFFFFFFFFFFFFF5 && v256 + 10 <= v257)
            {
              v264 = 0;
              while (1)
              {
                v265 = v256 + 1;
                *((_QWORD *)this + 1) = v256 + 1;
                v266 = *(_BYTE *)(v258 + v256);
                v264 |= (unint64_t)(v266 & 0x7F) << v259;
                if ((v266 & 0x80) == 0)
                  goto LABEL_430;
                v259 += 7;
                v256 = v265;
                v104 = v260++ > 8;
                if (v104)
                  goto LABEL_426;
              }
            }
            v264 = 0;
            if (v257 <= v256)
              v257 = *((_QWORD *)this + 1);
            while (v257 != v256)
            {
              v262 = v256 + 1;
              v263 = *(_BYTE *)(v258 + v256);
              *((_QWORD *)this + 1) = v262;
              v264 |= (unint64_t)(v263 & 0x7F) << v259;
              if ((v263 & 0x80) == 0)
                goto LABEL_428;
              v259 += 7;
              v256 = v262;
              v104 = v260++ > 8;
              if (v104)
                goto LABEL_426;
            }
            goto LABEL_427;
          case 206:
            if ((_DWORD)v26 != 2)
            {
              v211 = *(char **)(a1 + 112);
              v210 = *(_QWORD *)(a1 + 120);
              if ((unint64_t)v211 >= v210)
              {
                v226 = (char *)*v289;
                v227 = (v211 - (_BYTE *)*v289) >> 3;
                v228 = v227 + 1;
                if ((unint64_t)(v227 + 1) >> 61)
LABEL_474:
                  sub_100259694();
                v229 = v4;
                v230 = v210 - (_QWORD)v226;
                if (v230 >> 2 > v228)
                  v228 = v230 >> 2;
                if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8)
                  v231 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v231 = v228;
                if (v231)
                {
                  v232 = (char *)sub_10025E6A0((uint64_t)v13, v231);
                  v226 = *(char **)(a1 + 104);
                  v211 = *(char **)(a1 + 112);
                }
                else
                {
                  v232 = 0;
                }
                v267 = &v232[8 * v227];
                *(_QWORD *)v267 = 0;
                v209 = v267 + 8;
                while (v211 != v226)
                {
                  v268 = *((_QWORD *)v211 - 1);
                  v211 -= 8;
                  *((_QWORD *)v267 - 1) = v268;
                  v267 -= 8;
                }
                *(_QWORD *)(a1 + 104) = v267;
                *(_QWORD *)(a1 + 112) = v209;
                *(_QWORD *)(a1 + 120) = &v232[8 * v231];
                if (v226)
                  operator delete(v226);
                v4 = v229;
              }
              else
              {
                *(_QWORD *)v211 = 0;
                v209 = v211 + 8;
              }
              *(_QWORD *)(a1 + 112) = v209;
              v269 = *((_QWORD *)this + 1);
              v270 = *((_QWORD *)this + 2);
              v271 = *(_QWORD *)this;
              v272 = 0;
              v273 = 0;
              if (v269 > 0xFFFFFFFFFFFFFFF5 || v269 + 10 > v270)
              {
                v264 = 0;
                if (v270 <= v269)
                  v270 = *((_QWORD *)this + 1);
                while (v270 != v269)
                {
                  v275 = v269 + 1;
                  v276 = *(_BYTE *)(v271 + v269);
                  *((_QWORD *)this + 1) = v275;
                  v264 |= (unint64_t)(v276 & 0x7F) << v272;
                  if ((v276 & 0x80) == 0)
                  {
LABEL_428:
                    if (*((_BYTE *)this + 24))
                      v264 = 0;
                    goto LABEL_430;
                  }
                  v272 += 7;
                  v269 = v275;
                  v104 = v273++ > 8;
                  if (v104)
                  {
LABEL_426:
                    v264 = 0;
                    goto LABEL_430;
                  }
                }
LABEL_427:
                v264 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v264 = 0;
                while (1)
                {
                  v277 = v269 + 1;
                  *((_QWORD *)this + 1) = v269 + 1;
                  v278 = *(_BYTE *)(v271 + v269);
                  v264 |= (unint64_t)(v278 & 0x7F) << v272;
                  if ((v278 & 0x80) == 0)
                    break;
                  v272 += 7;
                  v269 = v277;
                  v104 = v273++ > 8;
                  if (v104)
                    goto LABEL_426;
                }
              }
LABEL_430:
              *(v209 - 1) = v264;
              goto LABEL_460;
            }
            v90 = v4;
            if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v91 = *(char **)(a1 + 112);
              do
              {
                if ((unint64_t)v91 >= *v13)
                {
                  v115 = (char *)*v289;
                  v116 = (v91 - (_BYTE *)*v289) >> 3;
                  v117 = v116 + 1;
                  if ((unint64_t)(v116 + 1) >> 61)
                    goto LABEL_474;
                  v118 = *v13 - (_QWORD)v115;
                  if (v118 >> 2 > v117)
                    v117 = v118 >> 2;
                  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                    v119 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v119 = v117;
                  if (v119)
                  {
                    v120 = (char *)sub_10025E6A0((uint64_t)v13, v119);
                    v115 = *(char **)(a1 + 104);
                    v91 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v120 = 0;
                  }
                  v121 = &v120[8 * v116];
                  *(_QWORD *)v121 = 0;
                  v122 = v121 + 8;
                  while (v91 != v115)
                  {
                    v123 = *((_QWORD *)v91 - 1);
                    v91 -= 8;
                    *((_QWORD *)v121 - 1) = v123;
                    v121 -= 8;
                  }
                  *(_QWORD *)(a1 + 104) = v121;
                  *(_QWORD *)(a1 + 112) = v122;
                  *(_QWORD *)(a1 + 120) = &v120[8 * v119];
                  if (v115)
                    operator delete(v115);
                  v91 = v122;
                }
                else
                {
                  *(_QWORD *)v91 = 0;
                  v91 += 8;
                }
                *(_QWORD *)(a1 + 112) = v91;
                v125 = *((_QWORD *)this + 1);
                v124 = *((_QWORD *)this + 2);
                v126 = *(_QWORD *)this;
                if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v124)
                {
                  v133 = 0;
                  v134 = 0;
                  v135 = 0;
                  while (1)
                  {
                    v136 = v125 + 1;
                    *((_QWORD *)this + 1) = v125 + 1;
                    v137 = *(_BYTE *)(v126 + v125);
                    v135 |= (unint64_t)(v137 & 0x7F) << v133;
                    if ((v137 & 0x80) == 0)
                      goto LABEL_178;
                    v133 += 7;
                    v125 = v136;
                    v104 = v134++ > 8;
                    if (v104)
                    {
                      v135 = 0;
                      goto LABEL_178;
                    }
                  }
                }
                v128 = 0;
                v129 = 0;
                v135 = 0;
                if (v124 <= v125)
                  v130 = *((_QWORD *)this + 1);
                else
                  v130 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v130 == v125)
                  {
LABEL_315:
                    *((_BYTE *)this + 24) = 1;
                    *((_QWORD *)v91 - 1) = 0;
                    goto LABEL_316;
                  }
                  v131 = v125++;
                  v132 = *(_BYTE *)(v126 + v131);
                  *((_QWORD *)this + 1) = v125;
                  v135 |= (unint64_t)(v132 & 0x7F) << v128;
                  if ((v132 & 0x80) == 0)
                    break;
                  v128 += 7;
                  v104 = v129++ > 8;
                  if (v104)
                  {
                    v135 = 0;
                    goto LABEL_177;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v135 = 0;
LABEL_177:
                v136 = v131 + 1;
LABEL_178:
                *((_QWORD *)v91 - 1) = v135;
              }
              while (v136 < v124 && !*((_BYTE *)this + 24));
            }
            goto LABEL_316;
          case 207:
            if ((_DWORD)v26 != 2)
            {
              v213 = *(char **)(a1 + 16);
              v212 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v213 >= v212)
              {
                v233 = (char *)*v12;
                v234 = (v213 - (_BYTE *)*v12) >> 2;
                v235 = v234 + 1;
                if ((unint64_t)(v234 + 1) >> 62)
LABEL_470:
                  sub_100259694();
                v236 = v4;
                v237 = v212 - (_QWORD)v233;
                if (v237 >> 1 > v235)
                  v235 = v237 >> 1;
                if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFFCLL)
                  v238 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v238 = v235;
                if (v238)
                {
                  v239 = (char *)sub_100260634(v290, v238);
                  v233 = *(char **)(a1 + 8);
                  v213 = *(char **)(a1 + 16);
                }
                else
                {
                  v239 = 0;
                }
                v279 = &v239[4 * v234];
                *(_DWORD *)v279 = 0;
                v214 = v279 + 4;
                while (v213 != v233)
                {
                  v280 = *((_DWORD *)v213 - 1);
                  v213 -= 4;
                  *((_DWORD *)v279 - 1) = v280;
                  v279 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v279;
                *(_QWORD *)(a1 + 16) = v214;
                *(_QWORD *)(a1 + 24) = &v239[4 * v238];
                if (v233)
                  operator delete(v233);
                v4 = v236;
              }
              else
              {
                *(_DWORD *)v213 = 0;
                v214 = v213 + 4;
              }
              *(_QWORD *)(a1 + 16) = v214;
              goto LABEL_455;
            }
            v90 = v4;
            if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0)
              return 0;
            v138 = *((_QWORD *)this + 1);
            v139 = *((_QWORD *)this + 2);
            while (v138 < v139 && !*((_BYTE *)this + 24))
            {
              v141 = *(char **)(a1 + 16);
              v140 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v141 >= v140)
              {
                v143 = (char *)*v12;
                v144 = (v141 - (_BYTE *)*v12) >> 2;
                v145 = v144 + 1;
                if ((unint64_t)(v144 + 1) >> 62)
                  goto LABEL_470;
                v146 = v140 - (_QWORD)v143;
                if (v146 >> 1 > v145)
                  v145 = v146 >> 1;
                if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
                  v147 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v147 = v145;
                if (v147)
                {
                  v148 = (char *)sub_100260634(v290, v147);
                  v143 = *(char **)(a1 + 8);
                  v141 = *(char **)(a1 + 16);
                }
                else
                {
                  v148 = 0;
                }
                v149 = &v148[4 * v144];
                *(_DWORD *)v149 = 0;
                v142 = v149 + 4;
                while (v141 != v143)
                {
                  v150 = *((_DWORD *)v141 - 1);
                  v141 -= 4;
                  *((_DWORD *)v149 - 1) = v150;
                  v149 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v149;
                *(_QWORD *)(a1 + 16) = v142;
                *(_QWORD *)(a1 + 24) = &v148[4 * v147];
                if (v143)
                  operator delete(v143);
              }
              else
              {
                *(_DWORD *)v141 = 0;
                v142 = v141 + 4;
              }
              *(_QWORD *)(a1 + 16) = v142;
              v151 = *((_QWORD *)this + 1);
              if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
                goto LABEL_314;
              *(v142 - 1) = *(_DWORD *)(*(_QWORD *)this + v151);
              v139 = *((_QWORD *)this + 2);
              v138 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v138;
            }
            goto LABEL_316;
          case 208:
            if ((_DWORD)v26 != 2)
            {
              v216 = *(char **)(a1 + 64);
              v215 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v216 >= v215)
              {
                v240 = (char *)*v11;
                v241 = (v216 - (_BYTE *)*v11) >> 2;
                v242 = v241 + 1;
                if ((unint64_t)(v241 + 1) >> 62)
LABEL_471:
                  sub_100259694();
                v243 = v4;
                v244 = v215 - (_QWORD)v240;
                if (v244 >> 1 > v242)
                  v242 = v244 >> 1;
                if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFFCLL)
                  v245 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v245 = v242;
                if (v245)
                {
                  v246 = (char *)sub_100260634(v291, v245);
                  v240 = *(char **)(a1 + 56);
                  v216 = *(char **)(a1 + 64);
                }
                else
                {
                  v246 = 0;
                }
                v281 = &v246[4 * v241];
                *(_DWORD *)v281 = 0;
                v214 = v281 + 4;
                while (v216 != v240)
                {
                  v282 = *((_DWORD *)v216 - 1);
                  v216 -= 4;
                  *((_DWORD *)v281 - 1) = v282;
                  v281 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v281;
                *(_QWORD *)(a1 + 64) = v214;
                *(_QWORD *)(a1 + 72) = &v246[4 * v245];
                if (v240)
                  operator delete(v240);
                v4 = v243;
              }
              else
              {
                *(_DWORD *)v216 = 0;
                v214 = v216 + 4;
              }
              *(_QWORD *)(a1 + 64) = v214;
              goto LABEL_455;
            }
            v90 = v4;
            if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0)
              return 0;
            v152 = *((_QWORD *)this + 1);
            v153 = *((_QWORD *)this + 2);
            while (v152 < v153 && !*((_BYTE *)this + 24))
            {
              v155 = *(char **)(a1 + 64);
              v154 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v155 >= v154)
              {
                v157 = (char *)*v11;
                v158 = (v155 - (_BYTE *)*v11) >> 2;
                v159 = v158 + 1;
                if ((unint64_t)(v158 + 1) >> 62)
                  goto LABEL_471;
                v160 = v154 - (_QWORD)v157;
                if (v160 >> 1 > v159)
                  v159 = v160 >> 1;
                if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                  v161 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v161 = v159;
                if (v161)
                {
                  v162 = (char *)sub_100260634(v291, v161);
                  v157 = *(char **)(a1 + 56);
                  v155 = *(char **)(a1 + 64);
                }
                else
                {
                  v162 = 0;
                }
                v163 = &v162[4 * v158];
                *(_DWORD *)v163 = 0;
                v156 = v163 + 4;
                while (v155 != v157)
                {
                  v164 = *((_DWORD *)v155 - 1);
                  v155 -= 4;
                  *((_DWORD *)v163 - 1) = v164;
                  v163 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v163;
                *(_QWORD *)(a1 + 64) = v156;
                *(_QWORD *)(a1 + 72) = &v162[4 * v161];
                if (v157)
                  operator delete(v157);
              }
              else
              {
                *(_DWORD *)v155 = 0;
                v156 = v155 + 4;
              }
              *(_QWORD *)(a1 + 64) = v156;
              v165 = *((_QWORD *)this + 1);
              if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)this + 2))
                goto LABEL_314;
              *(v156 - 1) = *(_DWORD *)(*(_QWORD *)this + v165);
              v153 = *((_QWORD *)this + 2);
              v152 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v152;
            }
            goto LABEL_316;
          case 209:
            if ((_DWORD)v26 == 2)
            {
              v90 = v4;
              if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0)
                return 0;
              v166 = *((_QWORD *)this + 1);
              v167 = *((_QWORD *)this + 2);
              while (v166 < v167 && !*((_BYTE *)this + 24))
              {
                v169 = *(char **)(a1 + 40);
                v168 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v169 >= v168)
                {
                  v171 = (char *)*v293;
                  v172 = (v169 - (_BYTE *)*v293) >> 2;
                  v173 = v172 + 1;
                  if ((unint64_t)(v172 + 1) >> 62)
                    goto LABEL_472;
                  v174 = v168 - (_QWORD)v171;
                  if (v174 >> 1 > v173)
                    v173 = v174 >> 1;
                  if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
                    v175 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v175 = v173;
                  if (v175)
                  {
                    v176 = (char *)sub_100260634(v292, v175);
                    v171 = *(char **)(a1 + 32);
                    v169 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v176 = 0;
                  }
                  v177 = &v176[4 * v172];
                  *(_DWORD *)v177 = 0;
                  v170 = v177 + 4;
                  while (v169 != v171)
                  {
                    v178 = *((_DWORD *)v169 - 1);
                    v169 -= 4;
                    *((_DWORD *)v177 - 1) = v178;
                    v177 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v177;
                  *(_QWORD *)(a1 + 40) = v170;
                  *(_QWORD *)(a1 + 48) = &v176[4 * v175];
                  if (v171)
                    operator delete(v171);
                }
                else
                {
                  *(_DWORD *)v169 = 0;
                  v170 = v169 + 4;
                }
                *(_QWORD *)(a1 + 40) = v170;
                v179 = *((_QWORD *)this + 1);
                if (v179 > 0xFFFFFFFFFFFFFFFBLL || v179 + 4 > *((_QWORD *)this + 2))
                {
LABEL_314:
                  *((_BYTE *)this + 24) = 1;
                  break;
                }
                *(v170 - 1) = *(_DWORD *)(*(_QWORD *)this + v179);
                v167 = *((_QWORD *)this + 2);
                v166 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v166;
              }
LABEL_316:
              PB::Reader::recallMark(this, v294);
              v4 = v90;
              goto LABEL_460;
            }
            v218 = *(char **)(a1 + 40);
            v217 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v218 >= v217)
            {
              v247 = (char *)*v293;
              v248 = (v218 - (_BYTE *)*v293) >> 2;
              v249 = v248 + 1;
              if ((unint64_t)(v248 + 1) >> 62)
LABEL_472:
                sub_100259694();
              v250 = v4;
              v251 = v217 - (_QWORD)v247;
              if (v251 >> 1 > v249)
                v249 = v251 >> 1;
              if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
                v252 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v252 = v249;
              if (v252)
              {
                v253 = (char *)sub_100260634(v292, v252);
                v247 = *(char **)(a1 + 32);
                v218 = *(char **)(a1 + 40);
              }
              else
              {
                v253 = 0;
              }
              v283 = &v253[4 * v248];
              *(_DWORD *)v283 = 0;
              v214 = v283 + 4;
              while (v218 != v247)
              {
                v284 = *((_DWORD *)v218 - 1);
                v218 -= 4;
                *((_DWORD *)v283 - 1) = v284;
                v283 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v283;
              *(_QWORD *)(a1 + 40) = v214;
              *(_QWORD *)(a1 + 48) = &v253[4 * v252];
              if (v247)
                operator delete(v247);
              v4 = v250;
            }
            else
            {
              *(_DWORD *)v218 = 0;
              v214 = v218 + 4;
            }
            *(_QWORD *)(a1 + 40) = v214;
LABEL_455:
            v285 = *((_QWORD *)this + 1);
            if (v285 <= 0xFFFFFFFFFFFFFFFBLL && v285 + 4 <= *((_QWORD *)this + 2))
            {
              *(v214 - 1) = *(_DWORD *)(*(_QWORD *)this + v285);
              goto LABEL_459;
            }
            break;
          default:
            goto LABEL_256;
        }
      }
      else
      {
        switch((int)v27)
        {
          case 'e':
            *(_WORD *)(a1 + 204) |= 0x10u;
            v28 = *((_QWORD *)this + 1);
            v29 = *((_QWORD *)this + 2);
            v30 = *(_QWORD *)this;
            if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
            {
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v34 = v28 + 1;
                *((_QWORD *)this + 1) = v28 + 1;
                v35 = *(_BYTE *)(v30 + v28);
                v33 |= (unint64_t)(v35 & 0x7F) << v31;
                if ((v35 & 0x80) == 0)
                  goto LABEL_365;
                v31 += 7;
                v28 = v34;
                v104 = v32++ > 8;
              }
              while (!v104);
LABEL_264:
              v33 = 0;
              goto LABEL_365;
            }
            v183 = 0;
            v184 = 0;
            v33 = 0;
            if (v29 <= v28)
              v29 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v29 == v28)
              {
                v33 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v185 = v28 + 1;
                v186 = *(_BYTE *)(v30 + v28);
                *((_QWORD *)this + 1) = v185;
                v33 |= (unint64_t)(v186 & 0x7F) << v183;
                if (v186 < 0)
                {
                  v183 += 7;
                  v28 = v185;
                  v104 = v184++ > 8;
                  if (v104)
                    goto LABEL_264;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v33 = 0;
              }
              break;
            }
LABEL_365:
            *(_QWORD *)(a1 + 160) = v33;
            goto LABEL_460;
          case 'f':
            *(_WORD *)(a1 + 204) |= 0x4000u;
            v45 = *((_QWORD *)this + 1);
            if (v45 >= *((_QWORD *)this + 2))
            {
              v48 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v46 = v45 + 1;
              v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
              *((_QWORD *)this + 1) = v46;
              v48 = v47 != 0;
            }
            *(_BYTE *)(a1 + 201) = v48;
            goto LABEL_460;
          case 'g':
            *(_WORD *)(a1 + 204) |= 0x400u;
            v49 = *((_QWORD *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v49);
            goto LABEL_459;
          case 'h':
            *(_WORD *)(a1 + 204) |= 0x2000u;
            v50 = *((_QWORD *)this + 1);
            if (v50 >= *((_QWORD *)this + 2))
            {
              v53 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v51 = v50 + 1;
              v52 = *(unsigned __int8 *)(*(_QWORD *)this + v50);
              *((_QWORD *)this + 1) = v51;
              v53 = v52 != 0;
            }
            *(_BYTE *)(a1 + 200) = v53;
            goto LABEL_460;
          case 'i':
            *(_WORD *)(a1 + 204) |= 4u;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            v56 = *(_QWORD *)this;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)this + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_371;
                v57 += 7;
                v54 = v60;
                v104 = v58++ > 8;
              }
              while (!v104);
LABEL_282:
              v59 = 0;
              goto LABEL_371;
            }
            v191 = 0;
            v192 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v55 == v54)
              {
                v59 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v193 = v54 + 1;
                v194 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)this + 1) = v193;
                v59 |= (unint64_t)(v194 & 0x7F) << v191;
                if (v194 < 0)
                {
                  v191 += 7;
                  v54 = v193;
                  v104 = v192++ > 8;
                  if (v104)
                    goto LABEL_282;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v59 = 0;
              }
              break;
            }
LABEL_371:
            *(_QWORD *)(a1 + 144) = v59;
            goto LABEL_460;
          case 'j':
            *(_WORD *)(a1 + 204) |= 8u;
            v62 = *((_QWORD *)this + 1);
            v63 = *((_QWORD *)this + 2);
            v64 = *(_QWORD *)this;
            if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v68 = v62 + 1;
                *((_QWORD *)this + 1) = v62 + 1;
                v69 = *(_BYTE *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0)
                  goto LABEL_374;
                v65 += 7;
                v62 = v68;
                v104 = v66++ > 8;
              }
              while (!v104);
LABEL_289:
              v67 = 0;
              goto LABEL_374;
            }
            v195 = 0;
            v196 = 0;
            v67 = 0;
            if (v63 <= v62)
              v63 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v63 == v62)
              {
                v67 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v197 = v62 + 1;
                v198 = *(_BYTE *)(v64 + v62);
                *((_QWORD *)this + 1) = v197;
                v67 |= (unint64_t)(v198 & 0x7F) << v195;
                if (v198 < 0)
                {
                  v195 += 7;
                  v62 = v197;
                  v104 = v196++ > 8;
                  if (v104)
                    goto LABEL_289;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v67 = 0;
              }
              break;
            }
LABEL_374:
            *(_QWORD *)(a1 + 152) = v67;
            goto LABEL_460;
          case 'k':
            *(_WORD *)(a1 + 204) |= 0x100u;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_459;
          case 'l':
            *(_WORD *)(a1 + 204) |= 0x80u;
            v71 = *((_QWORD *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v71);
            goto LABEL_459;
          case 'm':
            *(_WORD *)(a1 + 204) |= 0x40u;
            v72 = *((_QWORD *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v72);
            goto LABEL_459;
          default:
            if ((_DWORD)v27 == 1)
            {
              *(_WORD *)(a1 + 204) |= 0x1000u;
              v180 = *((_QWORD *)this + 1);
              if (v180 <= 0xFFFFFFFFFFFFFFFBLL && v180 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v180);
                goto LABEL_459;
              }
            }
            else
            {
              if ((_DWORD)v27 != 2)
              {
LABEL_256:
                v181 = v4;
                v182 = PB::Reader::skip(this, v27, v18 & 7, 0);
                v4 = v181;
                if ((v182 & 1) == 0)
                  return 0;
                goto LABEL_460;
              }
              *(_WORD *)(a1 + 204) |= 0x800u;
              v44 = *((_QWORD *)this + 1);
              if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v44);
LABEL_459:
                *((_QWORD *)this + 1) += 4;
                goto LABEL_460;
              }
            }
            break;
        }
      }
      *((_BYTE *)this + 24) = 1;
LABEL_460:
      v5 = *((_QWORD *)this + 1);
      v6 = *((_QWORD *)this + 2);
      v7 = *((unsigned __int8 *)this + 24);
      if (v5 >= v6 || v7 != 0)
        return v7 == 0;
    }
    v21 = 0;
    v22 = 0;
    v18 = 0;
    if (v5 > v6)
      v6 = v5;
    while (v6 != v5)
    {
      v23 = v5 + 1;
      v24 = *(_BYTE *)(v15 + v5);
      *((_QWORD *)this + 1) = v23;
      v18 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v5 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v7 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v7 == 0;
}

uint64_t sub_1015966AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  v3 = result;
  v4 = *(_WORD *)(result + 204);
  if ((v4 & 0x1000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 196), 1u);
    v4 = *(_WORD *)(v3 + 204);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((*(_WORD *)(result + 204) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 192), 2u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x4000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 160), 0x65u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 201), 0x66u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 188), 0x67u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 200), 0x68u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 144), 0x69u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 152), 0x6Au);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 180), 0x6Bu);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 176), 0x6Cu);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 172), 0x6Du);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 128), 0xC9u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
LABEL_46:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 0xCBu);
    if ((*(_WORD *)(v3 + 204) & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 136), 0xCAu);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x200) != 0)
    goto LABEL_46;
LABEL_15:
  if ((v4 & 0x20) != 0)
LABEL_16:
    result = PB::Writer::write(this, *(float *)(v3 + 168), 0xCCu);
LABEL_17:
  v5 = *(unint64_t **)(v3 + 80);
  v6 = *(unint64_t **)(v3 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeVarInt(this, v7, 0xCDu);
  }
  v8 = *(unint64_t **)(v3 + 104);
  v9 = *(unint64_t **)(v3 + 112);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::writeVarInt(this, v10, 0xCEu);
  }
  v11 = *(float **)(v3 + 8);
  v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13, 0xCFu);
  }
  v14 = *(float **)(v3 + 56);
  v15 = *(float **)(v3 + 64);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16, 0xD0u);
  }
  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    result = PB::Writer::write(this, v19, 0xD1u);
  }
  return result;
}

uint64_t sub_101596918(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE4A0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101596930(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101596954(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_1021BE4A0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 24);
      *(_BYTE *)(result + 32) = v3 | 8;
      *(_DWORD *)(result + 24) = v8;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 16) = v7;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015969FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101596ACC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101597030(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  return result;
}

uint64_t sub_1015970E0(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE4D8;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1015970F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159711C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)result = &off_1021BE4D8;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v3 = 8;
    *(_WORD *)(result + 60) = 8;
    *(_QWORD *)(result + 32) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 56);
    v3 |= 0x100u;
    *(_WORD *)(result + 60) = v3;
    *(_BYTE *)(result + 56) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *(_DWORD *)(a2 + 52);
    v3 |= 0x80u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 52) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 24) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      return result;
LABEL_20:
    v12 = *(_QWORD *)(a2 + 16);
    *(_WORD *)(result + 60) = v3 | 2;
    *(_QWORD *)(result + 16) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 8) = v11;
  if ((*(_WORD *)(a2 + 60) & 2) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_101597234(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 40));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "epochFirstTimestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "epochLastTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "hasSteps", *(_BYTE *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "stepCountEventTimestamp", *(_QWORD *)(a1 + 24));
    if ((*(_WORD *)(a1 + 60) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "stepCount", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 8) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101597384(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *(_WORD *)(a1 + 60) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v54 = 0;
                v55 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v56 = v21++;
                  v57 = *(_BYTE *)(v22 + v56);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v57 & 0x7F) << v54;
                  if ((v57 & 0x80) == 0)
                    break;
                  v54 += 7;
                  v14 = v55++ > 8;
                  if (v14)
                  {
                    v25 = 0;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
LABEL_114:
                v2 = v56 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v2 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_115;
                  v23 += 7;
                  v21 = v2;
                  v14 = v24++ > 8;
                }
                while (!v14);
                v25 = 0;
              }
LABEL_115:
              *(_QWORD *)(a1 + 32) = v25;
              goto LABEL_136;
            case 'f':
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 56) = v34;
              goto LABEL_136;
            case 'g':
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_110;
            case 'h':
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_110;
            case 'i':
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_110:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_48:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_136;
            case 'j':
              *(_WORD *)(a1 + 60) |= 0x40u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v62 = 0;
                v63 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_125;
                  }
                  v64 = v35++;
                  v65 = *(_BYTE *)(v36 + v64);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_124:
                    v2 = v64 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_124;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_125;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_125:
              *(_DWORD *)(a1 + 48) = v39;
              goto LABEL_136;
            case 'k':
              *(_WORD *)(a1 + 60) |= 4u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v66 = 0;
                v67 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v68 = v41++;
                  v69 = *(_BYTE *)(v42 + v68);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v69 & 0x7F) << v66;
                  if ((v69 & 0x80) == 0)
                    break;
                  v66 += 7;
                  v14 = v67++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_129:
                    v2 = v68 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_129;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_130;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_130:
              *(_QWORD *)(a1 + 24) = v45;
              goto LABEL_136;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_WORD *)(a1 + 60) |= 1u;
                v47 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v48 = *(_QWORD *)this;
                if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
                {
                  v70 = 0;
                  v71 = 0;
                  v51 = 0;
                  if (v2 <= v47)
                    v2 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v2 == v47)
                    {
                      v51 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_135;
                    }
                    v72 = v47++;
                    v73 = *(_BYTE *)(v48 + v72);
                    *((_QWORD *)this + 1) = v47;
                    v51 |= (unint64_t)(v73 & 0x7F) << v70;
                    if ((v73 & 0x80) == 0)
                      break;
                    v70 += 7;
                    v14 = v71++ > 8;
                    if (v14)
                    {
                      v51 = 0;
                      goto LABEL_134;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v51 = 0;
LABEL_134:
                  v2 = v72 + 1;
                }
                else
                {
                  v49 = 0;
                  v50 = 0;
                  v51 = 0;
                  while (1)
                  {
                    v2 = v47 + 1;
                    *((_QWORD *)this + 1) = v47 + 1;
                    v52 = *(_BYTE *)(v48 + v47);
                    v51 |= (unint64_t)(v52 & 0x7F) << v49;
                    if ((v52 & 0x80) == 0)
                      break;
                    v49 += 7;
                    v47 = v2;
                    v14 = v50++ > 8;
                    if (v14)
                    {
                      v51 = 0;
                      break;
                    }
                  }
                }
LABEL_135:
                *(_QWORD *)(a1 + 8) = v51;
              }
              else if ((_DWORD)v20 == 202)
              {
                *(_WORD *)(a1 + 60) |= 2u;
                v27 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v28 = *(_QWORD *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v58 = 0;
                  v59 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v2 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v2 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_120;
                    }
                    v60 = v27++;
                    v61 = *(_BYTE *)(v28 + v60);
                    *((_QWORD *)this + 1) = v27;
                    v31 |= (unint64_t)(v61 & 0x7F) << v58;
                    if ((v61 & 0x80) == 0)
                      break;
                    v58 += 7;
                    v14 = v59++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_119;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v31 = 0;
LABEL_119:
                  v2 = v60 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v2 = v27 + 1;
                    *((_QWORD *)this + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v2;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_120:
                *(_QWORD *)(a1 + 16) = v31;
              }
              else
              {
                result = PB::Reader::skip(this, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)this + 1);
              }
LABEL_136:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101597A98(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 32), 0x65u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0x66u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x67u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x68u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0x69u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x6Au);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x6Bu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCAu);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xC9u);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCAu);
  return result;
}

double sub_101597BB8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BE510;
  *(_DWORD *)(a1 + 212) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_101597BE4(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021BE510;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_101597C44(PB::Base *a1)
{
  sub_101597BE4(a1);
  operator delete();
}

uint64_t sub_101597C68(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1021BE510;
  *(_DWORD *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_DWORD *)(a2 + 212);
  if ((v5 & 4) != 0)
  {
    v7 = *(_QWORD *)(a2 + 96);
    v6 = 4;
    *(_DWORD *)(a1 + 212) = 4;
    *(_QWORD *)(a1 + 96) = v7;
    v5 = *(_DWORD *)(a2 + 212);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
  }
  v8 = *(_BYTE *)(a2 + 211);
  v6 |= 0x80000000;
  *(_DWORD *)(a1 + 212) = v6;
  *(_BYTE *)(a1 + 211) = v8;
  v5 = *(_DWORD *)(a2 + 212);
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 212) = v6 | 1;
    *(_QWORD *)(a1 + 80) = v9;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_1002A3054((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x10000000) != 0)
  {
    v13 = *(_BYTE *)(a2 + 208);
    *(_DWORD *)(a1 + 212) |= 0x10000000u;
    *(_BYTE *)(a1 + 208) = v13;
    v10 = *(_DWORD *)(a2 + 212);
    if ((v10 & 0x20000000) == 0)
    {
LABEL_12:
      if ((v10 & 0x400000) == 0)
        goto LABEL_13;
      goto LABEL_43;
    }
  }
  else if ((v10 & 0x20000000) == 0)
  {
    goto LABEL_12;
  }
  v14 = *(_BYTE *)(a2 + 209);
  *(_DWORD *)(a1 + 212) |= 0x20000000u;
  *(_BYTE *)(a1 + 209) = v14;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x400000) == 0)
  {
LABEL_13:
    if ((v10 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 212) |= 0x400000u;
  *(_DWORD *)(a1 + 184) = v15;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x10) == 0)
  {
LABEL_14:
    if ((v10 & 0x80000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 212) |= 0x10u;
  *(_DWORD *)(a1 + 112) = v16;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x80000) == 0)
  {
LABEL_15:
    if ((v10 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 212) |= 0x80000u;
  *(_DWORD *)(a1 + 172) = v17;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x40000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 212) |= 0x40000u;
  *(_DWORD *)(a1 + 168) = v18;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 212) |= 0x20000u;
  *(_DWORD *)(a1 + 164) = v19;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x10000) == 0)
  {
LABEL_18:
    if ((v10 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 212) |= 0x10000u;
  *(_DWORD *)(a1 + 160) = v20;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x8000) == 0)
  {
LABEL_19:
    if ((v10 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 212) |= 0x8000u;
  *(_DWORD *)(a1 + 156) = v21;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x4000) == 0)
  {
LABEL_20:
    if ((v10 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 212) |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v22;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x2000) == 0)
  {
LABEL_21:
    if ((v10 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v23 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 212) |= 0x2000u;
  *(_DWORD *)(a1 + 148) = v23;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x100000) == 0)
  {
LABEL_22:
    if ((v10 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v24 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 212) |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v24;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x100) == 0)
  {
LABEL_23:
    if ((v10 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 212) |= 0x100u;
  *(_DWORD *)(a1 + 128) = v25;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 212) |= 0x1000000u;
  *(_DWORD *)(a1 + 192) = v26;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x20) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v27 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 212) |= 0x20u;
  *(_DWORD *)(a1 + 116) = v27;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v28 = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 212) |= 8u;
  *(_QWORD *)(a1 + 104) = v28;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) |= 0x2000000u;
  *(_DWORD *)(a1 + 196) = v29;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v30 = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 212) |= 0x4000000u;
  *(_DWORD *)(a1 + 200) = v30;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v31 = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) |= 0x8000000u;
  *(_DWORD *)(a1 + 204) = v31;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x800) == 0)
  {
LABEL_30:
    if ((v10 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v32 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 212) |= 0x800u;
  *(_DWORD *)(a1 + 140) = v32;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x80) == 0)
  {
LABEL_31:
    if ((v10 & 2) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v33 = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 212) |= 0x80u;
  *(_DWORD *)(a1 + 124) = v33;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 2) == 0)
  {
LABEL_32:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v34 = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 212) |= 2u;
  *(_QWORD *)(a1 + 88) = v34;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x1000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v35 = *(_BYTE *)(a2 + 210);
  *(_DWORD *)(a1 + 212) |= 0x40000000u;
  *(_BYTE *)(a1 + 210) = v35;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x1000) == 0)
  {
LABEL_34:
    if ((v10 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v36 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 212) |= 0x1000u;
  *(_DWORD *)(a1 + 144) = v36;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x200) == 0)
  {
LABEL_35:
    if ((v10 & 0x40) == 0)
      goto LABEL_36;
    goto LABEL_66;
  }
LABEL_65:
  v37 = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 212) |= 0x200u;
  *(_DWORD *)(a1 + 132) = v37;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x40) == 0)
  {
LABEL_36:
    if ((v10 & 0x200000) == 0)
      goto LABEL_37;
    goto LABEL_67;
  }
LABEL_66:
  v38 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 212) |= 0x40u;
  *(_DWORD *)(a1 + 120) = v38;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x200000) == 0)
  {
LABEL_37:
    if ((v10 & 0x400) == 0)
      goto LABEL_38;
LABEL_68:
    v40 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 212) |= 0x400u;
    *(_DWORD *)(a1 + 136) = v40;
    if ((*(_DWORD *)(a2 + 212) & 0x800000) == 0)
      return a1;
    goto LABEL_39;
  }
LABEL_67:
  v39 = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 212) |= 0x200000u;
  *(_DWORD *)(a1 + 180) = v39;
  v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x400) != 0)
    goto LABEL_68;
LABEL_38:
  if ((v10 & 0x800000) != 0)
  {
LABEL_39:
    v11 = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a1 + 212) |= 0x800000u;
    *(_DWORD *)(a1 + 188) = v11;
  }
  return a1;
}

uint64_t sub_1015980FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  int v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgHorizontalDecelMax", *(double *)(a1 + 80));
    v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "avgHorizontalDecelThresholdCoupled", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "btHint", *(_DWORD *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "companionAopTs", *(_QWORD *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "currentWindowMean", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_48:
  PB::TextFormatter::format(this, "enableMode", *(_DWORD *)(a1 + 124));
  if ((*(_DWORD *)(a1 + 212) & 0x100) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "impactThresholdUncoupled", *(float *)(a1 + 128));
LABEL_9:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "inertialAccel", v8);
  }
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x10000000) != 0)
  {
    PB::TextFormatter::format(this, "isMounted", *(_BYTE *)(a1 + 208));
    v9 = *(_DWORD *)(a1 + 212);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_13:
      if ((v9 & 0x200) == 0)
        goto LABEL_14;
      goto LABEL_52;
    }
  }
  else if ((v9 & 0x20000000) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(this, "isSimulated", *(_BYTE *)(a1 + 209));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "lastCompleted15sWindowMean", *(float *)(a1 + 132));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x400) == 0)
  {
LABEL_15:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "locallyArmedBitmap", *(_DWORD *)(a1 + 136));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v9 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "martyIsBicycle", *(_BYTE *)(a1 + 210));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x800) == 0)
  {
LABEL_17:
    if ((v9 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "martyTriggerPathBitmap", *(_DWORD *)(a1 + 140));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x1000) == 0)
  {
LABEL_18:
    if ((v9 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "maxMeanTenMinPreTrigger", *(float *)(a1 + 144));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x2000) == 0)
  {
LABEL_19:
    if ((v9 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "nAccelGap", *(_DWORD *)(a1 + 148));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "nFullAccel", *(_DWORD *)(a1 + 152));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "nFullDM", *(_DWORD *)(a1 + 156));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x10000) == 0)
  {
LABEL_22:
    if ((v9 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "nOldAccel", *(_DWORD *)(a1 + 160));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x20000) == 0)
  {
LABEL_23:
    if ((v9 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "nOldDM", *(_DWORD *)(a1 + 164));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x40000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "nOldDt", *(_DWORD *)(a1 + 168));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x80000) == 0)
  {
LABEL_25:
    if ((v9 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "nPrecondition", *(_DWORD *)(a1 + 172));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x100000) == 0)
  {
LABEL_26:
    if ((v9 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "nUseNearest", *(_DWORD *)(a1 + 176));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x200000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "numMaxEnvelopes", *(_DWORD *)(a1 + 180));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_66:
  PB::TextFormatter::format(this, "numResets", *(_DWORD *)(a1 + 184));
  if ((*(_DWORD *)(a1 + 212) & 0x800000) != 0)
LABEL_29:
    PB::TextFormatter::format(this, "overrideArmedBitmap", *(_DWORD *)(a1 + 188));
LABEL_30:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "prevQ", v12);
  }
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "rawClampedAccel", v15);
  }
  v16 = *(_DWORD *)(a1 + 212);
  if (v16 < 0)
  {
    PB::TextFormatter::format(this, "shouldTrigger", *(_BYTE *)(a1 + 211));
    v16 = *(_DWORD *)(a1 + 212);
    if ((v16 & 4) == 0)
    {
LABEL_36:
      if ((v16 & 0x1000000) == 0)
        goto LABEL_37;
      goto LABEL_70;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_36;
  }
  PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 96));
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_37:
    if ((v16 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "triggerPathBitmap", *(_DWORD *)(a1 + 192));
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v16 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 196));
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v16 & 0x8000000) == 0)
      goto LABEL_40;
LABEL_73:
    PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 204));
    if ((*(_DWORD *)(a1 + 212) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_41;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 200));
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x8000000) != 0)
    goto LABEL_73;
LABEL_40:
  if ((v16 & 8) != 0)
LABEL_41:
    PB::TextFormatter::format(this, "vehicleProbabilityTs", *(_QWORD *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015985C0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _DWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  unint64_t v217;
  unint64_t v218;
  int v219;
  BOOL v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char v235;
  unsigned int v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char v243;
  unsigned int v244;
  uint64_t v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  unint64_t v252;
  char *v253;
  _QWORD *v254;
  unint64_t v255;
  char *v256;
  _DWORD *v257;
  unint64_t v258;
  char *v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  unint64_t v282;
  char v283;
  char v284;
  unsigned int v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  unint64_t v302;
  char v303;
  char v304;
  unsigned int v305;
  unint64_t v306;
  char v307;
  char v308;
  unsigned int v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  unint64_t v318;
  char v319;
  char v320;
  unsigned int v321;
  unint64_t v322;
  char v323;
  char v324;
  unsigned int v325;
  unint64_t v326;
  char v327;
  char v328;
  unsigned int v329;
  unint64_t v330;
  char v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  char *v354;
  int v355;
  char *v356;
  int v357;
  unint64_t v358;
  _BYTE v361[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 56);
    v13 = a1 + 72;
    v14 = (void **)(a1 + 8);
    v15 = a1 + 24;
    while (1)
    {
      v16 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v21 = *(_BYTE *)(v16 + v4);
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0)
          break;
        v17 += 7;
        v4 = v20;
        v22 = v18++ > 8;
        if (v22)
          goto LABEL_20;
      }
LABEL_21:
      v28 = v19 & 7;
      if ((_DWORD)v28 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v19 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_459;
              v32 += 7;
              v29 = v35;
              v22 = v33++ > 8;
            }
            while (!v22);
LABEL_271:
            v34 = 0;
            goto LABEL_459;
          }
          v248 = 0;
          v249 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v250 = v29 + 1;
              v251 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v250;
              v34 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v29 = v250;
                v22 = v249++ > 8;
                if (v22)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_459:
          *(_QWORD *)(a1 + 96) = v34;
          goto LABEL_544;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x80000000;
          v37 = *((_QWORD *)this + 1);
          if (v37 >= *((_QWORD *)this + 2))
          {
            v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)this + v37);
            *((_QWORD *)this + 1) = v38;
            v40 = v39 != 0;
          }
          *(_BYTE *)(a1 + 211) = v40;
          goto LABEL_544;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 1u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v41);
          goto LABEL_523;
        case 4u:
          if ((_DWORD)v28 == 2)
          {
            if ((PB::Reader::placeMark(this, v361, v28, a4) & 1) != 0)
              return 0;
            v42 = *((_QWORD *)this + 1);
            v43 = *((_QWORD *)this + 2);
            while (v42 < v43 && !*((_BYTE *)this + 24))
            {
              v45 = *(char **)(a1 + 16);
              v44 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v45 >= v44)
              {
                v47 = (char *)*v14;
                v48 = (v45 - (_BYTE *)*v14) >> 3;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 61)
                  goto LABEL_554;
                v50 = v44 - (_QWORD)v47;
                if (v50 >> 2 > v49)
                  v49 = v50 >> 2;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                  v51 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v52 = (char *)sub_10025E6A0(v15, v51);
                  v47 = *(char **)(a1 + 8);
                  v45 = *(char **)(a1 + 16);
                }
                else
                {
                  v52 = 0;
                }
                v53 = &v52[8 * v48];
                *(_QWORD *)v53 = 0;
                v46 = v53 + 8;
                while (v45 != v47)
                {
                  v54 = *((_QWORD *)v45 - 1);
                  v45 -= 8;
                  *((_QWORD *)v53 - 1) = v54;
                  v53 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v53;
                *(_QWORD *)(a1 + 16) = v46;
                *(_QWORD *)(a1 + 24) = &v52[8 * v51];
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *(_QWORD *)v45 = 0;
                v46 = v45 + 8;
              }
              *(_QWORD *)(a1 + 16) = v46;
              v55 = *((_QWORD *)this + 1);
              if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
                goto LABEL_412;
              *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
              v43 = *((_QWORD *)this + 2);
              v42 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v42;
            }
            goto LABEL_413;
          }
          v253 = *(char **)(a1 + 16);
          v252 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v253 >= v252)
          {
            v332 = (char *)*v14;
            v333 = (v253 - (_BYTE *)*v14) >> 3;
            v334 = v333 + 1;
            if ((unint64_t)(v333 + 1) >> 61)
LABEL_554:
              sub_100259694();
            v335 = v252 - (_QWORD)v332;
            if (v335 >> 2 > v334)
              v334 = v335 >> 2;
            if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFF8)
              v336 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v336 = v334;
            if (v336)
            {
              v337 = (char *)sub_10025E6A0(v15, v336);
              v332 = *(char **)(a1 + 8);
              v253 = *(char **)(a1 + 16);
            }
            else
            {
              v337 = 0;
            }
            v350 = &v337[8 * v333];
            *(_QWORD *)v350 = 0;
            v254 = v350 + 8;
            while (v253 != v332)
            {
              v351 = *((_QWORD *)v253 - 1);
              v253 -= 8;
              *((_QWORD *)v350 - 1) = v351;
              v350 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v350;
            *(_QWORD *)(a1 + 16) = v254;
            *(_QWORD *)(a1 + 24) = &v337[8 * v336];
            if (v332)
              operator delete(v332);
          }
          else
          {
            *(_QWORD *)v253 = 0;
            v254 = v253 + 8;
          }
          *(_QWORD *)(a1 + 16) = v254;
          v352 = *((_QWORD *)this + 1);
          if (v352 <= 0xFFFFFFFFFFFFFFF7 && v352 + 8 <= *((_QWORD *)this + 2))
          {
            *(v254 - 1) = *(_QWORD *)(*(_QWORD *)this + v352);
LABEL_523:
            v353 = *((_QWORD *)this + 1) + 8;
            goto LABEL_543;
          }
          goto LABEL_540;
        case 5u:
          if ((_DWORD)v28 != 2)
          {
            v256 = *(char **)(a1 + 64);
            v255 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v256 >= v255)
            {
              v338 = (char *)*v12;
              v339 = (v256 - (_BYTE *)*v12) >> 2;
              v340 = v339 + 1;
              if ((unint64_t)(v339 + 1) >> 62)
LABEL_555:
                sub_100259694();
              v341 = v255 - (_QWORD)v338;
              if (v341 >> 1 > v340)
                v340 = v341 >> 1;
              if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFFCLL)
                v342 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v342 = v340;
              if (v342)
              {
                v343 = (char *)sub_100260634(v13, v342);
                v338 = *(char **)(a1 + 56);
                v256 = *(char **)(a1 + 64);
              }
              else
              {
                v343 = 0;
              }
              v354 = &v343[4 * v339];
              *(_DWORD *)v354 = 0;
              v257 = v354 + 4;
              while (v256 != v338)
              {
                v355 = *((_DWORD *)v256 - 1);
                v256 -= 4;
                *((_DWORD *)v354 - 1) = v355;
                v354 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v354;
              *(_QWORD *)(a1 + 64) = v257;
              *(_QWORD *)(a1 + 72) = &v343[4 * v342];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_DWORD *)v256 = 0;
              v257 = v256 + 4;
            }
            *(_QWORD *)(a1 + 64) = v257;
            goto LABEL_538;
          }
          if ((PB::Reader::placeMark(this, v361, v28, a4) & 1) != 0)
            return 0;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            v59 = *(char **)(a1 + 64);
            v58 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v12;
              v62 = (v59 - (_BYTE *)*v12) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_555;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_100260634(v13, v65);
                v61 = *(char **)(a1 + 56);
                v59 = *(char **)(a1 + 64);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v67;
              *(_QWORD *)(a1 + 64) = v60;
              *(_QWORD *)(a1 + 72) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *(_QWORD *)(a1 + 64) = v60;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_412;
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)this + v69);
            v57 = *((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v56;
          }
          goto LABEL_413;
        case 6u:
          if ((_DWORD)v28 == 2)
          {
            if ((PB::Reader::placeMark(this, v361, v28, a4) & 1) != 0)
              return 0;
            v70 = *((_QWORD *)this + 1);
            v71 = *((_QWORD *)this + 2);
            while (v70 < v71 && !*((_BYTE *)this + 24))
            {
              v73 = *(char **)(a1 + 40);
              v72 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v73 >= v72)
              {
                v75 = (char *)*v10;
                v76 = (v73 - (_BYTE *)*v10) >> 2;
                v77 = v76 + 1;
                if ((unint64_t)(v76 + 1) >> 62)
                  goto LABEL_556;
                v78 = v72 - (_QWORD)v75;
                if (v78 >> 1 > v77)
                  v77 = v78 >> 1;
                if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                  v79 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v79 = v77;
                if (v79)
                {
                  v80 = (char *)sub_100260634(v11, v79);
                  v75 = *(char **)(a1 + 32);
                  v73 = *(char **)(a1 + 40);
                }
                else
                {
                  v80 = 0;
                }
                v81 = &v80[4 * v76];
                *(_DWORD *)v81 = 0;
                v74 = v81 + 4;
                while (v73 != v75)
                {
                  v82 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *((_DWORD *)v81 - 1) = v82;
                  v81 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v81;
                *(_QWORD *)(a1 + 40) = v74;
                *(_QWORD *)(a1 + 48) = &v80[4 * v79];
                if (v75)
                  operator delete(v75);
              }
              else
              {
                *(_DWORD *)v73 = 0;
                v74 = v73 + 4;
              }
              *(_QWORD *)(a1 + 40) = v74;
              v83 = *((_QWORD *)this + 1);
              if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              {
LABEL_412:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v74 - 1) = *(_DWORD *)(*(_QWORD *)this + v83);
              v71 = *((_QWORD *)this + 2);
              v70 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v70;
            }
LABEL_413:
            PB::Reader::recallMark(this, v361);
          }
          else
          {
            v259 = *(char **)(a1 + 40);
            v258 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v259 >= v258)
            {
              v344 = (char *)*v10;
              v345 = (v259 - (_BYTE *)*v10) >> 2;
              v346 = v345 + 1;
              if ((unint64_t)(v345 + 1) >> 62)
LABEL_556:
                sub_100259694();
              v347 = v258 - (_QWORD)v344;
              if (v347 >> 1 > v346)
                v346 = v347 >> 1;
              if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL)
                v348 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v348 = v346;
              if (v348)
              {
                v349 = (char *)sub_100260634(v11, v348);
                v344 = *(char **)(a1 + 32);
                v259 = *(char **)(a1 + 40);
              }
              else
              {
                v349 = 0;
              }
              v356 = &v349[4 * v345];
              *(_DWORD *)v356 = 0;
              v257 = v356 + 4;
              while (v259 != v344)
              {
                v357 = *((_DWORD *)v259 - 1);
                v259 -= 4;
                *((_DWORD *)v356 - 1) = v357;
                v356 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v356;
              *(_QWORD *)(a1 + 40) = v257;
              *(_QWORD *)(a1 + 48) = &v349[4 * v348];
              if (v344)
                operator delete(v344);
            }
            else
            {
              *(_DWORD *)v259 = 0;
              v257 = v259 + 4;
            }
            *(_QWORD *)(a1 + 40) = v257;
LABEL_538:
            v358 = *((_QWORD *)this + 1);
            if (v358 <= 0xFFFFFFFFFFFFFFFBLL && v358 + 4 <= *((_QWORD *)this + 2))
            {
              *(v257 - 1) = *(_DWORD *)(*(_QWORD *)this + v358);
LABEL_542:
              v353 = *((_QWORD *)this + 1) + 4;
LABEL_543:
              *((_QWORD *)this + 1) = v353;
            }
            else
            {
LABEL_540:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_544:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x10000000u;
          v84 = *((_QWORD *)this + 1);
          if (v84 >= *((_QWORD *)this + 2))
          {
            v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v85 = v84 + 1;
            v86 = *(unsigned __int8 *)(*(_QWORD *)this + v84);
            *((_QWORD *)this + 1) = v85;
            v87 = v86 != 0;
          }
          *(_BYTE *)(a1 + 208) = v87;
          goto LABEL_544;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x20000000u;
          v88 = *((_QWORD *)this + 1);
          if (v88 >= *((_QWORD *)this + 2))
          {
            v91 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v89 = v88 + 1;
            v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
            *((_QWORD *)this + 1) = v89;
            v91 = v90 != 0;
          }
          *(_BYTE *)(a1 + 209) = v91;
          goto LABEL_544;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          v92 = *((_QWORD *)this + 1);
          v93 = *((_QWORD *)this + 2);
          v94 = *(_QWORD *)this;
          if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
          {
            v95 = 0;
            v96 = 0;
            v97 = 0;
            do
            {
              v98 = v92 + 1;
              *((_QWORD *)this + 1) = v92 + 1;
              v99 = *(_BYTE *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0)
                goto LABEL_462;
              v95 += 7;
              v92 = v98;
              v22 = v96++ > 8;
            }
            while (!v22);
LABEL_290:
            LODWORD(v97) = 0;
            goto LABEL_462;
          }
          v260 = 0;
          v261 = 0;
          v97 = 0;
          if (v93 <= v92)
            v93 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v93 == v92)
            {
              LODWORD(v97) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v262 = v92 + 1;
              v263 = *(_BYTE *)(v94 + v92);
              *((_QWORD *)this + 1) = v262;
              v97 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v92 = v262;
                v22 = v261++ > 8;
                if (v22)
                  goto LABEL_290;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v97) = 0;
            }
            break;
          }
LABEL_462:
          *(_DWORD *)(a1 + 184) = v97;
          goto LABEL_544;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          v100 = *((_QWORD *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v100);
          goto LABEL_542;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_465;
              v104 += 7;
              v101 = v107;
              v22 = v105++ > 8;
            }
            while (!v22);
LABEL_297:
            LODWORD(v106) = 0;
            goto LABEL_465;
          }
          v264 = 0;
          v265 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v266 = v101 + 1;
              v267 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v266;
              v106 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v101 = v266;
                v22 = v265++ > 8;
                if (v22)
                  goto LABEL_297;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_465:
          *(_DWORD *)(a1 + 172) = v106;
          goto LABEL_544;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_468;
              v112 += 7;
              v109 = v115;
              v22 = v113++ > 8;
            }
            while (!v22);
LABEL_304:
            LODWORD(v114) = 0;
            goto LABEL_468;
          }
          v268 = 0;
          v269 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v270 = v109 + 1;
              v271 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v270;
              v114 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                v109 = v270;
                v22 = v269++ > 8;
                if (v22)
                  goto LABEL_304;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_468:
          *(_DWORD *)(a1 + 168) = v114;
          goto LABEL_544;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_471;
              v120 += 7;
              v117 = v123;
              v22 = v121++ > 8;
            }
            while (!v22);
LABEL_311:
            LODWORD(v122) = 0;
            goto LABEL_471;
          }
          v272 = 0;
          v273 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v274 = v117 + 1;
              v275 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v274;
              v122 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                v117 = v274;
                v22 = v273++ > 8;
                if (v22)
                  goto LABEL_311;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_471:
          *(_DWORD *)(a1 + 164) = v122;
          goto LABEL_544;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_474;
              v128 += 7;
              v125 = v131;
              v22 = v129++ > 8;
            }
            while (!v22);
LABEL_318:
            LODWORD(v130) = 0;
            goto LABEL_474;
          }
          v276 = 0;
          v277 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v278 = v125 + 1;
              v279 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v278;
              v130 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                v125 = v278;
                v22 = v277++ > 8;
                if (v22)
                  goto LABEL_318;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_474:
          *(_DWORD *)(a1 + 160) = v130;
          goto LABEL_544;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_477;
              v136 += 7;
              v133 = v139;
              v22 = v137++ > 8;
            }
            while (!v22);
LABEL_325:
            LODWORD(v138) = 0;
            goto LABEL_477;
          }
          v280 = 0;
          v281 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v282 = v133 + 1;
              v283 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v282;
              v138 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                v133 = v282;
                v22 = v281++ > 8;
                if (v22)
                  goto LABEL_325;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_477:
          *(_DWORD *)(a1 + 156) = v138;
          goto LABEL_544;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_480;
              v144 += 7;
              v141 = v147;
              v22 = v145++ > 8;
            }
            while (!v22);
LABEL_332:
            LODWORD(v146) = 0;
            goto LABEL_480;
          }
          v284 = 0;
          v285 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v286 = v141 + 1;
              v287 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v286;
              v146 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                v141 = v286;
                v22 = v285++ > 8;
                if (v22)
                  goto LABEL_332;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_480:
          *(_DWORD *)(a1 + 152) = v146;
          goto LABEL_544;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_483;
              v152 += 7;
              v149 = v155;
              v22 = v153++ > 8;
            }
            while (!v22);
LABEL_339:
            LODWORD(v154) = 0;
            goto LABEL_483;
          }
          v288 = 0;
          v289 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v290 = v149 + 1;
              v291 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v290;
              v154 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                v149 = v290;
                v22 = v289++ > 8;
                if (v22)
                  goto LABEL_339;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_483:
          *(_DWORD *)(a1 + 148) = v154;
          goto LABEL_544;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_486;
              v160 += 7;
              v157 = v163;
              v22 = v161++ > 8;
            }
            while (!v22);
LABEL_346:
            LODWORD(v162) = 0;
            goto LABEL_486;
          }
          v292 = 0;
          v293 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v294 = v157 + 1;
              v295 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v294;
              v162 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                v157 = v294;
                v22 = v293++ > 8;
                if (v22)
                  goto LABEL_346;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_486:
          *(_DWORD *)(a1 + 176) = v162;
          goto LABEL_544;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          v165 = *((_QWORD *)this + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v165);
          goto LABEL_542;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          v166 = *((_QWORD *)this + 1);
          v167 = *((_QWORD *)this + 2);
          v168 = *(_QWORD *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)this + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_489;
              v169 += 7;
              v166 = v172;
              v22 = v170++ > 8;
            }
            while (!v22);
LABEL_353:
            LODWORD(v171) = 0;
            goto LABEL_489;
          }
          v296 = 0;
          v297 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v298 = v166 + 1;
              v299 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)this + 1) = v298;
              v171 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                v166 = v298;
                v22 = v297++ > 8;
                if (v22)
                  goto LABEL_353;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v171) = 0;
            }
            break;
          }
LABEL_489:
          *(_DWORD *)(a1 + 192) = v171;
          goto LABEL_544;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          v174 = *((_QWORD *)this + 1);
          v175 = *((_QWORD *)this + 2);
          v176 = *(_QWORD *)this;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            v177 = 0;
            v178 = 0;
            v179 = 0;
            do
            {
              v180 = v174 + 1;
              *((_QWORD *)this + 1) = v174 + 1;
              v181 = *(_BYTE *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0)
                goto LABEL_492;
              v177 += 7;
              v174 = v180;
              v22 = v178++ > 8;
            }
            while (!v22);
LABEL_360:
            LODWORD(v179) = 0;
            goto LABEL_492;
          }
          v300 = 0;
          v301 = 0;
          v179 = 0;
          if (v175 <= v174)
            v175 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v175 == v174)
            {
              LODWORD(v179) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v302 = v174 + 1;
              v303 = *(_BYTE *)(v176 + v174);
              *((_QWORD *)this + 1) = v302;
              v179 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                v174 = v302;
                v22 = v301++ > 8;
                if (v22)
                  goto LABEL_360;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v179) = 0;
            }
            break;
          }
LABEL_492:
          *(_DWORD *)(a1 + 116) = v179;
          goto LABEL_544;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 8u;
          v182 = *((_QWORD *)this + 1);
          v183 = *((_QWORD *)this + 2);
          v184 = *(_QWORD *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v185 = 0;
            v186 = 0;
            v187 = 0;
            do
            {
              v188 = v182 + 1;
              *((_QWORD *)this + 1) = v182 + 1;
              v189 = *(_BYTE *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0)
                goto LABEL_495;
              v185 += 7;
              v182 = v188;
              v22 = v186++ > 8;
            }
            while (!v22);
LABEL_367:
            v187 = 0;
            goto LABEL_495;
          }
          v304 = 0;
          v305 = 0;
          v187 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v183 == v182)
            {
              v187 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v306 = v182 + 1;
              v307 = *(_BYTE *)(v184 + v182);
              *((_QWORD *)this + 1) = v306;
              v187 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                v182 = v306;
                v22 = v305++ > 8;
                if (v22)
                  goto LABEL_367;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v187 = 0;
            }
            break;
          }
LABEL_495:
          *(_QWORD *)(a1 + 104) = v187;
          goto LABEL_544;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          v190 = *((_QWORD *)this + 1);
          if (v190 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v190);
          goto LABEL_542;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x4000000u;
          v191 = *((_QWORD *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v191);
          goto LABEL_542;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x8000000u;
          v192 = *((_QWORD *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v192);
          goto LABEL_542;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          v193 = *((_QWORD *)this + 1);
          v194 = *((_QWORD *)this + 2);
          v195 = *(_QWORD *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            v196 = 0;
            v197 = 0;
            v198 = 0;
            do
            {
              v199 = v193 + 1;
              *((_QWORD *)this + 1) = v193 + 1;
              v200 = *(_BYTE *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0)
                goto LABEL_498;
              v196 += 7;
              v193 = v199;
              v22 = v197++ > 8;
            }
            while (!v22);
LABEL_374:
            LODWORD(v198) = 0;
            goto LABEL_498;
          }
          v308 = 0;
          v309 = 0;
          v198 = 0;
          if (v194 <= v193)
            v194 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v310 = v193 + 1;
              v311 = *(_BYTE *)(v195 + v193);
              *((_QWORD *)this + 1) = v310;
              v198 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                v193 = v310;
                v22 = v309++ > 8;
                if (v22)
                  goto LABEL_374;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v198) = 0;
            }
            break;
          }
LABEL_498:
          *(_DWORD *)(a1 + 140) = v198;
          goto LABEL_544;
        case 0x1Bu:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          v201 = *((_QWORD *)this + 1);
          v202 = *((_QWORD *)this + 2);
          v203 = *(_QWORD *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            v204 = 0;
            v205 = 0;
            v206 = 0;
            do
            {
              v207 = v201 + 1;
              *((_QWORD *)this + 1) = v201 + 1;
              v208 = *(_BYTE *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0)
                goto LABEL_501;
              v204 += 7;
              v201 = v207;
              v22 = v205++ > 8;
            }
            while (!v22);
LABEL_381:
            LODWORD(v206) = 0;
            goto LABEL_501;
          }
          v312 = 0;
          v313 = 0;
          v206 = 0;
          if (v202 <= v201)
            v202 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v202 == v201)
            {
              LODWORD(v206) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v314 = v201 + 1;
              v315 = *(_BYTE *)(v203 + v201);
              *((_QWORD *)this + 1) = v314;
              v206 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                v201 = v314;
                v22 = v313++ > 8;
                if (v22)
                  goto LABEL_381;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v206) = 0;
            }
            break;
          }
LABEL_501:
          *(_DWORD *)(a1 + 124) = v206;
          goto LABEL_544;
        case 0x1Cu:
          *(_DWORD *)(a1 + 212) |= 2u;
          v209 = *((_QWORD *)this + 1);
          v210 = *((_QWORD *)this + 2);
          v211 = *(_QWORD *)this;
          if (v209 <= 0xFFFFFFFFFFFFFFF5 && v209 + 10 <= v210)
          {
            v212 = 0;
            v213 = 0;
            v214 = 0;
            do
            {
              v215 = v209 + 1;
              *((_QWORD *)this + 1) = v209 + 1;
              v216 = *(_BYTE *)(v211 + v209);
              v214 |= (unint64_t)(v216 & 0x7F) << v212;
              if ((v216 & 0x80) == 0)
                goto LABEL_504;
              v212 += 7;
              v209 = v215;
              v22 = v213++ > 8;
            }
            while (!v22);
LABEL_388:
            v214 = 0;
            goto LABEL_504;
          }
          v316 = 0;
          v317 = 0;
          v214 = 0;
          if (v210 <= v209)
            v210 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v210 == v209)
            {
              v214 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v318 = v209 + 1;
              v319 = *(_BYTE *)(v211 + v209);
              *((_QWORD *)this + 1) = v318;
              v214 |= (unint64_t)(v319 & 0x7F) << v316;
              if (v319 < 0)
              {
                v316 += 7;
                v209 = v318;
                v22 = v317++ > 8;
                if (v22)
                  goto LABEL_388;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v214 = 0;
            }
            break;
          }
LABEL_504:
          *(_QWORD *)(a1 + 88) = v214;
          goto LABEL_544;
        case 0x1Du:
          *(_DWORD *)(a1 + 212) |= 0x40000000u;
          v217 = *((_QWORD *)this + 1);
          if (v217 >= *((_QWORD *)this + 2))
          {
            v220 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v218 = v217 + 1;
            v219 = *(unsigned __int8 *)(*(_QWORD *)this + v217);
            *((_QWORD *)this + 1) = v218;
            v220 = v219 != 0;
          }
          *(_BYTE *)(a1 + 210) = v220;
          goto LABEL_544;
        case 0x1Eu:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          v221 = *((_QWORD *)this + 1);
          if (v221 > 0xFFFFFFFFFFFFFFFBLL || v221 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v221);
          goto LABEL_542;
        case 0x1Fu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          v222 = *((_QWORD *)this + 1);
          if (v222 > 0xFFFFFFFFFFFFFFFBLL || v222 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v222);
          goto LABEL_542;
        case 0x20u:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          v223 = *((_QWORD *)this + 1);
          if (v223 > 0xFFFFFFFFFFFFFFFBLL || v223 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v223);
          goto LABEL_542;
        case 0x21u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          v224 = *((_QWORD *)this + 1);
          v225 = *((_QWORD *)this + 2);
          v226 = *(_QWORD *)this;
          if (v224 <= 0xFFFFFFFFFFFFFFF5 && v224 + 10 <= v225)
          {
            v227 = 0;
            v228 = 0;
            v229 = 0;
            do
            {
              v230 = v224 + 1;
              *((_QWORD *)this + 1) = v224 + 1;
              v231 = *(_BYTE *)(v226 + v224);
              v229 |= (unint64_t)(v231 & 0x7F) << v227;
              if ((v231 & 0x80) == 0)
                goto LABEL_507;
              v227 += 7;
              v224 = v230;
              v22 = v228++ > 8;
            }
            while (!v22);
LABEL_397:
            LODWORD(v229) = 0;
            goto LABEL_507;
          }
          v320 = 0;
          v321 = 0;
          v229 = 0;
          if (v225 <= v224)
            v225 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v225 == v224)
            {
              LODWORD(v229) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v322 = v224 + 1;
              v323 = *(_BYTE *)(v226 + v224);
              *((_QWORD *)this + 1) = v322;
              v229 |= (unint64_t)(v323 & 0x7F) << v320;
              if (v323 < 0)
              {
                v320 += 7;
                v224 = v322;
                v22 = v321++ > 8;
                if (v22)
                  goto LABEL_397;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v229) = 0;
            }
            break;
          }
LABEL_507:
          *(_DWORD *)(a1 + 180) = v229;
          goto LABEL_544;
        case 0x22u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          v232 = *((_QWORD *)this + 1);
          v233 = *((_QWORD *)this + 2);
          v234 = *(_QWORD *)this;
          if (v232 <= 0xFFFFFFFFFFFFFFF5 && v232 + 10 <= v233)
          {
            v235 = 0;
            v236 = 0;
            v237 = 0;
            do
            {
              v238 = v232 + 1;
              *((_QWORD *)this + 1) = v232 + 1;
              v239 = *(_BYTE *)(v234 + v232);
              v237 |= (unint64_t)(v239 & 0x7F) << v235;
              if ((v239 & 0x80) == 0)
                goto LABEL_510;
              v235 += 7;
              v232 = v238;
              v22 = v236++ > 8;
            }
            while (!v22);
LABEL_404:
            LODWORD(v237) = 0;
            goto LABEL_510;
          }
          v324 = 0;
          v325 = 0;
          v237 = 0;
          if (v233 <= v232)
            v233 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v233 == v232)
            {
              LODWORD(v237) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v326 = v232 + 1;
              v327 = *(_BYTE *)(v234 + v232);
              *((_QWORD *)this + 1) = v326;
              v237 |= (unint64_t)(v327 & 0x7F) << v324;
              if (v327 < 0)
              {
                v324 += 7;
                v232 = v326;
                v22 = v325++ > 8;
                if (v22)
                  goto LABEL_404;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v237) = 0;
            }
            break;
          }
LABEL_510:
          *(_DWORD *)(a1 + 136) = v237;
          goto LABEL_544;
        case 0x23u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          v240 = *((_QWORD *)this + 1);
          v241 = *((_QWORD *)this + 2);
          v242 = *(_QWORD *)this;
          if (v240 <= 0xFFFFFFFFFFFFFFF5 && v240 + 10 <= v241)
          {
            v243 = 0;
            v244 = 0;
            v245 = 0;
            do
            {
              v246 = v240 + 1;
              *((_QWORD *)this + 1) = v240 + 1;
              v247 = *(_BYTE *)(v242 + v240);
              v245 |= (unint64_t)(v247 & 0x7F) << v243;
              if ((v247 & 0x80) == 0)
                goto LABEL_513;
              v243 += 7;
              v240 = v246;
              v22 = v244++ > 8;
            }
            while (!v22);
LABEL_411:
            LODWORD(v245) = 0;
            goto LABEL_513;
          }
          v328 = 0;
          v329 = 0;
          v245 = 0;
          if (v241 <= v240)
            v241 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v241 == v240)
            {
              LODWORD(v245) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v330 = v240 + 1;
              v331 = *(_BYTE *)(v242 + v240);
              *((_QWORD *)this + 1) = v330;
              v245 |= (unint64_t)(v331 & 0x7F) << v328;
              if (v331 < 0)
              {
                v328 += 7;
                v240 = v330;
                v22 = v329++ > 8;
                if (v22)
                  goto LABEL_411;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v245) = 0;
            }
            break;
          }
LABEL_513:
          *(_DWORD *)(a1 + 188) = v245;
          goto LABEL_544;
        default:
          if ((PB::Reader::skip(this, v19 >> 3, v19 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_544;
      }
    }
    v23 = 0;
    v24 = 0;
    v19 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v25 = v4 + 1;
      v26 = *(_BYTE *)(v16 + v4);
      *((_QWORD *)this + 1) = v25;
      v19 |= (unint64_t)(v26 & 0x7F) << v23;
      if ((v26 & 0x80) == 0)
        goto LABEL_21;
      v23 += 7;
      v4 = v25;
      if (v24++ >= 9)
      {
LABEL_20:
        v19 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10159A160(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  int v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 212);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_45:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 211), 2u);
    if ((*(_DWORD *)(v3 + 212) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 96), 1u);
  v4 = *(_DWORD *)(v3 + 212);
  if (v4 < 0)
    goto LABEL_45;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 4u);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 5u);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13, 6u);
  }
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000000) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 208), 7u);
    v14 = *(_DWORD *)(v3 + 212);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_16:
      if ((v14 & 0x400000) == 0)
        goto LABEL_17;
      goto LABEL_49;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 209), 8u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400000) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 9u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 0xAu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80000) == 0)
  {
LABEL_19:
    if ((v14 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0xBu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000) == 0)
  {
LABEL_20:
    if ((v14 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0xCu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20000) == 0)
  {
LABEL_21:
    if ((v14 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0xDu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000) == 0)
  {
LABEL_22:
    if ((v14 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0xEu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000) == 0)
  {
LABEL_23:
    if ((v14 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0xFu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000) == 0)
  {
LABEL_24:
    if ((v14 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0x10u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000) == 0)
  {
LABEL_25:
    if ((v14 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x11u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100000) == 0)
  {
LABEL_26:
    if ((v14 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x12u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100) == 0)
  {
LABEL_27:
    if ((v14 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0x13u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v14 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x14u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20) == 0)
  {
LABEL_29:
    if ((v14 & 8) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x15u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 8) == 0)
  {
LABEL_30:
    if ((v14 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 104), 0x16u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v14 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 196), 0x17u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 200), 0x18u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x800) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 204), 0x19u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x800) == 0)
  {
LABEL_34:
    if ((v14 & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0x1Au);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80) == 0)
  {
LABEL_35:
    if ((v14 & 2) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x1Bu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 2) == 0)
  {
LABEL_36:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 88), 0x1Cu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v14 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 210), 0x1Du);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000) == 0)
  {
LABEL_38:
    if ((v14 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x1Eu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200) == 0)
  {
LABEL_39:
    if ((v14 & 0x40) == 0)
      goto LABEL_40;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x1Fu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40) == 0)
  {
LABEL_40:
    if ((v14 & 0x200000) == 0)
      goto LABEL_41;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 0x20u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200000) == 0)
  {
LABEL_41:
    if ((v14 & 0x400) == 0)
      goto LABEL_42;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 0x21u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400) == 0)
  {
LABEL_42:
    if ((v14 & 0x800000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x23u);
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x22u);
  if ((*(_DWORD *)(v3 + 212) & 0x800000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x23u);
  return result;
}

uint64_t sub_10159A570(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE548;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_10159A588(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159A5AC(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)result = &off_1021BE548;
  *(_DWORD *)(result + 96) = 0;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x1000) != 0)
  {
    v4 = *(_DWORD *)(a2 + 88);
    v3 = 4096;
    *(_WORD *)(result + 96) = 4096;
    *(_DWORD *)(result + 88) = v4;
    v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x800) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 84);
    v3 |= 0x800u;
    *(_WORD *)(result + 96) = v3;
    *(_DWORD *)(result + 84) = v5;
    v2 = *(_WORD *)(a2 + 96);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *(_DWORD *)(a2 + 72);
    v3 |= 0x100u;
    *(_WORD *)(result + 96) = v3;
    *(_DWORD *)(result + 72) = v6;
    v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *(_BYTE *)(a2 + 94);
  v3 |= 0x8000u;
  *(_WORD *)(result + 96) = v3;
  *(_BYTE *)(result + 94) = v8;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *(_BYTE *)(a2 + 93);
  v3 |= 0x4000u;
  *(_WORD *)(result + 96) = v3;
  *(_BYTE *)(result + 93) = v9;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *(_BYTE *)(a2 + 92);
  v3 |= 0x2000u;
  *(_WORD *)(result + 96) = v3;
  *(_BYTE *)(result + 92) = v10;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 16) = v11;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 32) = v12;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 40) = v13;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 48) = v14;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 56) = v15;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 96) = v3;
  *(_QWORD *)(result + 8) = v16;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(result + 96) = v3;
  *(_DWORD *)(result + 80) = v17;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 4) == 0)
      return result;
LABEL_34:
    v19 = *(_QWORD *)(a2 + 24);
    *(_WORD *)(result + 96) = v3 | 4;
    *(_QWORD *)(result + 24) = v19;
    return result;
  }
LABEL_33:
  v18 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_WORD *)(result + 96) = v3;
  *(_DWORD *)(result + 76) = v18;
  if ((*(_WORD *)(a2 + 96) & 4) != 0)
    goto LABEL_34;
  return result;
}

uint64_t sub_10159A788(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "armedDuration", *(_QWORD *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a1 + 96) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "armedDurationThreshold", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "armedDurationThresholdTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "btHint", *(_QWORD *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "epochFirstTimestamp", *(_QWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "epochLastTimestamp", *(_QWORD *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "firstTriggerTimestamp", *(_QWORD *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "isBTHintDetected", *(_BYTE *)(a1 + 92));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isClusterInBeginningOfDrive", *(_BYTE *)(a1 + 93));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isTriggerCluster", *(_BYTE *)(a1 + 94));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "lastTriggerTimestamp", *(_QWORD *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "numTriggersInEpoch", *(_DWORD *)(a1 + 76));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "numTriggersInWindow", *(_DWORD *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x80) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 64));
    if ((*(_WORD *)(a1 + 96) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(this, "numTriggersThreshold", *(_DWORD *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x1000) != 0)
LABEL_17:
    PB::TextFormatter::format(this, "windowDuration", *(_DWORD *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159A9B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  char v98;
  uint64_t result;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 300)
      {
        switch((int)v20)
        {
          case 301:
            *(_WORD *)(a1 + 96) |= 8u;
            v27 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v28 = *(_QWORD *)this;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              v104 = 0;
              v105 = 0;
              v31 = 0;
              if (v2 <= v27)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v27)
                {
                  v31 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_223;
                }
                v106 = v27++;
                v107 = *(_BYTE *)(v28 + v106);
                *((_QWORD *)this + 1) = v27;
                v31 |= (unint64_t)(v107 & 0x7F) << v104;
                if ((v107 & 0x80) == 0)
                  break;
                v104 += 7;
                v14 = v105++ > 8;
                if (v14)
                {
                  v31 = 0;
LABEL_222:
                  v2 = v106 + 1;
                  goto LABEL_223;
                }
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
              goto LABEL_222;
            }
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v2 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                goto LABEL_223;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
            }
            while (!v14);
            v31 = 0;
LABEL_223:
            *(_QWORD *)(a1 + 32) = v31;
            break;
          case 302:
            *(_WORD *)(a1 + 96) |= 0x10u;
            v45 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v46 = *(_QWORD *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              v112 = 0;
              v113 = 0;
              v49 = 0;
              if (v2 <= v45)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v45)
                {
                  v49 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_233;
                }
                v114 = v45++;
                v115 = *(_BYTE *)(v46 + v114);
                *((_QWORD *)this + 1) = v45;
                v49 |= (unint64_t)(v115 & 0x7F) << v112;
                if ((v115 & 0x80) == 0)
                  break;
                v112 += 7;
                v14 = v113++ > 8;
                if (v14)
                {
                  v49 = 0;
LABEL_232:
                  v2 = v114 + 1;
                  goto LABEL_233;
                }
              }
              if (*((_BYTE *)this + 24))
                v49 = 0;
              goto LABEL_232;
            }
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v2 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
                goto LABEL_233;
              v47 += 7;
              v45 = v2;
              v14 = v48++ > 8;
            }
            while (!v14);
            v49 = 0;
LABEL_233:
            *(_QWORD *)(a1 + 40) = v49;
            break;
          case 303:
            *(_WORD *)(a1 + 96) |= 0x20u;
            v51 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v52 = *(_QWORD *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              v116 = 0;
              v117 = 0;
              v55 = 0;
              if (v2 <= v51)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v51)
                {
                  v55 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_238;
                }
                v118 = v51++;
                v119 = *(_BYTE *)(v52 + v118);
                *((_QWORD *)this + 1) = v51;
                v55 |= (unint64_t)(v119 & 0x7F) << v116;
                if ((v119 & 0x80) == 0)
                  break;
                v116 += 7;
                v14 = v117++ > 8;
                if (v14)
                {
                  v55 = 0;
LABEL_237:
                  v2 = v118 + 1;
                  goto LABEL_238;
                }
              }
              if (*((_BYTE *)this + 24))
                v55 = 0;
              goto LABEL_237;
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v2 = v51 + 1;
              *((_QWORD *)this + 1) = v51 + 1;
              v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0)
                goto LABEL_238;
              v53 += 7;
              v51 = v2;
              v14 = v54++ > 8;
            }
            while (!v14);
            v55 = 0;
LABEL_238:
            *(_QWORD *)(a1 + 48) = v55;
            break;
          case 304:
            *(_WORD *)(a1 + 96) |= 0x40u;
            v57 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v58 = *(_QWORD *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              v120 = 0;
              v121 = 0;
              v61 = 0;
              if (v2 <= v57)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v57)
                {
                  v61 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_243;
                }
                v122 = v57++;
                v123 = *(_BYTE *)(v58 + v122);
                *((_QWORD *)this + 1) = v57;
                v61 |= (unint64_t)(v123 & 0x7F) << v120;
                if ((v123 & 0x80) == 0)
                  break;
                v120 += 7;
                v14 = v121++ > 8;
                if (v14)
                {
                  v61 = 0;
LABEL_242:
                  v2 = v122 + 1;
                  goto LABEL_243;
                }
              }
              if (*((_BYTE *)this + 24))
                v61 = 0;
              goto LABEL_242;
            }
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v2 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0)
                goto LABEL_243;
              v59 += 7;
              v57 = v2;
              v14 = v60++ > 8;
            }
            while (!v14);
            v61 = 0;
LABEL_243:
            *(_QWORD *)(a1 + 56) = v61;
            break;
          case 305:
            *(_WORD *)(a1 + 96) |= 1u;
            v63 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v64 = *(_QWORD *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              v124 = 0;
              v125 = 0;
              v67 = 0;
              if (v2 <= v63)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v63)
                {
                  v67 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_248;
                }
                v126 = v63++;
                v127 = *(_BYTE *)(v64 + v126);
                *((_QWORD *)this + 1) = v63;
                v67 |= (unint64_t)(v127 & 0x7F) << v124;
                if ((v127 & 0x80) == 0)
                  break;
                v124 += 7;
                v14 = v125++ > 8;
                if (v14)
                {
                  v67 = 0;
LABEL_247:
                  v2 = v126 + 1;
                  goto LABEL_248;
                }
              }
              if (*((_BYTE *)this + 24))
                v67 = 0;
              goto LABEL_247;
            }
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v2 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0)
                goto LABEL_248;
              v65 += 7;
              v63 = v2;
              v14 = v66++ > 8;
            }
            while (!v14);
            v67 = 0;
LABEL_248:
            *(_QWORD *)(a1 + 8) = v67;
            break;
          case 306:
            *(_WORD *)(a1 + 96) |= 0x400u;
            v69 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v70 = *(_QWORD *)this;
            if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
            {
              v128 = 0;
              v129 = 0;
              v73 = 0;
              if (v2 <= v69)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v69)
                {
                  LODWORD(v73) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_253;
                }
                v130 = v69++;
                v131 = *(_BYTE *)(v70 + v130);
                *((_QWORD *)this + 1) = v69;
                v73 |= (unint64_t)(v131 & 0x7F) << v128;
                if ((v131 & 0x80) == 0)
                  break;
                v128 += 7;
                v14 = v129++ > 8;
                if (v14)
                {
                  LODWORD(v73) = 0;
LABEL_252:
                  v2 = v130 + 1;
                  goto LABEL_253;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
              goto LABEL_252;
            }
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v2 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v74 = *(_BYTE *)(v70 + v69);
              v73 |= (unint64_t)(v74 & 0x7F) << v71;
              if ((v74 & 0x80) == 0)
                goto LABEL_253;
              v71 += 7;
              v69 = v2;
              v14 = v72++ > 8;
            }
            while (!v14);
            LODWORD(v73) = 0;
LABEL_253:
            *(_DWORD *)(a1 + 80) = v73;
            break;
          case 307:
            *(_WORD *)(a1 + 96) |= 0x200u;
            v75 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v76 = *(_QWORD *)this;
            if (v75 > 0xFFFFFFFFFFFFFFF5 || v75 + 10 > v2)
            {
              v132 = 0;
              v133 = 0;
              v79 = 0;
              if (v2 <= v75)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v75)
                {
                  LODWORD(v79) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_258;
                }
                v134 = v75++;
                v135 = *(_BYTE *)(v76 + v134);
                *((_QWORD *)this + 1) = v75;
                v79 |= (unint64_t)(v135 & 0x7F) << v132;
                if ((v135 & 0x80) == 0)
                  break;
                v132 += 7;
                v14 = v133++ > 8;
                if (v14)
                {
                  LODWORD(v79) = 0;
LABEL_257:
                  v2 = v134 + 1;
                  goto LABEL_258;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v79) = 0;
              goto LABEL_257;
            }
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v2 = v75 + 1;
              *((_QWORD *)this + 1) = v75 + 1;
              v80 = *(_BYTE *)(v76 + v75);
              v79 |= (unint64_t)(v80 & 0x7F) << v77;
              if ((v80 & 0x80) == 0)
                goto LABEL_258;
              v77 += 7;
              v75 = v2;
              v14 = v78++ > 8;
            }
            while (!v14);
            LODWORD(v79) = 0;
LABEL_258:
            *(_DWORD *)(a1 + 76) = v79;
            break;
          case 308:
            *(_WORD *)(a1 + 96) |= 4u;
            v81 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v82 = *(_QWORD *)this;
            if (v81 > 0xFFFFFFFFFFFFFFF5 || v81 + 10 > v2)
            {
              v136 = 0;
              v137 = 0;
              v85 = 0;
              if (v2 <= v81)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v81)
                {
                  v85 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_263;
                }
                v138 = v81++;
                v139 = *(_BYTE *)(v82 + v138);
                *((_QWORD *)this + 1) = v81;
                v85 |= (unint64_t)(v139 & 0x7F) << v136;
                if ((v139 & 0x80) == 0)
                  break;
                v136 += 7;
                v14 = v137++ > 8;
                if (v14)
                {
                  v85 = 0;
LABEL_262:
                  v2 = v138 + 1;
                  goto LABEL_263;
                }
              }
              if (*((_BYTE *)this + 24))
                v85 = 0;
              goto LABEL_262;
            }
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v2 = v81 + 1;
              *((_QWORD *)this + 1) = v81 + 1;
              v86 = *(_BYTE *)(v82 + v81);
              v85 |= (unint64_t)(v86 & 0x7F) << v83;
              if ((v86 & 0x80) == 0)
                goto LABEL_263;
              v83 += 7;
              v81 = v2;
              v14 = v84++ > 8;
            }
            while (!v14);
            v85 = 0;
LABEL_263:
            *(_QWORD *)(a1 + 24) = v85;
            break;
          default:
            goto LABEL_121;
        }
      }
      else if ((int)v20 <= 200)
      {
        switch((_DWORD)v20)
        {
          case 'e':
            *(_WORD *)(a1 + 96) |= 0x1000u;
            v87 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v88 = *(_QWORD *)this;
            if (v87 > 0xFFFFFFFFFFFFFFF5 || v87 + 10 > v2)
            {
              v140 = 0;
              v141 = 0;
              v91 = 0;
              if (v2 <= v87)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v87)
                {
                  LODWORD(v91) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_268;
                }
                v142 = v87++;
                v143 = *(_BYTE *)(v88 + v142);
                *((_QWORD *)this + 1) = v87;
                v91 |= (unint64_t)(v143 & 0x7F) << v140;
                if ((v143 & 0x80) == 0)
                  break;
                v140 += 7;
                v14 = v141++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  goto LABEL_267;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v91) = 0;
LABEL_267:
              v2 = v142 + 1;
            }
            else
            {
              v89 = 0;
              v90 = 0;
              v91 = 0;
              while (1)
              {
                v2 = v87 + 1;
                *((_QWORD *)this + 1) = v87 + 1;
                v92 = *(_BYTE *)(v88 + v87);
                v91 |= (unint64_t)(v92 & 0x7F) << v89;
                if ((v92 & 0x80) == 0)
                  break;
                v89 += 7;
                v87 = v2;
                v14 = v90++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  break;
                }
              }
            }
LABEL_268:
            *(_DWORD *)(a1 + 88) = v91;
            break;
          case 'f':
            *(_WORD *)(a1 + 96) |= 0x800u;
            v93 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v94 = *(_QWORD *)this;
            if (v93 > 0xFFFFFFFFFFFFFFF5 || v93 + 10 > v2)
            {
              v144 = 0;
              v145 = 0;
              v97 = 0;
              if (v2 <= v93)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v93)
                {
                  LODWORD(v97) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_273;
                }
                v146 = v93++;
                v147 = *(_BYTE *)(v94 + v146);
                *((_QWORD *)this + 1) = v93;
                v97 |= (unint64_t)(v147 & 0x7F) << v144;
                if ((v147 & 0x80) == 0)
                  break;
                v144 += 7;
                v14 = v145++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  goto LABEL_272;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v97) = 0;
LABEL_272:
              v2 = v146 + 1;
            }
            else
            {
              v95 = 0;
              v96 = 0;
              v97 = 0;
              while (1)
              {
                v2 = v93 + 1;
                *((_QWORD *)this + 1) = v93 + 1;
                v98 = *(_BYTE *)(v94 + v93);
                v97 |= (unint64_t)(v98 & 0x7F) << v95;
                if ((v98 & 0x80) == 0)
                  break;
                v95 += 7;
                v93 = v2;
                v14 = v96++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  break;
                }
              }
            }
LABEL_273:
            *(_DWORD *)(a1 + 84) = v97;
            break;
          case 'g':
            *(_WORD *)(a1 + 96) |= 0x100u;
            v2 = *((_QWORD *)this + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v2;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
            break;
          default:
LABEL_121:
            result = PB::Reader::skip(this, v20, v11 & 7, 0);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)this + 1);
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 201:
            *(_WORD *)(a1 + 96) |= 0x80u;
            v21 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v22 = *(_QWORD *)this;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v100 = 0;
              v101 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  v25 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_218;
                }
                v102 = v21++;
                v103 = *(_BYTE *)(v22 + v102);
                *((_QWORD *)this + 1) = v21;
                v25 |= (unint64_t)(v103 & 0x7F) << v100;
                if ((v103 & 0x80) == 0)
                  break;
                v100 += 7;
                v14 = v101++ > 8;
                if (v14)
                {
                  v25 = 0;
LABEL_217:
                  v2 = v102 + 1;
                  goto LABEL_218;
                }
              }
              if (*((_BYTE *)this + 24))
                v25 = 0;
              goto LABEL_217;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_218;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            v25 = 0;
LABEL_218:
            *(_QWORD *)(a1 + 64) = v25;
            break;
          case 202:
            *(_WORD *)(a1 + 96) |= 0x8000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v34 = v33 != 0;
            }
            *(_BYTE *)(a1 + 94) = v34;
            break;
          case 203:
            *(_WORD *)(a1 + 96) |= 0x4000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 93) = v36;
            break;
          case 204:
            *(_WORD *)(a1 + 96) |= 0x2000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v38 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v38 = v37 != 0;
            }
            *(_BYTE *)(a1 + 92) = v38;
            break;
          case 205:
            *(_WORD *)(a1 + 96) |= 2u;
            v39 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v40 = *(_QWORD *)this;
            if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
            {
              v108 = 0;
              v109 = 0;
              v43 = 0;
              if (v2 <= v39)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v39)
                {
                  v43 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_228;
                }
                v110 = v39++;
                v111 = *(_BYTE *)(v40 + v110);
                *((_QWORD *)this + 1) = v39;
                v43 |= (unint64_t)(v111 & 0x7F) << v108;
                if ((v111 & 0x80) == 0)
                  break;
                v108 += 7;
                v14 = v109++ > 8;
                if (v14)
                {
                  v43 = 0;
LABEL_227:
                  v2 = v110 + 1;
                  goto LABEL_228;
                }
              }
              if (*((_BYTE *)this + 24))
                v43 = 0;
              goto LABEL_227;
            }
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v2 = v39 + 1;
              *((_QWORD *)this + 1) = v39 + 1;
              v44 = *(_BYTE *)(v40 + v39);
              v43 |= (unint64_t)(v44 & 0x7F) << v41;
              if ((v44 & 0x80) == 0)
                goto LABEL_228;
              v41 += 7;
              v39 = v2;
              v14 = v42++ > 8;
            }
            while (!v14);
            v43 = 0;
LABEL_228:
            *(_QWORD *)(a1 + 16) = v43;
            break;
          default:
            goto LABEL_121;
        }
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159B79C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x1000) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 88), 0x65u);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x66u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x67u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 64), 0xC9u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 94), 0xCAu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 93), 0xCBu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 0xCCu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCDu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 0x12Du);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0x12Eu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 48), 0x12Fu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 0x130u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0x131u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x132u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x134u);
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x133u);
  if ((*(_WORD *)(v3 + 96) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x134u);
  return result;
}

double sub_10159B980(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BE580;
  *(_DWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_10159B9AC(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021BE580;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_10159BA0C(PB::Base *a1)
{
  sub_10159B9AC(a1);
  operator delete();
}

uint64_t sub_10159BA30(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1021BE580;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_WORD *)(a2 + 120);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 88);
    v6 = 2;
    *(_WORD *)(a1 + 120) = 2;
    *(_QWORD *)(a1 + 88) = v7;
    v5 = *(_WORD *)(a2 + 120);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
LABEL_5:
    v8 = *(_BYTE *)(a2 + 118);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 120) = v6;
    *(_BYTE *)(a1 + 118) = v8;
    v5 = *(_WORD *)(a2 + 120);
  }
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 80);
    *(_WORD *)(a1 + 120) = v6 | 1;
    *(_QWORD *)(a1 + 80) = v9;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_1002A3054((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 0x80) != 0)
  {
    v13 = *(_BYTE *)(a2 + 116);
    *(_WORD *)(a1 + 120) |= 0x80u;
    *(_BYTE *)(a1 + 116) = v13;
    v10 = *(_WORD *)(a2 + 120);
    if ((v10 & 0x100) == 0)
    {
LABEL_12:
      if ((v10 & 4) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v14 = *(_BYTE *)(a2 + 117);
  *(_WORD *)(a1 + 120) |= 0x100u;
  *(_BYTE *)(a1 + 117) = v14;
  v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 4) == 0)
  {
LABEL_13:
    if ((v10 & 8) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 120) |= 4u;
  *(_DWORD *)(a1 + 96) = v15;
  v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 8) == 0)
  {
LABEL_14:
    if ((v10 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 120) |= 8u;
  *(_DWORD *)(a1 + 100) = v16;
  v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 0x40) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *(_DWORD *)(a2 + 108);
    *(_WORD *)(a1 + 120) |= 0x20u;
    *(_DWORD *)(a1 + 108) = v18;
    if ((*(_WORD *)(a2 + 120) & 0x10) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a1 + 120) |= 0x40u;
  *(_DWORD *)(a1 + 112) = v17;
  v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 0x20) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x10) != 0)
  {
LABEL_17:
    v11 = *(_DWORD *)(a2 + 104);
    *(_WORD *)(a1 + 120) |= 0x10u;
    *(_DWORD *)(a1 + 104) = v11;
  }
  return a1;
}

uint64_t sub_10159BC04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgHorizontalDecelMax", *(double *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "avgHorizontalDecelThresholdCoupled", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 120) & 8) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "impactThresholdUncoupled", *(float *)(a1 + 100));
LABEL_5:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "inertialAccel", v8);
  }
  v9 = *(_WORD *)(a1 + 120);
  if ((v9 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "isMounted", *(_BYTE *)(a1 + 116));
    v9 = *(_WORD *)(a1 + 120);
    if ((v9 & 0x100) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_26;
    }
  }
  else if ((*(_WORD *)(a1 + 120) & 0x100) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "isSimulated", *(_BYTE *)(a1 + 117));
  v9 = *(_WORD *)(a1 + 120);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_26:
  PB::TextFormatter::format(this, "nAccelGap", *(_DWORD *)(a1 + 104));
  if ((*(_WORD *)(a1 + 120) & 0x20) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "numResets", *(_DWORD *)(a1 + 108));
LABEL_12:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "prevQ", v12);
  }
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "rawClampedAccel", v15);
  }
  v16 = *(_WORD *)(a1 + 120);
  if ((v16 & 0x200) == 0)
  {
    if ((v16 & 2) == 0)
      goto LABEL_18;
LABEL_29:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 88));
    if ((*(_WORD *)(a1 + 120) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
  PB::TextFormatter::format(this, "shouldTrigger", *(_BYTE *)(a1 + 118));
  v16 = *(_WORD *)(a1 + 120);
  if ((v16 & 2) != 0)
    goto LABEL_29;
LABEL_18:
  if ((v16 & 0x40) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "triggerPathBitmap", *(_DWORD *)(a1 + 112));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10159BE08(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  char *v122;
  _QWORD *v123;
  unint64_t v124;
  char *v125;
  _DWORD *v126;
  unint64_t v127;
  char *v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;
  char v137;
  unsigned int v138;
  unint64_t v139;
  char v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  int v164;
  char *v165;
  int v166;
  unint64_t v167;
  uint64_t v170;
  _BYTE v171[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v170 = a1 + 48;
    v11 = (void **)(a1 + 56);
    v12 = a1 + 72;
    v13 = (void **)(a1 + 8);
    v14 = a1 + 24;
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 2u;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          v30 = *(_QWORD *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = v28 + 1;
              *((_QWORD *)this + 1) = v28 + 1;
              v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0)
                goto LABEL_212;
              v31 += 7;
              v28 = v34;
              v21 = v32++ > 8;
            }
            while (!v21);
LABEL_146:
            v33 = 0;
            goto LABEL_212;
          }
          v117 = 0;
          v118 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v29 == v28)
            {
              v33 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v119 = v28 + 1;
              v120 = *(_BYTE *)(v30 + v28);
              *((_QWORD *)this + 1) = v119;
              v33 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v28 = v119;
                v21 = v118++ > 8;
                if (v21)
                  goto LABEL_146;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v33 = 0;
            }
            break;
          }
LABEL_212:
          *(_QWORD *)(a1 + 88) = v33;
          goto LABEL_252;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          v36 = *((_QWORD *)this + 1);
          if (v36 >= *((_QWORD *)this + 2))
          {
            v39 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v37 = v36 + 1;
            v38 = *(unsigned __int8 *)(*(_QWORD *)this + v36);
            *((_QWORD *)this + 1) = v37;
            v39 = v38 != 0;
          }
          *(_BYTE *)(a1 + 118) = v39;
          goto LABEL_252;
        case 3u:
          *(_WORD *)(a1 + 120) |= 1u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
            goto LABEL_248;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v40);
          goto LABEL_231;
        case 4u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v171, v27, a4) & 1) != 0)
              return 0;
            v41 = *((_QWORD *)this + 1);
            v42 = *((_QWORD *)this + 2);
            while (v41 < v42 && !*((_BYTE *)this + 24))
            {
              v44 = *(char **)(a1 + 16);
              v43 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v44 >= v43)
              {
                v46 = (char *)*v13;
                v47 = (v44 - (_BYTE *)*v13) >> 3;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 61)
                  goto LABEL_262;
                v49 = v43 - (_QWORD)v46;
                if (v49 >> 2 > v48)
                  v48 = v49 >> 2;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                  v50 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_10025E6A0(v14, v50);
                  v46 = *(char **)(a1 + 8);
                  v44 = *(char **)(a1 + 16);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[8 * v47];
                *(_QWORD *)v52 = 0;
                v45 = v52 + 8;
                while (v44 != v46)
                {
                  v53 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  *((_QWORD *)v52 - 1) = v53;
                  v52 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v52;
                *(_QWORD *)(a1 + 16) = v45;
                *(_QWORD *)(a1 + 24) = &v51[8 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_QWORD *)v44 = 0;
                v45 = v44 + 8;
              }
              *(_QWORD *)(a1 + 16) = v45;
              v54 = *((_QWORD *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
                goto LABEL_180;
              *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
              v42 = *((_QWORD *)this + 2);
              v41 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v41;
            }
            goto LABEL_181;
          }
          v122 = *(char **)(a1 + 16);
          v121 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v122 >= v121)
          {
            v141 = (char *)*v13;
            v142 = (v122 - (_BYTE *)*v13) >> 3;
            v143 = v142 + 1;
            if ((unint64_t)(v142 + 1) >> 61)
LABEL_262:
              sub_100259694();
            v144 = v121 - (_QWORD)v141;
            if (v144 >> 2 > v143)
              v143 = v144 >> 2;
            if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
              v145 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v145 = v143;
            if (v145)
            {
              v146 = (char *)sub_10025E6A0(v14, v145);
              v141 = *(char **)(a1 + 8);
              v122 = *(char **)(a1 + 16);
            }
            else
            {
              v146 = 0;
            }
            v159 = &v146[8 * v142];
            *(_QWORD *)v159 = 0;
            v123 = v159 + 8;
            while (v122 != v141)
            {
              v160 = *((_QWORD *)v122 - 1);
              v122 -= 8;
              *((_QWORD *)v159 - 1) = v160;
              v159 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v159;
            *(_QWORD *)(a1 + 16) = v123;
            *(_QWORD *)(a1 + 24) = &v146[8 * v145];
            if (v141)
              operator delete(v141);
          }
          else
          {
            *(_QWORD *)v122 = 0;
            v123 = v122 + 8;
          }
          *(_QWORD *)(a1 + 16) = v123;
          v161 = *((_QWORD *)this + 1);
          if (v161 <= 0xFFFFFFFFFFFFFFF7 && v161 + 8 <= *((_QWORD *)this + 2))
          {
            *(v123 - 1) = *(_QWORD *)(*(_QWORD *)this + v161);
LABEL_231:
            v162 = *((_QWORD *)this + 1) + 8;
            goto LABEL_251;
          }
          goto LABEL_248;
        case 5u:
          if ((_DWORD)v27 != 2)
          {
            v125 = *(char **)(a1 + 64);
            v124 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v125 >= v124)
            {
              v147 = (char *)*v11;
              v148 = (v125 - (_BYTE *)*v11) >> 2;
              v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62)
LABEL_263:
                sub_100259694();
              v150 = v124 - (_QWORD)v147;
              if (v150 >> 1 > v149)
                v149 = v150 >> 1;
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
                v151 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v151 = v149;
              if (v151)
              {
                v152 = (char *)sub_100260634(v12, v151);
                v147 = *(char **)(a1 + 56);
                v125 = *(char **)(a1 + 64);
              }
              else
              {
                v152 = 0;
              }
              v163 = &v152[4 * v148];
              *(_DWORD *)v163 = 0;
              v126 = v163 + 4;
              while (v125 != v147)
              {
                v164 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v163 - 1) = v164;
                v163 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v163;
              *(_QWORD *)(a1 + 64) = v126;
              *(_QWORD *)(a1 + 72) = &v152[4 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v126 = v125 + 4;
            }
            *(_QWORD *)(a1 + 64) = v126;
            goto LABEL_246;
          }
          if ((PB::Reader::placeMark(this, v171, v27, a4) & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 64);
            v57 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v11;
              v61 = (v58 - (_BYTE *)*v11) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_263;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_100260634(v12, v64);
                v60 = *(char **)(a1 + 56);
                v58 = *(char **)(a1 + 64);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v66;
              *(_QWORD *)(a1 + 64) = v59;
              *(_QWORD *)(a1 + 72) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *(_QWORD *)(a1 + 64) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_180;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_181;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v171, v27, a4) & 1) != 0)
              return 0;
            v69 = *((_QWORD *)this + 1);
            v70 = *((_QWORD *)this + 2);
            while (v69 < v70 && !*((_BYTE *)this + 24))
            {
              v72 = *(char **)(a1 + 40);
              v71 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v72 >= v71)
              {
                v74 = (char *)*v10;
                v75 = (v72 - (_BYTE *)*v10) >> 2;
                v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 62)
                  goto LABEL_264;
                v77 = v71 - (_QWORD)v74;
                if (v77 >> 1 > v76)
                  v76 = v77 >> 1;
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v79 = (char *)sub_100260634(v170, v78);
                  v74 = *(char **)(a1 + 32);
                  v72 = *(char **)(a1 + 40);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[4 * v75];
                *(_DWORD *)v80 = 0;
                v73 = v80 + 4;
                while (v72 != v74)
                {
                  v81 = *((_DWORD *)v72 - 1);
                  v72 -= 4;
                  *((_DWORD *)v80 - 1) = v81;
                  v80 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v80;
                *(_QWORD *)(a1 + 40) = v73;
                *(_QWORD *)(a1 + 48) = &v79[4 * v78];
                if (v74)
                  operator delete(v74);
              }
              else
              {
                *(_DWORD *)v72 = 0;
                v73 = v72 + 4;
              }
              *(_QWORD *)(a1 + 40) = v73;
              v82 = *((_QWORD *)this + 1);
              if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              {
LABEL_180:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v73 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
              v70 = *((_QWORD *)this + 2);
              v69 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v69;
            }
LABEL_181:
            PB::Reader::recallMark(this, v171);
          }
          else
          {
            v128 = *(char **)(a1 + 40);
            v127 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v128 >= v127)
            {
              v153 = (char *)*v10;
              v154 = (v128 - (_BYTE *)*v10) >> 2;
              v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 62)
LABEL_264:
                sub_100259694();
              v156 = v127 - (_QWORD)v153;
              if (v156 >> 1 > v155)
                v155 = v156 >> 1;
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                v157 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v157 = v155;
              if (v157)
              {
                v158 = (char *)sub_100260634(v170, v157);
                v153 = *(char **)(a1 + 32);
                v128 = *(char **)(a1 + 40);
              }
              else
              {
                v158 = 0;
              }
              v165 = &v158[4 * v154];
              *(_DWORD *)v165 = 0;
              v126 = v165 + 4;
              while (v128 != v153)
              {
                v166 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v165 - 1) = v166;
                v165 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v165;
              *(_QWORD *)(a1 + 40) = v126;
              *(_QWORD *)(a1 + 48) = &v158[4 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *(_DWORD *)v128 = 0;
              v126 = v128 + 4;
            }
            *(_QWORD *)(a1 + 40) = v126;
LABEL_246:
            v167 = *((_QWORD *)this + 1);
            if (v167 <= 0xFFFFFFFFFFFFFFFBLL && v167 + 4 <= *((_QWORD *)this + 2))
            {
              *(v126 - 1) = *(_DWORD *)(*(_QWORD *)this + v167);
LABEL_250:
              v162 = *((_QWORD *)this + 1) + 4;
LABEL_251:
              *((_QWORD *)this + 1) = v162;
            }
            else
            {
LABEL_248:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_252:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 116) = v86;
          goto LABEL_252;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          v87 = *((_QWORD *)this + 1);
          if (v87 >= *((_QWORD *)this + 2))
          {
            v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) = v88;
            v90 = v89 != 0;
          }
          *(_BYTE *)(a1 + 117) = v90;
          goto LABEL_252;
        case 9u:
          *(_WORD *)(a1 + 120) |= 4u;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)this + 2))
            goto LABEL_248;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v91);
          goto LABEL_250;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 8u;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
            goto LABEL_248;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v92);
          goto LABEL_250;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x40u;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_215;
              v96 += 7;
              v93 = v99;
              v21 = v97++ > 8;
            }
            while (!v21);
LABEL_165:
            LODWORD(v98) = 0;
            goto LABEL_215;
          }
          v129 = 0;
          v130 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v93 + 1;
              v132 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v131;
              v98 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v93 = v131;
                v21 = v130++ > 8;
                if (v21)
                  goto LABEL_165;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_215:
          *(_DWORD *)(a1 + 112) = v98;
          goto LABEL_252;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_218;
              v104 += 7;
              v101 = v107;
              v21 = v105++ > 8;
            }
            while (!v21);
LABEL_172:
            LODWORD(v106) = 0;
            goto LABEL_218;
          }
          v133 = 0;
          v134 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v135 = v101 + 1;
              v136 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v135;
              v106 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                v101 = v135;
                v21 = v134++ > 8;
                if (v21)
                  goto LABEL_172;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_218:
          *(_DWORD *)(a1 + 108) = v106;
          goto LABEL_252;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_221;
              v112 += 7;
              v109 = v115;
              v21 = v113++ > 8;
            }
            while (!v21);
LABEL_179:
            LODWORD(v114) = 0;
            goto LABEL_221;
          }
          v137 = 0;
          v138 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v139 = v109 + 1;
              v140 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v139;
              v114 |= (unint64_t)(v140 & 0x7F) << v137;
              if (v140 < 0)
              {
                v137 += 7;
                v109 = v139;
                v21 = v138++ > 8;
                if (v21)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_221:
          *(_DWORD *)(a1 + 104) = v114;
          goto LABEL_252;
        default:
          if ((PB::Reader::skip(this, v18 >> 3, v18 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_252;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10159CA5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;

  v3 = result;
  v4 = *(_WORD *)(result + 120);
  if ((v4 & 2) == 0)
  {
    if ((*(_WORD *)(result + 120) & 0x200) == 0)
      goto LABEL_3;
LABEL_23:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 118), 2u);
    if ((*(_WORD *)(v3 + 120) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 88), 1u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x200) != 0)
    goto LABEL_23;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 4u);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 5u);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13, 6u);
  }
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 116), 7u);
    v14 = *(_WORD *)(v3 + 120);
    if ((v14 & 0x100) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((*(_WORD *)(v3 + 120) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 117), 8u);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xAu);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x40) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0xBu);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x20) == 0)
  {
LABEL_20:
    if ((v14 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0xDu);
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0xCu);
  if ((*(_WORD *)(v3 + 120) & 0x10) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0xDu);
  return result;
}

uint64_t sub_10159CC04(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE5B8;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_10159CC1C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159CC40(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_1021BE5B8;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10159CC6C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159CCB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159CEEC(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
  return result;
}

_QWORD *sub_10159CF0C(_QWORD *result)
{
  *result = &off_1021BE5F0;
  *(_QWORD *)((char *)result + 164) = 0;
  return result;
}

void sub_10159CF24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159CF48(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)result = &off_1021BE5F0;
  *(_QWORD *)(result + 164) = 0;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    v4 = *(_BYTE *)(a2 + 160);
    v3 = (unint64_t)&_mh_execute_header;
    *(_QWORD *)(result + 164) = &_mh_execute_header;
    *(_BYTE *)(result + 160) = v4;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 112);
    v3 |= 0x100000uLL;
    *(_QWORD *)(result + 164) = v3;
    *(_DWORD *)(result + 112) = v5;
    v2 = *(_QWORD *)(a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 108);
    v3 |= 0x80000uLL;
    *(_QWORD *)(result + 164) = v3;
    *(_DWORD *)(result + 108) = v6;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x1000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000000) == 0)
        goto LABEL_9;
      goto LABEL_40;
    }
  }
  else if ((v2 & 0x1000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 128);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 128) = v7;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 148) = v8;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  v9 = *(_DWORD *)(a2 + 136);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 136) = v9;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  v10 = *(_DWORD *)(a2 + 156);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 156) = v10;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  v11 = *(_DWORD *)(a2 + 144);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 144) = v11;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  v12 = *(_DWORD *)(a2 + 116);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 116) = v12;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  v13 = *(_DWORD *)(a2 + 120);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 120) = v13;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  v14 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 40) = v14;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  v15 = *(_QWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 32) = v15;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  v16 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 24) = v16;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  v17 = *(_DWORD *)(a2 + 92);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 92) = v17;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 100) = v18;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  v19 = *(_DWORD *)(a2 + 96);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 96) = v19;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  v20 = *(_DWORD *)(a2 + 104);
  v3 |= 0x40000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 104) = v20;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  v21 = *(_DWORD *)(a2 + 88);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 88) = v21;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  v22 = *(_DWORD *)(a2 + 56);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 56) = v22;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v23 = *(_DWORD *)(a2 + 60);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 60) = v23;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_25:
    if ((v2 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v24 = *(_DWORD *)(a2 + 76);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 76) = v24;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_26:
    if ((v2 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v25 = *(_DWORD *)(a2 + 80);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 80) = v25;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  v26 = *(_DWORD *)(a2 + 84);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 84) = v26;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  v27 = *(_DWORD *)(a2 + 64);
  v3 |= 0x100uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 64) = v27;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  v28 = *(_DWORD *)(a2 + 68);
  v3 |= 0x200uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 68) = v28;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  v29 = *(_DWORD *)(a2 + 72);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 72) = v29;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  v30 = *(_DWORD *)(a2 + 140);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 140) = v30;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  v31 = *(_DWORD *)(a2 + 124);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 124) = v31;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  v32 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 48) = v32;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  v33 = *(_DWORD *)(a2 + 132);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 132) = v33;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  v34 = *(_DWORD *)(a2 + 152);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 152) = v34;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      return result;
LABEL_68:
    v36 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(result + 164) = v3 | 2;
    *(_QWORD *)(result + 16) = v36;
    return result;
  }
LABEL_67:
  v35 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 8) = v35;
  if ((*(_QWORD *)(a2 + 164) & 2) != 0)
    goto LABEL_68;
  return result;
}

uint64_t sub_10159D300(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "configAccelThresholdNorm", *(float *)(a1 + 56));
    v5 = *(_QWORD *)(a1 + 164);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configHardware", *(_DWORD *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configIx", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configIy", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configIz", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configLx", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "configLy", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "configLz", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "configZgThreshold", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "debugCountOfAccelDataDrop", *(_DWORD *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "debugCountOfDmDataDrop", *(_DWORD *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "debugMaxTimeBetweenAccelSample", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "debugMaxTimeBetweenDmSample", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "epochFirstTimestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "epochLastTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "freefallTpQualifier", *(_BYTE *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "metaCountOfFreefallImpactPassed", *(_DWORD *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "metaCountOfFreefallTimePassed", *(_DWORD *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "metaCountOfSigImpact", *(_DWORD *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "metaCountOfZgSegment", *(_DWORD *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 4) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "metaCrossingCount", *(_DWORD *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_23:
    if ((v5 & 8) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "metaDtBwFirstAndLastFreeFall", *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_24:
    if ((v5 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "metaDtBwFirstFreeFall", *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "metaDtBwFirstSigImpact", *(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "metaFreefallTime", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "metaFreefallTimeForImpact", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "metaMaxOfAccel", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "metaMaxPower", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "metaMaxZgSegmentTime", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "metaNormOfAccel", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_67:
    PB::TextFormatter::format(this, "metaTotalZgTime", *(float *)(a1 + 156));
    if ((*(_QWORD *)(a1 + 164) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_34;
  }
LABEL_66:
  PB::TextFormatter::format(this, "metaNormOfImpact", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_67;
LABEL_33:
  if ((v5 & 0x20) != 0)
LABEL_34:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159D750(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t result;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;
  char v196;
  unsigned int v197;
  unint64_t v198;
  char v199;
  char v200;
  unsigned int v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)(a1 + 164) |= (unint64_t)&_mh_execute_header;
              v21 = *((_QWORD *)this + 1);
              if (v21 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v22 = v21 + 1;
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v21);
                *((_QWORD *)this + 1) = v22;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 160) = v24;
              goto LABEL_282;
            case 2u:
              *(_QWORD *)(a1 + 164) |= 0x100000uLL;
              v33 = *((_QWORD *)this + 1);
              v34 = *((_QWORD *)this + 2);
              v35 = *(_QWORD *)this;
              if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                do
                {
                  v39 = v33 + 1;
                  *((_QWORD *)this + 1) = v33 + 1;
                  v40 = *(_BYTE *)(v35 + v33);
                  v38 |= (unint64_t)(v40 & 0x7F) << v36;
                  if ((v40 & 0x80) == 0)
                    goto LABEL_294;
                  v36 += 7;
                  v33 = v39;
                  v14 = v37++ > 8;
                }
                while (!v14);
LABEL_195:
                LODWORD(v38) = 0;
                goto LABEL_294;
              }
              v160 = 0;
              v161 = 0;
              v38 = 0;
              if (v34 <= v33)
                v34 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v34 == v33)
                {
                  LODWORD(v38) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v162 = v33 + 1;
                  v163 = *(_BYTE *)(v35 + v33);
                  *((_QWORD *)this + 1) = v162;
                  v38 |= (unint64_t)(v163 & 0x7F) << v160;
                  if (v163 < 0)
                  {
                    v160 += 7;
                    v33 = v162;
                    v14 = v161++ > 8;
                    if (v14)
                      goto LABEL_195;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v38) = 0;
                }
                break;
              }
LABEL_294:
              *(_DWORD *)(a1 + 112) = v38;
              goto LABEL_282;
            case 3u:
              *(_QWORD *)(a1 + 164) |= 0x80000uLL;
              v41 = *((_QWORD *)this + 1);
              v42 = *((_QWORD *)this + 2);
              v43 = *(_QWORD *)this;
              if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                do
                {
                  v47 = v41 + 1;
                  *((_QWORD *)this + 1) = v41 + 1;
                  v48 = *(_BYTE *)(v43 + v41);
                  v46 |= (unint64_t)(v48 & 0x7F) << v44;
                  if ((v48 & 0x80) == 0)
                    goto LABEL_298;
                  v44 += 7;
                  v41 = v47;
                  v14 = v45++ > 8;
                }
                while (!v14);
LABEL_202:
                LODWORD(v46) = 0;
                goto LABEL_298;
              }
              v164 = 0;
              v165 = 0;
              v46 = 0;
              if (v42 <= v41)
                v42 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v42 == v41)
                {
                  LODWORD(v46) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v166 = v41 + 1;
                  v167 = *(_BYTE *)(v43 + v41);
                  *((_QWORD *)this + 1) = v166;
                  v46 |= (unint64_t)(v167 & 0x7F) << v164;
                  if (v167 < 0)
                  {
                    v164 += 7;
                    v41 = v166;
                    v14 = v165++ > 8;
                    if (v14)
                      goto LABEL_202;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v46) = 0;
                }
                break;
              }
LABEL_298:
              *(_DWORD *)(a1 + 108) = v46;
              goto LABEL_282;
            case 4u:
              *(_QWORD *)(a1 + 164) |= 0x1000000uLL;
              v49 = *((_QWORD *)this + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v49);
              goto LABEL_281;
            case 5u:
              *(_QWORD *)(a1 + 164) |= 0x20000000uLL;
              v50 = *((_QWORD *)this + 1);
              if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v50);
              goto LABEL_281;
            case 6u:
              *(_QWORD *)(a1 + 164) |= 0x4000000uLL;
              v51 = *((_QWORD *)this + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v51);
              goto LABEL_281;
            case 7u:
              *(_QWORD *)(a1 + 164) |= 0x80000000uLL;
              v52 = *((_QWORD *)this + 1);
              if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v52);
              goto LABEL_281;
            case 8u:
              *(_QWORD *)(a1 + 164) |= 0x10000000uLL;
              v53 = *((_QWORD *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v53);
              goto LABEL_281;
            case 9u:
              *(_QWORD *)(a1 + 164) |= 0x200000uLL;
              v54 = *((_QWORD *)this + 1);
              v55 = *((_QWORD *)this + 2);
              v56 = *(_QWORD *)this;
              if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
              {
                v57 = 0;
                v58 = 0;
                v59 = 0;
                do
                {
                  v60 = v54 + 1;
                  *((_QWORD *)this + 1) = v54 + 1;
                  v61 = *(_BYTE *)(v56 + v54);
                  v59 |= (unint64_t)(v61 & 0x7F) << v57;
                  if ((v61 & 0x80) == 0)
                    goto LABEL_302;
                  v57 += 7;
                  v54 = v60;
                  v14 = v58++ > 8;
                }
                while (!v14);
LABEL_209:
                LODWORD(v59) = 0;
                goto LABEL_302;
              }
              v168 = 0;
              v169 = 0;
              v59 = 0;
              if (v55 <= v54)
                v55 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v55 == v54)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v170 = v54 + 1;
                  v171 = *(_BYTE *)(v56 + v54);
                  *((_QWORD *)this + 1) = v170;
                  v59 |= (unint64_t)(v171 & 0x7F) << v168;
                  if (v171 < 0)
                  {
                    v168 += 7;
                    v54 = v170;
                    v14 = v169++ > 8;
                    if (v14)
                      goto LABEL_209;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v59) = 0;
                }
                break;
              }
LABEL_302:
              *(_DWORD *)(a1 + 116) = v59;
              goto LABEL_282;
            case 0xAu:
              *(_QWORD *)(a1 + 164) |= 0x400000uLL;
              v62 = *((_QWORD *)this + 1);
              v63 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
              {
                v65 = 0;
                v66 = 0;
                v67 = 0;
                do
                {
                  v68 = v62 + 1;
                  *((_QWORD *)this + 1) = v62 + 1;
                  v69 = *(_BYTE *)(v64 + v62);
                  v67 |= (unint64_t)(v69 & 0x7F) << v65;
                  if ((v69 & 0x80) == 0)
                    goto LABEL_306;
                  v65 += 7;
                  v62 = v68;
                  v14 = v66++ > 8;
                }
                while (!v14);
LABEL_216:
                LODWORD(v67) = 0;
                goto LABEL_306;
              }
              v172 = 0;
              v173 = 0;
              v67 = 0;
              if (v63 <= v62)
                v63 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v63 == v62)
                {
                  LODWORD(v67) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v174 = v62 + 1;
                  v175 = *(_BYTE *)(v64 + v62);
                  *((_QWORD *)this + 1) = v174;
                  v67 |= (unint64_t)(v175 & 0x7F) << v172;
                  if (v175 < 0)
                  {
                    v172 += 7;
                    v62 = v174;
                    v14 = v173++ > 8;
                    if (v14)
                      goto LABEL_216;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v67) = 0;
                }
                break;
              }
LABEL_306:
              *(_DWORD *)(a1 + 120) = v67;
              goto LABEL_282;
            case 0xBu:
              *(_QWORD *)(a1 + 164) |= 0x10uLL;
              v70 = *((_QWORD *)this + 1);
              v71 = *((_QWORD *)this + 2);
              v72 = *(_QWORD *)this;
              if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
              {
                v73 = 0;
                v74 = 0;
                v75 = 0;
                do
                {
                  v76 = v70 + 1;
                  *((_QWORD *)this + 1) = v70 + 1;
                  v77 = *(_BYTE *)(v72 + v70);
                  v75 |= (unint64_t)(v77 & 0x7F) << v73;
                  if ((v77 & 0x80) == 0)
                    goto LABEL_310;
                  v73 += 7;
                  v70 = v76;
                  v14 = v74++ > 8;
                }
                while (!v14);
LABEL_223:
                v75 = 0;
                goto LABEL_310;
              }
              v176 = 0;
              v177 = 0;
              v75 = 0;
              if (v71 <= v70)
                v71 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v71 == v70)
                {
                  v75 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v178 = v70 + 1;
                  v179 = *(_BYTE *)(v72 + v70);
                  *((_QWORD *)this + 1) = v178;
                  v75 |= (unint64_t)(v179 & 0x7F) << v176;
                  if (v179 < 0)
                  {
                    v176 += 7;
                    v70 = v178;
                    v14 = v177++ > 8;
                    if (v14)
                      goto LABEL_223;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v75 = 0;
                }
                break;
              }
LABEL_310:
              *(_QWORD *)(a1 + 40) = v75;
              goto LABEL_282;
            case 0xCu:
              *(_QWORD *)(a1 + 164) |= 8uLL;
              v78 = *((_QWORD *)this + 1);
              v79 = *((_QWORD *)this + 2);
              v80 = *(_QWORD *)this;
              if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
              {
                v81 = 0;
                v82 = 0;
                v83 = 0;
                do
                {
                  v84 = v78 + 1;
                  *((_QWORD *)this + 1) = v78 + 1;
                  v85 = *(_BYTE *)(v80 + v78);
                  v83 |= (unint64_t)(v85 & 0x7F) << v81;
                  if ((v85 & 0x80) == 0)
                    goto LABEL_314;
                  v81 += 7;
                  v78 = v84;
                  v14 = v82++ > 8;
                }
                while (!v14);
LABEL_230:
                v83 = 0;
                goto LABEL_314;
              }
              v180 = 0;
              v181 = 0;
              v83 = 0;
              if (v79 <= v78)
                v79 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v79 == v78)
                {
                  v83 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v182 = v78 + 1;
                  v183 = *(_BYTE *)(v80 + v78);
                  *((_QWORD *)this + 1) = v182;
                  v83 |= (unint64_t)(v183 & 0x7F) << v180;
                  if (v183 < 0)
                  {
                    v180 += 7;
                    v78 = v182;
                    v14 = v181++ > 8;
                    if (v14)
                      goto LABEL_230;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v83 = 0;
                }
                break;
              }
LABEL_314:
              *(_QWORD *)(a1 + 32) = v83;
              goto LABEL_282;
            case 0xDu:
              *(_QWORD *)(a1 + 164) |= 4uLL;
              v86 = *((_QWORD *)this + 1);
              v87 = *((_QWORD *)this + 2);
              v88 = *(_QWORD *)this;
              if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
              {
                v89 = 0;
                v90 = 0;
                v91 = 0;
                do
                {
                  v92 = v86 + 1;
                  *((_QWORD *)this + 1) = v86 + 1;
                  v93 = *(_BYTE *)(v88 + v86);
                  v91 |= (unint64_t)(v93 & 0x7F) << v89;
                  if ((v93 & 0x80) == 0)
                    goto LABEL_318;
                  v89 += 7;
                  v86 = v92;
                  v14 = v90++ > 8;
                }
                while (!v14);
LABEL_237:
                v91 = 0;
                goto LABEL_318;
              }
              v184 = 0;
              v185 = 0;
              v91 = 0;
              if (v87 <= v86)
                v87 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v87 == v86)
                {
                  v91 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v186 = v86 + 1;
                  v187 = *(_BYTE *)(v88 + v86);
                  *((_QWORD *)this + 1) = v186;
                  v91 |= (unint64_t)(v187 & 0x7F) << v184;
                  if (v187 < 0)
                  {
                    v184 += 7;
                    v86 = v186;
                    v14 = v185++ > 8;
                    if (v14)
                      goto LABEL_237;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v91 = 0;
                }
                break;
              }
LABEL_318:
              *(_QWORD *)(a1 + 24) = v91;
              goto LABEL_282;
            case 0xEu:
              *(_QWORD *)(a1 + 164) |= 0x8000uLL;
              v94 = *((_QWORD *)this + 1);
              v95 = *((_QWORD *)this + 2);
              v96 = *(_QWORD *)this;
              if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
              {
                v97 = 0;
                v98 = 0;
                v99 = 0;
                do
                {
                  v100 = v94 + 1;
                  *((_QWORD *)this + 1) = v94 + 1;
                  v101 = *(_BYTE *)(v96 + v94);
                  v99 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    goto LABEL_322;
                  v97 += 7;
                  v94 = v100;
                  v14 = v98++ > 8;
                }
                while (!v14);
LABEL_244:
                LODWORD(v99) = 0;
                goto LABEL_322;
              }
              v188 = 0;
              v189 = 0;
              v99 = 0;
              if (v95 <= v94)
                v95 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v95 == v94)
                {
                  LODWORD(v99) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v190 = v94 + 1;
                  v191 = *(_BYTE *)(v96 + v94);
                  *((_QWORD *)this + 1) = v190;
                  v99 |= (unint64_t)(v191 & 0x7F) << v188;
                  if (v191 < 0)
                  {
                    v188 += 7;
                    v94 = v190;
                    v14 = v189++ > 8;
                    if (v14)
                      goto LABEL_244;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v99) = 0;
                }
                break;
              }
LABEL_322:
              *(_DWORD *)(a1 + 92) = v99;
              goto LABEL_282;
            case 0xFu:
              *(_QWORD *)(a1 + 164) |= 0x20000uLL;
              v102 = *((_QWORD *)this + 1);
              if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v102);
              goto LABEL_281;
            case 0x10u:
              *(_QWORD *)(a1 + 164) |= 0x10000uLL;
              v103 = *((_QWORD *)this + 1);
              v104 = *((_QWORD *)this + 2);
              v105 = *(_QWORD *)this;
              if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
              {
                v106 = 0;
                v107 = 0;
                v108 = 0;
                do
                {
                  v109 = v103 + 1;
                  *((_QWORD *)this + 1) = v103 + 1;
                  v110 = *(_BYTE *)(v105 + v103);
                  v108 |= (unint64_t)(v110 & 0x7F) << v106;
                  if ((v110 & 0x80) == 0)
                    goto LABEL_326;
                  v106 += 7;
                  v103 = v109;
                  v14 = v107++ > 8;
                }
                while (!v14);
LABEL_251:
                LODWORD(v108) = 0;
                goto LABEL_326;
              }
              v192 = 0;
              v193 = 0;
              v108 = 0;
              if (v104 <= v103)
                v104 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v104 == v103)
                {
                  LODWORD(v108) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v194 = v103 + 1;
                  v195 = *(_BYTE *)(v105 + v103);
                  *((_QWORD *)this + 1) = v194;
                  v108 |= (unint64_t)(v195 & 0x7F) << v192;
                  if (v195 < 0)
                  {
                    v192 += 7;
                    v103 = v194;
                    v14 = v193++ > 8;
                    if (v14)
                      goto LABEL_251;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v108) = 0;
                }
                break;
              }
LABEL_326:
              *(_DWORD *)(a1 + 96) = v108;
              goto LABEL_282;
            case 0x11u:
              *(_QWORD *)(a1 + 164) |= 0x40000uLL;
              v111 = *((_QWORD *)this + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v111);
              goto LABEL_281;
            case 0x12u:
              *(_QWORD *)(a1 + 164) |= 0x4000uLL;
              v112 = *((_QWORD *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v112);
              goto LABEL_281;
            case 0x13u:
              *(_QWORD *)(a1 + 164) |= 0x40uLL;
              v113 = *((_QWORD *)this + 1);
              if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v113);
              goto LABEL_281;
            case 0x14u:
              *(_QWORD *)(a1 + 164) |= 0x80uLL;
              v114 = *((_QWORD *)this + 1);
              v115 = *((_QWORD *)this + 2);
              v116 = *(_QWORD *)this;
              if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
              {
                v117 = 0;
                v118 = 0;
                v119 = 0;
                do
                {
                  v120 = v114 + 1;
                  *((_QWORD *)this + 1) = v114 + 1;
                  v121 = *(_BYTE *)(v116 + v114);
                  v119 |= (unint64_t)(v121 & 0x7F) << v117;
                  if ((v121 & 0x80) == 0)
                    goto LABEL_330;
                  v117 += 7;
                  v114 = v120;
                  v14 = v118++ > 8;
                }
                while (!v14);
LABEL_258:
                LODWORD(v119) = 0;
                goto LABEL_330;
              }
              v196 = 0;
              v197 = 0;
              v119 = 0;
              if (v115 <= v114)
                v115 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v115 == v114)
                {
                  LODWORD(v119) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v198 = v114 + 1;
                  v199 = *(_BYTE *)(v116 + v114);
                  *((_QWORD *)this + 1) = v198;
                  v119 |= (unint64_t)(v199 & 0x7F) << v196;
                  if (v199 < 0)
                  {
                    v196 += 7;
                    v114 = v198;
                    v14 = v197++ > 8;
                    if (v14)
                      goto LABEL_258;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v119) = 0;
                }
                break;
              }
LABEL_330:
              *(_DWORD *)(a1 + 60) = v119;
              goto LABEL_282;
            case 0x15u:
              *(_QWORD *)(a1 + 164) |= 0x800uLL;
              v122 = *((_QWORD *)this + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v122);
              goto LABEL_281;
            case 0x16u:
              *(_QWORD *)(a1 + 164) |= 0x1000uLL;
              v123 = *((_QWORD *)this + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v123);
              goto LABEL_281;
            case 0x17u:
              *(_QWORD *)(a1 + 164) |= 0x2000uLL;
              v124 = *((_QWORD *)this + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v124);
              goto LABEL_281;
            case 0x18u:
              *(_QWORD *)(a1 + 164) |= 0x100uLL;
              v125 = *((_QWORD *)this + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v125);
              goto LABEL_281;
            case 0x19u:
              *(_QWORD *)(a1 + 164) |= 0x200uLL;
              v126 = *((_QWORD *)this + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v126);
              goto LABEL_281;
            case 0x1Au:
              *(_QWORD *)(a1 + 164) |= 0x400uLL;
              v127 = *((_QWORD *)this + 1);
              if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v127);
              goto LABEL_281;
            case 0x1Bu:
              *(_QWORD *)(a1 + 164) |= 0x8000000uLL;
              v128 = *((_QWORD *)this + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v128);
              goto LABEL_281;
            case 0x1Cu:
              *(_QWORD *)(a1 + 164) |= 0x800000uLL;
              v129 = *((_QWORD *)this + 1);
              v130 = *((_QWORD *)this + 2);
              v131 = *(_QWORD *)this;
              if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
              {
                v132 = 0;
                v133 = 0;
                v134 = 0;
                do
                {
                  v135 = v129 + 1;
                  *((_QWORD *)this + 1) = v129 + 1;
                  v136 = *(_BYTE *)(v131 + v129);
                  v134 |= (unint64_t)(v136 & 0x7F) << v132;
                  if ((v136 & 0x80) == 0)
                    goto LABEL_334;
                  v132 += 7;
                  v129 = v135;
                  v14 = v133++ > 8;
                }
                while (!v14);
LABEL_265:
                LODWORD(v134) = 0;
                goto LABEL_334;
              }
              v200 = 0;
              v201 = 0;
              v134 = 0;
              if (v130 <= v129)
                v130 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v130 == v129)
                {
                  LODWORD(v134) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v202 = v129 + 1;
                  v203 = *(_BYTE *)(v131 + v129);
                  *((_QWORD *)this + 1) = v202;
                  v134 |= (unint64_t)(v203 & 0x7F) << v200;
                  if (v203 < 0)
                  {
                    v200 += 7;
                    v129 = v202;
                    v14 = v201++ > 8;
                    if (v14)
                      goto LABEL_265;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v134) = 0;
                }
                break;
              }
LABEL_334:
              *(_DWORD *)(a1 + 124) = v134;
              goto LABEL_282;
            case 0x1Du:
              *(_QWORD *)(a1 + 164) |= 0x20uLL;
              v137 = *((_QWORD *)this + 1);
              v138 = *((_QWORD *)this + 2);
              v139 = *(_QWORD *)this;
              if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
              {
                v140 = 0;
                v141 = 0;
                v142 = 0;
                do
                {
                  v143 = v137 + 1;
                  *((_QWORD *)this + 1) = v137 + 1;
                  v144 = *(_BYTE *)(v139 + v137);
                  v142 |= (unint64_t)(v144 & 0x7F) << v140;
                  if ((v144 & 0x80) == 0)
                    goto LABEL_338;
                  v140 += 7;
                  v137 = v143;
                  v14 = v141++ > 8;
                }
                while (!v14);
LABEL_272:
                v142 = 0;
                goto LABEL_338;
              }
              v204 = 0;
              v205 = 0;
              v142 = 0;
              if (v138 <= v137)
                v138 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v138 == v137)
                {
                  v142 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v206 = v137 + 1;
                  v207 = *(_BYTE *)(v139 + v137);
                  *((_QWORD *)this + 1) = v206;
                  v142 |= (unint64_t)(v207 & 0x7F) << v204;
                  if (v207 < 0)
                  {
                    v204 += 7;
                    v137 = v206;
                    v14 = v205++ > 8;
                    if (v14)
                      goto LABEL_272;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v142 = 0;
                }
                break;
              }
LABEL_338:
              *(_QWORD *)(a1 + 48) = v142;
              goto LABEL_282;
            case 0x1Eu:
              *(_QWORD *)(a1 + 164) |= 0x2000000uLL;
              v145 = *((_QWORD *)this + 1);
              if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v145);
              goto LABEL_281;
            case 0x1Fu:
              *(_QWORD *)(a1 + 164) |= 0x40000000uLL;
              v146 = *((_QWORD *)this + 1);
              if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v146);
LABEL_281:
                *((_QWORD *)this + 1) += 4;
              }
              else
              {
LABEL_170:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_282;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_QWORD *)(a1 + 164) |= 1uLL;
                v147 = *((_QWORD *)this + 1);
                v148 = *((_QWORD *)this + 2);
                v149 = *(_QWORD *)this;
                if (v147 > 0xFFFFFFFFFFFFFFF5 || v147 + 10 > v148)
                {
                  v208 = 0;
                  v209 = 0;
                  v152 = 0;
                  if (v148 <= v147)
                    v148 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v148 == v147)
                    {
                      v152 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_342;
                    }
                    v210 = v147 + 1;
                    v211 = *(_BYTE *)(v149 + v147);
                    *((_QWORD *)this + 1) = v210;
                    v152 |= (unint64_t)(v211 & 0x7F) << v208;
                    if ((v211 & 0x80) == 0)
                      break;
                    v208 += 7;
                    v147 = v210;
                    v14 = v209++ > 8;
                    if (v14)
                    {
LABEL_279:
                      v152 = 0;
                      goto LABEL_342;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v152 = 0;
                }
                else
                {
                  v150 = 0;
                  v151 = 0;
                  v152 = 0;
                  while (1)
                  {
                    v153 = v147 + 1;
                    *((_QWORD *)this + 1) = v147 + 1;
                    v154 = *(_BYTE *)(v149 + v147);
                    v152 |= (unint64_t)(v154 & 0x7F) << v150;
                    if ((v154 & 0x80) == 0)
                      break;
                    v150 += 7;
                    v147 = v153;
                    v14 = v151++ > 8;
                    if (v14)
                      goto LABEL_279;
                  }
                }
LABEL_342:
                *(_QWORD *)(a1 + 8) = v152;
              }
              else if ((_DWORD)v20 == 202)
              {
                *(_QWORD *)(a1 + 164) |= 2uLL;
                v25 = *((_QWORD *)this + 1);
                v26 = *((_QWORD *)this + 2);
                v27 = *(_QWORD *)this;
                if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
                {
                  v156 = 0;
                  v157 = 0;
                  v30 = 0;
                  if (v26 <= v25)
                    v26 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v26 == v25)
                    {
                      v30 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_290;
                    }
                    v158 = v25 + 1;
                    v159 = *(_BYTE *)(v27 + v25);
                    *((_QWORD *)this + 1) = v158;
                    v30 |= (unint64_t)(v159 & 0x7F) << v156;
                    if ((v159 & 0x80) == 0)
                      break;
                    v156 += 7;
                    v25 = v158;
                    v14 = v157++ > 8;
                    if (v14)
                    {
LABEL_188:
                      v30 = 0;
                      goto LABEL_290;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v30 = 0;
                }
                else
                {
                  v28 = 0;
                  v29 = 0;
                  v30 = 0;
                  while (1)
                  {
                    v31 = v25 + 1;
                    *((_QWORD *)this + 1) = v25 + 1;
                    v32 = *(_BYTE *)(v27 + v25);
                    v30 |= (unint64_t)(v32 & 0x7F) << v28;
                    if ((v32 & 0x80) == 0)
                      break;
                    v28 += 7;
                    v25 = v31;
                    v14 = v29++ > 8;
                    if (v14)
                      goto LABEL_188;
                  }
                }
LABEL_290:
                *(_QWORD *)(a1 + 16) = v30;
              }
              else
              {
                result = PB::Reader::skip(this, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
              }
LABEL_282:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10159E9BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 164);
  if ((v4 & 0x100000000) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(result + 160), 1u);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 2u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 3u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 4u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 5u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 6u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 7u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 8u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 9u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0xAu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0xBu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 0xCu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0xDu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xEu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xFu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x10u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x11u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x12u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x13u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x14u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_22:
    if ((v4 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x15u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_23:
    if ((v4 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x17u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x18u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0x19u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x1Au);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 48), 0x1Du);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 152), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCAu);
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xC9u);
  if ((*(_QWORD *)(v3 + 164) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xCAu);
  return result;
}

uint64_t sub_10159ED7C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE628;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10159ED94(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159EDB8(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021BE628;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10159EE08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "attached", *(_BYTE *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159EE70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159F054(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10159F0AC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE660;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10159F0C4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159F0E8(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021BE660;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10159F138(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "keyPressedDown", *(_BYTE *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159F1A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159F384(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10159F3DC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE698;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10159F3F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10159F418(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021BE698;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_10159F4A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accelFilterX", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "accelFilterZ", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelFilterY", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159F554(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159F7B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  return result;
}

uint64_t sub_10159F84C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE6D0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10159F864(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159F888(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021BE6D0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10159F8D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159F940(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159FBCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10159FC24(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE708;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10159FC3C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10159FC60(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021BE708;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10159FCB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "touchActive", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10159FD18(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10159FEFC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

double sub_10159FF54(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BE740;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

void sub_10159FF88(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021BE740;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_10159FFE8(PB::Base *a1)
{
  sub_10159FF88(a1);
  operator delete();
}

uint64_t sub_1015A000C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int16 v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = &off_1021BE740;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = 0;
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x4000) != 0)
  {
    v8 = *(_DWORD *)(a2 + 188);
    v7 = 0x4000;
    *(_WORD *)(a1 + 192) = 0x4000;
    *(_DWORD *)(a1 + 188) = v8;
    v6 = *(_WORD *)(a2 + 192);
    if ((v6 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if ((*(_WORD *)(a2 + 192) & 0x1000) != 0)
  {
LABEL_5:
    v9 = *(_QWORD *)(a2 + 176);
    v7 |= 0x1000u;
    *(_WORD *)(a1 + 192) = v7;
    *(_QWORD *)(a1 + 176) = v9;
    v6 = *(_WORD *)(a2 + 192);
  }
LABEL_6:
  if ((v6 & 0x40) != 0)
  {
    v10 = *(_QWORD *)(a2 + 128);
    *(_WORD *)(a1 + 192) = v7 | 0x40;
    *(_QWORD *)(a1 + 128) = v10;
  }
  if (a1 != a2)
  {
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 2) != 0)
  {
    v14 = *(_QWORD *)(a2 + 88);
    *(_WORD *)(a1 + 192) |= 2u;
    *(_QWORD *)(a1 + 88) = v14;
    v11 = *(_WORD *)(a2 + 192);
    if ((v11 & 0x2000) == 0)
    {
LABEL_12:
      if ((v11 & 4) == 0)
        goto LABEL_13;
      goto LABEL_26;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x2000) == 0)
  {
    goto LABEL_12;
  }
  v15 = *(_DWORD *)(a2 + 184);
  *(_WORD *)(a1 + 192) |= 0x2000u;
  *(_DWORD *)(a1 + 184) = v15;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v16 = *(_QWORD *)(a2 + 96);
  *(_WORD *)(a1 + 192) |= 4u;
  *(_QWORD *)(a1 + 96) = v16;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x10) == 0)
  {
LABEL_14:
    if ((v11 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v17 = *(_QWORD *)(a2 + 112);
  *(_WORD *)(a1 + 192) |= 0x10u;
  *(_QWORD *)(a1 + 112) = v17;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 1) == 0)
  {
LABEL_15:
    if ((v11 & 8) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 192) |= 1u;
  *(_QWORD *)(a1 + 80) = v18;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 8) == 0)
  {
LABEL_16:
    if ((v11 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v19 = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 192) |= 8u;
  *(_QWORD *)(a1 + 104) = v19;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x20) == 0)
  {
LABEL_17:
    if ((v11 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v20 = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 192) |= 0x20u;
  *(_QWORD *)(a1 + 120) = v20;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x800) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_31:
  v21 = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 192) |= 0x800u;
  *(_QWORD *)(a1 + 168) = v21;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x80) == 0)
  {
LABEL_19:
    if ((v11 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v22 = *(_QWORD *)(a2 + 136);
  *(_WORD *)(a1 + 192) |= 0x80u;
  *(_QWORD *)(a1 + 136) = v22;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x100) == 0)
  {
LABEL_20:
    if ((v11 & 0x200) == 0)
      goto LABEL_21;
LABEL_34:
    v24 = *(_QWORD *)(a2 + 152);
    *(_WORD *)(a1 + 192) |= 0x200u;
    *(_QWORD *)(a1 + 152) = v24;
    if ((*(_WORD *)(a2 + 192) & 0x400) == 0)
      return a1;
    goto LABEL_22;
  }
LABEL_33:
  v23 = *(_QWORD *)(a2 + 144);
  *(_WORD *)(a1 + 192) |= 0x100u;
  *(_QWORD *)(a1 + 144) = v23;
  v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x200) != 0)
    goto LABEL_34;
LABEL_21:
  if ((v11 & 0x400) != 0)
  {
LABEL_22:
    v12 = *(_QWORD *)(a2 + 160);
    *(_WORD *)(a1 + 192) |= 0x400u;
    *(_QWORD *)(a1 + 160) = v12;
  }
  return a1;
}

uint64_t sub_1015A0290(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  __int16 v15;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 192);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "globalReferenceFrame", *(_DWORD *)(a1 + 184));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 96));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "locationTimestamp", *(double *)(a1 + 104));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 112));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "machContinuousLocationTimestamp", *(double *)(a1 + 120));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 128));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "polylinesLocation1Latitude", *(double *)(a1 + 136));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "polylinesLocation1Longitude", *(double *)(a1 + 144));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "polylinesLocation2Latitude", *(double *)(a1 + 152));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_37:
  PB::TextFormatter::format(this, "polylinesLocation2Longitude", *(double *)(a1 + 160));
  if ((*(_WORD *)(a1 + 192) & 0x800) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "roadID", *(_QWORD *)(a1 + 168));
LABEL_15:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "rotationFromGlobalToCameraFrame", v8);
  }
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "rotationFromGlobalToDeviceFrame", v11);
  }
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "rotationalAccuracyInRadians", v14);
  }
  v15 = *(_WORD *)(a1 + 192);
  if ((v15 & 0x4000) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 188));
    v15 = *(_WORD *)(a1 + 192);
  }
  if ((v15 & 0x1000) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 176));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015A052C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  char *v111;
  _QWORD *v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  char *v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v152;
  _BYTE v153[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 56);
    v152 = a1 + 72;
    v11 = (void **)(a1 + 8);
    v12 = a1 + 24;
    v13 = (void **)(a1 + 32);
    v14 = a1 + 48;
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 192) |= 0x4000u;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          v30 = *(_QWORD *)this;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = v28 + 1;
              *((_QWORD *)this + 1) = v28 + 1;
              v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0)
                goto LABEL_212;
              v31 += 7;
              v28 = v34;
              v21 = v32++ > 8;
            }
            while (!v21);
LABEL_160:
            LODWORD(v33) = 0;
            goto LABEL_212;
          }
          v106 = 0;
          v107 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v108 = v28 + 1;
              v109 = *(_BYTE *)(v30 + v28);
              *((_QWORD *)this + 1) = v108;
              v33 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                v28 = v108;
                v21 = v107++ > 8;
                if (v21)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v33) = 0;
            }
            break;
          }
LABEL_212:
          *(_DWORD *)(a1 + 188) = v33;
          goto LABEL_245;
        case 2u:
          *(_WORD *)(a1 + 192) |= 0x1000u;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v36);
          goto LABEL_244;
        case 3u:
          *(_WORD *)(a1 + 192) |= 0x40u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v37);
          goto LABEL_244;
        case 4u:
          if ((_DWORD)v27 != 2)
          {
            v111 = *(char **)(a1 + 40);
            v110 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v111 >= v110)
            {
              v125 = (char *)*v13;
              v126 = (v111 - (_BYTE *)*v13) >> 3;
              v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 61)
LABEL_255:
                sub_100259694();
              v128 = v110 - (_QWORD)v125;
              if (v128 >> 2 > v127)
                v127 = v128 >> 2;
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
                v129 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v129 = v127;
              if (v129)
              {
                v130 = (char *)sub_10025E6A0(v14, v129);
                v125 = *(char **)(a1 + 32);
                v111 = *(char **)(a1 + 40);
              }
              else
              {
                v130 = 0;
              }
              v143 = &v130[8 * v126];
              *(_QWORD *)v143 = 0;
              v112 = v143 + 8;
              while (v111 != v125)
              {
                v144 = *((_QWORD *)v111 - 1);
                v111 -= 8;
                *((_QWORD *)v143 - 1) = v144;
                v143 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v143;
              *(_QWORD *)(a1 + 40) = v112;
              *(_QWORD *)(a1 + 48) = &v130[8 * v129];
              if (v125)
                operator delete(v125);
            }
            else
            {
              *(_QWORD *)v111 = 0;
              v112 = v111 + 8;
            }
            *(_QWORD *)(a1 + 40) = v112;
            goto LABEL_240;
          }
          if ((PB::Reader::placeMark(this, v153, v27, a4) & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 40);
            v40 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v13;
              v44 = (v41 - (_BYTE *)*v13) >> 3;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61)
                goto LABEL_255;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 2 > v45)
                v45 = v46 >> 2;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_10025E6A0(v14, v47);
                v43 = *(char **)(a1 + 32);
                v41 = *(char **)(a1 + 40);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[8 * v44];
              *(_QWORD *)v49 = 0;
              v42 = v49 + 8;
              while (v41 != v43)
              {
                v50 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *((_QWORD *)v49 - 1) = v50;
                v49 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v49;
              *(_QWORD *)(a1 + 40) = v42;
              *(_QWORD *)(a1 + 48) = &v48[8 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_QWORD *)v41 = 0;
              v42 = v41 + 8;
            }
            *(_QWORD *)(a1 + 40) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
              goto LABEL_181;
            *(v42 - 1) = *(_QWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_182;
        case 5u:
          if ((_DWORD)v27 != 2)
          {
            v114 = *(char **)(a1 + 16);
            v113 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v114 >= v113)
            {
              v131 = (char *)*v11;
              v132 = (v114 - (_BYTE *)*v11) >> 3;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 61)
LABEL_256:
                sub_100259694();
              v134 = v113 - (_QWORD)v131;
              if (v134 >> 2 > v133)
                v133 = v134 >> 2;
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
                v135 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v135 = v133;
              if (v135)
              {
                v136 = (char *)sub_10025E6A0(v12, v135);
                v131 = *(char **)(a1 + 8);
                v114 = *(char **)(a1 + 16);
              }
              else
              {
                v136 = 0;
              }
              v145 = &v136[8 * v132];
              *(_QWORD *)v145 = 0;
              v112 = v145 + 8;
              while (v114 != v131)
              {
                v146 = *((_QWORD *)v114 - 1);
                v114 -= 8;
                *((_QWORD *)v145 - 1) = v146;
                v145 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v145;
              *(_QWORD *)(a1 + 16) = v112;
              *(_QWORD *)(a1 + 24) = &v136[8 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *(_QWORD *)v114 = 0;
              v112 = v114 + 8;
            }
            *(_QWORD *)(a1 + 16) = v112;
            goto LABEL_240;
          }
          if ((PB::Reader::placeMark(this, v153, v27, a4) & 1) != 0)
            return 0;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          while (v52 < v53 && !*((_BYTE *)this + 24))
          {
            v55 = *(char **)(a1 + 16);
            v54 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v11;
              v58 = (v55 - (_BYTE *)*v11) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
                goto LABEL_256;
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_10025E6A0(v12, v61);
                v57 = *(char **)(a1 + 8);
                v55 = *(char **)(a1 + 16);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[8 * v58];
              *(_QWORD *)v63 = 0;
              v56 = v63 + 8;
              while (v55 != v57)
              {
                v64 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v63;
              *(_QWORD *)(a1 + 16) = v56;
              *(_QWORD *)(a1 + 24) = &v62[8 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_QWORD *)v55 = 0;
              v56 = v55 + 8;
            }
            *(_QWORD *)(a1 + 16) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFF7 || v65 + 8 > *((_QWORD *)this + 2))
              goto LABEL_181;
            *(v56 - 1) = *(_QWORD *)(*(_QWORD *)this + v65);
            v53 = *((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v52;
          }
          goto LABEL_182;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v153, v27, a4) & 1) != 0)
              return 0;
            v66 = *((_QWORD *)this + 1);
            v67 = *((_QWORD *)this + 2);
            while (v66 < v67 && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 64);
              v68 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v69 >= v68)
              {
                v71 = (char *)*v10;
                v72 = (v69 - (_BYTE *)*v10) >> 3;
                v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 61)
                  goto LABEL_257;
                v74 = v68 - (_QWORD)v71;
                if (v74 >> 2 > v73)
                  v73 = v74 >> 2;
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                  v75 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v75 = v73;
                if (v75)
                {
                  v76 = (char *)sub_10025E6A0(v152, v75);
                  v71 = *(char **)(a1 + 56);
                  v69 = *(char **)(a1 + 64);
                }
                else
                {
                  v76 = 0;
                }
                v77 = &v76[8 * v72];
                *(_QWORD *)v77 = 0;
                v70 = v77 + 8;
                while (v69 != v71)
                {
                  v78 = *((_QWORD *)v69 - 1);
                  v69 -= 8;
                  *((_QWORD *)v77 - 1) = v78;
                  v77 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v77;
                *(_QWORD *)(a1 + 64) = v70;
                *(_QWORD *)(a1 + 72) = &v76[8 * v75];
                if (v71)
                  operator delete(v71);
              }
              else
              {
                *(_QWORD *)v69 = 0;
                v70 = v69 + 8;
              }
              *(_QWORD *)(a1 + 64) = v70;
              v79 = *((_QWORD *)this + 1);
              if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((_QWORD *)this + 2))
              {
LABEL_181:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v70 - 1) = *(_QWORD *)(*(_QWORD *)this + v79);
              v67 = *((_QWORD *)this + 2);
              v66 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v66;
            }
LABEL_182:
            PB::Reader::recallMark(this, v153);
          }
          else
          {
            v116 = *(char **)(a1 + 64);
            v115 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v116 >= v115)
            {
              v137 = (char *)*v10;
              v138 = (v116 - (_BYTE *)*v10) >> 3;
              v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61)
LABEL_257:
                sub_100259694();
              v140 = v115 - (_QWORD)v137;
              if (v140 >> 2 > v139)
                v139 = v140 >> 2;
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
                v141 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v141 = v139;
              if (v141)
              {
                v142 = (char *)sub_10025E6A0(v152, v141);
                v137 = *(char **)(a1 + 56);
                v116 = *(char **)(a1 + 64);
              }
              else
              {
                v142 = 0;
              }
              v147 = &v142[8 * v138];
              *(_QWORD *)v147 = 0;
              v112 = v147 + 8;
              while (v116 != v137)
              {
                v148 = *((_QWORD *)v116 - 1);
                v116 -= 8;
                *((_QWORD *)v147 - 1) = v148;
                v147 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v147;
              *(_QWORD *)(a1 + 64) = v112;
              *(_QWORD *)(a1 + 72) = &v142[8 * v141];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_QWORD *)v116 = 0;
              v112 = v116 + 8;
            }
            *(_QWORD *)(a1 + 64) = v112;
LABEL_240:
            v149 = *((_QWORD *)this + 1);
            if (v149 <= 0xFFFFFFFFFFFFFFF7 && v149 + 8 <= *((_QWORD *)this + 2))
            {
              *(v112 - 1) = *(_QWORD *)(*(_QWORD *)this + v149);
LABEL_244:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_242:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_245:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 7u:
          *(_WORD *)(a1 + 192) |= 2u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFF7 || v80 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v80);
          goto LABEL_244;
        case 8u:
          *(_WORD *)(a1 + 192) |= 0x2000u;
          v81 = *((_QWORD *)this + 1);
          v82 = *((_QWORD *)this + 2);
          v83 = *(_QWORD *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            do
            {
              v87 = v81 + 1;
              *((_QWORD *)this + 1) = v81 + 1;
              v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0)
                goto LABEL_215;
              v84 += 7;
              v81 = v87;
              v21 = v85++ > 8;
            }
            while (!v21);
LABEL_173:
            LODWORD(v86) = 0;
            goto LABEL_215;
          }
          v117 = 0;
          v118 = 0;
          v86 = 0;
          if (v82 <= v81)
            v82 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v119 = v81 + 1;
              v120 = *(_BYTE *)(v83 + v81);
              *((_QWORD *)this + 1) = v119;
              v86 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v81 = v119;
                v21 = v118++ > 8;
                if (v21)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v86) = 0;
            }
            break;
          }
LABEL_215:
          *(_DWORD *)(a1 + 184) = v86;
          goto LABEL_245;
        case 9u:
          *(_WORD *)(a1 + 192) |= 4u;
          v89 = *((_QWORD *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v89);
          goto LABEL_244;
        case 0xAu:
          *(_WORD *)(a1 + 192) |= 0x10u;
          v90 = *((_QWORD *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v90);
          goto LABEL_244;
        case 0xBu:
          *(_WORD *)(a1 + 192) |= 1u;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v91);
          goto LABEL_244;
        case 0xCu:
          *(_WORD *)(a1 + 192) |= 8u;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v92);
          goto LABEL_244;
        case 0xDu:
          *(_WORD *)(a1 + 192) |= 0x20u;
          v93 = *((_QWORD *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v93);
          goto LABEL_244;
        case 0xEu:
          *(_WORD *)(a1 + 192) |= 0x800u;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          v96 = *(_QWORD *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)this + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_218;
              v97 += 7;
              v94 = v100;
              v21 = v98++ > 8;
            }
            while (!v21);
LABEL_180:
            v99 = 0;
            goto LABEL_218;
          }
          v121 = 0;
          v122 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v95 == v94)
            {
              v99 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v123 = v94 + 1;
              v124 = *(_BYTE *)(v96 + v94);
              *((_QWORD *)this + 1) = v123;
              v99 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v94 = v123;
                v21 = v122++ > 8;
                if (v21)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v99 = 0;
            }
            break;
          }
LABEL_218:
          *(_QWORD *)(a1 + 168) = v99;
          goto LABEL_245;
        case 0xFu:
          *(_WORD *)(a1 + 192) |= 0x80u;
          v102 = *((_QWORD *)this + 1);
          if (v102 > 0xFFFFFFFFFFFFFFF7 || v102 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v102);
          goto LABEL_244;
        case 0x10u:
          *(_WORD *)(a1 + 192) |= 0x100u;
          v103 = *((_QWORD *)this + 1);
          if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v103);
          goto LABEL_244;
        case 0x11u:
          *(_WORD *)(a1 + 192) |= 0x200u;
          v104 = *((_QWORD *)this + 1);
          if (v104 > 0xFFFFFFFFFFFFFFF7 || v104 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v104);
          goto LABEL_244;
        case 0x12u:
          *(_WORD *)(a1 + 192) |= 0x400u;
          v105 = *((_QWORD *)this + 1);
          if (v105 > 0xFFFFFFFFFFFFFFF7 || v105 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v105);
          goto LABEL_244;
        default:
          if ((PB::Reader::skip(this, v18 >> 3, v18 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_245;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015A1198(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  __int16 v14;

  v3 = result;
  v4 = *(_WORD *)(result + 192);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_WORD *)(result + 192) & 0x1000) == 0)
      goto LABEL_3;
LABEL_28:
    result = PB::Writer::write(this, *(double *)(v3 + 176), 2u);
    if ((*(_WORD *)(v3 + 192) & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 188), 1u);
  v4 = *(_WORD *)(v3 + 192);
  if ((v4 & 0x1000) != 0)
    goto LABEL_28;
LABEL_3:
  if ((v4 & 0x40) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 128), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 4u);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 5u);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13, 6u);
  }
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 88), 7u);
    v14 = *(_WORD *)(v3 + 192);
    if ((v14 & 0x2000) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_32;
    }
  }
  else if ((*(_WORD *)(v3 + 192) & 0x2000) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 8u);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 9u);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 1) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0xAu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 1) == 0)
  {
LABEL_19:
    if ((v14 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0xBu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 8) == 0)
  {
LABEL_20:
    if ((v14 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0xCu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x20) == 0)
  {
LABEL_21:
    if ((v14 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x800) == 0)
  {
LABEL_22:
    if ((v14 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 168), 0xEu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x80) == 0)
  {
LABEL_23:
    if ((v14 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 0xFu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x100) == 0)
  {
LABEL_24:
    if ((v14 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0x10u);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x200) == 0)
  {
LABEL_25:
    if ((v14 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 160), 0x12u);
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 152), 0x11u);
  if ((*(_WORD *)(v3 + 192) & 0x400) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 160), 0x12u);
  return result;
}

uint64_t sub_1015A13CC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE778;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1015A13E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015A1408(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = &off_1021BE778;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 20) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 24) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = v3 | 0x40;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015A14E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ch0", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ch1", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "ch2", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "ch3", *(_DWORD *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "ch4", *(_DWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A15F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_101;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_105:
                    v2 = v53 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_105;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_106;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 16) = v25;
              goto LABEL_127;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v57 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    v2 = v61 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_115;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_116;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_121;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    v2 = v65 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_120;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_121;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_127;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    v2 = v69 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_125;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_126;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_101:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_127;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_127;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015A1C88(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  return result;
}

uint64_t sub_1015A1D70(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE7B0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1015A1D88(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015A1DAC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021BE7B0;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return *(float *)&v4;
      goto LABEL_12;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  if ((*(_BYTE *)(a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_12:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = v3 | 0x10;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015A1E54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gravityBufferDeltaToCurrentMax", *(float *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gravityFilterDeltaToHeadUp", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "timestampGravityBufferFront", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestampTimerRef", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A1F24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_36;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_36;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_42;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_41:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_42:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_39:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A21C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  return result;
}

uint64_t sub_1015A2270(uint64_t result)
{
  *(_QWORD *)result = &off_1021BE7E8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015A2288(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015A22AC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)a1 = &off_1021BE7E8;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1015A231C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestampArrival", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A23AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_1015A2678(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  return result;
}

void ***sub_1015A26F0(void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    operator delete();
  }
  return result;
}

id sub_1015A273C()
{
  if (qword_10230F938 != -1)
    dispatch_once(&qword_10230F938, &stru_1021BF320);
  return (id)qword_1023140F0;
}

void sub_1015A277C(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.Msl.DefaultsQueue", 0);
  v2 = (void *)qword_1023140F0;
  qword_1023140F0 = (uint64_t)v1;

}

void sub_1015A27A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a2 = 1048576000;
  *(_QWORD *)(a2 + 8) = 0x3200015180;
  sub_1015A2E04((_QWORD *)(a2 + 16), "/tmp/");
  sub_1015A2E04((_QWORD *)(a2 + 40), "");
  sub_1015A2E04((_QWORD *)(a2 + 64), "msl");
  *(_DWORD *)(a2 + 88) = 2;
  *(_QWORD *)(a2 + 96) = 300;
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "allKeys"));
  if (objc_msgSend(v12, "containsObject:", CFSTR("FilePrefix")))
  {
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FilePrefix"))));
    std::string::assign((std::string *)(a2 + 40), (const std::string::value_type *)objc_msgSend(v4, "UTF8String"));

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileBasePath")))
  {
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileBasePath"))));
    std::string::assign((std::string *)(a2 + 16), (const std::string::value_type *)objc_msgSend(v5, "UTF8String"));

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileExtension")))
  {
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileExtension"))));
    std::string::assign((std::string *)(a2 + 64), (const std::string::value_type *)objc_msgSend(v6, "UTF8String"));

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileTimeInterval")))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileTimeInterval")));
    *(_DWORD *)(a2 + 8) = objc_msgSend(v7, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FilesToKeep")))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FilesToKeep")));
    *(_DWORD *)(a2 + 12) = objc_msgSend(v8, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileSize")))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileSize")));
    *(_QWORD *)a2 = objc_msgSend(v9, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("ProtectionClass")))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("ProtectionClass")));
    *(_DWORD *)(a2 + 88) = objc_msgSend(v10, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FlushTimeout")))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FlushTimeout")));
    *(_QWORD *)(a2 + 96) = objc_msgSend(v11, "longLongValue");

  }
}

void sub_1015A2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;

  sub_100985540(v10);
  _Unwind_Resume(a1);
}

void sub_1015A2ACC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  dispatch_time_t v7;
  id v8;
  NSObject *v9;
  _QWORD block[5];

  v5 = a2;
  v6 = objc_msgSend(a3, "copy");
  objc_msgSend(*(id *)(a1 + 16), "setObject:forKeyedSubscript:", v6, v5);

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    v7 = dispatch_time(0, 10000000000);
    v8 = sub_1015A273C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1015A2BBC;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_after(v7, v9, block);

  }
}

void sub_1015A2BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1015A2BBC(uint64_t a1)
{
  std::mutex::lock((std::mutex *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  operator new();
}

void sub_1015A2C78(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_100985540((uint64_t)va);
  operator delete();
}

void sub_1015A2DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_1015A2E04(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1002594D4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1015A2EB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v2 = (void *)qword_10230F940;
  qword_10230F940 = (uint64_t)v1;

}

uint64_t sub_1015A2EE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF370;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1015A2EFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015A2F20(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1021BF370;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1015A2F4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "alsTrustedLux", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A2F98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A3130(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8), 1u);
  return result;
}

uint64_t sub_1015A314C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF3A8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015A3164(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015A3188(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)a1 = &off_1021BF3A8;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1015A31D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A3240(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A34CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  return result;
}

_QWORD *sub_1015A3524(_QWORD *result)
{
  *result = &off_1021BF3E0;
  return result;
}

void sub_1015A3538(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015A355C(int a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015A3588(int a1, PB::Reader *this)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  unint64_t v15;
  char v16;

  while (1)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *((_QWORD *)this + 2);
    v5 = *((unsigned __int8 *)this + 24);
    if (v3 >= v4 || v5 != 0)
      return v5 == 0;
    v7 = *(_QWORD *)this;
    v8 = 0;
    v9 = 0;
    v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      v14 = 0;
      if (v3 > v4)
        v4 = *((_QWORD *)this + 1);
      while (v4 != v3)
      {
        v11 = v3 + 1;
        v12 = *(_BYTE *)(v7 + v3);
        *((_QWORD *)this + 1) = v11;
        v14 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          goto LABEL_22;
        v8 += 7;
        v3 = v11;
        if (v9++ >= 9)
        {
LABEL_21:
          v14 = 0;
          goto LABEL_22;
        }
      }
      v5 = 1;
      *((_BYTE *)this + 24) = 1;
      return v5 == 0;
    }
    v14 = 0;
    while (1)
    {
      v15 = v3 + 1;
      *((_QWORD *)this + 1) = v3 + 1;
      v16 = *(_BYTE *)(v7 + v3);
      v14 |= (unint64_t)(v16 & 0x7F) << v8;
      if ((v16 & 0x80) == 0)
        break;
      v8 += 7;
      v3 = v15;
      v10 = v9++ > 8;
      if (v10)
        goto LABEL_21;
    }
LABEL_22:
    if ((v14 & 7) == 4)
    {
      v5 = 0;
      return v5 == 0;
    }
    if ((PB::Reader::skip(this, v14 >> 3, v14 & 7, 0) & 1) == 0)
      return 0;
  }
}

_QWORD *sub_1015A36A0(_QWORD *result)
{
  *result = &off_1021BF418;
  result[1] = 0;
  return result;
}

void sub_1015A36B0(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021BF418;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_1015A36F0(PB::Base *a1)
{
  sub_1015A36B0(a1);
  operator delete();
}

_QWORD *sub_1015A3714(_QWORD *result, uint64_t a2)
{
  *result = &off_1021BF418;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015A37C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "wakeReason");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A3808(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A39A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return result;
}

uint64_t sub_1015A39C4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF450;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1015A39E0(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021BF450;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_1015A3A20(PB::Base *a1)
{
  sub_1015A39E0(a1);
  operator delete();
}

uint64_t sub_1015A3A44(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v12;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_1021BF450;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v5 = *(_BYTE *)(a2 + 56);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v6 = 1;
    *(_BYTE *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 32) = v7;
    v5 = *(_BYTE *)(a2 + 56);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 44);
    v6 |= 4u;
    *(_BYTE *)(a1 + 56) = v6;
    *(_DWORD *)(a1 + 44) = v8;
    v5 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *(_DWORD *)(a2 + 48);
  v6 |= 8u;
  *(_BYTE *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 48) = v12;
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 56) = v6 | 0x10;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_9:
  if (a1 != a2)
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    v10 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) |= 2u;
    *(_DWORD *)(a1 + 40) = v10;
  }
  return a1;
}

uint64_t sub_1015A3B34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 40));
    v8 = *(_BYTE *)(a1 + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0)
      goto LABEL_7;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 48));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 44));
  v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 8) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v8 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 52));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015A3C40(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE v70[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_102;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 8u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v28);
LABEL_37:
          v29 = *((_QWORD *)this + 1) + 4;
          goto LABEL_103;
        case 5u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v70, v24, a4) & 1) != 0)
              return 0;
            v30 = *((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              v33 = *(char **)(a1 + 16);
              v32 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*v10;
                v36 = (v33 - (_BYTE *)*v10) >> 3;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61)
                  goto LABEL_114;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 2 > v37)
                  v37 = v38 >> 2;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v40 = (char *)sub_10025E6A0(v11, v39);
                  v35 = *(char **)(a1 + 8);
                  v33 = *(char **)(a1 + 16);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[8 * v36];
                *(_QWORD *)v41 = 0;
                v34 = v41 + 8;
                while (v33 != v35)
                {
                  v42 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v41 - 1) = v42;
                  v41 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v41;
                *(_QWORD *)(a1 + 16) = v34;
                *(_QWORD *)(a1 + 24) = &v40[8 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_QWORD *)v33 = 0;
                v34 = v33 + 8;
              }
              *(_QWORD *)(a1 + 16) = v34;
              v43 = *((_QWORD *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v34 - 1) = *(_QWORD *)(*(_QWORD *)this + v43);
              v31 = *((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v30;
            }
            PB::Reader::recallMark(this, v70);
          }
          else
          {
            v53 = *(char **)(a1 + 16);
            v52 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              v59 = (char *)*v10;
              v60 = (v53 - (_BYTE *)*v10) >> 3;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61)
LABEL_114:
                sub_100259694();
              v62 = v52 - (_QWORD)v59;
              if (v62 >> 2 > v61)
                v61 = v62 >> 2;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                v63 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_10025E6A0(v11, v63);
                v59 = *(char **)(a1 + 8);
                v53 = *(char **)(a1 + 16);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[8 * v60];
              *(_QWORD *)v65 = 0;
              v54 = v65 + 8;
              while (v53 != v59)
              {
                v66 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v65 - 1) = v66;
                v65 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v65;
              *(_QWORD *)(a1 + 16) = v54;
              *(_QWORD *)(a1 + 24) = &v64[8 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_QWORD *)v53 = 0;
              v54 = v53 + 8;
            }
            *(_QWORD *)(a1 + 16) = v54;
            v67 = *((_QWORD *)this + 1);
            if (v67 <= 0xFFFFFFFFFFFFFFF7 && v67 + 8 <= *((_QWORD *)this + 2))
            {
              *(v54 - 1) = *(_QWORD *)(*(_QWORD *)this + v67);
LABEL_102:
              v29 = *((_QWORD *)this + 1) + 8;
LABEL_103:
              *((_QWORD *)this + 1) = v29;
            }
            else
            {
LABEL_100:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_104:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 56) |= 2u;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          v46 = *(_QWORD *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v50 = v44 + 1;
              *((_QWORD *)this + 1) = v44 + 1;
              v51 = *(_BYTE *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0)
                goto LABEL_89;
              v47 += 7;
              v44 = v50;
              v18 = v48++ > 8;
            }
            while (!v18);
LABEL_77:
            LODWORD(v49) = 0;
            goto LABEL_89;
          }
          v55 = 0;
          v56 = 0;
          v49 = 0;
          if (v45 <= v44)
            v45 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v57 = v44 + 1;
              v58 = *(_BYTE *)(v46 + v44);
              *((_QWORD *)this + 1) = v57;
              v49 |= (unint64_t)(v58 & 0x7F) << v55;
              if (v58 < 0)
              {
                v55 += 7;
                v44 = v57;
                v18 = v56++ > 8;
                if (v18)
                  goto LABEL_77;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v49) = 0;
            }
            break;
          }
LABEL_89:
          *(_DWORD *)(a1 + 40) = v49;
          goto LABEL_104;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_104;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015A41A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_13:
      result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
      if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 8) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 0x10) != 0)
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
LABEL_6:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 5u);
  }
  if ((*(_BYTE *)(v3 + 56) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 6u);
  return result;
}

_QWORD *sub_1015A427C(_QWORD *result)
{
  *result = &off_1021BF488;
  result[1] = 0;
  return result;
}

void sub_1015A4290(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015A42B4(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_1021BF488;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1015A42DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A4328(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A455C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  return result;
}

uint64_t sub_1015A457C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF4C0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015A4594(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015A45B8(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_1021BF4C0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 28) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015A4660(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A4730(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_52;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_52:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_57;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_56;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_57;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_58:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_58;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015A4A80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  return result;
}

_QWORD *sub_1015A4B30(_QWORD *result)
{
  *result = off_1021BF4F8;
  result[1] = 0;
  return result;
}

void sub_1015A4B40(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF4F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015A4B80(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF4F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015A4BD4(_QWORD *result, uint64_t a2)
{
  *result = off_1021BF4F8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015A4C50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A4CA0(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A4E74(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015A4E90(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF530;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015A4EA8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015A4ECC(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_1021BF530;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 28) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015A4F74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "batch", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A5044(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_52;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_52:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_57;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_56;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_57;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_58:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_58;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015A5394(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  return result;
}

_QWORD *sub_1015A5444(_QWORD *result)
{
  *result = off_1021BF568;
  result[1] = 0;
  return result;
}

void sub_1015A5454(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF568;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015A5494(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF568;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015A54E8(_QWORD *result, uint64_t a2)
{
  *result = off_1021BF568;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015A5564(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A55B4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A5788(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015A57A4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF5A0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015A57BC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015A57E0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021BF5A0;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015A586C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A591C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A5B80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  return result;
}

_QWORD *sub_1015A5C14(_QWORD *result)
{
  *result = off_1021BF5D8;
  result[1] = 0;
  return result;
}

void sub_1015A5C24(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF5D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015A5C64(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF5D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015A5CB8(_QWORD *result, uint64_t a2)
{
  *result = off_1021BF5D8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015A5D34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A5D84(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A5F58(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015A5F74(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

double sub_1015A5FE4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BF610;
  *(_DWORD *)(a1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_1015A6010(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021BF610;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_1015A6070(PB::Base *a1)
{
  sub_1015A6010(a1);
  operator delete();
}

uint64_t sub_1015A6094(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)a1 = &off_1021BF610;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  v5 = *(_BYTE *)(a2 + 116);
  if ((v5 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 116) |= 2u;
    *(_QWORD *)(a1 + 88) = v8;
    v5 = *(_BYTE *)(a2 + 116);
    if ((v5 & 1) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a2 + 116) & 1) == 0)
  {
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 116) |= 1u;
  *(_QWORD *)(a1 + 80) = v9;
  v5 = *(_BYTE *)(a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_13:
    v11 = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 116) |= 0x10u;
    *(_BYTE *)(a1 + 112) = v11;
    if ((*(_BYTE *)(a2 + 116) & 4) == 0)
      return a1;
    goto LABEL_8;
  }
LABEL_12:
  v10 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 116) |= 8u;
  *(_QWORD *)(a1 + 104) = v10;
  v5 = *(_BYTE *)(a2 + 116);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v5 & 4) != 0)
  {
LABEL_8:
    v6 = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 116) |= 4u;
    *(_QWORD *)(a1 + 96) = v6;
  }
  return a1;
}

uint64_t sub_1015A61D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "B", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "N", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "T", v13);
  }
  v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 1) != 0)
  {
    PB::TextFormatter::format(this, "curvature", *(double *)(a1 + 80));
    v14 = *(_BYTE *)(a1 + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0)
        goto LABEL_10;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a1 + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 112));
  v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0)
      goto LABEL_11;
LABEL_17:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
    if ((*(_BYTE *)(a1 + 116) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_16:
  PB::TextFormatter::format(this, "jerkNorm", *(double *)(a1 + 88));
  v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 4) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v14 & 8) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "torsion", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015A633C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  _DWORD *v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  int v103;
  char *v104;
  int v105;
  char *v106;
  int v107;
  unint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE v113[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = (void **)(a1 + 32);
    v111 = a1 + 48;
    v112 = a1 + 24;
    v12 = (void **)(a1 + 56);
    v110 = a1 + 72;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v18 = *(_BYTE *)(v13 + v4);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v4 = v17;
        if (v15++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if ((_DWORD)v25 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if ((_DWORD)v25 != 2)
          {
            v78 = *(char **)(a1 + 64);
            v77 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v78 >= v77)
            {
              v84 = (char *)*v12;
              v85 = (v78 - (_BYTE *)*v12) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_180:
                sub_100259694();
              v87 = v77 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)sub_100260634(v110, v88);
                v84 = *(char **)(a1 + 56);
                v78 = *(char **)(a1 + 64);
              }
              else
              {
                v89 = 0;
              }
              v102 = &v89[4 * v85];
              *(_DWORD *)v102 = 0;
              v79 = v102 + 4;
              while (v78 != v84)
              {
                v103 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *((_DWORD *)v102 - 1) = v103;
                v102 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v102;
              *(_QWORD *)(a1 + 64) = v79;
              *(_QWORD *)(a1 + 72) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v78 = 0;
              v79 = v78 + 4;
            }
            *(_QWORD *)(a1 + 64) = v79;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark(this, v113, v25, a4) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 64);
            v28 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v12;
              v32 = (v29 - (_BYTE *)*v12) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_180;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_100260634(v110, v35);
                v31 = *(char **)(a1 + 56);
                v29 = *(char **)(a1 + 64);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v37;
              *(_QWORD *)(a1 + 64) = v30;
              *(_QWORD *)(a1 + 72) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *(_QWORD *)(a1 + 64) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
              goto LABEL_120;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_121;
        case 2u:
          if ((_DWORD)v25 != 2)
          {
            v81 = *(char **)(a1 + 40);
            v80 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v81 >= v80)
            {
              v90 = (char *)*v11;
              v91 = (v81 - (_BYTE *)*v11) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_181:
                sub_100259694();
              v93 = v80 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_100260634(v111, v94);
                v90 = *(char **)(a1 + 32);
                v81 = *(char **)(a1 + 40);
              }
              else
              {
                v95 = 0;
              }
              v104 = &v95[4 * v91];
              *(_DWORD *)v104 = 0;
              v79 = v104 + 4;
              while (v81 != v90)
              {
                v105 = *((_DWORD *)v81 - 1);
                v81 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v104;
              *(_QWORD *)(a1 + 40) = v79;
              *(_QWORD *)(a1 + 48) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v81 = 0;
              v79 = v81 + 4;
            }
            *(_QWORD *)(a1 + 40) = v79;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark(this, v113, v25, a4) & 1) != 0)
            return 0;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            v43 = *(char **)(a1 + 40);
            v42 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v11;
              v46 = (v43 - (_BYTE *)*v11) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                goto LABEL_181;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_100260634(v111, v49);
                v45 = *(char **)(a1 + 32);
                v43 = *(char **)(a1 + 40);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = 0;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v51;
              *(_QWORD *)(a1 + 40) = v44;
              *(_QWORD *)(a1 + 48) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = 0;
              v44 = v43 + 4;
            }
            *(_QWORD *)(a1 + 40) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
              goto LABEL_120;
            *(v44 - 1) = *(_DWORD *)(*(_QWORD *)this + v53);
            v41 = *((_QWORD *)this + 2);
            v40 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v40;
          }
          goto LABEL_121;
        case 3u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v113, v25, a4) & 1) != 0)
              return 0;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            while (v54 < v55 && !*((_BYTE *)this + 24))
            {
              v57 = *(char **)(a1 + 16);
              v56 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v57 >= v56)
              {
                v59 = (char *)*v10;
                v60 = (v57 - (_BYTE *)*v10) >> 2;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 62)
                  goto LABEL_182;
                v62 = v56 - (_QWORD)v59;
                if (v62 >> 1 > v61)
                  v61 = v62 >> 1;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                  v63 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v63 = v61;
                if (v63)
                {
                  v64 = (char *)sub_100260634(v112, v63);
                  v59 = *(char **)(a1 + 8);
                  v57 = *(char **)(a1 + 16);
                }
                else
                {
                  v64 = 0;
                }
                v65 = &v64[4 * v60];
                *(_DWORD *)v65 = 0;
                v58 = v65 + 4;
                while (v57 != v59)
                {
                  v66 = *((_DWORD *)v57 - 1);
                  v57 -= 4;
                  *((_DWORD *)v65 - 1) = v66;
                  v65 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v65;
                *(_QWORD *)(a1 + 16) = v58;
                *(_QWORD *)(a1 + 24) = &v64[4 * v63];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *(_DWORD *)v57 = 0;
                v58 = v57 + 4;
              }
              *(_QWORD *)(a1 + 16) = v58;
              v67 = *((_QWORD *)this + 1);
              if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              {
LABEL_120:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v67);
              v55 = *((_QWORD *)this + 2);
              v54 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v54;
            }
LABEL_121:
            PB::Reader::recallMark(this, v113);
          }
          else
          {
            v83 = *(char **)(a1 + 16);
            v82 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v83 >= v82)
            {
              v96 = (char *)*v10;
              v97 = (v83 - (_BYTE *)*v10) >> 2;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 62)
LABEL_182:
                sub_100259694();
              v99 = v82 - (_QWORD)v96;
              if (v99 >> 1 > v98)
                v98 = v99 >> 1;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                v100 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v100 = v98;
              if (v100)
              {
                v101 = (char *)sub_100260634(v112, v100);
                v96 = *(char **)(a1 + 8);
                v83 = *(char **)(a1 + 16);
              }
              else
              {
                v101 = 0;
              }
              v106 = &v101[4 * v97];
              *(_DWORD *)v106 = 0;
              v79 = v106 + 4;
              while (v83 != v96)
              {
                v107 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v106 - 1) = v107;
                v106 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v106;
              *(_QWORD *)(a1 + 16) = v79;
              *(_QWORD *)(a1 + 24) = &v101[4 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_DWORD *)v83 = 0;
              v79 = v83 + 4;
            }
            *(_QWORD *)(a1 + 16) = v79;
LABEL_167:
            v108 = *((_QWORD *)this + 1);
            if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((_QWORD *)this + 2))
            {
              *(v79 - 1) = *(_DWORD *)(*(_QWORD *)this + v108);
              v76 = *((_QWORD *)this + 1) + 4;
LABEL_171:
              *((_QWORD *)this + 1) = v76;
            }
            else
            {
LABEL_169:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_172:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 116) |= 2u;
          v68 = *((_QWORD *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v68);
          goto LABEL_111;
        case 5u:
          *(_BYTE *)(a1 + 116) |= 1u;
          v69 = *((_QWORD *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v69);
          goto LABEL_111;
        case 6u:
          *(_BYTE *)(a1 + 116) |= 8u;
          v70 = *((_QWORD *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFF7 || v70 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v70);
          goto LABEL_111;
        case 7u:
          *(_BYTE *)(a1 + 116) |= 0x10u;
          v71 = *((_QWORD *)this + 1);
          if (v71 >= *((_QWORD *)this + 2))
          {
            v74 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v72 = v71 + 1;
            v73 = *(unsigned __int8 *)(*(_QWORD *)this + v71);
            *((_QWORD *)this + 1) = v72;
            v74 = v73 != 0;
          }
          *(_BYTE *)(a1 + 112) = v74;
          goto LABEL_172;
        case 8u:
          *(_BYTE *)(a1 + 116) |= 4u;
          v75 = *((_QWORD *)this + 1);
          if (v75 > 0xFFFFFFFFFFFFFFF7 || v75 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v75);
LABEL_111:
          v76 = *((_QWORD *)this + 1) + 8;
          goto LABEL_171;
        default:
          if ((PB::Reader::skip(this, v16 >> 3, v16 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_172;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v22 = v4 + 1;
      v23 = *(_BYTE *)(v13 + v4);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015A6B64(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  char v13;

  v3 = result;
  v4 = *(float **)(result + 56);
  v5 = *(float **)(result + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 1u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 2u);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 3u);
  }
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
    v13 = *(_BYTE *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0)
        goto LABEL_13;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 0x10) == 0)
  {
LABEL_14:
    if ((v13 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  }
LABEL_19:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 7u);
  if ((*(_BYTE *)(v3 + 116) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  return result;
}

uint64_t sub_1015A6C80(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF648;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015A6C98(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015A6CBC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021BF648;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 32) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = v3 | 4;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

uint64_t sub_1015A6D2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "lowerBound", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calibrated", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "upperBound", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A6DBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 32) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_37;
        }
        *(_BYTE *)(a1 + 32) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_32:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_37;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015A6FD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  return result;
}

uint64_t sub_1015A704C(uint64_t result)
{
  *(_QWORD *)result = off_1021BF680;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015A7060(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF680;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015A70A0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF680;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015A70F4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;

  *(_QWORD *)result = off_1021BF680;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 32) |= 2u;
    *(_DWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0)
        return result;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  v5 = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 32) |= 4u;
  *(_DWORD *)(result + 28) = v5;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return result;
LABEL_6:
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(result + 32) |= 1u;
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_1015A71D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "accel");
  v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      goto LABEL_5;
LABEL_9:
    PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
  v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v6 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A7284(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          v23 = *(_QWORD *)this;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_72;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v26) = 0;
            goto LABEL_72;
          }
          v45 = 0;
          v46 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v47 = v21 + 1;
              v48 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)this + 1) = v47;
              v26 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                v21 = v47;
                v14 = v46++ > 8;
                if (v14)
                  goto LABEL_52;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_72:
          *(_DWORD *)(a1 + 24) = v26;
          goto LABEL_79;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_75;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          v49 = 0;
          v50 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v51 = v29 + 1;
              v52 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v51;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v29 = v51;
                v14 = v50++ > 8;
                if (v14)
                  goto LABEL_59;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_75:
          *(_DWORD *)(a1 + 28) = v34;
          goto LABEL_79;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_78;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_66:
            v42 = 0;
            goto LABEL_78;
          }
          v53 = 0;
          v54 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_79;
      }
      while (1)
      {
        if (v38 == v37)
        {
          v42 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_78;
        }
        v55 = v37 + 1;
        v56 = *(_BYTE *)(v39 + v37);
        *((_QWORD *)this + 1) = v55;
        v42 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0)
          break;
        v53 += 7;
        v37 = v55;
        v14 = v54++ > 8;
        if (v14)
          goto LABEL_66;
      }
      if (*((_BYTE *)this + 24))
        v42 = 0;
LABEL_78:
      *(_QWORD *)(a1 + 16) = v42;
LABEL_79:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A772C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 4u);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 4u);
  return result;
}

_QWORD *sub_1015A77B8(_QWORD *result)
{
  *result = off_1021BF6B8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1015A77CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021BF6B8;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    sub_1006B3398(a1 + 16, v3);
  sub_1015A26F0((void ***)(a1 + 8), 0);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015A7834(uint64_t a1)
{
  sub_1015A77CC(a1);
  operator delete();
}

_QWORD *sub_1015A7858(_QWORD *result, _QWORD *a2)
{
  result[1] = 0;
  *result = off_1021BF6B8;
  result[2] = 0;
  result[3] = 0;
  if (a2[3])
    operator new();
  if (a2[1])
    operator new();
  if (a2[2])
    operator new();
  return result;
}

uint64_t sub_1015A79B0(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  const Data *v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (const Data *)a1[1];
  if (v5)
    PB::TextFormatter::format(this, "arsc", v5);
  if (a1[2])
    PB::TextFormatter::format(this, "arscString");
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "config");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A7A30(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
        operator new();
      if ((_DWORD)v19 == 2)
        operator new();
      if ((_DWORD)v19 == 1)
        operator new();
      result = PB::Reader::skip(this, v19, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A7CCC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF760;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1015A7CE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Data *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(const PB::Base **)(result + 24);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(const PB::Data **)(v3 + 8);
  if (v5)
    result = PB::Writer::write(this, v5, 2u);
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
    return PB::Writer::write(this, v6, 3);
  return result;
}

uint64_t sub_1015A7D48(uint64_t result)
{
  if (!*(_QWORD *)(result + 24))
    operator new();
  return result;
}

uint64_t sub_1015A7DBC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF6F0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015A7DD4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015A7DF8(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)result = &off_1021BF6F0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_BYTE *)(result + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 20) = v7;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    v9 = *(_BYTE *)(a2 + 29);
    *(_BYTE *)(result + 32) = v3 | 0x20;
    *(_BYTE *)(result + 29) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v8;
  if ((*(_BYTE *)(a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_1015A7EBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asleep", *(_BYTE *)(a1 + 28));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageConfidence", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "initialized", *(_BYTE *)(a1 + 29));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "rawConfidence", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A7FAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_81:
                v2 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_82;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_82:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_93;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 28) = v28;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_86;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_87;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_91;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_92;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 24) = v39;
LABEL_93:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 32) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 29) = v42;
              goto LABEL_93;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015A84AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  return result;
}

uint64_t sub_1015A8578(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF728;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015A8590(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015A85B4(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = &off_1021BF728;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 8;
    *(_DWORD *)(result + 24) = v7;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 20) = v6;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015A8640(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidenceLevel", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A86F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v3 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 16) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015A8C04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  return result;
}

void sub_1015A8C98(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1021BF760;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_1006B3398((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

void sub_1015A8CEC(PB::Base *a1)
{
  sub_1015A8C98(a1);
  operator delete();
}

uint64_t sub_1015A8D10(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  *(_QWORD *)result = &off_1021BF760;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    v2 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(result + 32) = 2;
    *(_DWORD *)(result + 28) = v2;
  }
  if (*(_QWORD *)(a2 + 16))
    operator new();
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 32) |= 1u;
    *(_DWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_1015A8E68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "deviceConfiguration");
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    PB::TextFormatter::format(this, "hardwareModel", *(_DWORD *)(a1 + 24));
  if (*(_QWORD *)(a1 + 16))
    PB::TextFormatter::format(this, "serialNumber");
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    PB::TextFormatter::format(this, "side", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A8F00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_57;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_57;
          }
          v37 = 0;
          v38 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v39 = v20 + 1;
              v40 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v39;
              v25 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v20 = v39;
                v14 = v38++ > 8;
                if (v14)
                  goto LABEL_46;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_57:
          *(_DWORD *)(a1 + 28) = v25;
          goto LABEL_62;
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_61;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_53:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          v41 = 0;
          v42 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_62;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_61;
        }
        v43 = v29 + 1;
        v44 = *(_BYTE *)(v31 + v29);
        *((_QWORD *)this + 1) = v43;
        v34 |= (unint64_t)(v44 & 0x7F) << v41;
        if ((v44 & 0x80) == 0)
          break;
        v41 += 7;
        v29 = v43;
        v14 = v42++ > 8;
        if (v14)
          goto LABEL_53;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v34) = 0;
LABEL_61:
      *(_DWORD *)(a1 + 24) = v34;
LABEL_62:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A92F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if ((*(_BYTE *)(result + 32) & 2) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 28), 1u);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
    result = PB::Writer::write(this, v4, 2);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
    result = PB::Writer::write(this, v5, 3);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  return result;
}

uint64_t sub_1015A9374(uint64_t result)
{
  *(_QWORD *)result = off_1021BF798;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1015A9388(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF798;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015A93C8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF798;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015A941C(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = off_1021BF798;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) |= 1u;
    *(_DWORD *)(result + 16) = v3;
    v2 = *(_BYTE *)(a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(result + 24) |= 2u;
    *(_DWORD *)(result + 20) = v4;
  }
  return result;
}

uint64_t sub_1015A94D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "dm");
  v6 = *(_BYTE *)(a1 + 24);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    v6 = *(_BYTE *)(a1 + 24);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015A9560(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v38 = 0;
          v39 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_59;
            }
            v40 = v21 + 1;
            v41 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v40;
            v26 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v21 = v40;
            v14 = v39++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v26) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_47;
          }
        }
LABEL_59:
        *(_DWORD *)(a1 + 20) = v26;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v30)
        {
          v42 = 0;
          v43 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v44 = v29 + 1;
            v45 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v44;
            v34 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v29 = v44;
            v14 = v43++ > 8;
            if (v14)
            {
LABEL_54:
              LODWORD(v34) = 0;
              goto LABEL_62;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v34) = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              break;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
            if (v14)
              goto LABEL_54;
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 16) = v34;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015A9918(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0870;
  *(_DWORD *)(result + 124) = 0;
  return result;
}

uint64_t sub_1015A992C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
    v5 = *(_BYTE *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  return result;
}

double sub_1015A9998(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BF7D0;
  *(_DWORD *)(a1 + 44) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_1015A99B8(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021BF7D0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1015A9A10(PB::Base *a1)
{
  sub_1015A99B8(a1);
  operator delete();
}

uint64_t sub_1015A9A34(uint64_t a1, uint64_t a2)
{
  char v3;

  *(_QWORD *)a1 = &off_1021BF7D0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(_QWORD *)(a2 + 32))
    operator new();
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v3 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
  }
  if (a1 != a2)
    sub_1002A3054((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_1015A9B04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "headToHeadsetTransformation", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "isH2HValid", *(_BYTE *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015A9BAC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  _BYTE v57[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        if ((_DWORD)v24 == 2)
        {
          if ((PB::Reader::placeMark(this, v57, v24, a4) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_86;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_100260634(v11, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v26;
          }
          PB::Reader::recallMark(this, v57);
        }
        else
        {
          v45 = *(char **)(a1 + 16);
          v44 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v45 >= v44)
          {
            v47 = (char *)*v10;
            v48 = (v45 - (_BYTE *)*v10) >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
LABEL_86:
              sub_100259694();
            v50 = v44 - (_QWORD)v47;
            if (v50 >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)sub_100260634(v11, v51);
              v47 = *(char **)(a1 + 8);
              v45 = *(char **)(a1 + 16);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[4 * v48];
            *(_DWORD *)v53 = 0;
            v46 = v53 + 4;
            while (v45 != v47)
            {
              v54 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *((_DWORD *)v53 - 1) = v54;
              v53 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v53;
            *(_QWORD *)(a1 + 16) = v46;
            *(_QWORD *)(a1 + 24) = &v52[4 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *(_DWORD *)v45 = 0;
            v46 = v45 + 4;
          }
          *(_QWORD *)(a1 + 16) = v46;
          v55 = *((_QWORD *)this + 1);
          if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *((_QWORD *)this + 2))
          {
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)this + v55);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
        }
      }
      else if ((_DWORD)v25 == 2)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        v40 = *((_QWORD *)this + 1);
        if (v40 >= *((_QWORD *)this + 2))
        {
          v43 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v41 = v40 + 1;
          v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
          *((_QWORD *)this + 1) = v41;
          v43 = v42 != 0;
        }
        *(_BYTE *)(a1 + 40) = v43;
      }
      else
      {
        if ((_DWORD)v25 == 1)
          operator new();
        if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0)
          return 0;
      }
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015A9FF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 2u);
  v6 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = PB::Writer::write(this, v7, 3u);
  }
  return result;
}

uint64_t sub_1015AA064(uint64_t result)
{
  if (!*(_QWORD *)(result + 32))
    operator new();
  return result;
}

uint64_t sub_1015AA0D8(uint64_t result)
{
  *(_QWORD *)result = off_1021BF808;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1015AA0EC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF808;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015AA12C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF808;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015AA180(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)result = off_1021BF808;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 36) |= 2u;
    *(_DWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  v5 = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 36) |= 4u;
  *(_DWORD *)(result + 28) = v5;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 1) == 0)
      return result;
    goto LABEL_7;
  }
LABEL_11:
  v6 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(result + 36) |= 8u;
  *(_DWORD *)(result + 32) = v6;
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
    return result;
LABEL_7:
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(result + 36) |= 1u;
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_1015AA280(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "gyro");
  v6 = *(_BYTE *)(a1 + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
    v6 = *(_BYTE *)(a1 + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0)
        goto LABEL_6;
LABEL_11:
      PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 28));
      if ((*(_BYTE *)(a1 + 36) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_7;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 16));
  v6 = *(_BYTE *)(a1 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_6:
  if ((v6 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "temp", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AA350(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *(_BYTE *)(a1 + 36) |= 2u;
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          v23 = *(_QWORD *)this;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_76;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_55:
            LODWORD(v26) = 0;
            goto LABEL_76;
          }
          v46 = 0;
          v47 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v48 = v21 + 1;
              v49 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)this + 1) = v48;
              v26 |= (unint64_t)(v49 & 0x7F) << v46;
              if (v49 < 0)
              {
                v46 += 7;
                v21 = v48;
                v14 = v47++ > 8;
                if (v14)
                  goto LABEL_55;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_76:
          *(_DWORD *)(a1 + 24) = v26;
          goto LABEL_83;
        case 3u:
          *(_BYTE *)(a1 + 36) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_79;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_62:
            LODWORD(v34) = 0;
            goto LABEL_79;
          }
          v50 = 0;
          v51 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v52 = v29 + 1;
              v53 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v52;
              v34 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v29 = v52;
                v14 = v51++ > 8;
                if (v14)
                  goto LABEL_62;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_79:
          *(_DWORD *)(a1 + 28) = v34;
          goto LABEL_83;
        case 4u:
          *(_BYTE *)(a1 + 36) |= 8u;
          v37 = *((_QWORD *)this + 1);
          if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v37);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_83;
        case 5u:
          *(_BYTE *)(a1 + 36) |= 1u;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          v40 = *(_QWORD *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)this + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_82;
              v41 += 7;
              v38 = v44;
              v14 = v42++ > 8;
            }
            while (!v14);
LABEL_69:
            v43 = 0;
            goto LABEL_82;
          }
          v54 = 0;
          v55 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_83;
      }
      while (1)
      {
        if (v39 == v38)
        {
          v43 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_82;
        }
        v56 = v38 + 1;
        v57 = *(_BYTE *)(v40 + v38);
        *((_QWORD *)this + 1) = v56;
        v43 |= (unint64_t)(v57 & 0x7F) << v54;
        if ((v57 & 0x80) == 0)
          break;
        v54 += 7;
        v38 = v56;
        v14 = v55++ > 8;
        if (v14)
          goto LABEL_69;
      }
      if (*((_BYTE *)this + 24))
        v43 = 0;
LABEL_82:
      *(_QWORD *)(a1 + 16) = v43;
LABEL_83:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015AA838(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 5u);
  return result;
}

uint64_t sub_1015AA8E0(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_1015AA944(_QWORD *result)
{
  *result = &off_1021BF840;
  result[1] = 0;
  return result;
}

void sub_1015AA954(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021BF840;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_1015AA994(PB::Base *a1)
{
  sub_1015AA954(a1);
  operator delete();
}

_QWORD *sub_1015AA9B8(_QWORD *result, uint64_t a2)
{
  *result = &off_1021BF840;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015AAA64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "gyroCachedBias");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AAAAC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015AAC4C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return result;
}

_QWORD *sub_1015AAC68(_QWORD *result)
{
  *result = off_1021BF878;
  result[1] = 0;
  return result;
}

void sub_1015AAC78(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF878;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015AACB8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF878;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015AAD0C(_QWORD *result, uint64_t a2)
{
  *result = off_1021BF878;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015AAD88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AADD8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015AAFB0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015AAFCC(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_1015AB040(_QWORD *result)
{
  *result = &off_1021BF8B0;
  result[1] = 0;
  return result;
}

void sub_1015AB050(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021BF8B0;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_1015AB090(PB::Base *a1)
{
  sub_1015AB050(a1);
  operator delete();
}

_QWORD *sub_1015AB0B4(_QWORD *result, uint64_t a2)
{
  *result = &off_1021BF8B0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015AB160(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "gyttString");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AB1A8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015AB348(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return result;
}

uint64_t sub_1015AB364(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF8E8;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1015AB37C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015AB3A0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)result = &off_1021BF8E8;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 36) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_BYTE *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 32);
      *(_BYTE *)(result + 36) = v3 | 0x10;
      *(_DWORD *)(result + 32) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 36) = v3;
  *(_QWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015AB448(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "heartRate", *(_DWORD *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "sensorTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AB518(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_68;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_67:
                    v2 = v35 + 1;
                    goto LABEL_68;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_67;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_68;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_68:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_74;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_63;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_63:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_74;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_72:
                    v2 = v39 + 1;
                    goto LABEL_73;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_72;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_73;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_73:
              *(_DWORD *)(a1 + 32) = v31;
LABEL_74:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_74;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015AB91C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 36) & 0x10) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  return result;
}

uint64_t sub_1015AB9CC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BF920;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1015AB9E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015ABA0C(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  float result;

  *(_QWORD *)a1 = &off_1021BF920;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v3 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 12);
    *(_BYTE *)(a1 + 16) = v2;
    *(float *)(a1 + 12) = result;
  }
  return result;
}

uint64_t sub_1015ABA60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015ABAC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015ABD54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  return result;
}

uint64_t sub_1015ABDAC(uint64_t result)
{
  *(_QWORD *)result = off_1021BF958;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015ABDC0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF958;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015ABE00(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF958;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015ABE54(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;

  *(_QWORD *)result = off_1021BF958;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 32) |= 2u;
    *(_DWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0)
        return result;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  v5 = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 32) |= 4u;
  *(_DWORD *)(result + 28) = v5;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return result;
LABEL_6:
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(result + 32) |= 1u;
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_1015ABF34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "magnetometer");
  v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 16));
    v6 = *(_BYTE *)(a1 + 32);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015ABFD8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          v23 = *(_QWORD *)this;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_72;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v26) = 0;
            goto LABEL_72;
          }
          v45 = 0;
          v46 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v47 = v21 + 1;
              v48 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)this + 1) = v47;
              v26 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                v21 = v47;
                v14 = v46++ > 8;
                if (v14)
                  goto LABEL_52;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_72:
          *(_DWORD *)(a1 + 24) = v26;
          goto LABEL_79;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_75;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          v49 = 0;
          v50 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v51 = v29 + 1;
              v52 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v51;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v29 = v51;
                v14 = v50++ > 8;
                if (v14)
                  goto LABEL_59;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_75:
          *(_DWORD *)(a1 + 28) = v34;
          goto LABEL_79;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_78;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_66:
            v42 = 0;
            goto LABEL_78;
          }
          v53 = 0;
          v54 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_79;
      }
      while (1)
      {
        if (v38 == v37)
        {
          v42 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_78;
        }
        v55 = v37 + 1;
        v56 = *(_BYTE *)(v39 + v37);
        *((_QWORD *)this + 1) = v55;
        v42 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0)
          break;
        v53 += 7;
        v37 = v55;
        v14 = v54++ > 8;
        if (v14)
          goto LABEL_66;
      }
      if (*((_BYTE *)this + 24))
        v42 = 0;
LABEL_78:
      *(_QWORD *)(a1 + 16) = v42;
LABEL_79:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015AC474(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 4u);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_1015AC500(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_1015AC564(_QWORD *result)
{
  *result = off_1021BF990;
  result[1] = 0;
  return result;
}

void sub_1015AC574(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF990;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015AC5B4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BF990;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015AC608(_QWORD *result, uint64_t a2)
{
  *result = off_1021BF990;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015AC684(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AC6D4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015AC8AC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

double sub_1015AC8C8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BF9C8;
  *(_DWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return result;
}

void sub_1015AC910(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_1021BF9C8;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

void sub_1015AC9C0(PB::Base *a1)
{
  sub_1015AC910(a1);
  operator delete();
}

uint64_t sub_1015AC9E4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  *(_QWORD *)a1 = &off_1021BF9C8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  v5 = *(_BYTE *)(a2 + 224);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 208);
    v6 = 2;
    *(_BYTE *)(a1 + 224) = 2;
    *(_QWORD *)(a1 + 208) = v7;
    v5 = *(_BYTE *)(a2 + 224);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 224) & 1) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 200);
    v6 |= 1u;
    *(_BYTE *)(a1 + 224) = v6;
    *(_QWORD *)(a1 + 200) = v8;
    v5 = *(_BYTE *)(a2 + 224);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *(_DWORD *)(a2 + 220);
  v6 |= 8u;
  *(_BYTE *)(a1 + 224) = v6;
  *(_DWORD *)(a1 + 220) = v11;
  if ((*(_BYTE *)(a2 + 224) & 4) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 216);
    *(_BYTE *)(a1 + 224) = v6 | 4;
    *(_DWORD *)(a1 + 216) = v9;
  }
LABEL_9:
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
    sub_1002A3054((char *)(a1 + 152), *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
    sub_1002A3054((char *)(a1 + 176), *(char **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
    sub_1002A3054((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  }
  return a1;
}

uint64_t sub_1015ACB88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  char v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(unsigned int **)(a1 + 8);
  v6 = *(unsigned int **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dark0", v7);
  }
  v8 = *(unsigned int **)(a1 + 32);
  v9 = *(unsigned int **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "dark1", v10);
  }
  v11 = *(unsigned int **)(a1 + 56);
  v12 = *(unsigned int **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "dark2", v13);
  }
  v14 = *(unsigned int **)(a1 + 80);
  v15 = *(unsigned int **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "dark3", v16);
  }
  v17 = *(_BYTE *)(a1 + 224);
  if ((v17 & 4) != 0)
  {
    PB::TextFormatter::format(this, "error", *(_DWORD *)(a1 + 216));
    v17 = *(_BYTE *)(a1 + 224);
  }
  if ((v17 & 8) != 0)
    PB::TextFormatter::format(this, "frameNum", *(_DWORD *)(a1 + 220));
  v18 = *(unsigned int **)(a1 + 104);
  v19 = *(unsigned int **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "ledCurrent", v20);
  }
  v21 = *(unsigned int **)(a1 + 128);
  v22 = *(unsigned int **)(a1 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    PB::TextFormatter::format(this, "light0", v23);
  }
  v24 = *(unsigned int **)(a1 + 152);
  v25 = *(unsigned int **)(a1 + 160);
  while (v24 != v25)
  {
    v26 = *v24++;
    PB::TextFormatter::format(this, "light1", v26);
  }
  v27 = *(unsigned int **)(a1 + 176);
  v28 = *(unsigned int **)(a1 + 184);
  while (v27 != v28)
  {
    v29 = *v27++;
    PB::TextFormatter::format(this, "rxGain", v29);
  }
  v30 = *(_BYTE *)(a1 + 224);
  if ((v30 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 200));
    v30 = *(_BYTE *)(a1 + 224);
  }
  if ((v30 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 208));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015ACD98(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  int v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char v228;
  unsigned int v229;
  uint64_t v230;
  unint64_t v231;
  char v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  char v238;
  unsigned int v239;
  unint64_t v240;
  char v241;
  char v242;
  unsigned int v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  unint64_t v248;
  char v249;
  unint64_t v250;
  char *v251;
  _DWORD *v252;
  unint64_t v253;
  char *v254;
  unint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  unint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  int v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  char v320;
  unsigned int v321;
  unint64_t v323;
  char v324;
  uint64_t v325;
  unint64_t v326;
  char v327;
  char *v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  char v333;
  unsigned int v334;
  unint64_t v336;
  char v337;
  unint64_t v338;
  char v339;
  char *v340;
  int v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  char v345;
  unsigned int v346;
  unint64_t v348;
  char v349;
  unint64_t v350;
  char v351;
  char *v352;
  int v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  char v357;
  unsigned int v358;
  unint64_t v360;
  char v361;
  unint64_t v362;
  char v363;
  char *v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  char v369;
  unsigned int v370;
  unint64_t v372;
  char v373;
  unint64_t v374;
  char v375;
  char *v376;
  int v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char v381;
  unsigned int v382;
  unint64_t v384;
  char v385;
  unint64_t v386;
  char v387;
  char *v388;
  int v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  char v393;
  unsigned int v394;
  unint64_t v396;
  char v397;
  unint64_t v398;
  char v399;
  char *v400;
  int v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  char v405;
  unsigned int v406;
  unint64_t v408;
  char v409;
  unint64_t v410;
  char v411;
  void **v414;
  void **v415;
  void **v416;
  void **v417;
  void **v418;
  void **v419;
  void **v420;
  void **v421;
  _QWORD *v422;
  _QWORD *v423;
  _BYTE v424[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v423 = (_QWORD *)(a1 + 120);
    v420 = (void **)(a1 + 176);
    v421 = (void **)(a1 + 104);
    v422 = (_QWORD *)(a1 + 192);
    v10 = (_QWORD *)(a1 + 168);
    v418 = (void **)(a1 + 128);
    v419 = (void **)(a1 + 152);
    v11 = (_QWORD *)(a1 + 144);
    v12 = (_QWORD *)(a1 + 96);
    v416 = (void **)(a1 + 56);
    v417 = (void **)(a1 + 80);
    v13 = (_QWORD *)(a1 + 72);
    v14 = (_QWORD *)(a1 + 48);
    v414 = (void **)(a1 + 8);
    v415 = (void **)(a1 + 32);
    v15 = (_QWORD *)(a1 + 24);
    while (1)
    {
      v16 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v21 = *(_BYTE *)(v16 + v4);
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0)
          break;
        v17 += 7;
        v4 = v20;
        v66 = v18++ > 8;
        if (v66)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v19 & 7;
      if ((_DWORD)v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v19 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 224) |= 2u;
          v28 = *((_QWORD *)this + 1);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 208) = *(_QWORD *)(*(_QWORD *)this + v28);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_706;
        case 2u:
          *(_BYTE *)(a1 + 224) |= 1u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_518;
              v32 += 7;
              v29 = v35;
              v66 = v33++ > 8;
            }
            while (!v66);
LABEL_417:
            v34 = 0;
            goto LABEL_518;
          }
          v238 = 0;
          v239 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v240 = v29 + 1;
              v241 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v240;
              v34 |= (unint64_t)(v241 & 0x7F) << v238;
              if (v241 < 0)
              {
                v238 += 7;
                v29 = v240;
                v66 = v239++ > 8;
                if (v66)
                  goto LABEL_417;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_518:
          *(_QWORD *)(a1 + 200) = v34;
          goto LABEL_706;
        case 3u:
          *(_BYTE *)(a1 + 224) |= 8u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_521;
              v40 += 7;
              v37 = v43;
              v66 = v41++ > 8;
            }
            while (!v66);
LABEL_424:
            LODWORD(v42) = 0;
            goto LABEL_521;
          }
          v242 = 0;
          v243 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v244 = v37 + 1;
              v245 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v244;
              v42 |= (unint64_t)(v245 & 0x7F) << v242;
              if (v245 < 0)
              {
                v242 += 7;
                v37 = v244;
                v66 = v243++ > 8;
                if (v66)
                  goto LABEL_424;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_521:
          *(_DWORD *)(a1 + 220) = v42;
          goto LABEL_706;
        case 4u:
          *(_BYTE *)(a1 + 224) |= 4u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_524;
              v48 += 7;
              v45 = v51;
              v66 = v49++ > 8;
            }
            while (!v66);
LABEL_431:
            LODWORD(v50) = 0;
            goto LABEL_524;
          }
          v246 = 0;
          v247 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v248 = v45 + 1;
              v249 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v248;
              v50 |= (unint64_t)(v249 & 0x7F) << v246;
              if (v249 < 0)
              {
                v246 += 7;
                v45 = v248;
                v66 = v247++ > 8;
                if (v66)
                  goto LABEL_431;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_524:
          *(_DWORD *)(a1 + 216) = v50;
          goto LABEL_706;
        case 5u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v53 >= *v15)
                {
                  v54 = (char *)*v414;
                  v55 = (v53 - (_BYTE *)*v414) >> 2;
                  v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62)
                    goto LABEL_716;
                  v57 = *v15 - (_QWORD)v54;
                  if (v57 >> 1 > v56)
                    v56 = v57 >> 1;
                  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                    v58 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v58 = v56;
                  if (v58)
                  {
                    v59 = (char *)sub_100260634((uint64_t)v15, v58);
                    v54 = *(char **)(a1 + 8);
                    v53 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = &v59[4 * v55];
                  *(_DWORD *)v60 = 0;
                  v61 = v60 + 4;
                  while (v53 != v54)
                  {
                    v62 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v60 - 1) = v62;
                    v60 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v60;
                  *(_QWORD *)(a1 + 16) = v61;
                  *(_QWORD *)(a1 + 24) = &v59[4 * v58];
                  if (v54)
                    operator delete(v54);
                  v53 = v61;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 16) = v53;
                v64 = *((_QWORD *)this + 1);
                v63 = *((_QWORD *)this + 2);
                v65 = *(_QWORD *)this;
                v66 = v64 > 0xFFFFFFFFFFFFFFF5 || v64 + 10 > v63;
                if (v66)
                {
                  v67 = 0;
                  v68 = 0;
                  v74 = 0;
                  if (v63 <= v64)
                    v69 = *((_QWORD *)this + 1);
                  else
                    v69 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v69 == v64)
                      goto LABEL_409;
                    v70 = v64++;
                    v71 = *(_BYTE *)(v65 + v70);
                    *((_QWORD *)this + 1) = v64;
                    v74 |= (unint64_t)(v71 & 0x7F) << v67;
                    if ((v71 & 0x80) == 0)
                      break;
                    v67 += 7;
                    v66 = v68++ > 8;
                    if (v66)
                    {
                      LODWORD(v74) = 0;
                      goto LABEL_90;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v74) = 0;
LABEL_90:
                  v75 = v70 + 1;
                }
                else
                {
                  v72 = 0;
                  v73 = 0;
                  v74 = 0;
                  while (1)
                  {
                    v75 = v64 + 1;
                    *((_QWORD *)this + 1) = v64 + 1;
                    v76 = *(_BYTE *)(v65 + v64);
                    v74 |= (unint64_t)(v76 & 0x7F) << v72;
                    if ((v76 & 0x80) == 0)
                      break;
                    v72 += 7;
                    v64 = v75;
                    v66 = v73++ > 8;
                    if (v66)
                    {
                      LODWORD(v74) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v74;
              }
              while (v75 < v63 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v251 = *(char **)(a1 + 16);
          v250 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v251 >= v250)
          {
            v267 = (char *)*v414;
            v268 = (v251 - (_BYTE *)*v414) >> 2;
            v269 = v268 + 1;
            if ((unint64_t)(v268 + 1) >> 62)
LABEL_716:
              sub_100259694();
            v270 = v250 - (_QWORD)v267;
            if (v270 >> 1 > v269)
              v269 = v270 >> 1;
            if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFFCLL)
              v271 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v271 = v269;
            if (v271)
            {
              v272 = (char *)sub_100260634((uint64_t)v15, v271);
              v267 = *(char **)(a1 + 8);
              v251 = *(char **)(a1 + 16);
            }
            else
            {
              v272 = 0;
            }
            v315 = &v272[4 * v268];
            *(_DWORD *)v315 = 0;
            v252 = v315 + 4;
            while (v251 != v267)
            {
              v316 = *((_DWORD *)v251 - 1);
              v251 -= 4;
              *((_DWORD *)v315 - 1) = v316;
              v315 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v315;
            *(_QWORD *)(a1 + 16) = v252;
            *(_QWORD *)(a1 + 24) = &v272[4 * v271];
            if (v267)
              operator delete(v267);
          }
          else
          {
            *(_DWORD *)v251 = 0;
            v252 = v251 + 4;
          }
          *(_QWORD *)(a1 + 16) = v252;
          v317 = *((_QWORD *)this + 1);
          v318 = *((_QWORD *)this + 2);
          v319 = *(_QWORD *)this;
          v320 = 0;
          v321 = 0;
          if (v317 <= 0xFFFFFFFFFFFFFFF5 && v317 + 10 <= v318)
          {
            v325 = 0;
            while (1)
            {
              v326 = v317 + 1;
              *((_QWORD *)this + 1) = v317 + 1;
              v327 = *(_BYTE *)(v319 + v317);
              v325 |= (unint64_t)(v327 & 0x7F) << v320;
              if ((v327 & 0x80) == 0)
                goto LABEL_705;
              v320 += 7;
              v317 = v326;
              v66 = v321++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v318 <= v317)
            v318 = *((_QWORD *)this + 1);
          while (v318 != v317)
          {
            v323 = v317 + 1;
            v324 = *(_BYTE *)(v319 + v317);
            *((_QWORD *)this + 1) = v323;
            v325 |= (unint64_t)(v324 & 0x7F) << v320;
            if ((v324 & 0x80) == 0)
              goto LABEL_698;
            v320 += 7;
            v317 = v323;
            v66 = v321++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v53 >= *v14)
                {
                  v77 = (char *)*v415;
                  v78 = (v53 - (_BYTE *)*v415) >> 2;
                  v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 62)
                    goto LABEL_717;
                  v80 = *v14 - (_QWORD)v77;
                  if (v80 >> 1 > v79)
                    v79 = v80 >> 1;
                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                    v81 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v81 = v79;
                  if (v81)
                  {
                    v82 = (char *)sub_100260634((uint64_t)v14, v81);
                    v77 = *(char **)(a1 + 32);
                    v53 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v82 = 0;
                  }
                  v83 = &v82[4 * v78];
                  *(_DWORD *)v83 = 0;
                  v84 = v83 + 4;
                  while (v53 != v77)
                  {
                    v85 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v83 - 1) = v85;
                    v83 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v83;
                  *(_QWORD *)(a1 + 40) = v84;
                  *(_QWORD *)(a1 + 48) = &v82[4 * v81];
                  if (v77)
                    operator delete(v77);
                  v53 = v84;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 40) = v53;
                v87 = *((_QWORD *)this + 1);
                v86 = *((_QWORD *)this + 2);
                v88 = *(_QWORD *)this;
                if (v87 > 0xFFFFFFFFFFFFFFF5 || v87 + 10 > v86)
                {
                  v90 = 0;
                  v91 = 0;
                  v97 = 0;
                  if (v86 <= v87)
                    v92 = *((_QWORD *)this + 1);
                  else
                    v92 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v92 == v87)
                      goto LABEL_409;
                    v93 = v87++;
                    v94 = *(_BYTE *)(v88 + v93);
                    *((_QWORD *)this + 1) = v87;
                    v97 |= (unint64_t)(v94 & 0x7F) << v90;
                    if ((v94 & 0x80) == 0)
                      break;
                    v90 += 7;
                    v66 = v91++ > 8;
                    if (v66)
                    {
                      LODWORD(v97) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v97) = 0;
LABEL_135:
                  v98 = v93 + 1;
                }
                else
                {
                  v95 = 0;
                  v96 = 0;
                  v97 = 0;
                  while (1)
                  {
                    v98 = v87 + 1;
                    *((_QWORD *)this + 1) = v87 + 1;
                    v99 = *(_BYTE *)(v88 + v87);
                    v97 |= (unint64_t)(v99 & 0x7F) << v95;
                    if ((v99 & 0x80) == 0)
                      break;
                    v95 += 7;
                    v87 = v98;
                    v66 = v96++ > 8;
                    if (v66)
                    {
                      LODWORD(v97) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v97;
              }
              while (v98 < v86 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v254 = *(char **)(a1 + 40);
          v253 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v254 >= v253)
          {
            v273 = (char *)*v415;
            v274 = (v254 - (_BYTE *)*v415) >> 2;
            v275 = v274 + 1;
            if ((unint64_t)(v274 + 1) >> 62)
LABEL_717:
              sub_100259694();
            v276 = v253 - (_QWORD)v273;
            if (v276 >> 1 > v275)
              v275 = v276 >> 1;
            if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFFCLL)
              v277 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v277 = v275;
            if (v277)
            {
              v278 = (char *)sub_100260634((uint64_t)v14, v277);
              v273 = *(char **)(a1 + 32);
              v254 = *(char **)(a1 + 40);
            }
            else
            {
              v278 = 0;
            }
            v328 = &v278[4 * v274];
            *(_DWORD *)v328 = 0;
            v252 = v328 + 4;
            while (v254 != v273)
            {
              v329 = *((_DWORD *)v254 - 1);
              v254 -= 4;
              *((_DWORD *)v328 - 1) = v329;
              v328 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v328;
            *(_QWORD *)(a1 + 40) = v252;
            *(_QWORD *)(a1 + 48) = &v278[4 * v277];
            if (v273)
              operator delete(v273);
          }
          else
          {
            *(_DWORD *)v254 = 0;
            v252 = v254 + 4;
          }
          *(_QWORD *)(a1 + 40) = v252;
          v330 = *((_QWORD *)this + 1);
          v331 = *((_QWORD *)this + 2);
          v332 = *(_QWORD *)this;
          v333 = 0;
          v334 = 0;
          if (v330 <= 0xFFFFFFFFFFFFFFF5 && v330 + 10 <= v331)
          {
            v325 = 0;
            while (1)
            {
              v338 = v330 + 1;
              *((_QWORD *)this + 1) = v330 + 1;
              v339 = *(_BYTE *)(v332 + v330);
              v325 |= (unint64_t)(v339 & 0x7F) << v333;
              if ((v339 & 0x80) == 0)
                goto LABEL_705;
              v333 += 7;
              v330 = v338;
              v66 = v334++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v331 <= v330)
            v331 = *((_QWORD *)this + 1);
          while (v331 != v330)
          {
            v336 = v330 + 1;
            v337 = *(_BYTE *)(v332 + v330);
            *((_QWORD *)this + 1) = v336;
            v325 |= (unint64_t)(v337 & 0x7F) << v333;
            if ((v337 & 0x80) == 0)
              goto LABEL_698;
            v333 += 7;
            v330 = v336;
            v66 = v334++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 7u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v53 >= *v13)
                {
                  v100 = (char *)*v416;
                  v101 = (v53 - (_BYTE *)*v416) >> 2;
                  v102 = v101 + 1;
                  if ((unint64_t)(v101 + 1) >> 62)
                    goto LABEL_718;
                  v103 = *v13 - (_QWORD)v100;
                  if (v103 >> 1 > v102)
                    v102 = v103 >> 1;
                  if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                    v104 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v104 = v102;
                  if (v104)
                  {
                    v105 = (char *)sub_100260634((uint64_t)v13, v104);
                    v100 = *(char **)(a1 + 56);
                    v53 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v105 = 0;
                  }
                  v106 = &v105[4 * v101];
                  *(_DWORD *)v106 = 0;
                  v107 = v106 + 4;
                  while (v53 != v100)
                  {
                    v108 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v106 - 1) = v108;
                    v106 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v106;
                  *(_QWORD *)(a1 + 64) = v107;
                  *(_QWORD *)(a1 + 72) = &v105[4 * v104];
                  if (v100)
                    operator delete(v100);
                  v53 = v107;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 64) = v53;
                v110 = *((_QWORD *)this + 1);
                v109 = *((_QWORD *)this + 2);
                v111 = *(_QWORD *)this;
                if (v110 > 0xFFFFFFFFFFFFFFF5 || v110 + 10 > v109)
                {
                  v113 = 0;
                  v114 = 0;
                  v120 = 0;
                  if (v109 <= v110)
                    v115 = *((_QWORD *)this + 1);
                  else
                    v115 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v115 == v110)
                      goto LABEL_409;
                    v116 = v110++;
                    v117 = *(_BYTE *)(v111 + v116);
                    *((_QWORD *)this + 1) = v110;
                    v120 |= (unint64_t)(v117 & 0x7F) << v113;
                    if ((v117 & 0x80) == 0)
                      break;
                    v113 += 7;
                    v66 = v114++ > 8;
                    if (v66)
                    {
                      LODWORD(v120) = 0;
                      goto LABEL_180;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v120) = 0;
LABEL_180:
                  v121 = v116 + 1;
                }
                else
                {
                  v118 = 0;
                  v119 = 0;
                  v120 = 0;
                  while (1)
                  {
                    v121 = v110 + 1;
                    *((_QWORD *)this + 1) = v110 + 1;
                    v122 = *(_BYTE *)(v111 + v110);
                    v120 |= (unint64_t)(v122 & 0x7F) << v118;
                    if ((v122 & 0x80) == 0)
                      break;
                    v118 += 7;
                    v110 = v121;
                    v66 = v119++ > 8;
                    if (v66)
                    {
                      LODWORD(v120) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v120;
              }
              while (v121 < v109 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v256 = *(char **)(a1 + 64);
          v255 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v256 >= v255)
          {
            v279 = (char *)*v416;
            v280 = (v256 - (_BYTE *)*v416) >> 2;
            v281 = v280 + 1;
            if ((unint64_t)(v280 + 1) >> 62)
LABEL_718:
              sub_100259694();
            v282 = v255 - (_QWORD)v279;
            if (v282 >> 1 > v281)
              v281 = v282 >> 1;
            if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFFCLL)
              v283 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v283 = v281;
            if (v283)
            {
              v284 = (char *)sub_100260634((uint64_t)v13, v283);
              v279 = *(char **)(a1 + 56);
              v256 = *(char **)(a1 + 64);
            }
            else
            {
              v284 = 0;
            }
            v340 = &v284[4 * v280];
            *(_DWORD *)v340 = 0;
            v252 = v340 + 4;
            while (v256 != v279)
            {
              v341 = *((_DWORD *)v256 - 1);
              v256 -= 4;
              *((_DWORD *)v340 - 1) = v341;
              v340 -= 4;
            }
            *(_QWORD *)(a1 + 56) = v340;
            *(_QWORD *)(a1 + 64) = v252;
            *(_QWORD *)(a1 + 72) = &v284[4 * v283];
            if (v279)
              operator delete(v279);
          }
          else
          {
            *(_DWORD *)v256 = 0;
            v252 = v256 + 4;
          }
          *(_QWORD *)(a1 + 64) = v252;
          v342 = *((_QWORD *)this + 1);
          v343 = *((_QWORD *)this + 2);
          v344 = *(_QWORD *)this;
          v345 = 0;
          v346 = 0;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            v325 = 0;
            while (1)
            {
              v350 = v342 + 1;
              *((_QWORD *)this + 1) = v342 + 1;
              v351 = *(_BYTE *)(v344 + v342);
              v325 |= (unint64_t)(v351 & 0x7F) << v345;
              if ((v351 & 0x80) == 0)
                goto LABEL_705;
              v345 += 7;
              v342 = v350;
              v66 = v346++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v343 <= v342)
            v343 = *((_QWORD *)this + 1);
          while (v343 != v342)
          {
            v348 = v342 + 1;
            v349 = *(_BYTE *)(v344 + v342);
            *((_QWORD *)this + 1) = v348;
            v325 |= (unint64_t)(v349 & 0x7F) << v345;
            if ((v349 & 0x80) == 0)
              goto LABEL_698;
            v345 += 7;
            v342 = v348;
            v66 = v346++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 8u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v53 >= *v12)
                {
                  v123 = (char *)*v417;
                  v124 = (v53 - (_BYTE *)*v417) >> 2;
                  v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 62)
                    goto LABEL_719;
                  v126 = *v12 - (_QWORD)v123;
                  if (v126 >> 1 > v125)
                    v125 = v126 >> 1;
                  if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
                    v127 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v127 = v125;
                  if (v127)
                  {
                    v128 = (char *)sub_100260634((uint64_t)v12, v127);
                    v123 = *(char **)(a1 + 80);
                    v53 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v128 = 0;
                  }
                  v129 = &v128[4 * v124];
                  *(_DWORD *)v129 = 0;
                  v130 = v129 + 4;
                  while (v53 != v123)
                  {
                    v131 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v129 - 1) = v131;
                    v129 -= 4;
                  }
                  *(_QWORD *)(a1 + 80) = v129;
                  *(_QWORD *)(a1 + 88) = v130;
                  *(_QWORD *)(a1 + 96) = &v128[4 * v127];
                  if (v123)
                    operator delete(v123);
                  v53 = v130;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 88) = v53;
                v133 = *((_QWORD *)this + 1);
                v132 = *((_QWORD *)this + 2);
                v134 = *(_QWORD *)this;
                if (v133 > 0xFFFFFFFFFFFFFFF5 || v133 + 10 > v132)
                {
                  v136 = 0;
                  v137 = 0;
                  v143 = 0;
                  if (v132 <= v133)
                    v138 = *((_QWORD *)this + 1);
                  else
                    v138 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v138 == v133)
                      goto LABEL_409;
                    v139 = v133++;
                    v140 = *(_BYTE *)(v134 + v139);
                    *((_QWORD *)this + 1) = v133;
                    v143 |= (unint64_t)(v140 & 0x7F) << v136;
                    if ((v140 & 0x80) == 0)
                      break;
                    v136 += 7;
                    v66 = v137++ > 8;
                    if (v66)
                    {
                      LODWORD(v143) = 0;
                      goto LABEL_225;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v143) = 0;
LABEL_225:
                  v144 = v139 + 1;
                }
                else
                {
                  v141 = 0;
                  v142 = 0;
                  v143 = 0;
                  while (1)
                  {
                    v144 = v133 + 1;
                    *((_QWORD *)this + 1) = v133 + 1;
                    v145 = *(_BYTE *)(v134 + v133);
                    v143 |= (unint64_t)(v145 & 0x7F) << v141;
                    if ((v145 & 0x80) == 0)
                      break;
                    v141 += 7;
                    v133 = v144;
                    v66 = v142++ > 8;
                    if (v66)
                    {
                      LODWORD(v143) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v143;
              }
              while (v144 < v132 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v258 = *(char **)(a1 + 88);
          v257 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v258 >= v257)
          {
            v285 = (char *)*v417;
            v286 = (v258 - (_BYTE *)*v417) >> 2;
            v287 = v286 + 1;
            if ((unint64_t)(v286 + 1) >> 62)
LABEL_719:
              sub_100259694();
            v288 = v257 - (_QWORD)v285;
            if (v288 >> 1 > v287)
              v287 = v288 >> 1;
            if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL)
              v289 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v289 = v287;
            if (v289)
            {
              v290 = (char *)sub_100260634((uint64_t)v12, v289);
              v285 = *(char **)(a1 + 80);
              v258 = *(char **)(a1 + 88);
            }
            else
            {
              v290 = 0;
            }
            v352 = &v290[4 * v286];
            *(_DWORD *)v352 = 0;
            v252 = v352 + 4;
            while (v258 != v285)
            {
              v353 = *((_DWORD *)v258 - 1);
              v258 -= 4;
              *((_DWORD *)v352 - 1) = v353;
              v352 -= 4;
            }
            *(_QWORD *)(a1 + 80) = v352;
            *(_QWORD *)(a1 + 88) = v252;
            *(_QWORD *)(a1 + 96) = &v290[4 * v289];
            if (v285)
              operator delete(v285);
          }
          else
          {
            *(_DWORD *)v258 = 0;
            v252 = v258 + 4;
          }
          *(_QWORD *)(a1 + 88) = v252;
          v354 = *((_QWORD *)this + 1);
          v355 = *((_QWORD *)this + 2);
          v356 = *(_QWORD *)this;
          v357 = 0;
          v358 = 0;
          if (v354 <= 0xFFFFFFFFFFFFFFF5 && v354 + 10 <= v355)
          {
            v325 = 0;
            while (1)
            {
              v362 = v354 + 1;
              *((_QWORD *)this + 1) = v354 + 1;
              v363 = *(_BYTE *)(v356 + v354);
              v325 |= (unint64_t)(v363 & 0x7F) << v357;
              if ((v363 & 0x80) == 0)
                goto LABEL_705;
              v357 += 7;
              v354 = v362;
              v66 = v358++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v355 <= v354)
            v355 = *((_QWORD *)this + 1);
          while (v355 != v354)
          {
            v360 = v354 + 1;
            v361 = *(_BYTE *)(v356 + v354);
            *((_QWORD *)this + 1) = v360;
            v325 |= (unint64_t)(v361 & 0x7F) << v357;
            if ((v361 & 0x80) == 0)
              goto LABEL_698;
            v357 += 7;
            v354 = v360;
            v66 = v358++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 9u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 136);
              do
              {
                if ((unint64_t)v53 >= *v11)
                {
                  v146 = (char *)*v418;
                  v147 = (v53 - (_BYTE *)*v418) >> 2;
                  v148 = v147 + 1;
                  if ((unint64_t)(v147 + 1) >> 62)
                    goto LABEL_720;
                  v149 = *v11 - (_QWORD)v146;
                  if (v149 >> 1 > v148)
                    v148 = v149 >> 1;
                  if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
                    v150 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v150 = v148;
                  if (v150)
                  {
                    v151 = (char *)sub_100260634((uint64_t)v11, v150);
                    v146 = *(char **)(a1 + 128);
                    v53 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    v151 = 0;
                  }
                  v152 = &v151[4 * v147];
                  *(_DWORD *)v152 = 0;
                  v153 = v152 + 4;
                  while (v53 != v146)
                  {
                    v154 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v152 - 1) = v154;
                    v152 -= 4;
                  }
                  *(_QWORD *)(a1 + 128) = v152;
                  *(_QWORD *)(a1 + 136) = v153;
                  *(_QWORD *)(a1 + 144) = &v151[4 * v150];
                  if (v146)
                    operator delete(v146);
                  v53 = v153;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 136) = v53;
                v156 = *((_QWORD *)this + 1);
                v155 = *((_QWORD *)this + 2);
                v157 = *(_QWORD *)this;
                if (v156 > 0xFFFFFFFFFFFFFFF5 || v156 + 10 > v155)
                {
                  v159 = 0;
                  v160 = 0;
                  v166 = 0;
                  if (v155 <= v156)
                    v161 = *((_QWORD *)this + 1);
                  else
                    v161 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v161 == v156)
                      goto LABEL_409;
                    v162 = v156++;
                    v163 = *(_BYTE *)(v157 + v162);
                    *((_QWORD *)this + 1) = v156;
                    v166 |= (unint64_t)(v163 & 0x7F) << v159;
                    if ((v163 & 0x80) == 0)
                      break;
                    v159 += 7;
                    v66 = v160++ > 8;
                    if (v66)
                    {
                      LODWORD(v166) = 0;
                      goto LABEL_270;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v166) = 0;
LABEL_270:
                  v167 = v162 + 1;
                }
                else
                {
                  v164 = 0;
                  v165 = 0;
                  v166 = 0;
                  while (1)
                  {
                    v167 = v156 + 1;
                    *((_QWORD *)this + 1) = v156 + 1;
                    v168 = *(_BYTE *)(v157 + v156);
                    v166 |= (unint64_t)(v168 & 0x7F) << v164;
                    if ((v168 & 0x80) == 0)
                      break;
                    v164 += 7;
                    v156 = v167;
                    v66 = v165++ > 8;
                    if (v66)
                    {
                      LODWORD(v166) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v166;
              }
              while (v167 < v155 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v260 = *(char **)(a1 + 136);
          v259 = *(_QWORD *)(a1 + 144);
          if ((unint64_t)v260 >= v259)
          {
            v291 = (char *)*v418;
            v292 = (v260 - (_BYTE *)*v418) >> 2;
            v293 = v292 + 1;
            if ((unint64_t)(v292 + 1) >> 62)
LABEL_720:
              sub_100259694();
            v294 = v259 - (_QWORD)v291;
            if (v294 >> 1 > v293)
              v293 = v294 >> 1;
            if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFFCLL)
              v295 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v295 = v293;
            if (v295)
            {
              v296 = (char *)sub_100260634((uint64_t)v11, v295);
              v291 = *(char **)(a1 + 128);
              v260 = *(char **)(a1 + 136);
            }
            else
            {
              v296 = 0;
            }
            v364 = &v296[4 * v292];
            *(_DWORD *)v364 = 0;
            v252 = v364 + 4;
            while (v260 != v291)
            {
              v365 = *((_DWORD *)v260 - 1);
              v260 -= 4;
              *((_DWORD *)v364 - 1) = v365;
              v364 -= 4;
            }
            *(_QWORD *)(a1 + 128) = v364;
            *(_QWORD *)(a1 + 136) = v252;
            *(_QWORD *)(a1 + 144) = &v296[4 * v295];
            if (v291)
              operator delete(v291);
          }
          else
          {
            *(_DWORD *)v260 = 0;
            v252 = v260 + 4;
          }
          *(_QWORD *)(a1 + 136) = v252;
          v366 = *((_QWORD *)this + 1);
          v367 = *((_QWORD *)this + 2);
          v368 = *(_QWORD *)this;
          v369 = 0;
          v370 = 0;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            v325 = 0;
            while (1)
            {
              v374 = v366 + 1;
              *((_QWORD *)this + 1) = v366 + 1;
              v375 = *(_BYTE *)(v368 + v366);
              v325 |= (unint64_t)(v375 & 0x7F) << v369;
              if ((v375 & 0x80) == 0)
                goto LABEL_705;
              v369 += 7;
              v366 = v374;
              v66 = v370++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v367 <= v366)
            v367 = *((_QWORD *)this + 1);
          while (v367 != v366)
          {
            v372 = v366 + 1;
            v373 = *(_BYTE *)(v368 + v366);
            *((_QWORD *)this + 1) = v372;
            v325 |= (unint64_t)(v373 & 0x7F) << v369;
            if ((v373 & 0x80) == 0)
              goto LABEL_698;
            v369 += 7;
            v366 = v372;
            v66 = v370++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xAu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 160);
              do
              {
                if ((unint64_t)v53 >= *v10)
                {
                  v169 = (char *)*v419;
                  v170 = (v53 - (_BYTE *)*v419) >> 2;
                  v171 = v170 + 1;
                  if ((unint64_t)(v170 + 1) >> 62)
                    goto LABEL_721;
                  v172 = *v10 - (_QWORD)v169;
                  if (v172 >> 1 > v171)
                    v171 = v172 >> 1;
                  if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                    v173 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v173 = v171;
                  if (v173)
                  {
                    v174 = (char *)sub_100260634((uint64_t)v10, v173);
                    v169 = *(char **)(a1 + 152);
                    v53 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    v174 = 0;
                  }
                  v175 = &v174[4 * v170];
                  *(_DWORD *)v175 = 0;
                  v176 = v175 + 4;
                  while (v53 != v169)
                  {
                    v177 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v175 - 1) = v177;
                    v175 -= 4;
                  }
                  *(_QWORD *)(a1 + 152) = v175;
                  *(_QWORD *)(a1 + 160) = v176;
                  *(_QWORD *)(a1 + 168) = &v174[4 * v173];
                  if (v169)
                    operator delete(v169);
                  v53 = v176;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 160) = v53;
                v179 = *((_QWORD *)this + 1);
                v178 = *((_QWORD *)this + 2);
                v180 = *(_QWORD *)this;
                if (v179 > 0xFFFFFFFFFFFFFFF5 || v179 + 10 > v178)
                {
                  v182 = 0;
                  v183 = 0;
                  v189 = 0;
                  if (v178 <= v179)
                    v184 = *((_QWORD *)this + 1);
                  else
                    v184 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v184 == v179)
                      goto LABEL_409;
                    v185 = v179++;
                    v186 = *(_BYTE *)(v180 + v185);
                    *((_QWORD *)this + 1) = v179;
                    v189 |= (unint64_t)(v186 & 0x7F) << v182;
                    if ((v186 & 0x80) == 0)
                      break;
                    v182 += 7;
                    v66 = v183++ > 8;
                    if (v66)
                    {
                      LODWORD(v189) = 0;
                      goto LABEL_315;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v189) = 0;
LABEL_315:
                  v190 = v185 + 1;
                }
                else
                {
                  v187 = 0;
                  v188 = 0;
                  v189 = 0;
                  while (1)
                  {
                    v190 = v179 + 1;
                    *((_QWORD *)this + 1) = v179 + 1;
                    v191 = *(_BYTE *)(v180 + v179);
                    v189 |= (unint64_t)(v191 & 0x7F) << v187;
                    if ((v191 & 0x80) == 0)
                      break;
                    v187 += 7;
                    v179 = v190;
                    v66 = v188++ > 8;
                    if (v66)
                    {
                      LODWORD(v189) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v189;
              }
              while (v190 < v178 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v262 = *(char **)(a1 + 160);
          v261 = *(_QWORD *)(a1 + 168);
          if ((unint64_t)v262 >= v261)
          {
            v297 = (char *)*v419;
            v298 = (v262 - (_BYTE *)*v419) >> 2;
            v299 = v298 + 1;
            if ((unint64_t)(v298 + 1) >> 62)
LABEL_721:
              sub_100259694();
            v300 = v261 - (_QWORD)v297;
            if (v300 >> 1 > v299)
              v299 = v300 >> 1;
            if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL)
              v301 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v301 = v299;
            if (v301)
            {
              v302 = (char *)sub_100260634((uint64_t)v10, v301);
              v297 = *(char **)(a1 + 152);
              v262 = *(char **)(a1 + 160);
            }
            else
            {
              v302 = 0;
            }
            v376 = &v302[4 * v298];
            *(_DWORD *)v376 = 0;
            v252 = v376 + 4;
            while (v262 != v297)
            {
              v377 = *((_DWORD *)v262 - 1);
              v262 -= 4;
              *((_DWORD *)v376 - 1) = v377;
              v376 -= 4;
            }
            *(_QWORD *)(a1 + 152) = v376;
            *(_QWORD *)(a1 + 160) = v252;
            *(_QWORD *)(a1 + 168) = &v302[4 * v301];
            if (v297)
              operator delete(v297);
          }
          else
          {
            *(_DWORD *)v262 = 0;
            v252 = v262 + 4;
          }
          *(_QWORD *)(a1 + 160) = v252;
          v378 = *((_QWORD *)this + 1);
          v379 = *((_QWORD *)this + 2);
          v380 = *(_QWORD *)this;
          v381 = 0;
          v382 = 0;
          if (v378 <= 0xFFFFFFFFFFFFFFF5 && v378 + 10 <= v379)
          {
            v325 = 0;
            while (1)
            {
              v386 = v378 + 1;
              *((_QWORD *)this + 1) = v378 + 1;
              v387 = *(_BYTE *)(v380 + v378);
              v325 |= (unint64_t)(v387 & 0x7F) << v381;
              if ((v387 & 0x80) == 0)
                goto LABEL_705;
              v381 += 7;
              v378 = v386;
              v66 = v382++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v379 <= v378)
            v379 = *((_QWORD *)this + 1);
          while (v379 != v378)
          {
            v384 = v378 + 1;
            v385 = *(_BYTE *)(v380 + v378);
            *((_QWORD *)this + 1) = v384;
            v325 |= (unint64_t)(v385 & 0x7F) << v381;
            if ((v385 & 0x80) == 0)
              goto LABEL_698;
            v381 += 7;
            v378 = v384;
            v66 = v382++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xBu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 184);
              do
              {
                if ((unint64_t)v53 >= *v422)
                {
                  v192 = (char *)*v420;
                  v193 = (v53 - (_BYTE *)*v420) >> 2;
                  v194 = v193 + 1;
                  if ((unint64_t)(v193 + 1) >> 62)
                    goto LABEL_722;
                  v195 = *v422 - (_QWORD)v192;
                  if (v195 >> 1 > v194)
                    v194 = v195 >> 1;
                  if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL)
                    v196 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v196 = v194;
                  if (v196)
                  {
                    v197 = (char *)sub_100260634((uint64_t)v422, v196);
                    v192 = *(char **)(a1 + 176);
                    v53 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    v197 = 0;
                  }
                  v198 = &v197[4 * v193];
                  *(_DWORD *)v198 = 0;
                  v199 = v198 + 4;
                  while (v53 != v192)
                  {
                    v200 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v198 - 1) = v200;
                    v198 -= 4;
                  }
                  *(_QWORD *)(a1 + 176) = v198;
                  *(_QWORD *)(a1 + 184) = v199;
                  *(_QWORD *)(a1 + 192) = &v197[4 * v196];
                  if (v192)
                    operator delete(v192);
                  v53 = v199;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 184) = v53;
                v202 = *((_QWORD *)this + 1);
                v201 = *((_QWORD *)this + 2);
                v203 = *(_QWORD *)this;
                if (v202 > 0xFFFFFFFFFFFFFFF5 || v202 + 10 > v201)
                {
                  v205 = 0;
                  v206 = 0;
                  v212 = 0;
                  if (v201 <= v202)
                    v207 = *((_QWORD *)this + 1);
                  else
                    v207 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v207 == v202)
                      goto LABEL_409;
                    v208 = v202++;
                    v209 = *(_BYTE *)(v203 + v208);
                    *((_QWORD *)this + 1) = v202;
                    v212 |= (unint64_t)(v209 & 0x7F) << v205;
                    if ((v209 & 0x80) == 0)
                      break;
                    v205 += 7;
                    v66 = v206++ > 8;
                    if (v66)
                    {
                      LODWORD(v212) = 0;
                      goto LABEL_360;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v212) = 0;
LABEL_360:
                  v213 = v208 + 1;
                }
                else
                {
                  v210 = 0;
                  v211 = 0;
                  v212 = 0;
                  while (1)
                  {
                    v213 = v202 + 1;
                    *((_QWORD *)this + 1) = v202 + 1;
                    v214 = *(_BYTE *)(v203 + v202);
                    v212 |= (unint64_t)(v214 & 0x7F) << v210;
                    if ((v214 & 0x80) == 0)
                      break;
                    v210 += 7;
                    v202 = v213;
                    v66 = v211++ > 8;
                    if (v66)
                    {
                      LODWORD(v212) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v53 - 1) = v212;
              }
              while (v213 < v201 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v264 = *(char **)(a1 + 184);
          v263 = *(_QWORD *)(a1 + 192);
          if ((unint64_t)v264 >= v263)
          {
            v303 = (char *)*v420;
            v304 = (v264 - (_BYTE *)*v420) >> 2;
            v305 = v304 + 1;
            if ((unint64_t)(v304 + 1) >> 62)
LABEL_722:
              sub_100259694();
            v306 = v263 - (_QWORD)v303;
            if (v306 >> 1 > v305)
              v305 = v306 >> 1;
            if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFFCLL)
              v307 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v307 = v305;
            if (v307)
            {
              v308 = (char *)sub_100260634((uint64_t)v422, v307);
              v303 = *(char **)(a1 + 176);
              v264 = *(char **)(a1 + 184);
            }
            else
            {
              v308 = 0;
            }
            v388 = &v308[4 * v304];
            *(_DWORD *)v388 = 0;
            v252 = v388 + 4;
            while (v264 != v303)
            {
              v389 = *((_DWORD *)v264 - 1);
              v264 -= 4;
              *((_DWORD *)v388 - 1) = v389;
              v388 -= 4;
            }
            *(_QWORD *)(a1 + 176) = v388;
            *(_QWORD *)(a1 + 184) = v252;
            *(_QWORD *)(a1 + 192) = &v308[4 * v307];
            if (v303)
              operator delete(v303);
          }
          else
          {
            *(_DWORD *)v264 = 0;
            v252 = v264 + 4;
          }
          *(_QWORD *)(a1 + 184) = v252;
          v390 = *((_QWORD *)this + 1);
          v391 = *((_QWORD *)this + 2);
          v392 = *(_QWORD *)this;
          v393 = 0;
          v394 = 0;
          if (v390 <= 0xFFFFFFFFFFFFFFF5 && v390 + 10 <= v391)
          {
            v325 = 0;
            while (1)
            {
              v398 = v390 + 1;
              *((_QWORD *)this + 1) = v390 + 1;
              v399 = *(_BYTE *)(v392 + v390);
              v325 |= (unint64_t)(v399 & 0x7F) << v393;
              if ((v399 & 0x80) == 0)
                goto LABEL_705;
              v393 += 7;
              v390 = v398;
              v66 = v394++ > 8;
              if (v66)
                goto LABEL_704;
            }
          }
          v325 = 0;
          if (v391 <= v390)
            v391 = *((_QWORD *)this + 1);
          while (v391 != v390)
          {
            v396 = v390 + 1;
            v397 = *(_BYTE *)(v392 + v390);
            *((_QWORD *)this + 1) = v396;
            v325 |= (unint64_t)(v397 & 0x7F) << v393;
            if ((v397 & 0x80) == 0)
              goto LABEL_698;
            v393 += 7;
            v390 = v396;
            v66 = v394++ > 8;
            if (v66)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xCu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 112);
              do
              {
                if ((unint64_t)v53 >= *v423)
                {
                  v215 = (char *)*v421;
                  v216 = (v53 - (_BYTE *)*v421) >> 2;
                  v217 = v216 + 1;
                  if ((unint64_t)(v216 + 1) >> 62)
                    goto LABEL_723;
                  v218 = *v423 - (_QWORD)v215;
                  if (v218 >> 1 > v217)
                    v217 = v218 >> 1;
                  if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL)
                    v219 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v219 = v217;
                  if (v219)
                  {
                    v220 = (char *)sub_100260634((uint64_t)v423, v219);
                    v215 = *(char **)(a1 + 104);
                    v53 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v220 = 0;
                  }
                  v221 = &v220[4 * v216];
                  *(_DWORD *)v221 = 0;
                  v222 = v221 + 4;
                  while (v53 != v215)
                  {
                    v223 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v221 - 1) = v223;
                    v221 -= 4;
                  }
                  *(_QWORD *)(a1 + 104) = v221;
                  *(_QWORD *)(a1 + 112) = v222;
                  *(_QWORD *)(a1 + 120) = &v220[4 * v219];
                  if (v215)
                    operator delete(v215);
                  v53 = v222;
                }
                else
                {
                  *(_DWORD *)v53 = 0;
                  v53 += 4;
                }
                *(_QWORD *)(a1 + 112) = v53;
                v225 = *((_QWORD *)this + 1);
                v224 = *((_QWORD *)this + 2);
                v226 = *(_QWORD *)this;
                if (v225 <= 0xFFFFFFFFFFFFFFF5 && v225 + 10 <= v224)
                {
                  v233 = 0;
                  v234 = 0;
                  v235 = 0;
                  while (1)
                  {
                    v236 = v225 + 1;
                    *((_QWORD *)this + 1) = v225 + 1;
                    v237 = *(_BYTE *)(v226 + v225);
                    v235 |= (unint64_t)(v237 & 0x7F) << v233;
                    if ((v237 & 0x80) == 0)
                      goto LABEL_406;
                    v233 += 7;
                    v225 = v236;
                    v66 = v234++ > 8;
                    if (v66)
                    {
                      LODWORD(v235) = 0;
                      goto LABEL_406;
                    }
                  }
                }
                v228 = 0;
                v229 = 0;
                v235 = 0;
                if (v224 <= v225)
                  v230 = *((_QWORD *)this + 1);
                else
                  v230 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v230 == v225)
                  {
LABEL_409:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v53 - 1) = 0;
                    goto LABEL_410;
                  }
                  v231 = v225++;
                  v232 = *(_BYTE *)(v226 + v231);
                  *((_QWORD *)this + 1) = v225;
                  v235 |= (unint64_t)(v232 & 0x7F) << v228;
                  if ((v232 & 0x80) == 0)
                    break;
                  v228 += 7;
                  v66 = v229++ > 8;
                  if (v66)
                  {
                    LODWORD(v235) = 0;
                    goto LABEL_405;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v235) = 0;
LABEL_405:
                v236 = v231 + 1;
LABEL_406:
                *((_DWORD *)v53 - 1) = v235;
              }
              while (v236 < v224 && !*((_BYTE *)this + 24));
            }
LABEL_410:
            PB::Reader::recallMark(this, v424);
          }
          else
          {
            v266 = *(char **)(a1 + 112);
            v265 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v266 >= v265)
            {
              v309 = (char *)*v421;
              v310 = (v266 - (_BYTE *)*v421) >> 2;
              v311 = v310 + 1;
              if ((unint64_t)(v310 + 1) >> 62)
LABEL_723:
                sub_100259694();
              v312 = v265 - (_QWORD)v309;
              if (v312 >> 1 > v311)
                v311 = v312 >> 1;
              if ((unint64_t)v312 >= 0x7FFFFFFFFFFFFFFCLL)
                v313 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v313 = v311;
              if (v313)
              {
                v314 = (char *)sub_100260634((uint64_t)v423, v313);
                v309 = *(char **)(a1 + 104);
                v266 = *(char **)(a1 + 112);
              }
              else
              {
                v314 = 0;
              }
              v400 = &v314[4 * v310];
              *(_DWORD *)v400 = 0;
              v252 = v400 + 4;
              while (v266 != v309)
              {
                v401 = *((_DWORD *)v266 - 1);
                v266 -= 4;
                *((_DWORD *)v400 - 1) = v401;
                v400 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v400;
              *(_QWORD *)(a1 + 112) = v252;
              *(_QWORD *)(a1 + 120) = &v314[4 * v313];
              if (v309)
                operator delete(v309);
            }
            else
            {
              *(_DWORD *)v266 = 0;
              v252 = v266 + 4;
            }
            *(_QWORD *)(a1 + 112) = v252;
            v402 = *((_QWORD *)this + 1);
            v403 = *((_QWORD *)this + 2);
            v404 = *(_QWORD *)this;
            v405 = 0;
            v406 = 0;
            if (v402 > 0xFFFFFFFFFFFFFFF5 || v402 + 10 > v403)
            {
              v325 = 0;
              if (v403 <= v402)
                v403 = *((_QWORD *)this + 1);
              while (v403 != v402)
              {
                v408 = v402 + 1;
                v409 = *(_BYTE *)(v404 + v402);
                *((_QWORD *)this + 1) = v408;
                v325 |= (unint64_t)(v409 & 0x7F) << v405;
                if ((v409 & 0x80) == 0)
                {
LABEL_698:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v325) = 0;
                  goto LABEL_705;
                }
                v405 += 7;
                v402 = v408;
                v66 = v406++ > 8;
                if (v66)
                {
LABEL_704:
                  LODWORD(v325) = 0;
                  goto LABEL_705;
                }
              }
LABEL_697:
              LODWORD(v325) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v325 = 0;
              while (1)
              {
                v410 = v402 + 1;
                *((_QWORD *)this + 1) = v402 + 1;
                v411 = *(_BYTE *)(v404 + v402);
                v325 |= (unint64_t)(v411 & 0x7F) << v405;
                if ((v411 & 0x80) == 0)
                  break;
                v405 += 7;
                v402 = v410;
                v66 = v406++ > 8;
                if (v66)
                  goto LABEL_704;
              }
            }
LABEL_705:
            *(v252 - 1) = v325;
          }
LABEL_706:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v19 >> 3, v19 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_706;
      }
    }
    v22 = 0;
    v23 = 0;
    v19 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v16 + v4);
      *((_QWORD *)this + 1) = v24;
      v19 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v19 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015AEB4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;

  v3 = result;
  v4 = *(_BYTE *)(result + 224);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 208), 1u);
    v4 = *(_BYTE *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_33:
      result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 220), 3u);
      if ((*(_BYTE *)(v3 + 224) & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 224) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 200), 2u);
  v4 = *(_BYTE *)(v3 + 224);
  if ((v4 & 8) != 0)
    goto LABEL_33;
LABEL_4:
  if ((v4 & 4) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 216), 4u);
LABEL_6:
  v5 = *(unsigned int **)(v3 + 8);
  v6 = *(unsigned int **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeVarInt(this, v7, 5u);
  }
  v8 = *(unsigned int **)(v3 + 32);
  v9 = *(unsigned int **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::writeVarInt(this, v10, 6u);
  }
  v11 = *(unsigned int **)(v3 + 56);
  v12 = *(unsigned int **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::writeVarInt(this, v13, 7u);
  }
  v14 = *(unsigned int **)(v3 + 80);
  v15 = *(unsigned int **)(v3 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::writeVarInt(this, v16, 8u);
  }
  v17 = *(unsigned int **)(v3 + 128);
  v18 = *(unsigned int **)(v3 + 136);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::writeVarInt(this, v19, 9u);
  }
  v20 = *(unsigned int **)(v3 + 152);
  v21 = *(unsigned int **)(v3 + 160);
  while (v20 != v21)
  {
    v22 = *v20++;
    result = PB::Writer::writeVarInt(this, v22, 0xAu);
  }
  v23 = *(unsigned int **)(v3 + 176);
  v24 = *(unsigned int **)(v3 + 184);
  while (v23 != v24)
  {
    v25 = *v23++;
    result = PB::Writer::writeVarInt(this, v25, 0xBu);
  }
  v27 = *(unsigned int **)(v3 + 104);
  v26 = *(unsigned int **)(v3 + 112);
  while (v27 != v26)
  {
    v28 = *v27++;
    result = PB::Writer::writeVarInt(this, v28, 0xCu);
  }
  return result;
}

uint64_t sub_1015AECE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFA00;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1015AECFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015AED20(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_QWORD *)result = &off_1021BFA00;
  *(_DWORD *)(result + 56) = 0;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_WORD *)(result + 56) = 4;
    *(_DWORD *)(result + 24) = v4;
    v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_WORD *)(result + 56) = v3;
    *(_DWORD *)(result + 36) = v5;
    v2 = *(_WORD *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(result + 56) = v3;
    *(_DWORD *)(result + 52) = v6;
    v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 56) = v3;
  *(_QWORD *)(result + 16) = v8;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 48) = v9;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 44) = v10;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 40) = v11;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      return result;
LABEL_22:
    v13 = *(_DWORD *)(a2 + 28);
    *(_WORD *)(result + 56) = v3 | 8;
    *(_DWORD *)(result + 28) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 56) = v3;
  *(_QWORD *)(result + 8) = v12;
  if ((*(_WORD *)(a2 + 56) & 8) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_1015AEE54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "base", *(float *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "broken", *(_DWORD *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "peak", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "sensor", *(_DWORD *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "temp", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 56) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 2) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015AEFC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_WORD *)(a1 + 56) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_WORD *)(a1 + 56) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_122;
            case 4u:
              *(_WORD *)(a1 + 56) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v59 = v21++;
                  v60 = *(_BYTE *)(v22 + v59);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_126:
                    v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_126;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_127;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_153;
            case 5u:
              *(_WORD *)(a1 + 56) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_122:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_153;
            case 6u:
              *(_WORD *)(a1 + 56) |= 0x100u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v63 = v27++;
                  v64 = *(_BYTE *)(v28 + v63);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_131:
                    v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_131;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_132;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 48) = v31;
              goto LABEL_153;
            case 7u:
              *(_WORD *)(a1 + 56) |= 0x80u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v33++;
                  v68 = *(_BYTE *)(v34 + v67);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_136:
                    v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_136;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_137;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 44) = v37;
              goto LABEL_153;
            case 8u:
              *(_WORD *)(a1 + 56) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_141:
                    v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_141;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_142;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_153;
            case 9u:
              *(_WORD *)(a1 + 56) |= 0x10u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_146:
                    v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_146;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_147;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 32) = v49;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 56) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_151:
                    v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_151;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_152;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_152:
              *(_QWORD *)(a1 + 8) = v55;
LABEL_153:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_153;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015AF7B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 56);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 5u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 8u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xAu);
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 9u);
  if ((*(_WORD *)(v3 + 56) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xAu);
  return result;
}

double sub_1015AF8EC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021BFA38;
  *(_DWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_1015AF918(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = off_1021BFA38;
  v4 = (void **)(a1 + 56);
  sub_100724968(&v4);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015AF984(uint64_t a1)
{
  sub_1015AF918(a1);
  operator delete();
}

uint64_t sub_1015AF9A8(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v10;
  int v11;
  int v12;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = off_1021BFA38;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_BYTE *)(a2 + 104) & 8) != 0)
  {
    v5 = *(_DWORD *)(a2 + 92);
    *(_BYTE *)(a1 + 104) = 8;
    *(_DWORD *)(a1 + 92) = v5;
    v4 = 12;
    if ((*(_BYTE *)(a2 + 104) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 4;
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
LABEL_5:
    v6 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = v4;
    *(_DWORD *)(a1 + 88) = v6;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 56) != *(_QWORD *)(a2 + 64))
    sub_10155FA3C();
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v7 = *(_BYTE *)(a2 + 104);
  if ((v7 & 1) != 0)
  {
    v10 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 104) |= 1u;
    *(_DWORD *)(a1 + 80) = v10;
    v7 = *(_BYTE *)(a2 + 104);
    if ((v7 & 0x10) == 0)
    {
LABEL_12:
      if ((v7 & 2) == 0)
        goto LABEL_13;
LABEL_18:
      v12 = *(_DWORD *)(a2 + 84);
      *(_BYTE *)(a1 + 104) |= 2u;
      *(_DWORD *)(a1 + 84) = v12;
      if ((*(_BYTE *)(a2 + 104) & 0x20) == 0)
        return a1;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 104) & 0x10) == 0)
  {
    goto LABEL_12;
  }
  v11 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) |= 0x10u;
  *(_DWORD *)(a1 + 96) = v11;
  v7 = *(_BYTE *)(a2 + 104);
  if ((v7 & 2) != 0)
    goto LABEL_18;
LABEL_13:
  if ((v7 & 0x20) != 0)
  {
LABEL_14:
    v8 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 104) |= 0x20u;
    *(_DWORD *)(a1 + 100) = v8;
  }
  return a1;
}

uint64_t sub_1015AFB24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  float *v13;
  float *v14;
  float v15;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "conchaDropped", *(_DWORD *)(a1 + 80));
    v5 = *(_BYTE *)(a1 + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a1 + 104) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "conchaRecovered", *(_DWORD *)(a1 + 84));
  v5 = *(_BYTE *)(a1 + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(this, "iedState", *(_DWORD *)(a1 + 88));
  if ((*(_BYTE *)(a1 + 104) & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 92));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "mean", v8);
  }
  v9 = *(uint64_t **)(a1 + 56);
  v10 = *(uint64_t **)(a1 + 64);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "optical");
  }
  v12 = *(_BYTE *)(a1 + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "tragusDropped", *(_DWORD *)(a1 + 96));
    v12 = *(_BYTE *)(a1 + 104);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(this, "tragusRecovered", *(_DWORD *)(a1 + 100));
  v13 = *(float **)(a1 + 32);
  v14 = *(float **)(a1 + 40);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "variance", v15);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015AFCA8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  char *v112;
  _DWORD *v113;
  unint64_t v114;
  char *v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  int v145;
  char *v146;
  int v147;
  unint64_t v148;
  _BYTE v151[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 104) |= 8u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_188;
              v30 += 7;
              v27 = v33;
              v20 = v31++ > 8;
            }
            while (!v20);
LABEL_122:
            LODWORD(v32) = 0;
            goto LABEL_188;
          }
          v103 = 0;
          v104 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v105 = v27 + 1;
              v106 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v105;
              v32 |= (unint64_t)(v106 & 0x7F) << v103;
              if (v106 < 0)
              {
                v103 += 7;
                v27 = v105;
                v20 = v104++ > 8;
                if (v20)
                  goto LABEL_122;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_188:
          *(_DWORD *)(a1 + 92) = v32;
          goto LABEL_222;
        case 2u:
          *(_BYTE *)(a1 + 104) |= 4u;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          v37 = *(_QWORD *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)this + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_191;
              v38 += 7;
              v35 = v41;
              v20 = v39++ > 8;
            }
            while (!v20);
LABEL_129:
            LODWORD(v40) = 0;
            goto LABEL_191;
          }
          v107 = 0;
          v108 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v109 = v35 + 1;
              v110 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)this + 1) = v109;
              v40 |= (unint64_t)(v110 & 0x7F) << v107;
              if (v110 < 0)
              {
                v107 += 7;
                v35 = v109;
                v20 = v108++ > 8;
                if (v20)
                  goto LABEL_129;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_191:
          *(_DWORD *)(a1 + 88) = v40;
          goto LABEL_222;
        case 3u:
          sub_10155FEB0();
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v112 = *(char **)(a1 + 16);
            v111 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v112 >= v111)
            {
              v132 = (char *)*v12;
              v133 = (v112 - (_BYTE *)*v12) >> 2;
              v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 62)
LABEL_232:
                sub_100259694();
              v135 = v111 - (_QWORD)v132;
              if (v135 >> 1 > v134)
                v134 = v135 >> 1;
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                v136 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v136 = v134;
              if (v136)
              {
                v137 = (char *)sub_100260634(v13, v136);
                v132 = *(char **)(a1 + 8);
                v112 = *(char **)(a1 + 16);
              }
              else
              {
                v137 = 0;
              }
              v144 = &v137[4 * v133];
              *(_DWORD *)v144 = 0;
              v113 = v144 + 4;
              while (v112 != v132)
              {
                v145 = *((_DWORD *)v112 - 1);
                v112 -= 4;
                *((_DWORD *)v144 - 1) = v145;
                v144 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v144;
              *(_QWORD *)(a1 + 16) = v113;
              *(_QWORD *)(a1 + 24) = &v137[4 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_DWORD *)v112 = 0;
              v113 = v112 + 4;
            }
            *(_QWORD *)(a1 + 16) = v113;
            goto LABEL_218;
          }
          if ((PB::Reader::placeMark(this, v151, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_232;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100260634(v13, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_163;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v151, v26, a4) & 1) != 0)
              return 0;
            v57 = *((_QWORD *)this + 1);
            v58 = *((_QWORD *)this + 2);
            while (v57 < v58 && !*((_BYTE *)this + 24))
            {
              v60 = *(char **)(a1 + 40);
              v59 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v60 >= v59)
              {
                v62 = (char *)*v10;
                v63 = (v60 - (_BYTE *)*v10) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  goto LABEL_233;
                v65 = v59 - (_QWORD)v62;
                if (v65 >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)sub_100260634(v11, v66);
                  v62 = *(char **)(a1 + 32);
                  v60 = *(char **)(a1 + 40);
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = 0;
                v61 = v68 + 4;
                while (v60 != v62)
                {
                  v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v68;
                *(_QWORD *)(a1 + 40) = v61;
                *(_QWORD *)(a1 + 48) = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v60 = 0;
                v61 = v60 + 4;
              }
              *(_QWORD *)(a1 + 40) = v61;
              v70 = *((_QWORD *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              {
LABEL_162:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
              v58 = *((_QWORD *)this + 2);
              v57 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v57;
            }
LABEL_163:
            PB::Reader::recallMark(this, v151);
          }
          else
          {
            v115 = *(char **)(a1 + 40);
            v114 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v115 >= v114)
            {
              v138 = (char *)*v10;
              v139 = (v115 - (_BYTE *)*v10) >> 2;
              v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 62)
LABEL_233:
                sub_100259694();
              v141 = v114 - (_QWORD)v138;
              if (v141 >> 1 > v140)
                v140 = v141 >> 1;
              if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
                v142 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v142 = v140;
              if (v142)
              {
                v143 = (char *)sub_100260634(v11, v142);
                v138 = *(char **)(a1 + 32);
                v115 = *(char **)(a1 + 40);
              }
              else
              {
                v143 = 0;
              }
              v146 = &v143[4 * v139];
              *(_DWORD *)v146 = 0;
              v113 = v146 + 4;
              while (v115 != v138)
              {
                v147 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v146 - 1) = v147;
                v146 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v146;
              *(_QWORD *)(a1 + 40) = v113;
              *(_QWORD *)(a1 + 48) = &v143[4 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *(_DWORD *)v115 = 0;
              v113 = v115 + 4;
            }
            *(_QWORD *)(a1 + 40) = v113;
LABEL_218:
            v148 = *((_QWORD *)this + 1);
            if (v148 <= 0xFFFFFFFFFFFFFFFBLL && v148 + 4 <= *((_QWORD *)this + 2))
            {
              *(v113 - 1) = *(_DWORD *)(*(_QWORD *)this + v148);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_222:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 104) |= 1u;
          v71 = *((_QWORD *)this + 1);
          v72 = *((_QWORD *)this + 2);
          v73 = *(_QWORD *)this;
          if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
          {
            v74 = 0;
            v75 = 0;
            v76 = 0;
            do
            {
              v77 = v71 + 1;
              *((_QWORD *)this + 1) = v71 + 1;
              v78 = *(_BYTE *)(v73 + v71);
              v76 |= (unint64_t)(v78 & 0x7F) << v74;
              if ((v78 & 0x80) == 0)
                goto LABEL_194;
              v74 += 7;
              v71 = v77;
              v20 = v75++ > 8;
            }
            while (!v20);
LABEL_140:
            LODWORD(v76) = 0;
            goto LABEL_194;
          }
          v116 = 0;
          v117 = 0;
          v76 = 0;
          if (v72 <= v71)
            v72 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v72 == v71)
            {
              LODWORD(v76) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v118 = v71 + 1;
              v119 = *(_BYTE *)(v73 + v71);
              *((_QWORD *)this + 1) = v118;
              v76 |= (unint64_t)(v119 & 0x7F) << v116;
              if (v119 < 0)
              {
                v116 += 7;
                v71 = v118;
                v20 = v117++ > 8;
                if (v20)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v76) = 0;
            }
            break;
          }
LABEL_194:
          *(_DWORD *)(a1 + 80) = v76;
          goto LABEL_222;
        case 7u:
          *(_BYTE *)(a1 + 104) |= 0x10u;
          v79 = *((_QWORD *)this + 1);
          v80 = *((_QWORD *)this + 2);
          v81 = *(_QWORD *)this;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v79 + 1;
              *((_QWORD *)this + 1) = v79 + 1;
              v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0)
                goto LABEL_197;
              v82 += 7;
              v79 = v85;
              v20 = v83++ > 8;
            }
            while (!v20);
LABEL_147:
            LODWORD(v84) = 0;
            goto LABEL_197;
          }
          v120 = 0;
          v121 = 0;
          v84 = 0;
          if (v80 <= v79)
            v80 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v122 = v79 + 1;
              v123 = *(_BYTE *)(v81 + v79);
              *((_QWORD *)this + 1) = v122;
              v84 |= (unint64_t)(v123 & 0x7F) << v120;
              if (v123 < 0)
              {
                v120 += 7;
                v79 = v122;
                v20 = v121++ > 8;
                if (v20)
                  goto LABEL_147;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v84) = 0;
            }
            break;
          }
LABEL_197:
          *(_DWORD *)(a1 + 96) = v84;
          goto LABEL_222;
        case 8u:
          *(_BYTE *)(a1 + 104) |= 2u;
          v87 = *((_QWORD *)this + 1);
          v88 = *((_QWORD *)this + 2);
          v89 = *(_QWORD *)this;
          if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
          {
            v90 = 0;
            v91 = 0;
            v92 = 0;
            do
            {
              v93 = v87 + 1;
              *((_QWORD *)this + 1) = v87 + 1;
              v94 = *(_BYTE *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0)
                goto LABEL_200;
              v90 += 7;
              v87 = v93;
              v20 = v91++ > 8;
            }
            while (!v20);
LABEL_154:
            LODWORD(v92) = 0;
            goto LABEL_200;
          }
          v124 = 0;
          v125 = 0;
          v92 = 0;
          if (v88 <= v87)
            v88 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v126 = v87 + 1;
              v127 = *(_BYTE *)(v89 + v87);
              *((_QWORD *)this + 1) = v126;
              v92 |= (unint64_t)(v127 & 0x7F) << v124;
              if (v127 < 0)
              {
                v124 += 7;
                v87 = v126;
                v20 = v125++ > 8;
                if (v20)
                  goto LABEL_154;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v92) = 0;
            }
            break;
          }
LABEL_200:
          *(_DWORD *)(a1 + 84) = v92;
          goto LABEL_222;
        case 9u:
          *(_BYTE *)(a1 + 104) |= 0x20u;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_203;
              v98 += 7;
              v95 = v101;
              v20 = v99++ > 8;
            }
            while (!v20);
LABEL_161:
            LODWORD(v100) = 0;
            goto LABEL_203;
          }
          v128 = 0;
          v129 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v130 = v95 + 1;
              v131 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v130;
              v100 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                v95 = v130;
                v20 = v129++ > 8;
                if (v20)
                  goto LABEL_161;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_203:
          *(_DWORD *)(a1 + 100) = v100;
          goto LABEL_222;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_222;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015B07AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = result;
  v4 = *(_BYTE *)(result + 104);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 92), 1u);
    v4 = *(_BYTE *)(v3 + 104);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 2u);
  v5 = *(const PB::Base ***)(v3 + 56);
  v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeSubmessage(this, v7, 3u);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 4u);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13, 5u);
  }
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 6u);
    v14 = *(_BYTE *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else if ((*(_BYTE *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 7u);
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 2) == 0)
  {
LABEL_17:
    if ((v14 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 9u);
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 8u);
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 9u);
  return result;
}

uint64_t sub_1015B08DC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFA70;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1015B08F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015B0918(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)result = &off_1021BFA70;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 44) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if (v2 < 0)
  {
    v6 = *(_BYTE *)(a2 + 40);
    v3 |= 0x80u;
    *(_BYTE *)(result + 44) = v3;
    *(_BYTE *)(result + 40) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 24) = v8;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v9;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_18:
    v11 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_DWORD *)(result + 32) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 16) = v10;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_1015B0A14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaTemp", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "prescalar", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "pwrState", *(_DWORD *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "valid", *(_BYTE *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "tragusTemp", *(_DWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "wdtPeriod", *(_DWORD *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B0B44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_146;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_119;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_120;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 20) = v25;
              goto LABEL_146;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 40) = v28;
              goto LABEL_146;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_125;
                  }
                  v65 = v29++;
                  v66 = *(_BYTE *)(v30 + v65);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_124:
                    v2 = v65 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_124;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_125;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_125:
              *(_DWORD *)(a1 + 28) = v33;
              goto LABEL_146;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v69 = v35++;
                  v70 = *(_BYTE *)(v36 + v69);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_129:
                    v2 = v69 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_129;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_130;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 24) = v39;
              goto LABEL_146;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_134:
                    v2 = v73 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_134;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_135;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_135:
              *(_DWORD *)(a1 + 36) = v45;
              goto LABEL_146;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  v77 = v47++;
                  v78 = *(_BYTE *)(v48 + v77);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_139:
                    v2 = v77 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_139;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_140;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 16) = v51;
              goto LABEL_146;
            case 8u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_144:
                    v2 = v81 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_144;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_145;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 32) = v57;
LABEL_146:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_146;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015B12C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 8u);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 8u);
  return result;
}

double sub_1015B13C8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021BFAA8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_1015B13E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1021BFAA8;
  v4 = *(_QWORD *)(a1 + 40);
  v2 = (_QWORD *)(a1 + 40);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  sub_1015A26F0((void ***)(a1 + 32), 0);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    sub_1006B3398(a1 + 24, v5);
  sub_1015A26F0((void ***)(a1 + 16), 0);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015B146C(uint64_t a1)
{
  sub_1015B13E8(a1);
  operator delete();
}

uint64_t sub_1015B1490(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)result = off_1021BFAA8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 40) = 0;
  if (a2[1])
    operator new();
  if (a2[2])
    operator new();
  if (a2[4])
    operator new();
  if (a2[3])
    operator new();
  if (a2[5])
    operator new();
  return result;
}

uint64_t sub_1015B169C(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  const Data *v6;
  const Data *v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  v6 = (const Data *)a1[2];
  if (v6)
    PB::TextFormatter::format(this, "oscl", v6);
  if (a1[3])
    PB::TextFormatter::format(this, "osclString");
  v7 = (const Data *)a1[4];
  if (v7)
    PB::TextFormatter::format(this, "pdtc", v7);
  if (a1[5])
    PB::TextFormatter::format(this, "pdtcString");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B174C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v14 = 0;
        v15 = 0;
        v10 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v16 = v2 + 1;
          v17 = *(_BYTE *)(v7 + v2);
          *((_QWORD *)this + 1) = v16;
          v10 |= (unint64_t)(v17 & 0x7F) << v14;
          if ((v17 & 0x80) == 0)
            goto LABEL_20;
          v14 += 7;
          v2 = v16;
          if (v15++ >= 9)
          {
LABEL_19:
            v10 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v12 = *(_BYTE *)(v7 + v2);
          v10 |= (unint64_t)(v12 & 0x7F) << v8;
          if ((v12 & 0x80) == 0)
            break;
          v8 += 7;
          v2 = v11;
          if (v9++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              operator new();
            case 3u:
              operator new();
            case 4u:
              operator new();
            case 5u:
              operator new();
            default:
              result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015B1AA0(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Data *v5;
  const PB::Data *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = (const PB::Data *)v3[2];
  if (v5)
    result = PB::Writer::write(this, v5, 2u);
  v6 = (const PB::Data *)v3[4];
  if (v6)
    result = PB::Writer::write(this, v6, 3u);
  v7 = v3[3];
  if (v7)
    result = PB::Writer::write(this, v7, 4);
  v8 = v3[5];
  if (v8)
    return PB::Writer::write(this, v8, 5);
  return result;
}

uint64_t sub_1015B1B2C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFAE0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015B1B44(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015B1B68(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)result = &off_1021BFAE0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_BYTE *)(result + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 20) = v7;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    v9 = *(_BYTE *)(a2 + 29);
    *(_BYTE *)(result + 32) = v3 | 0x20;
    *(_BYTE *)(result + 29) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v8;
  if ((*(_BYTE *)(a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_1015B1C2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asleep", *(_BYTE *)(a1 + 28));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageConfidence", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "initialized", *(_BYTE *)(a1 + 29));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "rawConfidence", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B1D1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_81:
                v2 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_82;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_82:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_93;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 28) = v28;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_86;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_87;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_91;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_92;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 24) = v39;
LABEL_93:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 32) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 29) = v42;
              goto LABEL_93;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015B221C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  return result;
}

uint64_t sub_1015B22E8(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFB18;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015B2300(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015B2324(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = &off_1021BFB18;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 8;
    *(_DWORD *)(result + 24) = v7;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 20) = v6;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015B23B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidenceLevel", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B2460(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v3 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 16) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015B2974(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  return result;
}

uint64_t sub_1015B2A08(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFB50;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1015B2A20(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1021BFB50;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_1015B2A80(PB::Base *a1)
{
  sub_1015B2A20(a1);
  operator delete();
}

uint64_t sub_1015B2AA4(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = &off_1021BFB50;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_BYTE *)(a2 + 60);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v3 = 4;
    *(_BYTE *)(result + 60) = 4;
    *(_QWORD *)(result + 32) = v4;
    v2 = *(_BYTE *)(a2 + 60);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 60) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x10u;
    *(_BYTE *)(result + 60) = v3;
    *(_DWORD *)(result + 52) = v5;
    v2 = *(_BYTE *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v7 = *(_DWORD *)(a2 + 48);
    v3 |= 8u;
    *(_BYTE *)(result + 60) = v3;
    *(_DWORD *)(result + 48) = v7;
    v2 = *(_BYTE *)(a2 + 60);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a2 + 24);
  v3 |= 2u;
  *(_BYTE *)(result + 60) = v3;
  *(_QWORD *)(result + 24) = v8;
  v2 = *(_BYTE *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_18:
  v9 = *(_QWORD *)(a2 + 16);
  v3 |= 1u;
  *(_BYTE *)(result + 60) = v3;
  *(_QWORD *)(result + 16) = v9;
  if ((*(_BYTE *)(a2 + 60) & 0x20) != 0)
  {
LABEL_10:
    v6 = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(result + 60) = v3 | 0x20;
    *(_BYTE *)(result + 56) = v6;
  }
LABEL_11:
  if (*(_QWORD *)(a2 + 40))
    operator new();
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015B2C18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0)
    PB::TextFormatter::format(this, "detectedSteps", *(_BYTE *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "firstStepFeatures");
  v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "fsmEndState", *(_DWORD *)(a1 + 48));
    v6 = *(_BYTE *)(a1 + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a1 + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "fsmStartState", *(_DWORD *)(a1 + 52));
  v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "impulseEndTime", *(double *)(a1 + 16));
  v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_17:
  PB::TextFormatter::format(this, "impulseStartTime", *(double *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "imuTimestamp", *(double *)(a1 + 32));
LABEL_11:
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "stepLikelihoodFeatures");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B2D44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 60) |= 4u;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_46;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_68;
        case 2u:
          *(_BYTE *)(a1 + 60) |= 0x10u;
          v22 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          v24 = *(_QWORD *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)this + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_72;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_57:
            LODWORD(v27) = 0;
            goto LABEL_72;
          }
          v44 = 0;
          v45 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v46 = v22 + 1;
              v47 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)this + 1) = v46;
              v27 |= (unint64_t)(v47 & 0x7F) << v44;
              if (v47 < 0)
              {
                v44 += 7;
                v22 = v46;
                v14 = v45++ > 8;
                if (v14)
                  goto LABEL_57;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_72:
          *(_DWORD *)(a1 + 52) = v27;
          goto LABEL_77;
        case 3u:
          *(_BYTE *)(a1 + 60) |= 8u;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          v32 = *(_QWORD *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)this + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_76;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_64:
            LODWORD(v35) = 0;
            goto LABEL_76;
          }
          v48 = 0;
          v49 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)this + 1);
          break;
        case 4u:
          *(_BYTE *)(a1 + 60) |= 2u;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
            goto LABEL_46;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v38);
          goto LABEL_68;
        case 5u:
          *(_BYTE *)(a1 + 60) |= 1u;
          v39 = *((_QWORD *)this + 1);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v39);
LABEL_68:
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
LABEL_46:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_77;
        case 6u:
          *(_BYTE *)(a1 + 60) |= 0x20u;
          v40 = *((_QWORD *)this + 1);
          if (v40 >= *((_QWORD *)this + 2))
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
            *((_QWORD *)this + 1) = v41;
            v43 = v42 != 0;
          }
          *(_BYTE *)(a1 + 56) = v43;
          goto LABEL_77;
        case 7u:
          operator new();
        case 8u:
          operator new();
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_77;
      }
      while (1)
      {
        if (v31 == v30)
        {
          LODWORD(v35) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_76;
        }
        v50 = v30 + 1;
        v51 = *(_BYTE *)(v32 + v30);
        *((_QWORD *)this + 1) = v50;
        v35 |= (unint64_t)(v51 & 0x7F) << v48;
        if ((v51 & 0x80) == 0)
          break;
        v48 += 7;
        v30 = v50;
        v14 = v49++ > 8;
        if (v14)
          goto LABEL_64;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v35) = 0;
LABEL_76:
      *(_DWORD *)(a1 + 48) = v35;
LABEL_77:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015B323C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = result;
  v4 = *(_BYTE *)(result + 60);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(result + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 2u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 5u);
  if ((*(_BYTE *)(v3 + 60) & 0x20) != 0)
LABEL_7:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 6u);
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 40);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5, 7u);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(this, v6, 8u);
  return result;
}

uint64_t sub_1015B3334(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFB88;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1015B334C(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021BFB88;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_1015B338C(PB::Base *a1)
{
  sub_1015B334C(a1);
  operator delete();
}

uint64_t sub_1015B33B0(uint64_t a1, uint64_t a2)
{
  char *v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)a1 = &off_1021BFB88;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  v4 = *(_BYTE *)(a2 + 52);
  if ((v4 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 44);
    v5 = 4;
    *(_BYTE *)(a1 + 52) = 4;
    *(_DWORD *)(a1 + 44) = v6;
    v4 = *(_BYTE *)(a2 + 52);
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
LABEL_5:
    v7 = *(_QWORD *)(a2 + 32);
    v5 |= 1u;
    *(_BYTE *)(a1 + 52) = v5;
    *(_QWORD *)(a1 + 32) = v7;
    v4 = *(_BYTE *)(a2 + 52);
  }
LABEL_6:
  if ((v4 & 8) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v10 = *(_DWORD *)(a2 + 48);
  v5 |= 8u;
  *(_BYTE *)(a1 + 52) = v5;
  *(_DWORD *)(a1 + 48) = v10;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
LABEL_8:
    v8 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) = v5 | 2;
    *(_DWORD *)(a1 + 40) = v8;
  }
LABEL_9:
  if (a1 != a2)
    sub_1002A3054(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_1015B3480(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  int *v6;
  int *v7;
  int v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hostState", *(_DWORD *)(a1 + 40));
    v5 = *(_BYTE *)(a1 + 52);
  }
  if ((v5 & 4) != 0)
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 44));
  v6 = *(int **)(a1 + 8);
  v7 = *(int **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "s7q8", v8);
  }
  v9 = *(_BYTE *)(a1 + 52);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sensorState", *(_DWORD *)(a1 + 48));
    v9 = *(_BYTE *)(a1 + 52);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015B355C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  char *v86;
  _DWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  unint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  _BYTE v109[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = (_QWORD *)(a1 + 24);
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v62 = v14++ > 8;
        if (v62)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if ((_DWORD)v23 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_133;
              v27 += 7;
              v24 = v30;
              v62 = v28++ > 8;
            }
            while (!v62);
LABEL_100:
            LODWORD(v29) = 0;
            goto LABEL_133;
          }
          v73 = 0;
          v74 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v75 = v24 + 1;
              v76 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v75;
              v29 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                v24 = v75;
                v62 = v74++ > 8;
                if (v62)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_133:
          *(_DWORD *)(a1 + 44) = v29;
          goto LABEL_166;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v32 = *((_QWORD *)this + 1);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v32);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_166;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 8u;
          v33 = *((_QWORD *)this + 1);
          v34 = *((_QWORD *)this + 2);
          v35 = *(_QWORD *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)this + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_136;
              v36 += 7;
              v33 = v39;
              v62 = v37++ > 8;
            }
            while (!v62);
LABEL_107:
            LODWORD(v38) = 0;
            goto LABEL_136;
          }
          v77 = 0;
          v78 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v79 = v33 + 1;
              v80 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)this + 1) = v79;
              v38 |= (unint64_t)(v80 & 0x7F) << v77;
              if (v80 < 0)
              {
                v77 += 7;
                v33 = v79;
                v62 = v78++ > 8;
                if (v62)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v38) = 0;
            }
            break;
          }
LABEL_136:
          *(_DWORD *)(a1 + 48) = v38;
          goto LABEL_166;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_139;
              v44 += 7;
              v41 = v47;
              v62 = v45++ > 8;
            }
            while (!v62);
LABEL_114:
            LODWORD(v46) = 0;
            goto LABEL_139;
          }
          v81 = 0;
          v82 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v83 = v41 + 1;
              v84 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v83;
              v46 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                v41 = v83;
                v62 = v82++ > 8;
                if (v62)
                  goto LABEL_114;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_139:
          *(_DWORD *)(a1 + 40) = v46;
          goto LABEL_166;
        case 5u:
          if ((_DWORD)v23 == 2)
          {
            if ((PB::Reader::placeMark(this, v109, v23, a4) & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v49 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v49 >= *v11)
                {
                  v50 = (char *)*v10;
                  v51 = (v49 - (_BYTE *)*v10) >> 2;
                  v52 = v51 + 1;
                  if ((unint64_t)(v51 + 1) >> 62)
                    goto LABEL_176;
                  v53 = *v11 - (_QWORD)v50;
                  if (v53 >> 1 > v52)
                    v52 = v53 >> 1;
                  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                    v54 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v54 = v52;
                  if (v54)
                  {
                    v55 = (char *)sub_100260634((uint64_t)v11, v54);
                    v50 = *(char **)(a1 + 8);
                    v49 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v55 = 0;
                  }
                  v56 = &v55[4 * v51];
                  *(_DWORD *)v56 = 0;
                  v57 = v56 + 4;
                  while (v49 != v50)
                  {
                    v58 = *((_DWORD *)v49 - 1);
                    v49 -= 4;
                    *((_DWORD *)v56 - 1) = v58;
                    v56 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v56;
                  *(_QWORD *)(a1 + 16) = v57;
                  *(_QWORD *)(a1 + 24) = &v55[4 * v54];
                  if (v50)
                    operator delete(v50);
                  v49 = v57;
                }
                else
                {
                  *(_DWORD *)v49 = 0;
                  v49 += 4;
                }
                *(_QWORD *)(a1 + 16) = v49;
                v60 = *((_QWORD *)this + 1);
                v59 = *((_QWORD *)this + 2);
                v61 = *(_QWORD *)this;
                v62 = v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v59;
                if (!v62)
                {
                  v68 = 0;
                  v69 = 0;
                  v70 = 0;
                  while (1)
                  {
                    v71 = v60 + 1;
                    *((_QWORD *)this + 1) = v60 + 1;
                    v72 = *(_BYTE *)(v61 + v60);
                    v70 |= (unint64_t)(v72 & 0x7F) << v68;
                    if ((v72 & 0x80) == 0)
                      goto LABEL_91;
                    v68 += 7;
                    v60 = v71;
                    v62 = v69++ > 8;
                    if (v62)
                    {
                      LODWORD(v70) = 0;
                      goto LABEL_91;
                    }
                  }
                }
                v63 = 0;
                v64 = 0;
                v70 = 0;
                if (v59 <= v60)
                  v65 = *((_QWORD *)this + 1);
                else
                  v65 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v65 == v60)
                  {
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v49 - 1) = 0;
                    goto LABEL_127;
                  }
                  v66 = v60++;
                  v67 = *(_BYTE *)(v61 + v66);
                  *((_QWORD *)this + 1) = v60;
                  v70 |= (unint64_t)(v67 & 0x7F) << v63;
                  if ((v67 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v62 = v64++ > 8;
                  if (v62)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v70) = 0;
LABEL_90:
                v71 = v66 + 1;
LABEL_91:
                *((_DWORD *)v49 - 1) = v70;
              }
              while (v71 < v59 && !*((_BYTE *)this + 24));
            }
LABEL_127:
            PB::Reader::recallMark(this, v109);
          }
          else
          {
            v86 = *(char **)(a1 + 16);
            v85 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v86 >= v85)
            {
              v88 = (char *)*v10;
              v89 = (v86 - (_BYTE *)*v10) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
LABEL_176:
                sub_100259694();
              v91 = v85 - (_QWORD)v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)sub_100260634((uint64_t)v11, v92);
                v88 = *(char **)(a1 + 8);
                v86 = *(char **)(a1 + 16);
              }
              else
              {
                v93 = 0;
              }
              v94 = &v93[4 * v89];
              *(_DWORD *)v94 = 0;
              v87 = v94 + 4;
              while (v86 != v88)
              {
                v95 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v94;
              *(_QWORD *)(a1 + 16) = v87;
              *(_QWORD *)(a1 + 24) = &v93[4 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *(_DWORD *)v86 = 0;
              v87 = v86 + 4;
            }
            *(_QWORD *)(a1 + 16) = v87;
            v96 = *((_QWORD *)this + 1);
            v97 = *((_QWORD *)this + 2);
            v98 = *(_QWORD *)this;
            v99 = 0;
            v100 = 0;
            if (v96 > 0xFFFFFFFFFFFFFFF5 || v96 + 10 > v97)
            {
              v104 = 0;
              if (v97 <= v96)
                v97 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v97 == v96)
                {
                  LODWORD(v104) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_165;
                }
                v102 = v96 + 1;
                v103 = *(_BYTE *)(v98 + v96);
                *((_QWORD *)this + 1) = v102;
                v104 |= (unint64_t)(v103 & 0x7F) << v99;
                if ((v103 & 0x80) == 0)
                  break;
                v99 += 7;
                v96 = v102;
                v62 = v100++ > 8;
                if (v62)
                {
LABEL_161:
                  LODWORD(v104) = 0;
                  goto LABEL_165;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v104) = 0;
            }
            else
            {
              v104 = 0;
              while (1)
              {
                v105 = v96 + 1;
                *((_QWORD *)this + 1) = v96 + 1;
                v106 = *(_BYTE *)(v98 + v96);
                v104 |= (unint64_t)(v106 & 0x7F) << v99;
                if ((v106 & 0x80) == 0)
                  break;
                v99 += 7;
                v96 = v105;
                v62 = v100++ > 8;
                if (v62)
                  goto LABEL_161;
              }
            }
LABEL_165:
            *(v87 - 1) = v104;
          }
LABEL_166:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_166;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v20 = v4 + 1;
      v21 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v4 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015B3D24(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  int *v5;
  int *v6;
  int v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 1u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_12:
      result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
      if ((*(_BYTE *)(v3 + 52) & 2) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) != 0)
    goto LABEL_12;
LABEL_4:
  if ((v4 & 2) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
LABEL_6:
  v6 = *(int **)(v3 + 8);
  v5 = *(int **)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = PB::Writer::writeVarInt(this, v7, 5u);
  }
  return result;
}

double sub_1015B3DDC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BFBC0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void sub_1015B3E18(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1021BFBC0;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

void sub_1015B3EA8(PB::Base *a1)
{
  sub_1015B3E18(a1);
  operator delete();
}

uint64_t sub_1015B3ECC(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1021BFBC0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if ((*(_WORD *)(a2 + 192) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 152);
    *(_WORD *)(a1 + 192) = 1;
    *(_QWORD *)(a1 + 152) = v5;
  }
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x80) != 0)
  {
    v9 = *(_DWORD *)(a2 + 184);
    *(_WORD *)(a1 + 192) |= 0x80u;
    *(_DWORD *)(a1 + 184) = v9;
    v6 = *(_WORD *)(a2 + 192);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v10 = *(_DWORD *)(a2 + 180);
  *(_WORD *)(a1 + 192) |= 0x40u;
  *(_DWORD *)(a1 + 180) = v10;
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v11 = *(_DWORD *)(a2 + 188);
  *(_WORD *)(a1 + 192) |= 0x100u;
  *(_DWORD *)(a1 + 188) = v11;
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 4) == 0)
  {
LABEL_9:
    if ((v6 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v12 = *(_DWORD *)(a2 + 164);
  *(_WORD *)(a1 + 192) |= 4u;
  *(_DWORD *)(a1 + 164) = v12;
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v13 = *(_DWORD *)(a2 + 168);
  *(_WORD *)(a1 + 192) |= 8u;
  *(_DWORD *)(a1 + 168) = v13;
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v14 = *(_DWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) |= 0x20u;
  *(_DWORD *)(a1 + 176) = v14;
  v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x10) == 0)
  {
LABEL_12:
    if ((v6 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_23:
  v15 = *(_DWORD *)(a2 + 172);
  *(_WORD *)(a1 + 192) |= 0x10u;
  *(_DWORD *)(a1 + 172) = v15;
  if ((*(_WORD *)(a2 + 192) & 2) != 0)
  {
LABEL_13:
    v7 = *(_DWORD *)(a2 + 160);
    *(_WORD *)(a1 + 192) |= 2u;
    *(_DWORD *)(a1 + 160) = v7;
  }
LABEL_14:
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    sub_1002A3054((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  }
  return a1;
}

uint64_t sub_1015B40DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  __int16 v18;
  float *v19;
  float *v20;
  float v21;
  __int16 v22;
  float *v23;
  float *v24;
  float v25;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accelDecimated", v7);
  }
  if ((*(_WORD *)(a1 + 192) & 2) != 0)
    PB::TextFormatter::format(this, "accelFrontVariance", *(float *)(a1 + 160));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "accelMean", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "accelNormAutocorr", v13);
  }
  v14 = *(_WORD *)(a1 + 192);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(this, "accelNormMean", *(float *)(a1 + 164));
    v14 = *(_WORD *)(a1 + 192);
  }
  if ((v14 & 8) != 0)
    PB::TextFormatter::format(this, "accelNormVariance", *(float *)(a1 + 168));
  v15 = *(float **)(a1 + 80);
  v16 = *(float **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "accelVariance", v17);
  }
  v18 = *(_WORD *)(a1 + 192);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "currentAngleDelta", *(float *)(a1 + 172));
    v18 = *(_WORD *)(a1 + 192);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(this, "currentMotionState", *(_DWORD *)(a1 + 176));
  if ((*(_WORD *)(a1 + 192) & 0x40) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "lagAtMaxAutocorr", *(_DWORD *)(a1 + 180));
LABEL_19:
  v19 = *(float **)(a1 + 104);
  v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "lastBaseline", v21);
  }
  v22 = *(_WORD *)(a1 + 192);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "maxAutocorr", *(float *)(a1 + 184));
    v22 = *(_WORD *)(a1 + 192);
  }
  if ((v22 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  v23 = *(float **)(a1 + 128);
  v24 = *(float **)(a1 + 136);
  while (v23 != v24)
  {
    v25 = *v23++;
    PB::TextFormatter::format(this, "walkingBaseline", v25);
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
    PB::TextFormatter::format(this, "widthAtMaxAutocorr", *(_DWORD *)(a1 + 188));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015B432C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _DWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  _DWORD *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  _DWORD *v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char *v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  char *v208;
  int v209;
  char *v210;
  int v211;
  char *v212;
  int v213;
  unint64_t v214;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void **v223;
  void **v224;
  void **v225;
  _BYTE v226[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v222 = a1 + 144;
    v224 = (void **)(a1 + 104);
    v225 = (void **)(a1 + 128);
    v223 = (void **)(a1 + 56);
    v220 = a1 + 72;
    v221 = a1 + 120;
    v10 = (void **)(a1 + 80);
    v11 = (void **)(a1 + 32);
    v218 = a1 + 48;
    v219 = a1 + 96;
    v12 = (void **)(a1 + 8);
    v217 = a1 + 24;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v18 = *(_BYTE *)(v13 + v4);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v4 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if ((_DWORD)v25 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 192) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v26);
          v27 = *((_QWORD *)this + 1) + 8;
          goto LABEL_350;
        case 2u:
          if ((_DWORD)v25 != 2)
          {
            v142 = *(char **)(a1 + 16);
            v141 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v142 >= v141)
            {
              v166 = (char *)*v12;
              v167 = (v142 - (_BYTE *)*v12) >> 2;
              v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 62)
LABEL_366:
                sub_100259694();
              v169 = v141 - (_QWORD)v166;
              if (v169 >> 1 > v168)
                v168 = v169 >> 1;
              if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
                v170 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v170 = v168;
              if (v170)
              {
                v171 = (char *)sub_100260634(v217, v170);
                v166 = *(char **)(a1 + 8);
                v142 = *(char **)(a1 + 16);
              }
              else
              {
                v171 = 0;
              }
              v202 = &v171[4 * v167];
              *(_DWORD *)v202 = 0;
              v143 = v202 + 4;
              while (v142 != v166)
              {
                v203 = *((_DWORD *)v142 - 1);
                v142 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v202;
              *(_QWORD *)(a1 + 16) = v143;
              *(_QWORD *)(a1 + 24) = &v171[4 * v170];
              if (v166)
                operator delete(v166);
            }
            else
            {
              *(_DWORD *)v142 = 0;
              v143 = v142 + 4;
            }
            *(_QWORD *)(a1 + 16) = v143;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0)
            return 0;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            v31 = *(char **)(a1 + 16);
            v30 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v12;
              v34 = (v31 - (_BYTE *)*v12) >> 2;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
                goto LABEL_366;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_100260634(v217, v37);
                v33 = *(char **)(a1 + 8);
                v31 = *(char **)(a1 + 16);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[4 * v34];
              *(_DWORD *)v39 = 0;
              v32 = v39 + 4;
              while (v31 != v33)
              {
                v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v39;
              *(_QWORD *)(a1 + 16) = v32;
              *(_QWORD *)(a1 + 24) = &v38[4 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_DWORD *)v31 = 0;
              v32 = v31 + 4;
            }
            *(_QWORD *)(a1 + 16) = v32;
            v41 = *((_QWORD *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v32 - 1) = *(_DWORD *)(*(_QWORD *)this + v41);
            v29 = *((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v28;
          }
          goto LABEL_209;
        case 3u:
          if ((_DWORD)v25 != 2)
          {
            v145 = *(char **)(a1 + 40);
            v144 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v145 >= v144)
            {
              v172 = (char *)*v11;
              v173 = (v145 - (_BYTE *)*v11) >> 2;
              v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 62)
LABEL_361:
                sub_100259694();
              v175 = v144 - (_QWORD)v172;
              if (v175 >> 1 > v174)
                v174 = v175 >> 1;
              if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
                v176 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v176 = v174;
              if (v176)
              {
                v177 = (char *)sub_100260634(v218, v176);
                v172 = *(char **)(a1 + 32);
                v145 = *(char **)(a1 + 40);
              }
              else
              {
                v177 = 0;
              }
              v204 = &v177[4 * v173];
              *(_DWORD *)v204 = 0;
              v143 = v204 + 4;
              while (v145 != v172)
              {
                v205 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v204;
              *(_QWORD *)(a1 + 40) = v143;
              *(_QWORD *)(a1 + 48) = &v177[4 * v176];
              if (v172)
                operator delete(v172);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v143 = v145 + 4;
            }
            *(_QWORD *)(a1 + 40) = v143;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 40);
            v44 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v11;
              v48 = (v45 - (_BYTE *)*v11) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_361;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_100260634(v218, v51);
                v47 = *(char **)(a1 + 32);
                v45 = *(char **)(a1 + 40);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v53;
              *(_QWORD *)(a1 + 40) = v46;
              *(_QWORD *)(a1 + 48) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *(_QWORD *)(a1 + 40) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_209;
        case 4u:
          if ((_DWORD)v25 != 2)
          {
            v147 = *(char **)(a1 + 88);
            v146 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v147 >= v146)
            {
              v178 = (char *)*v10;
              v179 = (v147 - (_BYTE *)*v10) >> 2;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62)
LABEL_362:
                sub_100259694();
              v181 = v146 - (_QWORD)v178;
              if (v181 >> 1 > v180)
                v180 = v181 >> 1;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
                v182 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v182 = v180;
              if (v182)
              {
                v183 = (char *)sub_100260634(v219, v182);
                v178 = *(char **)(a1 + 80);
                v147 = *(char **)(a1 + 88);
              }
              else
              {
                v183 = 0;
              }
              v206 = &v183[4 * v179];
              *(_DWORD *)v206 = 0;
              v143 = v206 + 4;
              while (v147 != v178)
              {
                v207 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v206;
              *(_QWORD *)(a1 + 88) = v143;
              *(_QWORD *)(a1 + 96) = &v183[4 * v182];
              if (v178)
                operator delete(v178);
            }
            else
            {
              *(_DWORD *)v147 = 0;
              v143 = v147 + 4;
            }
            *(_QWORD *)(a1 + 88) = v143;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0)
            return 0;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            v59 = *(char **)(a1 + 88);
            v58 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v10;
              v62 = (v59 - (_BYTE *)*v10) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_362;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_100260634(v219, v65);
                v61 = *(char **)(a1 + 80);
                v59 = *(char **)(a1 + 88);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v67;
              *(_QWORD *)(a1 + 88) = v60;
              *(_QWORD *)(a1 + 96) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *(_QWORD *)(a1 + 88) = v60;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)this + v69);
            v57 = *((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v56;
          }
          goto LABEL_209;
        case 5u:
          if ((_DWORD)v25 != 2)
          {
            v149 = *(char **)(a1 + 64);
            v148 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v149 >= v148)
            {
              v184 = (char *)*v223;
              v185 = (v149 - (_BYTE *)*v223) >> 2;
              v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 62)
LABEL_363:
                sub_100259694();
              v187 = v148 - (_QWORD)v184;
              if (v187 >> 1 > v186)
                v186 = v187 >> 1;
              if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
                v188 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v188 = v186;
              if (v188)
              {
                v189 = (char *)sub_100260634(v220, v188);
                v184 = *(char **)(a1 + 56);
                v149 = *(char **)(a1 + 64);
              }
              else
              {
                v189 = 0;
              }
              v208 = &v189[4 * v185];
              *(_DWORD *)v208 = 0;
              v143 = v208 + 4;
              while (v149 != v184)
              {
                v209 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v208;
              *(_QWORD *)(a1 + 64) = v143;
              *(_QWORD *)(a1 + 72) = &v189[4 * v188];
              if (v184)
                operator delete(v184);
            }
            else
            {
              *(_DWORD *)v149 = 0;
              v143 = v149 + 4;
            }
            *(_QWORD *)(a1 + 64) = v143;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0)
            return 0;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          while (v70 < v71 && !*((_BYTE *)this + 24))
          {
            v73 = *(char **)(a1 + 64);
            v72 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v73 >= v72)
            {
              v75 = (char *)*v223;
              v76 = (v73 - (_BYTE *)*v223) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
                goto LABEL_363;
              v78 = v72 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_100260634(v220, v79);
                v75 = *(char **)(a1 + 56);
                v73 = *(char **)(a1 + 64);
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              v74 = v81 + 4;
              while (v73 != v75)
              {
                v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v81;
              *(_QWORD *)(a1 + 64) = v74;
              *(_QWORD *)(a1 + 72) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v73 = 0;
              v74 = v73 + 4;
            }
            *(_QWORD *)(a1 + 64) = v74;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v74 - 1) = *(_DWORD *)(*(_QWORD *)this + v83);
            v71 = *((_QWORD *)this + 2);
            v70 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v70;
          }
          goto LABEL_209;
        case 6u:
          *(_WORD *)(a1 + 192) |= 0x80u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_349;
        case 7u:
          *(_WORD *)(a1 + 192) |= 0x40u;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_296;
              v88 += 7;
              v85 = v91;
              v19 = v89++ > 8;
            }
            while (!v19);
LABEL_224:
            LODWORD(v90) = 0;
            goto LABEL_296;
          }
          v150 = 0;
          v151 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v152 = v85 + 1;
              v153 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v152;
              v90 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                v85 = v152;
                v19 = v151++ > 8;
                if (v19)
                  goto LABEL_224;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_296:
          *(_DWORD *)(a1 + 180) = v90;
          goto LABEL_351;
        case 8u:
          *(_WORD *)(a1 + 192) |= 0x100u;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_299;
              v96 += 7;
              v93 = v99;
              v19 = v97++ > 8;
            }
            while (!v19);
LABEL_231:
            LODWORD(v98) = 0;
            goto LABEL_299;
          }
          v154 = 0;
          v155 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v156 = v93 + 1;
              v157 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v156;
              v98 |= (unint64_t)(v157 & 0x7F) << v154;
              if (v157 < 0)
              {
                v154 += 7;
                v93 = v156;
                v19 = v155++ > 8;
                if (v19)
                  goto LABEL_231;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_299:
          *(_DWORD *)(a1 + 188) = v98;
          goto LABEL_351;
        case 9u:
          *(_WORD *)(a1 + 192) |= 4u;
          v101 = *((_QWORD *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v101);
          goto LABEL_349;
        case 0xAu:
          *(_WORD *)(a1 + 192) |= 8u;
          v102 = *((_QWORD *)this + 1);
          if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v102);
          goto LABEL_349;
        case 0xBu:
          *(_WORD *)(a1 + 192) |= 0x20u;
          v103 = *((_QWORD *)this + 1);
          v104 = *((_QWORD *)this + 2);
          v105 = *(_QWORD *)this;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            v106 = 0;
            v107 = 0;
            v108 = 0;
            do
            {
              v109 = v103 + 1;
              *((_QWORD *)this + 1) = v103 + 1;
              v110 = *(_BYTE *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0)
                goto LABEL_302;
              v106 += 7;
              v103 = v109;
              v19 = v107++ > 8;
            }
            while (!v19);
LABEL_238:
            LODWORD(v108) = 0;
            goto LABEL_302;
          }
          v158 = 0;
          v159 = 0;
          v108 = 0;
          if (v104 <= v103)
            v104 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v160 = v103 + 1;
              v161 = *(_BYTE *)(v105 + v103);
              *((_QWORD *)this + 1) = v160;
              v108 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                v103 = v160;
                v19 = v159++ > 8;
                if (v19)
                  goto LABEL_238;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v108) = 0;
            }
            break;
          }
LABEL_302:
          *(_DWORD *)(a1 + 176) = v108;
          goto LABEL_351;
        case 0xCu:
          *(_WORD *)(a1 + 192) |= 0x10u;
          v111 = *((_QWORD *)this + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v111);
          goto LABEL_349;
        case 0xDu:
          *(_WORD *)(a1 + 192) |= 2u;
          v112 = *((_QWORD *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v112);
          goto LABEL_349;
        case 0xEu:
          if ((_DWORD)v25 != 2)
          {
            v163 = *(char **)(a1 + 112);
            v162 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v163 >= v162)
            {
              v190 = (char *)*v224;
              v191 = (v163 - (_BYTE *)*v224) >> 2;
              v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62)
LABEL_364:
                sub_100259694();
              v193 = v162 - (_QWORD)v190;
              if (v193 >> 1 > v192)
                v192 = v193 >> 1;
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                v194 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v194 = v192;
              if (v194)
              {
                v195 = (char *)sub_100260634(v221, v194);
                v190 = *(char **)(a1 + 104);
                v163 = *(char **)(a1 + 112);
              }
              else
              {
                v195 = 0;
              }
              v210 = &v195[4 * v191];
              *(_DWORD *)v210 = 0;
              v143 = v210 + 4;
              while (v163 != v190)
              {
                v211 = *((_DWORD *)v163 - 1);
                v163 -= 4;
                *((_DWORD *)v210 - 1) = v211;
                v210 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v210;
              *(_QWORD *)(a1 + 112) = v143;
              *(_QWORD *)(a1 + 120) = &v195[4 * v194];
              if (v190)
                operator delete(v190);
            }
            else
            {
              *(_DWORD *)v163 = 0;
              v143 = v163 + 4;
            }
            *(_QWORD *)(a1 + 112) = v143;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0)
            return 0;
          v113 = *((_QWORD *)this + 1);
          v114 = *((_QWORD *)this + 2);
          while (v113 < v114 && !*((_BYTE *)this + 24))
          {
            v116 = *(char **)(a1 + 112);
            v115 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v116 >= v115)
            {
              v118 = (char *)*v224;
              v119 = (v116 - (_BYTE *)*v224) >> 2;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
                goto LABEL_364;
              v121 = v115 - (_QWORD)v118;
              if (v121 >> 1 > v120)
                v120 = v121 >> 1;
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                v122 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v122 = v120;
              if (v122)
              {
                v123 = (char *)sub_100260634(v221, v122);
                v118 = *(char **)(a1 + 104);
                v116 = *(char **)(a1 + 112);
              }
              else
              {
                v123 = 0;
              }
              v124 = &v123[4 * v119];
              *(_DWORD *)v124 = 0;
              v117 = v124 + 4;
              while (v116 != v118)
              {
                v125 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v124;
              *(_QWORD *)(a1 + 112) = v117;
              *(_QWORD *)(a1 + 120) = &v123[4 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_DWORD *)v116 = 0;
              v117 = v116 + 4;
            }
            *(_QWORD *)(a1 + 112) = v117;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v117 - 1) = *(_DWORD *)(*(_QWORD *)this + v126);
            v114 = *((_QWORD *)this + 2);
            v113 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v113;
          }
          goto LABEL_209;
        case 0xFu:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v226, v25, a4) & 1) != 0)
              return 0;
            v127 = *((_QWORD *)this + 1);
            v128 = *((_QWORD *)this + 2);
            while (v127 < v128 && !*((_BYTE *)this + 24))
            {
              v130 = *(char **)(a1 + 136);
              v129 = *(_QWORD *)(a1 + 144);
              if ((unint64_t)v130 >= v129)
              {
                v132 = (char *)*v225;
                v133 = (v130 - (_BYTE *)*v225) >> 2;
                v134 = v133 + 1;
                if ((unint64_t)(v133 + 1) >> 62)
                  goto LABEL_365;
                v135 = v129 - (_QWORD)v132;
                if (v135 >> 1 > v134)
                  v134 = v135 >> 1;
                if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                  v136 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v136 = v134;
                if (v136)
                {
                  v137 = (char *)sub_100260634(v222, v136);
                  v132 = *(char **)(a1 + 128);
                  v130 = *(char **)(a1 + 136);
                }
                else
                {
                  v137 = 0;
                }
                v138 = &v137[4 * v133];
                *(_DWORD *)v138 = 0;
                v131 = v138 + 4;
                while (v130 != v132)
                {
                  v139 = *((_DWORD *)v130 - 1);
                  v130 -= 4;
                  *((_DWORD *)v138 - 1) = v139;
                  v138 -= 4;
                }
                *(_QWORD *)(a1 + 128) = v138;
                *(_QWORD *)(a1 + 136) = v131;
                *(_QWORD *)(a1 + 144) = &v137[4 * v136];
                if (v132)
                  operator delete(v132);
              }
              else
              {
                *(_DWORD *)v130 = 0;
                v131 = v130 + 4;
              }
              *(_QWORD *)(a1 + 136) = v131;
              v140 = *((_QWORD *)this + 1);
              if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)this + 2))
              {
LABEL_208:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v131 - 1) = *(_DWORD *)(*(_QWORD *)this + v140);
              v128 = *((_QWORD *)this + 2);
              v127 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v127;
            }
LABEL_209:
            PB::Reader::recallMark(this, v226);
          }
          else
          {
            v165 = *(char **)(a1 + 136);
            v164 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v165 >= v164)
            {
              v196 = (char *)*v225;
              v197 = (v165 - (_BYTE *)*v225) >> 2;
              v198 = v197 + 1;
              if ((unint64_t)(v197 + 1) >> 62)
LABEL_365:
                sub_100259694();
              v199 = v164 - (_QWORD)v196;
              if (v199 >> 1 > v198)
                v198 = v199 >> 1;
              if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL)
                v200 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v200 = v198;
              if (v200)
              {
                v201 = (char *)sub_100260634(v222, v200);
                v196 = *(char **)(a1 + 128);
                v165 = *(char **)(a1 + 136);
              }
              else
              {
                v201 = 0;
              }
              v212 = &v201[4 * v197];
              *(_DWORD *)v212 = 0;
              v143 = v212 + 4;
              while (v165 != v196)
              {
                v213 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v212 - 1) = v213;
                v212 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v212;
              *(_QWORD *)(a1 + 136) = v143;
              *(_QWORD *)(a1 + 144) = &v201[4 * v200];
              if (v196)
                operator delete(v196);
            }
            else
            {
              *(_DWORD *)v165 = 0;
              v143 = v165 + 4;
            }
            *(_QWORD *)(a1 + 136) = v143;
LABEL_345:
            v214 = *((_QWORD *)this + 1);
            if (v214 <= 0xFFFFFFFFFFFFFFFBLL && v214 + 4 <= *((_QWORD *)this + 2))
            {
              *(v143 - 1) = *(_DWORD *)(*(_QWORD *)this + v214);
LABEL_349:
              v27 = *((_QWORD *)this + 1) + 4;
LABEL_350:
              *((_QWORD *)this + 1) = v27;
            }
            else
            {
LABEL_347:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_351:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v16 >> 3, v16 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_351;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v22 = v4 + 1;
      v23 = *(_BYTE *)(v13 + v4);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015B5364(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  v3 = result;
  if ((*(_WORD *)(result + 192) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 152), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(float **)(v3 + 80);
  v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v13 = *(float **)(v3 + 56);
  v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15, 5u);
  }
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 184), 6u);
    v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
  }
  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 7u);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 8u);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 164), 9u);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 168), 0xAu);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0)
      goto LABEL_22;
LABEL_37:
    result = PB::Writer::write(this, *(float *)(v3 + 172), 0xCu);
    if ((*(_WORD *)(v3 + 192) & 2) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0xBu);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0)
    goto LABEL_37;
LABEL_22:
  if ((v16 & 2) != 0)
LABEL_23:
    result = PB::Writer::write(this, *(float *)(v3 + 160), 0xDu);
LABEL_24:
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19, 0xEu);
  }
  v21 = *(float **)(v3 + 128);
  v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    v22 = *v21++;
    result = PB::Writer::write(this, v22, 0xFu);
  }
  return result;
}

uint64_t sub_1015B5544(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFBF8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1015B5560(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015B5584(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_1021BFBF8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_1015B55F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "eventTag", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B5688(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 20) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015B5A08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  return result;
}

uint64_t sub_1015B5A80(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFC30;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1015B5A98(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015B5ABC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021BFC30;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 40) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015B5B48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pressure", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B5BF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015B5E54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  return result;
}

uint64_t sub_1015B5EE8(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFC68;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1015B5F00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015B5F24(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;

  *(_QWORD *)result = &off_1021BFC68;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    v3 = 16;
    *(_WORD *)(result + 64) = 16;
    *(_DWORD *)(result + 32) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 56) = v5;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 28) = v6;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 24) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 44) = v8;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 16) = v9;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v10;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v12;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 40) = v13;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_26:
    v15 = *(_BYTE *)(a2 + 60);
    *(_WORD *)(result + 64) = v3 | 0x800;
    *(_BYTE *)(result + 60) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 36) = v14;
  if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_1015B6090(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "accelBiasZ", *(float *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "compensate", *(_BYTE *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "inertialCompOffset", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inertialCompPressure", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "kfPressure", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rawPressure", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "rawPressureTemperature", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 16));
    if ((*(_WORD *)(a1 + 64) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "rawPressureTimestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x400) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B6240(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 64) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_89:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 64) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_94:
              *(_QWORD *)(a1 + 8) = v31;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_84:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 60) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015B67D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 32), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(result + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCu);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  if ((*(_WORD *)(v3 + 64) & 0x800) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCu);
  return result;
}

uint64_t sub_1015B6944(uint64_t result)
{
  *(_QWORD *)result = off_1021BFCA0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1015B6958(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BFCA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015B6998(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BFCA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015B69EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = off_1021BFCA0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) |= 1u;
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1015B6A8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "lastConvergenceTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B6AF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

double sub_1015B6D54(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C08E0;
  *(_DWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_1015B6D90(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015B6DE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFCD8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1015B6DFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015B6E20(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  char v5;

  *(_QWORD *)a1 = &off_1021BFCD8;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 44) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 44) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 8);
      *(_BYTE *)(a1 + 44) = v3 | 1;
      *(double *)(a1 + 8) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *(_BYTE *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_BYTE *)(a1 + 40) = v5;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015B6EC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dThetaNorm", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastCorrespondenceTimestamp", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "state", *(_BYTE *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B6F98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_37;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_37;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_37;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 40) = v22;
          break;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_41:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_37:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015B7238(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 4u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  return result;
}

_QWORD *sub_1015B72E8(_QWORD *result)
{
  *result = off_1021BFD10;
  result[1] = 0;
  return result;
}

void sub_1015B72F8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BFD10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015B7338(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BFD10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015B738C(_QWORD *result, uint64_t a2)
{
  *result = off_1021BFD10;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015B7408(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B7458(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015B7644(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

double sub_1015B7660(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BFD48;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1015B768C(PB::Base *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021BFD48;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_1015B76F4(PB::Base *a1)
{
  sub_1015B768C(a1);
  operator delete();
}

uint64_t sub_1015B7718(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  char v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  *(_QWORD *)a1 = &off_1021BFD48;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(_QWORD *)(a2 + 72))
    operator new();
  if (a1 != a2)
    sub_1002A3054((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 0x40) != 0)
  {
    v10 = *(_DWORD *)(a2 + 96);
    *(_WORD *)(a1 + 116) |= 0x40u;
    *(_DWORD *)(a1 + 96) = v10;
    v4 = *(_WORD *)(a2 + 116);
    if ((v4 & 0x20) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_7;
  }
  v11 = *(_DWORD *)(a2 + 92);
  *(_WORD *)(a1 + 116) |= 0x20u;
  *(_DWORD *)(a1 + 92) = v11;
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 116) |= 0x10u;
  *(_DWORD *)(a1 + 88) = v12;
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 116) |= 0x100u;
  *(_DWORD *)(a1 + 104) = v13;
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 116) |= 2u;
  *(_QWORD *)(a1 + 64) = v14;
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 108);
  *(_WORD *)(a1 + 116) |= 0x200u;
  *(_DWORD *)(a1 + 108) = v15;
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v16 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 116) |= 1u;
  *(_QWORD *)(a1 + 56) = v16;
  v4 = *(_WORD *)(a2 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_29:
  v17 = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 116) |= 8u;
  *(_DWORD *)(a1 + 84) = v17;
  if ((*(_WORD *)(a2 + 116) & 0x80) != 0)
  {
LABEL_14:
    v5 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 116) |= 0x80u;
    *(_DWORD *)(a1 + 100) = v5;
  }
LABEL_15:
  if (a1 != a2)
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  v6 = *(_WORD *)(a2 + 116);
  if ((v6 & 4) != 0)
  {
    v7 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(a1 + 116) |= 4u;
    *(_DWORD *)(a1 + 80) = v7;
    v6 = *(_WORD *)(a2 + 116);
  }
  if ((v6 & 0x400) != 0)
  {
    v8 = *(_BYTE *)(a2 + 112);
    *(_WORD *)(a1 + 116) |= 0x400u;
    *(_BYTE *)(a1 + 112) = v8;
  }
  return a1;
}

uint64_t sub_1015B7950(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "arrivalTimestamp", *(float *)(a1 + 84));
  if ((*(_WORD *)(a1 + 116) & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "btcTimestamp", *(_QWORD *)(a1 + 56));
LABEL_5:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "filteredAcceleration", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "gyroBias", v11);
  }
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isInEar", *(_BYTE *)(a1 + 112));
    v12 = *(_WORD *)(a1 + 116);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_27;
    }
  }
  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 88));
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quiescentMode", *(_DWORD *)(a1 + 92));
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 96));
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "sampleLatency", *(float *)(a1 + 100));
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "sensorTimeUponReceival", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 104));
LABEL_17:
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "super");
  if ((*(_WORD *)(a1 + 116) & 0x200) != 0)
    PB::TextFormatter::format(this, "timeSyncStatus", *(_DWORD *)(a1 + 108));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015B7B64(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  _DWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  BOOL v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  char *v136;
  char v137;
  unsigned int v138;
  unint64_t v139;
  char v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  int v154;
  char *v155;
  int v156;
  unint64_t v157;
  _BYTE v160[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v113 = *(char **)(a1 + 16);
            v112 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v113 >= v112)
            {
              v141 = (char *)*v12;
              v142 = (v113 - (_BYTE *)*v12) >> 2;
              v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 62)
LABEL_251:
                sub_100259694();
              v144 = v112 - (_QWORD)v141;
              if (v144 >> 1 > v143)
                v143 = v144 >> 1;
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                v145 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v145 = v143;
              if (v145)
              {
                v146 = (char *)sub_100260634(v13, v145);
                v141 = *(char **)(a1 + 8);
                v113 = *(char **)(a1 + 16);
              }
              else
              {
                v146 = 0;
              }
              v153 = &v146[4 * v142];
              *(_DWORD *)v153 = 0;
              v114 = v153 + 4;
              while (v113 != v141)
              {
                v154 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v153 - 1) = v154;
                v153 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v153;
              *(_QWORD *)(a1 + 16) = v114;
              *(_QWORD *)(a1 + 24) = &v146[4 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *(_DWORD *)v113 = 0;
              v114 = v113 + 4;
            }
            *(_QWORD *)(a1 + 16) = v114;
            goto LABEL_234;
          }
          if ((PB::Reader::placeMark(this, v160, v26, a4) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v12;
              v33 = (v30 - (_BYTE *)*v12) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_251;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100260634(v13, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_178;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_179;
        case 3u:
          *(_WORD *)(a1 + 116) |= 0x40u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_236;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_238;
        case 4u:
          *(_WORD *)(a1 + 116) |= 0x20u;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          v44 = *(_QWORD *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v42 + 1;
              *((_QWORD *)this + 1) = v42 + 1;
              v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0)
                goto LABEL_204;
              v45 += 7;
              v42 = v48;
              v20 = v46++ > 8;
            }
            while (!v20);
LABEL_138:
            LODWORD(v47) = 0;
            goto LABEL_204;
          }
          v115 = 0;
          v116 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v42 + 1;
              v118 = *(_BYTE *)(v44 + v42);
              *((_QWORD *)this + 1) = v117;
              v47 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v42 = v117;
                v20 = v116++ > 8;
                if (v20)
                  goto LABEL_138;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v47) = 0;
            }
            break;
          }
LABEL_204:
          *(_DWORD *)(a1 + 92) = v47;
          goto LABEL_240;
        case 5u:
          *(_WORD *)(a1 + 116) |= 0x10u;
          v50 = *((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          v52 = *(_QWORD *)this;
          if (v50 <= 0xFFFFFFFFFFFFFFF5 && v50 + 10 <= v51)
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v56 = v50 + 1;
              *((_QWORD *)this + 1) = v50 + 1;
              v57 = *(_BYTE *)(v52 + v50);
              v55 |= (unint64_t)(v57 & 0x7F) << v53;
              if ((v57 & 0x80) == 0)
                goto LABEL_207;
              v53 += 7;
              v50 = v56;
              v20 = v54++ > 8;
            }
            while (!v20);
LABEL_145:
            LODWORD(v55) = 0;
            goto LABEL_207;
          }
          v119 = 0;
          v120 = 0;
          v55 = 0;
          if (v51 <= v50)
            v51 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v51 == v50)
            {
              LODWORD(v55) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v121 = v50 + 1;
              v122 = *(_BYTE *)(v52 + v50);
              *((_QWORD *)this + 1) = v121;
              v55 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v50 = v121;
                v20 = v120++ > 8;
                if (v20)
                  goto LABEL_145;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v55) = 0;
            }
            break;
          }
LABEL_207:
          *(_DWORD *)(a1 + 88) = v55;
          goto LABEL_240;
        case 6u:
          *(_WORD *)(a1 + 116) |= 0x100u;
          v58 = *((_QWORD *)this + 1);
          v59 = *((_QWORD *)this + 2);
          v60 = *(_QWORD *)this;
          if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
          {
            v61 = 0;
            v62 = 0;
            v63 = 0;
            do
            {
              v64 = v58 + 1;
              *((_QWORD *)this + 1) = v58 + 1;
              v65 = *(_BYTE *)(v60 + v58);
              v63 |= (unint64_t)(v65 & 0x7F) << v61;
              if ((v65 & 0x80) == 0)
                goto LABEL_210;
              v61 += 7;
              v58 = v64;
              v20 = v62++ > 8;
            }
            while (!v20);
LABEL_152:
            LODWORD(v63) = 0;
            goto LABEL_210;
          }
          v123 = 0;
          v124 = 0;
          v63 = 0;
          if (v59 <= v58)
            v59 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v59 == v58)
            {
              LODWORD(v63) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v125 = v58 + 1;
              v126 = *(_BYTE *)(v60 + v58);
              *((_QWORD *)this + 1) = v125;
              v63 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v58 = v125;
                v20 = v124++ > 8;
                if (v20)
                  goto LABEL_152;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v63) = 0;
            }
            break;
          }
LABEL_210:
          *(_DWORD *)(a1 + 104) = v63;
          goto LABEL_240;
        case 7u:
          *(_WORD *)(a1 + 116) |= 2u;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)this + 2))
            goto LABEL_236;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v66);
          v67 = *((_QWORD *)this + 1) + 8;
          goto LABEL_239;
        case 8u:
          *(_WORD *)(a1 + 116) |= 0x200u;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          v70 = *(_QWORD *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)this + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_213;
              v71 += 7;
              v68 = v74;
              v20 = v72++ > 8;
            }
            while (!v20);
LABEL_159:
            LODWORD(v73) = 0;
            goto LABEL_213;
          }
          v127 = 0;
          v128 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v129 = v68 + 1;
              v130 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)this + 1) = v129;
              v73 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v68 = v129;
                v20 = v128++ > 8;
                if (v20)
                  goto LABEL_159;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_213:
          *(_DWORD *)(a1 + 108) = v73;
          goto LABEL_240;
        case 9u:
          *(_WORD *)(a1 + 116) |= 1u;
          v76 = *((_QWORD *)this + 1);
          v77 = *((_QWORD *)this + 2);
          v78 = *(_QWORD *)this;
          if (v76 <= 0xFFFFFFFFFFFFFFF5 && v76 + 10 <= v77)
          {
            v79 = 0;
            v80 = 0;
            v81 = 0;
            do
            {
              v82 = v76 + 1;
              *((_QWORD *)this + 1) = v76 + 1;
              v83 = *(_BYTE *)(v78 + v76);
              v81 |= (unint64_t)(v83 & 0x7F) << v79;
              if ((v83 & 0x80) == 0)
                goto LABEL_216;
              v79 += 7;
              v76 = v82;
              v20 = v80++ > 8;
            }
            while (!v20);
LABEL_166:
            v81 = 0;
            goto LABEL_216;
          }
          v131 = 0;
          v132 = 0;
          v81 = 0;
          if (v77 <= v76)
            v77 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v77 == v76)
            {
              v81 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v133 = v76 + 1;
              v134 = *(_BYTE *)(v78 + v76);
              *((_QWORD *)this + 1) = v133;
              v81 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v76 = v133;
                v20 = v132++ > 8;
                if (v20)
                  goto LABEL_166;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v81 = 0;
            }
            break;
          }
LABEL_216:
          *(_QWORD *)(a1 + 56) = v81;
          goto LABEL_240;
        case 0xAu:
          *(_WORD *)(a1 + 116) |= 8u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_236;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_238;
        case 0xBu:
          *(_WORD *)(a1 + 116) |= 0x80u;
          v85 = *((_QWORD *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
            goto LABEL_236;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v85);
          goto LABEL_238;
        case 0xCu:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v160, v26, a4) & 1) != 0)
              return 0;
            v86 = *((_QWORD *)this + 1);
            v87 = *((_QWORD *)this + 2);
            while (v86 < v87 && !*((_BYTE *)this + 24))
            {
              v89 = *(char **)(a1 + 40);
              v88 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v89 >= v88)
              {
                v91 = (char *)*v10;
                v92 = (v89 - (_BYTE *)*v10) >> 2;
                v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 62)
                  goto LABEL_250;
                v94 = v88 - (_QWORD)v91;
                if (v94 >> 1 > v93)
                  v93 = v94 >> 1;
                if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                  v95 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v95 = v93;
                if (v95)
                {
                  v96 = (char *)sub_100260634(v11, v95);
                  v91 = *(char **)(a1 + 32);
                  v89 = *(char **)(a1 + 40);
                }
                else
                {
                  v96 = 0;
                }
                v97 = &v96[4 * v92];
                *(_DWORD *)v97 = 0;
                v90 = v97 + 4;
                while (v89 != v91)
                {
                  v98 = *((_DWORD *)v89 - 1);
                  v89 -= 4;
                  *((_DWORD *)v97 - 1) = v98;
                  v97 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v97;
                *(_QWORD *)(a1 + 40) = v90;
                *(_QWORD *)(a1 + 48) = &v96[4 * v95];
                if (v91)
                  operator delete(v91);
              }
              else
              {
                *(_DWORD *)v89 = 0;
                v90 = v89 + 4;
              }
              *(_QWORD *)(a1 + 40) = v90;
              v99 = *((_QWORD *)this + 1);
              if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              {
LABEL_178:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v90 - 1) = *(_DWORD *)(*(_QWORD *)this + v99);
              v87 = *((_QWORD *)this + 2);
              v86 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v86;
            }
LABEL_179:
            PB::Reader::recallMark(this, v160);
          }
          else
          {
            v136 = *(char **)(a1 + 40);
            v135 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v136 >= v135)
            {
              v147 = (char *)*v10;
              v148 = (v136 - (_BYTE *)*v10) >> 2;
              v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62)
LABEL_250:
                sub_100259694();
              v150 = v135 - (_QWORD)v147;
              if (v150 >> 1 > v149)
                v149 = v150 >> 1;
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
                v151 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v151 = v149;
              if (v151)
              {
                v152 = (char *)sub_100260634(v11, v151);
                v147 = *(char **)(a1 + 32);
                v136 = *(char **)(a1 + 40);
              }
              else
              {
                v152 = 0;
              }
              v155 = &v152[4 * v148];
              *(_DWORD *)v155 = 0;
              v114 = v155 + 4;
              while (v136 != v147)
              {
                v156 = *((_DWORD *)v136 - 1);
                v136 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v155;
              *(_QWORD *)(a1 + 40) = v114;
              *(_QWORD *)(a1 + 48) = &v152[4 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *(_DWORD *)v136 = 0;
              v114 = v136 + 4;
            }
            *(_QWORD *)(a1 + 40) = v114;
LABEL_234:
            v157 = *((_QWORD *)this + 1);
            if (v157 <= 0xFFFFFFFFFFFFFFFBLL && v157 + 4 <= *((_QWORD *)this + 2))
            {
              *(v114 - 1) = *(_DWORD *)(*(_QWORD *)this + v157);
LABEL_238:
              v67 = *((_QWORD *)this + 1) + 4;
LABEL_239:
              *((_QWORD *)this + 1) = v67;
            }
            else
            {
LABEL_236:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_240:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 0xDu:
          *(_WORD *)(a1 + 116) |= 4u;
          v100 = *((_QWORD *)this + 1);
          v101 = *((_QWORD *)this + 2);
          v102 = *(_QWORD *)this;
          if (v100 <= 0xFFFFFFFFFFFFFFF5 && v100 + 10 <= v101)
          {
            v103 = 0;
            v104 = 0;
            v105 = 0;
            do
            {
              v106 = v100 + 1;
              *((_QWORD *)this + 1) = v100 + 1;
              v107 = *(_BYTE *)(v102 + v100);
              v105 |= (unint64_t)(v107 & 0x7F) << v103;
              if ((v107 & 0x80) == 0)
                goto LABEL_219;
              v103 += 7;
              v100 = v106;
              v20 = v104++ > 8;
            }
            while (!v20);
LABEL_175:
            LODWORD(v105) = 0;
            goto LABEL_219;
          }
          v137 = 0;
          v138 = 0;
          v105 = 0;
          if (v101 <= v100)
            v101 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v101 == v100)
            {
              LODWORD(v105) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v139 = v100 + 1;
              v140 = *(_BYTE *)(v102 + v100);
              *((_QWORD *)this + 1) = v139;
              v105 |= (unint64_t)(v140 & 0x7F) << v137;
              if (v140 < 0)
              {
                v137 += 7;
                v100 = v139;
                v20 = v138++ > 8;
                if (v20)
                  goto LABEL_175;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v105) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 80) = v105;
          goto LABEL_240;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 0x400u;
          v108 = *((_QWORD *)this + 1);
          if (v108 >= *((_QWORD *)this + 2))
          {
            v111 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v109 = v108 + 1;
            v110 = *(unsigned __int8 *)(*(_QWORD *)this + v108);
            *((_QWORD *)this + 1) = v109;
            v111 = v110 != 0;
          }
          *(_BYTE *)(a1 + 112) = v111;
          goto LABEL_240;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_240;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

double sub_1015B87D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021BFD80;
  *(_DWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_1015B8808(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;

  v3 = result;
  v4 = *(const PB::Base **)(result + 72);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 2u);
  }
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
    v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 4u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 5u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 6u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 8u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0)
      goto LABEL_14;
LABEL_30:
    result = PB::Writer::write(this, *(float *)(v3 + 84), 0xAu);
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 9u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0)
    goto LABEL_30;
LABEL_14:
  if ((v8 & 0x80) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 100), 0xBu);
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    result = PB::Writer::write(this, v11, 0xCu);
  }
  v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xDu);
    v12 = *(_WORD *)(v3 + 116);
  }
  if ((v12 & 0x400) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 112), 0xEu);
  return result;
}

uint64_t sub_1015B89BC(uint64_t result)
{
  if (!*(_QWORD *)(result + 72))
    operator new();
  return result;
}

void sub_1015B8A50(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1021BFD80;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

void sub_1015B8AD0(PB::Base *a1)
{
  sub_1015B8A50(a1);
  operator delete();
}

uint64_t sub_1015B8AF4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)a1 = &off_1021BFD80;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  if ((*(_BYTE *)(a2 + 152) & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = 2;
    *(_QWORD *)(a1 + 136) = v6;
  }
  if (a1 != a2)
  {
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  v7 = *(_BYTE *)(a2 + 152);
  if ((v7 & 8) != 0)
  {
    v8 = *(_DWORD *)(a2 + 148);
    *(_BYTE *)(a1 + 152) |= 8u;
    *(_DWORD *)(a1 + 148) = v8;
    v7 = *(_BYTE *)(a2 + 152);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 152) |= 1u;
    *(_QWORD *)(a1 + 128) = v9;
  }
  if (a1 != a2)
    sub_1002A3054((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  if ((*(_BYTE *)(a2 + 152) & 4) != 0)
  {
    v10 = *(_DWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) |= 4u;
    *(_DWORD *)(a1 + 144) = v10;
  }
  return a1;
}

uint64_t sub_1015B8C3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  char v17;
  float *v18;
  float *v19;
  float v20;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "biasCovariance", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "quaternion", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "rotationRate", v16);
  }
  v17 = *(_BYTE *)(a1 + 152);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime", *(_QWORD *)(a1 + 128));
    v17 = *(_BYTE *)(a1 + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a1 + 152) & 4) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 144));
  v17 = *(_BYTE *)(a1 + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_19:
  PB::TextFormatter::format(this, "statusDeprecated", *(_DWORD *)(a1 + 148));
  if ((*(_BYTE *)(a1 + 152) & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
LABEL_14:
  v18 = *(float **)(a1 + 104);
  v19 = *(float **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "userAcceleration", v20);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015B8DD8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  _DWORD *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  char *v124;
  _DWORD *v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  char *v129;
  unint64_t v130;
  char *v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  char *v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  int v177;
  char *v178;
  int v179;
  char *v180;
  int v181;
  char *v182;
  int v183;
  char *v184;
  int v185;
  unint64_t v186;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  _BYTE v195[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v193 = a1 + 120;
    v194 = (void **)(a1 + 104);
    v10 = (void **)(a1 + 8);
    v11 = (void **)(a1 + 32);
    v191 = a1 + 48;
    v192 = a1 + 24;
    v12 = (void **)(a1 + 80);
    v13 = (void **)(a1 + 56);
    v189 = a1 + 72;
    v190 = a1 + 96;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 152) |= 2u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_291;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_293;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v124 = *(char **)(a1 + 64);
            v123 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v124 >= v123)
            {
              v146 = (char *)*v13;
              v147 = (v124 - (_BYTE *)*v13) >> 2;
              v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 62)
LABEL_304:
                sub_100259694();
              v149 = v123 - (_QWORD)v146;
              if (v149 >> 1 > v148)
                v148 = v149 >> 1;
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
                v150 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v150 = v148;
              if (v150)
              {
                v151 = (char *)sub_100260634(v189, v150);
                v146 = *(char **)(a1 + 56);
                v124 = *(char **)(a1 + 64);
              }
              else
              {
                v151 = 0;
              }
              v176 = &v151[4 * v147];
              *(_DWORD *)v176 = 0;
              v125 = v176 + 4;
              while (v124 != v146)
              {
                v177 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v176;
              *(_QWORD *)(a1 + 64) = v125;
              *(_QWORD *)(a1 + 72) = &v151[4 * v150];
              if (v146)
                operator delete(v146);
            }
            else
            {
              *(_DWORD *)v124 = 0;
              v125 = v124 + 4;
            }
            *(_QWORD *)(a1 + 64) = v125;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 64);
            v31 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v13;
              v35 = (v32 - (_BYTE *)*v13) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_304;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v189, v38);
                v34 = *(char **)(a1 + 56);
                v32 = *(char **)(a1 + 64);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v40;
              *(_QWORD *)(a1 + 64) = v33;
              *(_QWORD *)(a1 + 72) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 64) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_170;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v127 = *(char **)(a1 + 88);
            v126 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v127 >= v126)
            {
              v152 = (char *)*v12;
              v153 = (v127 - (_BYTE *)*v12) >> 2;
              v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62)
LABEL_305:
                sub_100259694();
              v155 = v126 - (_QWORD)v152;
              if (v155 >> 1 > v154)
                v154 = v155 >> 1;
              if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
                v156 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v156 = v154;
              if (v156)
              {
                v157 = (char *)sub_100260634(v190, v156);
                v152 = *(char **)(a1 + 80);
                v127 = *(char **)(a1 + 88);
              }
              else
              {
                v157 = 0;
              }
              v178 = &v157[4 * v153];
              *(_DWORD *)v178 = 0;
              v125 = v178 + 4;
              while (v127 != v152)
              {
                v179 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v178;
              *(_QWORD *)(a1 + 88) = v125;
              *(_QWORD *)(a1 + 96) = &v157[4 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *(_DWORD *)v127 = 0;
              v125 = v127 + 4;
            }
            *(_QWORD *)(a1 + 88) = v125;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 88);
            v45 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_305;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100260634(v190, v52);
                v48 = *(char **)(a1 + 80);
                v46 = *(char **)(a1 + 88);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v54;
              *(_QWORD *)(a1 + 88) = v47;
              *(_QWORD *)(a1 + 96) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 88) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_170;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v129 = *(char **)(a1 + 40);
            v128 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v129 >= v128)
            {
              v158 = (char *)*v11;
              v159 = (v129 - (_BYTE *)*v11) >> 2;
              v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 62)
LABEL_306:
                sub_100259694();
              v161 = v128 - (_QWORD)v158;
              if (v161 >> 1 > v160)
                v160 = v161 >> 1;
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
                v162 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v162 = v160;
              if (v162)
              {
                v163 = (char *)sub_100260634(v191, v162);
                v158 = *(char **)(a1 + 32);
                v129 = *(char **)(a1 + 40);
              }
              else
              {
                v163 = 0;
              }
              v180 = &v163[4 * v159];
              *(_DWORD *)v180 = 0;
              v125 = v180 + 4;
              while (v129 != v158)
              {
                v181 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v180;
              *(_QWORD *)(a1 + 40) = v125;
              *(_QWORD *)(a1 + 48) = &v163[4 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *(_DWORD *)v129 = 0;
              v125 = v129 + 4;
            }
            *(_QWORD *)(a1 + 40) = v125;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0)
            return 0;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            v60 = *(char **)(a1 + 40);
            v59 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v60 >= v59)
            {
              v62 = (char *)*v11;
              v63 = (v60 - (_BYTE *)*v11) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                goto LABEL_306;
              v65 = v59 - (_QWORD)v62;
              if (v65 >> 1 > v64)
                v64 = v65 >> 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                v66 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)sub_100260634(v191, v66);
                v62 = *(char **)(a1 + 32);
                v60 = *(char **)(a1 + 40);
              }
              else
              {
                v67 = 0;
              }
              v68 = &v67[4 * v63];
              *(_DWORD *)v68 = 0;
              v61 = v68 + 4;
              while (v60 != v62)
              {
                v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v68;
              *(_QWORD *)(a1 + 40) = v61;
              *(_QWORD *)(a1 + 48) = &v67[4 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_DWORD *)v60 = 0;
              v61 = v60 + 4;
            }
            *(_QWORD *)(a1 + 40) = v61;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
            v58 = *((_QWORD *)this + 2);
            v57 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v57;
          }
          goto LABEL_170;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v131 = *(char **)(a1 + 16);
            v130 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v131 >= v130)
            {
              v164 = (char *)*v10;
              v165 = (v131 - (_BYTE *)*v10) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
LABEL_307:
                sub_100259694();
              v167 = v130 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v169 = (char *)sub_100260634(v192, v168);
                v164 = *(char **)(a1 + 8);
                v131 = *(char **)(a1 + 16);
              }
              else
              {
                v169 = 0;
              }
              v182 = &v169[4 * v165];
              *(_DWORD *)v182 = 0;
              v125 = v182 + 4;
              while (v131 != v164)
              {
                v183 = *((_DWORD *)v131 - 1);
                v131 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v182;
              *(_QWORD *)(a1 + 16) = v125;
              *(_QWORD *)(a1 + 24) = &v169[4 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v131 = 0;
              v125 = v131 + 4;
            }
            *(_QWORD *)(a1 + 16) = v125;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0)
            return 0;
          v71 = *((_QWORD *)this + 1);
          v72 = *((_QWORD *)this + 2);
          while (v71 < v72 && !*((_BYTE *)this + 24))
          {
            v74 = *(char **)(a1 + 16);
            v73 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              v76 = (char *)*v10;
              v77 = (v74 - (_BYTE *)*v10) >> 2;
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 62)
                goto LABEL_307;
              v79 = v73 - (_QWORD)v76;
              if (v79 >> 1 > v78)
                v78 = v79 >> 1;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
                v80 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v80 = v78;
              if (v80)
              {
                v81 = (char *)sub_100260634(v192, v80);
                v76 = *(char **)(a1 + 8);
                v74 = *(char **)(a1 + 16);
              }
              else
              {
                v81 = 0;
              }
              v82 = &v81[4 * v77];
              *(_DWORD *)v82 = 0;
              v75 = v82 + 4;
              while (v74 != v76)
              {
                v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v82;
              *(_QWORD *)(a1 + 16) = v75;
              *(_QWORD *)(a1 + 24) = &v81[4 * v80];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v75 = v74 + 4;
            }
            *(_QWORD *)(a1 + 16) = v75;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v75 - 1) = *(_DWORD *)(*(_QWORD *)this + v84);
            v72 = *((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v71;
          }
          goto LABEL_170;
        case 6u:
          *(_BYTE *)(a1 + 152) |= 8u;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_247;
              v88 += 7;
              v85 = v91;
              v20 = v89++ > 8;
            }
            while (!v20);
LABEL_185:
            LODWORD(v90) = 0;
            goto LABEL_247;
          }
          v132 = 0;
          v133 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v134 = v85 + 1;
              v135 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v134;
              v90 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                v85 = v134;
                v20 = v133++ > 8;
                if (v20)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_247:
          *(_DWORD *)(a1 + 148) = v90;
          goto LABEL_294;
        case 7u:
          *(_BYTE *)(a1 + 152) |= 1u;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_250;
              v96 += 7;
              v93 = v99;
              v20 = v97++ > 8;
            }
            while (!v20);
LABEL_192:
            v98 = 0;
            goto LABEL_250;
          }
          v136 = 0;
          v137 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              v98 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v138 = v93 + 1;
              v139 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v138;
              v98 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v93 = v138;
                v20 = v137++ > 8;
                if (v20)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v98 = 0;
            }
            break;
          }
LABEL_250:
          *(_QWORD *)(a1 + 128) = v98;
          goto LABEL_294;
        case 8u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0)
              return 0;
            v101 = *((_QWORD *)this + 1);
            v102 = *((_QWORD *)this + 2);
            while (v101 < v102 && !*((_BYTE *)this + 24))
            {
              v104 = *(char **)(a1 + 112);
              v103 = *(_QWORD *)(a1 + 120);
              if ((unint64_t)v104 >= v103)
              {
                v106 = (char *)*v194;
                v107 = (v104 - (_BYTE *)*v194) >> 2;
                v108 = v107 + 1;
                if ((unint64_t)(v107 + 1) >> 62)
                  goto LABEL_308;
                v109 = v103 - (_QWORD)v106;
                if (v109 >> 1 > v108)
                  v108 = v109 >> 1;
                if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                  v110 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v110 = v108;
                if (v110)
                {
                  v111 = (char *)sub_100260634(v193, v110);
                  v106 = *(char **)(a1 + 104);
                  v104 = *(char **)(a1 + 112);
                }
                else
                {
                  v111 = 0;
                }
                v112 = &v111[4 * v107];
                *(_DWORD *)v112 = 0;
                v105 = v112 + 4;
                while (v104 != v106)
                {
                  v113 = *((_DWORD *)v104 - 1);
                  v104 -= 4;
                  *((_DWORD *)v112 - 1) = v113;
                  v112 -= 4;
                }
                *(_QWORD *)(a1 + 104) = v112;
                *(_QWORD *)(a1 + 112) = v105;
                *(_QWORD *)(a1 + 120) = &v111[4 * v110];
                if (v106)
                  operator delete(v106);
              }
              else
              {
                *(_DWORD *)v104 = 0;
                v105 = v104 + 4;
              }
              *(_QWORD *)(a1 + 112) = v105;
              v114 = *((_QWORD *)this + 1);
              if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
              {
LABEL_169:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v105 - 1) = *(_DWORD *)(*(_QWORD *)this + v114);
              v102 = *((_QWORD *)this + 2);
              v101 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v101;
            }
LABEL_170:
            PB::Reader::recallMark(this, v195);
          }
          else
          {
            v141 = *(char **)(a1 + 112);
            v140 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v141 >= v140)
            {
              v170 = (char *)*v194;
              v171 = (v141 - (_BYTE *)*v194) >> 2;
              v172 = v171 + 1;
              if ((unint64_t)(v171 + 1) >> 62)
LABEL_308:
                sub_100259694();
              v173 = v140 - (_QWORD)v170;
              if (v173 >> 1 > v172)
                v172 = v173 >> 1;
              if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL)
                v174 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v174 = v172;
              if (v174)
              {
                v175 = (char *)sub_100260634(v193, v174);
                v170 = *(char **)(a1 + 104);
                v141 = *(char **)(a1 + 112);
              }
              else
              {
                v175 = 0;
              }
              v184 = &v175[4 * v171];
              *(_DWORD *)v184 = 0;
              v125 = v184 + 4;
              while (v141 != v170)
              {
                v185 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v184 - 1) = v185;
                v184 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v184;
              *(_QWORD *)(a1 + 112) = v125;
              *(_QWORD *)(a1 + 120) = &v175[4 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v125 = v141 + 4;
            }
            *(_QWORD *)(a1 + 112) = v125;
LABEL_289:
            v186 = *((_QWORD *)this + 1);
            if (v186 <= 0xFFFFFFFFFFFFFFFBLL && v186 + 4 <= *((_QWORD *)this + 2))
            {
              *(v125 - 1) = *(_DWORD *)(*(_QWORD *)this + v186);
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_293:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_291:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_294:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 9u:
          *(_BYTE *)(a1 + 152) |= 4u;
          v115 = *((_QWORD *)this + 1);
          v116 = *((_QWORD *)this + 2);
          v117 = *(_QWORD *)this;
          if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            do
            {
              v121 = v115 + 1;
              *((_QWORD *)this + 1) = v115 + 1;
              v122 = *(_BYTE *)(v117 + v115);
              v120 |= (unint64_t)(v122 & 0x7F) << v118;
              if ((v122 & 0x80) == 0)
                goto LABEL_253;
              v118 += 7;
              v115 = v121;
              v20 = v119++ > 8;
            }
            while (!v20);
LABEL_201:
            LODWORD(v120) = 0;
            goto LABEL_253;
          }
          v142 = 0;
          v143 = 0;
          v120 = 0;
          if (v116 <= v115)
            v116 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v116 == v115)
            {
              LODWORD(v120) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v144 = v115 + 1;
              v145 = *(_BYTE *)(v117 + v115);
              *((_QWORD *)this + 1) = v144;
              v120 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v115 = v144;
                v20 = v143++ > 8;
                if (v20)
                  goto LABEL_201;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v120) = 0;
            }
            break;
          }
LABEL_253:
          *(_DWORD *)(a1 + 144) = v120;
          goto LABEL_294;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_294;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015B9B3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  float *v17;
  float *v18;
  float v19;

  v3 = result;
  if ((*(_BYTE *)(result + 152) & 2) != 0)
    result = PB::Writer::write(this, *(double *)(result + 136), 1u);
  v4 = *(float **)(v3 + 56);
  v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(float **)(v3 + 32);
  v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v13 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15, 5u);
  }
  v16 = *(_BYTE *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 6u);
    v16 = *(_BYTE *)(v3 + 152);
  }
  if ((v16 & 1) != 0)
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 128), 7u);
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19, 8u);
  }
  if ((*(_BYTE *)(v3 + 152) & 4) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 9u);
  return result;
}

uint64_t sub_1015B9C70(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFDB8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015B9C88(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015B9CAC(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1021BFDB8;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

uint64_t sub_1015B9CFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "alsTrustedLux", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015B9D64(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015B9F44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015B9F9C(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFDF0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015B9FB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015B9FD8(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)result = &off_1021BFDF0;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 28) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 28) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_BYTE *)(result + 24) = v6;
  }
  return result;
}

uint64_t sub_1015BA048(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "fEndTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "fConnected", *(_BYTE *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "fStartTime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BA0D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 24) = v22;
        goto LABEL_38;
      }
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_31;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_38;
        }
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_31:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_38;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015BA2FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
  return result;
}

uint64_t sub_1015BA374(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1021BFE28;
  return result;
}

void sub_1015BA38C(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1021BFE28;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_1006B3398((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

void sub_1015BA3E0(PB::Base *a1)
{
  sub_1015BA38C(a1);
  operator delete();
}

uint64_t sub_1015BA404(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)result = &off_1021BFE28;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = 1;
    *(_DWORD *)(result + 24) = v2;
  }
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if (*(_QWORD *)(a2 + 16))
    operator new();
  return result;
}

uint64_t sub_1015BA540(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    PB::TextFormatter::format(this, "backlightState", *(_DWORD *)(a1 + 24));
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "backlightStateChangeSourceEvent");
  if (*(_QWORD *)(a1 + 16))
    PB::TextFormatter::format(this, "backlightStateSuppressionEventReason");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BA5BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_45;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v26) = 0;
              goto LABEL_45;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_41;
          }
        }
LABEL_45:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015BA8C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if ((*(_BYTE *)(result + 28) & 1) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    result = PB::Writer::write(this, v4, 2);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
    return PB::Writer::write(this, v5, 3);
  return result;
}

uint64_t sub_1015BA928(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFE60;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015BA940(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015BA964(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;

  *(_QWORD *)result = &off_1021BFE60;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 28) = v3 | 2;
    *(_DWORD *)(result + 16) = v7;
    return result;
  }
  v6 = *(_BYTE *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015BA9F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "inCoex", *(_BYTE *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "subType", *(_DWORD *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "reserved", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BAAA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    v2 = v37 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_63;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_64;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 20) = v25;
              goto LABEL_70;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 24) = v28;
              goto LABEL_70;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v41 = v29++;
                  v42 = *(_BYTE *)(v30 + v41);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_68:
                    v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_68;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_69;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 16) = v33;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015BAE70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_1015BAF04(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFE98;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1015BAF1C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015BAF40(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)result = &off_1021BFE98;
  *(_DWORD *)(result + 48) = 0;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_WORD *)(result + 48) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 48) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 40) = v6;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_BYTE *)(a2 + 47);
  v3 |= 0x400u;
  *(_WORD *)(result + 48) = v3;
  *(_BYTE *)(result + 47) = v8;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_BYTE *)(a2 + 45);
  v3 |= 0x100u;
  *(_WORD *)(result + 48) = v3;
  *(_BYTE *)(result + 45) = v9;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_BYTE *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 48) = v3;
  *(_BYTE *)(result + 44) = v10;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v11;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v12;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 46);
    *(_WORD *)(result + 48) = v3 | 0x200;
    *(_BYTE *)(result + 46) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 24) = v13;
  if ((*(_WORD *)(a2 + 48) & 0x200) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_1015BB090(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "activeCoex", *(_BYTE *)(a1 + 44));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "avgTemperature", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "blackout", *(_BYTE *)(a1 + 45));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "gradient", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "instTemperature", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "isSettle", *(_BYTE *)(a1 + 46));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rapidGradientChange", *(_BYTE *)(a1 + 47));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 48) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BB220(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 48) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 4u:
              *(_WORD *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 48) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 47) = v22;
              goto LABEL_81;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 45) = v24;
              goto LABEL_81;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 44) = v26;
              goto LABEL_81;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_80;
                  }
                  v37 = v27++;
                  v38 = *(_BYTE *)(v28 + v37);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_79:
                    v2 = v37 + 1;
                    goto LABEL_80;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_79;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_80;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_80:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_81:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_75:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_81;
            case 0xBu:
              *(_WORD *)(a1 + 48) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 46) = v34;
              goto LABEL_81;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_81;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015BB6F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 47), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 45), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 8u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 46), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 48) & 0x200) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 46), 0xBu);
  return result;
}

uint64_t sub_1015BB848(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFED0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015BB860(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015BB884(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_1021BFED0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 20) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015BB92C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "reserved", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "scaledValue", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "speedThreshold", *(_DWORD *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "speedRange", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BB9FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v53 = v20++;
                  v54 = *(_BYTE *)(v21 + v53);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_102:
                v3 = v53 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_103;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_103:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_124;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_107:
                    v3 = v57 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_107;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_108;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_124;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    v3 = v61 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_112;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_113;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_124;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    v3 = v65 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_117;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_118;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 20) = v43;
              goto LABEL_124;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_123;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_122:
                    v3 = v69 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_122;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_123;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_123:
              *(_DWORD *)(a1 + 16) = v49;
LABEL_124:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_124;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015BBFFC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  return result;
}

uint64_t sub_1015BC0AC(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFF08;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015BC0C4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015BC0E8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  float result;

  *(_QWORD *)a1 = &off_1021BFF08;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 25);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_BYTE *)(a1 + 25) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_BYTE *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_BYTE *)(a1 + 24) = v6;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *(float *)(a2 + 16);
      *(_BYTE *)(a1 + 28) = v3 | 2;
      *(float *)(a1 + 16) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 28) = v3;
  *(float *)(a1 + 20) = result;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015BC190(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "minPostSUIProx", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "resetTriggered", *(_BYTE *)(a1 + 25));
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "possibleObstructed", *(_BYTE *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BC260(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_58;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_57:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_58;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_58:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_59;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 25) = v28;
              goto LABEL_59;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 24) = v30;
              goto LABEL_59;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_40;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_53;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_53:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_40:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_59;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_59:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015BC5C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 25), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  return result;
}

uint64_t sub_1015BC670(uint64_t result)
{
  *(_QWORD *)result = off_1021BFF40;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015BC684(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BFF40;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015BC6C4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021BFF40;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015BC718(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = off_1021BFF40;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1015BC7B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BC820(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015BCAD8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015BCB2C(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

uint64_t sub_1015BCB90(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFF78;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1015BCBA8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015BCBCC(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021BFF78;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1015BCBF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isBatterySaverModeEnabled", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BCC44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015BCDD0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

uint64_t sub_1015BCDF0(uint64_t result)
{
  *(_QWORD *)result = &off_1021BFFB0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015BCE08(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015BCE2C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  char v8;
  int v9;

  *(_QWORD *)result = &off_1021BFFB0;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 28) = v3;
    *(_BYTE *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_BYTE *)(a2 + 25);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_BYTE *)(result + 25) = v6;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 20) = v7;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 28) = v3 | 2;
    *(_DWORD *)(result + 16) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_BYTE *)(a2 + 26);
  v3 |= 0x20u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 26) = v8;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_1015BCEF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "charged", *(_BYTE *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "chargerFamily", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "chargerType", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "level", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "connected", *(_BYTE *)(a1 + 25));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "wasConnected", *(_BYTE *)(a1 + 26));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BCFE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_78;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 24) = v22;
              goto LABEL_78;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 25) = v24;
              goto LABEL_78;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v25 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v26 = *(_QWORD *)this;
              if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v29 = 0;
                if (v2 <= v25)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v25)
                  {
                    LODWORD(v29) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v41 = v25++;
                  v42 = *(_BYTE *)(v26 + v41);
                  *((_QWORD *)this + 1) = v25;
                  v29 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v29) = 0;
LABEL_71:
                    v2 = v41 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v29) = 0;
                goto LABEL_71;
              }
              v27 = 0;
              v28 = 0;
              v29 = 0;
              do
              {
                v2 = v25 + 1;
                *((_QWORD *)this + 1) = v25 + 1;
                v30 = *(_BYTE *)(v26 + v25);
                v29 |= (unint64_t)(v30 & 0x7F) << v27;
                if ((v30 & 0x80) == 0)
                  goto LABEL_72;
                v27 += 7;
                v25 = v2;
                v14 = v28++ > 8;
              }
              while (!v14);
              LODWORD(v29) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 20) = v29;
              goto LABEL_78;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 26) = v32;
              goto LABEL_78;
            case 6u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_77;
                  }
                  v45 = v33++;
                  v46 = *(_BYTE *)(v34 + v45);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_76:
                    v2 = v45 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_76;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_77;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 16) = v37;
LABEL_78:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_78;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015BD438(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 25), 3u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 26), 5u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  return result;
}

void sub_1015BD504(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021BFFE8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1015BD55C(PB::Base *a1)
{
  sub_1015BD504(a1);
  operator delete();
}

uint64_t sub_1015BD580(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1021BFFE8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (*(_QWORD *)(a2 + 40))
    operator new();
  if (a1 != a2)
    sub_10034F2B0((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v4 = *(_BYTE *)(a2 + 52);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) |= 1u;
    *(_QWORD *)(a1 + 32) = v5;
    v4 = *(_BYTE *)(a2 + 52);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_BYTE *)(a1 + 48) = v6;
  }
  return a1;
}

uint64_t sub_1015BD668(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    PB::TextFormatter::format(this, "bioMotionTimestamp", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    PB::TextFormatter::format(this, "runSmoother", *(_BYTE *)(a1 + 48));
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015BD724(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE v57[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v57, v24, a4) & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v10;
                v31 = (v28 - (_BYTE *)*v10) >> 3;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61)
                  goto LABEL_88;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 2 > v32)
                  v32 = v33 >> 2;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                  v34 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_10025E6A0(v11, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[8 * v31];
                *(_QWORD *)v36 = 0;
                v29 = v36 + 8;
                while (v28 != v30)
                {
                  v37 = *((_QWORD *)v28 - 1);
                  v28 -= 8;
                  *((_QWORD *)v36 - 1) = v37;
                  v36 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[8 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v28 = 0;
                v29 = v28 + 8;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v25;
            }
            PB::Reader::recallMark(this, v57);
          }
          else
          {
            v45 = *(char **)(a1 + 16);
            v44 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v10;
              v48 = (v45 - (_BYTE *)*v10) >> 3;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
LABEL_88:
                sub_100259694();
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_10025E6A0(v11, v51);
                v47 = *(char **)(a1 + 8);
                v45 = *(char **)(a1 + 16);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[8 * v48];
              *(_QWORD *)v53 = 0;
              v46 = v53 + 8;
              while (v45 != v47)
              {
                v54 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v53;
              *(_QWORD *)(a1 + 16) = v46;
              *(_QWORD *)(a1 + 24) = &v52[8 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              v46 = v45 + 8;
            }
            *(_QWORD *)(a1 + 16) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *((_QWORD *)this + 2))
            {
              *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
LABEL_79:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_77:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_80:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_77;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v39);
          goto LABEL_79;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v40 = *((_QWORD *)this + 1);
          if (v40 >= *((_QWORD *)this + 2))
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
            *((_QWORD *)this + 1) = v41;
            v43 = v42 != 0;
          }
          *(_BYTE *)(a1 + 48) = v43;
          goto LABEL_80;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_80;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015BDB9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 40);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 2u);
  }
  v8 = *(_BYTE *)(v3 + 52);
  if ((v8 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
    v8 = *(_BYTE *)(v3 + 52);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 48), 4u);
  return result;
}

_QWORD *sub_1015BDC34(_QWORD *result)
{
  *result = off_1021C0020;
  result[1] = 0;
  return result;
}

void sub_1015BDC44(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0020;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015BDC84(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0020;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015BDCD8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C0020;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015BDD54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BDDA4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015BDF80(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015BDF9C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0058;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1015BDFB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015BDFD8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C0058;
  *(_DWORD *)(a1 + 48) = 0;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) != 0)
  {
    result = *(double *)(a2 + 40);
    v3 = 16;
    *(_BYTE *)(a1 + 48) = 16;
    *(double *)(a1 + 40) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 8);
      *(_BYTE *)(a1 + 48) = v3 | 1;
      *(double *)(a1 + 8) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015BE080(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "probabilityGenericMotion", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "probabilityHeadMotion", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "probabilityTorsoMotion", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "probabilityPedestrianMotion", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BE150(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_40:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015BE3E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  return result;
}

double sub_1015BE494(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C0090;
  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_1015BE4C4(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1021C0090;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_1015BE534(PB::Base *a1)
{
  sub_1015BE4C4(a1);
  operator delete();
}

uint64_t sub_1015BE558(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1021C0090;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if ((*(_BYTE *)(a2 + 144) & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 144) = 4;
    *(_QWORD *)(a1 + 120) = v6;
  }
  if (a1 != a2)
  {
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_10034F2B0((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v7 = *(_BYTE *)(a2 + 144);
  if ((v7 & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 144) |= 1u;
    *(_QWORD *)(a1 + 104) = v10;
    v7 = *(_BYTE *)(a2 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_7:
      if ((v7 & 8) == 0)
        goto LABEL_8;
LABEL_13:
      v12 = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 144) |= 8u;
      *(_QWORD *)(a1 + 128) = v12;
      if ((*(_BYTE *)(a2 + 144) & 0x10) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(a2 + 144) & 2) == 0)
  {
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 144) |= 2u;
  *(_QWORD *)(a1 + 112) = v11;
  v7 = *(_BYTE *)(a2 + 144);
  if ((v7 & 8) != 0)
    goto LABEL_13;
LABEL_8:
  if ((v7 & 0x10) != 0)
  {
LABEL_9:
    v8 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) |= 0x10u;
    *(_QWORD *)(a1 + 136) = v8;
  }
  return a1;
}

uint64_t sub_1015BE6B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  char v17;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "centerOfRotationEstVars", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "centerOfRotationEsts", v10);
  }
  v11 = *(double **)(a1 + 56);
  v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "linkLengthEstVars", v13);
  }
  v14 = *(double **)(a1 + 80);
  v15 = *(double **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "linkLengthEsts", v16);
  }
  v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(this, "positionResidualNormMean", *(double *)(a1 + 104));
    v17 = *(_BYTE *)(a1 + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(a1 + 144) & 2) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "positionResidualNormVar", *(double *)(a1 + 112));
  v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0)
      goto LABEL_13;
LABEL_19:
    PB::TextFormatter::format(this, "timestampBegin", *(double *)(a1 + 128));
    if ((*(_BYTE *)(a1 + 144) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_18:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
  v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 8) != 0)
    goto LABEL_19;
LABEL_13:
  if ((v17 & 0x10) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampEnd", *(double *)(a1 + 136));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015BE840(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  _QWORD *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 8);
    v133 = a1 + 24;
    v134 = a1 + 72;
    v12 = (void **)(a1 + 80);
    v13 = (void **)(a1 + 32);
    v131 = a1 + 48;
    v132 = a1 + 96;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 144) |= 4u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_210;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v89 = *(char **)(a1 + 40);
            v88 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v89 >= v88)
            {
              v97 = (char *)*v13;
              v98 = (v89 - (_BYTE *)*v13) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61)
LABEL_219:
                sub_100259694();
              v100 = v88 - (_QWORD)v97;
              if (v100 >> 2 > v99)
                v99 = v100 >> 2;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_10025E6A0(v131, v101);
                v97 = *(char **)(a1 + 32);
                v89 = *(char **)(a1 + 40);
              }
              else
              {
                v102 = 0;
              }
              v121 = &v102[8 * v98];
              *(_QWORD *)v121 = 0;
              v90 = v121 + 8;
              while (v89 != v97)
              {
                v122 = *((_QWORD *)v89 - 1);
                v89 -= 8;
                *((_QWORD *)v121 - 1) = v122;
                v121 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v121;
              *(_QWORD *)(a1 + 40) = v90;
              *(_QWORD *)(a1 + 48) = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v89 = 0;
              v90 = v89 + 8;
            }
            *(_QWORD *)(a1 + 40) = v90;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0)
            return 0;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            v31 = *(char **)(a1 + 40);
            v30 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v13;
              v34 = (v31 - (_BYTE *)*v13) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_219;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_10025E6A0(v131, v37);
                v33 = *(char **)(a1 + 32);
                v31 = *(char **)(a1 + 40);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = 0;
              v32 = v39 + 8;
              while (v31 != v33)
              {
                v40 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v39 - 1) = v40;
                v39 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v39;
              *(_QWORD *)(a1 + 40) = v32;
              *(_QWORD *)(a1 + 48) = &v38[8 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_QWORD *)v31 = 0;
              v32 = v31 + 8;
            }
            *(_QWORD *)(a1 + 40) = v32;
            v41 = *((_QWORD *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
              goto LABEL_136;
            *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
            v29 = *((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v28;
          }
          goto LABEL_137;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v92 = *(char **)(a1 + 88);
            v91 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v92 >= v91)
            {
              v103 = (char *)*v12;
              v104 = (v92 - (_BYTE *)*v12) >> 3;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 61)
LABEL_220:
                sub_100259694();
              v106 = v91 - (_QWORD)v103;
              if (v106 >> 2 > v105)
                v105 = v106 >> 2;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_10025E6A0(v132, v107);
                v103 = *(char **)(a1 + 80);
                v92 = *(char **)(a1 + 88);
              }
              else
              {
                v108 = 0;
              }
              v123 = &v108[8 * v104];
              *(_QWORD *)v123 = 0;
              v90 = v123 + 8;
              while (v92 != v103)
              {
                v124 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v123 - 1) = v124;
                v123 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v123;
              *(_QWORD *)(a1 + 88) = v90;
              *(_QWORD *)(a1 + 96) = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_QWORD *)v92 = 0;
              v90 = v92 + 8;
            }
            *(_QWORD *)(a1 + 88) = v90;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 88);
            v44 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v12;
              v48 = (v45 - (_BYTE *)*v12) >> 3;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
                goto LABEL_220;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_10025E6A0(v132, v51);
                v47 = *(char **)(a1 + 80);
                v45 = *(char **)(a1 + 88);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[8 * v48];
              *(_QWORD *)v53 = 0;
              v46 = v53 + 8;
              while (v45 != v47)
              {
                v54 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v53;
              *(_QWORD *)(a1 + 88) = v46;
              *(_QWORD *)(a1 + 96) = &v52[8 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              v46 = v45 + 8;
            }
            *(_QWORD *)(a1 + 88) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
              goto LABEL_136;
            *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_137;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v94 = *(char **)(a1 + 16);
            v93 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v94 >= v93)
            {
              v109 = (char *)*v11;
              v110 = (v94 - (_BYTE *)*v11) >> 3;
              v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 61)
LABEL_221:
                sub_100259694();
              v112 = v93 - (_QWORD)v109;
              if (v112 >> 2 > v111)
                v111 = v112 >> 2;
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
                v113 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v113 = v111;
              if (v113)
              {
                v114 = (char *)sub_10025E6A0(v133, v113);
                v109 = *(char **)(a1 + 8);
                v94 = *(char **)(a1 + 16);
              }
              else
              {
                v114 = 0;
              }
              v125 = &v114[8 * v110];
              *(_QWORD *)v125 = 0;
              v90 = v125 + 8;
              while (v94 != v109)
              {
                v126 = *((_QWORD *)v94 - 1);
                v94 -= 8;
                *((_QWORD *)v125 - 1) = v126;
                v125 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v125;
              *(_QWORD *)(a1 + 16) = v90;
              *(_QWORD *)(a1 + 24) = &v114[8 * v113];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *(_QWORD *)v94 = 0;
              v90 = v94 + 8;
            }
            *(_QWORD *)(a1 + 16) = v90;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0)
            return 0;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            v59 = *(char **)(a1 + 16);
            v58 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v11;
              v62 = (v59 - (_BYTE *)*v11) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
                goto LABEL_221;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_10025E6A0(v133, v65);
                v61 = *(char **)(a1 + 8);
                v59 = *(char **)(a1 + 16);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[8 * v62];
              *(_QWORD *)v67 = 0;
              v60 = v67 + 8;
              while (v59 != v61)
              {
                v68 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v67 - 1) = v68;
                v67 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v67;
              *(_QWORD *)(a1 + 16) = v60;
              *(_QWORD *)(a1 + 24) = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v59 = 0;
              v60 = v59 + 8;
            }
            *(_QWORD *)(a1 + 16) = v60;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)this + 2))
              goto LABEL_136;
            *(v60 - 1) = *(_QWORD *)(*(_QWORD *)this + v69);
            v57 = *((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v56;
          }
          goto LABEL_137;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v135, v26, a4) & 1) != 0)
              return 0;
            v70 = *((_QWORD *)this + 1);
            v71 = *((_QWORD *)this + 2);
            while (v70 < v71 && !*((_BYTE *)this + 24))
            {
              v73 = *(char **)(a1 + 64);
              v72 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v73 >= v72)
              {
                v75 = (char *)*v10;
                v76 = (v73 - (_BYTE *)*v10) >> 3;
                v77 = v76 + 1;
                if ((unint64_t)(v76 + 1) >> 61)
                  goto LABEL_222;
                v78 = v72 - (_QWORD)v75;
                if (v78 >> 2 > v77)
                  v77 = v78 >> 2;
                if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                  v79 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v79 = v77;
                if (v79)
                {
                  v80 = (char *)sub_10025E6A0(v134, v79);
                  v75 = *(char **)(a1 + 56);
                  v73 = *(char **)(a1 + 64);
                }
                else
                {
                  v80 = 0;
                }
                v81 = &v80[8 * v76];
                *(_QWORD *)v81 = 0;
                v74 = v81 + 8;
                while (v73 != v75)
                {
                  v82 = *((_QWORD *)v73 - 1);
                  v73 -= 8;
                  *((_QWORD *)v81 - 1) = v82;
                  v81 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v81;
                *(_QWORD *)(a1 + 64) = v74;
                *(_QWORD *)(a1 + 72) = &v80[8 * v79];
                if (v75)
                  operator delete(v75);
              }
              else
              {
                *(_QWORD *)v73 = 0;
                v74 = v73 + 8;
              }
              *(_QWORD *)(a1 + 64) = v74;
              v83 = *((_QWORD *)this + 1);
              if (v83 > 0xFFFFFFFFFFFFFFF7 || v83 + 8 > *((_QWORD *)this + 2))
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v74 - 1) = *(_QWORD *)(*(_QWORD *)this + v83);
              v71 = *((_QWORD *)this + 2);
              v70 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v70;
            }
LABEL_137:
            PB::Reader::recallMark(this, v135);
          }
          else
          {
            v96 = *(char **)(a1 + 64);
            v95 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v96 >= v95)
            {
              v115 = (char *)*v10;
              v116 = (v96 - (_BYTE *)*v10) >> 3;
              v117 = v116 + 1;
              if ((unint64_t)(v116 + 1) >> 61)
LABEL_222:
                sub_100259694();
              v118 = v95 - (_QWORD)v115;
              if (v118 >> 2 > v117)
                v117 = v118 >> 2;
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                v119 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v119 = v117;
              if (v119)
              {
                v120 = (char *)sub_10025E6A0(v134, v119);
                v115 = *(char **)(a1 + 56);
                v96 = *(char **)(a1 + 64);
              }
              else
              {
                v120 = 0;
              }
              v127 = &v120[8 * v116];
              *(_QWORD *)v127 = 0;
              v90 = v127 + 8;
              while (v96 != v115)
              {
                v128 = *((_QWORD *)v96 - 1);
                v96 -= 8;
                *((_QWORD *)v127 - 1) = v128;
                v127 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v127;
              *(_QWORD *)(a1 + 64) = v90;
              *(_QWORD *)(a1 + 72) = &v120[8 * v119];
              if (v115)
                operator delete(v115);
            }
            else
            {
              *(_QWORD *)v96 = 0;
              v90 = v96 + 8;
            }
            *(_QWORD *)(a1 + 64) = v90;
LABEL_206:
            v129 = *((_QWORD *)this + 1);
            if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((_QWORD *)this + 2))
            {
              *(v90 - 1) = *(_QWORD *)(*(_QWORD *)this + v129);
LABEL_210:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_208:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_211:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 144) |= 1u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFF7 || v84 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v84);
          goto LABEL_210;
        case 7u:
          *(_BYTE *)(a1 + 144) |= 2u;
          v85 = *((_QWORD *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFF7 || v85 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v85);
          goto LABEL_210;
        case 8u:
          *(_BYTE *)(a1 + 144) |= 8u;
          v86 = *((_QWORD *)this + 1);
          if (v86 > 0xFFFFFFFFFFFFFFF7 || v86 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v86);
          goto LABEL_210;
        case 9u:
          *(_BYTE *)(a1 + 144) |= 0x10u;
          v87 = *((_QWORD *)this + 1);
          if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v87);
          goto LABEL_210;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_211;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015BF208(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  char v16;

  v3 = result;
  if ((*(_BYTE *)(result + 144) & 4) != 0)
    result = PB::Writer::write(this, *(double *)(result + 120), 1u);
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(double **)(v3 + 80);
  v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(double **)(v3 + 8);
  v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v13 = *(double **)(v3 + 56);
  v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15, 5u);
  }
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
    v16 = *(_BYTE *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0)
        goto LABEL_18;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 112), 7u);
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 8) == 0)
  {
LABEL_18:
    if ((v16 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 136), 9u);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 8u);
  if ((*(_BYTE *)(v3 + 144) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 136), 9u);
  return result;
}

uint64_t sub_1015BF340(uint64_t result)
{
  *(_QWORD *)result = &off_1021C00C8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015BF358(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015BF37C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)result = &off_1021C00C8;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_BYTE *)(a2 + 18);
    *(_BYTE *)(result + 20) = v3 | 8;
    *(_BYTE *)(result + 18) = v7;
    return result;
  }
  v6 = *(_BYTE *)(a2 + 17);
  v3 |= 4u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 17) = v6;
  if ((*(_BYTE *)(a2 + 20) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015BF408(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestampEnd", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "updatedLinkLengthY", *(_BYTE *)(a1 + 17));
      if ((*(_BYTE *)(a1 + 20) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "updatedLinkLengthX", *(_BYTE *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "updatedLinkLengthZ", *(_BYTE *)(a1 + 18));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015BF4B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 20) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_40;
            case 2u:
              *(_BYTE *)(a1 + 20) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 16) = v22;
              goto LABEL_40;
            case 3u:
              *(_BYTE *)(a1 + 20) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 17) = v24;
              goto LABEL_40;
            case 4u:
              *(_BYTE *)(a1 + 20) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 18) = v26;
              goto LABEL_40;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_40:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015BF738(uint64_t result, PB::Writer *this)
{
  BOOL *v3;
  char v4;

  v3 = (BOOL *)result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = v3[20];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, v3[16], 2u);
  v4 = v3[20];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, v3[18], 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, v3[17], 3u);
  if ((v3[20] & 8) != 0)
    return PB::Writer::write(this, v3[18], 4u);
  return result;
}

double sub_1015BF7CC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C0100;
  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

void sub_1015BF804(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1021C0100;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

void sub_1015BF884(PB::Base *a1)
{
  sub_1015BF804(a1);
  operator delete();
}

uint64_t sub_1015BF8A8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  int v6;
  int v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1021C0100;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_10034F2B0((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_10034F2B0((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  }
  v5 = *(_BYTE *)(a2 + 144);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 1) == 0)
      goto LABEL_5;
LABEL_9:
    v9 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) |= 1u;
    *(_QWORD *)(a1 + 128) = v9;
    if ((*(_BYTE *)(a2 + 144) & 2) == 0)
      return a1;
    goto LABEL_6;
  }
  v8 = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) |= 4u;
  *(_DWORD *)(a1 + 140) = v8;
  v5 = *(_BYTE *)(a2 + 144);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v5 & 2) != 0)
  {
LABEL_6:
    v6 = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) |= 2u;
    *(_DWORD *)(a1 + 136) = v6;
  }
  return a1;
}

uint64_t sub_1015BF9E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  if ((*(_BYTE *)(a1 + 144) & 2) != 0)
    PB::TextFormatter::format(this, "modelType", *(_DWORD *)(a1 + 136));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "rotationRate", v10);
  }
  v11 = *(_BYTE *)(a1 + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 140));
    v11 = *(_BYTE *)(a1 + 144);
  }
  if ((v11 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "translation", v14);
  }
  v15 = *(double **)(a1 + 80);
  v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "userAcceleration", v17);
  }
  v18 = *(double **)(a1 + 104);
  v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "velocity", v20);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015BFB50(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  char *v115;
  _QWORD *v116;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  _BYTE v182[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v180 = a1 + 120;
    v181 = (void **)(a1 + 104);
    v10 = (void **)(a1 + 80);
    v11 = (void **)(a1 + 32);
    v178 = a1 + 48;
    v179 = a1 + 96;
    v12 = (void **)(a1 + 56);
    v13 = (void **)(a1 + 8);
    v176 = a1 + 24;
    v177 = a1 + 72;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          if ((_DWORD)v26 != 2)
          {
            v115 = *(char **)(a1 + 16);
            v114 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v115 >= v114)
            {
              v133 = (char *)*v13;
              v134 = (v115 - (_BYTE *)*v13) >> 3;
              v135 = v134 + 1;
              if ((unint64_t)(v134 + 1) >> 61)
LABEL_286:
                sub_100259694();
              v136 = v114 - (_QWORD)v133;
              if (v136 >> 2 > v135)
                v135 = v136 >> 2;
              if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v135;
              if (v137)
              {
                v138 = (char *)sub_10025E6A0(v176, v137);
                v133 = *(char **)(a1 + 8);
                v115 = *(char **)(a1 + 16);
              }
              else
              {
                v138 = 0;
              }
              v163 = &v138[8 * v134];
              *(_QWORD *)v163 = 0;
              v116 = v163 + 8;
              while (v115 != v133)
              {
                v164 = *((_QWORD *)v115 - 1);
                v115 -= 8;
                *((_QWORD *)v163 - 1) = v164;
                v163 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v163;
              *(_QWORD *)(a1 + 16) = v116;
              *(_QWORD *)(a1 + 24) = &v138[8 * v137];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *(_QWORD *)v115 = 0;
              v116 = v115 + 8;
            }
            *(_QWORD *)(a1 + 16) = v116;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v13;
              v33 = (v30 - (_BYTE *)*v13) >> 3;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61)
                goto LABEL_286;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 2 > v34)
                v34 = v35 >> 2;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_10025E6A0(v176, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[8 * v33];
              *(_QWORD *)v38 = 0;
              v31 = v38 + 8;
              while (v30 != v32)
              {
                v39 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v38 - 1) = v39;
                v38 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[8 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_QWORD *)v30 = 0;
              v31 = v30 + 8;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_163;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v118 = *(char **)(a1 + 64);
            v117 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v118 >= v117)
            {
              v139 = (char *)*v12;
              v140 = (v118 - (_BYTE *)*v12) >> 3;
              v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 61)
LABEL_287:
                sub_100259694();
              v142 = v117 - (_QWORD)v139;
              if (v142 >> 2 > v141)
                v141 = v142 >> 2;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v141;
              if (v143)
              {
                v144 = (char *)sub_10025E6A0(v177, v143);
                v139 = *(char **)(a1 + 56);
                v118 = *(char **)(a1 + 64);
              }
              else
              {
                v144 = 0;
              }
              v165 = &v144[8 * v140];
              *(_QWORD *)v165 = 0;
              v116 = v165 + 8;
              while (v118 != v139)
              {
                v166 = *((_QWORD *)v118 - 1);
                v118 -= 8;
                *((_QWORD *)v165 - 1) = v166;
                v165 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v165;
              *(_QWORD *)(a1 + 64) = v116;
              *(_QWORD *)(a1 + 72) = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_QWORD *)v118 = 0;
              v116 = v118 + 8;
            }
            *(_QWORD *)(a1 + 64) = v116;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 64);
            v43 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v12;
              v47 = (v44 - (_BYTE *)*v12) >> 3;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_287;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 2 > v48)
                v48 = v49 >> 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_10025E6A0(v177, v50);
                v46 = *(char **)(a1 + 56);
                v44 = *(char **)(a1 + 64);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = 0;
              v45 = v52 + 8;
              while (v44 != v46)
              {
                v53 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v52;
              *(_QWORD *)(a1 + 64) = v45;
              *(_QWORD *)(a1 + 72) = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v44 = 0;
              v45 = v44 + 8;
            }
            *(_QWORD *)(a1 + 64) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_163;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v120 = *(char **)(a1 + 40);
            v119 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v120 >= v119)
            {
              v145 = (char *)*v11;
              v146 = (v120 - (_BYTE *)*v11) >> 3;
              v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 61)
LABEL_288:
                sub_100259694();
              v148 = v119 - (_QWORD)v145;
              if (v148 >> 2 > v147)
                v147 = v148 >> 2;
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
                v149 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v149 = v147;
              if (v149)
              {
                v150 = (char *)sub_10025E6A0(v178, v149);
                v145 = *(char **)(a1 + 32);
                v120 = *(char **)(a1 + 40);
              }
              else
              {
                v150 = 0;
              }
              v167 = &v150[8 * v146];
              *(_QWORD *)v167 = 0;
              v116 = v167 + 8;
              while (v120 != v145)
              {
                v168 = *((_QWORD *)v120 - 1);
                v120 -= 8;
                *((_QWORD *)v167 - 1) = v168;
                v167 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v167;
              *(_QWORD *)(a1 + 40) = v116;
              *(_QWORD *)(a1 + 48) = &v150[8 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *(_QWORD *)v120 = 0;
              v116 = v120 + 8;
            }
            *(_QWORD *)(a1 + 40) = v116;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 40);
            v57 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v11;
              v61 = (v58 - (_BYTE *)*v11) >> 3;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_288;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 2 > v62)
                v62 = v63 >> 2;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_10025E6A0(v178, v64);
                v60 = *(char **)(a1 + 32);
                v58 = *(char **)(a1 + 40);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[8 * v61];
              *(_QWORD *)v66 = 0;
              v59 = v66 + 8;
              while (v58 != v60)
              {
                v67 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *((_QWORD *)v66 - 1) = v67;
                v66 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v66;
              *(_QWORD *)(a1 + 40) = v59;
              *(_QWORD *)(a1 + 48) = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v58 = 0;
              v59 = v58 + 8;
            }
            *(_QWORD *)(a1 + 40) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v59 - 1) = *(_QWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_163;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v122 = *(char **)(a1 + 88);
            v121 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v122 >= v121)
            {
              v151 = (char *)*v10;
              v152 = (v122 - (_BYTE *)*v10) >> 3;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 61)
LABEL_289:
                sub_100259694();
              v154 = v121 - (_QWORD)v151;
              if (v154 >> 2 > v153)
                v153 = v154 >> 2;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
                v155 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_10025E6A0(v179, v155);
                v151 = *(char **)(a1 + 80);
                v122 = *(char **)(a1 + 88);
              }
              else
              {
                v156 = 0;
              }
              v169 = &v156[8 * v152];
              *(_QWORD *)v169 = 0;
              v116 = v169 + 8;
              while (v122 != v151)
              {
                v170 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v169 - 1) = v170;
                v169 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v169;
              *(_QWORD *)(a1 + 88) = v116;
              *(_QWORD *)(a1 + 96) = &v156[8 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_QWORD *)v122 = 0;
              v116 = v122 + 8;
            }
            *(_QWORD *)(a1 + 88) = v116;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0)
            return 0;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          while (v69 < v70 && !*((_BYTE *)this + 24))
          {
            v72 = *(char **)(a1 + 88);
            v71 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v10;
              v75 = (v72 - (_BYTE *)*v10) >> 3;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 61)
                goto LABEL_289;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 2 > v76)
                v76 = v77 >> 2;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                v78 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_10025E6A0(v179, v78);
                v74 = *(char **)(a1 + 80);
                v72 = *(char **)(a1 + 88);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[8 * v75];
              *(_QWORD *)v80 = 0;
              v73 = v80 + 8;
              while (v72 != v74)
              {
                v81 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v80 - 1) = v81;
                v80 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v80;
              *(_QWORD *)(a1 + 88) = v73;
              *(_QWORD *)(a1 + 96) = &v79[8 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_QWORD *)v72 = 0;
              v73 = v72 + 8;
            }
            *(_QWORD *)(a1 + 88) = v73;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v73 - 1) = *(_QWORD *)(*(_QWORD *)this + v82);
            v70 = *((_QWORD *)this + 2);
            v69 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v69;
          }
          goto LABEL_163;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v182, v26, a4) & 1) != 0)
              return 0;
            v83 = *((_QWORD *)this + 1);
            v84 = *((_QWORD *)this + 2);
            while (v83 < v84 && !*((_BYTE *)this + 24))
            {
              v86 = *(char **)(a1 + 112);
              v85 = *(_QWORD *)(a1 + 120);
              if ((unint64_t)v86 >= v85)
              {
                v88 = (char *)*v181;
                v89 = (v86 - (_BYTE *)*v181) >> 3;
                v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 61)
                  goto LABEL_290;
                v91 = v85 - (_QWORD)v88;
                if (v91 >> 2 > v90)
                  v90 = v91 >> 2;
                if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
                  v92 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v92 = v90;
                if (v92)
                {
                  v93 = (char *)sub_10025E6A0(v180, v92);
                  v88 = *(char **)(a1 + 104);
                  v86 = *(char **)(a1 + 112);
                }
                else
                {
                  v93 = 0;
                }
                v94 = &v93[8 * v89];
                *(_QWORD *)v94 = 0;
                v87 = v94 + 8;
                while (v86 != v88)
                {
                  v95 = *((_QWORD *)v86 - 1);
                  v86 -= 8;
                  *((_QWORD *)v94 - 1) = v95;
                  v94 -= 8;
                }
                *(_QWORD *)(a1 + 104) = v94;
                *(_QWORD *)(a1 + 112) = v87;
                *(_QWORD *)(a1 + 120) = &v93[8 * v92];
                if (v88)
                  operator delete(v88);
              }
              else
              {
                *(_QWORD *)v86 = 0;
                v87 = v86 + 8;
              }
              *(_QWORD *)(a1 + 112) = v87;
              v96 = *((_QWORD *)this + 1);
              if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)this + 2))
              {
LABEL_162:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v87 - 1) = *(_QWORD *)(*(_QWORD *)this + v96);
              v84 = *((_QWORD *)this + 2);
              v83 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v83;
            }
LABEL_163:
            PB::Reader::recallMark(this, v182);
          }
          else
          {
            v124 = *(char **)(a1 + 112);
            v123 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v124 >= v123)
            {
              v157 = (char *)*v181;
              v158 = (v124 - (_BYTE *)*v181) >> 3;
              v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 61)
LABEL_290:
                sub_100259694();
              v160 = v123 - (_QWORD)v157;
              if (v160 >> 2 > v159)
                v159 = v160 >> 2;
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
                v161 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v161 = v159;
              if (v161)
              {
                v162 = (char *)sub_10025E6A0(v180, v161);
                v157 = *(char **)(a1 + 104);
                v124 = *(char **)(a1 + 112);
              }
              else
              {
                v162 = 0;
              }
              v171 = &v162[8 * v158];
              *(_QWORD *)v171 = 0;
              v116 = v171 + 8;
              while (v124 != v157)
              {
                v172 = *((_QWORD *)v124 - 1);
                v124 -= 8;
                *((_QWORD *)v171 - 1) = v172;
                v171 -= 8;
              }
              *(_QWORD *)(a1 + 104) = v171;
              *(_QWORD *)(a1 + 112) = v116;
              *(_QWORD *)(a1 + 120) = &v162[8 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_QWORD *)v124 = 0;
              v116 = v124 + 8;
            }
            *(_QWORD *)(a1 + 112) = v116;
LABEL_271:
            v173 = *((_QWORD *)this + 1);
            if (v173 <= 0xFFFFFFFFFFFFFFF7 && v173 + 8 <= *((_QWORD *)this + 2))
            {
              *(v116 - 1) = *(_QWORD *)(*(_QWORD *)this + v173);
LABEL_275:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_273:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_276:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 144) |= 4u;
          v97 = *((_QWORD *)this + 1);
          v98 = *((_QWORD *)this + 2);
          v99 = *(_QWORD *)this;
          if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
          {
            v100 = 0;
            v101 = 0;
            v102 = 0;
            do
            {
              v103 = v97 + 1;
              *((_QWORD *)this + 1) = v97 + 1;
              v104 = *(_BYTE *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0)
                goto LABEL_232;
              v100 += 7;
              v97 = v103;
              v20 = v101++ > 8;
            }
            while (!v20);
LABEL_180:
            LODWORD(v102) = 0;
            goto LABEL_232;
          }
          v125 = 0;
          v126 = 0;
          v102 = 0;
          if (v98 <= v97)
            v98 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v127 = v97 + 1;
              v128 = *(_BYTE *)(v99 + v97);
              *((_QWORD *)this + 1) = v127;
              v102 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v97 = v127;
                v20 = v126++ > 8;
                if (v20)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v102) = 0;
            }
            break;
          }
LABEL_232:
          *(_DWORD *)(a1 + 140) = v102;
          goto LABEL_276;
        case 7u:
          *(_BYTE *)(a1 + 144) |= 1u;
          v105 = *((_QWORD *)this + 1);
          if (v105 > 0xFFFFFFFFFFFFFFF7 || v105 + 8 > *((_QWORD *)this + 2))
            goto LABEL_273;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v105);
          goto LABEL_275;
        case 8u:
          *(_BYTE *)(a1 + 144) |= 2u;
          v106 = *((_QWORD *)this + 1);
          v107 = *((_QWORD *)this + 2);
          v108 = *(_QWORD *)this;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            v109 = 0;
            v110 = 0;
            v111 = 0;
            do
            {
              v112 = v106 + 1;
              *((_QWORD *)this + 1) = v106 + 1;
              v113 = *(_BYTE *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0)
                goto LABEL_235;
              v109 += 7;
              v106 = v112;
              v20 = v110++ > 8;
            }
            while (!v20);
LABEL_187:
            LODWORD(v111) = 0;
            goto LABEL_235;
          }
          v129 = 0;
          v130 = 0;
          v111 = 0;
          if (v107 <= v106)
            v107 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v106 + 1;
              v132 = *(_BYTE *)(v108 + v106);
              *((_QWORD *)this + 1) = v131;
              v111 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v106 = v131;
                v20 = v130++ > 8;
                if (v20)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v111) = 0;
            }
            break;
          }
LABEL_235:
          *(_DWORD *)(a1 + 136) = v111;
          goto LABEL_276;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_276;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015C07C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  char v19;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 1u);
  }
  v7 = *(double **)(v3 + 56);
  v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 2u);
  }
  v10 = *(double **)(v3 + 32);
  v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 3u);
  }
  v13 = *(double **)(v3 + 80);
  v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15, 4u);
  }
  v16 = *(double **)(v3 + 104);
  v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::write(this, v18, 5u);
  }
  v19 = *(_BYTE *)(v3 + 144);
  if ((v19 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 6u);
    v19 = *(_BYTE *)(v3 + 144);
    if ((v19 & 1) == 0)
    {
LABEL_18:
      if ((v19 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 8u);
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 1) == 0)
  {
    goto LABEL_18;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 128), 7u);
  if ((*(_BYTE *)(v3 + 144) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 8u);
  return result;
}

uint64_t sub_1015C08E8(uint64_t result)
{
  *(_QWORD *)result = off_1021C0138;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015C08FC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0138;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015C093C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0138;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015C0990(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_1021C0138;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 28) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 28) |= 1u;
    *(_QWORD *)(result + 16) = v3;
    v2 = *(_BYTE *)(a2 + 28);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) |= 2u;
    *(_DWORD *)(result + 24) = v4;
  }
  return result;
}

uint64_t sub_1015C0A48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    PB::TextFormatter::format(this, "modelType", *(_DWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "state");
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C0AD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v31 = 0;
          v32 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v33 = v21 + 1;
            v34 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v21 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_48:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v29 = *((_QWORD *)this + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v29);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C0DDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(_BYTE *)(v3 + 28);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
    v5 = *(_BYTE *)(v3 + 28);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  return result;
}

_QWORD *sub_1015C0E48(_QWORD *result)
{
  *result = off_1021C0170;
  result[1] = 0;
  return result;
}

void sub_1015C0E58(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0170;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015C0E98(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0170;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015C0EEC(_QWORD *result, uint64_t a2)
{
  *result = off_1021C0170;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015C0F68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C0FB8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C1180(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015C119C(uint64_t result)
{
  *(_QWORD *)result = off_1021C01A8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015C11B0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C01A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015C11F0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C01A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015C1244(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = off_1021C01A8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) |= 1u;
    *(_BYTE *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1015C12E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "withAnchoredStaticPose", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C134C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 >= *((_QWORD *)this + 2))
        {
          v24 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) = v22;
          v24 = v23 != 0;
        }
        *(_BYTE *)(a1 + 16) = v24;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C15A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015C15F4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C01E0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1015C160C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015C1630(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  float result;
  int v6;
  char v7;
  int v8;

  *(_QWORD *)a1 = &off_1021C01E0;
  *(_DWORD *)(a1 + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    v3 = 16;
    *(_WORD *)(a1 + 64) = 16;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 28);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 28) = result;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x1000) != 0)
  {
    result = *(float *)(a2 + 56);
    v3 |= 0x1000u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 52);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 12) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *(float *)(a2 + 36);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *(float *)(a2 + 32);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *(float *)(a2 + 40);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *(float *)(a2 + 44);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v6 = *(_DWORD *)(a2 + 20);
  v3 |= 8u;
  *(_WORD *)(a1 + 64) = v3;
  *(_DWORD *)(a1 + 20) = v6;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *(_BYTE *)(a2 + 60);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 60) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      return result;
LABEL_30:
    result = *(float *)(a2 + 8);
    *(_WORD *)(a1 + 64) = v3 | 1;
    *(float *)(a1 + 8) = result;
    return result;
  }
LABEL_29:
  v8 = *(_DWORD *)(a2 + 16);
  v3 |= 4u;
  *(_WORD *)(a1 + 64) = v3;
  *(_DWORD *)(a1 + 16) = v8;
  if ((*(_WORD *)(a2 + 64) & 1) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_1015C17D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "adaptiveExerciseMinuteThreshold", *(float *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "age", *(float *)(a1 + 12));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "betaBlockerUse", *(_BYTE *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "biologicalSex", *(_DWORD *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "condition", *(_DWORD *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "gender", *(_DWORD *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "heightM", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "hrmax", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "hrmin", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "hronset", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "pal", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "vo2max", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 64) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "runVo2max", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "weightKG", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C19C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v43 = v20++;
                  v44 = *(_BYTE *)(v21 + v43);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_105:
                v2 = v43 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_106;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *(_DWORD *)(a1 + 24) = v24;
              goto LABEL_117;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v47 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_117;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 60) = v34;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 4u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v51 = v35++;
                  v52 = *(_BYTE *)(v36 + v51);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_115:
                    v2 = v51 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_115;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_116;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 16) = v39;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_101:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_76:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015C2078(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0xBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 8), 0xEu);
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0xDu);
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 8), 0xEu);
  return result;
}

_QWORD *sub_1015C2224(_QWORD *result)
{
  *result = off_1021C0218;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1015C2238(void **a1)
{
  void **v2;

  *a1 = off_1021C0218;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015C2280(void **a1)
{
  void **v2;

  *a1 = off_1021C0218;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_1015C22DC(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C0218;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_1015C2340();
  return result;
}

void sub_1015C2340()
{
  operator new();
}

void sub_1015C2474(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C2494(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "accel");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C2500(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1015C26A0();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1015C26A0()
{
  operator new();
}

void sub_1015C27D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C27F4(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 1u))
    v5 = *v2++;
  return result;
}

_QWORD *sub_1015C283C(_QWORD *result)
{
  *result = off_1021C0250;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1015C2850(void **a1)
{
  void **v2;

  *a1 = off_1021C0250;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015C2898(void **a1)
{
  void **v2;

  *a1 = off_1021C0250;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_1015C28F4(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C0250;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_1015C2958();
  return result;
}

void sub_1015C2958()
{
  operator new();
}

void sub_1015C2A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C2AAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "deviceMotion");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C2B18(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1015C2CB8();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1015C2CB8()
{
  operator new();
}

void sub_1015C2DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C2E0C(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 1u))
    v5 = *v2++;
  return result;
}

uint64_t sub_1015C2E54(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0288;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1015C2E6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C2E90(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)result = &off_1021C0288;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(result + 44) = 8;
    *(_QWORD *)(result + 32) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 40);
      *(_BYTE *)(result + 44) = v3 | 0x10;
      *(_DWORD *)(result + 40) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(_QWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_1015C2F38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "basalNatalies", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "session", *(_DWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "natalies", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C3008(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015C3350(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  return result;
}

_QWORD *sub_1015C3400(_QWORD *result)
{
  *result = off_1021C02C0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1015C3414(void **a1)
{
  void **v2;

  *a1 = off_1021C02C0;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015C345C(void **a1)
{
  void **v2;

  *a1 = off_1021C02C0;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_1015C34B8(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C02C0;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_1015C351C();
  return result;
}

void sub_1015C351C()
{
  operator new();
}

void sub_1015C3650(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C3670(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "vo2MaxInput");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C36DC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1015C387C();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1015C387C()
{
  operator new();
}

void sub_1015C39A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C39C4(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 1u))
    v5 = *v2++;
  return result;
}

uint64_t sub_1015C3A0C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C02F8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1015C3A24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015C3A48(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  double result;

  *(_QWORD *)a1 = &off_1021C02F8;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 4) != 0)
  {
    v4 = *(_DWORD *)(a2 + 20);
    v3 = 4;
    *(_BYTE *)(a1 + 24) = 4;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1015C3AB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "eventType", *(_DWORD *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C3B48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 20) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C3EC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 20), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

uint64_t sub_1015C3F40(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0330;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015C3F58(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C3F7C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C0330;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1015C3FCC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C4034(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C435C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

double sub_1015C43B4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C0368;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1015C43D8(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C0368;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1015C4428(PB::Base *a1)
{
  sub_1015C43D8(a1);
  operator delete();
}

uint64_t sub_1015C444C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1021C0368;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    v5 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = 2;
    *(_QWORD *)(a1 + 64) = v5;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) |= 1u;
    *(_QWORD *)(a1 + 56) = v6;
  }
  return a1;
}

uint64_t sub_1015C44F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotationMatrix", v7);
  }
  v8 = *(_BYTE *)(a1 + 72);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 56));
    v8 = *(_BYTE *)(a1 + 72);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015C45C8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v80[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_117;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_119;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v58 = *(char **)(a1 + 16);
            v57 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v58 >= v57)
            {
              v62 = (char *)*v12;
              v63 = (v58 - (_BYTE *)*v12) >> 3;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 61)
LABEL_129:
                sub_100259694();
              v65 = v57 - (_QWORD)v62;
              if (v65 >> 2 > v64)
                v64 = v65 >> 2;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                v66 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)sub_10025E6A0(v13, v66);
                v62 = *(char **)(a1 + 8);
                v58 = *(char **)(a1 + 16);
              }
              else
              {
                v67 = 0;
              }
              v74 = &v67[8 * v63];
              *(_QWORD *)v74 = 0;
              v59 = v74 + 8;
              while (v58 != v62)
              {
                v75 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *((_QWORD *)v74 - 1) = v75;
                v74 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v74;
              *(_QWORD *)(a1 + 16) = v59;
              *(_QWORD *)(a1 + 24) = &v67[8 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_QWORD *)v58 = 0;
              v59 = v58 + 8;
            }
            *(_QWORD *)(a1 + 16) = v59;
            goto LABEL_115;
          }
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0)
            return 0;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            v31 = *(char **)(a1 + 16);
            v30 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v12;
              v34 = (v31 - (_BYTE *)*v12) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_129;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_10025E6A0(v13, v37);
                v33 = *(char **)(a1 + 8);
                v31 = *(char **)(a1 + 16);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = 0;
              v32 = v39 + 8;
              while (v31 != v33)
              {
                v40 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v39 - 1) = v40;
                v39 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v39;
              *(_QWORD *)(a1 + 16) = v32;
              *(_QWORD *)(a1 + 24) = &v38[8 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_QWORD *)v31 = 0;
              v32 = v31 + 8;
            }
            *(_QWORD *)(a1 + 16) = v32;
            v41 = *((_QWORD *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
              goto LABEL_83;
            *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
            v29 = *((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v28;
          }
          goto LABEL_84;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0)
              return 0;
            v42 = *((_QWORD *)this + 1);
            v43 = *((_QWORD *)this + 2);
            while (v42 < v43 && !*((_BYTE *)this + 24))
            {
              v45 = *(char **)(a1 + 40);
              v44 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v45 >= v44)
              {
                v47 = (char *)*v10;
                v48 = (v45 - (_BYTE *)*v10) >> 3;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 61)
                  goto LABEL_128;
                v50 = v44 - (_QWORD)v47;
                if (v50 >> 2 > v49)
                  v49 = v50 >> 2;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                  v51 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v52 = (char *)sub_10025E6A0(v11, v51);
                  v47 = *(char **)(a1 + 32);
                  v45 = *(char **)(a1 + 40);
                }
                else
                {
                  v52 = 0;
                }
                v53 = &v52[8 * v48];
                *(_QWORD *)v53 = 0;
                v46 = v53 + 8;
                while (v45 != v47)
                {
                  v54 = *((_QWORD *)v45 - 1);
                  v45 -= 8;
                  *((_QWORD *)v53 - 1) = v54;
                  v53 -= 8;
                }
                *(_QWORD *)(a1 + 32) = v53;
                *(_QWORD *)(a1 + 40) = v46;
                *(_QWORD *)(a1 + 48) = &v52[8 * v51];
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *(_QWORD *)v45 = 0;
                v46 = v45 + 8;
              }
              *(_QWORD *)(a1 + 40) = v46;
              v55 = *((_QWORD *)this + 1);
              if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
              v43 = *((_QWORD *)this + 2);
              v42 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v42;
            }
LABEL_84:
            PB::Reader::recallMark(this, v80);
          }
          else
          {
            v61 = *(char **)(a1 + 40);
            v60 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v61 >= v60)
            {
              v68 = (char *)*v10;
              v69 = (v61 - (_BYTE *)*v10) >> 3;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 61)
LABEL_128:
                sub_100259694();
              v71 = v60 - (_QWORD)v68;
              if (v71 >> 2 > v70)
                v70 = v71 >> 2;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v70;
              if (v72)
              {
                v73 = (char *)sub_10025E6A0(v11, v72);
                v68 = *(char **)(a1 + 32);
                v61 = *(char **)(a1 + 40);
              }
              else
              {
                v73 = 0;
              }
              v76 = &v73[8 * v69];
              *(_QWORD *)v76 = 0;
              v59 = v76 + 8;
              while (v61 != v68)
              {
                v77 = *((_QWORD *)v61 - 1);
                v61 -= 8;
                *((_QWORD *)v76 - 1) = v77;
                v76 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v76;
              *(_QWORD *)(a1 + 40) = v59;
              *(_QWORD *)(a1 + 48) = &v73[8 * v72];
              if (v68)
                operator delete(v68);
            }
            else
            {
              *(_QWORD *)v61 = 0;
              v59 = v61 + 8;
            }
            *(_QWORD *)(a1 + 40) = v59;
LABEL_115:
            v78 = *((_QWORD *)this + 1);
            if (v78 <= 0xFFFFFFFFFFFFFFF7 && v78 + 8 <= *((_QWORD *)this + 2))
            {
              *(v59 - 1) = *(_QWORD *)(*(_QWORD *)this + v78);
LABEL_119:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_117:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_120:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)this + 2))
            goto LABEL_117;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v56);
          goto LABEL_119;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_120;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015C4B80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  if ((*(_BYTE *)(result + 72) & 2) != 0)
    result = PB::Writer::write(this, *(double *)(result + 64), 1u);
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  return result;
}

void sub_1015C4C24(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021C03A0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_1015C4C84(PB::Base *a1)
{
  sub_1015C4C24(a1);
  operator delete();
}

uint64_t sub_1015C4CA8(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1021C03A0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = 1;
    *(_QWORD *)(a1 + 80) = v5;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_10034F2B0((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  return a1;
}

uint64_t sub_1015C4D5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotationMatrix", v7);
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  v11 = *(double **)(a1 + 56);
  v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "velocity", v13);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015C4E3C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 32);
    v103 = a1 + 48;
    v104 = a1 + 72;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 88) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_155;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_157;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v71 = *(char **)(a1 + 16);
            v70 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v71 >= v70)
            {
              v77 = (char *)*v12;
              v78 = (v71 - (_BYTE *)*v12) >> 3;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61)
LABEL_166:
                sub_100259694();
              v80 = v70 - (_QWORD)v77;
              if (v80 >> 2 > v79)
                v79 = v80 >> 2;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_10025E6A0(v13, v81);
                v77 = *(char **)(a1 + 8);
                v71 = *(char **)(a1 + 16);
              }
              else
              {
                v82 = 0;
              }
              v95 = &v82[8 * v78];
              *(_QWORD *)v95 = 0;
              v72 = v95 + 8;
              while (v71 != v77)
              {
                v96 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v95;
              *(_QWORD *)(a1 + 16) = v72;
              *(_QWORD *)(a1 + 24) = &v82[8 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_QWORD *)v71 = 0;
              v72 = v71 + 8;
            }
            *(_QWORD *)(a1 + 16) = v72;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
            return 0;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            v31 = *(char **)(a1 + 16);
            v30 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v12;
              v34 = (v31 - (_BYTE *)*v12) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_166;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_10025E6A0(v13, v37);
                v33 = *(char **)(a1 + 8);
                v31 = *(char **)(a1 + 16);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = 0;
              v32 = v39 + 8;
              while (v31 != v33)
              {
                v40 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v39 - 1) = v40;
                v39 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v39;
              *(_QWORD *)(a1 + 16) = v32;
              *(_QWORD *)(a1 + 24) = &v38[8 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_QWORD *)v31 = 0;
              v32 = v31 + 8;
            }
            *(_QWORD *)(a1 + 16) = v32;
            v41 = *((_QWORD *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
            v29 = *((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v28;
          }
          goto LABEL_107;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v74 = *(char **)(a1 + 40);
            v73 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v74 >= v73)
            {
              v83 = (char *)*v11;
              v84 = (v74 - (_BYTE *)*v11) >> 3;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61)
LABEL_167:
                sub_100259694();
              v86 = v73 - (_QWORD)v83;
              if (v86 >> 2 > v85)
                v85 = v86 >> 2;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87)
              {
                v88 = (char *)sub_10025E6A0(v103, v87);
                v83 = *(char **)(a1 + 32);
                v74 = *(char **)(a1 + 40);
              }
              else
              {
                v88 = 0;
              }
              v97 = &v88[8 * v84];
              *(_QWORD *)v97 = 0;
              v72 = v97 + 8;
              while (v74 != v83)
              {
                v98 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v97 - 1) = v98;
                v97 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v97;
              *(_QWORD *)(a1 + 40) = v72;
              *(_QWORD *)(a1 + 48) = &v88[8 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_QWORD *)v74 = 0;
              v72 = v74 + 8;
            }
            *(_QWORD *)(a1 + 40) = v72;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 40);
            v44 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v11;
              v48 = (v45 - (_BYTE *)*v11) >> 3;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
                goto LABEL_167;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_10025E6A0(v103, v51);
                v47 = *(char **)(a1 + 32);
                v45 = *(char **)(a1 + 40);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[8 * v48];
              *(_QWORD *)v53 = 0;
              v46 = v53 + 8;
              while (v45 != v47)
              {
                v54 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v53;
              *(_QWORD *)(a1 + 40) = v46;
              *(_QWORD *)(a1 + 48) = &v52[8 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              v46 = v45 + 8;
            }
            *(_QWORD *)(a1 + 40) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_107;
        case 4u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
              return 0;
            v56 = *((_QWORD *)this + 1);
            v57 = *((_QWORD *)this + 2);
            while (v56 < v57 && !*((_BYTE *)this + 24))
            {
              v59 = *(char **)(a1 + 64);
              v58 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v59 >= v58)
              {
                v61 = (char *)*v10;
                v62 = (v59 - (_BYTE *)*v10) >> 3;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 61)
                  goto LABEL_168;
                v64 = v58 - (_QWORD)v61;
                if (v64 >> 2 > v63)
                  v63 = v64 >> 2;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                  v65 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65)
                {
                  v66 = (char *)sub_10025E6A0(v104, v65);
                  v61 = *(char **)(a1 + 56);
                  v59 = *(char **)(a1 + 64);
                }
                else
                {
                  v66 = 0;
                }
                v67 = &v66[8 * v62];
                *(_QWORD *)v67 = 0;
                v60 = v67 + 8;
                while (v59 != v61)
                {
                  v68 = *((_QWORD *)v59 - 1);
                  v59 -= 8;
                  *((_QWORD *)v67 - 1) = v68;
                  v67 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v67;
                *(_QWORD *)(a1 + 64) = v60;
                *(_QWORD *)(a1 + 72) = &v66[8 * v65];
                if (v61)
                  operator delete(v61);
              }
              else
              {
                *(_QWORD *)v59 = 0;
                v60 = v59 + 8;
              }
              *(_QWORD *)(a1 + 64) = v60;
              v69 = *((_QWORD *)this + 1);
              if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)this + 2))
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v60 - 1) = *(_QWORD *)(*(_QWORD *)this + v69);
              v57 = *((_QWORD *)this + 2);
              v56 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v56;
            }
LABEL_107:
            PB::Reader::recallMark(this, v105);
          }
          else
          {
            v76 = *(char **)(a1 + 64);
            v75 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v76 >= v75)
            {
              v89 = (char *)*v10;
              v90 = (v76 - (_BYTE *)*v10) >> 3;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61)
LABEL_168:
                sub_100259694();
              v92 = v75 - (_QWORD)v89;
              if (v92 >> 2 > v91)
                v91 = v92 >> 2;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                v94 = (char *)sub_10025E6A0(v104, v93);
                v89 = *(char **)(a1 + 56);
                v76 = *(char **)(a1 + 64);
              }
              else
              {
                v94 = 0;
              }
              v99 = &v94[8 * v90];
              *(_QWORD *)v99 = 0;
              v72 = v99 + 8;
              while (v76 != v89)
              {
                v100 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v99 - 1) = v100;
                v99 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v99;
              *(_QWORD *)(a1 + 64) = v72;
              *(_QWORD *)(a1 + 72) = &v94[8 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *(_QWORD *)v76 = 0;
              v72 = v76 + 8;
            }
            *(_QWORD *)(a1 + 64) = v72;
LABEL_153:
            v101 = *((_QWORD *)this + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFF7 && v101 + 8 <= *((_QWORD *)this + 2))
            {
              *(v72 - 1) = *(_QWORD *)(*(_QWORD *)this + v101);
LABEL_157:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_155:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_158:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_158;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015C5570(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 88) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 80), 1u);
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = (double *)v3[4];
  v8 = (double *)v3[5];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v11 = (double *)v3[7];
  v10 = (double *)v3[8];
  while (v11 != v10)
  {
    v12 = *v11++;
    result = PB::Writer::write(this, v12, 4u);
  }
  return result;
}

uint64_t sub_1015C5610(uint64_t result)
{
  *(_QWORD *)result = &off_1021C03D8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015C5628(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1015C564C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C03D8;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1015C56BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C574C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 28) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 4;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 28) |= 1u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_1015C596C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

_QWORD *sub_1015C59E4(_QWORD *result)
{
  *result = &off_1021C0410;
  *(_QWORD *)((char *)result + 164) = 0;
  return result;
}

void sub_1015C59FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015C5A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  char v15;
  int v16;

  *(_QWORD *)a1 = &off_1021C0410;
  *(_QWORD *)(a1 + 164) = 0;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 120);
    v3 = 0x2000000;
    *(_QWORD *)(a1 + 164) = 0x2000000;
    *(_DWORD *)(a1 + 120) = v4;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 48);
    v3 |= 0x80uLL;
    *(_QWORD *)(a1 + 164) = v3;
    *(_DWORD *)(a1 + 48) = v4;
    v2 = *(_QWORD *)(a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 84);
    v3 |= 0x10000uLL;
    *(_QWORD *)(a1 + 164) = v3;
    *(_DWORD *)(a1 + 84) = v4;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_45;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v5 = *(_DWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 32) = v5;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 156) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  v4 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  v6 = *(_BYTE *)(a2 + 162);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_BYTE *)(a1 + 162) = v6;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 128) = v7;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 136) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  v8 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 72) = v8;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *(_DWORD *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 152) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  v9 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 68) = v9;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  v10 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_QWORD *)(a1 + 24) = v10;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_QWORD *)(a1 + 8) = v11;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80000) == 0)
  {
LABEL_33:
    if ((v2 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  v12 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 96) = v12;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  v14 = *(_BYTE *)(a2 + 161);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_BYTE *)(a1 + 161) = v14;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000) == 0)
      goto LABEL_37;
    goto LABEL_73;
  }
LABEL_72:
  v15 = *(_BYTE *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_BYTE *)(a1 + 160) = v15;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_37:
    if ((v2 & 0x20000) == 0)
      goto LABEL_38;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0)
      goto LABEL_39;
    goto LABEL_75;
  }
LABEL_74:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x400) == 0)
      goto LABEL_40;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_40:
    if ((v2 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_77;
  }
LABEL_76:
  v16 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 60) = v16;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_41:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  if ((*(_QWORD *)(a2 + 164) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_78:
  LODWORD(v4) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 164) = v3 | (unint64_t)&_mh_execute_header;
  *(_DWORD *)(a1 + 148) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015C5E64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "activityTypeWithoutOverride", *(_DWORD *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "avgTruthMets", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "basalCalories", *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "basalMets", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "computeTime", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "currentPace", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "distanceSource", *(_DWORD *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "duration", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "heartRate", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_16;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "heartRateConfidence", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_17;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "isMotionOverrideSet", *(_BYTE *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_18;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "isStanding", *(_BYTE *)(a1 + 161));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "isStored", *(_BYTE *)(a1 + 162));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "now", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "pedDistance", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "pedRawDistance", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "pushCount", *(_DWORD *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rawFMMets", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rawHRMets", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "rawTruthMets", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rawWRMets", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "recordInterval", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "startTime", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "stepBegin", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "stepDuration", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0)
      goto LABEL_34;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "stepEnd", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "totalCalories", *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "userMets", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "vectorMag", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_38;
LABEL_77:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 152));
    if ((*(_QWORD *)(a1 + 164) & 0x400000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_39;
  }
LABEL_76:
  PB::TextFormatter::format(this, "vectorMagCmSimOnly", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000000) != 0)
    goto LABEL_77;
LABEL_38:
  if ((v5 & 0x400000000) != 0)
LABEL_39:
    PB::TextFormatter::format(this, "wrMets", *(float *)(a1 + 156));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C6354(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 164) |= 0x2000000uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v20);
          goto LABEL_241;
        case 2u:
          *(_QWORD *)(a1 + 164) |= 0x80uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v22);
          goto LABEL_241;
        case 3u:
          *(_QWORD *)(a1 + 164) |= 0x10000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_241;
        case 4u:
          *(_QWORD *)(a1 + 164) |= 8uLL;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_251;
              v27 += 7;
              v24 = v30;
              v14 = v28++ > 8;
            }
            while (!v14);
LABEL_177:
            LODWORD(v29) = 0;
            goto LABEL_251;
          }
          v132 = 0;
          v133 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v134 = v24 + 1;
              v135 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v134;
              v29 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                v24 = v134;
                v14 = v133++ > 8;
                if (v14)
                  goto LABEL_177;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_251:
          *(_DWORD *)(a1 + 32) = v29;
          goto LABEL_243;
        case 5u:
          *(_QWORD *)(a1 + 164) |= 0x40000000uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_241;
        case 6u:
          *(_QWORD *)(a1 + 164) |= 0x400000000uLL;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_241;
        case 7u:
          *(_QWORD *)(a1 + 164) |= 0x400000uLL;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_241;
        case 8u:
          *(_QWORD *)(a1 + 164) |= 0x20uLL;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_241;
        case 9u:
          *(_QWORD *)(a1 + 164) |= 0x40uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_241;
        case 0xAu:
          *(_QWORD *)(a1 + 164) |= 2uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v37);
          v38 = *((_QWORD *)this + 1) + 8;
          goto LABEL_242;
        case 0xBu:
          *(_QWORD *)(a1 + 164) |= 0x2000000000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 >= *((_QWORD *)this + 2))
          {
            v42 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v40 = v39 + 1;
            v41 = *(unsigned __int8 *)(*(_QWORD *)this + v39);
            *((_QWORD *)this + 1) = v40;
            v42 = v41 != 0;
          }
          *(_BYTE *)(a1 + 162) = v42;
          goto LABEL_243;
        case 0xCu:
          *(_QWORD *)(a1 + 164) |= 0x800uLL;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v43);
          goto LABEL_241;
        case 0xDu:
          *(_QWORD *)(a1 + 164) |= 0x10000000uLL;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_241;
        case 0xEu:
          *(_QWORD *)(a1 + 164) |= 0x8000000uLL;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_255;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v50) = 0;
            goto LABEL_255;
          }
          v136 = 0;
          v137 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v138 = v45 + 1;
              v139 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v138;
              v50 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v45 = v138;
                v14 = v137++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 128) = v50;
          goto LABEL_243;
        case 0xFu:
          *(_QWORD *)(a1 + 164) |= 0x4000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_241;
        case 0x10u:
          *(_QWORD *)(a1 + 164) |= 0x20000000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_241;
        case 0x11u:
          *(_QWORD *)(a1 + 164) |= 0x200uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_241;
        case 0x12u:
          *(_QWORD *)(a1 + 164) |= 0x1000000uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_241;
        case 0x13u:
          *(_QWORD *)(a1 + 164) |= 0x2000uLL;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          v59 = *(_QWORD *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_259;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v62) = 0;
            goto LABEL_259;
          }
          v140 = 0;
          v141 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v142 = v57 + 1;
              v143 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)this + 1) = v142;
              v62 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                v57 = v142;
                v14 = v141++ > 8;
                if (v14)
                  goto LABEL_193;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_259:
          *(_DWORD *)(a1 + 72) = v62;
          goto LABEL_243;
        case 0x14u:
          *(_QWORD *)(a1 + 164) |= 0x200000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v65);
          goto LABEL_241;
        case 0x15u:
          *(_QWORD *)(a1 + 164) |= 0x4000uLL;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_241;
        case 0x16u:
          *(_QWORD *)(a1 + 164) |= 0x8000uLL;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v67);
          goto LABEL_241;
        case 0x17u:
          *(_QWORD *)(a1 + 164) |= 0x1000uLL;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          v70 = *(_QWORD *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)this + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_263;
              v71 += 7;
              v68 = v74;
              v14 = v72++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v73) = 0;
            goto LABEL_263;
          }
          v144 = 0;
          v145 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v146 = v68 + 1;
              v147 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)this + 1) = v146;
              v73 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                v68 = v146;
                v14 = v145++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_263:
          *(_DWORD *)(a1 + 68) = v73;
          goto LABEL_243;
        case 0x18u:
          *(_QWORD *)(a1 + 164) |= 0x200000uLL;
          v76 = *((_QWORD *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v76);
          goto LABEL_241;
        case 0x19u:
          *(_QWORD *)(a1 + 164) |= 0x100000uLL;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_241;
        case 0x1Au:
          *(_QWORD *)(a1 + 164) |= 4uLL;
          v78 = *((_QWORD *)this + 1);
          v79 = *((_QWORD *)this + 2);
          v80 = *(_QWORD *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            do
            {
              v84 = v78 + 1;
              *((_QWORD *)this + 1) = v78 + 1;
              v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0)
                goto LABEL_267;
              v81 += 7;
              v78 = v84;
              v14 = v82++ > 8;
            }
            while (!v14);
LABEL_207:
            v83 = 0;
            goto LABEL_267;
          }
          v148 = 0;
          v149 = 0;
          v83 = 0;
          if (v79 <= v78)
            v79 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v79 == v78)
            {
              v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v150 = v78 + 1;
              v151 = *(_BYTE *)(v80 + v78);
              *((_QWORD *)this + 1) = v150;
              v83 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v78 = v150;
                v14 = v149++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v83 = 0;
            }
            break;
          }
LABEL_267:
          *(_QWORD *)(a1 + 24) = v83;
          goto LABEL_243;
        case 0x1Bu:
          *(_QWORD *)(a1 + 164) |= 1uLL;
          v86 = *((_QWORD *)this + 1);
          v87 = *((_QWORD *)this + 2);
          v88 = *(_QWORD *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)this + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_271;
              v89 += 7;
              v86 = v92;
              v14 = v90++ > 8;
            }
            while (!v14);
LABEL_214:
            v91 = 0;
            goto LABEL_271;
          }
          v152 = 0;
          v153 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v154 = v86 + 1;
              v155 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)this + 1) = v154;
              v91 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v86 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_214;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v91 = 0;
            }
            break;
          }
LABEL_271:
          *(_QWORD *)(a1 + 8) = v91;
          goto LABEL_243;
        case 0x1Cu:
          *(_QWORD *)(a1 + 164) |= 0x80000000uLL;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v94);
          goto LABEL_241;
        case 0x1Du:
          *(_QWORD *)(a1 + 164) |= 0x80000uLL;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_275;
              v98 += 7;
              v95 = v101;
              v14 = v99++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v100) = 0;
            goto LABEL_275;
          }
          v156 = 0;
          v157 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v158 = v95 + 1;
              v159 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v158;
              v100 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v95 = v158;
                v14 = v157++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_275:
          *(_DWORD *)(a1 + 96) = v100;
          goto LABEL_243;
        case 0x1Eu:
          *(_QWORD *)(a1 + 164) |= 0x10uLL;
          v103 = *((_QWORD *)this + 1);
          v104 = *((_QWORD *)this + 2);
          v105 = *(_QWORD *)this;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            v106 = 0;
            v107 = 0;
            v108 = 0;
            do
            {
              v109 = v103 + 1;
              *((_QWORD *)this + 1) = v103 + 1;
              v110 = *(_BYTE *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0)
                goto LABEL_279;
              v106 += 7;
              v103 = v109;
              v14 = v107++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v108) = 0;
            goto LABEL_279;
          }
          v160 = 0;
          v161 = 0;
          v108 = 0;
          if (v104 <= v103)
            v104 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v162 = v103 + 1;
              v163 = *(_BYTE *)(v105 + v103);
              *((_QWORD *)this + 1) = v162;
              v108 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                v103 = v162;
                v14 = v161++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v108) = 0;
            }
            break;
          }
LABEL_279:
          *(_DWORD *)(a1 + 36) = v108;
          goto LABEL_243;
        case 0x1Fu:
          *(_QWORD *)(a1 + 164) |= 0x1000000000uLL;
          v111 = *((_QWORD *)this + 1);
          if (v111 >= *((_QWORD *)this + 2))
          {
            v114 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v112 = v111 + 1;
            v113 = *(unsigned __int8 *)(*(_QWORD *)this + v111);
            *((_QWORD *)this + 1) = v112;
            v114 = v113 != 0;
          }
          *(_BYTE *)(a1 + 161) = v114;
          goto LABEL_243;
        case 0x20u:
          *(_QWORD *)(a1 + 164) |= 0x800000000uLL;
          v115 = *((_QWORD *)this + 1);
          if (v115 >= *((_QWORD *)this + 2))
          {
            v118 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v116 = v115 + 1;
            v117 = *(unsigned __int8 *)(*(_QWORD *)this + v115);
            *((_QWORD *)this + 1) = v116;
            v118 = v117 != 0;
          }
          *(_BYTE *)(a1 + 160) = v118;
          goto LABEL_243;
        case 0x21u:
          *(_QWORD *)(a1 + 164) |= 0x800000uLL;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v119);
          goto LABEL_241;
        case 0x22u:
          *(_QWORD *)(a1 + 164) |= 0x20000uLL;
          v120 = *((_QWORD *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v120);
          goto LABEL_241;
        case 0x23u:
          *(_QWORD *)(a1 + 164) |= 0x40000uLL;
          v121 = *((_QWORD *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v121);
          goto LABEL_241;
        case 0x24u:
          *(_QWORD *)(a1 + 164) |= 0x400uLL;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          v124 = *(_QWORD *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)this + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_283;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_239:
            LODWORD(v127) = 0;
            goto LABEL_283;
          }
          v164 = 0;
          v165 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)this + 1);
          break;
        case 0x25u:
          *(_QWORD *)(a1 + 164) |= 0x100uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_241;
        case 0x26u:
          *(_QWORD *)(a1 + 164) |= (unint64_t)&_mh_execute_header;
          v131 = *((_QWORD *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v131);
LABEL_241:
            v38 = *((_QWORD *)this + 1) + 4;
LABEL_242:
            *((_QWORD *)this + 1) = v38;
          }
          else
          {
LABEL_170:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_243;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_243;
      }
      while (1)
      {
        if (v123 == v122)
        {
          LODWORD(v127) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_283;
        }
        v166 = v122 + 1;
        v167 = *(_BYTE *)(v124 + v122);
        *((_QWORD *)this + 1) = v166;
        v127 |= (unint64_t)(v167 & 0x7F) << v164;
        if ((v167 & 0x80) == 0)
          break;
        v164 += 7;
        v122 = v166;
        v14 = v165++ > 8;
        if (v14)
          goto LABEL_239;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v127) = 0;
LABEL_283:
      *(_DWORD *)(a1 + 60) = v127;
LABEL_243:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C7384(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 164);
  if ((v4 & 0x2000000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 120), 1u);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 48), 2u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 3u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 5u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 6u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 7u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 9u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 162), 0xBu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xCu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0xDu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0xEu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 0xFu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 0x10u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x11u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x12u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x13u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 152), 0x14u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x15u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0x17u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x18u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0x19u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x1Au);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x1Du);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 161), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x20u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 0x21u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x22u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 0x23u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x24u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_38:
    if ((v4 & 0x100000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x26u);
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x25u);
  if ((*(_QWORD *)(v3 + 164) & 0x100000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x26u);
  return result;
}

uint64_t sub_1015C77D0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0448;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1015C77E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C780C(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021C0448;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1015C7838(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "pause", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C7884(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C7A10(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

uint64_t sub_1015C7A30(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0480;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1015C7A48(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C7A6C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)result = &off_1021C0480;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 36) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 36) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(result + 36) = v3 | 8;
    *(_DWORD *)(result + 32) = v7;
    return result;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 36) = v3;
  *(_QWORD *)(result + 16) = v6;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015C7AF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "hr", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 36) & 4) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hkType", *(_DWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 4) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C7BA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_48:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_52;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_53;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *(_DWORD *)(a1 + 32) = v25;
LABEL_54:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_54;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015C7EB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  return result;
}

uint64_t sub_1015C7F4C(uint64_t result)
{
  *(_QWORD *)result = off_1021C04B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1015C7F64(void **a1)
{
  void **v2;

  *a1 = off_1021C04B8;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015C7FAC(void **a1)
{
  void **v2;

  *a1 = off_1021C04B8;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

uint64_t sub_1015C8008(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;

  *(_QWORD *)result = off_1021C04B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 36);
    v3 = 2;
    *(_BYTE *)(result + 64) = 2;
    *(_DWORD *)(result + 36) = v4;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 44);
    v3 |= 8u;
    *(_BYTE *)(result + 64) = v3;
    *(_DWORD *)(result + 44) = v5;
    v2 = *(_BYTE *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 32);
    v3 |= 1u;
    *(_BYTE *)(result + 64) = v3;
    *(_DWORD *)(result + 32) = v7;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 4u;
  *(_BYTE *)(result + 64) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_BYTE *)(a2 + 60);
  v3 |= 0x80u;
  *(_BYTE *)(result + 64) = v3;
  *(_BYTE *)(result + 60) = v9;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 48);
  v3 |= 0x10u;
  *(_BYTE *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v10;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 52);
  v3 |= 0x20u;
  *(_BYTE *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v11;
  if ((*(_BYTE *)(a2 + 64) & 0x40) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(result + 64) = v3 | 0x40;
    *(_DWORD *)(result + 56) = v6;
  }
LABEL_13:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_1015C8154();
  return result;
}

void sub_1015C8154()
{
  operator new();
}

void sub_1015C8288(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C82A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gain", *(_DWORD *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 36));
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "offset", *(_DWORD *)(a1 + 40));
LABEL_5:
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "point");
  }
  v9 = *(_BYTE *)(a1 + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sensor", *(_DWORD *)(a1 + 44));
    v9 = *(_BYTE *)(a1 + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "tempCalA", *(_DWORD *)(a1 + 48));
  v9 = *(_BYTE *)(a1 + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0)
      goto LABEL_11;
LABEL_20:
    PB::TextFormatter::format(this, "tempCalEnabled", *(_BYTE *)(a1 + 60));
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_19:
  PB::TextFormatter::format(this, "tempCalB", *(_DWORD *)(a1 + 52));
  v9 = *(_BYTE *)(a1 + 64);
  if (v9 < 0)
    goto LABEL_20;
LABEL_11:
  if ((v9 & 0x40) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "tempCalT0", *(_DWORD *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C841C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_136;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_82:
            LODWORD(v25) = 0;
            goto LABEL_136;
          }
          v81 = 0;
          v82 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v83 = v20 + 1;
              v84 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v83;
              v25 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                v20 = v83;
                v14 = v82++ > 8;
                if (v14)
                  goto LABEL_82;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_136:
          *(_DWORD *)(a1 + 36) = v25;
          goto LABEL_155;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 8u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_139;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_89:
            LODWORD(v34) = 0;
            goto LABEL_139;
          }
          v85 = 0;
          v86 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v87 = v29 + 1;
              v88 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v87;
              v34 |= (unint64_t)(v88 & 0x7F) << v85;
              if (v88 < 0)
              {
                v85 += 7;
                v29 = v87;
                v14 = v86++ > 8;
                if (v14)
                  goto LABEL_89;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_139:
          *(_DWORD *)(a1 + 44) = v34;
          goto LABEL_155;
        case 3u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_142;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_96:
            LODWORD(v42) = 0;
            goto LABEL_142;
          }
          v89 = 0;
          v90 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v91 = v37 + 1;
              v92 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v91;
              v42 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                v37 = v91;
                v14 = v90++ > 8;
                if (v14)
                  goto LABEL_96;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_142:
          *(_DWORD *)(a1 + 32) = v42;
          goto LABEL_155;
        case 4u:
          *(_BYTE *)(a1 + 64) |= 4u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_145;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_103:
            LODWORD(v50) = 0;
            goto LABEL_145;
          }
          v93 = 0;
          v94 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v95 = v45 + 1;
              v96 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v95;
              v50 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v45 = v95;
                v14 = v94++ > 8;
                if (v14)
                  goto LABEL_103;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_145:
          *(_DWORD *)(a1 + 40) = v50;
          goto LABEL_155;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 0x80u;
          v53 = *((_QWORD *)this + 1);
          if (v53 >= *((_QWORD *)this + 2))
          {
            v56 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
            *((_QWORD *)this + 1) = v54;
            v56 = v55 != 0;
          }
          *(_BYTE *)(a1 + 60) = v56;
          goto LABEL_155;
        case 6u:
          *(_BYTE *)(a1 + 64) |= 0x10u;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          v59 = *(_QWORD *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_148;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_112:
            LODWORD(v62) = 0;
            goto LABEL_148;
          }
          v97 = 0;
          v98 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v99 = v57 + 1;
              v100 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)this + 1) = v99;
              v62 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v57 = v99;
                v14 = v98++ > 8;
                if (v14)
                  goto LABEL_112;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_148:
          *(_DWORD *)(a1 + 48) = v62;
          goto LABEL_155;
        case 7u:
          *(_BYTE *)(a1 + 64) |= 0x20u;
          v65 = *((_QWORD *)this + 1);
          v66 = *((_QWORD *)this + 2);
          v67 = *(_QWORD *)this;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            do
            {
              v71 = v65 + 1;
              *((_QWORD *)this + 1) = v65 + 1;
              v72 = *(_BYTE *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0)
                goto LABEL_151;
              v68 += 7;
              v65 = v71;
              v14 = v69++ > 8;
            }
            while (!v14);
LABEL_119:
            LODWORD(v70) = 0;
            goto LABEL_151;
          }
          v101 = 0;
          v102 = 0;
          v70 = 0;
          if (v66 <= v65)
            v66 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v103 = v65 + 1;
              v104 = *(_BYTE *)(v67 + v65);
              *((_QWORD *)this + 1) = v103;
              v70 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                v65 = v103;
                v14 = v102++ > 8;
                if (v14)
                  goto LABEL_119;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v70) = 0;
            }
            break;
          }
LABEL_151:
          *(_DWORD *)(a1 + 52) = v70;
          goto LABEL_155;
        case 8u:
          *(_BYTE *)(a1 + 64) |= 0x40u;
          v73 = *((_QWORD *)this + 1);
          v74 = *((_QWORD *)this + 2);
          v75 = *(_QWORD *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)this + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_154;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_126:
            LODWORD(v78) = 0;
            goto LABEL_154;
          }
          v105 = 0;
          v106 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)this + 1);
          break;
        case 9u:
          sub_1015C8C64();
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_155;
      }
      while (1)
      {
        if (v74 == v73)
        {
          LODWORD(v78) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_154;
        }
        v107 = v73 + 1;
        v108 = *(_BYTE *)(v75 + v73);
        *((_QWORD *)this + 1) = v107;
        v78 |= (unint64_t)(v108 & 0x7F) << v105;
        if ((v108 & 0x80) == 0)
          break;
        v105 += 7;
        v73 = v107;
        v14 = v106++ > 8;
        if (v14)
          goto LABEL_126;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v78) = 0;
LABEL_154:
      *(_DWORD *)(a1 + 56) = v78;
LABEL_155:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1015C8C64()
{
  operator new();
}

void sub_1015C8D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C8DB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 36), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 5u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
LABEL_20:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 7u);
    if ((*(_BYTE *)(v3 + 64) & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 6u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) != 0)
    goto LABEL_20;
LABEL_8:
  if ((v4 & 0x40) != 0)
LABEL_9:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 8u);
LABEL_10:
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = PB::Writer::writeSubmessage(this, v7, 9u);
  }
  return result;
}

void sub_1015C8EE4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C8F08(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_1021C04F0;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 20) = 1;
    *(_DWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(result + 20) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 20) = v3 | 2;
    *(_DWORD *)(result + 12) = v6;
  }
  return result;
}

uint64_t sub_1015C8F74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "distance", *(_DWORD *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "base", *(_DWORD *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "peak", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C9004(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_80;
            }
            v46 = v27++;
            v47 = *(_BYTE *)(v28 + v46);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_79:
          v3 = v46 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *(_DWORD *)(a1 + 12) = v31;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        v33 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v34 = *(_QWORD *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_85;
            }
            v50 = v33++;
            v51 = *(_BYTE *)(v34 + v50);
            *((_QWORD *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v37) = 0;
LABEL_84:
          v3 = v50 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)this + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *(_DWORD *)(a1 + 16) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_75;
            }
            v42 = v21++;
            v43 = *(_BYTE *)(v22 + v42);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_74:
          v3 = v42 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_75:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C9420(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
  return result;
}

uint64_t sub_1015C9498(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0528;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1015C94B0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015C94D4(uint64_t a1, uint64_t a2)
{
  char v2;
  float result;

  *(_QWORD *)a1 = &off_1021C0528;
  *(_DWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
    *(float *)(a1 + 8) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 12);
    *(_BYTE *)(a1 + 16) = v2;
    *(float *)(a1 + 12) = result;
  }
  return result;
}

uint64_t sub_1015C9524(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "concha", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tragus", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C958C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 16) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015C9764(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  return result;
}

uint64_t sub_1015C97BC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0560;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1015C97D4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C97F8(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_1021C0560;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v3 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_DWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 12) = v4;
  }
  return result;
}

uint64_t sub_1015C9848(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "conchaTemp", *(_DWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tragusTemp", *(_DWORD *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C98B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 12) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C9BD8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 2u);
  return result;
}

uint64_t sub_1015C9C30(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0598;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015C9C48(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015C9C6C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C0598;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1015C9CBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015C9D24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015C9FB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015CA008(uint64_t result)
{
  *(_QWORD *)result = &off_1021C05D0;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_1015CA020(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015CA044(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)a1 = &off_1021C05D0;
  *(_DWORD *)(a1 + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 68) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 56);
    v3 |= 0x800u;
    *(_WORD *)(a1 + 68) = v3;
    *(_DWORD *)(a1 + 56) = v4;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x2000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 64);
    v3 |= 0x2000u;
    *(_WORD *)(a1 + 68) = v3;
    *(_DWORD *)(a1 + 64) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v5 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 32) = v5;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  if ((*(_WORD *)(a2 + 68) & 0x40) == 0)
    return *(float *)&v4;
LABEL_30:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_WORD *)(a1 + 68) = v3 | 0x40;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015CA1E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "calibrationLevel", *(_DWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 0x2000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CA3D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_79;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_83:
                    v2 = v29 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_83;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_84;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 32) = v25;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_78:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_79:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_69:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015CA920(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 0xBu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xEu);
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xDu);
  if ((*(_WORD *)(v3 + 68) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xEu);
  return result;
}

uint64_t sub_1015CAACC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0608;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015CAAE4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015CAB08(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C0608;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1015CAB58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "compassJustAlignedToStableField", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CABC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015CAE4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015CAEA4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0640;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_1015CAEBC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015CAEE0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;

  *(_QWORD *)a1 = &off_1021C0640;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v5 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 28) = v5;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v6 = *(_BYTE *)(a2 + 77);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 77) = v6;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      return *(float *)&v4;
    goto LABEL_38;
  }
LABEL_37:
  v7 = *(_BYTE *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v7;
  if ((*(_DWORD *)(a2 + 80) & 0x100) == 0)
    return *(float *)&v4;
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 80) = v3 | 0x100;
  *(_DWORD *)(a1 + 44) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015CB0F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "apAwake", *(_BYTE *)(a1 + 76));
    v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "calibrationLevel", *(_DWORD *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "coverage", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hasConsistency", *(_BYTE *)(a1 + 77));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "poseX", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "poseY", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "poseZ", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 72));
    if ((*(_DWORD *)(a1 + 80) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x8000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 1) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CB364(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_93;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v33 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_99:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 77) = v28;
              goto LABEL_99;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 76) = v30;
              goto LABEL_99;
            case 0x12u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_92:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_93:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_79:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_99;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_99;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015CB9A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 5u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 6u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xAu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0xDu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0xEu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 0xFu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 77), 0x10u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 44), 0x12u);
  }
LABEL_36:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 0x11u);
  if ((*(_DWORD *)(v3 + 80) & 0x100) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44), 0x12u);
  return result;
}

uint64_t sub_1015CBBC0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0678;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_1015CBBD8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015CBBFC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;

  *(_QWORD *)a1 = &off_1021C0678;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v5 = *(_BYTE *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v5;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      return *(float *)&v4;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = v6;
  if ((*(_DWORD *)(a2 + 80) & 0x200) == 0)
    return *(float *)&v4;
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = v3 | 0x200;
  *(_DWORD *)(a1 + 48) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015CBDF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "coverage2d", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "coverage3d", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isPlanar", *(_BYTE *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "numberOfSamples", *(_DWORD *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_DWORD *)(a1 + 80) & 0x8000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timeSpan", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 1) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x8000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CC044(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_89;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 76) = v22;
              goto LABEL_95;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_93:
                    v2 = v31 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_93;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_94;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 44) = v27;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_88:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_89:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015CC640(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 5u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 6u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 8u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 9u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0xAu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 0xBu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x11u);
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0x10u);
  if ((*(_DWORD *)(v3 + 80) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x11u);
  return result;
}

double sub_1015CC840(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C06B0;
  *(_DWORD *)(a1 + 124) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1015CC864(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C06B0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1015CC8B4(PB::Base *a1)
{
  sub_1015CC864(a1);
  operator delete();
}

uint64_t sub_1015CC8D8(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  int v23;
  int v24;
  int v25;

  *(_QWORD *)a1 = &off_1021C06B0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 56);
    v6 = 1;
    *(_DWORD *)(a1 + 124) = 1;
    *(_QWORD *)(a1 + 56) = v7;
    v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 88);
    v6 |= 0x80u;
    *(_DWORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 88) = v8;
    v5 = *(_DWORD *)(a2 + 124);
  }
LABEL_6:
  if ((v5 & 0x4000) != 0)
  {
    v13 = *(_DWORD *)(a2 + 116);
    v6 |= 0x4000u;
    *(_DWORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 116) = v13;
    v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 68);
  v6 |= 4u;
  *(_DWORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 68) = v14;
  if ((*(_DWORD *)(a2 + 124) & 0x20) != 0)
  {
LABEL_9:
    v9 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 124) = v6 | 0x20;
    *(_DWORD *)(a1 + 80) = v9;
  }
LABEL_10:
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x800) != 0)
  {
    v15 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 124) |= 0x800u;
    *(_DWORD *)(a1 + 104) = v15;
    v10 = *(_DWORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }
  v16 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 92) = v16;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 124) |= 2u;
  *(_DWORD *)(a1 + 64) = v17;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) |= 0x10u;
  *(_DWORD *)(a1 + 76) = v18;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 124) |= 8u;
  *(_DWORD *)(a1 + 72) = v19;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 124) |= 0x400u;
  *(_DWORD *)(a1 + 100) = v20;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 124) |= 0x10000u;
  *(_BYTE *)(a1 + 121) = v21;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) |= 0x8000u;
  *(_BYTE *)(a1 + 120) = v22;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 124) |= 0x200u;
  *(_DWORD *)(a1 + 96) = v23;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0)
      goto LABEL_23;
LABEL_39:
    v25 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 124) |= 0x40u;
    *(_DWORD *)(a1 + 84) = v25;
    if ((*(_DWORD *)(a2 + 124) & 0x2000) == 0)
      return a1;
    goto LABEL_24;
  }
LABEL_38:
  v24 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 124) |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v24;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x40) != 0)
    goto LABEL_39;
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    v11 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 124) |= 0x2000u;
    *(_DWORD *)(a1 + 112) = v11;
  }
  return a1;
}

uint64_t sub_1015CCB60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  int v8;
  float *v9;
  float *v10;
  float v11;
  int v12;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 124) & 2) != 0)
    PB::TextFormatter::format(this, "attitudeDelta", *(float *)(a1 + 64));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "calibratedField", v7);
  }
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "doCorrection", *(_BYTE *)(a1 + 120));
    v8 = *(_DWORD *)(a1 + 124);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0)
        goto LABEL_8;
      goto LABEL_28;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 68));
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isOnSphere", *(_DWORD *)(a1 + 72));
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isRotating", *(_DWORD *)(a1 + 76));
  if ((*(_DWORD *)(a1 + 124) & 0x10000) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "isTraversingSphere", *(_BYTE *)(a1 + 121));
LABEL_11:
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "predictedField", v11);
  }
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "scale", *(float *)(a1 + 80));
    v12 = *(_DWORD *)(a1 + 124);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "timerUnitDistanceThreshold", *(float *)(a1 + 84));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 88));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "unitDistanceLargeBufferDelta", *(float *)(a1 + 92));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "unitDistanceLargeBufferMax", *(float *)(a1 + 96));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "unitDistanceReference", *(float *)(a1 + 100));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "unitDistanceSmallBufferDelta", *(float *)(a1 + 104));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0)
      goto LABEL_23;
LABEL_40:
    PB::TextFormatter::format(this, "unitDistanceThresholdApplied", *(float *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 124) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_39:
  PB::TextFormatter::format(this, "unitDistanceThreshold", *(float *)(a1 + 108));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x2000) != 0)
    goto LABEL_40;
LABEL_23:
  if ((v12 & 0x4000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "vertical", *(float *)(a1 + 116));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015CCE14(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  _DWORD *v95;
  unint64_t v96;
  char *v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  char *v120;
  int v121;
  unint64_t v122;
  _BYTE v125[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 124) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_197;
        case 2u:
          *(_DWORD *)(a1 + 124) |= 0x80u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_196;
        case 3u:
          *(_DWORD *)(a1 + 124) |= 0x4000u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_196;
        case 4u:
          *(_DWORD *)(a1 + 124) |= 4u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_196;
        case 5u:
          *(_DWORD *)(a1 + 124) |= 0x20u;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_196;
        case 6u:
          if ((_DWORD)v26 != 2)
          {
            v94 = *(char **)(a1 + 16);
            v93 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v94 >= v93)
            {
              v106 = (char *)*v12;
              v107 = (v94 - (_BYTE *)*v12) >> 2;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62)
LABEL_208:
                sub_100259694();
              v109 = v93 - (_QWORD)v106;
              if (v109 >> 1 > v108)
                v108 = v109 >> 1;
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                v110 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v110 = v108;
              if (v110)
              {
                v111 = (char *)sub_100260634(v13, v110);
                v106 = *(char **)(a1 + 8);
                v94 = *(char **)(a1 + 16);
              }
              else
              {
                v111 = 0;
              }
              v118 = &v111[4 * v107];
              *(_DWORD *)v118 = 0;
              v95 = v118 + 4;
              while (v94 != v106)
              {
                v119 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v118;
              *(_QWORD *)(a1 + 16) = v95;
              *(_QWORD *)(a1 + 24) = &v111[4 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_DWORD *)v94 = 0;
              v95 = v94 + 4;
            }
            *(_QWORD *)(a1 + 16) = v95;
            goto LABEL_192;
          }
          if ((PB::Reader::placeMark(this, v125, v26, a4) & 1) != 0)
            return 0;
          v33 = *((_QWORD *)this + 1);
          v34 = *((_QWORD *)this + 2);
          while (v33 < v34 && !*((_BYTE *)this + 24))
          {
            v36 = *(char **)(a1 + 16);
            v35 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v36 >= v35)
            {
              v38 = (char *)*v12;
              v39 = (v36 - (_BYTE *)*v12) >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
                goto LABEL_208;
              v41 = v35 - (_QWORD)v38;
              if (v41 >> 1 > v40)
                v40 = v41 >> 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v42 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                v43 = (char *)sub_100260634(v13, v42);
                v38 = *(char **)(a1 + 8);
                v36 = *(char **)(a1 + 16);
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[4 * v39];
              *(_DWORD *)v44 = 0;
              v37 = v44 + 4;
              while (v36 != v38)
              {
                v45 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v44;
              *(_QWORD *)(a1 + 16) = v37;
              *(_QWORD *)(a1 + 24) = &v43[4 * v42];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *(_DWORD *)v36 = 0;
              v37 = v36 + 4;
            }
            *(_QWORD *)(a1 + 16) = v37;
            v46 = *((_QWORD *)this + 1);
            if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v37 - 1) = *(_DWORD *)(*(_QWORD *)this + v46);
            v34 = *((_QWORD *)this + 2);
            v33 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v33;
          }
          goto LABEL_153;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v125, v26, a4) & 1) != 0)
              return 0;
            v47 = *((_QWORD *)this + 1);
            v48 = *((_QWORD *)this + 2);
            while (v47 < v48 && !*((_BYTE *)this + 24))
            {
              v50 = *(char **)(a1 + 40);
              v49 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v50 >= v49)
              {
                v52 = (char *)*v10;
                v53 = (v50 - (_BYTE *)*v10) >> 2;
                v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62)
                  goto LABEL_209;
                v55 = v49 - (_QWORD)v52;
                if (v55 >> 1 > v54)
                  v54 = v55 >> 1;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                  v56 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  v57 = (char *)sub_100260634(v11, v56);
                  v52 = *(char **)(a1 + 32);
                  v50 = *(char **)(a1 + 40);
                }
                else
                {
                  v57 = 0;
                }
                v58 = &v57[4 * v53];
                *(_DWORD *)v58 = 0;
                v51 = v58 + 4;
                while (v50 != v52)
                {
                  v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v58;
                *(_QWORD *)(a1 + 40) = v51;
                *(_QWORD *)(a1 + 48) = &v57[4 * v56];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *(_DWORD *)v50 = 0;
                v51 = v50 + 4;
              }
              *(_QWORD *)(a1 + 40) = v51;
              v60 = *((_QWORD *)this + 1);
              if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
              {
LABEL_152:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v51 - 1) = *(_DWORD *)(*(_QWORD *)this + v60);
              v48 = *((_QWORD *)this + 2);
              v47 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v47;
            }
LABEL_153:
            PB::Reader::recallMark(this, v125);
          }
          else
          {
            v97 = *(char **)(a1 + 40);
            v96 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v97 >= v96)
            {
              v112 = (char *)*v10;
              v113 = (v97 - (_BYTE *)*v10) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
LABEL_209:
                sub_100259694();
              v115 = v96 - (_QWORD)v112;
              if (v115 >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)sub_100260634(v11, v116);
                v112 = *(char **)(a1 + 32);
                v97 = *(char **)(a1 + 40);
              }
              else
              {
                v117 = 0;
              }
              v120 = &v117[4 * v113];
              *(_DWORD *)v120 = 0;
              v95 = v120 + 4;
              while (v97 != v112)
              {
                v121 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v120;
              *(_QWORD *)(a1 + 40) = v95;
              *(_QWORD *)(a1 + 48) = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *(_DWORD *)v97 = 0;
              v95 = v97 + 4;
            }
            *(_QWORD *)(a1 + 40) = v95;
LABEL_192:
            v122 = *((_QWORD *)this + 1);
            if (v122 <= 0xFFFFFFFFFFFFFFFBLL && v122 + 4 <= *((_QWORD *)this + 2))
            {
              *(v95 - 1) = *(_DWORD *)(*(_QWORD *)this + v122);
LABEL_196:
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_197:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_194:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_198:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 8u:
          *(_DWORD *)(a1 + 124) |= 0x800u;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v61);
          goto LABEL_196;
        case 9u:
          *(_DWORD *)(a1 + 124) |= 0x100u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v62);
          goto LABEL_196;
        case 0xAu:
          *(_DWORD *)(a1 + 124) |= 2u;
          v63 = *((_QWORD *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v63);
          goto LABEL_196;
        case 0xBu:
          *(_DWORD *)(a1 + 124) |= 0x10u;
          v64 = *((_QWORD *)this + 1);
          v65 = *((_QWORD *)this + 2);
          v66 = *(_QWORD *)this;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            v67 = 0;
            v68 = 0;
            v69 = 0;
            do
            {
              v70 = v64 + 1;
              *((_QWORD *)this + 1) = v64 + 1;
              v71 = *(_BYTE *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0)
                goto LABEL_174;
              v67 += 7;
              v64 = v70;
              v20 = v68++ > 8;
            }
            while (!v20);
LABEL_140:
            LODWORD(v69) = 0;
            goto LABEL_174;
          }
          v98 = 0;
          v99 = 0;
          v69 = 0;
          if (v65 <= v64)
            v65 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v100 = v64 + 1;
              v101 = *(_BYTE *)(v66 + v64);
              *((_QWORD *)this + 1) = v100;
              v69 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                v64 = v100;
                v20 = v99++ > 8;
                if (v20)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v69) = 0;
            }
            break;
          }
LABEL_174:
          *(_DWORD *)(a1 + 76) = v69;
          goto LABEL_198;
        case 0xCu:
          *(_DWORD *)(a1 + 124) |= 8u;
          v72 = *((_QWORD *)this + 1);
          v73 = *((_QWORD *)this + 2);
          v74 = *(_QWORD *)this;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v72 + 1;
              *((_QWORD *)this + 1) = v72 + 1;
              v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0)
                goto LABEL_177;
              v75 += 7;
              v72 = v78;
              v20 = v76++ > 8;
            }
            while (!v20);
LABEL_147:
            LODWORD(v77) = 0;
            goto LABEL_177;
          }
          v102 = 0;
          v103 = 0;
          v77 = 0;
          if (v73 <= v72)
            v73 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v104 = v72 + 1;
              v105 = *(_BYTE *)(v74 + v72);
              *((_QWORD *)this + 1) = v104;
              v77 |= (unint64_t)(v105 & 0x7F) << v102;
              if (v105 < 0)
              {
                v102 += 7;
                v72 = v104;
                v20 = v103++ > 8;
                if (v20)
                  goto LABEL_147;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v77) = 0;
            }
            break;
          }
LABEL_177:
          *(_DWORD *)(a1 + 72) = v77;
          goto LABEL_198;
        case 0xDu:
          *(_DWORD *)(a1 + 124) |= 0x400u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v80);
          goto LABEL_196;
        case 0xEu:
          *(_DWORD *)(a1 + 124) |= 0x10000u;
          v81 = *((_QWORD *)this + 1);
          if (v81 >= *((_QWORD *)this + 2))
          {
            v84 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v82 = v81 + 1;
            v83 = *(unsigned __int8 *)(*(_QWORD *)this + v81);
            *((_QWORD *)this + 1) = v82;
            v84 = v83 != 0;
          }
          *(_BYTE *)(a1 + 121) = v84;
          goto LABEL_198;
        case 0xFu:
          *(_DWORD *)(a1 + 124) |= 0x8000u;
          v85 = *((_QWORD *)this + 1);
          if (v85 >= *((_QWORD *)this + 2))
          {
            v88 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v86 = v85 + 1;
            v87 = *(unsigned __int8 *)(*(_QWORD *)this + v85);
            *((_QWORD *)this + 1) = v86;
            v88 = v87 != 0;
          }
          *(_BYTE *)(a1 + 120) = v88;
          goto LABEL_198;
        case 0x10u:
          *(_DWORD *)(a1 + 124) |= 0x200u;
          v89 = *((_QWORD *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v89);
          goto LABEL_196;
        case 0x11u:
          *(_DWORD *)(a1 + 124) |= 0x1000u;
          v90 = *((_QWORD *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v90);
          goto LABEL_196;
        case 0x12u:
          *(_DWORD *)(a1 + 124) |= 0x40u;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v91);
          goto LABEL_196;
        case 0x13u:
          *(_DWORD *)(a1 + 124) |= 0x2000u;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v92);
          goto LABEL_196;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_198;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015CD894(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
LABEL_29:
    result = PB::Writer::write(this, *(float *)(v3 + 68), 4u);
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 3u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0)
    goto LABEL_29;
LABEL_5:
  if ((v4 & 0x20) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(float *)(v3 + 80), 5u);
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 6u);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 7u);
  }
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 104), 8u);
    v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 92), 9u);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xBu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xCu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xDu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 121), 0xEu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0xFu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0x10u);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x11u);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) == 0)
  {
LABEL_24:
    if ((v11 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x13u);
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x12u);
  if ((*(_DWORD *)(v3 + 124) & 0x2000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x13u);
  return result;
}

_QWORD *sub_1015CDAE0(_QWORD *result)
{
  *result = off_1021C06E8;
  result[1] = 0;
  return result;
}

void sub_1015CDAF0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C06E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015CDB30(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C06E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015CDB84(_QWORD *result, uint64_t a2)
{
  *result = off_1021C06E8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015CDC00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CDC50(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015CDE4C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015CDE68(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0720;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015CDE80(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015CDEA4(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)result = &off_1021C0720;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0)
      return result;
LABEL_10:
    v7 = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_BYTE *)(result + 24) = v7;
    return result;
  }
  v6 = *(_BYTE *)(a2 + 25);
  v3 |= 8u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 25) = v6;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1015CDF30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "finalDecision", *(_BYTE *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "instantDecision", *(_BYTE *)(a1 + 25));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CDFE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_29;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_29:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_40;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 25) = v22;
              goto LABEL_40;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 24) = v24;
              goto LABEL_40;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_40:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015CE254(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 25), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 4u);
  return result;
}

_QWORD *sub_1015CE2E8(_QWORD *result)
{
  *result = off_1021C0758;
  result[1] = 0;
  return result;
}

void sub_1015CE2F8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015CE338(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015CE38C(_QWORD *result, uint64_t a2)
{
  *result = off_1021C0758;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015CE408(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CE458(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015CE62C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_1015CE648(_QWORD *result)
{
  *result = off_1021C0790;
  result[1] = 0;
  return result;
}

void sub_1015CE658(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0790;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015CE698(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0790;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015CE6EC(_QWORD *result, uint64_t a2)
{
  *result = off_1021C0790;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015CE768(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CE7B8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015CE9B0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_1015CE9CC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C07C8;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_1015CE9E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015CEA08(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)a1 = &off_1021C07C8;
  *(_DWORD *)(a1 + 92) = 0;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 92) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 88);
    v3 |= 0x80000u;
    *(_DWORD *)(a1 + 92) = v3;
    *(float *)(a1 + 88) = result;
    v2 = *(_DWORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 |= 0x10u;
    *(_DWORD *)(a1 + 92) = v3;
    *(float *)(a1 + 28) = result;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v6 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 32) = v6;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 24) = v7;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 56) = v8;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 44) = v9;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 40) = v10;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 48) = v11;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 52) = v12;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      return result;
LABEL_42:
    result = *(float *)(a2 + 84);
    *(_DWORD *)(a1 + 92) = v3 | 0x40000;
    *(float *)(a1 + 84) = result;
    return result;
  }
LABEL_41:
  result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 80) = result;
  if ((*(_DWORD *)(a2 + 92) & 0x40000) != 0)
    goto LABEL_42;
  return result;
}

uint64_t sub_1015CEC54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "deviceSide", *(_DWORD *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gaitPhase", *(_DWORD *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant", *(_DWORD *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed", *(_DWORD *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning", *(_DWORD *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular", *(_DWORD *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist", *(_DWORD *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle", *(_DWORD *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
    if ((*(_DWORD *)(a1 + 92) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x80000) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CEF04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_189;
                  }
                  v77 = v20++;
                  v78 = *(_BYTE *)(v21 + v77);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_188:
                v2 = v77 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_189;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_189:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_230;
            case 2u:
              *(_DWORD *)(a1 + 92) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 3u:
              *(_DWORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 4u:
              *(_DWORD *)(a1 + 92) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 5u:
              *(_DWORD *)(a1 + 92) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_194;
                  }
                  v81 = v27++;
                  v82 = *(_BYTE *)(v28 + v81);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_193:
                    v2 = v81 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_193;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_194;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_194:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_230;
            case 6u:
              *(_DWORD *)(a1 + 92) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_199;
                  }
                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_198:
                    v2 = v85 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_198;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_199;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_199:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_230;
            case 7u:
              *(_DWORD *)(a1 + 92) |= 0x800u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_204;
                  }
                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_203:
                    v2 = v89 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_203;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_204;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_204:
              *(_DWORD *)(a1 + 56) = v43;
              goto LABEL_230;
            case 8u:
              *(_DWORD *)(a1 + 92) |= 0x100u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_209;
                  }
                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_208:
                    v2 = v93 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_208;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_209;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_209:
              *(_DWORD *)(a1 + 44) = v49;
              goto LABEL_230;
            case 9u:
              *(_DWORD *)(a1 + 92) |= 0x80u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_214;
                  }
                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_213:
                    v2 = v97 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_213;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_214;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_214:
              *(_DWORD *)(a1 + 40) = v55;
              goto LABEL_230;
            case 0xAu:
              *(_DWORD *)(a1 + 92) |= 0x200u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_219;
                  }
                  v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_218:
                    v2 = v101 + 1;
                    goto LABEL_219;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_218;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_219;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_219:
              *(_DWORD *)(a1 + 48) = v61;
              goto LABEL_230;
            case 0xBu:
              *(_DWORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0xCu:
              *(_DWORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0xDu:
              *(_DWORD *)(a1 + 92) |= 0x400u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_224;
                  }
                  v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0)
                    break;
                  v103 += 7;
                  v14 = v104++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_223:
                    v2 = v105 + 1;
                    goto LABEL_224;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
                goto LABEL_223;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_224;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_224:
              *(_DWORD *)(a1 + 52) = v67;
              goto LABEL_230;
            case 0xEu:
              *(_DWORD *)(a1 + 92) |= 0x40u;
              v69 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v70 = *(_QWORD *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v107 = 0;
                v108 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_229;
                  }
                  v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((_QWORD *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0)
                    break;
                  v107 += 7;
                  v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_228:
                    v2 = v109 + 1;
                    goto LABEL_229;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v73) = 0;
                goto LABEL_228;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)this + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_229;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_229:
              *(_DWORD *)(a1 + 36) = v73;
LABEL_230:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x10u:
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x11u:
              *(_DWORD *)(a1 + 92) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x12u:
              *(_DWORD *)(a1 + 92) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x13u:
              *(_DWORD *)(a1 + 92) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x14u:
              *(_DWORD *)(a1 + 92) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_184:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_119:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_230;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_230;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015CFB34(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 4u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 6u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 8u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 9u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xAu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0xBu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 0xCu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0xDu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0xEu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xFu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x10u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0x11u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0x12u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x14u);
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0x13u);
  if ((*(_DWORD *)(v3 + 92) & 0x40000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x14u);
  return result;
}

uint64_t sub_1015CFD88(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0800;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015CFDA0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015CFDC4(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1021C0800;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

uint64_t sub_1015CFE14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015CFE7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015D005C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  return result;
}

_QWORD *sub_1015D00B4(_QWORD *result)
{
  *result = off_1021C0838;
  result[1] = 0;
  return result;
}

void sub_1015D00C4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0838;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015D0104(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C0838;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1015D0158(_QWORD *result, uint64_t a2)
{
  *result = off_1021C0838;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1015D01D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D0224(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015D0420(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

void sub_1015D0440(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015D0464(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;

  *(_QWORD *)a1 = &off_1021C0870;
  *(_DWORD *)(a1 + 124) = 0;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_DWORD *)(a1 + 124) = 16;
    *(_QWORD *)(a1 + 40) = v4;
    v2 = *(_DWORD *)(a2 + 124);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 124) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 124);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 124) = v3;
    *(_QWORD *)(a1 + 24) = v4;
    v2 = *(_DWORD *)(a2 + 124);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  v4 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 56) = v5;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v6 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 76) = v6;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  v7 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 52) = v7;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v8 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 92) = v8;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v9 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 112) = v9;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      return *(float *)&v4;
    goto LABEL_50;
  }
LABEL_49:
  v10 = *(_BYTE *)(a2 + 120);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_BYTE *)(a1 + 120) = v10;
  if ((*(_DWORD *)(a2 + 124) & 0x400000) == 0)
    return *(float *)&v4;
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = v3 | 0x400000;
  *(_DWORD *)(a1 + 116) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015D071C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 124);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "clientID", *(_DWORD *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isGyroOn", *(_BYTE *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel", *(_DWORD *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(this, "variant", *(_DWORD *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 124) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x400000) != 0)
LABEL_25:
    PB::TextFormatter::format(this, "visionCompassBias", *(float *)(a1 + 116));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D0A4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 124) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 124) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 124) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 124) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 124) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_155;
            case 6u:
              *(_DWORD *)(a1 + 124) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 7u:
              *(_DWORD *)(a1 + 124) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 8u:
              *(_DWORD *)(a1 + 124) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 9u:
              *(_DWORD *)(a1 + 124) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xAu:
              *(_DWORD *)(a1 + 124) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xBu:
              *(_DWORD *)(a1 + 124) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xCu:
              *(_DWORD *)(a1 + 124) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xDu:
              *(_DWORD *)(a1 + 124) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xEu:
              *(_DWORD *)(a1 + 124) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xFu:
              *(_DWORD *)(a1 + 124) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_165;
                  }
                  v55 = v21++;
                  v56 = *(_BYTE *)(v22 + v55);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_164:
                    v2 = v55 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_164;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_165;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_156;
            case 0x10u:
              *(_DWORD *)(a1 + 124) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0x11u:
              *(_DWORD *)(a1 + 124) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0x12u:
              *(_DWORD *)(a1 + 124) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0x13u:
              *(_DWORD *)(a1 + 124) |= 0x1000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_170;
                  }
                  v59 = v27++;
                  v60 = *(_BYTE *)(v28 + v59);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_169:
                    v2 = v59 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_169;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_170;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 76) = v31;
              goto LABEL_156;
            case 0x14u:
              *(_DWORD *)(a1 + 124) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_175;
                  }
                  v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_174:
                    v2 = v63 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_174;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_175;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_156;
            case 0x15u:
              *(_DWORD *)(a1 + 124) |= 0x10000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_180;
                  }
                  v67 = v39++;
                  v68 = *(_BYTE *)(v40 + v67);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_179:
                    v2 = v67 + 1;
                    goto LABEL_180;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_179;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_180;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_180:
              *(_DWORD *)(a1 + 92) = v43;
              goto LABEL_156;
            case 0x16u:
              *(_DWORD *)(a1 + 124) |= 0x200000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_185;
                  }
                  v71 = v45++;
                  v72 = *(_BYTE *)(v46 + v71);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_184:
                    v2 = v71 + 1;
                    goto LABEL_185;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_184;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_185;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_185:
              *(_DWORD *)(a1 + 112) = v49;
LABEL_156:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 124) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 120) = v52;
              goto LABEL_156;
            case 0x18u:
              *(_DWORD *)(a1 + 124) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_154:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_155:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_115:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_156;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_156;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

