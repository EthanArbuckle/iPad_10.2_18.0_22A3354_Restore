BOOL sub_100753F2C(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7)
{
  NSObject *v7;
  _BOOL8 result;
  const char *v9;
  uint8_t *v10;
  const std::string::value_type *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  _BOOL4 v24;
  int v25;
  NSObject *v26;
  int v27;
  const char *v28;
  int v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint8_t *v35;
  const char *v36;
  int v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE v43[32];
  int v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  _BYTE v48[10];
  _BYTE v49[10];
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;

  if (*(_BYTE *)(a1 + 2))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v7 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLNMEAScreener,screen,external location update paused", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      *(_WORD *)v42 = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNMEAScreener,screen,external location update paused", v42, v41, *(_OWORD *)v42, *(_QWORD *)&v42[16], *(_OWORD *)v43, *(_OWORD *)&v43[16]);
LABEL_10:
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaScreener::screenData(CLNmeaSentenceType, double, double, CLClientLocationReferenceFrame, BOOL, double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      return 0;
    }
    return result;
  }
  if (!*(_BYTE *)(a1 + 1) || a2 != 3 && a2)
    return 1;
  if (a2)
    v17 = "GPRMC";
  else
    v17 = "GPGGA";
  std::string::assign((std::string *)(a1 + 8), v17);
  HIDWORD(v41) = 0;
  if (!sub_10011CE88(a5, a6))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v21 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "CLNMEAScreener,screen,rejected,invalid accessory coordinate", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_29;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    *(_WORD *)v42 = 0;
    LODWORD(v41) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLNMEAScreener,screen,rejected,invalid accessory coordinate", v42, v41, *(_QWORD *)v42, *(_OWORD *)&v42[8]);
    goto LABEL_62;
  }
  if (*(_BYTE *)a1)
  {
LABEL_20:
    v19 = a1 + 352;
    v20 = 0;
LABEL_21:
    sub_10075476C(v19, 0, v20);
    return 1;
  }
  if (a4)
  {
    LODWORD(v18) = dword_102303C90;
    if ((double)v18 > a7)
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      v22 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349312;
        v46 = a7;
        v47 = 1026;
        *(_DWORD *)v48 = dword_102303C90;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "CLNmeaScreener,screen,data time less,%{public}.2lf,than build time,,%{public}d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_29;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      *(_DWORD *)v42 = 134349312;
      *(double *)&v42[4] = a7;
      *(_WORD *)&v42[12] = 1026;
      *(_DWORD *)&v42[14] = dword_102303C90;
      LODWORD(v41) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLNmeaScreener,screen,data time less,%{public}.2lf,than build time,,%{public}d", v42, v41, *(_QWORD *)v42, *(_OWORD *)&v42[8]);
LABEL_62:
      v35 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaScreener::screenData(CLNmeaSentenceType, double, double, CLClientLocationReferenceFrame, BOOL, double)", "%s\n", v23);
      if (v35 != buf)
        free(v35);
LABEL_29:
      sub_10075476C(a1 + 352, 1, 0);
      return 0;
    }
  }
  if (a7 < 0.0)
    goto LABEL_20;
  v24 = sub_1007547AC(a1, a3, (int *)&v41 + 1, a5, a6);
  v25 = HIDWORD(v41);
  if ((sub_100754BE8(a1 + 384, v24, SHIDWORD(v41)) & 1) != 0)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v26 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_DWORD *)(a1 + 384);
      v28 = "success";
      v29 = *(_DWORD *)(a1 + 388);
      if (!v25)
        v28 = "not screened";
      *(_DWORD *)buf = 134350595;
      v46 = a7;
      v47 = 2082;
      *(_QWORD *)v48 = v28;
      *(_WORD *)&v48[8] = 1026;
      *(_DWORD *)v49 = v27;
      *(_WORD *)&v49[4] = 1026;
      *(_DWORD *)&v49[6] = v29;
      v50 = 2049;
      v51 = a5;
      v52 = 2049;
      v53 = a6;
      v54 = 1026;
      v55 = v25;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLNMEAScreener,screen,%{public}.2lf,accessory location %{public}s,continuousFailCount,%{public}d,continuousSuccessCount,%{public}d,LL,%{private}.7lf,%{private}.7lf,locTypeUsedForScreening,%{public}d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      v36 = "success";
      v37 = *(_DWORD *)(a1 + 384);
      v38 = *(_DWORD *)(a1 + 388);
      if (!v25)
        v36 = "not screened";
      *(_DWORD *)v42 = 134350595;
      *(double *)&v42[4] = a7;
      *(_WORD *)&v42[12] = 2082;
      *(_QWORD *)&v42[14] = v36;
      *(_WORD *)&v42[22] = 1026;
      *(_DWORD *)v43 = v37;
      *(_WORD *)&v43[4] = 1026;
      *(_DWORD *)&v43[6] = v38;
      *(_WORD *)&v43[10] = 2049;
      *(double *)&v43[12] = a5;
      *(_WORD *)&v43[20] = 2049;
      *(double *)&v43[22] = a6;
      *(_WORD *)&v43[30] = 1026;
      v44 = v25;
      LODWORD(v41) = 60;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNMEAScreener,screen,%{public}.2lf,accessory location %{public}s,continuousFailCount,%{public}d,continuousSuccessCount,%{public}d,LL,%{private}.7lf,%{private}.7lf,locTypeUsedForScreening,%{public}d", v42, v41);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaScreener::screenData(CLNmeaSentenceType, double, double, CLClientLocationReferenceFrame, BOOL, double)", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v19 = a1 + 352;
    v20 = v25;
    goto LABEL_21;
  }
  sub_10075476C(a1 + 352, 1, v25);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021512B8);
  v30 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_DWORD *)(a1 + 384);
    v32 = *(_DWORD *)(a1 + 388);
    *(_DWORD *)buf = 134350337;
    v46 = a7;
    v47 = 1026;
    *(_DWORD *)v48 = v31;
    *(_WORD *)&v48[4] = 1026;
    *(_DWORD *)&v48[6] = v32;
    *(_WORD *)v49 = 2049;
    *(double *)&v49[2] = a5;
    v50 = 2049;
    v51 = a6;
    v52 = 1026;
    LODWORD(v53) = v25;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLNMEAScreener,screen,%{public}.2lf,accessory location screening failed,continuousFailCount,%{public}d,continuousSuccessCount,%{public}d,LL,%{private}.7lf,%{private}.7lf,locTypeUsedForScreening,%{public}d", buf, 0x32u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v33 = *(_DWORD *)(a1 + 384);
    v34 = *(_DWORD *)(a1 + 388);
    *(_DWORD *)v42 = 134350337;
    *(double *)&v42[4] = a7;
    *(_WORD *)&v42[12] = 1026;
    *(_DWORD *)&v42[14] = v33;
    *(_WORD *)&v42[18] = 1026;
    *(_DWORD *)&v42[20] = v34;
    *(_WORD *)v43 = 2049;
    *(double *)&v43[2] = a5;
    *(_WORD *)&v43[10] = 2049;
    *(double *)&v43[12] = a6;
    *(_WORD *)&v43[20] = 1026;
    *(_DWORD *)&v43[22] = v25;
    LODWORD(v41) = 50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNMEAScreener,screen,%{public}.2lf,accessory location screening failed,continuousFailCount,%{public}d,continuousSuccessCount,%{public}d,LL,%{private}.7lf,%{private}.7lf,locTypeUsedForScreening,%{public}d", v42, v41, *(_OWORD *)v42, *(_QWORD *)&v42[16], *(_OWORD *)v43, *(_OWORD *)&v43[16]);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10075476C(uint64_t a1, char a2, int a3)
{
  uint64_t v3;
  int v5;
  char v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, char *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

BOOL sub_1007547AC(uint64_t a1, int a2, int *a3, double a4, double a5)
{
  double Current;
  uint64_t v11;
  int v12;
  double v13;
  int v14;
  double v16;
  __int128 v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  double v31;
  double v32;
  _BYTE v33[12];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE buf[32];
  _BYTE v43[24];

  *a3 = 0;
  if (!*(_BYTE *)(a1 + 1))
    return 1;
  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 432) = 50;
  if (*(_BYTE *)(a1 + 416)
    && vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 424)) < 20.0
    && *(_BYTE *)(a1 + 417)
    && *(double *)(a1 + 152) < 50.0
    && vabdd_f64(Current, *(double *)(a1 + 144)) < 3.0)
  {
    v11 = a1 + 128;
  }
  else
  {
    if (vabdd_f64(Current, *(double *)(a1 + 88)) >= 3.0)
    {
      if (vabdd_f64(Current, *(double *)(a1 + 200)) >= 1800.0)
      {
        if (vabdd_f64(Current, *(double *)(a1 + 256)) >= 1800.0)
        {
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021512B8);
          v18 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
          {
            v19 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v19 = (_QWORD *)*v19;
            v20 = *(_QWORD *)(a1 + 88);
            v21 = *(_QWORD *)(a1 + 200);
            v22 = *(_QWORD *)(a1 + 256);
            v23 = *(_QWORD *)(a1 + 312);
            *(_DWORD *)buf = 136381699;
            *(_QWORD *)&buf[4] = v19;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v20;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v21;
            *(_WORD *)v43 = 2048;
            *(_QWORD *)&v43[2] = v22;
            *(_WORD *)&v43[10] = 2050;
            *(_QWORD *)&v43[12] = v23;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLNMEAScreener,%{private}s,external location unavailable,gps,%{public}.1lf,wifi,%{public}.1lf,cell{public},%.1lf,LAC,%{public}.1lf", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_1021512B8);
            v24 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v24 = (_QWORD *)*v24;
            v25 = *(_QWORD *)(a1 + 88);
            v26 = *(_QWORD *)(a1 + 200);
            v27 = *(_QWORD *)(a1 + 256);
            v28 = *(_QWORD *)(a1 + 312);
            *(_DWORD *)v33 = 136381699;
            *(_QWORD *)&v33[4] = v24;
            v34 = 2050;
            v35 = v25;
            v36 = 2050;
            v37 = v26;
            v38 = 2048;
            v39 = v27;
            v40 = 2050;
            v41 = v28;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLNMEAScreener,%{private}s,external location unavailable,gps,%{public}.1lf,wifi,%{public}.1lf,cell{public},%.1lf,LAC,%{public}.1lf", v33, 52);
            v30 = (char *)v29;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaScreener::verifyWithExternalLocation(const double, const double, CLClientLocationReferenceFrame, const double, CLLocationType &)", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
          return 1;
        }
        v11 = a1 + 240;
        v12 = 6;
      }
      else
      {
        v11 = a1 + 184;
        v12 = 4;
      }
      goto LABEL_15;
    }
    v11 = a1 + 72;
  }
  v12 = 1;
LABEL_15:
  *a3 = v12;
  if (*(_BYTE *)(a1 + 416))
    v13 = 50.0;
  else
    v13 = 100.0;
  v14 = *(_DWORD *)(v11 + 36);
  if (v14 == a2)
    return sub_1007535E8(v11, (double *)(a1 + 32), (_DWORD *)(a1 + 432), v13, a4, a5, Current);
  if (a2 == 2)
  {
    v16 = *(double *)v11;
    v32 = *(double *)(v11 + 8);
    *(double *)v33 = v16;
    v31 = *(double *)(v11 + 24);
    if (sub_100E3E4B0((id *)(a1 + 408), v14, (double *)v33, &v32, &v31, 5, v16, v32, v31) == 2)
    {
      v17 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)buf = *(_OWORD *)v11;
      *(_OWORD *)&buf[16] = v17;
      *(_OWORD *)v43 = *(_OWORD *)(v11 + 32);
      *(_QWORD *)&v43[16] = *(_QWORD *)(v11 + 48);
      *(_QWORD *)buf = *(_QWORD *)v33;
      *(double *)&buf[8] = v32;
      *(double *)&buf[24] = v31;
      *(_DWORD *)&v43[4] = 2;
      return sub_1007535E8((uint64_t)buf, (double *)(a1 + 32), (_DWORD *)(a1 + 432), v13, a4, a5, Current);
    }
  }
  return 1;
}

uint64_t sub_100754BE8(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;

  if ((a3 & 0xFFFFFFF7) == 1)
  {
    if (a2)
    {
      v3 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)a1 = 0;
      *(_DWORD *)(a1 + 4) = v3 + 1;
      if (!*(_BYTE *)(a1 + 8) && v3 >= *(_DWORD *)(a1 + 16))
        *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      v4 = (*(_DWORD *)a1)++;
      *(_DWORD *)(a1 + 4) = 0;
      if (v4 >= *(_DWORD *)(a1 + 12))
        *(_BYTE *)(a1 + 8) = 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100754C70(uint64_t result, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  float v6;

  *(double *)result = a3;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = *(_DWORD *)(result + 8);
    do
    {
      if (*(_BYTE *)(v3 + 24))
      {
        ++*(_DWORD *)(result + 12);
        if (*(float *)(v3 + 20) > 0.0)
          ++*(_DWORD *)(result + 16);
        if (*(float *)(v3 + 16) >= 20.0)
          ++*(_DWORD *)(result + 20);
        if (*(float *)(v3 + 8) >= 60.0)
          ++*(_DWORD *)(result + 24);
        v6 = *(float *)(v3 + 12);
        if (v6 <= 90.0)
        {
          ++*(_DWORD *)(result + 28);
        }
        else if (v6 > 180.0)
        {
          if (v6 > 270.0)
            ++*(_DWORD *)(result + 40);
          else
            ++*(_DWORD *)(result + 36);
        }
        else
        {
          ++*(_DWORD *)(result + 32);
        }
      }
      v3 += 28;
      ++v5;
    }
    while (v3 != v4);
    *(_DWORD *)(result + 8) = v5;
  }
  return result;
}

BOOL sub_100754D84(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v12;

  if (*(double *)a1 <= 0.0)
    return 0;
  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(a1 + 12);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(a1 + 28);
  v12 = v3 <= 0;
  v4 = v3 > 0;
  v5 = 1;
  if (v12)
    v6 = 1;
  else
    v6 = 2;
  if (*(int *)(a1 + 32) <= 0)
    v7 = v4;
  else
    v7 = v6;
  if (*(int *)(a1 + 36) > 0)
    ++v7;
  if (*(int *)(a1 + 40) > 0)
    ++v7;
  if (v7 <= 2)
  {
    v8 = *(_DWORD *)(a1 + 20);
    v9 = (double)v2 / (double)v1 * 100.0 < 50.0 || (double)v8 / (double)v2 * 100.0 < 40.0;
    if (v9 && ((v10 = *(_DWORD *)(a1 + 24), v10 < 5) || v8 <= 4))
    {
      v12 = v7 <= 1 || v10 <= 3;
      return !v12;
    }
    else
    {
      return 1;
    }
  }
  return v5;
}

uint64_t sub_100754E54(uint64_t result, int a2, double a3, double a4, double a5)
{
  if (a2)
    *(double *)(result + 40) = a3;
  *(double *)(result + 48) = a3;
  *(double *)(result + 56) = a4;
  *(double *)(result + 64) = a5;
  *(_QWORD *)(result + 72) = 0xBFF0000000000000;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  return result;
}

void sub_100754E74(uint64_t a1, double *a2, double *a3, double a4, double a5, double a6, double a7)
{
  double v14;
  NSObject *v15;
  const char *v16;
  double v17;
  double v18;
  NSObject *v20;
  double v21;
  double v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  double v29;
  double v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  int v39;
  double v40;
  double v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint8_t *v48;
  double v49;
  double v50;
  int v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  uint8_t buf[4];
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  double v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;

  if (sub_10011CE88(a5, a6))
  {
    v14 = *(double *)(a1 + 48);
    if (vabdd_f64(v14, a4) >= 0.001)
    {
      v17 = *(double *)(a1 + 40);
      if (v17 < 0.0)
      {
        *(double *)(a1 + 40) = a4;
        v17 = a4;
      }
      if (a7 < 8.0 && !*(_DWORD *)(a1 + 92) && vabdd_f64(a4, v17) < 30.0)
      {
        *(double *)(a1 + 48) = a4;
        *(double *)(a1 + 56) = a5;
        *(double *)(a1 + 64) = a6;
        *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        return;
      }
      v18 = vabdd_f64(a4, v14);
      if (v14 >= 0.0 && v18 <= 5.0)
      {
        ++*(_DWORD *)(a1 + 88);
        *(double *)(a1 + 48) = a4;
        v21 = sub_10011E634((double *)a1, *(double *)(a1 + 56), *(double *)(a1 + 64), a5, a6, 0.0);
        if (v21 > 5.0)
        {
          v22 = sub_1010B9BE4((double *)a1, *(double *)(a1 + 56), *(double *)(a1 + 64), a5, a6);
          if (v22 >= 0.0)
          {
            *(double *)(a1 + 64) = a6;
            *(double *)(a1 + 72) = v22;
            *(double *)(a1 + 56) = a5;
          }
        }
        v23 = *(_DWORD *)(a1 + 92);
        HIDWORD(v24) = 1079574528;
        LODWORD(v24) = *(_DWORD *)(a1 + 88);
        v25 = *a2;
        v49 = (double)v23 * 100.0 / (double)v24;
        v50 = *a3;
        v26 = *(double *)(a1 + 72);
        v27 = -1.0;
        if (v26 >= 0.0)
        {
          v37 = fmod(v25 - v26, 360.0);
          if (v37 < 0.0)
            v37 = v37 + 360.0;
          if (v37 > 180.0)
            v37 = v37 + -360.0;
          v27 = fabs(v37);
          if (v25 < 0.0 || v27 > 45.0)
          {
            if (a7 > 5.0 || v25 < 0.0 || *(_DWORD *)(a1 + 84) >= 4u && v49 > 25.0)
            {
              if (a7 > 5.0)
                ++*(_DWORD *)(a1 + 80);
              if (v25 >= 0.0)
              {
                if (a7 > 20.0 || *(_DWORD *)(a1 + 80) >= 6u)
                {
                  *(_DWORD *)(a1 + 92) = v23 + 1;
                  *a2 = v26;
                  v39 = *(_DWORD *)(a1 + 84);
                  if (a7 > 5.0)
                    ++v39;
                  *(_DWORD *)(a1 + 84) = v39;
                }
              }
              else
              {
                *(_DWORD *)(a1 + 92) = v23 + 1;
                ++*(_DWORD *)(a1 + 100);
                *a2 = v26;
              }
            }
          }
          else if (*(_DWORD *)(a1 + 80) > 4u)
          {
            if (v27 > 22.5 && v50 < v27)
            {
              ++*(_DWORD *)(a1 + 96);
              *a3 = v27;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 80) = 0;
          }
        }
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v28 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
        {
          v29 = *a2;
          v30 = *a3;
          v31 = *(_DWORD *)(a1 + 88);
          v32 = *(_DWORD *)(a1 + 92);
          v33 = *(_DWORD *)(a1 + 96);
          v34 = *(_DWORD *)(a1 + 100);
          v36 = *(_DWORD *)(a1 + 80);
          v35 = *(_DWORD *)(a1 + 84);
          *(_DWORD *)buf = 134353153;
          v86 = a4;
          v87 = 2050;
          v88 = v25;
          v89 = 2050;
          v90 = v29;
          v91 = 2050;
          v92 = v27;
          v93 = 2050;
          v94 = v50;
          v95 = 2050;
          v96 = v30;
          v97 = 2049;
          v98 = a5;
          v99 = 2049;
          v100 = a6;
          v101 = 2050;
          v102 = a7;
          v103 = 2050;
          v104 = v21;
          v105 = 1026;
          v106 = v31;
          v107 = 1026;
          v108 = v32;
          v109 = 1026;
          v110 = v33;
          v111 = 1026;
          v112 = v35;
          v113 = 2050;
          v114 = v49;
          v115 = 1026;
          v116 = v34;
          v117 = 1026;
          v118 = v36;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLCourseScreener,%{public}.2lf,prevCourse,%{public}.2lf,newCourse,%{public}.2lf,diff,%{public}.2lf,prevCourseUnc,%{public}.2lf,newCourseUnc,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf,distance,%{public}.2lf,screenedCount,%{public}d,changedCount,%{public}d,uncChangedCount,%{public}d,highSpeedChangedCount,%{public}d,courseChangedPercentage,%{public}.2lf,invalidCourseCorrected,%{public}d,contCourseChangeRequired,%{public}d", buf, 0x94u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021512B8);
          v40 = *a2;
          v41 = *a3;
          v42 = *(_DWORD *)(a1 + 88);
          v43 = *(_DWORD *)(a1 + 92);
          v44 = *(_DWORD *)(a1 + 96);
          v45 = *(_DWORD *)(a1 + 100);
          v47 = *(_DWORD *)(a1 + 80);
          v46 = *(_DWORD *)(a1 + 84);
          v51 = 134353153;
          v52 = a4;
          v53 = 2050;
          v54 = v25;
          v55 = 2050;
          v56 = v40;
          v57 = 2050;
          v58 = v27;
          v59 = 2050;
          v60 = v50;
          v61 = 2050;
          v62 = v41;
          v63 = 2049;
          v64 = a5;
          v65 = 2049;
          v66 = a6;
          v67 = 2050;
          v68 = a7;
          v69 = 2050;
          v70 = v21;
          v71 = 1026;
          v72 = v42;
          v73 = 1026;
          v74 = v43;
          v75 = 1026;
          v76 = v44;
          v77 = 1026;
          v78 = v46;
          v79 = 2050;
          v80 = v49;
          v81 = 1026;
          v82 = v45;
          v83 = 1026;
          v84 = v47;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLCourseScreener,%{public}.2lf,prevCourse,%{public}.2lf,newCourse,%{public}.2lf,diff,%{public}.2lf,prevCourseUnc,%{public}.2lf,newCourseUnc,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf,distance,%{public}.2lf,screenedCount,%{public}d,changedCount,%{public}d,uncChangedCount,%{public}d,highSpeedChangedCount,%{public}d,courseChangedPercentage,%{public}.2lf,invalidCourseCorrected,%{public}d,contCourseChangeRequired,%{public}d", &v51, 148);
          goto LABEL_69;
        }
      }
      else
      {
        *(double *)(a1 + 40) = a4;
        *(double *)(a1 + 48) = a4;
        *(double *)(a1 + 56) = a5;
        *(double *)(a1 + 64) = a6;
        *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v20 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349825;
          v86 = a4;
          v87 = 2049;
          v88 = a5;
          v89 = 2049;
          v90 = a6;
          v91 = 2050;
          v92 = a7;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLCourseScreener,%{public}.2lf,reset,unable to screen,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021512B8);
          v51 = 134349825;
          v52 = a4;
          v53 = 2049;
          v54 = a5;
          v55 = 2049;
          v56 = a6;
          v57 = 2050;
          v58 = a7;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLCourseScreener,%{public}.2lf,reset,unable to screen,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf", &v51, 42);
          goto LABEL_69;
        }
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      v15 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v86 = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLCourseScreener,%{public}.2lf,duplicate data ignored", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v51 = 134349056;
        v52 = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLCourseScreener,%{public}.2lf,duplicate data ignored", &v51, 12);
LABEL_69:
        v48 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLCourseScreener::screenAndCorrectCourse(const CFAbsoluteTime, const double, const double, const double, double &, double &)", "%s\n", v16);
        if (v48 != buf)
          free(v48);
      }
    }
  }
}

void sub_10075563C(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

double sub_100755668()
{
  double result;

  result = sub_100515444() + -259200.0;
  dword_102303C90 = result;
  return result;
}

_QWORD *sub_100755694(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int v3;

  v3 = 10;
  result = (_QWORD *)sub_100FA04D8(a1, &v3, qword_102303C98, a2);
  *result = off_1021512E8;
  result[38] = 0;
  result[39] = 0;
  result[37] = 0;
  return result;
}

uint64_t sub_1007556DC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1021512E8;
  v3 = (void **)(a1 + 296);
  sub_100756E08(&v3);
  return sub_100FA05F0(a1);
}

void sub_100755724(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_1021512E8;
  v2 = (void **)(a1 + 296);
  sub_100756E08(&v2);
  sub_100FA05F0(a1);
  operator delete();
}

uint64_t sub_100755780()
{
  return 3;
}

uint64_t sub_100755788(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 296);
  v3 = *(_QWORD *)(a1 + 304);
  if (v2 != v3)
  {
    v5 = a2[1];
    do
    {
      if (v5 >= a2[2])
      {
        v5 = sub_100756EF8(a2, v2);
      }
      else
      {
        sub_100756E94((uint64_t)a2, v2);
        v5 += 56;
      }
      a2[1] = v5;
      v2 += 56;
    }
    while (v2 != v3);
  }
  return 1;
}

uint64_t sub_1007557F8(_QWORD *a1, FILE *a2)
{
  NSObject *v4;
  std::string::size_type v5;
  uint64_t v6;
  NSObject *v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  NSData *v11;
  double v12;
  id v13;
  TRANSITPbRegionPreloadManifest *v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  unsigned int v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  _BYTE *v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string::size_type v30;
  _BYTE *v31;
  char *v32;
  NSObject *v33;
  double v35;
  NSObject *v36;
  unsigned int v37;
  CFAbsoluteTime Current;
  NSMutableArray *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  NSObject *v48;
  id v49;
  id v50;
  char v51;
  uint64_t v52;
  void *v53;
  void *v54;
  double v55;
  double v56;
  char v57;
  NSObject *v58;
  const char *v59;
  char *v60;
  id v61;
  const char *v62;
  char *v63;
  id v64;
  NSObject *v65;
  _BYTE *v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  std::string::size_type v70;
  const char *v71;
  char *v72;
  const char *v73;
  uint64_t v74;
  unsigned int v75;
  CFAbsoluteTime v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  _QWORD *v89;
  int v90;
  uint64_t *v91;
  NSMutableArray *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __n128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::string v103;
  int v104;
  double v105;
  __int16 v106;
  double v107;
  int v108;
  _BYTE *v109;
  __int16 v110;
  _BYTE *v111;
  __int16 v112;
  void *__p;
  __int16 v114;
  unint64_t v115;
  char v116;
  uint8_t v117[128];
  _BYTE v118[14];
  uint64_t v119;
  double v120;
  __int16 v121;
  void *v122;
  void *v123;
  _BYTE v124[128];
  std::string::value_type __ptr[1040];
  _BYTE buf[14];
  uint64_t v127;
  _BYTE v128[10];
  _BYTE v129[10];
  unsigned int v130;

  if (!a2)
    sub_101907640(qword_1022A02D0 == -1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102151370);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Traversing preload manifest file", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    *(_WORD *)__ptr = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Traversing preload manifest file", __ptr, 2);
    v69 = (char *)v68;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v68);
    if (v69 != buf)
      free(v69);
  }
  memset(&v103, 0, sizeof(v103));
  do
  {
    v5 = fread(__ptr, 1uLL, 0x400uLL, a2);
    std::string::append(&v103, __ptr, v5);
  }
  while (v5 && !feof(a2) && !ferror(a2));
  if (ferror(a2))
  {
    v6 = 0;
    goto LABEL_72;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102151370);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v103.__r_.__value_.__l.__size_;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = size;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Preload manifest tile size = %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    v70 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v70 = v103.__r_.__value_.__l.__size_;
    *(_DWORD *)v118 = 134217984;
    *(_QWORD *)&v118[4] = v70;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Preload manifest tile size = %lu", v118);
    v72 = (char *)v71;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v71);
    if (v72 != buf)
      free(v72);
  }
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v103;
  else
    v9 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    v10 = v103.__r_.__value_.__l.__size_;
  v11 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v9, v10);
  v12 = COERCE_DOUBLE(objc_autoreleasePoolPush());
  v13 = objc_msgSend(objc_alloc((Class)PBDataReader), "initWithData:", v11);
  v14 = [TRANSITPbRegionPreloadManifest alloc];
  v15 = -[TRANSITPbRegionPreloadManifest readFrom:](v14, "readFrom:", v13);
  if (!v14)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "failed to allocate transit tile", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_70;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    *(_WORD *)v118 = 0;
    LODWORD(v84) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "failed to allocate transit tile", v118, *(_QWORD *)&v84);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v20);
LABEL_157:
    if (v21 == buf)
      goto LABEL_70;
LABEL_158:
    free(v21);
    goto LABEL_70;
  }
  if ((v15 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    v22 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v23 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      v24 = v103.__r_.__value_.__l.__size_;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 16))(buf, a1);
      v25 = (v23 & 0x80u) == 0 ? v23 : v24;
      v26 = v128[1] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v118 = 134349314;
      *(_QWORD *)&v118[4] = v25;
      *(_WORD *)&v118[12] = 2082;
      v119 = (uint64_t)v26;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "failed to decode transit tile protobuf, encrypted=%{public}lu tile=%{public}s", v118, 0x16u);
      if ((v128[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_70;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    v27 = qword_1022A02D8;
    v28 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    v29 = v103.__r_.__value_.__l.__size_;
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 16))(v118, a1);
    if ((v28 & 0x80u) == 0)
      v30 = v28;
    else
      v30 = v29;
    if ((SBYTE1(v120) & 0x80u) == 0)
      v31 = v118;
    else
      v31 = *(_BYTE **)v118;
    v108 = 134349314;
    v109 = (_BYTE *)v30;
    v110 = 2082;
    v111 = v31;
    LODWORD(v84) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 17, "failed to decode transit tile protobuf, encrypted=%{public}lu tile=%{public}s", &v108, *(_QWORD *)&v84);
    v21 = v32;
    if (SBYTE1(v120) < 0)
      operator delete(*(void **)v118);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v21);
    if (v21 == buf)
      goto LABEL_70;
    goto LABEL_158;
  }
  if (-[TRANSITPbRegionPreloadManifest hasVersion](v14, "hasVersion")
    && -[TRANSITPbRegionPreloadManifest hasGenerationTimeSecs](v14, "hasGenerationTimeSecs")
    && -[TRANSITPbRegionPreloadManifest marketsCount](v14, "marketsCount"))
  {
    -[TRANSITPbRegionPreloadManifest generationTimeSecs](v14, "generationTimeSecs");
    v17 = v16;
    if (-[TRANSITPbRegionPreloadManifest hasExpirationAgeSecs](v14, "hasExpirationAgeSecs"))
      v18 = -[TRANSITPbRegionPreloadManifest expirationAgeSecs](v14, "expirationAgeSecs");
    else
      v18 = 15292800;
    v35 = v17 - kCFAbsoluteTimeIntervalSince1970;
    *((_DWORD *)a1 + 46) = -[TRANSITPbRegionPreloadManifest version](v14, "version");
    *(_QWORD *)((char *)a1 + 52) = 3865470568200000;
    a1[8] = -1;
    *((double *)a1 + 22) = v35;
    *((_DWORD *)a1 + 50) = v18;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    v36 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v37 = -[TRANSITPbRegionPreloadManifest version](v14, "version");
      Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 1800000;
      v127 = 0x800000DBBA00400;
      *(double *)v128 = v35;
      *(_WORD *)&v128[8] = 2048;
      *(double *)v129 = Current - v35;
      *(_WORD *)&v129[8] = 1024;
      v130 = v18;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d", buf, 0x2Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102151370);
      v74 = qword_1022A02D8;
      v75 = -[TRANSITPbRegionPreloadManifest version](v14, "version");
      v76 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)v118 = 67110400;
      *(_DWORD *)&v118[4] = v75;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = 1800000;
      v119 = 0x800000DBBA00400;
      v120 = v35;
      v121 = 2048;
      *(double *)&v122 = v76 - v35;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 2, "ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d", v118, 46, LODWORD(v85), v86, v88, v90);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v77);
      if (v78 != buf)
        free(v78);
    }
    v87 = v12;
    v89 = a1;
    v91 = a1 + 37;
    sub_100756E48(a1 + 37);
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v39 = -[TRANSITPbRegionPreloadManifest markets](v14, "markets");
    v40 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v99, v124, 16);
    if (v40)
    {
      v41 = *(_QWORD *)v100;
      v92 = v39;
      do
      {
        v42 = 0;
        do
        {
          if (*(_QWORD *)v100 != v41)
            objc_enumerationMutation(v39);
          v43 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)v42);
          if (objc_msgSend(v43, "hasNorthWestLatitude")
            && objc_msgSend(v43, "hasNorthWestLongitude")
            && objc_msgSend(v43, "hasSouthEastLatitude")
            && objc_msgSend(v43, "hasSouthEastLongitude"))
          {
            v98 = 0uLL;
            objc_msgSend(v43, "northWestLatitude");
            *(_QWORD *)&v98 = v44;
            objc_msgSend(v43, "northWestLongitude");
            *((_QWORD *)&v98 + 1) = v45;
            v97 = 0uLL;
            objc_msgSend(v43, "southEastLatitude");
            v97.n128_u64[0] = v46;
            objc_msgSend(v43, "southEastLongitude");
            v97.n128_u64[1] = v47;
            sub_100F55204((uint64_t)v118, &v98, &v97);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102151370);
            v48 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218752;
              *(_QWORD *)&buf[4] = v98;
              *(_WORD *)&buf[12] = 2048;
              v127 = *((_QWORD *)&v98 + 1);
              *(_WORD *)v128 = 2048;
              *(_QWORD *)&v128[2] = v97.n128_u64[0];
              *(_WORD *)v129 = 2048;
              *(_QWORD *)&v129[2] = v97.n128_u64[1];
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}", buf, 0x2Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102151370);
              v108 = 134218752;
              v109 = (_BYTE *)v98;
              v110 = 2048;
              v111 = (_BYTE *)*((_QWORD *)&v98 + 1);
              v112 = 2048;
              __p = (void *)v97.n128_u64[0];
              v114 = 2048;
              v115 = v97.n128_u64[1];
              LODWORD(v84) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}", COERCE_DOUBLE(&v108), v84, v85, v87);
              v63 = (char *)v62;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v62);
              if (v63 != buf)
                free(v63);
            }
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            v49 = objc_msgSend(v43, "tiles");
            v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v93, v117, 16);
            if (v50)
            {
              v51 = 0;
              v52 = *(_QWORD *)v94;
              do
              {
                v53 = 0;
                do
                {
                  if (*(_QWORD *)v94 != v52)
                    objc_enumerationMutation(v49);
                  v54 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)v53);
                  if (objc_msgSend(v54, "hasTileType")
                    && !objc_msgSend(v54, "tileType")
                    && objc_msgSend(v54, "hasTileX")
                    && objc_msgSend(v54, "hasTileY"))
                  {
                    *(_DWORD *)buf = 0;
                    sub_1000C1928((uint64_t)&v108, buf);
                    LODWORD(v109) = objc_msgSend(v54, "tileX");
                    HIDWORD(v109) = objc_msgSend(v54, "tileY");
                    v55 = sub_1001C087C((uint64_t)&v108);
                    v56 = sub_1001C0858((uint64_t)&v108);
                    if (objc_msgSend(v54, "hasIsAllowOverCellular"))
                      v57 = objc_msgSend(v54, "isAllowOverCellular");
                    else
                      v57 = 0;
                    if (qword_1022A02D0 != -1)
                      dispatch_once(&qword_1022A02D0, &stru_102151370);
                    v58 = qword_1022A02D8;
                    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(double *)&buf[4] = v55;
                      *(_WORD *)&buf[12] = 2048;
                      v127 = *(_QWORD *)&v56;
                      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Adding new tile to market, [%.06lf,%.06lf]", buf, 0x16u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A02D0 != -1)
                        dispatch_once(&qword_1022A02D0, &stru_102151370);
                      v104 = 134218240;
                      v105 = v55;
                      v106 = 2048;
                      v107 = v56;
                      LODWORD(v84) = 22;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Adding new tile to market, [%.06lf,%.06lf]", COERCE_DOUBLE(&v104), v84);
                      v60 = (char *)v59;
                      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v59);
                      if (v60 != buf)
                        free(v60);
                    }
                    sub_100F551F0((uint64_t)buf, v57, v55, v56);
                    sub_100F55220(v118, (__int128 *)buf);
                    if (v116 < 0)
                      operator delete(__p);
                    v51 = 1;
                  }
                  v53 = (char *)v53 + 1;
                }
                while (v50 != v53);
                v61 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v93, v117, 16);
                v50 = v61;
              }
              while (v61);
              v39 = v92;
              if ((v51 & 1) != 0)
                sub_100756BEC(v91, (uint64_t)v118);
            }
            if (*(double *)&v122 != 0.0)
            {
              v123 = v122;
              operator delete(v122);
            }
          }
          v42 = (char *)v42 + 1;
        }
        while (v42 != v40);
        v64 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v99, v124, 16);
        v40 = v64;
      }
      while (v64);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    v12 = v87;
    v65 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v89 + 16))(buf, v89);
      v66 = v128[1] >= 0 ? buf : *(_BYTE **)buf;
      v67 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v89[38] - v89[37]) >> 3);
      *(_DWORD *)v118 = 136315394;
      *(_QWORD *)&v118[4] = v66;
      *(_WORD *)&v118[12] = 2048;
      v119 = v67;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "loaded transit tile %s with %lu regions", v118, 0x16u);
      if ((v128[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102151370);
      v79 = qword_1022A02D8;
      (*(void (**)(_BYTE *__return_ptr))(*v89 + 16))(v118);
      if ((SBYTE1(v120) & 0x80u) == 0)
        v80 = v118;
      else
        v80 = *(_BYTE **)v118;
      v81 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v89[38] - v89[37]) >> 3);
      v108 = 136315394;
      v109 = v80;
      v110 = 2048;
      v111 = (_BYTE *)v81;
      LODWORD(v84) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "loaded transit tile %s with %lu regions", (const char *)&v108, *(_QWORD *)&v84);
      v83 = v82;
      if (SBYTE1(v120) < 0)
        operator delete(*(void **)v118);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v83);
      if (v83 != buf)
        free(v83);
      v6 = 1;
      v12 = v87;
    }
    else
    {
      v6 = 1;
    }
    goto LABEL_71;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102151370);
  v33 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "failed to get fields in manifest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102151370);
    *(_WORD *)v118 = 0;
    LODWORD(v84) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "failed to get fields in manifest", v118, *(_QWORD *)&v84);
    v21 = (char *)v73;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v73);
    goto LABEL_157;
  }
LABEL_70:
  v6 = 0;
LABEL_71:
  objc_autoreleasePoolPop(*(void **)&v12);
LABEL_72:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  return v6;
}

void sub_100756B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100756BEC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = sub_100756EF8(a1, a2);
  }
  else
  {
    sub_100756E94((uint64_t)a1, a2);
    v4 = v3 + 56;
  }
  a1[1] = v4;
  return v4 - 56;
}

uint64_t sub_100756C2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)"CLRegionPreloadManifestTile(", 28);
  v5 = sub_100263F7C(v4, (uint64_t)"super=", 6);
  sub_100619604(a1, __p);
  if ((v14 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v7 = v14;
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)", numMarkets=", 13);
  v10 = (_QWORD *)std::ostream::operator<<(v9, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 3));
  sub_100263F7C(v10, (uint64_t)")", 1);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v11;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_100756D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_100756DBC()
{
  return 180.0;
}

double sub_100756DC8()
{
  return 360.0;
}

uint64_t sub_100756DD4()
{
  return 256;
}

void sub_100756DDC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100756E08(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100756E48((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100756E48(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *sub_100756E94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  result = sub_100757038((_QWORD *)(v3 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 56;
  return result;
}

void sub_100756EF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100756EF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10025B800(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  sub_100757038((_QWORD *)v11 + 4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v16 += 56;
  sub_1007570B0(a1, v15);
  v13 = a1[1];
  sub_100757254((uint64_t)v15);
  return v13;
}

void sub_100757024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100757254((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100757038(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100259C18(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 7);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100757094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007570B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100757124((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100757124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1007571DC((uint64_t)v11);
  return v9;
}

uint64_t sub_1007571DC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100757210(a1);
  return a1;
}

void sub_100757210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 32);
    if (v3)
    {
      *(_QWORD *)(v1 + 40) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t sub_100757254(uint64_t a1)
{
  sub_100757288(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100757288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

void sub_1007572E0()
{
  operator new();
}

void sub_100757330()
{
  operator delete();
}

void sub_100757354(id a1)
{
  operator new();
}

void sub_100757394()
{
  operator delete();
}

uint64_t sub_1007573A8()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 182) < 0x2A) & (0x30000000003uLL >> (dword_102303CA8
                                                                                            + 74));
}

BOOL sub_10075742C()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)MGCopyAnswer(CFSTR("contains-cellular-radio"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

BOOL sub_10075749C()
{
  const __CFBoolean *v0;
  int Value;

  v0 = (const __CFBoolean *)MGCopyAnswer(CFSTR("gas-gauge-battery"), 0);
  Value = CFBooleanGetValue(v0);
  if (v0)
    CFRelease(v0);
  return Value != 0;
}

uint64_t sub_1007574E4()
{
  uint64_t result;
  const void *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  uint8_t *v8;
  char *v9;
  char *v10;
  uint8_t v11[16];
  int v12;
  char v13;
  int v14;
  uint8_t *v15;
  uint8_t buf[16];
  int v17;
  char v18;

  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 2;
  v17 = 1244490093;
  *(_OWORD *)buf = xmmword_101BBF8A0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 5;
  v12 = 1377801277;
  *(_OWORD *)v11 = xmmword_101BBF8B4;
  if ((MGIsDeviceOfType(v11) & 1) != 0)
    return 5;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 19;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 20;
  v17 = 1839812531;
  *(_OWORD *)buf = xmmword_101BBF8C8;
  if ((MGIsDeviceOfType(buf) & 1) != 0 || (MGIsDeviceOfType(0) & 1) != 0)
    return 20;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 52;
  v17 = -435113336;
  *(_OWORD *)buf = xmmword_101BBF8DC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 53;
  v17 = -1997581659;
  *(_OWORD *)buf = xmmword_101BBF8F0;
  if ((MGIsDeviceOfType(buf) & 1) != 0 || (MGIsDeviceOfType(0) & 1) != 0)
    return 158;
  v17 = -1441055153;
  *(_OWORD *)buf = xmmword_101BBF904;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 159;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 160;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 3;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 6;
  v17 = 1602014129;
  *(_OWORD *)buf = xmmword_101BBF918;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 7;
  v17 = -810116762;
  *(_OWORD *)buf = xmmword_101BBF92C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 8;
  v17 = -1195351767;
  *(_OWORD *)buf = xmmword_101BBF940;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 9;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 10;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 11;
  v17 = 1789837692;
  *(_OWORD *)buf = xmmword_101BBF954;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 13;
  v17 = 48355600;
  *(_OWORD *)buf = xmmword_101BBF968;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 14;
  v17 = -1239654590;
  *(_OWORD *)buf = xmmword_101BBF97C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 15;
  v17 = -679691073;
  *(_OWORD *)buf = xmmword_101BBF990;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 16;
  v17 = -1579092758;
  *(_OWORD *)buf = xmmword_101BBF9A4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 17;
  v17 = 1430379884;
  *(_OWORD *)buf = xmmword_101BBF9B8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 18;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 21;
  v17 = -798153473;
  *(_OWORD *)buf = xmmword_101BBF9CC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 22;
  v17 = -776721724;
  *(_OWORD *)buf = xmmword_101BBF9E0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 23;
  v17 = -1403227947;
  *(_OWORD *)buf = xmmword_101BBF9F4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 24;
  v17 = 729118884;
  *(_OWORD *)buf = xmmword_101BBFA08;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 25;
  v17 = 1046806126;
  *(_OWORD *)buf = xmmword_101BBFA1C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 26;
  v12 = -188760945;
  *(_OWORD *)v11 = xmmword_101BBFA30;
  if ((MGIsDeviceOfType(v11) & 1) != 0)
    return 26;
  v17 = -489993439;
  *(_OWORD *)buf = xmmword_101BBFA44;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 27;
  v17 = 886875686;
  *(_OWORD *)buf = xmmword_101BBFA58;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 28;
  v17 = -1639077591;
  *(_OWORD *)buf = xmmword_101BBFA6C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 29;
  v17 = 338555555;
  *(_OWORD *)buf = xmmword_101BBFA80;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 30;
  v17 = 1032708406;
  *(_OWORD *)buf = xmmword_101BBFA94;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 31;
  v17 = 729903963;
  *(_OWORD *)buf = xmmword_101BBFAA8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 32;
  v17 = 1278131292;
  *(_OWORD *)buf = xmmword_101BBFABC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 33;
  v17 = -1841712216;
  *(_OWORD *)buf = xmmword_101BBFAD0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 34;
  v17 = 1275676051;
  *(_OWORD *)buf = xmmword_101BBFAE4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 35;
  v17 = 1908474541;
  *(_OWORD *)buf = xmmword_101BBFAF8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 36;
  v17 = -1022451852;
  *(_OWORD *)buf = xmmword_101BBFB0C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 62;
  v17 = 1729782187;
  *(_OWORD *)buf = xmmword_101BBFB20;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 63;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 37;
  v17 = 368885834;
  *(_OWORD *)buf = xmmword_101BBFB34;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 38;
  v17 = -414334491;
  *(_OWORD *)buf = xmmword_101BBFB48;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 39;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 40;
  v17 = -526227167;
  *(_OWORD *)buf = xmmword_101BBFB5C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 41;
  v17 = -1509831889;
  *(_OWORD *)buf = xmmword_101BBFB70;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 42;
  v17 = 1960366092;
  *(_OWORD *)buf = xmmword_101BBFB84;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 43;
  v17 = -2114570942;
  *(_OWORD *)buf = xmmword_101BBFB98;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 148;
  v17 = -1527788847;
  *(_OWORD *)buf = xmmword_101BBFBAC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 44;
  v17 = 1532898719;
  *(_OWORD *)buf = xmmword_101BBFBC0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 45;
  v17 = 996646949;
  *(_OWORD *)buf = xmmword_101BBFBD4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 46;
  v17 = -563086000;
  *(_OWORD *)buf = xmmword_101BBFBE8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 47;
  v17 = 659506830;
  *(_OWORD *)buf = xmmword_101BBFBFC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 48;
  v17 = 213746202;
  *(_OWORD *)buf = xmmword_101BBFC10;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 49;
  v17 = 289690957;
  *(_OWORD *)buf = xmmword_101BBFC24;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 50;
  v17 = 586720268;
  *(_OWORD *)buf = xmmword_101BBFC38;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 51;
  v17 = -350584140;
  *(_OWORD *)buf = xmmword_101BBFC4C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 54;
  v17 = 368778837;
  *(_OWORD *)buf = xmmword_101BBFC60;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 55;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 56;
  v17 = -1418383976;
  *(_OWORD *)buf = xmmword_101BBFC74;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 57;
  v17 = -1213485500;
  *(_OWORD *)buf = xmmword_101BBFC88;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 58;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 59;
  v17 = 1425254930;
  *(_OWORD *)buf = xmmword_101BBFC9C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 60;
  v17 = 1899561076;
  *(_OWORD *)buf = xmmword_101BBFCB0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 61;
  v17 = -199226823;
  *(_OWORD *)buf = xmmword_101BBFCC4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 64;
  v12 = 1412427398;
  *(_OWORD *)v11 = xmmword_101BBFCD8;
  if ((MGIsDeviceOfType(v11) & 1) != 0)
    return 64;
  v17 = -1283070668;
  *(_OWORD *)buf = xmmword_101BBFCEC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 65;
  v12 = 160260070;
  *(_OWORD *)v11 = xmmword_101BBFD00;
  if ((MGIsDeviceOfType(v11) & 1) != 0)
    return 65;
  v17 = 1711910369;
  *(_OWORD *)buf = xmmword_101BBFD14;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 66;
  v17 = -1282800328;
  *(_OWORD *)buf = xmmword_101BBFD28;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 67;
  v17 = 897736383;
  *(_OWORD *)buf = xmmword_101BBFD3C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 68;
  v17 = -453987047;
  *(_OWORD *)buf = xmmword_101BBFD50;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 69;
  v17 = 450980336;
  *(_OWORD *)buf = xmmword_101BBFD64;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 70;
  v17 = 414393924;
  *(_OWORD *)buf = xmmword_101BBFD78;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 71;
  v17 = -996295886;
  *(_OWORD *)buf = xmmword_101BBFD8C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 72;
  v17 = -337121064;
  *(_OWORD *)buf = xmmword_101BBFDA0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 73;
  v17 = -2092955395;
  *(_OWORD *)buf = xmmword_101BBFDB4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 74;
  v17 = 674998600;
  *(_OWORD *)buf = xmmword_101BBFDC8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 75;
  v17 = 317289457;
  *(_OWORD *)buf = xmmword_101BBFDDC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 76;
  v17 = 401945557;
  *(_OWORD *)buf = xmmword_101BBFDF0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 77;
  v17 = -232427879;
  *(_OWORD *)buf = xmmword_101BBFE04;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 78;
  v17 = -427474227;
  *(_OWORD *)buf = xmmword_101BBFE18;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 79;
  v12 = 1477534141;
  *(_OWORD *)v11 = xmmword_101BBFE2C;
  if ((MGIsDeviceOfType(v11) & 1) != 0)
    return 79;
  v17 = -1843102369;
  *(_OWORD *)buf = xmmword_101BBFE40;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 80;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 81;
  v17 = 470738981;
  *(_OWORD *)buf = xmmword_101BBFE54;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 82;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 83;
  v17 = 710807826;
  *(_OWORD *)buf = xmmword_101BBFE68;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 84;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 85;
  v17 = 1860682089;
  *(_OWORD *)buf = xmmword_101BBFE7C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 86;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 87;
  v17 = -2085056298;
  *(_OWORD *)buf = xmmword_101BBFE90;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 88;
  v17 = 2146530832;
  *(_OWORD *)buf = xmmword_101BBFEA4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 89;
  v17 = -1742178852;
  *(_OWORD *)buf = xmmword_101BBFEB8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 90;
  v17 = 617174804;
  *(_OWORD *)buf = xmmword_101BBFECC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 91;
  v17 = 1330813729;
  *(_OWORD *)buf = xmmword_101BBFEE0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 92;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 93;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 94;
  v17 = 152704997;
  *(_OWORD *)buf = xmmword_101BBFEF4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 95;
  v17 = -338255497;
  *(_OWORD *)buf = xmmword_101BBFF08;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 96;
  v17 = -1040127899;
  *(_OWORD *)buf = xmmword_101BBFF1C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 97;
  v17 = 283967174;
  *(_OWORD *)buf = xmmword_101BBFF30;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 98;
  v17 = 1530707451;
  *(_OWORD *)buf = xmmword_101BBFF44;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 99;
  v17 = -871113647;
  *(_OWORD *)buf = xmmword_101BBFF58;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 100;
  v17 = 483476120;
  *(_OWORD *)buf = xmmword_101BBFF6C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 101;
  v17 = 1472775220;
  *(_OWORD *)buf = xmmword_101BBFF80;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 102;
  v17 = 56502976;
  *(_OWORD *)buf = xmmword_101BBFF94;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 103;
  v17 = 282158961;
  *(_OWORD *)buf = xmmword_101BBFFA8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 104;
  v17 = 1282132887;
  *(_OWORD *)buf = xmmword_101BBFFBC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 105;
  v17 = -961843768;
  *(_OWORD *)buf = xmmword_101BBFFD0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 106;
  v17 = 1326690998;
  *(_OWORD *)buf = xmmword_101BBFFE4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 107;
  v17 = -441172408;
  *(_OWORD *)buf = xmmword_101BBFFF8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 108;
  v17 = -126099363;
  *(_OWORD *)buf = xmmword_101BC000C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 109;
  v17 = 1756484512;
  *(_OWORD *)buf = xmmword_101BC0020;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 110;
  v17 = 763775061;
  *(_OWORD *)buf = xmmword_101BC0034;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 111;
  v17 = -1092155788;
  *(_OWORD *)buf = xmmword_101BC0048;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 112;
  v17 = -557458837;
  *(_OWORD *)buf = xmmword_101BC005C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 113;
  v17 = -63049871;
  *(_OWORD *)buf = xmmword_101BC0070;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 114;
  v17 = 1730000236;
  *(_OWORD *)buf = xmmword_101BC0084;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 115;
  v17 = 406601745;
  *(_OWORD *)buf = xmmword_101BC0098;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 116;
  v17 = 1530338216;
  *(_OWORD *)buf = xmmword_101BC00AC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 117;
  v17 = -1930811061;
  *(_OWORD *)buf = xmmword_101BC00C0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 118;
  v17 = 1654218604;
  *(_OWORD *)buf = xmmword_101BC00D4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 119;
  v17 = -182498503;
  *(_OWORD *)buf = xmmword_101BC00E8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 124;
  v17 = -2030489149;
  *(_OWORD *)buf = xmmword_101BC00FC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 120;
  v17 = 841005628;
  *(_OWORD *)buf = xmmword_101BC0110;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 121;
  v17 = 223445260;
  *(_OWORD *)buf = xmmword_101BC0124;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 122;
  v17 = 1219348060;
  *(_OWORD *)buf = xmmword_101BC0138;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 123;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 125;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 126;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 127;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 128;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 129;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 130;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 131;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 132;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 133;
  v17 = 2030516999;
  *(_OWORD *)buf = xmmword_101BC014C;
  *(_OWORD *)v11 = xmmword_101BC0160;
  v12 = -1276010597;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 134;
  v17 = -762483149;
  *(_OWORD *)buf = xmmword_101BC0174;
  *(_OWORD *)v11 = xmmword_101BC0188;
  v12 = -1926937532;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 135;
  v17 = -1902732724;
  *(_OWORD *)buf = xmmword_101BC019C;
  *(_OWORD *)v11 = xmmword_101BC01B0;
  v12 = -342357580;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 136;
  v17 = 300442574;
  *(_OWORD *)buf = xmmword_101BC01C4;
  *(_OWORD *)v11 = xmmword_101BC01D8;
  v12 = -1294188889;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 137;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 138;
  v17 = -61007701;
  *(_OWORD *)buf = xmmword_101BC01EC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 139;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 140;
  v17 = -235416490;
  *(_OWORD *)buf = xmmword_101BC0200;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 141;
  v17 = -820493242;
  *(_OWORD *)buf = xmmword_101BC0214;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 143;
  v17 = -1157300313;
  *(_OWORD *)buf = xmmword_101BC0228;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 144;
  v17 = -2132668294;
  *(_OWORD *)buf = xmmword_101BC023C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 145;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 146;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 147;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 149;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 150;
  v17 = 1737149739;
  *(_OWORD *)buf = xmmword_101BC0250;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 151;
  v17 = 1577888303;
  *(_OWORD *)buf = xmmword_101BC0264;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 152;
  v17 = -1918230744;
  *(_OWORD *)buf = xmmword_101BC0278;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 153;
  v17 = 1126727276;
  *(_OWORD *)buf = xmmword_101BC028C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 154;
  v17 = 300130091;
  *(_OWORD *)buf = xmmword_101BC02A0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 155;
  v17 = 343814884;
  *(_OWORD *)buf = xmmword_101BC02B4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 156;
  v17 = -1675932945;
  *(_OWORD *)buf = xmmword_101BC02C8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 157;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 161;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 162;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 166;
  v17 = -1840391155;
  *(_OWORD *)buf = xmmword_101BC02DC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 167;
  v17 = -121925081;
  *(_OWORD *)buf = xmmword_101BC02F0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 142;
  v17 = 1071957977;
  *(_OWORD *)buf = xmmword_101BC0304;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 168;
  v17 = 438437663;
  *(_OWORD *)buf = xmmword_101BC0318;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 169;
  v17 = 1575123478;
  *(_OWORD *)buf = xmmword_101BC032C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 170;
  v17 = -382792827;
  *(_OWORD *)buf = xmmword_101BC0340;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 171;
  v17 = 123138233;
  *(_OWORD *)buf = xmmword_101BC0354;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 172;
  v17 = 681511593;
  *(_OWORD *)buf = xmmword_101BC0368;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 173;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 174;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 175;
  v17 = 713503427;
  *(_OWORD *)buf = xmmword_101BC037C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 176;
  v17 = -1632750650;
  *(_OWORD *)buf = xmmword_101BC0390;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 177;
  v17 = -1820426635;
  *(_OWORD *)buf = xmmword_101BC03A4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 178;
  v17 = -937652876;
  *(_OWORD *)buf = xmmword_101BC03B8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 179;
  v17 = 1874287171;
  *(_OWORD *)buf = xmmword_101BC03CC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 180;
  v17 = -781324731;
  *(_OWORD *)buf = xmmword_101BC03E0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 181;
  v17 = 1214880059;
  *(_OWORD *)buf = xmmword_101BC03F4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 182;
  v17 = 426359977;
  *(_OWORD *)buf = xmmword_101BC0408;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 183;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 180;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 184;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 163;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 185;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 164;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 165;
  v17 = 345196535;
  *(_OWORD *)buf = xmmword_101BC041C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 186;
  v17 = 440949464;
  *(_OWORD *)buf = xmmword_101BC0430;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 187;
  v17 = 688565114;
  *(_OWORD *)buf = xmmword_101BC0444;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 188;
  v17 = -493418906;
  *(_OWORD *)buf = xmmword_101BC0458;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 189;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 190;
  v17 = -584398440;
  *(_OWORD *)buf = xmmword_101BC046C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 195;
  v17 = -879476163;
  *(_OWORD *)buf = xmmword_101BC0480;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 196;
  v17 = -695298128;
  *(_OWORD *)buf = xmmword_101BC0494;
  *(_OWORD *)v11 = xmmword_101BC04A8;
  v12 = 804488105;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 197;
  v17 = 1614584579;
  *(_OWORD *)buf = xmmword_101BC04BC;
  *(_OWORD *)v11 = xmmword_101BC04D0;
  v12 = 324288768;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 198;
  v17 = 460218192;
  *(_OWORD *)buf = xmmword_101BC04E4;
  *(_OWORD *)v11 = xmmword_101BC04F8;
  v12 = 2144905009;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 199;
  v17 = 127894440;
  *(_OWORD *)buf = xmmword_101BC050C;
  *(_OWORD *)v11 = xmmword_101BC0520;
  v12 = 1070997468;
  if ((MGIsDeviceOneOfType(buf) & 1) != 0)
    return 200;
  v17 = 372777383;
  *(_OWORD *)buf = xmmword_101BC0534;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 201;
  v17 = -858079590;
  *(_OWORD *)buf = xmmword_101BC0548;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 202;
  v17 = -212523443;
  *(_OWORD *)buf = xmmword_101BC055C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 203;
  v17 = 646100384;
  *(_OWORD *)buf = xmmword_101BC0570;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 204;
  v17 = -340360463;
  *(_OWORD *)buf = xmmword_101BC0584;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 205;
  v17 = 1605231531;
  *(_OWORD *)buf = xmmword_101BC0598;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 206;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 207;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 208;
  v17 = -545612308;
  *(_OWORD *)buf = xmmword_101BC05AC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 209;
  v17 = 1178062702;
  *(_OWORD *)buf = xmmword_101BC05C0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 210;
  v17 = 958549802;
  *(_OWORD *)buf = xmmword_101BC05D4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 211;
  v17 = 1377540371;
  *(_OWORD *)buf = xmmword_101BC05E8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 212;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 213;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 214;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 215;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 216;
  v17 = -1431778695;
  *(_OWORD *)buf = xmmword_101BC05FC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 217;
  v17 = 533419158;
  *(_OWORD *)buf = xmmword_101BC0610;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 218;
  v17 = 1106979518;
  *(_OWORD *)buf = xmmword_101BC0624;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 219;
  v17 = -609570151;
  *(_OWORD *)buf = xmmword_101BC0638;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 220;
  v17 = -874769875;
  *(_OWORD *)buf = xmmword_101BC064C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 221;
  v17 = 1223847566;
  *(_OWORD *)buf = xmmword_101BC0660;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 222;
  v17 = 185580364;
  *(_OWORD *)buf = xmmword_101BC0674;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 223;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 224;
  v17 = 1878025452;
  *(_OWORD *)buf = xmmword_101BC0688;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 225;
  v17 = 1725957070;
  *(_OWORD *)buf = xmmword_101BC069C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 226;
  v17 = 538967431;
  *(_OWORD *)buf = xmmword_101BC06B0;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 227;
  v17 = 2060712151;
  *(_OWORD *)buf = xmmword_101BC06C4;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 228;
  v17 = 802516499;
  *(_OWORD *)buf = xmmword_101BC06D8;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 229;
  v17 = -1919324456;
  *(_OWORD *)buf = xmmword_101BC06EC;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 230;
  v17 = 1127969586;
  *(_OWORD *)buf = xmmword_101BC0700;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 231;
  v17 = 1292009573;
  *(_OWORD *)buf = xmmword_101BC0714;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 232;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 233;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 234;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 235;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 236;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 142;
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (sub_10075A02C())
    return 1;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 237;
  v17 = -12497897;
  *(_OWORD *)buf = xmmword_101BC0728;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 238;
  v17 = -518121279;
  *(_OWORD *)buf = xmmword_101BC073C;
  if ((MGIsDeviceOfType(buf) & 1) != 0)
    return 239;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 240;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 241;
  if ((MGIsDeviceOfType(0) & 1) != 0)
    return 258;
  v1 = (const void *)MGCopyAnswer(CFSTR("HWModelStr"), 0);
  if (v1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      *(_DWORD *)v11 = 138477827;
      *(_QWORD *)&v11[4] = v1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        v11,
        12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    CFRelease(v1);
    return 0;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102151740);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    sub_1001A486C(CFSTR("HWModelStr"), (uint64_t)buf);
    v4 = v18 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v11 = 136380675;
    *(_QWORD *)&v11[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      v11,
      0xCu);
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v7 = qword_1022A02A8;
    sub_1001A486C(CFSTR("HWModelStr"), (uint64_t)v11);
    if (v13 >= 0)
      v8 = v11;
    else
      v8 = *(uint8_t **)v11;
    v14 = 136380675;
    v15 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      &v14,
      12);
    v10 = v9;
    if (v13 < 0)
      operator delete(*(void **)v11);
    sub_100512490("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  return result;
}

BOOL sub_10075A02C()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)MGCopyAnswer(CFSTR("IsVirtualDevice"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

void sub_10075A09C(id a1)
{
  const __CFBoolean *v1;
  const __CFBoolean *v2;
  CFTypeID v3;
  int v4;

  v1 = (const __CFBoolean *)MGCopyAnswer(CFSTR("IsSimulator"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2))
      v4 = 4;
    else
      v4 = sub_1007574E4();
    dword_102303CA8 = v4;
    CFRelease(v2);
  }
  else
  {
    dword_102303CA8 = sub_1007574E4();
  }
}

_QWORD *sub_10075A11C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  NSString *v8;

  v3 = (void *)_CFCopyServerVersionDictionary(a1);
  if (!v3)
    v3 = (void *)_CFCopySystemVersionDictionary();
  v4 = (const __CFString *)objc_msgSend(v3, "objectForKey:", _kCFSystemVersionProductVersionKey);
  v5 = (const __CFString *)objc_msgSend(v3, "objectForKey:", _kCFSystemVersionProductNameKey);
  v6 = CFSTR("???");
  if (v5)
    v7 = v5;
  else
    v7 = CFSTR("???");
  if (v4)
    v6 = v4;
  v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@"), v7, v6);

  return sub_1015A2E04(a2, (char *)-[NSString UTF8String](v8, "UTF8String"));
}

void sub_10075A1D4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_102303CD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303CD0))
  {
    xmmword_102303CB8 = 0uLL;
    unk_102303CC8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303CB8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303CD0);
  }
  if (qword_102303CD8 != -1)
    dispatch_once(&qword_102303CD8, &stru_1021513F0);
  if (byte_102303CCF < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_102303CB8, *((unint64_t *)&xmmword_102303CB8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102303CB8;
    *(_QWORD *)(a1 + 16) = unk_102303CC8;
  }
}

void sub_10075A2AC(id a1)
{
  const __CFDictionary *v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  _BYTE v14[16];
  _QWORD v15[2];

  v1 = (const __CFDictionary *)_CFCopyServerVersionDictionary(a1);
  if (v1 || (v1 = (const __CFDictionary *)_CFCopySystemVersionDictionary()) != 0)
  {
    sub_1001C1D6C((int)v14, v1);
    CFRelease(v1);
    memset(&v13, 0, sizeof(v13));
    memset(&v12, 0, sizeof(v12));
    memset(&v11, 0, sizeof(v11));
    if (!sub_1000BD5F0((uint64_t)v14, _kCFSystemVersionProductNameKey, &v12))
      std::string::assign(&v12, "<name>");
    if (!sub_1000BD5F0((uint64_t)v14, _kCFSystemVersionProductVersionKey, &v13))
      std::string::assign(&v13, "<version>");
    if (!sub_1000BD5F0((uint64_t)v14, _kCFSystemVersionBuildVersionKey, &v11))
      std::string::assign(&v11, "<build>");
    sub_1003625F4((const void **)&v12.__r_.__value_.__l.__data_, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v9);
    v2 = std::string::append(&v9, "/");
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v11;
    else
      v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      size = v11.__r_.__value_.__l.__size_;
    v6 = std::string::append(&v10, (const std::string::value_type *)v4, size);
    v7 = v6->__r_.__value_.__r.__words[0];
    v15[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (byte_102303CCF < 0)
      operator delete((void *)xmmword_102303CB8);
    *(_QWORD *)&xmmword_102303CB8 = v7;
    *((_QWORD *)&xmmword_102303CB8 + 1) = v15[0];
    *(_QWORD *)((char *)&xmmword_102303CB8 + 15) = *(_QWORD *)((char *)v15 + 7);
    byte_102303CCF = v8;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    sub_10011A5A8(v14);
  }
  else
  {
    std::string::assign((std::string *)&xmmword_102303CB8, "<null>");
  }
}

void sub_10075A518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  sub_10011A5A8(v34 - 72);
  _Unwind_Resume(a1);
}

void sub_10075A5A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  _QWORD block[5];

  v3 = atomic_load((unsigned __int8 *)&qword_102303CF8);
  if ((v3 & 1) == 0)
  {
    v5 = a1;
    v4 = __cxa_guard_acquire(&qword_102303CF8);
    a1 = v5;
    if (v4)
    {
      xmmword_102303CE0 = 0uLL;
      unk_102303CF0 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303CE0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102303CF8);
      a1 = v5;
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10075A6C4;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  if (qword_102303D00 != -1)
    dispatch_once(&qword_102303D00, block);
  if (byte_102303CF7 < 0)
  {
    sub_100115CE4((_BYTE *)a2, (void *)xmmword_102303CE0, *((unint64_t *)&xmmword_102303CE0 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_102303CE0;
    *(_QWORD *)(a2 + 16) = unk_102303CF0;
  }
}

double sub_10075A6C4()
{
  double result;
  __int128 v1;
  uint64_t v2;

  sub_10075A71C("hw.model", &v1);
  if (byte_102303CF7 < 0)
    operator delete((void *)xmmword_102303CE0);
  result = *(double *)&v1;
  xmmword_102303CE0 = v1;
  unk_102303CF0 = v2;
  return result;
}

_QWORD *sub_10075A71C@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v3;
  size_t v5;
  _BYTE v6[128];

  v5 = 128;
  if (sysctlbyname(a1, v6, &v5, 0, 0))
    v3 = "";
  else
    v3 = v6;
  return sub_1015A2E04(a2, v3);
}

void sub_10075A7A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  _QWORD block[5];

  v3 = atomic_load((unsigned __int8 *)&qword_102303D20);
  if ((v3 & 1) == 0)
  {
    v5 = a1;
    v4 = __cxa_guard_acquire(&qword_102303D20);
    a1 = v5;
    if (v4)
    {
      xmmword_102303D08 = 0uLL;
      unk_102303D18 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303D08, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102303D20);
      a1 = v5;
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10075A8CC;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  if (qword_102303D28 != -1)
    dispatch_once(&qword_102303D28, block);
  if (byte_102303D1F < 0)
  {
    sub_100115CE4((_BYTE *)a2, (void *)xmmword_102303D08, *((unint64_t *)&xmmword_102303D08 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_102303D08;
    *(_QWORD *)(a2 + 16) = unk_102303D18;
  }
}

double sub_10075A8CC()
{
  double result;
  __int128 v1;
  uint64_t v2;

  sub_10075A71C("hw.machine", &v1);
  if (byte_102303D1F < 0)
    operator delete((void *)xmmword_102303D08);
  result = *(double *)&v1;
  xmmword_102303D08 = v1;
  unk_102303D18 = v2;
  return result;
}

uint64_t sub_10075A924()
{
  if (qword_102303D30 != -1)
    dispatch_once(&qword_102303D30, &stru_102151410);
  return dword_1022A4124;
}

void sub_10075A964(id a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFTypeID v3;
  int v4;

  v1 = (const __CFString *)MGCopyAnswer(CFSTR("ReleaseType"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 == CFStringGetTypeID())
    {
      if (CFStringCompare(v2, CFSTR("Beta"), 0) == kCFCompareEqualTo)
      {
        v4 = 0;
        goto LABEL_18;
      }
      if (CFStringCompare(v2, CFSTR("Carrier"), 0) == kCFCompareEqualTo)
      {
        v4 = 1;
        goto LABEL_18;
      }
      if (CFStringCompare(v2, CFSTR("Internal"), 0) == kCFCompareEqualTo)
      {
        v4 = 2;
        goto LABEL_18;
      }
      if (CFStringCompare(v2, CFSTR("Desense"), 0) == kCFCompareEqualTo)
      {
        v4 = 3;
        goto LABEL_18;
      }
      if (CFStringCompare(v2, CFSTR("Lite Internal"), 0) == kCFCompareEqualTo)
      {
        v4 = 4;
        goto LABEL_18;
      }
      if (CFStringCompare(v2, CFSTR("Vendor"), 0) == kCFCompareEqualTo)
      {
        v4 = 5;
        goto LABEL_18;
      }
      if (CFStringCompare(v2, CFSTR("NonUI"), 0) == kCFCompareEqualTo)
      {
        v4 = 6;
LABEL_18:
        dword_1022A4124 = v4;
      }
    }
    CFRelease(v2);
  }
}

void sub_10075AA9C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_102303D50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303D50))
  {
    xmmword_102303D38 = 0uLL;
    unk_102303D48 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303D38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303D50);
  }
  if (qword_102303D58 != -1)
    dispatch_once(&qword_102303D58, &stru_102151430);
  if (byte_102303D4F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_102303D38, *((unint64_t *)&xmmword_102303D38 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102303D38;
    *(_QWORD *)(a1 + 16) = unk_102303D48;
  }
}

void sub_10075AB74(id a1)
{
  std::string *p_p;
  CFStringRef v2;
  CFTypeID v3;
  const __CFURL *v4;
  const __CFString *v5;
  __CFBundle *v6;
  __CFBundle *v7;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v9;
  CFTypeID v10;
  std::string __p;

  sub_1005854A0(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v2 = sub_1001A48D8((char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v2)
  {
    v3 = CFGetTypeID(v2);
    if (v3 == CFStringGetTypeID())
    {
      v4 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v2, kCFURLPOSIXPathStyle, 0);
      if (v4)
      {
        v5 = (const __CFString *)v4;
        v6 = CFBundleCreate(kCFAllocatorDefault, v4);
        if (v6)
        {
          v7 = v6;
          ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v6, kCFBundleVersionKey);
          if (ValueForInfoDictionaryKey)
          {
            v9 = ValueForInfoDictionaryKey;
            v10 = CFGetTypeID(ValueForInfoDictionaryKey);
            if (v10 == CFStringGetTypeID())
            {
              sub_1001A486C(v9, (uint64_t)&__p);
              if (byte_102303D38[23] < 0)
                operator delete(*(void **)byte_102303D38);
              *(std::string *)byte_102303D38 = __p;
            }
          }
          CFRelease(v2);
          v2 = v5;
        }
        else
        {
          v7 = (__CFBundle *)v5;
        }
        CFRelease(v2);
        v2 = (CFStringRef)v7;
      }
    }
    CFRelease(v2);
  }
}

void sub_10075ACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10075ACDC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_102303D78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303D78))
  {
    xmmword_102303D60 = 0uLL;
    unk_102303D70 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303D60, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303D78);
  }
  if (qword_102303D80 != -1)
    dispatch_once(&qword_102303D80, &stru_102151450);
  if (byte_102303D77 < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_102303D60, *((unint64_t *)&xmmword_102303D60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102303D60;
    *(_QWORD *)(a1 + 16) = unk_102303D70;
  }
}

void sub_10075ADB4(id a1)
{
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  const __CFString *CFProperty;
  const __CFString *v5;
  __int128 v6;
  uint64_t v7;

  v1 = IOServiceMatching("IOPlatformExpertDevice");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    v3 = MatchingService;
    CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("IOPlatformSerialNumber"), kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      v5 = CFProperty;
      sub_1001A486C(CFProperty, (uint64_t)&v6);
      if (byte_102303D77 < 0)
        operator delete((void *)xmmword_102303D60);
      xmmword_102303D60 = v6;
      unk_102303D70 = v7;
      CFRelease(v5);
    }
    IOObjectRelease(v3);
  }
}

void sub_10075AE6C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_102303DA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303DA0))
  {
    sub_1015A2E04(&xmmword_102303D88, "NotAvailable");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303D88, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303DA0);
  }
  if (qword_102303DA8 != -1)
    dispatch_once(&qword_102303DA8, &stru_102151470);
  if (byte_102303D9F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_102303D88, *((unint64_t *)&xmmword_102303D88 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102303D88;
    *(_QWORD *)(a1 + 16) = unk_102303D98;
  }
}

void sub_10075AF50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102303DA0);
  _Unwind_Resume(a1);
}

void sub_10075AF68(id a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFTypeID v3;
  __int128 v4;
  uint64_t v5;
  char buffer[1024];

  v1 = (const __CFString *)MGCopyAnswer(CFSTR("UniqueDeviceID"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 == CFStringGetTypeID())
    {
      CFStringGetCString(v2, buffer, 1024, 0x8000100u);
      sub_1015A2E04(&v4, buffer);
      if (byte_102303D9F < 0)
        operator delete((void *)xmmword_102303D88);
      xmmword_102303D88 = v4;
      unk_102303D98 = v5;
    }
    CFRelease(v2);
  }
}

void sub_10075B048(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_102303DC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303DC8))
  {
    sub_1015A2E04(&xmmword_102303DB0, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303DB0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303DC8);
  }
  if (qword_102303DD0 != -1)
    dispatch_once(&qword_102303DD0, &stru_102151490);
  if (byte_102303DC7 < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_102303DB0, *((unint64_t *)&xmmword_102303DB0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102303DB0;
    *(_QWORD *)(a1 + 16) = unk_102303DC0;
  }
}

void sub_10075B12C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102303DC8);
  _Unwind_Resume(a1);
}

void sub_10075B144(id a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFTypeID v3;
  __int128 v4;
  uint64_t v5;

  v1 = (const __CFString *)MGCopyAnswer(CFSTR("ProductType"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 == CFStringGetTypeID())
    {
      sub_1001A486C(v2, (uint64_t)&v4);
      if (byte_102303DC7 < 0)
        operator delete((void *)xmmword_102303DB0);
      xmmword_102303DB0 = v4;
      unk_102303DC0 = v5;
    }
    CFRelease(v2);
  }
}

void sub_10075B1D4(id a1)
{
  int v1;
  NSObject *v2;
  _BOOL4 v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v1 = 7381266;
  switch(dword_102303CA8)
  {
    case 1:
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      v1 = 33562886;
      break;
    case 2:
    case 5:
    case 19:
    case 20:
    case 52:
    case 53:
    case 60:
    case 61:
    case 158:
    case 159:
    case 160:
    case 162:
    case 163:
    case 164:
    case 165:
    case 185:
    case 195:
    case 196:
      v1 = 532482;
      break;
    case 3:
    case 43:
    case 148:
      break;
    case 4:
      v1 = 8454;
      break;
    case 6:
    case 166:
    case 167:
      goto LABEL_37;
    case 7:
    case 10:
    case 13:
    case 14:
    case 29:
    case 31:
    case 33:
    case 35:
    case 44:
    case 46:
    case 48:
    case 62:
    case 64:
    case 76:
    case 134:
    case 136:
    case 144:
    case 146:
    case 154:
    case 156:
    case 186:
    case 188:
    case 197:
    case 199:
    case 201:
    case 203:
    case 205:
    case 207:
    case 209:
    case 211:
    case 212:
    case 213:
    case 215:
    case 224:
    case 225:
    case 227:
    case 229:
    case 231:
    case 233:
    case 235:
    case 237:
    case 240:
      v1 = 7905558;
      break;
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
      v1 = 8236319;
      break;
    case 9:
    case 17:
    case 18:
      v1 = 16624927;
      break;
    case 21:
      v1 = 4202498;
      break;
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 63:
    case 65:
    case 77:
    case 135:
    case 137:
    case 145:
    case 155:
    case 157:
    case 187:
    case 189:
    case 190:
    case 202:
    case 204:
    case 206:
    case 208:
    case 210:
    case 214:
    case 216:
    case 238:
    case 239:
    case 241:
      v1 = 16624923;
      break;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      v1 = 37789954;
      break;
    case 50:
    case 51:
    case 74:
    case 75:
    case 81:
    case 82:
    case 83:
    case 84:
    case 89:
    case 90:
    case 95:
    case 96:
      v1 = 37789962;
      break;
    case 57:
    case 58:
    case 59:
      v1 = 8234271;
      break;
    case 66:
    case 67:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 97:
    case 98:
      v1 = 38120715;
      break;
    case 68:
    case 69:
    case 70:
    case 78:
    case 79:
    case 80:
    case 139:
    case 141:
    case 142:
    case 143:
      v1 = 41788703;
      break;
    case 71:
    case 72:
    case 73:
      v1 = 41790751;
      break;
    case 99:
    case 100:
    case 103:
    case 104:
    case 107:
    case 108:
    case 111:
    case 112:
    case 116:
    case 117:
    case 120:
    case 121:
    case 126:
    case 127:
    case 130:
    case 131:
      v1 = 38314250;
      break;
    case 101:
    case 102:
    case 105:
    case 106:
    case 109:
    case 110:
    case 113:
    case 114:
    case 115:
    case 118:
    case 119:
    case 122:
    case 123:
    case 124:
    case 125:
    case 128:
    case 129:
    case 132:
    case 133:
    case 258:
      v1 = 38645003;
      break;
    case 149:
      v1 = 4235530;
      break;
    case 150:
    case 151:
    case 152:
    case 153:
      v1 = 41226;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      v1 = 108899615;
      break;
    case 198:
    case 200:
    case 226:
    case 228:
    case 230:
    case 232:
    case 234:
    case 236:
      v1 = 83733787;
      break;
    default:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v2 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        if (qword_102303CB0 != -1)
          dispatch_once(&qword_102303CB0, &stru_1021513D0);
        *(_DWORD *)buf = 67174657;
        v9 = dword_102303CA8;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "unknown hardware type %{private}d", buf, 8u);
      }
      v3 = sub_1001BFF7C(115, 0);
      v1 = 0;
      if (v3)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        v4 = qword_1022A02A8;
        if (qword_102303CB0 != -1)
          dispatch_once(&qword_102303CB0, &stru_1021513D0);
        v7[0] = 67174657;
        v7[1] = dword_102303CA8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "unknown hardware type %{private}d", v7, 8);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "CLPlatformInfo::Provider CLPlatformInfo::getProviders()_block_invoke", "%s\n", v5);
        if (v6 != buf)
          free(v6);
LABEL_37:
        v1 = 0;
      }
      break;
  }
  dword_102303DD8 = v1;
}

uint64_t sub_10075B938()
{
  if ((sub_1001DC634() & 1) != 0)
    return 1;
  else
    return sub_1001DC5AC();
}

uint64_t sub_10075B95C()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 174) < 0x3F) & (0x5000000000000403uLL >> (dword_102303CA8
                                                                                                 + 82));
}

BOOL sub_10075B9E0()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if (!sub_1000FDB0C())
    goto LABEL_6;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    v0 = 1;
  else
LABEL_6:
    v0 = sub_10075BADC();
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "supportsTimeFreqFromDiscreteGnss", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_10075BAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10075BADC()
{
  _BOOL8 result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if ((dword_102303CA8 - 125) > 4 || ((1 << (dword_102303CA8 - 125)) & 0x19) == 0)
    return dword_102303CA8 == 258;
  return result;
}

uint64_t sub_10075BB6C()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 86) < 0x30) & (0xC073399999E5uLL >> (dword_102303CA8
                                                                                            - 86));
}

uint64_t sub_10075BBF4()
{
  if (sub_10075BC30() || sub_10075BCA4() || (sub_1001DC634() & 1) != 0 || (sub_1001DC5AC() & 1) != 0)
    return 1;
  else
    return sub_10075BB6C();
}

BOOL sub_10075BC30()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return (dword_102303CA8 - 57) < 3;
}

BOOL sub_10075BCA4()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return (dword_102303CA8 - 68) < 3;
}

uint64_t sub_10075BD18()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if (byte_102303E08 != 1)
    return 0;
  if ((sub_1001DC634() & 1) != 0 || (sub_1001DC5AC() & 1) != 0)
    return 1;
  return sub_10075B95C();
}

BOOL sub_10075BD88()
{
  return (sub_1001DC5AC() & 1) != 0
      || (sub_1001DC634() & 1) != 0
      || (sub_10075BB6C() & 1) != 0
      || (sub_10075B95C() & 1) != 0
      || sub_10075BADC();
}

BOOL sub_10075BDC4()
{
  return sub_10075BCA4()
      || (sub_1001DC634() & 1) != 0
      || (sub_1001DC5AC() & 1) != 0
      || (sub_10075BB6C() & 1) != 0
      || (sub_10075B95C() & 1) != 0
      || sub_10075BADC();
}

uint64_t sub_10075BE08()
{
  uint64_t result;

  result = sub_1001DC794();
  if ((_DWORD)result)
    return !sub_1001DC794() || sub_1000FDB3C();
  return result;
}

uint64_t sub_10075BE34()
{
  if ((sub_10075BBF4() & 1) != 0 || (sub_10075B95C() & 1) != 0)
    return 1;
  else
    return sub_10075BE08();
}

uint64_t sub_10075BE64()
{
  if ((sub_1001DC794() & 1) != 0 || (sub_1001DC634() & 1) != 0)
    return 1;
  else
    return sub_1001DC5AC();
}

uint64_t sub_10075BE90()
{
  uint64_t v0;

  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  v0 = byte_102303E08;
  if ((byte_102303E08 & 1) == 0)
    sub_10075742C();
  return v0;
}

void sub_10075BEE4(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, CFSTR("iPad")))
      byte_102303DE8 = 1;
    CFRelease(v2);
  }
}

BOOL sub_10075BF40()
{
  return getenv("__OSINSTALL_ENVIRONMENT") != 0;
}

void sub_10075BF64(id a1)
{
  BOOL v1;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v1 = 1;
  if ((dword_102303CA8 - 242) >= 0x10)
    v1 = (dword_102303CA8 - 191) < 4 || dword_102303CA8 == 1;
  byte_102303DF8 = v1;
}

void sub_10075BFCC(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, CFSTR("iPhone")))
      byte_102303E08 = 1;
    CFRelease(v2);
  }
}

uint64_t sub_10075C028()
{
  if (qword_102303E20 != -1)
    dispatch_once(&qword_102303E20, &stru_102151530);
  return byte_102303E18;
}

void sub_10075C068(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, CFSTR("iPod")))
      byte_102303E18 = 1;
    CFRelease(v2);
  }
}

uint64_t sub_10075C0C4()
{
  if (qword_102303E30 != -1)
    dispatch_once(&qword_102303E30, &stru_102151550);
  return byte_102303E28;
}

void sub_10075C104(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, CFSTR("AppleTV")))
      byte_102303E28 = 1;
    CFRelease(v2);
  }
}

BOOL sub_10075C160()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return (dword_102303CA8 & 0xFFFFFFFE) == 166;
}

uint64_t sub_10075C1D4()
{
  if (qword_102303E40 != -1)
    dispatch_once(&qword_102303E40, &stru_102151570);
  return byte_102303E38;
}

void sub_10075C214(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFEqual(v1, CFSTR("AudioAccessory")))
      byte_102303E38 = 1;
    CFRelease(v2);
  }
}

BOOL sub_10075C270()
{
  if (qword_102303E30 != -1)
    dispatch_once(&qword_102303E30, &stru_102151550);
  if ((byte_102303E28 & 1) != 0)
    return 1;
  if (qword_102303E40 != -1)
    dispatch_once(&qword_102303E40, &stru_102151570);
  return (byte_102303E38 & 1) != 0 || sub_10075C160();
}

BOOL sub_10075C2F4(uint64_t a1, std::string *a2)
{
  char v3;
  std::string::size_type size;
  std::string __str;

  sub_10075ACDC((uint64_t)&__str);
  v3 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::operator=(a2, &__str);
    v3 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v3 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return size != 0;
}

void sub_10075C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10075C378()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  int Value;
  _BOOL8 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v9[4];
  uint8_t buf[4];
  _BOOL4 v11;

  v0 = (const __CFBoolean *)MGCopyAnswer(CFSTR("RegionalBehaviorNoPasscodeLocationTiles"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 == CFBooleanGetTypeID())
  {
    Value = CFBooleanGetValue(v1);
    v4 = Value != 0;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v11 = Value != 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "isDisableTilesWhileLocked = %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v9[0] = 67109120;
      v9[1] = Value != 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "isDisableTilesWhileLocked = %d", v9);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPlatformInfo::isDisableTilesWhileLocked()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v1);
  return v4;
}

uint64_t sub_10075C58C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void **v6;
  char *v7;
  const char *v8;
  int v9;
  void *__p[2];
  char v11;
  _DWORD v12[2];
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;

  sub_10075A5A0(a1, (uint64_t)__p);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v1 = dword_102303CA8;
  if (qword_102303DF0 != -1)
    dispatch_once(&qword_102303DF0, &stru_1021514D0);
  if (byte_102303DE8 != 1
    || ((v2 = 1, (v1 - 8) > 0x39) || ((1 << (v1 - 8)) & 0x28000A01140079BLL) == 0)
    && v1 != 77)
  {
    v2 = 0;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102151740);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v4 = __p;
    if (v11 < 0)
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 67109634;
    v18 = v1;
    v19 = 2080;
    v20 = v4;
    v21 = 1024;
    v22 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CAMP: device id [%d] [%s], camping support [%d]", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v6 = __p;
    if (v11 < 0)
      v6 = (void **)__p[0];
    v12[0] = 67109634;
    v12[1] = v1;
    v13 = 2080;
    v14 = v6;
    v15 = 1024;
    v16 = v2;
    LODWORD(v8) = 24;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "CAMP: device id [%d] [%s], camping support [%d]", v12, v8, v9);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsCampOnly()", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_10075C848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10075C870()
{
  uint64_t result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  switch(dword_102303CA8)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 36:
    case 45:
    case 47:
    case 54:
    case 55:
    case 56:
    case 63:
    case 65:
    case 71:
    case 72:
    case 73:
    case 77:
    case 78:
    case 79:
    case 80:
      return result;
    case 10:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 75:
    case 76:
      goto LABEL_8;
    default:
      if (((dword_102303CA8 - 139) > 0x2D
         || ((1 << (dword_102303CA8 + 117)) & 0x3FFFE000001DLL) == 0)
        && (dword_102303CA8 - 217) >= 7)
      {
LABEL_8:
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_10075CA34()
{
  uint64_t result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  switch(dword_102303CA8)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 36:
    case 44:
    case 45:
    case 47:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 77:
    case 78:
    case 79:
    case 80:
      return result;
    case 10:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 60:
    case 61:
    case 62:
    case 64:
    case 66:
    case 67:
    case 74:
    case 75:
    case 76:
      goto LABEL_8;
    default:
      if (((dword_102303CA8 - 139) > 0x2D
         || ((1 << (dword_102303CA8 + 117)) & 0x3FFFE000001DLL) == 0)
        && (dword_102303CA8 - 217) >= 7)
      {
LABEL_8:
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_10075CBF8()
{
  if (sub_1001DC794() && !sub_1000FDB3C())
    return sub_1001DC794();
  else
    return 0;
}

uint64_t sub_10075CC24()
{
  uint64_t result;

  if (qword_102303E50 != -1)
    dispatch_once(&qword_102303E50, &stru_102151590);
  if (byte_102303E48)
    result = 1;
  else
    result = sub_100241430();
  byte_102303E48 = result;
  return result;
}

void sub_10075CC80(id a1)
{
  const void *v1;

  v1 = (const void *)MGCopyAnswer(CFSTR("HXTqT3UXOKuTEklxz+wMAA"), 0);
  if (v1)
  {
    byte_102303E48 = 1;
    CFRelease(v1);
  }
}

uint64_t sub_10075CCB8()
{
  char v0;

  if (sub_10075CD10())
  {
    if (qword_102303DF0 != -1)
      dispatch_once(&qword_102303DF0, &stru_1021514D0);
    v0 = byte_102303DE8 ^ 1;
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

uint64_t sub_10075CD10()
{
  uint64_t result;

  result = sub_1001CE630();
  if ((_DWORD)result)
  {
    if ((sub_1001DC634() & 1) != 0 || (sub_1001DC5AC() & 1) != 0 || sub_1000FDB0C())
    {
      if (qword_102303E10 != -1)
        dispatch_once(&qword_102303E10, &stru_102151510);
      if ((byte_102303E08 & 1) != 0)
        return 1;
    }
    if (sub_1001DC794() && !sub_1000FDB3C())
      return 1;
    else
      return sub_10075B95C();
  }
  return result;
}

uint64_t sub_10075CD90()
{
  uint64_t result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  switch(dword_102303CA8)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 50:
    case 51:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 139:
    case 141:
    case 142:
    case 143:
    case 145:
    case 154:
    case 155:
    case 156:
    case 157:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 202:
    case 204:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 214:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 238:
    case 239:
    case 241:
    case 258:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_10075D1EC()
{
  if (qword_102303E60 != -1)
    dispatch_once(&qword_102303E60, &stru_1021515B0);
  return byte_102303E58;
}

void sub_10075D22C(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("ReleaseType"), 0);
  if (v1)
  {
    v2 = v1;
    byte_102303E58 = CFEqual(v1, CFSTR("NonUI")) != 0;
    CFRelease(v2);
  }
}

uint64_t sub_10075D288()
{
  if (qword_102303E70 != -1)
    dispatch_once(&qword_102303E70, &stru_1021515D0);
  return byte_102303E68;
}

void sub_10075D2C8(id a1)
{
  const __CFBoolean *v1;
  const __CFBoolean *v2;
  CFTypeID v3;

  v1 = (const __CFBoolean *)MGCopyAnswer(CFSTR("InternalBuild"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2) == 1)
      byte_102303E68 = 1;
    CFRelease(v2);
  }
}

uint64_t sub_10075D338()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  char v6;
  const char *v8;
  uint8_t *v9;
  char v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  v10 = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)buf, "GpsForceSuplSupportIgnoringHw", (BOOL *)&v10);
  if (v10)
    v1 = v0;
  else
    v1 = 0;
  v2 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v1)
    {
LABEL_9:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v5 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL: ignoring hw. forceSuplSupport,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        v11[0] = 67109120;
        v11[1] = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning SUPL: ignoring hw. forceSuplSupport,%d", v11);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsSupl()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      v6 = v10 != 0;
      return v6 & 1;
    }
  }
  if (sub_1001DC794())
  {
    if (qword_102303DF0 != -1)
      dispatch_once(&qword_102303DF0, &stru_1021514D0);
    v6 = byte_102303DE8 ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_10075D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075D5C0()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  BOOL v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  v9 = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)buf, "GpsForceLppSupport", &v9);
  if (v9)
    v1 = v0;
  else
    v1 = 0;
  v2 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1)
        goto LABEL_9;
      return sub_1001DC794();
    }
  }
  if (!v1)
    return sub_1001DC794();
LABEL_9:
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102151740);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning LPP: ignoring hw. forceLppSupport,%d\n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v10[0] = 67109120;
    v10[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning LPP: ignoring hw. forceLppSupport,%d\n", v10);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsLpp()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 1;
}

void sub_10075D7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075D7FC()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  uint64_t result;
  const char *v7;
  uint8_t *v8;
  BOOL v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  v9 = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)buf, "GpsForceLPPOverNRSupport", &v9);
  if (v9)
    v1 = v0;
  else
    v1 = 0;
  v2 = v12;
  if (!v12)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v1)
    {
LABEL_9:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102151780);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Test mode, forceLPPOverNRSupport,%d\n", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102151780);
        v10[0] = 67109120;
        v10[1] = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Test mode, forceLPPOverNRSupport,%d\n", v10);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsCplaneOverNr()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      return 1;
    }
  }
  result = sub_1001DC794();
  if ((_DWORD)result)
    return sub_1001DC8D0() ^ 1;
  return result;
}

void sub_10075DA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075DA44()
{
  __int16 v0;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v0 = -7;
  switch(dword_102303CA8)
  {
    case 7:
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
    case 16:
    case 23:
    case 31:
      v0 = -6;
      break;
    case 17:
    case 18:
    case 32:
      return v0;
    case 22:
      v0 = -4;
      break;
    case 24:
    case 25:
    case 29:
    case 30:
      v0 = -5;
      break;
    case 27:
    case 28:
    case 43:
    case 62:
    case 63:
      v0 = -3;
      break;
    case 64:
    case 65:
      v0 = -2;
      break;
    default:
      v0 = 0;
      break;
  }
  return v0;
}

BOOL sub_10075DBD8()
{
  const void *v0;
  const void *v1;
  BOOL v2;

  v0 = (const void *)MGCopyAnswer(CFSTR("nhGhVMyvrWYe9U2ltAUImg"), 0);
  v1 = (const void *)MGCopyAnswer(CFSTR("CPiqZJJPocpjc5C5qe1tiw"), 0);
  if (v0)
    CFRelease(v0);
  if (v1)
    CFRelease(v1);
  if (v0)
    v2 = v1 == 0;
  else
    v2 = 1;
  return !v2;
}

BOOL sub_10075DC3C()
{
  void *v0;
  void *v1;
  CFTypeID v2;
  unsigned int v3;
  _BOOL8 result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v0 = (void *)MGCopyAnswer(CFSTR("WLANBkgScanCache"), 0);
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFNumberGetTypeID())
    {
      v3 = objc_msgSend(v1, "intValue");
      CFRelease(v1);
      if (v3)
        return 1;
    }
    else
    {
      CFRelease(v1);
    }
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021517A0);
  v5 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WsbReg, MG-NotSupported", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021517A0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReg, MG-NotSupported", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsWifiScanBuffer()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_10075DE18(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10075DE8C;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  if (qword_102303E80 != -1)
    dispatch_once(&qword_102303E80, block);
  return byte_102303E78;
}

void sub_10075DE8C()
{
  char v0;

  if (qword_102303DE0 != -1)
    dispatch_once(&qword_102303DE0, &stru_1021514B0);
  if ((dword_102303DD8 & 0x8000) != 0)
  {
    if (qword_102303CB0 != -1)
      dispatch_once(&qword_102303CB0, &stru_1021513D0);
    v0 = 1;
    switch(dword_102303CA8)
    {
      case 134:
      case 135:
      case 136:
      case 137:
      case 139:
      case 141:
      case 142:
      case 143:
      case 146:
      case 154:
      case 155:
      case 156:
      case 157:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 176:
      case 177:
      case 178:
      case 179:
      case 186:
      case 187:
      case 188:
      case 189:
      case 197:
      case 198:
      case 199:
      case 200:
      case 206:
      case 208:
      case 209:
      case 210:
      case 217:
      case 218:
      case 219:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
        break;
      case 138:
      case 140:
      case 144:
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 174:
      case 175:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 207:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 220:
      case 221:
      case 222:
      case 223:
        goto LABEL_11;
      default:
        if ((dword_102303CA8 - 33) > 0x2E
          || ((1 << (dword_102303CA8 - 33)) & 0x600000018003) == 0)
        {
LABEL_11:
          v0 = 0;
        }
        break;
    }
    byte_102303E78 = v0;
  }
}

uint64_t sub_10075E0FC(uint64_t a1)
{
  if (qword_102303E00 != -1)
    dispatch_once(&qword_102303E00, &stru_1021514F0);
  if ((byte_102303DF8 & 1) != 0)
    return 0;
  if (sub_10075DE18(a1))
    return 360;
  return 180;
}

uint64_t sub_10075E16C(uint64_t a1)
{
  if (qword_102303E00 != -1)
    dispatch_once(&qword_102303E00, &stru_1021514F0);
  if ((byte_102303DF8 & 1) != 0)
    return 0;
  if (sub_10075DE18(a1))
    return 320;
  return 140;
}

uint64_t sub_10075E1DC()
{
  if (qword_102303E90 != -1)
    dispatch_once(&qword_102303E90, &stru_1021515F0);
  return byte_102303E88;
}

void sub_10075E21C(id a1)
{
  const __CFBoolean *v1;
  const __CFBoolean *v2;
  CFTypeID v3;
  NSObject *v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[4];
  uint8_t buf[8];
  std::__shared_weak_count *v18;

  v1 = (const __CFBoolean *)MGCopyAnswer(CFSTR("PhosphorusCapability"), 0);
  v2 = v1;
  if (v1)
  {
    v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID())
    {
      byte_102303E88 = CFBooleanGetValue(v2) != 0;
LABEL_10:
      CFRelease(v2);
      goto LABEL_11;
    }
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102151740);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "unexpected MGCopyAnswer answer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    LOWORD(v16[0]) = 0;
    LODWORD(v15) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "unexpected MGCopyAnswer answer", v16, v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLPlatformInfo::supportsBarometer()_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (v2)
    goto LABEL_10;
LABEL_11:
  HIBYTE(v15) = 0;
  sub_1001E4804(buf);
  v5 = sub_1001E4874(*(uint64_t *)buf, "ForceSupportBarometer", (BOOL *)&v15 + 7);
  v6 = v5;
  v7 = v18;
  if (!v18)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6)
      return;
  }
  else
  {
LABEL_15:
    if (!v5)
      return;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102151740);
  v10 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = HIBYTE(v15);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning ForceSupportBarometer,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v16[0] = 67109120;
    v16[1] = HIBYTE(v15);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning ForceSupportBarometer,%d", v16);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsBarometer()_block_invoke", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  byte_102303E88 = HIBYTE(v15);
}

void sub_10075E5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10075E5DC()
{
  int v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unsigned int v8;

  if (!sub_1000FDBFC())
    return 0;
  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4B84(v6, "RavenDailyBudget", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v0)
    return v1 | (unint64_t)&_mh_execute_header;
  else
    return 0x100000E10;
}

void sub_10075E68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10075E6A0()
{
  _BOOL8 result;

  if ((sub_10075E738() & 1) != 0)
    return 1;
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if ((dword_102303CA8 - 99) >= 0x23)
    return dword_102303CA8 == 258;
  return result;
}

uint64_t sub_10075E738()
{
  uint64_t result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if (((dword_102303CA8 - 139) > 0x2D
     || ((1 << (dword_102303CA8 + 117)) & 0x3FFFE000001DLL) == 0)
    && (dword_102303CA8 - 217) >= 7
    && (dword_102303CA8 - 78) >= 3)
  {
    return 0;
  }
  return result;
}

uint64_t sub_10075E7E8()
{
  if (qword_102303DF0 != -1)
    dispatch_once(&qword_102303DF0, &stru_1021514D0);
  if ((byte_102303DE8 & 1) != 0)
    return 1;
  if (qword_102303F20 != -1)
    dispatch_once(&qword_102303F20, &stru_1021516F0);
  return BYTE2(qword_102303F28) >> 7;
}

uint64_t sub_10075E868()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  BOOL v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  v9 = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)buf, "EEDRequestForceHWSupport", &v9);
  if (v9)
    v1 = v0;
  else
    v1 = 0;
  v2 = v12;
  if (!v12)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v1)
    {
LABEL_9:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v5 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #EED,ignoring hw,forceHWSupport,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        v10[0] = 67109120;
        v10[1] = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning #EED,ignoring hw,forceHWSupport,%d", v10);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsEmergencySosLiveVideo()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      return v9;
    }
  }
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if (byte_102303E08 != 1)
    return 0;
  if ((sub_1001DCA70() & 1) != 0)
    return 1;
  return sub_10075B95C();
}

void sub_10075EAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075EAFC()
{
  uint64_t result;

  result = sub_10075CD10();
  if ((_DWORD)result)
  {
    result = sub_1001DC794();
    if ((_DWORD)result)
      return !sub_1000FDB3C();
  }
  return result;
}

uint64_t sub_10075EB24()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  v8 = 0;
  sub_1001E4804(&v6);
  v0 = sub_1001E4874(v6, "GnssForceSupportsInsAiding", &v8);
  v1 = v0;
  v2 = v7;
  if (!v7)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
      return v8;
  }
  else
  {
LABEL_5:
    if (v0)
      return v8;
  }
  if (sub_1000FDBD0() || (sub_1001DC634() & 1) != 0)
    return 1;
  else
    return sub_1001DC5AC();
}

void sub_10075EBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075EBEC()
{
  uint64_t result;

  result = sub_1000FDB0C();
  if ((_DWORD)result)
  {
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    return byte_102303E08;
  }
  return result;
}

uint64_t sub_10075EC34()
{
  uint64_t result;

  if ((sub_1001DC634() & 1) != 0 || (result = sub_1001DC5AC(), (_DWORD)result))
  {
    result = sub_10075B95C();
    if ((_DWORD)result)
      return sub_1001DC634() ^ 1;
  }
  return result;
}

double sub_10075ED90()
{
  double v0;

  v0 = 4.0;
  if ((sub_1001DC5AC() & 1) == 0 && (!sub_1001DC794() || sub_1000FDB3C()) && !sub_1000FDB0C())
  {
    if (sub_10075B95C())
      return 4.0;
    else
      return 12.0;
  }
  return v0;
}

double sub_10075EDE4()
{
  return 1.0;
}

uint64_t sub_10075EDEC(uint64_t a1)
{
  uint64_t result;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 0;
  switch(dword_102303CA8)
  {
    case 168:
      *(_OWORD *)a1 = xmmword_101BBF890;
      v3 = 1083598438;
      goto LABEL_31;
    case 169:
      v5 = xmmword_101BBF880;
      goto LABEL_13;
    case 170:
      *(_OWORD *)a1 = xmmword_101BBF860;
      v3 = 1085485875;
      goto LABEL_31;
    case 171:
      v5 = xmmword_101BBF870;
LABEL_13:
      *(_OWORD *)a1 = v5;
      v3 = 1085276160;
      goto LABEL_31;
    case 172:
      *(_OWORD *)a1 = xmmword_101BBF830;
      v3 = 1083388723;
      goto LABEL_31;
    case 173:
      v6 = xmmword_101BBF820;
      goto LABEL_19;
    case 176:
      *(_OWORD *)a1 = xmmword_101BBF810;
      v3 = 1079613850;
      goto LABEL_31;
    case 177:
      *(_OWORD *)a1 = xmmword_101BBF800;
      v3 = 1080033280;
      goto LABEL_31;
    case 189:
      v6 = xmmword_101BBF7F0;
LABEL_19:
      *(_OWORD *)a1 = v6;
      v3 = 1080452710;
      goto LABEL_31;
    case 198:
      v7 = xmmword_101BBF850;
      goto LABEL_22;
    case 200:
      v7 = xmmword_101BBF840;
LABEL_22:
      *(_OWORD *)a1 = v7;
      v3 = 1082340147;
      goto LABEL_31;
    case 206:
    case 208:
      *(_OWORD *)a1 = xmmword_101BBF790;
      v3 = 1082549862;
      goto LABEL_31;
    case 210:
      v8 = xmmword_101BBF7E0;
      goto LABEL_27;
    case 214:
    case 238:
      *(_DWORD *)(a1 + 16) = 1080872141;
      v4 = xmmword_101BBF750;
      goto LABEL_35;
    case 216:
    case 239:
      *(_DWORD *)(a1 + 16) = 1080872141;
      v4 = xmmword_101BBF740;
      goto LABEL_35;
    case 217:
      *(_OWORD *)a1 = xmmword_101BBF7D0;
      v3 = 1082969293;
      goto LABEL_31;
    case 218:
      v8 = xmmword_101BBF7C0;
      goto LABEL_27;
    case 219:
      v8 = xmmword_101BBF7B0;
LABEL_27:
      *(_OWORD *)a1 = v8;
      v3 = 1077516698;
      goto LABEL_31;
    case 220:
    case 221:
      *(_OWORD *)a1 = xmmword_101BBF7A0;
      v3 = 1082759578;
      goto LABEL_31;
    case 222:
      v9 = xmmword_101BBF720;
      goto LABEL_30;
    case 223:
      v9 = xmmword_101BBF710;
LABEL_30:
      *(_OWORD *)a1 = v9;
      v3 = 1081711002;
      goto LABEL_31;
    case 226:
      *(_DWORD *)(a1 + 16) = 1082549862;
      v4 = xmmword_101BBF780;
      goto LABEL_35;
    case 228:
      *(_DWORD *)(a1 + 16) = 1082549862;
      v4 = xmmword_101BBF770;
      goto LABEL_35;
    case 230:
    case 232:
      *(_OWORD *)a1 = xmmword_101BBF760;
      v3 = 1080872141;
LABEL_31:
      *(_DWORD *)(a1 + 16) = v3;
      goto LABEL_36;
    case 241:
      *(_DWORD *)(a1 + 16) = 1080872141;
      v4 = xmmword_101BBF730;
LABEL_35:
      *(_OWORD *)a1 = v4;
LABEL_36:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10075F198()
{
  return !sub_1000FDBD0() || sub_1000FDB0C();
}

double sub_10075F1BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102303EA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102303EA0))
  {
    qword_102303E98 = 0x4018000000000000;
    __cxa_guard_release(&qword_102303EA0);
  }
  if (qword_102303EA8 != -1)
    dispatch_once(&qword_102303EA8, &stru_102151610);
  return *(double *)&qword_102303E98;
}

void sub_10075F23C(id a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;

  sub_1001E4804(&v7);
  v1 = qword_102303E98;
  v9 = 0;
  v2 = sub_1001FD98C(v7, "GnssMinimumDebounceInterval", &v9);
  v3 = v9;
  if (!v2)
    v3 = v1;
  qword_102303E98 = v3;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_10075F2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075F2EC()
{
  if ((sub_100193808() & 1) != 0 || sub_1000FDB0C())
    return 1;
  else
    return sub_10075B95C();
}

uint64_t sub_10075F318()
{
  if (sub_1000FDB0C())
    return 1;
  else
    return sub_10075B95C();
}

uint64_t sub_10075F33C()
{
  NSObject *v0;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_102303EB8 != -1)
    dispatch_once(&qword_102303EB8, &stru_102151630);
  if (byte_102303EB0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021517C0);
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      v3 = 2082;
      v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ALERT Device is currently running Apple Store demo mode\"}", (uint8_t *)v2, 0x12u);
    }
  }
  return byte_102303EB0;
}

void sub_10075F448(id a1)
{
  const __CFBoolean *v1;
  const __CFBoolean *v2;

  v1 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("StoreDemoMode"), CFSTR("com.apple.demo-settings"), CFSTR("mobile"), kCFPreferencesAnyHost);
  if (v1)
  {
    v2 = v1;
    byte_102303EB0 = CFBooleanGetValue(v1) != 0;
    CFRelease(v2);
  }
}

uint64_t sub_10075F4B4()
{
  if (qword_102303EC8 != -1)
    dispatch_once(&qword_102303EC8, &stru_102151650);
  return byte_102303EC0;
}

void sub_10075F4F4(id a1)
{
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  const __CFString *Domain;
  int v10;
  uint64_t v11;
  CFIndex Code;
  uint8_t *v13;
  id v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  const __CFString *v18;
  int v19;
  _BYTE *v20;
  CFIndex v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  CFErrorRef err;
  BOOL v26;
  _BYTE v27[12];
  __int16 v28;
  CFIndex v29;
  char v30;
  int v31;
  _BYTE *v32;
  __int16 v33;
  CFIndex v34;
  uint8_t buf[8];
  std::__shared_weak_count *v36;
  char v37;

  v26 = 0;
  sub_1001E4804(buf);
  v1 = sub_1001E4874(*(uint64_t *)buf, "ForceMultiUser", &v26);
  if (v26)
    v2 = v1;
  else
    v2 = 0;
  v3 = v36;
  if (!v36)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v2)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v2)
    {
LABEL_9:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v6 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning force multi user", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        *(_WORD *)v27 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning force multi user", v27, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsMultiUser()_block_invoke", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      byte_102303EC0 = 1;
      return;
    }
  }
  err = 0;
  v7 = (void *)MKBUserTypeDeviceMode(0, &err);
  if (err)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      Domain = CFErrorGetDomain(err);
      sub_1001A486C(Domain, (uint64_t)buf);
      v10 = v37;
      v11 = *(_QWORD *)buf;
      Code = CFErrorGetCode(err);
      v13 = buf;
      if (v10 < 0)
        v13 = (uint8_t *)v11;
      *(_DWORD *)v27 = 136315394;
      *(_QWORD *)&v27[4] = v13;
      v28 = 2048;
      v29 = Code;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "MKBUserTypeDeviceMode returned error, domain, %s, code, %ld", v27, 0x16u);
      if (v37 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v17 = qword_1022A02A8;
      v18 = CFErrorGetDomain(err);
      sub_1001A486C(v18, (uint64_t)v27);
      v19 = v30;
      v20 = *(_BYTE **)v27;
      v21 = CFErrorGetCode(err);
      v22 = v27;
      if (v19 < 0)
        v22 = v20;
      v31 = 136315394;
      v32 = v22;
      v33 = 2048;
      v34 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 17, "MKBUserTypeDeviceMode returned error, domain, %s, code, %ld", (const char *)&v31, 22);
      v24 = v23;
      if (v30 < 0)
        operator delete(*(void **)v27);
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLPlatformInfo::supportsMultiUser()_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    CFRelease(err);
    err = 0;
  }
  if (v7)
  {
    v14 = objc_msgSend(v7, "objectForKey:", kMKBDeviceModeKey);
    if (objc_msgSend(v14, "isEqualToString:", kMKBDeviceModeMultiUser))
      byte_102303EC0 = 1;

  }
}

void sub_10075F948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10075F994()
{
  unsigned int v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  v0 = sub_10075CD10();
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "EnableRof", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_10075FA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075FA4C()
{
  if ((sub_1001DC5AC() & 1) != 0
    || sub_1000FDBD0() && !sub_1000FDBFC()
    || sub_1001DC794() && !sub_1000FDB3C())
  {
    return 1;
  }
  else
  {
    return sub_10075B95C();
  }
}

uint64_t sub_10075FA90()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "GnssPlatformEnableNavic", &v8);
  if (v8)
    v1 = v0;
  else
    v1 = 0;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (sub_1001DC794() && ((sub_1000FDB3C() | v1) & 1) == 0)
    return 0;
  result = sub_1001CE630();
  if (!(_DWORD)result)
    return result;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if (byte_102303E08 != 1)
    return 0;
  if (sub_1001DCA70() && !sub_1001DC958())
    return 1;
  return sub_10075B95C();
}

void sub_10075FB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075FBA4()
{
  if (sub_1001DC794() && !sub_1000FDB3C())
    sub_1001DC794();
  return 0;
}

uint64_t sub_10075FBCC()
{
  if (sub_1001DC794())
    sub_1000FDB3C();
  return 0;
}

uint64_t sub_10075FBEC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10075FC60;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  if (qword_102303ED8 != -1)
    dispatch_once(&qword_102303ED8, block);
  return byte_102303ED0;
}

void sub_10075FC60()
{
  int v0;
  BOOL v1;

  if (qword_102303E00 != -1)
    dispatch_once(&qword_102303E00, &stru_1021514F0);
  v0 = byte_102303DF8;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    goto LABEL_12;
  if (qword_102303DF0 != -1)
    dispatch_once(&qword_102303DF0, &stru_1021514D0);
  if ((byte_102303DE8 & 1) != 0)
    goto LABEL_12;
  if (qword_102303E20 != -1)
    dispatch_once(&qword_102303E20, &stru_102151530);
  if (((byte_102303E18 | v0) & 1) != 0)
  {
LABEL_12:
    if ((v0 & 1) != 0)
    {
      v1 = 1;
    }
    else
    {
      if (qword_102303F20 != -1)
        dispatch_once(&qword_102303F20, &stru_1021516F0);
      v1 = (qword_102303F28 & 3) != 0;
    }
    byte_102303ED0 = v1;
  }
}

uint64_t sub_10075FD94()
{
  if (qword_102303EE8 != -1)
    dispatch_once(&qword_102303EE8, &stru_102151670);
  return byte_102303EE0;
}

void sub_10075FDD4(id a1)
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  byte_102303EE0 = (dword_102303CA8 > 0x3AuLL) | (0x13FFFFFE03FFFFFuLL >> dword_102303CA8) & 1;
}

uint64_t sub_10075FE38()
{
  uint64_t result;

  result = sub_1000FDBD0();
  if ((_DWORD)result)
  {
    if (qword_102303CA0 != -1)
      dispatch_once(&qword_102303CA0, &stru_102151390);
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    return byte_102303E08;
  }
  return result;
}

uint64_t sub_10075FEA8()
{
  uint64_t result;

  result = sub_1001CE630();
  if ((_DWORD)result)
  {
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    return byte_102303E08;
  }
  return result;
}

uint64_t sub_10075FEF4()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return 1;
}

uint64_t sub_10075FF30()
{
  uint64_t result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  switch(dword_102303CA8)
  {
    case 78:
    case 79:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 154:
    case 155:
    case 156:
    case 157:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 176:
    case 177:
    case 178:
    case 179:
    case 197:
    case 198:
    case 199:
    case 200:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_10076021C()
{
  if (qword_102303EF8 != -1)
    dispatch_once(&qword_102303EF8, &stru_102151690);
  return byte_102303EF0;
}

void sub_10076025C(id a1)
{
  const __CFString *v1;
  const __CFString *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (const __CFString *)MGCopyAnswer(CFSTR("RegionCode"), 0);
  if (v1)
  {
    v2 = v1;
    if (CFStringCompare(v1, CFSTR("KH"), 0) == kCFCompareEqualTo)
    {
      byte_102303EF0 = 1;
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v3 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "isKoreaSKU: true", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        v6[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "isKoreaSKU: true", v6, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::isDeviceKoreaSKU()_block_invoke", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
    }
    CFRelease(v2);
  }
}

uint64_t sub_100760428()
{
  if (qword_102303F08 != -1)
    dispatch_once(&qword_102303F08, &stru_1021516B0);
  return byte_102303F00;
}

void sub_100760468(id a1)
{
  byte_102303F00 = -[NSString compare:](-[NSProcessInfo processName](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "processName"), "compare:", CFSTR("locationd")) == NSOrderedSame;
}

void sub_1007608B4(id a1)
{
  io_service_t MatchingService;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];
  const __CFString *v7;
  _UNKNOWN **v8;

  v7 = CFSTR("IOPropertyMatch");
  v8 = &off_10221FCA0;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  if (MatchingService)
  {
    byte_102303F18 = 1;
    IOObjectRelease(MatchingService);
  }
  else
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021517E0);
    v2 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Compass service missing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021517E0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 0, "Compass service missing", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsCompass()_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_100760A98(id a1)
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  qword_102303F28 = sub_100760ADC();
}

unint64_t sub_100760ADC()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint8_t *v17;
  _QWORD v18[2];
  uint8_t buf[4];
  int v20;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v0 = 0;
  v1 = dword_102303CA8;
  switch(dword_102303CA8)
  {
    case 0:
    case 259:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v13 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67174657;
        v20 = v1;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_9;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      LODWORD(v18[0]) = 67174657;
      HIDWORD(v18[0]) = v1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
        v18,
        8,
        v18[0]);
      goto LABEL_75;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v2 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v20 = v1;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Old hardware,%d is not supported", v18);
LABEL_75:
        v17 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "CLPlatformInfo::MotionCapabilities CLPlatformInfo::queryMotionCaps()", "%s\n", v14);
        if (v17 != buf)
          free(v17);
      }
LABEL_9:
      v0 = 0;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      v8 = 2940500222;
      goto LABEL_53;
    case 26:
      v15 = 2806282494;
      goto LABEL_69;
    case 29:
      v12 = 24577;
      goto LABEL_64;
    case 30:
    case 31:
    case 32:
      v12 = 30721;
LABEL_64:
      v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 238:
    case 239:
      v3 = 762;
      goto LABEL_15;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 240:
    case 241:
      v3 = 6906;
LABEL_15:
      v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      v9 = 30922;
      goto LABEL_28;
    case 39:
    case 42:
      v0 = 0x28011654E00ELL;
      break;
    case 44:
      v9 = 24826;
LABEL_28:
      v0 = v9 | 0x21440000u;
      break;
    case 45:
      v0 = 558135546;
      break;
    case 46:
    case 62:
    case 161:
      v5 = 24826;
      goto LABEL_49;
    case 47:
    case 63:
      v5 = 30970;
      goto LABEL_49;
    case 48:
    case 186:
      v0 = 826598138;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      v5 = -1286;
      goto LABEL_49;
    case 50:
    case 51:
      v6 = 0x28015654E00ELL;
      goto LABEL_70;
    case 54:
    case 55:
      v8 = 3211147518;
LABEL_53:
      v10 = v8 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
      goto LABEL_54;
    case 56:
    case 57:
    case 58:
    case 59:
      v10 = 0x8029BF4638FELL;
LABEL_54:
      v0 = v10 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      break;
    case 60:
    case 61:
    case 196:
      v0 = 0x200000000;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      v6 = 0x24355E54E00ELL;
      goto LABEL_70;
    case 68:
    case 69:
    case 71:
    case 72:
      v11 = 0x1218029BF461AFELL;
      goto LABEL_61;
    case 70:
    case 73:
      v7 = 0xC029BF4618FELL;
      goto LABEL_56;
    case 76:
    case 146:
    case 147:
      v5 = -7942;
LABEL_49:
      v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      v11 = 826604282;
      goto LABEL_61;
    case 78:
    case 79:
    case 80:
    case 142:
      v7 = 0x8029BF461AFELL;
LABEL_56:
      v0 = v7 & 0xFFFFFFFFFFFFLL | 0x121000000000000;
      break;
    case 82:
    case 84:
      v6 = 0x27B55E54E00ELL;
      goto LABEL_70;
    case 86:
    case 88:
      v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      v6 = 0x24B55E54E01ELL;
      goto LABEL_70;
    case 95:
    case 96:
    case 97:
    case 98:
      v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      v4 = 0x24B55E54E01ELL;
      goto LABEL_12;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 258:
      v4 = 0x34B55E55001ELL;
LABEL_12:
      v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 217:
      v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 237:
      v11 = 826678010;
LABEL_61:
      v0 = v11 - 512;
      break;
    case 148:
      v0 = 0x9B746204ELL;
      break;
    case 149:
      v15 = 373686414;
LABEL_69:
      v6 = v15 & 0xFFFF0000FFFFFFFFLL | 0x900000000;
      goto LABEL_70;
    case 150:
    case 151:
    case 152:
    case 153:
      v6 = 0x20355E54E00ELL;
LABEL_70:
      v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 218:
    case 219:
    case 220:
    case 221:
      v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 222:
    case 223:
      v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      v0 = 277217290;
      break;
    default:
      break;
  }
  LOBYTE(v18[0]) = BYTE1(v0) & 1;
  sub_1018BF25C(buf, "OverrideMotionCapEclipseService", (unsigned __int8 *)v18, 0);
  return v0 & 0x73FFFBFFFF7FEFFLL | ((unint64_t)buf[1] << 8);
}

uint64_t sub_1007614BC()
{
  uint64_t result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  switch(dword_102303CA8)
  {
    case 134:
    case 135:
    case 136:
    case 137:
    case 145:
    case 154:
    case 155:
    case 156:
    case 157:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
      return result;
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 201:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      goto LABEL_9;
    default:
      if (dword_102303CA8 > 0x3F || ((1 << dword_102303CA8) & 0xC003F00000000000) == 0)
LABEL_9:
        result = 0;
      break;
  }
  return result;
}

uint64_t sub_100761724()
{
  uint64_t result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if (((dword_102303CA8 - 188) > 0x35
     || ((1 << (dword_102303CA8 + 68)) & 0x300000C0000003) == 0)
    && (dword_102303CA8 - 33) >= 2)
  {
    return 0;
  }
  return result;
}

uint64_t sub_1007617C8()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 188) < 0x36) & (0x3C00001FE00003uLL >> (dword_102303CA8
                                                                                               + 68));
}

uint64_t sub_100761850()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 205) < 0x21) & (0x10000000FuLL >> (dword_102303CA8
                                                                                          + 51));
}

uint64_t sub_1007618AC()
{
  uint64_t result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  switch(dword_102303CA8)
  {
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 103:
    case 104:
    case 105:
    case 106:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
      return result;
    case 74:
    case 75:
    case 76:
    case 77:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 107:
    case 108:
    case 109:
    case 110:
    case 126:
    case 127:
    case 128:
    case 129:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
      goto LABEL_7;
    default:
      if ((dword_102303CA8 - 217) > 0x29
        || ((1 << (dword_102303CA8 + 39)) & 0x2000000007FLL) == 0)
      {
LABEL_7:
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_100761B14()
{
  _BOOL4 v0;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v0 = dword_102303CA8 == 258;
  if ((dword_102303CA8 - 89) < 4)
    v0 = 1;
  return (dword_102303CA8 - 95) < 0x27 || v0;
}

BOOL sub_100761B78()
{
  _BOOL8 result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if ((dword_102303CA8 - 99) > 0x22
    || ((1 << (dword_102303CA8 - 99)) & 0x787FFF0FFLL) == 0)
  {
    return dword_102303CA8 == 258;
  }
  return result;
}

uint64_t sub_100761BF0()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 172) < 0x30) & (0xC000000000F7uLL >> (dword_102303CA8
                                                                                             + 84));
}

uint64_t sub_100761C4C()
{
  unsigned __int8 v1[3];
  unsigned __int8 v2;

  v2 = 0;
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  if (dword_102303CA8 == 217)
    v2 = 1;
  sub_1018BF25C(v1, off_1022A2860[0], &v2, 0);
  return v1[1];
}

BOOL sub_100761CC8()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return (dword_102303CA8 - 107) < 4;
}

BOOL sub_100761D14()
{
  if (qword_102303F20 != -1)
    dispatch_once(&qword_102303F20, &stru_1021516F0);
  return (qword_102303F28 & 0x2000) != 0 && (qword_102303F28 & 0x8000) == 0;
}

uint64_t sub_100761D6C()
{
  uint64_t result;
  BOOL v1;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  v1 = (dword_102303CA8 - 68) > 0xC || ((1 << (dword_102303CA8 - 68)) & 0x1C3F) == 0;
  if (v1 && ((dword_102303CA8 - 139) > 4 || ((1 << (dword_102303CA8 + 117)) & 0x15) == 0))
    return 0;
  return result;
}

uint64_t sub_100761DF0()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 115) < 0x13) & (0x787E1u >> (dword_102303CA8 - 115));
}

uint64_t sub_100761E4C()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  return 0;
}

uint64_t sub_100761E88()
{
  if (qword_102303F38 != -1)
    dispatch_once(&qword_102303F38, &stru_102151710);
  return byte_102303F30;
}

void sub_100761EC8(id a1)
{
  int v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = MGGetBoolAnswer(CFSTR("3kmXfug8VcxLI5yEmsqQKw"));
  byte_102303F30 = v1;
  if (v1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102151740);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Booted in to diagnostics mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "Booted in to diagnostics mode", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::inDiagnosticsMode()_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_100762064()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    return 1;
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303E20 != -1)
    dispatch_once(&qword_102303E20, &stru_102151530);
  if ((byte_102303E18 & 1) != 0)
    return 1;
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303DF0 != -1)
    dispatch_once(&qword_102303DF0, &stru_1021514D0);
  return byte_102303DE8;
}

uint64_t sub_10076218C()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    return 1;
  if (qword_102303DF0 != -1)
    dispatch_once(&qword_102303DF0, &stru_1021514D0);
  return byte_102303DE8;
}

uint64_t sub_100762208()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 168) < 0x38) & (0xFC00000001FFFFuLL >> (dword_102303CA8
                                                                                               + 88));
}

uint64_t sub_100762268()
{
  uint64_t result;

  result = sub_1002416E0();
  if ((_DWORD)result)
  {
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    return byte_102303E08;
  }
  return result;
}

BOOL sub_1007622B0()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  return (byte_102303E08 & 1) != 0 || sub_100762300();
}

BOOL sub_100762300()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return dword_102303CA8 == 70 || dword_102303CA8 == 73;
}

BOOL sub_100762350()
{
  _BOOL8 result;

  if (sub_1000FDBFC())
    return sub_10075742C();
  result = sub_1000FDC94();
  if (result)
    return sub_10075742C();
  return result;
}

BOOL sub_100762378()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if ((sub_1001937D8() & 1) == 0 && !sub_1000FDB0C() && !sub_10075B95C())
    goto LABEL_8;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    v0 = 1;
  else
LABEL_8:
    v0 = sub_10075BADC();
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "supportsBBTimeFreqTransfer", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_100762470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100762484()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if ((sub_100193808() & 1) == 0 && !sub_1000FDB0C() && !sub_10075B95C())
    goto LABEL_8;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    v0 = 1;
  else
LABEL_8:
    v0 = sub_10075BADC();
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "supportsGnssDisablementAssertion", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_10076257C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762590()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  BOOL v10;

  sub_1001E4804(&v8);
  v0 = v8;
  if ((sub_100193808() & 1) != 0 || sub_1000FDB0C() || sub_10075B95C())
  {
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    v1 = byte_102303E08;
  }
  else
  {
    v1 = 0;
  }
  v10 = 0;
  v2 = sub_1001E4874(v0, "supportsGnssGnssStatusQueryAssertion", &v10);
  v3 = v10;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v2)
    return v3;
  else
    return v1;
}

void sub_100762680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762694()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if (!sub_100193808())
    goto LABEL_14;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if (byte_102303E08 == 1)
  {
    sub_1001E4804(&v7);
    v9 = 0;
    v0 = sub_1001E4874(v7, "enableWwanAntTuneGnssL5Blanking", &v9);
    if (v9)
      v1 = v0;
    else
      v1 = 0;
    v2 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = 1;
  }
  else
  {
LABEL_14:
    v1 = 0;
    v5 = 0;
  }
  return v1 | (v5 << 8);
}

void sub_100762770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762784()
{
  uint64_t result;

  if (sub_1000FDB0C() || (result = sub_10075B95C(), (_DWORD)result))
  {
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    return byte_102303E08;
  }
  return result;
}

uint64_t sub_1007627D4()
{
  int v0;
  unsigned int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unsigned int v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_100526244(v6, "ProactiveGnssModePowerBudget", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v0)
    return v1;
  else
    return 0;
}

void sub_100762868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10076287C()
{
  unsigned int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "ProactiveGnssModeSupported", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return v0;
  else
    return 0;
}

void sub_100762910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762924()
{
  unsigned int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "SetLocationStreamingDisabled", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return v0;
  else
    return 0;
}

void sub_1007629B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007629CC()
{
  int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "externalLocationDisablementAllowed", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return 1;
  else
    return v0 ^ 1u;
}

void sub_100762A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762A78()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if (byte_102303E08 == 1 && (sub_1001DC634() & 1) == 0)
    return sub_1001DC5AC() ^ 1;
  else
    return 0;
}

uint64_t sub_100762AD8()
{
  uint64_t v0;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v0 = 0;
  if (((dword_102303CA8 - 124) > 0x3B
     || ((1 << (dword_102303CA8 - 124)) & 0xFF0000000000003) == 0)
    && ((dword_102303CA8 - 189) > 0x34
     || ((1 << (dword_102303CA8 + 67)) & 0x18000000000A01) == 0)
    && dword_102303CA8 != 115)
  {
    LODWORD(v0) = sub_1002416E0();
    sub_1001E4804(&v5);
    v7 = 0;
    if (sub_1001E4874(v5, "GnssL5AntTunerContentionWithCell", &v7))
      v0 = v7;
    else
      v0 = v0;
    v2 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return v0;
}

void sub_100762C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762C38()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  if ((dword_102303CA8 - 178) < 0x40
    && ((0xC00000000050083FLL >> (dword_102303CA8 + 78)) & 1) != 0)
  {
    return 0;
  }
  LODWORD(v0) = sub_1002416E0();
  sub_1001E4804(&v5);
  v7 = 0;
  if (sub_1001E4874(v5, "GnssL5AntTunerContentionWithWiFi2p4", &v7))
    v0 = v7;
  else
    v0 = v0;
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return v0;
}

void sub_100762D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762D68()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 115) < 0xB) & (0x601u >> (dword_102303CA8 - 115));
}

uint64_t sub_100762DE8()
{
  unsigned int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "RayTracingTileManagerSupport", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return v0;
  else
    return 0;
}

void sub_100762E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762E90()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 175) < 0x31) & (0x1E000000003E1uLL >> (dword_102303CA8
                                                                                              + 81));
}

uint64_t sub_100762F14()
{
  unsigned int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "GNSSSupportsDynamicL1TuningDesireValue", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return v0;
  else
    return 0;
}

void sub_100762FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100762FBC()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  BOOL v10;

  sub_1001E4804(&v8);
  v0 = v8;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  v1 = byte_102303E08;
  v10 = 0;
  v2 = sub_1001E4874(v0, "supportsProactiveLocation", &v10);
  v3 = v10;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v2)
    return v3;
  else
    return v1;
}

void sub_10076308C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007630A0(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1007630CC(id a1)
{
  void *v1;
  CFPropertyListRef v2;
  const void *v3;
  CFTypeID v4;
  CFPropertyListRef v5;
  const void *v6;
  CFTypeID v7;
  int valuePtr;

  v1 = objc_autoreleasePoolPush();
  byte_102303F48 = 0;
  v2 = CFPreferencesCopyValue(CFSTR("StoreDemoMode"), CFSTR("com.apple.demo-settings"), CFSTR("mobile"), kCFPreferencesAnyHost);
  if (v2)
  {
    v3 = v2;
    CFAutorelease(v2);
    v4 = CFGetTypeID(v3);
    if (v4 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue((CFBooleanRef)v3))
      {
        v5 = CFPreferencesCopyValue(CFSTR("FProgramNumber"), CFSTR("com.apple.demo-settings"), CFSTR("mobile"), kCFPreferencesAnyHost);
        if (v5)
        {
          v6 = v5;
          CFAutorelease(v5);
          v7 = CFGetTypeID(v6);
          if (v7 == CFNumberGetTypeID())
          {
            valuePtr = 0;
            if (CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr))
              byte_102303F48 = valuePtr == 5;
          }
        }
      }
    }
  }
  objc_autoreleasePoolPop(v1);
}

void sub_1007631E0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10076320C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100763238(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100763264(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_100763290(uint64_t a1, uint64_t a2)
{
  return uuid_compare((const unsigned __int8 *)(a1 + 296), (const unsigned __int8 *)(a2 + 64)) != 0;
}

void sub_1007632B8(uint64_t a1)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 14, Current);
}

BOOL sub_1007632F0(uint64_t a1, uint64_t a2)
{
  return !uuid_compare((const unsigned __int8 *)(a1 + 464), (const unsigned __int8 *)(a2 + 72))
      && *(_BYTE *)(a1 + 114) == 0;
}

BOOL sub_100763334(uint64_t a1)
{
  return *(_QWORD *)(a1 + 344) == 33;
}

uint64_t sub_100763350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, __int128 *a7)
{
  const std::string *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double Current;
  _OWORD v34[14];
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;

  *(_QWORD *)a1 = &unk_102151800;
  *(_QWORD *)(a1 + 8) = 23;
  *(_WORD *)(a1 + 16) = 512;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  v14 = (const std::string *)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 40) = v15;
  }
  sub_1006D0F34(a1 + 64, (_QWORD *)(a3 + 40));
  *(_BYTE *)(a1 + 112) = *(_QWORD *)(a3 + 80) > 1uLL;
  *(_BYTE *)(a1 + 113) = a5;
  *(_BYTE *)(a1 + 114) = 0;
  *(_QWORD *)(a1 + 120) = a4;
  bzero((void *)(a1 + 128), 0x250uLL);
  *(_QWORD *)(a1 + 720) = a6;
  v36[0] = off_102151A58;
  v36[1] = a1;
  v37 = v36;
  sub_1008FFFD0(a1 + 728, v36);
  v16 = v37;
  if (v37 == v36)
  {
    v17 = 4;
    v16 = v36;
    goto LABEL_8;
  }
  if (v37)
  {
    v17 = 5;
LABEL_8:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a4 + 296);
  v18 = *a7;
  v19 = a7[2];
  *(_OWORD *)(a1 + 808) = a7[1];
  *(_OWORD *)(a1 + 824) = v19;
  *(_OWORD *)(a1 + 792) = v18;
  uuid_copy((unsigned __int8 *)(a1 + 632), (const unsigned __int8 *)a3);
  std::string::operator=((std::string *)(a1 + 648), v14);
  sub_100763678(a2, (uint64_t)v34);
  v20 = v34[13];
  *(_OWORD *)(a1 + 424) = v34[12];
  *(_OWORD *)(a1 + 440) = v20;
  *(_QWORD *)(a1 + 456) = v35;
  v21 = v34[9];
  *(_OWORD *)(a1 + 360) = v34[8];
  *(_OWORD *)(a1 + 376) = v21;
  v22 = v34[11];
  *(_OWORD *)(a1 + 392) = v34[10];
  *(_OWORD *)(a1 + 408) = v22;
  v23 = v34[5];
  *(_OWORD *)(a1 + 296) = v34[4];
  *(_OWORD *)(a1 + 312) = v23;
  v24 = v34[7];
  *(_OWORD *)(a1 + 328) = v34[6];
  *(_OWORD *)(a1 + 344) = v24;
  v25 = v34[1];
  *(_OWORD *)(a1 + 232) = v34[0];
  *(_OWORD *)(a1 + 248) = v25;
  v26 = v34[3];
  *(_OWORD *)(a1 + 264) = v34[2];
  *(_OWORD *)(a1 + 280) = v26;
  v27 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 608) = v27;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a1 + 456);
  v28 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 544) = v28;
  v29 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 576) = v29;
  v30 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 480) = v30;
  v31 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 512) = v31;
  sub_101256CD4((_QWORD *)(a1 + 128), (__int128 *)(a1 + 232), (uint64_t)v34);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)v34);
  sub_100691160(v34);
  sub_10076370C(a1);
  sub_100763988(a1);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 13, Current);
  return a1;
}

void sub_1007635D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_100764180(v4);
  sub_1006BCA04(v3);
  v6 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 224) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100691160((_QWORD *)(v1 + 176));
  sub_100691160(v2);
  sub_1018C6C8C(v1 + 24);
  _Unwind_Resume(a1);
}

void sub_100763678(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(CFAbsoluteTime *)a2 = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a2 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 16) = 23;
  *(_QWORD *)(a2 + 24) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  v4 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 208) = v4;
  *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 160);
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 144) = v5;
  v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 176) = v6;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 80) = v7;
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 112) = v8;
  uuid_copy((unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)a1);
  uuid_copy((unsigned __int8 *)(a2 + 80), (const unsigned __int8 *)(a1 + 16));
}

uint64_t sub_10076370C(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(result + 112))
  {
    v1 = result;
    if (!*(_QWORD *)(result + 224))
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102151A28);
      v2 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, bringing up CLWorkoutSeriesDetectionModelController", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102151A28);
        v5[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, bringing up CLWorkoutSeriesDetectionModelController", v5, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::bringupModelController()", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
      if (*(_BYTE *)(v1 + 792))
        operator new();
      operator new();
    }
  }
  return result;
}

void sub_100763948()
{
  operator delete();
}

uint64_t sub_100763988(uint64_t a1)
{
  int v2;
  BOOL v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = v2 == 3 || v2 == 5;
  if (!v3 && *(_QWORD *)(a1 + 456) != 1)
  {
    v5 = 1;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a1 + 112))
  {
LABEL_16:
    v5 = 0;
    goto LABEL_19;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Disabling power assertion when auto detection is enabled", buf, 2u);
  }
  v5 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Disabling power assertion when auto detection is enabled", v12, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSeriesPredictor::notifyClientsWithPowerAssertionUpdate()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    goto LABEL_16;
  }
LABEL_19:
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v8 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Notifying clients with power assertion update, shouldEnablePowerAssertion,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v12[0] = 67109120;
    v12[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Notifying clients with power assertion update, shouldEnablePowerAssertion,%d", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::notifyClientsWithPowerAssertionUpdate()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 720) + 48))(*(_QWORD *)(a1 + 720), v5);
}

void sub_100763C9C(uint64_t a1, uint64_t a2, double a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  void (*v12)(void);
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v26 = *(_OWORD *)(a1 + 232);
  v27 = a2;
  v28 = a3;
  v29 = 0u;
  v30 = 0u;
  v6 = *(_OWORD *)(a1 + 440);
  v39 = *(_OWORD *)(a1 + 424);
  v40 = v6;
  v41 = *(_QWORD *)(a1 + 456);
  v7 = *(_OWORD *)(a1 + 376);
  v35 = *(_OWORD *)(a1 + 360);
  v36 = v7;
  v8 = *(_OWORD *)(a1 + 392);
  v38 = *(_OWORD *)(a1 + 408);
  v37 = v8;
  v9 = *(_OWORD *)(a1 + 312);
  v31 = *(_OWORD *)(a1 + 296);
  v32 = v9;
  v10 = *(_OWORD *)(a1 + 328);
  v34 = *(_OWORD *)(a1 + 344);
  v33 = v10;
  if (*(_QWORD *)(a1 + 344) == 14)
    *((_QWORD *)&v30 + 1) = *(_QWORD *)(a1 + 360);
  uuid_copy((unsigned __int8 *)&v31, (const unsigned __int8 *)(a1 + 296));
  uuid_copy((unsigned __int8 *)&v32, (const unsigned __int8 *)(a1 + 312));
  uuid_copy((unsigned __int8 *)&v33, (const unsigned __int8 *)(a1 + 328));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v11 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v23 = a3;
    v24 = 2048;
    v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, notify session update, eventTime,%f, eventType,%ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v18 = 134218240;
    v19 = a3;
    v20 = 2048;
    v21 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, notify session update, eventTime,%f, eventType,%ld", COERCE_DOUBLE(&v18), 22);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::notifyClientsWithWorkoutSessionEvent(CFAbsoluteTime, CMWorkoutEvent)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  switch(a2)
  {
    case 13:
      sub_10090020C(a1 + 728);
      v12 = ***(void (****)(void))(a1 + 720);
      goto LABEL_25;
    case 14:
      if ((_QWORD)v34 != 33)
      {
        sub_100900120(a1 + 728, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1));
        sub_1009004D0((_QWORD *)(a1 + 728));
      }
      v12 = *(void (**)(void))(**(_QWORD **)(a1 + 720) + 16);
      goto LABEL_25;
    case 15:
      sub_10090020C(a1 + 728);
      v12 = *(void (**)(void))(**(_QWORD **)(a1 + 720) + 8);
      goto LABEL_25;
    case 16:
      v12 = *(void (**)(void))(**(_QWORD **)(a1 + 720) + 24);
      goto LABEL_25;
    case 17:
      v12 = *(void (**)(void))(**(_QWORD **)(a1 + 720) + 32);
LABEL_25:
      v12();
      break;
    case 18:
      if ((_QWORD)v34 != 33)
      {
        sub_100900120(a1 + 728, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1));
        sub_1009004D0((_QWORD *)(a1 + 728));
      }
      (*(void (**)(_QWORD, __int128 *, uint64_t, double))(**(_QWORD **)(a1 + 720) + 40))(*(_QWORD *)(a1 + 720), &v26, a1 + 632, *(double *)(a1 + 840));
      break;
    default:
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102151A28);
      v13 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v23 = *(double *)&a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLWorkoutSeriesPredictor, tried to notify invalid event type, eventType, %ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102151A28);
        v18 = 134217984;
        v19 = *(double *)&a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "CLWorkoutSeriesPredictor, tried to notify invalid event type, eventType, %ld", &v18);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSeriesPredictor::notifyClientsWithWorkoutSessionEvent(CFAbsoluteTime, CMWorkoutEvent)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      break;
  }
}

uint64_t sub_100764180(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1007641E4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  const char *v10;
  char *v11;
  const char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  _BYTE buf[32];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = 0;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  sub_100763678(a2, (uint64_t)&v37);
  if ((_QWORD)v44 == 33)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v37;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, client confirmed transition segment, startTime,%f, isManualTransition,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102151A28);
      v14 = 134218240;
      v15 = v37;
      v16 = 1024;
      LODWORD(v17) = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, client confirmed transition segment, startTime,%f, isManualTransition,%d", COERCE_DOUBLE(&v14), 18);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::feedSetCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutSettings &, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v33 = v49;
    v34 = v50;
    v35 = v51;
    v29 = v45;
    v30 = v46;
    v31 = v47;
    v32 = v48;
    v25 = v41;
    v26 = v42;
    v27 = v43;
    v28 = v44;
    *(_OWORD *)buf = v37;
    *(_OWORD *)&buf[16] = v38;
    v23 = v39;
    v24 = v40;
    v36 = a3;
    v6 = a1;
    v7 = 2;
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = *((_QWORD *)&v44 + 1);
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v37;
      LOWORD(v23) = 1024;
      *(_DWORD *)((char *)&v23 + 2) = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, client confirmed workout segment, workoutType,%ld, workoutLocationType,%ld, startTime,%f, isManualTransition,%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102151A28);
      v14 = 134218752;
      v15 = v44;
      v16 = 2048;
      v17 = *((_QWORD *)&v44 + 1);
      v18 = 2048;
      v19 = v37;
      v20 = 1024;
      v21 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, client confirmed workout segment, workoutType,%ld, workoutLocationType,%ld, startTime,%f, isManualTransition,%d", &v14, 38);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::feedSetCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutSettings &, BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v33 = v49;
    v34 = v50;
    v35 = v51;
    v29 = v45;
    v30 = v46;
    v31 = v47;
    v32 = v48;
    v25 = v41;
    v26 = v42;
    v27 = v43;
    v28 = v44;
    *(_OWORD *)buf = v37;
    *(_OWORD *)&buf[16] = v38;
    v23 = v39;
    v24 = v40;
    v36 = a3;
    v6 = a1;
    v7 = 1;
  }
  return sub_10023195C(v6, v7, (uint64_t)buf);
}

void sub_100764680(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  double v23;
  __int128 v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  _BYTE buf[32];
  _BYTE v34[24];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *__p;
  _QWORD *v79;

  v2 = *(_QWORD **)(a1 + 224);
  if (v2)
  {
    sub_100E41AB8(v2, (uint64_t)&v60);
    v3 = __p;
    v4 = v79;
    if (__p != v79)
    {
      do
      {
        v5 = v3[14];
        if (v5 != *(_QWORD *)(a1 + 344) || v3[15] != *(_QWORD *)(a1 + 352))
        {
          v6 = v3[2];
          if (v6 == 21)
          {
            sub_1008FFFD4((uint64_t **)(a1 + 728), v5, v3[15]);
          }
          else if (v6 == 20)
          {
            sub_100900424(a1 + 728, v5, v3[15], v3[16], v3[17]);
          }
        }
        v3 += 29;
      }
      while (v3 != v4);
    }
    v24 = v61;
    v7 = v60;
    v8 = v62;
    v57 = v65;
    v58 = v66;
    v59 = v67;
    v56 = v64;
    v55 = v63;
    v9 = v68;
    v10 = v69;
    v11 = v70;
    v12 = v71;
    v50 = v73;
    v49 = v72;
    v54 = v77;
    v53 = v76;
    v52 = v75;
    v51 = v74;
    if (v68)
    {
      v13 = sub_1009003C0((uint64_t *)(a1 + 728), v68, v69);
      v14 = v13;
      if (v7 < v13)
        v13 = v7;
      if (v14 == -1.0)
        v15 = v7;
      else
        v15 = v13;
      v16 = *(double *)(a1 + 232);
      if (v15 <= v16)
      {
        v17 = v16 + 2.22044605e-16;
        if (v15 < v17)
          v15 = v17;
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102151A28);
        v18 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
        {
          v19 = *(_QWORD *)(a1 + 232);
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v19;
          *(_WORD *)v34 = 2048;
          *(double *)&v34[2] = v15;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "CLWorkoutSeriesPredictor, detected workout time must be later than current segment start time, adjusting detection time, detectedStartTime, %f, prewarmStartTime, %f, currentStartTime, %f, filteredStartTime, %f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102151A28);
          v20 = *(_QWORD *)(a1 + 232);
          v25 = 134218752;
          v26 = v7;
          v27 = 2048;
          v28 = v14;
          v29 = 2048;
          v30 = v20;
          v31 = 2048;
          v32 = v15;
          LODWORD(v23) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "CLWorkoutSeriesPredictor, detected workout time must be later than current segment start time, adjusting detection time, detectedStartTime, %f, prewarmStartTime, %f, currentStartTime, %f, filteredStartTime, %f", COERCE_DOUBLE(&v25), v23, *(double *)&v24, *((double *)&v24 + 1));
          v22 = (char *)v21;
          sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSeriesPredictor::feedMotionStateUpdate(const CLWorkoutPredictorActivity &)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
      }
      *(_QWORD *)buf = v8;
      *(double *)&buf[8] = v15;
      *(_OWORD *)&buf[16] = v24;
      v35 = v56;
      v36 = v57;
      *(_QWORD *)v34 = 0xBFF0000000000000;
      v37 = v58;
      v38 = v59;
      *(_OWORD *)&v34[8] = v55;
      v39 = v9;
      v40 = v10;
      v41 = v11;
      v42 = v12;
      v48 = v54;
      v47 = v53;
      v46 = v52;
      v45 = v51;
      v44 = v50;
      v43 = v49;
      sub_10023195C(a1, 3, (uint64_t)buf);
    }
    if (__p)
    {
      v79 = __p;
      operator delete(__p);
    }
  }
}

void sub_100764A68(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x850];
  if (STACK[0x850])
  {
    STACK[0x858] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100764A9C(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  const char *v5;
  char *v6;
  int v7;
  CFAbsoluteTime v8;
  _BYTE buf[1632];

  Current = CFAbsoluteTimeGetCurrent();
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(CFAbsoluteTime *)&buf[4] = Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, client confirmed manual pause, startTime,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v7 = 134217984;
    v8 = Current;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, client confirmed manual pause, startTime,%f", COERCE_DOUBLE(&v7));
    v6 = (char *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::feedManualPause(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(CFAbsoluteTime *)buf = Current;
  return sub_10023195C(a1, 4, (uint64_t)buf);
}

uint64_t sub_100764C68(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  const char *v5;
  char *v6;
  int v7;
  CFAbsoluteTime v8;
  _BYTE buf[1632];

  Current = CFAbsoluteTimeGetCurrent();
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(CFAbsoluteTime *)&buf[4] = Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, workout session end, endTime,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v7 = 134217984;
    v8 = Current;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, workout session end, endTime,%f", COERCE_DOUBLE(&v7));
    v6 = (char *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::endWorkoutSession()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(CFAbsoluteTime *)buf = Current;
  return sub_10023195C(a1, 5, (uint64_t)buf);
}

uint64_t sub_100764E34(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 224))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down CLWorkoutSeriesDetectionModelController", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102151A28);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tearing down CLWorkoutSeriesDetectionModelController", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::teardownModelController()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v3 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return sub_10090020C(a1 + 728);
}

void sub_100764FF4(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double Current;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  *(_BYTE *)(a1 + 114) = 0;
  v4 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 608) = v4;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a1 + 456);
  v5 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 544) = v5;
  v6 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 576) = v6;
  v7 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 480) = v7;
  v8 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 512) = v8;
  v9 = *(_QWORD *)(a1 + 224);
  if (v9)
    sub_100E40CE0(v9, (uint64_t)a2, a2[232]);
  sub_101256D00((int64x2_t *)(a1 + 128), a2, a2[232], (uint64_t)&v20);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)&v20);
  sub_100691160(&v20);
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v10 = *(_QWORD *)(a1 + 712);
  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * ((v10 + *(_QWORD *)(a1 + 704) - 1) / 0x11uLL))
        + 232 * ((v10 + *(_QWORD *)(a1 + 704) - 1) % 0x11uLL);
    v31 = *(_OWORD *)(v11 + 176);
    v32 = *(_OWORD *)(v11 + 192);
    v33 = *(_OWORD *)(v11 + 208);
    v34 = *(_QWORD *)(v11 + 224);
    v27 = *(_OWORD *)(v11 + 112);
    v28 = *(_OWORD *)(v11 + 128);
    v29 = *(_OWORD *)(v11 + 144);
    v30 = *(_OWORD *)(v11 + 160);
    v23 = *(_OWORD *)(v11 + 48);
    v24 = *(_OWORD *)(v11 + 64);
    v25 = *(_OWORD *)(v11 + 80);
    v26 = *(_OWORD *)(v11 + 96);
    v20 = *(_OWORD *)v11;
    v21 = *(_OWORD *)(v11 + 16);
    v22 = *(_OWORD *)(v11 + 32);
  }
  *(_QWORD *)(a1 + 456) = v34;
  v12 = v21;
  *(_OWORD *)(a1 + 232) = v20;
  *(_OWORD *)(a1 + 248) = v12;
  v13 = v33;
  *(_OWORD *)(a1 + 424) = v32;
  *(_OWORD *)(a1 + 440) = v13;
  v14 = v29;
  *(_OWORD *)(a1 + 360) = v28;
  *(_OWORD *)(a1 + 376) = v14;
  v15 = v31;
  *(_OWORD *)(a1 + 392) = v30;
  *(_OWORD *)(a1 + 408) = v15;
  v16 = v25;
  *(_OWORD *)(a1 + 296) = v24;
  *(_OWORD *)(a1 + 312) = v16;
  v17 = v27;
  *(_OWORD *)(a1 + 328) = v26;
  *(_OWORD *)(a1 + 344) = v17;
  v18 = v23;
  *(_OWORD *)(a1 + 264) = v22;
  *(_OWORD *)(a1 + 280) = v18;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 14, Current);
}

void sub_1007651F8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double Current;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 224);
  if (v4)
    sub_100E40F08(v4, a2[232]);
  sub_101256D00((int64x2_t *)(a1 + 128), a2, a2[232], (uint64_t)&v15);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)&v15);
  sub_100691160(&v15);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = *(_QWORD *)(a1 + 712);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * ((v5 + *(_QWORD *)(a1 + 704) - 1) / 0x11uLL))
       + 232 * ((v5 + *(_QWORD *)(a1 + 704) - 1) % 0x11uLL);
    v26 = *(_OWORD *)(v6 + 176);
    v27 = *(_OWORD *)(v6 + 192);
    v28 = *(_OWORD *)(v6 + 208);
    v29 = *(_QWORD *)(v6 + 224);
    v22 = *(_OWORD *)(v6 + 112);
    v23 = *(_OWORD *)(v6 + 128);
    v24 = *(_OWORD *)(v6 + 144);
    v25 = *(_OWORD *)(v6 + 160);
    v18 = *(_OWORD *)(v6 + 48);
    v19 = *(_OWORD *)(v6 + 64);
    v20 = *(_OWORD *)(v6 + 80);
    v21 = *(_OWORD *)(v6 + 96);
    v15 = *(_OWORD *)v6;
    v16 = *(_OWORD *)(v6 + 16);
    v17 = *(_OWORD *)(v6 + 32);
  }
  *(_QWORD *)(a1 + 456) = v29;
  v7 = v16;
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 248) = v7;
  v8 = v28;
  *(_OWORD *)(a1 + 424) = v27;
  *(_OWORD *)(a1 + 440) = v8;
  v9 = v24;
  *(_OWORD *)(a1 + 360) = v23;
  *(_OWORD *)(a1 + 376) = v9;
  v10 = v26;
  *(_OWORD *)(a1 + 392) = v25;
  *(_OWORD *)(a1 + 408) = v10;
  v11 = v20;
  *(_OWORD *)(a1 + 296) = v19;
  *(_OWORD *)(a1 + 312) = v11;
  v12 = v22;
  *(_OWORD *)(a1 + 328) = v21;
  *(_OWORD *)(a1 + 344) = v12;
  v13 = v18;
  *(_OWORD *)(a1 + 264) = v17;
  *(_OWORD *)(a1 + 280) = v13;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 14, Current);
}

void sub_1007653C0(_QWORD *a1, double *a2)
{
  double Current;
  _QWORD v5[6];

  a1[30] = *(_QWORD *)a2;
  sub_100764E34((uint64_t)a1);
  sub_101257F50(a1 + 16, (uint64_t)v5, *a2);
  sub_1006D1CA8(a1 + 84, (uint64_t)v5);
  sub_100691160(v5);
  sub_100763988((uint64_t)a1);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C((uint64_t)a1, 16, Current);
}

void sub_100765430(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[6];

  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 264) = a2[2];
  *(_OWORD *)(a1 + 248) = v4;
  *(_OWORD *)(a1 + 232) = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[6];
  *(_OWORD *)(a1 + 312) = a2[5];
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 296) = v6;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[10];
  *(_OWORD *)(a1 + 376) = a2[9];
  *(_OWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 344) = v8;
  *(_OWORD *)(a1 + 360) = v9;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[13];
  v14 = *((_QWORD *)a2 + 28);
  *(_QWORD *)(a1 + 456) = v14;
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  v15 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 608) = v15;
  *(_QWORD *)(a1 + 624) = v14;
  v16 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 544) = v16;
  v17 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 576) = v17;
  v18 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 480) = v18;
  v19 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 512) = v19;
  sub_101256D00((int64x2_t *)(a1 + 128), (unsigned __int8 *)a2, *((unsigned __int8 *)a2 + 232), (uint64_t)v20);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)v20);
  sub_100691160(v20);
  sub_100765504(a1);
}

void sub_100765504(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, exiting manual pause", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, exiting manual pause", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::exitManualPause(const T *) [T = CLWorkoutSeriesPredictor::EWorkoutConfirmed]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10076370C(a1);
  sub_100763988(a1);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 17, Current);
}

void sub_1007656B4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[6];

  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 264) = a2[2];
  *(_OWORD *)(a1 + 248) = v4;
  *(_OWORD *)(a1 + 232) = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[6];
  *(_OWORD *)(a1 + 312) = a2[5];
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 296) = v6;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[10];
  *(_OWORD *)(a1 + 376) = a2[9];
  *(_OWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 344) = v8;
  *(_OWORD *)(a1 + 360) = v9;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[13];
  *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  sub_101256D00((int64x2_t *)(a1 + 128), (unsigned __int8 *)a2, *((unsigned __int8 *)a2 + 232), (uint64_t)v14);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)v14);
  sub_100691160(v14);
  sub_10076575C(a1);
}

void sub_10076575C(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, exiting manual pause", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, exiting manual pause", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::exitManualPause(const T *) [T = CLWorkoutSeriesPredictor::ETransitionConfirmed]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10076370C(a1);
  sub_100763988(a1);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 17, Current);
}

void sub_10076590C(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  CFAbsoluteTime Current;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const char *v12;
  uint8_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint8_t buf[8];
  CFAbsoluteTime v29;
  __int128 v30;
  CFAbsoluteTime v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, exiting manual pause into detected transition", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, exiting manual pause into detected transition", &v15, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::enterSegmentDetectedFromManualPause(const EWorkoutConfirmed *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v14 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 440);
  v25 = *(_OWORD *)(a1 + 424);
  v26 = v6;
  v27 = *(_QWORD *)(a1 + 456);
  v7 = *(_OWORD *)(a1 + 376);
  v21 = *(_OWORD *)(a1 + 360);
  v22 = v7;
  v8 = *(_OWORD *)(a1 + 408);
  v23 = *(_OWORD *)(a1 + 392);
  v24 = v8;
  v9 = *(_OWORD *)(a1 + 312);
  v17 = *(_OWORD *)(a1 + 296);
  v18 = v9;
  v10 = *(_OWORD *)(a1 + 344);
  v19 = *(_OWORD *)(a1 + 328);
  v20 = v10;
  v11 = *(_OWORD *)(a1 + 280);
  v15 = *(_OWORD *)(a1 + 264);
  v16 = v11;
  sub_100765430(a1, a2);
  *(CFAbsoluteTime *)buf = Current;
  v29 = Current;
  v30 = v14;
  v31 = Current;
  v41 = v24;
  v42 = v25;
  v43 = v26;
  v37 = v20;
  v38 = v21;
  v39 = v22;
  v40 = v23;
  v33 = v16;
  v34 = v17;
  v35 = v18;
  v44 = v27;
  v36 = v19;
  v32 = v15;
  sub_100765B78(a1, (uint64_t)buf);
}

__n128 sub_100765B78(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(a2 + 128);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134218496;
    v33 = v5;
    v34 = 2048;
    v35 = v6;
    v36 = 2048;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, auto-detected new workout, workoutType,%ld, workoutLocationType,%ld, detectionTime,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v21 = *(_QWORD *)(a2 + 120);
    v22 = *(_QWORD *)(a2 + 128);
    v23 = *(_QWORD *)(a2 + 8);
    v26 = 134218496;
    v27 = v21;
    v28 = 2048;
    v29 = v22;
    v30 = 2048;
    v31 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, auto-detected new workout, workoutType,%ld, workoutLocationType,%ld, detectionTime,%f", &v26, 32);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::enterSegmentDetected(const ESegmentDetected *)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  if (*(_BYTE *)(a1 + 114))
    v8 = 1;
  else
    v8 = *(_QWORD *)(a2 + 120) != 33;
  *(_BYTE *)(a1 + 114) = v8;
  sub_101257920((_QWORD *)(a1 + 128), (__int128 *)(a2 + 8), (uint64_t)buf);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)buf);
  sub_100691160(buf);
  sub_100E410B0(*(_QWORD *)(a1 + 224), a2 + 8);
  v9 = *(_OWORD *)(a2 + 8);
  v10 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 232) = v9;
  v11 = *(_OWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 72);
  v13 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 296) = v12;
  v14 = *(_OWORD *)(a2 + 120);
  v15 = *(_OWORD *)(a2 + 136);
  v16 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 392) = v16;
  *(_OWORD *)(a1 + 344) = v14;
  *(_OWORD *)(a1 + 360) = v15;
  v17 = *(_OWORD *)(a2 + 184);
  v18 = *(_OWORD *)(a2 + 200);
  v19 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 424) = v18;
  *(_OWORD *)(a1 + 440) = v19;
  *(_OWORD *)(a1 + 408) = v17;
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a1 + 232);
  sub_100763C9C(a1, 18, *(double *)a2);
  return result;
}

void sub_100765E30(uint64_t a1, double *a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102151A28);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, auto-detected current confirmed workout, removing detected transition", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102151A28);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesPredictor, auto-detected current confirmed workout, removing detected transition", v20, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::returnToConfirmedWorkout(const ESegmentDetected *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  sub_1012579A0((_QWORD *)(a1 + 128), (uint64_t)(a2 + 1), (uint64_t)buf);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)buf);
  sub_100691160(buf);
  sub_100E410B0(*(_QWORD *)(a1 + 224), (uint64_t)(a2 + 1));
  v5 = *(_QWORD *)(a1 + 712) + *(_QWORD *)(a1 + 704) - 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  v8 = *(_OWORD *)(v6 + 16);
  v7 = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)v6;
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 264) = v7;
  v9 = *(_OWORD *)(v6 + 96);
  v11 = *(_OWORD *)(v6 + 48);
  v10 = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(a1 + 328) = v9;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 296) = v10;
  v12 = *(_OWORD *)(v6 + 160);
  v14 = *(_OWORD *)(v6 + 112);
  v13 = *(_OWORD *)(v6 + 128);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(v6 + 144);
  *(_OWORD *)(a1 + 392) = v12;
  *(_OWORD *)(a1 + 344) = v14;
  *(_OWORD *)(a1 + 360) = v13;
  v16 = *(_OWORD *)(v6 + 192);
  v15 = *(_OWORD *)(v6 + 208);
  v17 = *(_OWORD *)(v6 + 176);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(v6 + 224);
  *(_OWORD *)(a1 + 424) = v16;
  *(_OWORD *)(a1 + 440) = v15;
  *(_OWORD *)(a1 + 408) = v17;
  *(CFAbsoluteTime *)(a1 + 840) = CFAbsoluteTimeGetCurrent();
  sub_100763C9C(a1, 18, *a2);
}

uint64_t sub_10076609C(uint64_t a1, double *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  sub_101257F50((_QWORD *)(a1 + 128), (uint64_t)&v14, *a2);
  sub_1006D1CA8((_QWORD *)(a1 + 672), (uint64_t)&v14);
  sub_100691160(&v14);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = *(_QWORD *)(a1 + 712);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * ((v4 + *(_QWORD *)(a1 + 704) - 1) / 0x11uLL))
       + 232 * ((v4 + *(_QWORD *)(a1 + 704) - 1) % 0x11uLL);
    v25 = *(_OWORD *)(v5 + 176);
    v26 = *(_OWORD *)(v5 + 192);
    v27 = *(_OWORD *)(v5 + 208);
    v28 = *(_QWORD *)(v5 + 224);
    v21 = *(_OWORD *)(v5 + 112);
    v22 = *(_OWORD *)(v5 + 128);
    v23 = *(_OWORD *)(v5 + 144);
    v24 = *(_OWORD *)(v5 + 160);
    v17 = *(_OWORD *)(v5 + 48);
    v18 = *(_OWORD *)(v5 + 64);
    v19 = *(_OWORD *)(v5 + 80);
    v20 = *(_OWORD *)(v5 + 96);
    v14 = *(_OWORD *)v5;
    v15 = *(_OWORD *)(v5 + 16);
    v16 = *(_OWORD *)(v5 + 32);
  }
  *(_QWORD *)(a1 + 456) = v28;
  v6 = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 248) = v6;
  v7 = v27;
  *(_OWORD *)(a1 + 424) = v26;
  *(_OWORD *)(a1 + 440) = v7;
  v8 = v23;
  *(_OWORD *)(a1 + 360) = v22;
  *(_OWORD *)(a1 + 376) = v8;
  v9 = v25;
  *(_OWORD *)(a1 + 392) = v24;
  *(_OWORD *)(a1 + 408) = v9;
  v10 = v19;
  *(_OWORD *)(a1 + 296) = v18;
  *(_OWORD *)(a1 + 312) = v10;
  v11 = v21;
  *(_OWORD *)(a1 + 328) = v20;
  *(_OWORD *)(a1 + 344) = v11;
  v12 = v17;
  *(_OWORD *)(a1 + 264) = v16;
  *(_OWORD *)(a1 + 280) = v12;
  *(double *)(a1 + 240) = *a2;
  sub_100763988(a1);
  sub_100763C9C(a1, 15, *a2);
  return sub_100764E34(a1);
}

void sub_100766268(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100766298()
{
  operator delete();
}

_QWORD *sub_1007662AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102151A58;
  result[1] = v3;
  return result;
}

uint64_t sub_1007662E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102151A58;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007662FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 720);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t sub_100766318(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100766354()
{
}

void sub_100766668(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

uint64_t sub_100766694()
{
  uint64_t result;

  if (qword_102310C58)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C58 + 8))(qword_102310C58);
  if (qword_102310C60)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C60 + 8))(qword_102310C60);
  if (qword_102310C68)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C68 + 8))(qword_102310C68);
  if (qword_102310C70)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C70 + 8))(qword_102310C70);
  if (qword_102310C78)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C78 + 8))(qword_102310C78);
  if (qword_102310C80)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C80 + 8))(qword_102310C80);
  if (qword_102310C88)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C88 + 8))(qword_102310C88);
  if (qword_102310C90)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C90 + 8))(qword_102310C90);
  if (qword_102310C98)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310C98 + 8))(qword_102310C98);
  if (qword_102310CA0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310CA0 + 8))(qword_102310CA0);
  if (qword_102310CA8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310CA8 + 8))(qword_102310CA8);
  result = qword_102310CB0;
  if (qword_102310CB0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102310CB0 + 8))(qword_102310CB0);
  return result;
}

void sub_1007667C8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_102303F49 & 1) == 0)
  {
    byte_102303F49 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", a4);
    sub_100DA4728(v4, v5, v6, v7);
    operator new();
  }
}

double sub_100766B98(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_102151D50;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t sub_100766BB8(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102151DC8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100766BD0(uint64_t result)
{
  *(_QWORD *)result = off_102151E40;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100766BE8(uint64_t result)
{
  *(_QWORD *)result = off_102151EB8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100766C00(uint64_t result)
{
  *(_QWORD *)result = off_102151FA8;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100766C18(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151AF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_100766C28(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310C58;
  if (!qword_102310C58)
  {
    sub_1007667C8(0, a2, a3, a4);
    return qword_102310C58;
  }
  return result;
}

void sub_100766C54()
{
  operator new();
}

uint64_t sub_100766CA4(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 96);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v5 + 48), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 56), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, a2, *(double *)(v5 + 64), a3);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 72), a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 76), a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 88), a2, a4);
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_QWORD *)(v5 + 80), a2, a4);
  if ((*(_DWORD *)(v5 + 96) & 0x800) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 88), a2, a4);
  return result;
}

void sub_100766E18(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100109E68(a1, (uint64_t)lpsrc);
}

uint64_t sub_100766E64()
{
  return 1;
}

_QWORD *sub_100766E6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.Position");
}

double sub_100766E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 1069);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 60);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 60) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 60);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((*(_BYTE *)(a2 + 60) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 60) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_14:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(double *)(a1 + 24) = result;
    v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(double *)(a1 + 32) = result;
    v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0)
        return result;
      goto LABEL_10;
    }
LABEL_16:
    result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(double *)(a1 + 40) = result;
    if ((*(_DWORD *)(a2 + 60) & 0x20) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(double *)(a1 + 48) = result;
  }
  return result;
}

void sub_100766FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100766FC4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151B70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100766FD4()
{
  operator new();
}

uint64_t sub_10076701C(uint64_t result)
{
  if (*(_BYTE *)(result + 60))
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 60) = 0;
  return result;
}

uint64_t sub_10076703C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 60);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v4 + 32), a3);
  v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v4 + 48), a3);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v4 + 40), a3);
  if ((*(_DWORD *)(v4 + 60) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v4 + 48), a3);
  return result;
}

uint64_t sub_100767108(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 60);
  if (*(_BYTE *)(a1 + 60))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 9;
    if ((v1 & 8) != 0)
      v2 += 9;
    if ((v1 & 0x10) != 0)
      v2 += 9;
    if ((v1 & 0x20) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 56) = v1;
  return v1;
}

double sub_100767164(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100766E7C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1007671B0()
{
  return 1;
}

_QWORD *sub_1007671B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.Velocity");
}

void sub_1007671C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 1500);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  v5 = *(_DWORD *)(a2 + 72);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_BYTE *)(a1 + 20) = v10;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v11 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 64) = v11;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    v13 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_QWORD *)(a1 + 32) = v13;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  v12 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_QWORD *)(a1 + 24) = v12;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_22:
  v14 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(_QWORD *)(a1 + 40) = v14;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_QWORD *)(a1 + 48) = v6;
    v5 = *(_DWORD *)(a2 + 72);
  }
LABEL_13:
  if ((v5 & 0x100) != 0)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(_QWORD *)(a1 + 56) = v7;
  }
}

void sub_100767358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100767370(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151BE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100767380()
{
  operator new();
}

uint64_t sub_1007673D0(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 72);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
    *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_10076740C(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 64), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(v5 + 56), a2, a4);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_QWORD *)(v5 + 48), a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(v5 + 56), a2, a4);
  return result;
}

uint64_t sub_10076752C(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  unsigned int v9;

  v3 = *(_DWORD *)(a1 + 72);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v6 = v4 + 2;
    else
      v6 = v4;
    if ((v3 & 8) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
        v3 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        v8 = 2;
      }
      v6 += v8;
    }
    if ((v3 & 0x10) != 0)
    {
      v6 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 72);
    }
    v9 = v6 + 9;
    if ((v3 & 0x20) == 0)
      v9 = v6;
    if ((v3 & 0x40) != 0)
      v5 = v9 + 9;
    else
      v5 = v9;
    if ((v3 & 0x80) != 0)
    {
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 72);
    }
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0x100) != 0)
    v5 = v5
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 56), a2)+ 1;
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

void sub_100767628(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1007671C8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100767674()
{
  return 1;
}

_QWORD *sub_10076767C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.Time");
}

void sub_10076768C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 1852);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102310C70 + 8);
      sub_1007671C8(v6, v7);
      v5 = *(_DWORD *)(a2 + 48);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_20;
      }
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 48) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102310C70 + 16);
    sub_100109E68(v8, v9);
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_25;
    }
LABEL_20:
    *(_DWORD *)(a1 + 48) |= 4u;
    v10 = *(_QWORD *)(a1 + 24);
    if (!v10)
      operator new();
    v11 = *(_QWORD *)(a2 + 24);
    if (!v11)
      v11 = *(_QWORD *)(qword_102310C70 + 24);
    sub_100766E7C(v10, v11);
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
LABEL_26:
      v13 = *(_DWORD *)(a2 + 40);
      if (v13 >= 5)
        sub_10190785C();
      *(_DWORD *)(a1 + 48) |= 0x10u;
      *(_DWORD *)(a1 + 40) = v13;
      return;
    }
LABEL_25:
    v12 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_QWORD *)(a1 + 32) = v12;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0)
      return;
    goto LABEL_26;
  }
}

void sub_1007678B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1007678CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151C60;
  sub_10010A10C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_1007678FC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310C70;
  if (!qword_102310C70)
  {
    sub_1007667C8(0, a2, a3, a4);
    return qword_102310C70;
  }
  return result;
}

void sub_100767928()
{
  operator new();
}

uint64_t sub_10076796C(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  LOBYTE(v1) = *(_BYTE *)(result + 48);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 48) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        v3 = *(_DWORD *)(v2 + 72);
        if ((_BYTE)v3)
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
          *(_BYTE *)(v2 + 20) = 0;
          *(_DWORD *)(v2 + 64) = 0;
          *(_OWORD *)(v2 + 24) = 0u;
          *(_OWORD *)(v2 + 40) = 0u;
        }
        if ((v3 & 0xFF00) != 0)
          *(_QWORD *)(v2 + 56) = 0;
        *(_DWORD *)(v2 + 72) = 0;
        v1 = *(_DWORD *)(result + 48);
      }
    }
    if ((v1 & 2) != 0)
    {
      v4 = *(_QWORD *)(result + 16);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 96);
        if ((_BYTE)v5)
        {
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 40) = 0u;
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        if ((v5 & 0xFF00) != 0)
        {
          *(_QWORD *)(v4 + 72) = 0;
          *(_QWORD *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 88) = 0;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v1 = *(_DWORD *)(result + 48);
      }
    }
    if ((v1 & 4) != 0)
    {
      v6 = *(_QWORD *)(result + 24);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 60))
        {
          *(_OWORD *)(v6 + 40) = 0u;
          *(_OWORD *)(v6 + 24) = 0u;
          *(_OWORD *)(v6 + 8) = 0u;
        }
        *(_DWORD *)(v6 + 60) = 0;
      }
    }
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_100767A38(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310C70 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102310C70 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_13:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102310C70 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 40), (int)a2, a4);
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 40), (int)a2, a4);
  return result;
}

uint64_t sub_100767B18(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_35;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310C70 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10076752C(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102310C70 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100108F70(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *(_DWORD *)(a1 + 48);
  }
LABEL_18:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_20;
LABEL_28:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
    if ((*(_DWORD *)(a1 + 48) & 0x10) == 0)
      goto LABEL_35;
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v13 = *(_QWORD *)(qword_102310C70 + 24);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100767108(v13);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 8) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v3 & 0x10) == 0)
    goto LABEL_35;
LABEL_29:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v17 & 0x80000000) != 0)
  {
    v18 = 11;
  }
  else if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
  }
  else
  {
    v18 = 2;
  }
  v4 = (v18 + v4);
LABEL_35:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_100767C88(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10076768C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100767CD4()
{
  return 1;
}

_QWORD *sub_100767CDC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.Fix");
}

void sub_100767CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 2199);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v7 = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_BYTE *)(a1 + 16) = v7;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 48) |= 2u;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
    v9 = *(_QWORD *)(qword_102310C78 + 8);
  sub_1007671C8(v8, v9);
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
LABEL_20:
    v11 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 40) = v11;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_18:
  v10 = *(_DWORD *)(a2 + 20);
  if (v10 >= 7)
    sub_101907884();
  *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 8) != 0)
    goto LABEL_20;
LABEL_8:
  if ((v5 & 0x10) == 0)
    goto LABEL_9;
LABEL_21:
  v12 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(_QWORD *)(a1 + 24) = v12;
  if ((*(_DWORD *)(a2 + 48) & 0x20) != 0)
  {
LABEL_10:
    v6 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_QWORD *)(a1 + 32) = v6;
  }
}

void sub_100767E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100767E9C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102151CD8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102310C78 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100767EF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100767E9C(a1);
  operator delete();
}

void sub_100767F14()
{
  operator new();
}

uint64_t sub_100767F58(uint64_t result)
{
  char v1;
  uint64_t v2;
  int v3;

  v1 = *(_BYTE *)(result + 48);
  if (v1)
  {
    *(_BYTE *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        v3 = *(_DWORD *)(v2 + 72);
        if ((_BYTE)v3)
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
          *(_BYTE *)(v2 + 20) = 0;
          *(_DWORD *)(v2 + 64) = 0;
          *(_OWORD *)(v2 + 24) = 0u;
          *(_OWORD *)(v2 + 40) = 0u;
        }
        if ((v3 & 0xFF00) != 0)
          *(_QWORD *)(v2 + 56) = 0;
        *(_DWORD *)(v2 + 72) = 0;
      }
    }
    *(_QWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 20) = 0;
    *(_QWORD *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_100767FBC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  int v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v5 = (unsigned int *)(a1 + 40);
  v6 = (unint64_t *)(a1 + 24);
  v7 = (unint64_t *)(a1 + 32);
  while (2)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v39 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
          if (!(_DWORD)result)
            return result;
          v13 = v39;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v12;
          v14 = v12 + 1;
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 16) = v13 != 0;
        v15 = *(_DWORD *)(a1 + 48) | 1;
        *(_DWORD *)(a1 + 48) = v15;
        if ((unint64_t)v14 < v11 && *v14 == 18)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_31;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_22;
        v15 = *(_DWORD *)(a1 + 48);
LABEL_31:
        *(_DWORD *)(a1 + 48) = v15 | 2;
        v23 = *(_QWORD *)(a1 + 8);
        if (!v23)
          operator new();
        v40 = 0;
        v24 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v24 >= *((_QWORD *)this + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40))return 0;
        }
        else
        {
          v40 = *v24;
          *((_QWORD *)this + 1) = v24 + 1;
        }
        v25 = *((_DWORD *)this + 14);
        v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 < v26)
        {
          v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v40);
          if (sub_1000F6B00(v23, this, v28))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
              v29 = *((_DWORD *)this + 14);
              v30 = __OFSUB__(v29, 1);
              v31 = v29 - 1;
              if (v31 < 0 == v30)
                *((_DWORD *)this + 14) = v31;
              v32 = (_BYTE *)*((_QWORD *)this + 1);
              v16 = *((_QWORD *)this + 2);
              if ((unint64_t)v32 < v16 && *v32 == 24)
              {
                v17 = v32 + 1;
                *((_QWORD *)this + 1) = v17;
LABEL_45:
                v38 = 0;
                if ((unint64_t)v17 >= v16 || *v17 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38);
                  if (!(_DWORD)result)
                    return result;
                  v33 = v38;
                }
                else
                {
                  v33 = *v17;
                  *((_QWORD *)this + 1) = v17 + 1;
                }
                if (v33 <= 6)
                {
                  *(_DWORD *)(a1 + 48) |= 4u;
                  *(_DWORD *)(a1 + 20) = v33;
                }
                v34 = (_BYTE *)*((_QWORD *)this + 1);
                v18 = *((_QWORD *)this + 2);
                if ((unint64_t)v34 < v18 && *v34 == 32)
                {
                  v19 = v34 + 1;
                  *((_QWORD *)this + 1) = v19;
LABEL_55:
                  if ((unint64_t)v19 >= v18 || *v19 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
                    if (!(_DWORD)result)
                      return result;
                    v35 = (_BYTE *)*((_QWORD *)this + 1);
                    v18 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    *v5 = *v19;
                    v35 = v19 + 1;
                    *((_QWORD *)this + 1) = v35;
                  }
                  *(_DWORD *)(a1 + 48) |= 8u;
                  if ((unint64_t)v35 < v18 && *v35 == 40)
                  {
                    v20 = v35 + 1;
                    *((_QWORD *)this + 1) = v20;
LABEL_63:
                    if ((unint64_t)v20 >= v18 || *v20 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
                      if (!(_DWORD)result)
                        return result;
                      v36 = (_BYTE *)*((_QWORD *)this + 1);
                      v18 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      *v6 = *v20;
                      v36 = v20 + 1;
                      *((_QWORD *)this + 1) = v36;
                    }
                    *(_DWORD *)(a1 + 48) |= 0x10u;
                    if ((unint64_t)v36 < v18 && *v36 == 48)
                    {
                      v21 = v36 + 1;
                      *((_QWORD *)this + 1) = v21;
LABEL_71:
                      if ((unint64_t)v21 >= v18 || *v21 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
                        if (!(_DWORD)result)
                          return result;
                        v37 = (unsigned __int8 *)*((_QWORD *)this + 1);
                        v18 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        *v7 = *v21;
                        v37 = (unsigned __int8 *)(v21 + 1);
                        *((_QWORD *)this + 1) = v37;
                      }
                      *(_DWORD *)(a1 + 48) |= 0x20u;
                      if (v37 == (unsigned __int8 *)v18
                        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        result = 1;
                        *((_BYTE *)this + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_45;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v19 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_55;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v20 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_63;
      case 6u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v21 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_71;
      default:
        v10 = TagFallback & 7;
LABEL_22:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100768424(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), (BOOL)a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310C78 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 40), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 24), (unint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 48) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
  return result;
}

uint64_t sub_100768500(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;

  v3 = *(_DWORD *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_27;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310C78 + 8);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10076752C(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    v4 = (v4 | 1) + v7 + v8;
    v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
LABEL_21:
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
        v3 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        v12 = 2;
      }
      v4 = (v12 + v4);
      if ((v3 & 0x10) == 0)
      {
LABEL_6:
        if ((v3 & 0x20) == 0)
          goto LABEL_27;
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v9 & 0x80000000) != 0)
  {
    v10 = 11;
  }
  else if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v10 = 2;
  }
  v4 = (v10 + v4);
  if ((v3 & 8) != 0)
    goto LABEL_21;
LABEL_5:
  if ((v3 & 0x10) == 0)
    goto LABEL_6;
LABEL_25:
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
  if ((*(_DWORD *)(a1 + 48) & 0x20) != 0)
LABEL_26:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
LABEL_27:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_100768628(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100767CEC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100768674()
{
  return 1;
}

_QWORD *sub_10076867C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.TimeTransferData");
}

void sub_10076868C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 2518);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102310C80 + 8);
      sub_100767CEC(v7, v8);
      v5 = *(_DWORD *)(a2 + 52);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_17;
      }
    }
    else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
LABEL_17:
    v10 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(_QWORD *)(a1 + 24) = v10;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_18:
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_QWORD *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 52) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(_QWORD *)(a1 + 40) = v6;
  }
}

void sub_1007687EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100768804(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102151D50;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102310C80 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100768858(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100768804(a1);
  operator delete();
}

uint64_t sub_10076887C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310C80;
  if (!qword_102310C80)
  {
    sub_1007667C8(0, a2, a3, a4);
    return qword_102310C80;
  }
  return result;
}

void sub_1007688A8()
{
  operator new();
}

uint64_t sub_1007688EC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 52))
  {
    if ((*(_BYTE *)(result + 52) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_100767F58(result);
    }
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
  }
  *(_DWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t sub_10076892C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t result;
  _BYTE *v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  unsigned int v32;

  v5 = (unint64_t *)(a1 + 16);
  v6 = (unint64_t *)(a1 + 24);
  v7 = (unint64_t *)(a1 + 32);
  v8 = (unint64_t *)(a1 + 40);
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_22;
        *(_DWORD *)(a1 + 52) |= 1u;
        v12 = *(_QWORD *)(a1 + 8);
        if (!v12)
          operator new();
        v32 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
        }
        else
        {
          v32 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v19 = *((_DWORD *)this + 14);
        v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
        if (!sub_100767FBC(v12, this, v22) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        v23 = *((_DWORD *)this + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)this + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v26 >= v14 || *v26 != 16)
          continue;
        v15 = v26 + 1;
        *((_QWORD *)this + 1) = v15;
        goto LABEL_35;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
LABEL_35:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v15;
          v27 = v15 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 52) |= 2u;
        if ((unint64_t)v27 >= v14 || *v27 != 24)
          continue;
        v16 = v27 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_43:
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 52) |= 4u;
        if ((unint64_t)v29 >= v14 || *v29 != 32)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_51:
        if ((unint64_t)v17 >= v14 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v17;
          v30 = v17 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 52) |= 8u;
        if ((unint64_t)v30 >= v14 || *v30 != 40)
          continue;
        v18 = v30 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_59:
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v31 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v18;
          v31 = (unsigned __int8 *)(v18 + 1);
          *((_QWORD *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 52) |= 0x10u;
        if (v31 != (unsigned __int8 *)v14 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_43;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_51;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v18 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_59;
      default:
        v11 = TagFallback & 7;
LABEL_22:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100768CFC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310C80 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), (unint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), (unint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 40), (unint64_t)a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 40), (unint64_t)a2, a4);
  return result;
}

uint64_t sub_100768DBC(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;

  LOBYTE(v3) = *(_BYTE *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_17;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_13;
LABEL_12:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 52);
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310C80 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100768500(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0)
    goto LABEL_12;
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_15;
LABEL_19:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
    if ((*(_DWORD *)(a1 + 52) & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 8) != 0)
    goto LABEL_19;
LABEL_15:
  if ((v3 & 0x10) != 0)
LABEL_16:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40), a2)+ 1;
LABEL_17:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

void sub_100768EA8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10076868C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100768EF4()
{
  return 1;
}

_QWORD *sub_100768EFC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.TimeTransferDataExtend");
}

float sub_100768F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 2730);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 24);
    }
    if ((v6 & 2) != 0)
    {
      result = *(float *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(float *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100768FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100768FCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151DC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100768FDC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151DC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10076900C()
{
  operator new();
}

uint64_t sub_100769048(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100769060(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  unsigned int v13;

  v5 = (unint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 5)
        goto LABEL_16;
LABEL_24:
      v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0)
        return 0;
      *(_DWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 24) |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1007691E8(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(float *)(v5 + 16), a3);
  return result;
}

uint64_t sub_100769240(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 24);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 24);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

float sub_100769298(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100768F0C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1007692E4()
{
  return 1;
}

_QWORD *sub_1007692EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.RawPressureSample");
}

float sub_1007692FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 2988);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(float *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_12:
    result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0)
      return result;
LABEL_8:
    result = *(float *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 24) = result;
  }
  return result;
}

void sub_1007693EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100769404(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151E40;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100769414(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151E40;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100769444()
{
  operator new();
}

uint64_t sub_100769480(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100769498(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v5 = (unint64_t *)(a1 + 2);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        a1[8] |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_18;
LABEL_26:
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) == 0)
          return 0;
        a1[4] = v17;
        a1[8] |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 29)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_30:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v16) & 1) == 0)
          return 0;
        a1[5] = v16;
        a1[8] |= 4u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 37)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_34:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v15) & 1) != 0)
        {
          a1[6] = v15;
          a1[8] |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_30;
        goto LABEL_18;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_18;
        goto LABEL_34;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1007696E4(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(float *)(v5 + 24), a3);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(float *)(v5 + 20), a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(float *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100769778(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_1007697E8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1007692FC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100769834()
{
  return 1;
}

_QWORD *sub_10076983C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.SensorSample3Axis");
}

void sub_10076984C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  _BYTE v12[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 3291);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[8] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[8] |= 2u;
    a1[3] = v8;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v9 = *(_DWORD *)(a2 + 16);
    a1[8] |= 4u;
    a1[4] = v9;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v10 = *(_DWORD *)(a2 + 20);
    a1[8] |= 8u;
    a1[5] = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_DWORD *)(a2 + 24);
    a1[8] |= 0x10u;
    a1[6] = v6;
  }
}

void sub_10076995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100769974(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151EB8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100769984(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151EB8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1007699B4()
{
  operator new();
}

uint64_t sub_1007699F0(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100769A08(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;
  unsigned int v26;

  v5 = a1 + 2;
  v6 = a1 + 4;
  v7 = a1 + 5;
  while (2)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          *v5 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)this + 1) = v13;
LABEL_26:
          a1[8] |= 1u;
          if ((unint64_t)v13 < v11 && *v13 == 16)
          {
            v14 = v13 + 1;
            *((_QWORD *)this + 1) = v14;
            goto LABEL_29;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if ((_DWORD)result)
        {
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v14 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_29:
        v25 = 0;
        if ((unint64_t)v14 >= v11 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v18 = v25;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v14;
          v19 = v14 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        a1[3] = v18;
        a1[8] |= 2u;
        if ((unint64_t)v19 >= v11 || *v19 != 24)
          continue;
        v15 = v19 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_37:
        if ((unint64_t)v15 >= v11 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v15;
          v20 = v15 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        a1[8] |= 4u;
        if ((unint64_t)v20 >= v11 || *v20 != 32)
          continue;
        v16 = v20 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_45:
        if ((unint64_t)v16 >= v11 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v16;
          v21 = v16 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        a1[8] |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40)
          continue;
        v17 = v21 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_53:
        v26 = 0;
        if ((unint64_t)v17 >= v11 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result)
            return result;
          v22 = v26;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v17;
          v23 = (unsigned __int8 *)(v17 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        a1[6] = -(v22 & 1) ^ (v22 >> 1);
        a1[8] |= 0x10u;
        if (v23 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v15 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v16 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_45;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v17 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_53;
      default:
        v10 = TagFallback & 7;
LABEL_20:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

int *sub_100769D3C(int *result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;

  v5 = result;
  v6 = result[8];
  if ((v6 & 1) != 0)
  {
    result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, result[2], a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
  v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
  v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], a2, a4);
  }
LABEL_10:
  result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], a2, a4);
  if ((v5[8] & 0x10) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], a2, a4);
  return result;
}

uint64_t sub_100769DEC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_16;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_32;
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v11 = 2;
  }
  v4 = (v11 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_28:
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(a1 + 24)) ^ (*(int *)(a1 + 24) >> 31));
    if (v12 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    else
      v13 = 2;
    v4 = (v13 + v4);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_100769F10(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10076984C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100769F5C()
{
  return 1;
}

_QWORD *sub_100769F64@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.SvId");
}

void sub_100769F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 3610);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 48) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 48);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_QWORD *)(a1 + 16) = v7;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
LABEL_12:
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_QWORD *)(a1 + 24) = v8;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
LABEL_14:
      v10 = *(_DWORD *)(a2 + 40);
      if (v10 >= 2)
        sub_1019078AC();
      *(_DWORD *)(a1 + 48) |= 0x10u;
      *(_DWORD *)(a1 + 40) = v10;
      return;
    }
LABEL_13:
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_QWORD *)(a1 + 32) = v9;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0)
      return;
    goto LABEL_14;
  }
}

void sub_10076A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10076A0A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151F30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_10076A0B8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310CA0;
  if (!qword_102310CA0)
  {
    sub_1007667C8(0, a2, a3, a4);
    return qword_102310CA0;
  }
  return result;
}

void sub_10076A0E4()
{
  operator new();
}

uint64_t sub_10076A128(uint64_t result)
{
  if (*(_BYTE *)(result + 48))
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10076A148(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 40), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 40), a2, a4);
  return result;
}

uint64_t sub_10076A1F8(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x10) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 44) = v5;
  return v5;
}

void sub_10076A28C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100769F74(a1, (uint64_t)lpsrc);
}

uint64_t sub_10076A2D8()
{
  return 1;
}

_QWORD *sub_10076A2E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.PwrMeasurement");
}

void sub_10076A2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 3822);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_BYTE *)(a1 + 16) = v7;
    }
  }
}

void sub_10076A398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10076A3B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151FA8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10076A3C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151FA8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_10076A3F0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310CA8;
  if (!qword_102310CA8)
  {
    sub_1007667C8(0, a2, a3, a4);
    return qword_102310CA8;
  }
  return result;
}

void sub_10076A41C()
{
  operator new();
}

uint64_t sub_10076A458(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10076A470(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_24:
        v16 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 16) = v13 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_10076A620(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  BOOL v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 16), v4, a4);
  return result;
}

uint64_t sub_10076A678(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *(_BYTE *)(a1 + 24);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 24);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 2;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_10076A6D0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10076A2F0(a1, (uint64_t)lpsrc);
}

uint64_t sub_10076A71C()
{
  return 1;
}

_QWORD *sub_10076A724@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.DecodedRti");
}

void sub_10076A734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 4087);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_BYTE *)(a1 + 24) = v7;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
LABEL_12:
      v9 = *(_DWORD *)(a2 + 28);
      if (!sub_10001B780(v9))
        sub_1019078D4();
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_DWORD *)(a1 + 28) = v9;
      return;
    }
LABEL_11:
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_QWORD *)(a1 + 16) = v8;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0)
      return;
    goto LABEL_12;
  }
}

void sub_10076A834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10076A84C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102152020;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_10076A85C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310CB0;
  if (!qword_102310CB0)
  {
    sub_1007667C8(0, a2, a3, a4);
    return qword_102310CB0;
  }
  return result;
}

void sub_10076A888()
{
  operator new();
}

uint64_t sub_10076A8CC(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_DWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10076A8E8(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), a2, a4);
  return result;
}

uint64_t sub_10076A97C(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v5 = v4 + 2;
    else
      v5 = v4;
    if ((v3 & 4) != 0)
    {
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    if ((v3 & 8) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_10076AA20(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10076A734(a1, (uint64_t)lpsrc);
}

uint64_t sub_10076AA6C()
{
  return 1;
}

_QWORD *sub_10076AA74@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "proto.gnss.DecodedExtendedEphemeris");
}

uint64_t sub_10076AA88(uint64_t result, int a2)
{
  *(_QWORD *)result = off_1021521B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = a2;
  return result;
}

_QWORD *sub_10076AAA0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021521B8;
  v2 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v2);
  return a1;
}

BOOL sub_10076AAEC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  _BOOL8 v8;
  NSObject *v9;
  int v10;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  void **v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  buf[0] = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  sub_1018BF25C(&v26, "AlwaysOnDeviceMotion", buf, 0);
  buf[0] = 1;
  sub_1018BF25C(&v24, "DeviceMotionUseGyroController", buf, 0);
  if (!a1[1])
  {
    v2 = sub_100127B9C();
    v19 = _NSConcreteStackBlock;
    v20 = 3221225472;
    v21 = sub_10076AF04;
    v22 = &unk_10212ECA0;
    v23 = a1;
    sub_1000A50A8(v2, (uint64_t)&v19);
  }
  v18 = 2;
  v3 = v27;
  BYTE1(v18) = v27;
  v4 = v25;
  BYTE2(v18) = v25;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  HIBYTE(v18) = v5;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021521F0);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1[1] + 16);
    *(_DWORD *)buf = 67109888;
    v37 = v7;
    v38 = 1024;
    v39 = v3;
    v40 = 1024;
    v41 = v4;
    v42 = 1024;
    v43 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLDeviceMotionControl-%d] Configuring,enableAlwaysOn,%d,useGyroController,%d,enableVisualLocalization,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021521F0);
    v12 = *(_DWORD *)(a1[1] + 16);
    v28 = 67109888;
    v29 = v12;
    v30 = 1024;
    v31 = v3;
    v32 = 1024;
    v33 = v4;
    v34 = 1024;
    v35 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "[CLDeviceMotionControl-%d] Configuring,enableAlwaysOn,%d,useGyroController,%d,enableVisualLocalization,%d", &v28, 26, (_DWORD)v19, v20);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDeviceMotionControl::configure()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v8 = sub_10076B0EC(a1, (uint64_t)&v18, (char *)4);
  if (!v8)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021521F0);
    v9 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      v10 = *(_DWORD *)(a1[1] + 16);
      *(_DWORD *)buf = 67109120;
      v37 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[CLDeviceMotionControl-%d] Configure failed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021521F0);
      v15 = *(_DWORD *)(a1[1] + 16);
      v28 = 67109120;
      v29 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "[CLDeviceMotionControl-%d] Configure failed", &v28);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDeviceMotionControl::configure()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  return v8;
}

uint64_t sub_10076AF04(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD v7[2];
  char v8;
  __int128 v9;

  v1 = *(_QWORD *)(result + 32);
  if (!*(_QWORD *)(v1 + 8))
  {
    v2 = *(_DWORD *)(v1 + 32);
    v3 = (uint64_t *)sub_100A07FA0();
    v7[0] = 65292;
    v7[1] = v2;
    v8 = 0;
    sub_1018E4078(v3, (uint64_t)v7, (uint64_t *)&v9);
    sub_1002B7674(v1 + 8, &v9);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_100A0A4BC(*(uint64_t **)(v1 + 8), (uint64_t)nullsub_38, v1);
    sub_100A0A610(*(_QWORD *)(v1 + 8), (uint64_t)sub_10076B0B8, v1);
    sub_100A0A544(*(_QWORD *)(v1 + 8), (uint64_t)sub_10076B0B8, v1);
    sub_100A0A6B8(*(_QWORD *)(v1 + 8), (uint64_t)sub_10076B0B8, v1);
    operator new();
  }
  return result;
}

void sub_10076B080(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  operator delete();
}

uint64_t sub_10076B0B8(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 24);
  sub_1011E407C(v2);
  sub_1011E4404(v2);
  return sub_10076AAEC(a1);
}

BOOL sub_10076B0EC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v7;
  int v8;

  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
    sub_1019078FC();
  v8 = 0;
  v7 = 4;
  return sub_1011E4FF0(a1[3], a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

void sub_10076B160(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

double sub_10076B18C(uint64_t a1)
{
  unsigned int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;

  v2 = *(unsigned __int8 *)(a1 + 542);
  v3 = *(double *)(a1 + 448);
  v4 = *(double *)(a1 + 456);
  v5 = *(float *)(a1 + 1360) * 1.107 + -0.123;
  v6 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
  if (v3 <= 0.0)
    v7 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
  else
    v7 = 2.23693991 / v3;
  if (v2 > 5)
  {
    v8 = 0.0;
  }
  else
  {
    v8 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
    if (((1 << v2) & 0x29) == 0)
    {
      v8 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
      if (((1 << v2) & 0x14) == 0)
        v8 = v7;
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102152258);
  v9 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 456);
    *(_DWORD *)buf = 134350336;
    v30 = v10;
    v31 = 1026;
    v32 = v2;
    v33 = 2050;
    v34 = v8;
    v35 = 2050;
    v36 = v7;
    v37 = 2050;
    v38 = v6;
    v39 = 2050;
    v40 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "beginTime, %{public}f, distanceSource, %{public}d, bestSpeed, %{public}f, pedSpeed, %{public}f, uncalibratedSpeed, %{public}f, currentCadence,%{public}f", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102152258);
    v13 = *(_QWORD *)(a1 + 120);
    v14 = *(_QWORD *)(a1 + 456);
    v17 = 134350336;
    v18 = v13;
    v19 = 1026;
    v20 = v2;
    v21 = 2050;
    v22 = v8;
    v23 = 2050;
    v24 = v7;
    v25 = 2050;
    v26 = v6;
    v27 = 2050;
    v28 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "beginTime, %{public}f, distanceSource, %{public}d, bestSpeed, %{public}f, pedSpeed, %{public}f, uncalibratedSpeed, %{public}f, currentCadence,%{public}f", &v17, 58);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static double CLFitnessYouthBriskWalkOverride::bestSpeed(const CLNatalieModelInput &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return v8;
}

uint64_t sub_10076B444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  _BYTE v18[24];
  _BYTE v19[24];
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;

  v5 = sub_10076B18C(a3);
  *(_DWORD *)buf = 0;
  v6 = sub_10072484C((float *)(a3 + 1352), (int *)buf);
  if (v5 <= v6)
  {
    if (v5 <= 0.0)
      return a2;
    v8 = sub_100793C68(1, a2);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102152258);
    v13 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a3 + 120);
      *(_DWORD *)buf = 134218752;
      v21 = v14;
      v22 = 1026;
      v23 = a2;
      v24 = 1026;
      v25 = v8;
      v26 = 2050;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Overriding youth type for nonzero speed, beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102152258);
      v15 = *(_QWORD *)(a3 + 120);
      *(_DWORD *)v18 = 134218752;
      *(_QWORD *)&v18[4] = v15;
      *(_WORD *)&v18[12] = 1026;
      *(_DWORD *)&v18[14] = a2;
      *(_WORD *)&v18[18] = 1026;
      *(_DWORD *)&v18[20] = v8;
      *(_WORD *)v19 = 2050;
      *(double *)&v19[2] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Overriding youth type for nonzero speed, beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f", v18, 34, *(_OWORD *)v18, *(_QWORD *)&v18[16], *(_OWORD *)v19, *(_QWORD *)&v19[16]);
      goto LABEL_19;
    }
  }
  else
  {
    v7 = v6;
    v8 = sub_100793C68(2, a2);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102152258);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a3 + 120);
      *(_DWORD *)buf = 134219008;
      v21 = v10;
      v22 = 1026;
      v23 = a2;
      v24 = 1026;
      v25 = v8;
      v26 = 2050;
      v27 = v5;
      v28 = 2050;
      v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Overriding youth type for brisk walk, beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f, speedThreshold, %{public}f", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102152258);
      v11 = *(_QWORD *)(a3 + 120);
      *(_DWORD *)v18 = 134219008;
      *(_QWORD *)&v18[4] = v11;
      *(_WORD *)&v18[12] = 1026;
      *(_DWORD *)&v18[14] = a2;
      *(_WORD *)&v18[18] = 1026;
      *(_DWORD *)&v18[20] = v8;
      *(_WORD *)v19 = 2050;
      *(double *)&v19[2] = v5;
      *(_WORD *)&v19[10] = 2050;
      *(double *)&v19[12] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Overriding youth type for brisk walk, beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f, speedThreshold, %{public}f", v18, 44, *(_OWORD *)v18, *(_QWORD *)&v18[16], *(_OWORD *)v19, *(_QWORD *)&v19[16]);
LABEL_19:
      v16 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthBriskWalkOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v12);
      if (v16 != buf)
        free(v16);
    }
  }
  return v8;
}

void sub_10076B7E4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10076B810(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_102152288;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 28) = 0xA00000000;
  *(_DWORD *)(a1 + 24) = 1031798784;
  *(_QWORD *)(a1 + 80) = 0;
  if (a2 != 24)
  {
    if (a2 == 17)
      operator new();
    operator new();
  }
  operator new();
}

void sub_10076B930()
{
  operator delete();
}

uint64_t sub_10076B9B8(uint64_t a1, double *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  float v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  __int16 v14;
  _QWORD v15[19];
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[6];
  char v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[25];
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  _BYTE v53[11];
  int v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int v104;
  unint64_t v105;
  __int16 v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[19];
  __int16 v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  _QWORD v121[6];
  char v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _BYTE v136[25];
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  __int16 v149;
  __int128 v150;
  __int128 v151;
  char v152;
  _BYTE v153[11];
  int v154;
  unint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  char v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  unint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  int v204;
  unint64_t v205;
  __int16 v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;

  v4 = atomic_load((unsigned __int8 *)&qword_102303F68);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102303F68))
  {
    LODWORD(v115[0]) = 8;
    sub_100546300(qword_102303F50, v115, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102303F50, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303F68);
  }
  v116 = 0;
  *(_OWORD *)v115 = xmmword_101BB1ED0;
  memset(&v115[2], 0, 135);
  v117 = xmmword_101BB1ED0;
  v118 = 0;
  v119 = 0;
  v121[0] = 0;
  v120 = 0;
  *(_QWORD *)((char *)v121 + 5) = 0;
  *(_QWORD *)((char *)&v121[1] + 6) = 0;
  v122 = 0;
  memset(&v121[3], 0, 24);
  v123 = xmmword_101BB1ED0;
  v124 = 0;
  v125 = 0;
  v126 = 0xFFEFFFFFFFFFFFFFLL;
  v137 = 0;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  memset(v136, 0, sizeof(v136));
  v138 = 0;
  v139 = 0;
  v140 = 0xFFEFFFFFFFFFFFFFLL;
  v141 = 0;
  v142 = 0;
  v148 = 0;
  v149 = 0;
  v154 = 0;
  v147 = 0;
  v146 = 0u;
  v145 = 0u;
  v144 = 0u;
  v143 = 0u;
  v151 = 0u;
  v150 = 0u;
  v152 = 0;
  memset(v153, 0, sizeof(v153));
  v155 = 0xFFEFFFFFFFFFFFFFLL;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  v170 = 0u;
  v169 = 0u;
  v168 = 0u;
  v167 = 0u;
  v166 = 0u;
  v165 = 0u;
  v164 = 0u;
  v163 = 0u;
  v162 = 0u;
  v161 = 0u;
  v160 = 0u;
  v159 = 0u;
  v158 = 0u;
  v157 = 0u;
  v156 = 0u;
  v175 = 0;
  v176 = 0xFFEFFFFFFFFFFFFFLL;
  v177 = 0u;
  v178 = 0u;
  v179 = 0u;
  v180 = 0u;
  v181 = 0xFFEFFFFFFFFFFFFFLL;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0xFFEFFFFFFFFFFFFFLL;
  v188 = 0;
  v187 = 0;
  v189 = 0x80000000800000;
  v191 = 0;
  v190 = 0;
  v192 = xmmword_101BB1EE0;
  v193 = 0x80000000800000;
  v194 = 0u;
  v195 = 0u;
  v196 = 0;
  v197 = 0xFFEFFFFFFFFFFFFFLL;
  v198 = 0u;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = 0u;
  v203 = 0u;
  v204 = 0;
  v205 = 0xFFEFFFFFFFFFFFFFLL;
  v206 = 0;
  v207 = 0;
  v208 = 0xFFEFFFFFFFFFFFFFLL;
  v209 = 7;
  v210 = 0xFFEFFFFFFFFFFFFFLL;
  v211 = 0;
  v213 = 0;
  v212 = 0;
  v214 = 0;
  if (sub_1000D03AC(a2, qword_102303F50, (uint64_t)v115))
    *(_BYTE *)(a1 + 8) = BYTE8(v165) != 0;
  if (((***(uint64_t (****)(_QWORD, double *))(a1 + 80))(*(_QWORD *)(a1 + 80), a2) & 1) != 0)
    return 2;
  v5 = atomic_load((unsigned __int8 *)&qword_102303F88);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_102303F88))
  {
    LODWORD(v15[0]) = 2;
    sub_100546300(qword_102303F70, v15, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102303F70, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303F88);
  }
  v16 = 0;
  *(_OWORD *)v15 = xmmword_101BB1ED0;
  memset(&v15[2], 0, 135);
  v17 = xmmword_101BB1ED0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21[0] = 0;
  *(_QWORD *)((char *)v21 + 5) = 0;
  *(_QWORD *)((char *)&v21[1] + 6) = 0;
  v22 = 0;
  memset(&v21[3], 0, 24);
  v23 = xmmword_101BB1ED0;
  v24 = 0;
  v25 = 0;
  v26 = 0xFFEFFFFFFFFFFFFFLL;
  v37 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  v38 = 0;
  v39 = 0;
  v40 = 0xFFEFFFFFFFFFFFFFLL;
  v41 = 0;
  v42 = 0;
  v48 = 0;
  v49 = 0;
  v54 = 0;
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v51 = 0u;
  v50 = 0u;
  v52 = 0;
  memset(v53, 0, sizeof(v53));
  v55 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v75 = 0;
  v76 = 0xFFEFFFFFFFFFFFFFLL;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0xFFEFFFFFFFFFFFFFLL;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0xFFEFFFFFFFFFFFFFLL;
  v88 = 0;
  v87 = 0;
  v89 = 0x80000000800000;
  v91 = 0;
  v90 = 0;
  v92 = xmmword_101BB1EE0;
  v93 = 0x80000000800000;
  v94 = 0u;
  v95 = 0u;
  v96 = 0;
  v97 = 0xFFEFFFFFFFFFFFFFLL;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  v105 = 0xFFEFFFFFFFFFFFFFLL;
  v106 = 0;
  v107 = 0;
  v108 = 0xFFEFFFFFFFFFFFFFLL;
  v109 = 7;
  v110 = 0xFFEFFFFFFFFFFFFFLL;
  v111 = 0;
  v113 = 0;
  v112 = 0;
  v114 = 0;
  if (!sub_1000D03AC(a2, qword_102303F70, (uint64_t)v15))
    return 0;
  v8 = (_WORD *)(a1 + 28);
  v7 = *(unsigned __int16 *)(a1 + 28);
  v9 = *(unsigned __int16 *)(a1 + 30);
  v10 = *(unsigned int *)(a1 + 32);
  v11 = v7 + v9 >= v10 ? *(unsigned int *)(a1 + 32) : 0;
  v6 = *((double *)&v28 + 1);
  *(float *)&v8[2 * (v7 + v9 - v11) + 4] = v6;
  if (v10 <= v9)
  {
    v13 = v7 + 1;
    v14 = v13 >= v10 ? v10 : 0;
    *v8 = v13 - v14;
  }
  else
  {
    LOWORD(v9) = v9 + 1;
    *(_WORD *)(a1 + 30) = v9;
    LODWORD(v9) = (unsigned __int16)v9;
  }
  *(_BYTE *)(a1 + 12) = 1;
  if ((_DWORD)v10 == (_DWORD)v9
    && (sub_10076C0D4((unsigned __int16 *)(a1 + 28), (unsigned int (*)(float, float))sub_10076C2D0, 0) > 13.4112
     || *(_BYTE *)(a1 + 8)
     && sub_10076C0D4((unsigned __int16 *)(a1 + 28), (unsigned int (*)(float, float))sub_10076C2D0, 0) > 6.7056))
  {
    return 9;
  }
  else
  {
    return 0;
  }
}

void sub_10076C00C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102303F88);
  _Unwind_Resume(a1);
}

_QWORD *sub_10076C03C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102152288;
  v2 = a1[10];
  a1[10] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void sub_10076C080(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102152288;
  v2 = a1[10];
  a1[10] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  operator delete();
}

float sub_10076C0D4(unsigned __int16 *a1, unsigned int (*a2)(float, float), unint64_t a3)
{
  unint64_t v6;
  float v7;
  float *v8;
  float v9;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v6 = a1[1];
  if (!a1[1])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021522C0);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021522C0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "T CMQueue<float>::getComparison(int (*)(const T, const T), size_t) const [T = float]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  v7 = *(float *)sub_1004784C4(a1, a3);
  if (v6 > a3)
  {
    do
    {
      v8 = (float *)sub_1004784C4(a1, a3);
      v9 = *v8;
      if (a2(*v8, v7))
        v7 = v9;
      ++a3;
    }
    while (v6 != a3);
  }
  return v7;
}

BOOL sub_10076C2D0(float a1, float a2)
{
  return a1 < a2;
}

void sub_10076C2DC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10076C308(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  int v6;
  double v7;
  CFAbsoluteTime v8;
  uint64_t v9;
  int v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[6];
  _DWORD v15[2];
  __int16 v16;
  double v17;
  __int16 v18;
  CFAbsoluteTime v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  CFAbsoluteTime Current;

  if (CFAbsoluteTimeGetCurrent() - *(double *)a1 >= 86400.0)
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_1021522E0);
    v5 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(double *)a1;
      *(_DWORD *)buf = 67240704;
      v21 = v6;
      v22 = 2048;
      v23 = v7;
      v24 = 2050;
      Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[CLSuppressionLogger][counterReset]  suppressionStateMetricsCounter,%{public}d,fTimestampLastSuppressionStateMetricsCounterReset,%f,currentTime,%{public}f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_1021522E0);
      v9 = qword_10229FC68;
      v10 = *(_DWORD *)(a1 + 8);
      v11 = *(double *)a1;
      v15[0] = 67240704;
      v15[1] = v10;
      v16 = 2048;
      v17 = v11;
      v18 = 2050;
      v19 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "[CLSuppressionLogger][counterReset]  suppressionStateMetricsCounter,%{public}d,fTimestampLastSuppressionStateMetricsCounterReset,%f,currentTime,%{public}f", v15, 28);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLSuppressionLogger::feedSuppressionStateMetrics(const CMMotionCoprocessorReply::SuppressionStateMetrics *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v8 = CFAbsoluteTimeGetCurrent();
    v4 = 0;
    *(CFAbsoluteTime *)a1 = v8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 < *(_DWORD *)(a1 + 12))
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10076C58C;
    v14[3] = &unk_102139B90;
    v14[4] = a1;
    v14[5] = a2;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.UpdatedSuppressionStateMetrics"), v14);
  }
}

NSDictionary *sub_10076C58C(uint64_t a1)
{
  uint64_t v2;
  NSNumber *v3;
  NSNumber *v4;
  NSNumber *v5;
  NSNumber *v6;
  NSNumber *v7;
  NSNumber *v8;
  NSNumber *v9;
  NSNumber *v10;
  NSNumber *v11;
  NSNumber *v12;
  unsigned __int8 v13;
  NSNumber *v14;
  uint64_t v15;
  NSNumber *v16;
  _QWORD v18[21];
  _QWORD v19[21];

  v2 = *(_QWORD *)(a1 + 32);
  v18[0] = CFSTR("logSequenceID");
  v19[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v18[1] = CFSTR("isAPAwake");
  v19[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1));
  v18[2] = CFSTR("exitedToFSMState");
  v19[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(char *)(*(_QWORD *)(a1 + 40) + 2));
  v18[3] = CFSTR("sessionFSMState");
  v19[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 3));
  v18[4] = CFSTR("timeInFSMState");
  v19[4] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 4));
  v18[5] = CFSTR("timeStatic");
  v19[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 36));
  v18[6] = CFSTR("timeFrozen");
  v19[6] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 44));
  v18[7] = CFSTR("timeMoving");
  v19[7] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 52));
  v18[8] = CFSTR("meanGravityAngle");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 12) >= 1.1755e-38)
    v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v3 = +[NSNull null](NSNull, "null");
  v19[8] = v3;
  v18[9] = CFSTR("meanPocketProbability");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 16) >= 1.1755e-38)
    v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v4 = +[NSNull null](NSNull, "null");
  v19[9] = v4;
  v18[10] = CFSTR("meanIlluminance");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 20) >= 1.1755e-38)
    v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v5 = +[NSNull null](NSNull, "null");
  v19[10] = v5;
  v18[11] = CFSTR("proxBaselineAtEntry");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 60) >= 1.1755e-38)
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v6 = +[NSNull null](NSNull, "null");
  v19[11] = v6;
  v18[12] = CFSTR("proxBaselineAtExit");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 68) >= 1.1755e-38)
    v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v7 = +[NSNull null](NSNull, "null");
  v19[12] = v7;
  v18[13] = CFSTR("proxBaselineUncertaintyAtEntry");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 64) >= 1.1755e-38)
    v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v8 = +[NSNull null](NSNull, "null");
  v19[13] = v8;
  v18[14] = CFSTR("proxBaselineUncertaintyAtExit");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 72) >= 1.1755e-38)
    v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v9 = +[NSNull null](NSNull, "null");
  v19[14] = v9;
  v18[15] = CFSTR("maxProxTemperature");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 24) >= 1.1755e-38)
    v10 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v10 = +[NSNull null](NSNull, "null");
  v19[15] = v10;
  v18[16] = CFSTR("minProxTemperature");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 28) <= 3.4028e38)
    v11 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v11 = +[NSNull null](NSNull, "null");
  v19[16] = v11;
  v18[17] = CFSTR("meanProxTemperature");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 32) >= 1.1755e-38)
    v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  else
    v12 = +[NSNull null](NSNull, "null");
  v19[17] = v12;
  v18[18] = CFSTR("alwaysOnViewObstructed");
  if (sub_100D90530())
  {
    v13 = atomic_load((unsigned __int8 *)(sub_100D90530() + 96));
    v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v13 & 1);
  }
  else
  {
    v14 = +[NSNull null](NSNull, "null");
  }
  v19[18] = v14;
  v18[19] = CFSTR("displayState");
  v19[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 20));
  v18[20] = CFSTR("suppressionClientTypes");
  if (sub_100D90530())
  {
    v15 = atomic_load((unsigned int *)(sub_100D90530() + 92));
    v16 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15);
  }
  else
  {
    v16 = +[NSNull null](NSNull, "null");
  }
  v19[20] = v16;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 21);
}

uint64_t sub_10076CA3C(uint64_t result, uint64_t a2)
{
  int v2;
  const __CFString *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[6];
  _QWORD v7[5];
  _QWORD v8[5];

  v2 = *(unsigned __int8 *)(a2 + 1);
  if (v2 == 2)
  {
    v5 = result;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10076D0B0;
    v6[3] = &unk_102139B90;
    v6[4] = result;
    v6[5] = a2;
    result = AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.ProxBaseliningOOB"), v6);
    *(_BYTE *)(v5 + 16) = 0;
  }
  else
  {
    if (v2 == 1)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10076CDBC;
      v7[3] = &unk_102131FE8;
      v7[4] = a2;
      v3 = CFSTR("com.apple.CoreMotion.ProxBaseliningSUI");
      v4 = v7;
    }
    else
    {
      if (*(_BYTE *)(a2 + 1))
        return result;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10076CB40;
      v8[3] = &unk_102131FE8;
      v8[4] = a2;
      v3 = CFSTR("com.apple.CoreMotion.ProxBaseliningTimeseries");
      v4 = v8;
    }
    return AnalyticsSendEventLazy(v3, v4);
  }
  return result;
}

NSDictionary *sub_10076CB40(uint64_t a1)
{
  NSNumber *v2;
  NSNull *v3;
  NSNull *v4;
  NSNull *v5;
  NSNull *v6;
  NSNull *v7;
  NSNull *v8;
  NSNull *v9;
  _QWORD v11[9];
  _QWORD v12[9];

  v11[0] = CFSTR("logSequenceID");
  v12[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v11[1] = CFSTR("timeSinceLastMeasurement");
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 26))
    v2 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
  else
    v2 = +[NSNull null](NSNull, "null");
  v12[1] = v2;
  v11[2] = CFSTR("estimate");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 6) >= 3.4028e38)
    v3 = +[NSNull null](NSNull, "null");
  else
    v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[2] = v3;
  v11[3] = CFSTR("uncertainty");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 34) >= 3.4028e38)
    v4 = +[NSNull null](NSNull, "null");
  else
    v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[3] = v4;
  v11[4] = CFSTR("factoryCalibration");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 10) >= 3.4028e38)
    v5 = +[NSNull null](NSNull, "null");
  else
    v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[4] = v5;
  v11[5] = CFSTR("currentLux");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 2) >= 3.4028e38)
    v6 = +[NSNull null](NSNull, "null");
  else
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[5] = v6;
  v11[6] = CFSTR("proxIntensity");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 14) >= 3.4028e38)
    v7 = +[NSNull null](NSNull, "null");
  else
    v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[6] = v7;
  v11[7] = CFSTR("temperature");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 18) >= 3.4028e38)
    v8 = +[NSNull null](NSNull, "null");
  else
    v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[7] = v8;
  v11[8] = CFSTR("temperatureAtLastMeasurement");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 22) >= 3.4028e38)
    v9 = +[NSNull null](NSNull, "null");
  else
    v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v12[8] = v9;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 9);
}

NSDictionary *sub_10076CDBC(uint64_t a1)
{
  NSNumber *v2;
  NSNull *v3;
  NSNull *v4;
  NSNull *v5;
  NSNull *v6;
  NSNull *v7;
  NSNull *v8;
  NSNull *v9;
  NSNull *v10;
  _QWORD v12[12];
  _QWORD v13[12];

  v12[0] = CFSTR("resetTriggered");
  v13[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  v12[1] = CFSTR("logSequenceID");
  v13[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v12[2] = CFSTR("suiCountSinceLastLog");
  v13[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 42));
  v12[3] = CFSTR("timeSinceLastMeasurement");
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 26))
    v2 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
  else
    v2 = +[NSNull null](NSNull, "null");
  v13[3] = v2;
  v12[4] = CFSTR("estimate");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 6) >= 3.4028e38)
    v3 = +[NSNull null](NSNull, "null");
  else
    v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[4] = v3;
  v12[5] = CFSTR("uncertainty");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 34) >= 3.4028e38)
    v4 = +[NSNull null](NSNull, "null");
  else
    v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[5] = v4;
  v12[6] = CFSTR("factoryCalibration");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 10) >= 3.4028e38)
    v5 = +[NSNull null](NSNull, "null");
  else
    v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[6] = v5;
  v12[7] = CFSTR("currentLux");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 2) >= 3.4028e38)
    v6 = +[NSNull null](NSNull, "null");
  else
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[7] = v6;
  v12[8] = CFSTR("proxIntensity");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 14) >= 3.4028e38)
    v7 = +[NSNull null](NSNull, "null");
  else
    v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[8] = v7;
  v12[9] = CFSTR("temperature");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 18) >= 3.4028e38)
    v8 = +[NSNull null](NSNull, "null");
  else
    v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[9] = v8;
  v12[10] = CFSTR("temperatureAtLastMeasurement");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 22) >= 3.4028e38)
    v9 = +[NSNull null](NSNull, "null");
  else
    v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[10] = v9;
  v12[11] = CFSTR("minProxInLast3s");
  if (*(float *)(*(_QWORD *)(a1 + 32) + 38) >= 3.4028e38)
    v10 = +[NSNull null](NSNull, "null");
  else
    v10 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v13[11] = v10;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 12);
}

NSDictionary *sub_10076D0B0(uint64_t a1)
{
  uint64_t v2;
  NSNull *v3;
  NSNull *v4;
  NSNull *v5;
  NSNull *v6;
  NSNull *v7;
  NSNull *v8;
  _QWORD v10[9];
  _QWORD v11[9];

  v2 = *(_QWORD *)(a1 + 32);
  v10[0] = CFSTR("isOutOfBox");
  v11[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 16));
  v10[1] = CFSTR("logSequenceID");
  v11[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0));
  v10[2] = CFSTR("timeToFirstEstimate");
  v11[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 50));
  v10[3] = CFSTR("estimate");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 6) >= 3.4028e38)
    v3 = +[NSNull null](NSNull, "null");
  else
    v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v11[3] = v3;
  v10[4] = CFSTR("uncertainty");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 34) >= 3.4028e38)
    v4 = +[NSNull null](NSNull, "null");
  else
    v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v11[4] = v4;
  v10[5] = CFSTR("factoryCalibration");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 10) >= 3.4028e38)
    v5 = +[NSNull null](NSNull, "null");
  else
    v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v11[5] = v5;
  v10[6] = CFSTR("currentLux");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 2) >= 3.4028e38)
    v6 = +[NSNull null](NSNull, "null");
  else
    v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v11[6] = v6;
  v10[7] = CFSTR("proxIntensity");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 14) >= 3.4028e38)
    v7 = +[NSNull null](NSNull, "null");
  else
    v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v11[7] = v7;
  v10[8] = CFSTR("temperature");
  if (*(float *)(*(_QWORD *)(a1 + 40) + 18) >= 3.4028e38)
    v8 = +[NSNull null](NSNull, "null");
  else
    v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v11[8] = v8;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 9);
}

uint64_t sub_10076D300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

void sub_10076D308(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

BOOL sub_10076D334(_QWORD *a1, CFArrayRef *a2)
{
  int Count;
  NSObject *v5;
  CFIndex v6;
  void **v7;
  uint64_t v8;
  void *ValueAtIndex;
  void *v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  NSObject *v27;
  int v28;
  int v29;
  const char *v30;
  const char *v32;
  char *v33;
  uint64_t v34;
  const __CFArray *theArray;
  int v36;
  void *v37;
  __int16 v38;
  int v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  char v43;

  theArray = *a2;
  if (*a2)
  {
    Count = CFArrayGetCount(theArray);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,signalEnvironment,count,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v36 = 67240192;
      LODWORD(v37) = Count;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,signalEnvironment,count,%{public}d", &v36, 8);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillSignalEnvironment(const CFArrayRef &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    if (Count >= 1)
    {
      v6 = 0;
      v7 = (void **)(a1 + 3);
      v8 = Count;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a2, v6);
        v10 = ValueAtIndex;
        if (ValueAtIndex)
        {
          sub_1015A2E04(buf, (char *)objc_msgSend(ValueAtIndex, "UTF8String"));
          v11 = sub_10076D8DC(buf);
          v12 = v11;
          v14 = (char *)a1[4];
          v13 = a1[5];
          if ((unint64_t)v14 >= v13)
          {
            v19 = (char *)*v7;
            v20 = (v14 - (_BYTE *)*v7) >> 2;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 62)
              sub_100259694();
            v22 = v13 - (_QWORD)v19;
            if (v22 >> 1 > v21)
              v21 = v22 >> 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
              v23 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
            {
              v24 = (char *)sub_100260634((uint64_t)(a1 + 5), v23);
              v19 = (char *)a1[3];
              v14 = (char *)a1[4];
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[4 * v20];
            *(_DWORD *)v25 = v12;
            v15 = v25 + 4;
            while (v14 != v19)
            {
              v26 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v25 - 1) = v26;
              v25 -= 4;
            }
            a1[3] = v25;
            a1[4] = v15;
            a1[5] = &v24[4 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *(_DWORD *)v14 = v11;
            v15 = v14 + 4;
          }
          a1[4] = v15;
          if (v43 < 0)
            operator delete(*(void **)buf);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v27 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            v28 = *(_DWORD *)(a1[4] - 4);
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v10;
            v41 = 1026;
            v42 = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,signalEnvironment,%{public}@,%{public}d", buf, 0x12u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_41;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v29 = *(_DWORD *)(a1[4] - 4);
          v36 = 138543618;
          v37 = v10;
          v38 = 1026;
          v39 = v29;
          LODWORD(v34) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,signalEnvironment,%{public}@,%{public}d", &v36, v34);
          v18 = (char *)v30;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillSignalEnvironment(const CFArrayRef &)", "%s\n", v30);
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v16 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,signalEnvironment,NULL arrayElement", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_41;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          LOWORD(v36) = 0;
          LODWORD(v34) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,signalEnvironment,NULL arrayElement", &v36, v34);
          v18 = (char *)v17;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillSignalEnvironment(const CFArrayRef &)", "%s\n", v17);
        }
        if (v18 != buf)
          free(v18);
LABEL_41:
        ++v6;
      }
      while (v6 != v8);
    }
  }
  return theArray != 0;
}

void sub_10076D8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10076D8DC(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *p_p;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int8 *v73;
  void *__p;
  uint64_t v76;
  unsigned __int8 v77;

  sub_1015A2E04(&__p, "Unavailable");
  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = v77;
  v5 = (char)v77;
  if ((v77 & 0x80u) != 0)
    v4 = v76;
  if (v3 != v4)
  {
    v15 = 0;
    if (((char)v77 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((v77 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v2 & 0x80) != 0)
  {
    v15 = memcmp(*(const void **)a1, p_p, *((_QWORD *)a1 + 1)) == 0;
    goto LABEL_22;
  }
  if (a1[23])
  {
    v7 = v2 - 1;
    v8 = a1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v12 = *p_p++;
      v11 = v12;
      v13 = v7-- != 0;
      v14 = v13;
      v15 = v9 == v11;
    }
    while (v9 == v11 && (v14 & 1) != 0);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(__p);
    if (v15)
      return 0;
    goto LABEL_27;
  }
  v15 = 1;
  if ((char)v77 < 0)
    goto LABEL_26;
LABEL_23:
  if (v15)
    return 0;
LABEL_27:
  sub_1015A2E04(&__p, "Rural");
  v17 = a1[23];
  if ((v17 & 0x80u) == 0)
    v18 = a1[23];
  else
    v18 = *((_QWORD *)a1 + 1);
  v19 = v77;
  v20 = (char)v77;
  if ((v77 & 0x80u) != 0)
    v19 = v76;
  if (v18 != v19)
  {
    v29 = 0;
    if (((char)v77 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_52;
  }
  if ((v77 & 0x80u) == 0)
    v21 = (unsigned __int8 *)&__p;
  else
    v21 = (unsigned __int8 *)__p;
  if ((v17 & 0x80) != 0)
  {
    v29 = memcmp(*(const void **)a1, v21, *((_QWORD *)a1 + 1)) == 0;
    goto LABEL_48;
  }
  if (a1[23])
  {
    v22 = v17 - 1;
    v23 = a1;
    do
    {
      v25 = *v23++;
      v24 = v25;
      v27 = *v21++;
      v26 = v27;
      v13 = v22-- != 0;
      v28 = v13;
      v29 = v24 == v26;
    }
    while (v24 == v26 && (v28 & 1) != 0);
LABEL_48:
    if ((v20 & 0x80000000) == 0)
      goto LABEL_49;
LABEL_52:
    operator delete(__p);
    if (v29)
      return 1;
    goto LABEL_53;
  }
  v29 = 1;
  if ((char)v77 < 0)
    goto LABEL_52;
LABEL_49:
  if (v29)
    return 1;
LABEL_53:
  sub_1015A2E04(&__p, "Urban");
  v30 = a1[23];
  if ((v30 & 0x80u) == 0)
    v31 = a1[23];
  else
    v31 = *((_QWORD *)a1 + 1);
  v32 = v77;
  v33 = (char)v77;
  if ((v77 & 0x80u) != 0)
    v32 = v76;
  if (v31 != v32)
  {
    v42 = 0;
    if (((char)v77 & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_78;
  }
  if ((v77 & 0x80u) == 0)
    v34 = (unsigned __int8 *)&__p;
  else
    v34 = (unsigned __int8 *)__p;
  if ((v30 & 0x80) != 0)
  {
    v42 = memcmp(*(const void **)a1, v34, *((_QWORD *)a1 + 1)) == 0;
    goto LABEL_74;
  }
  if (a1[23])
  {
    v35 = v30 - 1;
    v36 = a1;
    do
    {
      v38 = *v36++;
      v37 = v38;
      v40 = *v34++;
      v39 = v40;
      v13 = v35-- != 0;
      v41 = v13;
      v42 = v37 == v39;
    }
    while (v37 == v39 && (v41 & 1) != 0);
LABEL_74:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_75;
LABEL_78:
    operator delete(__p);
    if (v42)
      return 2;
    goto LABEL_79;
  }
  v42 = 1;
  if ((char)v77 < 0)
    goto LABEL_78;
LABEL_75:
  if (v42)
    return 2;
LABEL_79:
  sub_1015A2E04(&__p, "DenseUrban");
  v43 = a1[23];
  if ((v43 & 0x80u) == 0)
    v44 = a1[23];
  else
    v44 = *((_QWORD *)a1 + 1);
  v45 = v77;
  v46 = (char)v77;
  if ((v77 & 0x80u) != 0)
    v45 = v76;
  if (v44 == v45)
  {
    if ((v77 & 0x80u) == 0)
      v47 = (unsigned __int8 *)&__p;
    else
      v47 = (unsigned __int8 *)__p;
    if ((v43 & 0x80) != 0)
    {
      v55 = memcmp(*(const void **)a1, v47, *((_QWORD *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      v48 = v43 - 1;
      v49 = a1;
      do
      {
        v51 = *v49++;
        v50 = v51;
        v53 = *v47++;
        v52 = v53;
        v13 = v48-- != 0;
        v54 = v13;
        v55 = v50 == v52;
      }
      while (v50 == v52 && (v54 & 1) != 0);
    }
    else
    {
      v55 = 1;
    }
  }
  else
  {
    v55 = 0;
  }
  if (v46 < 0)
  {
    operator delete(__p);
    if (v55)
      return 3;
  }
  else if (v55)
  {
    return 3;
  }
  sub_1015A2E04(&__p, "DenseUrbanCanyon");
  v56 = a1[23];
  if ((v56 & 0x80u) == 0)
    v57 = a1[23];
  else
    v57 = *((_QWORD *)a1 + 1);
  v58 = v77;
  v59 = (char)v77;
  if ((v77 & 0x80u) != 0)
    v58 = v76;
  if (v57 == v58)
  {
    if ((v77 & 0x80u) == 0)
      v60 = (unsigned __int8 *)&__p;
    else
      v60 = (unsigned __int8 *)__p;
    if ((v56 & 0x80) != 0)
    {
      v68 = memcmp(*(const void **)a1, v60, *((_QWORD *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      v61 = v56 - 1;
      v62 = a1;
      do
      {
        v64 = *v62++;
        v63 = v64;
        v66 = *v60++;
        v65 = v66;
        v13 = v61-- != 0;
        v67 = v13;
        v68 = v63 == v65;
      }
      while (v63 == v65 && (v67 & 1) != 0);
    }
    else
    {
      v68 = 1;
    }
  }
  else
  {
    v68 = 0;
  }
  if (v59 < 0)
    operator delete(__p);
  if (v68)
    return 4;
  sub_1015A2E04(&__p, "Foliage");
  v69 = a1[23];
  if ((v69 & 0x80u) == 0)
    v70 = a1[23];
  else
    v70 = *((_QWORD *)a1 + 1);
  v71 = v77;
  v72 = (char)v77;
  if ((v77 & 0x80u) != 0)
    v71 = v76;
  if (v70 != v71)
  {
LABEL_143:
    v16 = 0;
    goto LABEL_147;
  }
  if ((v77 & 0x80u) == 0)
    v73 = (unsigned __int8 *)&__p;
  else
    v73 = (unsigned __int8 *)__p;
  if ((v69 & 0x80) == 0)
  {
    if (!a1[23])
    {
LABEL_142:
      v16 = 6;
      goto LABEL_147;
    }
    while (*a1 == *v73)
    {
      ++a1;
      ++v73;
      if (!--v69)
        goto LABEL_142;
    }
    goto LABEL_143;
  }
  if (!memcmp(*(const void **)a1, v73, *((_QWORD *)a1 + 1)))
    v16 = 6;
  else
    v16 = 0;
LABEL_147:
  if (v72 < 0)
    operator delete(__p);
  return v16;
}

BOOL sub_10076DD7C(uint64_t a1, uint64_t *a2, const std::string *a3, CFArrayRef *a4, uint64_t *a5)
{
  int Count;
  NSObject *v10;
  uint64_t *v11;
  const std::string *v12;
  CFIndex v13;
  BOOL v14;
  void *ValueAtIndex;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t *v24;
  const std::string *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  uint64_t *v29;
  const std::string *v30;
  uint64_t *v31;
  const std::string *v32;
  const char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  const std::string *v44;
  const char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  uint64_t *v52;
  int v53;
  const std::string *v54;
  unsigned int v55;
  const std::string *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  int v61;
  const std::string *v62;
  unsigned int v63;
  const std::string *v64;
  uint64_t *v65;
  const char *v66;
  char *v67;
  uint64_t *v69;
  const std::string *v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  void *__p;
  char *v76;
  char *v77;
  _BYTE v78[12];
  __int16 v79;
  const std::string *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  _BYTE buf[12];
  __int16 v88;
  _BYTE v89[34];
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  if (*a4)
  {
    Count = CFArrayGetCount(*a4);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = (uint64_t *)*a2;
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = a3;
      else
        v12 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v11;
      v88 = 2082;
      *(_QWORD *)v89 = v12;
      *(_WORD *)&v89[8] = 1026;
      *(_DWORD *)&v89[10] = Count;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,%{public}s,%{public}s,coordinate count,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      if (*((char *)a2 + 23) >= 0)
        v69 = a2;
      else
        v69 = (uint64_t *)*a2;
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = a3;
      else
        v70 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      *(_DWORD *)v78 = 136446722;
      *(_QWORD *)&v78[4] = v69;
      v79 = 2082;
      v80 = v70;
      v81 = 1026;
      v82 = Count;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,%{public}s,%{public}s,coordinate count,%{public}d", v78, 28);
      v72 = (char *)v71;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v71);
      if (v72 != buf)
        free(v72);
    }
    __p = 0;
    v76 = 0;
    v77 = 0;
    if (Count < 1)
    {
      return 1;
    }
    else
    {
      v74 = a5;
      v13 = 0;
      v14 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a4, v13);
        v16 = ValueAtIndex;
        if (ValueAtIndex)
        {
          if (objc_msgSend(ValueAtIndex, "containsString:", CFSTR(",")))
          {
            v17 = objc_msgSend(v16, "componentsSeparatedByString:", CFSTR(","));
            v18 = v17;
            if (!v17 || objc_msgSend(v17, "count") != (id)2)
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102152300);
              v50 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
              {
                v51 = *((char *)a2 + 23);
                v52 = (uint64_t *)*a2;
                v53 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v54 = (const std::string *)a3->__r_.__value_.__r.__words[0];
                v55 = objc_msgSend(v18, "count");
                if (v53 >= 0)
                  v56 = a3;
                else
                  v56 = v54;
                *(_DWORD *)buf = 136446722;
                if (v51 >= 0)
                  v57 = a2;
                else
                  v57 = v52;
                *(_QWORD *)&buf[4] = v57;
                v88 = 2082;
                *(_QWORD *)v89 = v56;
                *(_WORD *)&v89[8] = 1026;
                *(_DWORD *)&v89[10] = v55;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,%{public}s,%{public}s,invalid split counts in reading coordinate data,%{public}d", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102152300);
                v58 = qword_1022A00D8;
                v59 = *((char *)a2 + 23);
                v60 = (uint64_t *)*a2;
                v61 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v62 = (const std::string *)a3->__r_.__value_.__r.__words[0];
                v63 = objc_msgSend(v18, "count");
                if (v61 >= 0)
                  v64 = a3;
                else
                  v64 = v62;
                *(_DWORD *)v78 = 136446722;
                if (v59 >= 0)
                  v65 = a2;
                else
                  v65 = v60;
                *(_QWORD *)&v78[4] = v65;
                v79 = 2082;
                v80 = v64;
                v81 = 1026;
                v82 = v63;
                LODWORD(v73) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v58, 16, "CLMM,MA-OTA,%{public}s,%{public}s,invalid split counts in reading coordinate data,%{public}d", COERCE_DOUBLE(136446722), v78, v73);
                v67 = (char *)v66;
                sub_100512490("Generic", 1, 0, 0, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v66);
                if (v67 != buf)
                  free(v67);
              }
              goto LABEL_111;
            }
            objc_msgSend(objc_msgSend(v18, "objectAtIndexedSubscript:", 0), "doubleValue");
            v20 = v19;
            objc_msgSend(objc_msgSend(v18, "objectAtIndexedSubscript:", 1), "doubleValue");
            v22 = v21;
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            v23 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              if (*((char *)a2 + 23) >= 0)
                v24 = a2;
              else
                v24 = (uint64_t *)*a2;
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v25 = a3;
              else
                v25 = (const std::string *)a3->__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136447235;
              *(_QWORD *)&buf[4] = v24;
              v88 = 2082;
              *(_QWORD *)v89 = v25;
              *(_WORD *)&v89[8] = 1026;
              *(_DWORD *)&v89[10] = v13;
              *(_WORD *)&v89[14] = 2049;
              *(_QWORD *)&v89[16] = v20;
              *(_WORD *)&v89[24] = 2049;
              *(_QWORD *)&v89[26] = v22;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,%{public}s,%{public}s,coordinate%{public}d,ll,%{private}.7lf,%{private}.7lf", buf, 0x30u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102152300);
              if (*((char *)a2 + 23) >= 0)
                v43 = a2;
              else
                v43 = (uint64_t *)*a2;
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v44 = a3;
              else
                v44 = (const std::string *)a3->__r_.__value_.__r.__words[0];
              *(_DWORD *)v78 = 136447235;
              *(_QWORD *)&v78[4] = v43;
              v79 = 2082;
              v80 = v44;
              v81 = 1026;
              v82 = v13;
              v83 = 2049;
              v84 = v20;
              v85 = 2049;
              v86 = v22;
              LODWORD(v73) = 48;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,%{public}s,%{public}s,coordinate%{public}d,ll,%{private}.7lf,%{private}.7lf", v78, v73);
              v46 = (char *)v45;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v45);
              if (v46 != buf)
                free(v46);
            }
            v26 = v76;
            if (v76 >= v77)
            {
              v35 = (char *)__p;
              v36 = (v76 - (_BYTE *)__p) >> 4;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 60)
                sub_100259694();
              v38 = v77 - (_BYTE *)__p;
              if ((v77 - (_BYTE *)__p) >> 3 > v37)
                v37 = v38 >> 3;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
                v39 = 0xFFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)sub_10028E224((uint64_t)&v77, v39);
                v35 = (char *)__p;
                v26 = v76;
              }
              else
              {
                v40 = 0;
              }
              v41 = &v40[16 * v36];
              *(_QWORD *)v41 = v20;
              *((_QWORD *)v41 + 1) = v22;
              v42 = v41;
              if (v26 != v35)
              {
                do
                {
                  *((_OWORD *)v42 - 1) = *((_OWORD *)v26 - 1);
                  v42 -= 16;
                  v26 -= 16;
                }
                while (v26 != v35);
                v35 = (char *)__p;
              }
              v27 = v41 + 16;
              __p = v42;
              v76 = v41 + 16;
              v77 = &v40[16 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *(_QWORD *)v76 = v20;
              *((_QWORD *)v26 + 1) = v22;
              v27 = v26 + 16;
            }
            v76 = v27;
          }
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v28 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a2 + 23) >= 0)
              v29 = a2;
            else
              v29 = (uint64_t *)*a2;
            if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v30 = a3;
            else
              v30 = (const std::string *)a3->__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v29;
            v88 = 2082;
            *(_QWORD *)v89 = v30;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,%{public}s,%{public}s,NULL arrayElements", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            if (*((char *)a2 + 23) >= 0)
              v31 = a2;
            else
              v31 = (uint64_t *)*a2;
            if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v32 = a3;
            else
              v32 = (const std::string *)a3->__r_.__value_.__r.__words[0];
            *(_DWORD *)v78 = 136446466;
            *(_QWORD *)&v78[4] = v31;
            v79 = 2082;
            v80 = v32;
            LODWORD(v73) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,MA-OTA,%{public}s,%{public}s,NULL arrayElements", v78, v73);
            v34 = (char *)v33;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v33);
            if (v34 != buf)
              free(v34);
          }
        }
        v14 = ++v13 >= Count;
      }
      while (v13 != Count);
      v47 = v76;
      if (__p == v76)
        goto LABEL_112;
      *(_QWORD *)buf = 0xBFF0000000000000;
      buf[8] = 0;
      memset(&v89[2], 0, 32);
      v90 = 0u;
      v91 = 0u;
      v92 = 0;
      sub_10076E7DC((uint64_t)buf, a3, (uint64_t **)&__p);
      v48 = v74[1];
      if (v48 >= v74[2])
      {
        v49 = sub_10077B5F0(v74, (uint64_t *)buf);
      }
      else
      {
        sub_10077B248((uint64_t)(v74 + 2), v74[1], (uint64_t *)buf);
        v49 = v48 + 88;
        v74[1] = v48 + 88;
      }
      v74[1] = v49;
      *(_QWORD *)v78 = &v91;
      sub_10025E1F0((void ***)v78);
      if (*(_QWORD *)&v89[26])
      {
        *(_QWORD *)&v90 = *(_QWORD *)&v89[26];
        operator delete(*(void **)&v89[26]);
      }
      if ((v89[25] & 0x80000000) != 0)
        operator delete(*(void **)&v89[2]);
LABEL_111:
      v47 = (char *)__p;
LABEL_112:
      if (v47)
      {
        v76 = v47;
        operator delete(v47);
      }
    }
  }
  else
  {
    return 0;
  }
  return v14;
}

void sub_10076E778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10076E7DC(uint64_t a1, const std::string *a2, uint64_t **a3)
{
  char **v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  double **v26;
  double **v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  uint64_t v35;
  _BYTE buf[12];
  __int16 v37;
  uint64_t v38;

  sub_10025E230((uint64_t *)(a1 + 64));
  v6 = (char **)(a1 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)(a1 + 16);
  std::string::operator=((std::string *)(a1 + 16), a2);
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    v10 = (_QWORD *)(a1 + 56);
    v11 = *(char **)(a1 + 48);
    do
    {
      v12 = *v8;
      v13 = v8[1];
      if ((unint64_t)v11 >= *v10)
      {
        v14 = (v11 - *v6) >> 4;
        if ((unint64_t)(v14 + 1) >> 60)
          sub_100259694();
        v15 = *v10 - (_QWORD)*v6;
        v16 = v15 >> 3;
        if (v15 >> 3 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10028E224(a1 + 56, v17);
        else
          v18 = 0;
        v19 = &v18[16 * v14];
        *(_QWORD *)v19 = v13;
        *((_QWORD *)v19 + 1) = v12;
        v21 = *(char **)(a1 + 40);
        v20 = *(char **)(a1 + 48);
        v22 = v19;
        if (v20 != v21)
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
            v22 -= 16;
            v20 -= 16;
          }
          while (v20 != v21);
          v20 = *v6;
        }
        v11 = v19 + 16;
        *(_QWORD *)(a1 + 40) = v22;
        *(_QWORD *)(a1 + 48) = v19 + 16;
        *(_QWORD *)(a1 + 56) = &v18[16 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v11 = v13;
        *((_QWORD *)v11 + 1) = v12;
        v11 += 16;
      }
      *(_QWORD *)(a1 + 48) = v11;
      v8 += 2;
    }
    while (v8 != v9);
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102152300);
  v23 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    v24 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v24 = (_QWORD *)*v7;
    v25 = ((char *)a3[1] - (char *)*a3) >> 4;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v24;
    v37 = 2050;
    v38 = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Polygon,%{public}s,set with,%{public}lu,coordinates", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    if (*(char *)(a1 + 39) < 0)
      v7 = (_QWORD *)*v7;
    v29 = ((char *)a3[1] - (char *)*a3) >> 4;
    v32 = 136446466;
    v33 = v7;
    v34 = 2050;
    v35 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Polygon,%{public}s,set with,%{public}lu,coordinates", &v32, 22);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingPolygon::setPolygon(const std::string &, const std::vector<CLClientLocationCoordinate> &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  *(_QWORD *)buf = 0x3FF0000000000000;
  sub_1007784D8((double **)(a1 + 40), (double *)buf);
  v28 = a1 + 64;
  v26 = *(double ***)(a1 + 64);
  v27 = *(double ***)(v28 + 8);
  while (v26 != v27)
  {
    sub_1007786A0(v26, (double *)buf);
    v26 += 3;
  }
}

uint64_t sub_10076EB30(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 64);
  sub_10025E1F0(&v4);
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10076EB88(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = atomic_load((unsigned __int8 *)&qword_1023043F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1023043F8))
  {
    sub_1015A2E04(&qword_1023043E0, "Enabled");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023043E0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023043F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_102304418);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_102304418))
  {
    sub_1015A2E04(&qword_102304400, "Polygon");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304400, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102304418);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_102304438);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102304438))
  {
    sub_1015A2E04(&qword_102304420, "SkipRegion");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304420, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102304438);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_102304458);
  if ((v5 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_102304458))
    {
      sub_1015A2E04(&qword_102304440, "SignalEnvironment");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304440, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102304458);
    }
  }
  sub_100525A8C(a2);
}

void sub_10076FE44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102304458);
  _Unwind_Resume(a1);
}

uint64_t sub_10076FEEC(uint64_t a1, int a2, int8x16_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  NSObject *v25;
  uint64_t result;
  const char *v27;
  int v28;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  uint8_t *v36;
  NSObject *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  _QWORD *v56;
  const char *v57;
  uint8_t *v58;
  _QWORD *v59;
  const char *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  int v73;
  uint8_t buf[4];
  int v75;
  __int16 v76;
  _BOOL4 v77;
  __int16 v78;
  int v79;
  __int16 v80;
  _BYTE v81[10];
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  double v87;
  __int16 v88;
  int v89;

  if (*(_BYTE *)a1)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v10 = sub_1001FCBB4();
    v11 = *(double *)(a1 + 8);
    v12 = vabdd_f64(v10, v11);
    if (v11 >= 0.0)
      v13 = v12;
    else
      v13 = -1.0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v15 = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
      v16 = -1171354717 * ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
      v17 = -1171354717 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
      v18 = *(unsigned __int8 *)(a1 + 16);
      *(_DWORD *)buf = 67242240;
      v75 = a2;
      v76 = 1026;
      v77 = v6 == v7;
      v78 = 1026;
      v79 = v15;
      v80 = 1026;
      *(_DWORD *)v81 = v8 == v9;
      *(_WORD *)&v81[4] = 1026;
      *(_DWORD *)&v81[6] = v16;
      v82 = 1026;
      v83 = 0;
      v84 = 1026;
      v85 = v17;
      v86 = 2050;
      v87 = v13;
      v88 = 1026;
      v89 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,initialCheck,signalEnv,%{public}d,isSEOk,%{public}d,size,%{public}d,isPolygonOK,%{public}d,size,%{public}d,isInsideSkippedPolygon,%{public}d,size,%{public}d,dtSinceLastMMStateChangedBasedOnSE,%{public}.1lf,mmStateBasedOnSE,%{public}d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v45 = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
      v46 = -1171354717 * ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
      v47 = -1171354717 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
      v48 = *(unsigned __int8 *)(a1 + 16);
      LODWORD(v63) = 67242240;
      HIDWORD(v63) = a2;
      LOWORD(v64) = 1026;
      *(_DWORD *)((char *)&v64 + 2) = v6 == v7;
      HIWORD(v64) = 1026;
      LODWORD(v65) = v45;
      WORD2(v65) = 1026;
      *(_DWORD *)((char *)&v65 + 6) = v8 == v9;
      WORD5(v65) = 1026;
      HIDWORD(v65) = v46;
      v66 = 1026;
      v67 = 0;
      v68 = 1026;
      v69 = v47;
      v70 = 2050;
      v71 = v13;
      v72 = 1026;
      v73 = v48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,initialCheck,signalEnv,%{public}d,isSEOk,%{public}d,size,%{public}d,isPolygonOK,%{public}d,size,%{public}d,isInsideSkippedPolygon,%{public}d,size,%{public}d,dtSinceLastMMStateChangedBasedOnSE,%{public}.1lf,mmStateBasedOnSE,%{public}d", &v63, 60);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    if (v6 == v7)
      goto LABEL_40;
    v20 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    if (v20 == v19)
    {
      v23 = 0;
    }
    else
    {
      v21 = v20 + 4;
      do
      {
        v22 = *(_DWORD *)(v21 - 4);
        v23 = v22 == a2;
        v24 = v22 == a2 || v21 == v19;
        v21 += 4;
      }
      while (!v24);
    }
    v28 = *(unsigned __int8 *)(a1 + 16);
    if (v28 != v23 && (*(double *)(a1 + 8) < 0.0 || v13 > 120.0))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v30 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v31 = *(unsigned __int8 *)(a1 + 16);
        *(_DWORD *)buf = 67240448;
        v75 = v31;
        v76 = 1026;
        v77 = v23;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,seStateChanged,prevSEState,%{public}d,newSEState,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v53 = *(unsigned __int8 *)(a1 + 16);
        LODWORD(v63) = 67240448;
        HIDWORD(v63) = v53;
        LOWORD(v64) = 1026;
        *(_DWORD *)((char *)&v64 + 2) = v23;
        LODWORD(v62) = 14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,seStateChanged,prevSEState,%{public}d,newSEState,%{public}d", &v63, v62);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
      *(_BYTE *)(a1 + 16) = v23;
      *(double *)(a1 + 8) = v10;
      v28 = v23;
    }
    if (v28)
    {
LABEL_40:
      if (v8 == v9)
      {
LABEL_71:
        v40 = *(_QWORD *)(a1 + 72);
        v39 = *(_QWORD *)(a1 + 80);
        while (1)
        {
          if (v40 == v39)
          {
            v41 = 0;
            goto LABEL_84;
          }
          if (sub_100770C50(v40, a3))
            break;
          v40 += 88;
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v42 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v43 = (_QWORD *)(v40 + 16);
          if (*(char *)(v40 + 39) < 0)
            v43 = (_QWORD *)*v43;
          *(_DWORD *)buf = 67240963;
          v75 = 1;
          v76 = 1026;
          v77 = 1;
          v78 = 1026;
          v79 = 1;
          v80 = 2081;
          *(_QWORD *)v81 = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,skipRegionCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,inside,%{private}s", buf, 0x1Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v59 = (_QWORD *)(v40 + 16);
          if (*(char *)(v40 + 39) < 0)
            v59 = (_QWORD *)*v59;
          v63 = 0x104020403;
          v64 = 0x402000000010402;
          LODWORD(v65) = 1;
          WORD2(v65) = 2081;
          *(_QWORD *)((char *)&v65 + 6) = v59;
          LODWORD(v62) = 30;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,skipRegionCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,inside,%{private}s", &v63, v62);
          v61 = (uint8_t *)v60;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v60);
          if (v61 != buf)
            free(v61);
        }
        v41 = 1;
LABEL_84:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v44 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240704;
          v75 = 1;
          v76 = 1026;
          v77 = 1;
          v78 = 1026;
          v79 = v41;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,final,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v63 = 0x104020300;
          v64 = 0x402000000010402;
          LODWORD(v65) = v41;
          LODWORD(v62) = 20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,final,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d", &v63, v62);
          v52 = (uint8_t *)v51;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v51);
          if (v52 != buf)
            free(v52);
        }
        return v41 ^ 1u;
      }
      else
      {
        v32 = *(_QWORD *)(a1 + 48);
        v33 = *(_QWORD *)(a1 + 56);
        while (v32 != v33)
        {
          if (sub_100770C50(v32, a3))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            v37 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v38 = (_QWORD *)(v32 + 16);
              if (*(char *)(v32 + 39) < 0)
                v38 = (_QWORD *)*v38;
              *(_DWORD *)buf = 67240963;
              v75 = 1;
              v76 = 1026;
              v77 = 1;
              v78 = 1026;
              v79 = 0;
              v80 = 2081;
              *(_QWORD *)v81 = v38;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,polygonCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,inside,%{private}s", buf, 0x1Eu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102152300);
              v56 = (_QWORD *)(v32 + 16);
              if (*(char *)(v32 + 39) < 0)
                v56 = (_QWORD *)*v56;
              v63 = 0x104020403;
              v64 = 0x402000000010402;
              LODWORD(v65) = 0;
              WORD2(v65) = 2081;
              *(_QWORD *)((char *)&v65 + 6) = v56;
              LODWORD(v62) = 30;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,polygonCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,inside,%{private}s", &v63, v62);
              v58 = (uint8_t *)v57;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v57);
              if (v58 != buf)
                free(v58);
            }
            goto LABEL_71;
          }
          v32 += 88;
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v34 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240704;
          v75 = 1;
          v76 = 1026;
          v77 = 0;
          v78 = 1026;
          v79 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,polygonCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,early return due to failed polygon check - skipregion not checked)", buf, 0x14u);
        }
        result = sub_1001BFF7C(115, 2);
        if ((_DWORD)result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          LODWORD(v65) = 0;
          LODWORD(v62) = 20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,polygonCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,early return due to failed polygon check - skipregion not checked)", &v63, v62, 0x104020300, 0x402000000000402, (_QWORD)v65);
LABEL_61:
          v36 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v27);
          if (v36 != buf)
            free(v36);
          return 0;
        }
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v35 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240704;
        v75 = 0;
        v76 = 1026;
        v77 = v8 == v9;
        v78 = 1026;
        v79 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,seCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,early return due to failed se check - polygon not checked)", buf, 0x14u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        LOWORD(v64) = 1026;
        *(_DWORD *)((char *)&v64 + 2) = v8 == v9;
        HIWORD(v64) = 1026;
        LODWORD(v65) = 0;
        LODWORD(v62) = 20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,seCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,early return due to failed se check - polygon not checked)", &v63, v62, 67240704, v64, (_QWORD)v65);
        goto LABEL_61;
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,MM disabled for this country", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      LOWORD(v63) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,MM disabled for this country", &v63, 2, v63, v64, (_QWORD)v65);
      goto LABEL_61;
    }
  }
  return result;
}

BOOL sub_100770C50(uint64_t a1, int8x16_t *a2)
{
  _BOOL8 result;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _QWORD *v11;
  uint8_t buf[16];

  if (*(double *)a1 > 0.0 && vabdd_f64(sub_1001FCBB4(), *(double *)a1) < 300.0)
    return *(_BYTE *)(a1 + 8) != 0;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102152300);
  v5 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,Polygon,%{private}s,verified", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v7 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v7 = (_QWORD *)*v7;
    v10 = 136380675;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MA-OTA,Polygon,%{private}s,verified", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingPolygon::isPointInPolygon(const CLClientLocationCoordinate &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(double *)a1 = sub_1001FCBB4();
  *(int8x16_t *)buf = vextq_s8(*a2, *a2, 8uLL);
  result = (int)sub_1007791D0((double *)buf, a1 + 40) >= 0;
  *(_BYTE *)(a1 + 8) = result;
  return result;
}

void sub_100770E84(uint64_t a1, uint64_t a2, uint64_t a3, CLMotionActivity *a4, unsigned int *a5, char *a6, int a7, int8x16_t *a8)
{
  uint64_t v14;
  double v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  _BOOL4 v28;
  char v29;
  NSObject *v30;
  int type;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  const char *v39;
  double v40;
  _BOOL4 v41;
  char v42;
  NSObject *v43;
  int v44;
  int v45;
  NSObject *v46;
  int v47;
  char *v48;
  int v49;
  char *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  int v54;
  int v55;
  double v56;
  _BOOL4 v57;
  __n128 v58;
  int v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  int v64;
  char *v65;
  NSObject *v66;
  const char *v67;
  uint8_t *v68;
  NSObject *v69;
  const char *v70;
  NSObject *v71;
  const char *v72;
  uint8_t *v73;
  NSObject *v74;
  const char *v75;
  uint8_t *v76;
  int v77;
  char *v78;
  const char *v79;
  uint8_t *v80;
  int v81;
  int v82;
  const char *v83;
  uint8_t *v84;
  int v85;
  int v86;
  const char *v87;
  uint8_t *v88;
  const char *v89;
  uint8_t *v90;
  const char *v91;
  uint8_t *v92;
  uint8_t *v93;
  const char *v94;
  uint8_t *v95;
  const char *v96;
  uint8_t *v97;
  uint8_t *v98;
  uint64_t v99;
  _BYTE v100[34];
  __int16 v101;
  int v102;
  uint8_t buf[4];
  uint64_t v104;
  __int16 v105;
  _BYTE v106[20];
  __int16 v107;
  int v108;

  v14 = *(_QWORD *)(a2 + 76);
  v15 = *(double *)(a3 + 344);
  v16 = *(double *)(a2 + 44);
  if (v15 <= 0.0)
  {
    v15 = sub_1001FCBB4();
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      v104 = v14;
      v105 = 2050;
      *(double *)v106 = v15;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,overwriting machContinuousTime,machContinuousTime,%{public}.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      *(_DWORD *)v100 = 134349312;
      *(_QWORD *)&v100[4] = v14;
      *(_WORD *)&v100[12] = 2050;
      *(double *)&v100[14] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,overwriting machContinuousTime,machContinuousTime,%{public}.1lf", v100, 22);
      v76 = (uint8_t *)v75;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v75);
      if (v76 != buf)
        free(v76);
    }
  }
  if (v16 > 45.0)
  {
    *(_DWORD *)(a1 + 4) = 0;
    *(double *)(a1 + 8) = v15;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      v104 = v14;
      v105 = 2050;
      *(double *)v106 = v16;
      *(_WORD *)&v106[8] = 2050;
      *(_QWORD *)&v106[10] = 0x4046800000000000;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,not matching,non-terrestrial speedMps,%{public}.2lf,threshold,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      *(_DWORD *)v100 = 134349568;
      *(_QWORD *)&v100[4] = v14;
      *(_WORD *)&v100[12] = 2050;
      *(double *)&v100[14] = v16;
      *(_WORD *)&v100[22] = 2050;
      LODWORD(v99) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,not matching,non-terrestrial speedMps,%{public}.2lf,threshold,%{public}.1lf", v100, v99, *(_OWORD *)v100, *(_QWORD *)&v100[16], 0x4046800000000000);
LABEL_16:
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
      return;
    }
    return;
  }
  *(_BYTE *)(a1 + 88) = 0;
  if (!sub_1002199F0(a1 + 40, v15, 6.0))
  {
    v21 = *(_DWORD *)(a1 + 40);
    if (v21 == 3)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v51 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,cycle matching,routehints,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        *(_DWORD *)v100 = 134349312;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 2050;
        *(double *)&v100[14] = v16;
        LODWORD(v99) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,cycle matching,routehints,speed,%{public}.2lf", v100, v99);
        v90 = (uint8_t *)v89;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v89);
        if (v90 != buf)
          free(v90);
      }
      *(double *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 88) = 1;
      goto LABEL_103;
    }
    if (v21 == 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v52 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,routehints,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        *(_DWORD *)v100 = 134349312;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 2050;
        *(double *)&v100[14] = v16;
        LODWORD(v99) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,routehints,speed,%{public}.2lf", v100, v99);
        v92 = (uint8_t *)v91;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v91);
        if (v92 != buf)
          free(v92);
      }
      *(double *)(a1 + 16) = v15;
      v33 = 1;
      *(_BYTE *)(a1 + 88) = 1;
      goto LABEL_148;
    }
    if (!v21 && v16 >= 0.0 && v16 < 13.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v22 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,routehints,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        *(_DWORD *)v100 = 134349312;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 2050;
        *(double *)&v100[14] = v16;
        LODWORD(v99) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,routehints,speed,%{public}.2lf", v100, v99);
        v95 = (uint8_t *)v94;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v94);
        if (v95 != buf)
          free(v95);
      }
      *(double *)(a1 + 24) = v15;
      *(_BYTE *)(a1 + 88) = 1;
      goto LABEL_51;
    }
  }
  v23 = *(int *)(a1 + 4);
  if (!(_DWORD)v23
    || ((v24 = *(double *)(a1 + 8 * v23 + 8), v25 = v15 - v24, v24 > 0.0) ? (v26 = v25 < 3.0) : (v26 = 0), !v26))
  {
    v27 = *(double *)(a1 + 24);
    v28 = v15 - v27 < 30.0 && v27 > 0.0;
    if (CLMotionActivity::isTypePedestrian(a4->type)
      && (a4->confidence > 0 ? (v29 = 1) : (v29 = v28), (v29 & 1) != 0)
      || CLMotionActivity::isTypePedestrian(*a5))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v30 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        type = a4->type;
        v32 = *a5;
        *(_DWORD *)buf = 134350080;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        *(_WORD *)&v106[8] = 1026;
        *(_DWORD *)&v106[10] = v28;
        *(_WORD *)&v106[14] = 1026;
        *(_DWORD *)&v106[16] = type;
        v107 = 1026;
        v108 = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,walking dynamics,speed,%{public}.2lf,wasRecentlyWalking,%{public}d,motion,%{public}d,fitness,%{public}d", buf, 0x28u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v81 = a4->type;
        v82 = *a5;
        *(_DWORD *)v100 = 134350080;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 2050;
        *(double *)&v100[14] = v16;
        *(_WORD *)&v100[22] = 1026;
        *(_DWORD *)&v100[24] = v28;
        *(_WORD *)&v100[28] = 1026;
        *(_DWORD *)&v100[30] = v81;
        v101 = 1026;
        v102 = v82;
        LODWORD(v99) = 40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,walking dynamics,speed,%{public}.2lf,wasRecentlyWalking,%{public}d,motion,%{public}d,fitness,%{public}d", v100, v99);
        v84 = (uint8_t *)v83;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v83);
        if (v84 != buf)
          free(v84);
      }
      *(double *)(a1 + 24) = v15;
      if (!*(_BYTE *)(a1 + 3) || (sub_1007765C0((uint64_t **)(a1 + 96), (const void **)a6, 2, a7, a8) & 1) == 0)
      {
        *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
        *(double *)(a1 + 8) = v15;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v34 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v35 = *(unsigned __int8 *)(a1 + 3);
          if (a6[23] >= 0)
            v36 = a6;
          else
            v36 = *(char **)a6;
          *(_DWORD *)buf = 134349571;
          v104 = v14;
          v105 = 1026;
          *(_DWORD *)v106 = v35;
          *(_WORD *)&v106[4] = 2081;
          *(_QWORD *)&v106[6] = v36;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, activity based pedestrian map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown", buf, 0x1Cu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_147;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v37 = *(unsigned __int8 *)(a1 + 3);
        if (a6[23] >= 0)
          v38 = a6;
        else
          v38 = *(char **)a6;
        *(_DWORD *)v100 = 134349571;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 1026;
        *(_DWORD *)&v100[14] = v37;
        *(_WORD *)&v100[18] = 2081;
        *(_QWORD *)&v100[20] = v38;
        LODWORD(v99) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics, activity based pedestrian map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown", v100, v99, *(_QWORD *)v100, *(_OWORD *)&v100[8], *(_QWORD *)&v100[24]);
        goto LABEL_227;
      }
LABEL_51:
      if (*(_BYTE *)(a1 + 2))
      {
        v33 = 2;
LABEL_148:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v63 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v64 = *(_DWORD *)(a1 + 4);
          if (a6[23] >= 0)
            v65 = a6;
          else
            v65 = *(char **)a6;
          *(_DWORD *)buf = 134349827;
          v104 = v14;
          v105 = 1026;
          *(_DWORD *)v106 = v64;
          *(_WORD *)&v106[4] = 1026;
          *(_DWORD *)&v106[6] = v33;
          *(_WORD *)&v106[10] = 2081;
          *(_QWORD *)&v106[12] = v65;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,fDynamics,%{public}d,dynamics,%{public}d,currentCountry,%{private}s", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v77 = *(_DWORD *)(a1 + 4);
          if (a6[23] >= 0)
            v78 = a6;
          else
            v78 = *(char **)a6;
          *(_DWORD *)v100 = 134349827;
          *(_QWORD *)&v100[4] = v14;
          *(_WORD *)&v100[12] = 1026;
          *(_DWORD *)&v100[14] = v77;
          *(_WORD *)&v100[18] = 1026;
          *(_DWORD *)&v100[20] = v33;
          *(_WORD *)&v100[24] = 2081;
          *(_QWORD *)&v100[26] = v78;
          LODWORD(v99) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,fDynamics,%{public}d,dynamics,%{public}d,currentCountry,%{private}s", v100, v99);
          v80 = (uint8_t *)v79;
          sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v79);
          if (v80 != buf)
            free(v80);
        }
        *(_DWORD *)(a1 + 4) = v33;
        return;
      }
      *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
      *(double *)(a1 + 8) = v15;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v61 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v104 = v14;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, pedestrian map-matching not allowed, setting unknown", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        *(_DWORD *)v100 = 134349056;
        *(_QWORD *)&v100[4] = v14;
        LODWORD(v99) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics, pedestrian map-matching not allowed, setting unknown", v100, v99, *(_QWORD *)v100, *(_OWORD *)&v100[8], *(_QWORD *)&v100[24]);
LABEL_227:
        v93 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v39);
        if (v93 != buf)
          free(v93);
        goto LABEL_147;
      }
      goto LABEL_147;
    }
    v40 = *(double *)(a1 + 32);
    v41 = v15 - v40 < 30.0 && v40 > 0.0;
    if (CLMotionActivity::isCycling(a4) && (a4->confidence > 0 ? (v42 = 1) : (v42 = v41), (v42 & 1) != 0)
      || CLMotionActivity::isTypeCycling(*a5))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v43 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v44 = a4->type;
        v45 = *a5;
        *(_DWORD *)buf = 134350080;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        *(_WORD *)&v106[8] = 1026;
        *(_DWORD *)&v106[10] = v41;
        *(_WORD *)&v106[14] = 1026;
        *(_DWORD *)&v106[16] = v44;
        v107 = 1026;
        v108 = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,cycling matching,cycling dynamics,speed,%{public}.2lf,wasRecentlyCycling,%{public}d,motion,%{public}d,fitness,%{public}d", buf, 0x28u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v85 = a4->type;
        v86 = *a5;
        *(_DWORD *)v100 = 134350080;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 2050;
        *(double *)&v100[14] = v16;
        *(_WORD *)&v100[22] = 1026;
        *(_DWORD *)&v100[24] = v41;
        *(_WORD *)&v100[28] = 1026;
        *(_DWORD *)&v100[30] = v85;
        v101 = 1026;
        v102 = v86;
        LODWORD(v99) = 40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,cycling matching,cycling dynamics,speed,%{public}.2lf,wasRecentlyCycling,%{public}d,motion,%{public}d,fitness,%{public}d", v100, v99);
        v88 = (uint8_t *)v87;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v87);
        if (v88 != buf)
          free(v88);
      }
      *(double *)(a1 + 32) = v15;
      if (!*(_BYTE *)(a1 + 1) || (sub_1007765C0((uint64_t **)(a1 + 96), (const void **)a6, 3, a7, a8) & 1) == 0)
      {
        *(_QWORD *)(a1 + 32) = 0xBFF0000000000000;
        *(double *)(a1 + 8) = v15;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v46 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v47 = *(unsigned __int8 *)(a1 + 1);
          if (a6[23] >= 0)
            v48 = a6;
          else
            v48 = *(char **)a6;
          *(_DWORD *)buf = 134349571;
          v104 = v14;
          v105 = 1026;
          *(_DWORD *)v106 = v47;
          *(_WORD *)&v106[4] = 2081;
          *(_QWORD *)&v106[6] = v48;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, activity based cycling map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown", buf, 0x1Cu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_147;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v49 = *(unsigned __int8 *)(a1 + 1);
        if (a6[23] >= 0)
          v50 = a6;
        else
          v50 = *(char **)a6;
        *(_DWORD *)v100 = 134349571;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 1026;
        *(_DWORD *)&v100[14] = v49;
        *(_WORD *)&v100[18] = 2081;
        *(_QWORD *)&v100[20] = v50;
        LODWORD(v99) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics, activity based cycling map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown", v100, v99, *(_QWORD *)v100, *(_OWORD *)&v100[8], *(_QWORD *)&v100[24]);
        goto LABEL_227;
      }
LABEL_103:
      if (*(_BYTE *)a1)
      {
        v33 = 3;
        goto LABEL_148;
      }
      *(_QWORD *)(a1 + 32) = 0xBFF0000000000000;
      *(double *)(a1 + 8) = v15;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v62 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v104 = v14;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, cycling map-matching not allowed, setting unknown", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        *(_DWORD *)v100 = 134349056;
        *(_QWORD *)&v100[4] = v14;
        LODWORD(v99) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics, cycling map-matching not allowed, setting unknown", v100, v99, *(_QWORD *)v100, *(_OWORD *)&v100[8], *(_QWORD *)&v100[24]);
        goto LABEL_227;
      }
LABEL_147:
      v33 = 0;
      goto LABEL_148;
    }
    v56 = *(double *)(a1 + 16);
    v57 = v15 - v56 < 30.0 && v56 > 0.0;
    if ((CLMotionActivity::isTypeDriving(a4->type) & 1) != 0
      || CLMotionActivity::isTypeInVehicle(a4->type, v58))
    {
      v59 = a4->confidence > 0 || v57;
      if (v59 == 1)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v60 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349568;
          v104 = v14;
          v105 = 2050;
          *(double *)v106 = v16;
          *(_WORD *)&v106[8] = 1026;
          *(_DWORD *)&v106[10] = v57;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,vehicle dynamics,speed,%{public}.2lf,wasRecentlyDriving,%{public}d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          *(_DWORD *)v100 = 134349568;
          *(_QWORD *)&v100[4] = v14;
          *(_WORD *)&v100[12] = 2050;
          *(double *)&v100[14] = v16;
          *(_WORD *)&v100[22] = 1026;
          *(_DWORD *)&v100[24] = v57;
          LODWORD(v99) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,vehicle dynamics,speed,%{public}.2lf,wasRecentlyDriving,%{public}d", v100, v99);
          v97 = (uint8_t *)v96;
          sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v96);
          if (v97 != buf)
            free(v97);
        }
        *(double *)(a1 + 16) = v15;
        goto LABEL_196;
      }
    }
    if (v28 && *(_DWORD *)(a1 + 4) == 2)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v66 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,wasRecentlyWalking,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        *(_DWORD *)v100 = 134349312;
        *(_QWORD *)&v100[4] = v14;
        *(_WORD *)&v100[12] = 2050;
        *(double *)&v100[14] = v16;
        LODWORD(v99) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,wasRecentlyWalking,speed,%{public}.2lf", v100, v99);
        v68 = (uint8_t *)v67;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v67);
        if (v68 != buf)
          free(v68);
      }
      goto LABEL_51;
    }
    if (v57 && *(_DWORD *)(a1 + 4) == 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v69 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,wasRecentlyDriving,speed,%{public}.2lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_196;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      *(_DWORD *)v100 = 134349312;
      *(_QWORD *)&v100[4] = v14;
      *(_WORD *)&v100[12] = 2050;
      *(double *)&v100[14] = v16;
      LODWORD(v99) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,wasRecentlyDriving,speed,%{public}.2lf", v100, v99, *(_QWORD *)v100, *(_OWORD *)&v100[8]);
    }
    else
    {
      if (v41 && *(_DWORD *)(a1 + 4) == 3)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v71 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          v104 = v14;
          v105 = 2050;
          *(double *)v106 = v16;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,cycle matching,wasRecentlyCycling,speed,%{public}.2lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          *(_DWORD *)v100 = 134349312;
          *(_QWORD *)&v100[4] = v14;
          *(_WORD *)&v100[12] = 2050;
          *(double *)&v100[14] = v16;
          LODWORD(v99) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,cycle matching,wasRecentlyCycling,speed,%{public}.2lf", v100, v99);
          v73 = (uint8_t *)v72;
          sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v72);
          if (v73 != buf)
            free(v73);
        }
        goto LABEL_103;
      }
      if (v16 <= 5.55555556)
        goto LABEL_147;
      *(double *)(a1 + 16) = v15;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v74 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v104 = v14;
        v105 = 2050;
        *(double *)v106 = v16;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,highSpeed,speed,%{public}.2lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_196:
        v33 = 1;
        goto LABEL_148;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      *(_DWORD *)v100 = 134349312;
      *(_QWORD *)&v100[4] = v14;
      *(_WORD *)&v100[12] = 2050;
      *(double *)&v100[14] = v16;
      LODWORD(v99) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,highSpeed,speed,%{public}.2lf", v100, v99, *(_QWORD *)v100, *(_OWORD *)&v100[8]);
    }
    v98 = (uint8_t *)v70;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v70);
    if (v98 != buf)
      free(v98);
    goto LABEL_196;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102152300);
  v53 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v54 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)buf = 134349568;
    v104 = v14;
    v105 = 1026;
    *(_DWORD *)v106 = v54;
    *(_WORD *)&v106[4] = 2050;
    *(double *)&v106[6] = v25;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,sticking to last dynamics,%{public}d,timeInCurrentMode,%{public}.1lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v55 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)v100 = 134349568;
    *(_QWORD *)&v100[4] = v14;
    *(_WORD *)&v100[12] = 1026;
    *(_DWORD *)&v100[14] = v55;
    *(_WORD *)&v100[18] = 2050;
    *(double *)&v100[20] = v25;
    LODWORD(v99) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,operatingDynamics,sticking to last dynamics,%{public}d,timeInCurrentMode,%{public}.1lf", v100, v99, *(_OWORD *)v100, *(_QWORD *)&v100[16], *(_QWORD *)&v100[24]);
    goto LABEL_16;
  }
}

uint64_t sub_100772A1C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string *v10;
  void **p_data;
  std::string::size_type *p_size;
  std::string::size_type *v13;
  unint64_t v14;
  int v15;
  int v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  NSObject *v27;
  std::string *v28;
  int v29;
  std::string *v30;
  int v31;
  const char *v32;
  char *v33;
  uint64_t **v34;
  uint64_t *v35;
  char *data;
  std::string::size_type size;
  uint64_t i;
  void *v39;
  unint64_t j;
  std::string::pointer v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::string v46[17];
  int v47;
  char v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  std::string *__str;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[12];
  __int16 v65;
  int v66;
  _BYTE buf[12];
  __int16 v68;
  int v69;
  char v70;
  void *__p;
  char v72;
  _BYTE v73[1280];

  v62 = 0;
  __str = 0;
  v63 = 0;
  v5 = sub_100773100(a3, (uint64_t *)&__str);
  if ((v5 & 1) != 0)
  {
    memset(v46, 0, 24);
    v6 = 1;
    do
    {
      v7 = &v46[v6];
      v7->__r_.__value_.__s.__data_[0] = 0;
      v7->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      v7->__r_.__value_.__s.__data_[16] = 0;
      *(_OWORD *)&v7[1].__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v7[1].__r_.__value_.__r.__words[2] = 0uLL;
      *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = 0uLL;
      v6 += 4;
      v7[3].__r_.__value_.__r.__words[2] = 0;
    }
    while (&v7[4] != (std::string *)&v47);
    v47 = 16777472;
    v48 = 1;
    v49 = 0;
    v51 = xmmword_101BC0BA0;
    v52 = xmmword_101BC0BB0;
    v53 = 400;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    v54 = v8;
    v55 = v8;
    v56 = v8;
    v57 = v8;
    v58 = v8;
    v59 = -1;
    v60 = xmmword_101BC0BC0;
    v50 = xmmword_101BC0BD0;
    v44 = a1;
    if (sub_1000C4240())
      DWORD1(v50) = 4233600;
    HIDWORD(v43) = v5;
    DWORD2(v54) = 125000;
    DWORD1(v55) = 125000;
    LODWORD(v56) = 125000;
    HIDWORD(v56) = 15000;
    DWORD2(v57) = 25000;
    DWORD1(v58) = -1;
    v59 = -1;
    std::string::operator=(v46, __str);
    v45 = a2;
    v9 = __str;
    if (0xAAAAAAAAAAAAAAABLL * ((v62 - (uint64_t)__str) >> 3) >= 2)
    {
      v10 = &v46[4 * a2];
      p_data = (void **)&v10[2].__r_.__value_.__l.__data_;
      p_size = &v10[2].__r_.__value_.__l.__size_;
      v13 = &v10[2].__r_.__value_.__r.__words[2];
      v14 = 1;
      do
      {
        v15 = sub_10076D8DC((unsigned __int8 *)&v9[v14]);
        v16 = v15;
        v17 = (char *)*p_size;
        if (*p_size >= *v13)
        {
          v19 = (char *)*p_data;
          v20 = (v17 - (_BYTE *)*p_data) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            sub_100259694();
          v22 = *v13 - (_QWORD)v19;
          if (v22 >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)sub_100260634((uint64_t)v13, v23);
            v17 = (char *)*p_size;
            v19 = (char *)*p_data;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v20];
          *(_DWORD *)v25 = v16;
          v18 = v25 + 4;
          while (v17 != v19)
          {
            v26 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          *p_data = v25;
          *p_size = (std::string::size_type)v18;
          *v13 = (std::string::size_type)&v24[4 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_DWORD *)v17 = v15;
          v18 = v17 + 4;
        }
        *p_size = (std::string::size_type)v18;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v27 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          v28 = &__str[v14];
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v29 = *(_DWORD *)(*p_size - 4);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v28;
          v68 = 1026;
          v69 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,DefaultsWrite,signalEnvironment,%{public}s,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v30 = &__str[v14];
          if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
            v30 = (std::string *)v30->__r_.__value_.__r.__words[0];
          v31 = *(_DWORD *)(*p_size - 4);
          *(_DWORD *)v64 = 136446466;
          *(_QWORD *)&v64[4] = v30;
          v65 = 1026;
          v66 = v31;
          LODWORD(v43) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,DefaultsWrite,signalEnvironment,%{public}s,%{public}d", v64, v43);
          v33 = (char *)v32;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::updateCountrySettingUsingDefaultWriteSEString(const MatcherOperatingDynamicsEnum, const std::string &)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        ++v14;
        v9 = __str;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v62 - (uint64_t)__str) >> 3) > v14);
    }
    v34 = (uint64_t **)(v44 + 96);
    if (sub_1001876D0(v44 + 96, (const void **)&v46[0].__r_.__value_.__l.__data_))
    {
      *(_QWORD *)v64 = v46;
      LOBYTE(sub_10018774C(v34, (const void **)&v46[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (__int128 **)v64)[12 * v45 + 10]) = 1;
      *(_QWORD *)v64 = v46;
      v35 = sub_10018774C(v34, (const void **)&v46[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (__int128 **)v64);
      if (v35 + 7 != (uint64_t *)v46)
      {
        data = v46[4 * v45 + 2].__r_.__value_.__l.__data_;
        size = v46[4 * v45 + 2].__r_.__value_.__l.__size_;
        sub_1002A3054((char *)&v35[12 * v45 + 13], data, size, (uint64_t)(size - (_QWORD)data) >> 2);
      }
    }
    else
    {
      sub_10077AEF0(buf, (__int128 *)v46, (__int128 *)v46);
      sub_10077BB58(v34, (const void **)buf, (__int128 *)buf);
      for (i = 0; i != -384; i -= 96)
      {
        *(_QWORD *)v64 = &v73[i + 48];
        sub_10077AE18((void ***)v64);
        *(_QWORD *)v64 = &v73[i + 24];
        sub_10077AE18((void ***)v64);
        v39 = *(void **)&v73[i];
        if (v39)
        {
          *(_QWORD *)&v73[i + 8] = v39;
          operator delete(v39);
        }
      }
      if (v72 < 0)
        operator delete(__p);
      if (v70 < 0)
        operator delete(*(void **)buf);
    }
    for (j = 0; j != -384; j -= 96)
    {
      *(_QWORD *)buf = &v46[j / 0x18 + 16];
      sub_10077AE18((void ***)buf);
      *(_QWORD *)buf = &v46[j / 0x18 + 15];
      sub_10077AE18((void ***)buf);
      v41 = v46[j / 0x18 + 14].__r_.__value_.__l.__data_;
      if (v41)
      {
        v46[j / 0x18 + 14].__r_.__value_.__l.__size_ = (std::string::size_type)v41;
        operator delete(v41);
      }
    }
    if (SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46[0].__r_.__value_.__l.__data_);
    v5 = HIDWORD(v43);
  }
  *(_QWORD *)buf = &__str;
  sub_100259608((void ***)buf);
  return v5;
}

void sub_100773054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list __p;

  va_start(__p, a7);
  sub_100773434((uint64_t)__p);
  STACK[0x2B0] = (unint64_t)&STACK[0x270];
  sub_100259608((void ***)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100773100(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v18;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[10];
  char v25;
  uint64_t v26;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  sub_100263E50((uint64_t)v22);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  sub_100263F7C(&v23, v6, v7);
  sub_100259648(a2);
  while ((*((_BYTE *)&v24[1] + *(_QWORD *)(v22[0] - 24)) & 5) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v21 = 0;
    v8 = sub_1004ACBE4(v22, (uint64_t)__p, 0x2Cu);
    v9 = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5;
    if (!v9)
    {
      v10 = a2[1];
      if (v10 >= a2[2])
      {
        v12 = sub_1015E796C(a2, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v21) < 0)
        {
          sub_100115CE4((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
        }
        else
        {
          v11 = *(_OWORD *)__p;
          *(_QWORD *)(v10 + 16) = v21;
          *(_OWORD *)v10 = v11;
        }
        v12 = v10 + 24;
        a2[1] = v10 + 24;
      }
      a2[1] = v12;
    }
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      if (v9)
        break;
    }
    else if (v9)
    {
      break;
    }
  }
  v13 = *a2;
  if (a2[1] == *a2)
    goto LABEL_33;
  if (*(char *)(v13 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)v13, *(_QWORD *)(v13 + 8));
  }
  else
  {
    v14 = *(_OWORD *)v13;
    v21 = *(_QWORD *)(v13 + 16);
    *(_OWORD *)__p = v14;
  }
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21) == 2)
      goto LABEL_42;
    if (HIBYTE(v21) == 3)
    {
      v16 = __p;
      goto LABEL_36;
    }
LABEL_33:
    v15 = 0;
    goto LABEL_46;
  }
  if (__p[1] == (void *)2)
    goto LABEL_42;
  v16 = (void **)__p[0];
  if (__p[1] != (void *)3)
  {
    v15 = 0;
    goto LABEL_45;
  }
LABEL_36:
  if (*(_WORD *)v16 != 20306 || *((_BYTE *)v16 + 2) != 87)
  {
    v15 = 0;
    if (v21 < 0)
      goto LABEL_43;
    goto LABEL_46;
  }
LABEL_42:
  v15 = 1;
  if (v21 < 0)
  {
LABEL_43:
    v16 = (void **)__p[0];
LABEL_45:
    operator delete(v16);
  }
LABEL_46:
  *(_QWORD *)((char *)v22
  v23 = v18;
  if (v25 < 0)
    operator delete((void *)v24[8]);
  std::streambuf::~streambuf(v24);
  std::ios::~ios(&v26);
  return v15;
}

void sub_100773360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1007733A0(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void **v5;

  for (i = 0; i != -384; i -= 96)
  {
    v5 = (void **)(a1 + i + 408);
    sub_10077AE18(&v5);
    v5 = (void **)(a1 + i + 384);
    sub_10077AE18(&v5);
    v3 = *(void **)(a1 + i + 360);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 368) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100773434(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void **v5;

  for (i = 0; i != -384; i -= 96)
  {
    v5 = (void **)(a1 + i + 384);
    sub_10077AE18(&v5);
    v5 = (void **)(a1 + i + 360);
    sub_10077AE18(&v5);
    v3 = *(void **)(a1 + i + 336);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 344) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1007734B8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  std::string *v14;
  double v15;
  std::string *v16;
  double v17;
  double v18;
  double *v19;
  char *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  double *v28;
  NSObject *v29;
  std::string *v30;
  int v31;
  std::string *v32;
  int v33;
  const char *v34;
  char *v35;
  std::string *v36;
  uint64_t *p_size;
  uint64_t v38;
  std::string::size_type size;
  uint64_t **v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t i;
  void *v45;
  unint64_t j;
  std::string::pointer data;
  uint64_t v49;
  uint64_t v50;
  int v51;
  std::string v52;
  void *__p;
  char *v54;
  char *v55;
  std::string v56[17];
  int v57;
  char v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  __int128 v70;
  std::string *__str;
  std::string *v72;
  uint64_t v73;
  std::string *v74;
  _BYTE v75[12];
  __int16 v76;
  _BYTE v77[34];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE buf[12];
  __int16 v82;
  int v83;
  __int16 v84;
  _BYTE v85[18];
  char v86;
  _BYTE v87[1280];

  v72 = 0;
  __str = 0;
  v73 = 0;
  v5 = sub_100773100(a3, (uint64_t *)&__str);
  if ((v5 & 1) != 0)
  {
    memset(v56, 0, 24);
    v6 = 1;
    do
    {
      v7 = &v56[v6];
      v7->__r_.__value_.__s.__data_[0] = 0;
      v7->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      v7->__r_.__value_.__s.__data_[16] = 0;
      *(_OWORD *)&v7[1].__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v7[1].__r_.__value_.__r.__words[2] = 0uLL;
      *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = 0uLL;
      v6 += 4;
      v7[3].__r_.__value_.__r.__words[2] = 0;
    }
    while (&v7[4] != (std::string *)&v57);
    v57 = 16777472;
    v58 = 1;
    v59 = 0;
    v61 = xmmword_101BC0BA0;
    v62 = xmmword_101BC0BB0;
    v63 = 400;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    v64 = v8;
    v65 = v8;
    v66 = v8;
    v67 = v8;
    v68 = v8;
    v69 = -1;
    v70 = xmmword_101BC0BC0;
    v60 = xmmword_101BC0BD0;
    v51 = a2;
    if (sub_1000C4240())
      DWORD1(v60) = 4233600;
    v50 = a1;
    HIDWORD(v49) = v5;
    DWORD2(v64) = 125000;
    DWORD1(v65) = 125000;
    LODWORD(v66) = 125000;
    HIDWORD(v66) = 15000;
    DWORD2(v67) = 25000;
    DWORD1(v68) = -1;
    v69 = -1;
    std::string::operator=(v56, __str);
    __p = 0;
    v54 = 0;
    v55 = 0;
    memset(&v52, 0, sizeof(v52));
    v9 = __str;
    if (v72 != __str)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)__str) >> 3);
      do
      {
        if (v11)
        {
          v13 = v11 + 1;
          if (v12 <= v11 + 1)
            break;
          v14 = &v9[v10];
          if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
            v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
          v15 = atof((const char *)v14);
          v16 = &v9[v13];
          if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
            v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          v17 = atof((const char *)v16);
          v18 = v17;
          v19 = (double *)v54;
          if (v54 >= v55)
          {
            v21 = (double *)__p;
            v22 = (v54 - (_BYTE *)__p) >> 4;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60)
              sub_100259694();
            v24 = v55 - (_BYTE *)__p;
            if ((v55 - (_BYTE *)__p) >> 3 > v23)
              v23 = v24 >> 3;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
              v25 = 0xFFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)sub_10028E224((uint64_t)&v55, v25);
              v21 = (double *)__p;
              v19 = (double *)v54;
            }
            else
            {
              v26 = 0;
            }
            v27 = (double *)&v26[16 * v22];
            *v27 = v15;
            v27[1] = v18;
            v28 = v27;
            if (v19 != v21)
            {
              do
              {
                *((_OWORD *)v28 - 1) = *((_OWORD *)v19 - 1);
                v28 -= 2;
                v19 -= 2;
              }
              while (v19 != v21);
              v21 = (double *)__p;
            }
            v20 = (char *)(v27 + 2);
            __p = v28;
            v54 = (char *)(v27 + 2);
            v55 = &v26[16 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(double *)v54 = v15;
            v19[1] = v17;
            v20 = (char *)(v19 + 2);
          }
          v54 = v20;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v29 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            v30 = &v52;
            if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
            if (v13 >= 0)
              v31 = v13;
            else
              v31 = v13 + 1;
            *(_DWORD *)buf = 136446979;
            *(_QWORD *)&buf[4] = v30;
            v82 = 1026;
            v83 = v31 >> 1;
            v84 = 2049;
            *(double *)v85 = v15;
            *(_WORD *)&v85[8] = 2049;
            *(double *)&v85[10] = v18;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,DefaultsWrite,polygon,%{public}s,coordinate%{public}d,ll,%{private}.7lf,%{private}.7lf", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            v32 = &v52;
            if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v32 = (std::string *)v52.__r_.__value_.__r.__words[0];
            if (v13 >= 0)
              v33 = v13;
            else
              v33 = v13 + 1;
            *(_DWORD *)v75 = 136446979;
            *(_QWORD *)&v75[4] = v32;
            v76 = 1026;
            *(_DWORD *)v77 = v33 >> 1;
            *(_WORD *)&v77[4] = 2049;
            *(double *)&v77[6] = v15;
            *(_WORD *)&v77[14] = 2049;
            *(double *)&v77[16] = v18;
            LODWORD(v49) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,DefaultsWrite,polygon,%{public}s,coordinate%{public}d,ll,%{private}.7lf,%{private}.7lf", v75, v49);
            v35 = (char *)v34;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::updateCountrySettingUsingDefaultWritePolygonString(const MatcherOperatingDynamicsEnum, const std::string &)", "%s\n", v34);
            if (v35 != buf)
              free(v35);
          }
        }
        else
        {
          std::string::operator=(&v52, &v9[v10]);
          v13 = 0;
        }
        v11 = v13 + 1;
        v10 = v13 + 1;
        v9 = __str;
        v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)__str) >> 3);
      }
      while (v12 > v10);
    }
    *(_QWORD *)v75 = 0xBFF0000000000000;
    v75[8] = 0;
    memset(&v77[2], 0, 32);
    v78 = 0u;
    v79 = 0u;
    v80 = 0;
    sub_10076E7DC((uint64_t)v75, &v52, (uint64_t **)&__p);
    v36 = &v56[4 * a2];
    size = v36[3].__r_.__value_.__l.__size_;
    p_size = (uint64_t *)&v36[3].__r_.__value_.__l.__size_;
    v38 = size;
    v40 = (uint64_t **)(p_size - 1);
    if (size >= p_size[1])
    {
      v41 = sub_10077B5F0(p_size - 1, (uint64_t *)v75);
    }
    else
    {
      sub_10077B248((uint64_t)(p_size + 1), v38, (uint64_t *)v75);
      v41 = v38 + 88;
    }
    *p_size = v41;
    v42 = (uint64_t **)(v50 + 96);
    if (sub_1001876D0(v50 + 96, (const void **)&v56[0].__r_.__value_.__l.__data_))
    {
      v74 = v56;
      LOBYTE(sub_10018774C(v42, (const void **)&v56[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (__int128 **)&v74)[12 * v51 + 10]) = 1;
      v74 = v56;
      v43 = &sub_10018774C(v42, (const void **)&v56[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (__int128 **)&v74)[12 * v51 + 16];
      if (v43 != (uint64_t *)v40)
        sub_10077BCF8((uint64_t)v43, *v40, (uint64_t *)*p_size, 0x2E8BA2E8BA2E8BA3 * ((*p_size - (uint64_t)*v40) >> 3));
    }
    else
    {
      sub_10077AEF0(buf, (__int128 *)v56, (__int128 *)v56);
      sub_10077BB58(v42, (const void **)buf, (__int128 *)buf);
      for (i = 0; i != -384; i -= 96)
      {
        v74 = (std::string *)&v87[i + 48];
        sub_10077AE18((void ***)&v74);
        v74 = (std::string *)&v87[i + 24];
        sub_10077AE18((void ***)&v74);
        v45 = *(void **)&v87[i];
        if (v45)
        {
          *(_QWORD *)&v87[i + 8] = v45;
          operator delete(v45);
        }
      }
      if (v86 < 0)
        operator delete(*(void **)&v85[4]);
      if ((v85[3] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    *(_QWORD *)buf = &v79;
    sub_10025E1F0((void ***)buf);
    if (*(_QWORD *)&v77[26])
    {
      *(_QWORD *)&v78 = *(_QWORD *)&v77[26];
      operator delete(*(void **)&v77[26]);
    }
    if ((v77[25] & 0x80000000) != 0)
      operator delete(*(void **)&v77[2]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (__p)
    {
      v54 = (char *)__p;
      operator delete(__p);
    }
    for (j = 0; j != -384; j -= 96)
    {
      *(_QWORD *)buf = &v56[j / 0x18 + 16];
      sub_10077AE18((void ***)buf);
      *(_QWORD *)buf = &v56[j / 0x18 + 15];
      sub_10077AE18((void ***)buf);
      data = v56[j / 0x18 + 14].__r_.__value_.__l.__data_;
      if (data)
      {
        v56[j / 0x18 + 14].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(data);
      }
    }
    if (SHIBYTE(v56[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56[0].__r_.__value_.__l.__data_);
    v5 = HIDWORD(v49);
  }
  *(_QWORD *)buf = &__str;
  sub_100259608((void ***)buf);
  return v5;
}

void sub_100773C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_100773434((uint64_t)va);
  STACK[0x330] = (unint64_t)&STACK[0x2A8];
  sub_100259608((void ***)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_100773D2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  int *v16;
  NSObject *v17;
  const char *v18;
  int *v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;

  if (a3 <= 6)
  {
    v12 = (int *)(a1 + 12 * a3 + 64);
    if (*(char *)(a4 + 23) >= 0)
      v13 = (const char *)a4;
    else
      v13 = *(const char **)a4;
    if ((sub_1001E4B84(a2, v13, v12) & 1) == 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v14 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v40 = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get enabled road tile radius setting for type,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v33 = 67240192;
        v34 = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Unable to get enabled road tile radius setting for type,%{public}d", &v33, 8);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    if (*(char *)(a5 + 23) >= 0)
      v15 = (const char *)a5;
    else
      v15 = *(const char **)a5;
    v16 = (int *)(a1 + 12 * a3 + 68);
    if ((sub_1001E4B84(a2, v15, v16) & 1) == 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v17 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v40 = a3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get enabled building tile radius setting for type,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v33 = 67240192;
        v34 = a3;
        LODWORD(v32) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Unable to get enabled building tile radius setting for type,%{public}d", &v33, v32);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
    if (*(char *)(a6 + 23) >= 0)
      v18 = (const char *)a6;
    else
      v18 = *(const char **)a6;
    v19 = (int *)(a1 + 12 * a3 + 72);
    if ((sub_1001E4B84(a2, v18, v19) & 1) == 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v20 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v40 = a3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get enabled running track tile radius setting for type,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v33 = 67240192;
        v34 = a3;
        LODWORD(v32) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Unable to get enabled running track tile radius setting for type,%{public}d", &v33, v32);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    if (*v19 > 1000000)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v21 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *v19;
        *(_DWORD *)buf = 67240704;
        v40 = v22;
        v41 = 1026;
        v42 = 1000000;
        v43 = 1026;
        v44 = a3;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning,TrackRun,Track tile download radius,%{public}d,exceeds cap,%{public}d,for type,%{public}d", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v29 = *v19;
        v33 = 67240704;
        v34 = v29;
        v35 = 1026;
        v36 = 1000000;
        v37 = 1026;
        v38 = a3;
        LODWORD(v32) = 20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "#Warning,TrackRun,Track tile download radius,%{public}d,exceeds cap,%{public}d,for type,%{public}d", &v33, v32);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      *v19 = 1000000;
    }
    if (*v12 > 125000)
      *v12 = 125000;
    if (*v16 > 125000)
      *v16 = 125000;
  }
}

uint64_t sub_1007743C0(unsigned __int8 *a1, uint64_t a2)
{
  const char *v4;
  NSObject *v5;
  uint64_t *v6;
  const char *v7;
  NSObject *v8;
  uint64_t *v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  const char *v89;
  uint8_t *v90;
  uint64_t *v91;
  const char *v92;
  uint8_t *v93;
  uint64_t *v94;
  const char *v95;
  uint8_t *v96;
  uint64_t v97;
  void *v98[2];
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  unsigned __int8 v102;
  void *v103[2];
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  void *v107[2];
  uint64_t v108;
  void *v109[2];
  uint64_t v110;
  void *v111[2];
  uint64_t v112;
  void *v113[2];
  uint64_t v114;
  void *v115[2];
  uint64_t v116;
  void *v117[2];
  uint64_t v118;
  void *v119[2];
  uint64_t v120;
  void *v121[2];
  uint64_t v122;
  void *v123[2];
  uint64_t v124;
  void *v125[2];
  uint64_t v126;
  void *v127[2];
  uint64_t v128;
  void *v129[2];
  uint64_t v130;
  void *v131[2];
  uint64_t v132;
  void *v133[2];
  uint64_t v134;
  void *v135[2];
  uint64_t v136;
  void *v137[2];
  uint64_t v138;
  void *__dst[2];
  uint64_t v140;
  void *__p[2];
  uint64_t v142;
  int v143;
  _BYTE v144[10];
  _BYTE v145[6];
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  __int16 v180;
  int v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  int v195;
  __int16 v196;
  int v197;
  __int16 v198;
  int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  __int16 v226;
  int v227;
  __int16 v228;
  int v229;
  uint8_t buf[4];
  _BYTE v231[10];
  _BYTE v232[6];
  __int16 v233;
  int v234;
  __int16 v235;
  int v236;
  __int16 v237;
  int v238;
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  int v246;
  __int16 v247;
  int v248;
  __int16 v249;
  int v250;
  __int16 v251;
  int v252;
  __int16 v253;
  int v254;
  __int16 v255;
  int v256;
  __int16 v257;
  int v258;
  __int16 v259;
  int v260;
  __int16 v261;
  int v262;
  __int16 v263;
  int v264;
  __int16 v265;
  int v266;
  __int16 v267;
  int v268;
  __int16 v269;
  int v270;
  __int16 v271;
  int v272;
  __int16 v273;
  int v274;
  __int16 v275;
  int v276;
  __int16 v277;
  int v278;
  __int16 v279;
  int v280;
  __int16 v281;
  int v282;
  __int16 v283;
  int v284;
  __int16 v285;
  int v286;
  __int16 v287;
  int v288;
  __int16 v289;
  int v290;
  __int16 v291;
  int v292;
  __int16 v293;
  int v294;
  __int16 v295;
  int v296;
  __int16 v297;
  int v298;
  __int16 v299;
  int v300;
  __int16 v301;
  int v302;
  __int16 v303;
  int v304;
  __int16 v305;
  int v306;
  __int16 v307;
  int v308;
  __int16 v309;
  int v310;
  __int16 v311;
  int v312;
  __int16 v313;
  int v314;
  __int16 v315;
  int v316;

  if (byte_102303FA7 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102303F90, *((unint64_t *)&xmmword_102303F90 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102303F90;
    v142 = unk_102303FA0;
  }
  *a1 = sub_10077588C(a2, (const char *)__p, *a1);
  if (SHIBYTE(v142) < 0)
    operator delete(__p[0]);
  if (byte_102304097 < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_102304080, *((unint64_t *)&xmmword_102304080 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_102304080;
    v140 = unk_102304090;
  }
  *((_DWORD *)a1 + 4) = sub_100775A94(a2, (const char *)__dst, 1209600, 43200, 15552000);
  if (SHIBYTE(v140) < 0)
    operator delete(__dst[0]);
  if (byte_1023040AF < 0)
  {
    sub_100115CE4(v137, (void *)xmmword_102304098, *((unint64_t *)&xmmword_102304098 + 1));
  }
  else
  {
    *(_OWORD *)v137 = xmmword_102304098;
    v138 = unk_1023040A8;
  }
  *((_DWORD *)a1 + 5) = sub_100775A94(a2, (const char *)v137, 1209600, 43200, 15552000);
  if (SHIBYTE(v138) < 0)
    operator delete(v137[0]);
  if (byte_1023040C7 < 0)
  {
    sub_100115CE4(v135, (void *)xmmword_1023040B0, *((unint64_t *)&xmmword_1023040B0 + 1));
  }
  else
  {
    *(_OWORD *)v135 = xmmword_1023040B0;
    v136 = unk_1023040C0;
  }
  *((_DWORD *)a1 + 6) = sub_100775A94(a2, (const char *)v135, 75, 25, 100);
  if (SHIBYTE(v136) < 0)
    operator delete(v135[0]);
  if (byte_1023040DF < 0)
  {
    sub_100115CE4(v133, (void *)xmmword_1023040C8, *((unint64_t *)&xmmword_1023040C8 + 1));
  }
  else
  {
    *(_OWORD *)v133 = xmmword_1023040C8;
    v134 = unk_1023040D8;
  }
  *((_DWORD *)a1 + 7) = sub_100775A94(a2, (const char *)v133, 50, 25, 100);
  if (SHIBYTE(v134) < 0)
    operator delete(v133[0]);
  if (byte_1023040F7 < 0)
  {
    sub_100115CE4(v131, (void *)xmmword_1023040E0, *((unint64_t *)&xmmword_1023040E0 + 1));
  }
  else
  {
    *(_OWORD *)v131 = xmmword_1023040E0;
    v132 = unk_1023040F0;
  }
  *((_DWORD *)a1 + 8) = sub_100775A94(a2, (const char *)v131, 301, 301, 21600);
  if (SHIBYTE(v132) < 0)
    operator delete(v131[0]);
  if (byte_10230410F < 0)
  {
    sub_100115CE4(v129, (void *)xmmword_1023040F8, *((unint64_t *)&xmmword_1023040F8 + 1));
  }
  else
  {
    *(_OWORD *)v129 = xmmword_1023040F8;
    v130 = unk_102304108;
  }
  *((_DWORD *)a1 + 9) = sub_100775A94(a2, (const char *)v129, 150000, 1000, 3000000);
  if (SHIBYTE(v130) < 0)
    operator delete(v129[0]);
  if (byte_102304127 < 0)
  {
    sub_100115CE4(v127, (void *)xmmword_102304110, *((unint64_t *)&xmmword_102304110 + 1));
  }
  else
  {
    *(_OWORD *)v127 = xmmword_102304110;
    v128 = unk_102304120;
  }
  *((_DWORD *)a1 + 10) = sub_100775A94(a2, (const char *)v127, 10000, 10, 300000);
  if (SHIBYTE(v128) < 0)
    operator delete(v127[0]);
  if (byte_10230413F < 0)
  {
    sub_100115CE4(v125, (void *)xmmword_102304128, *((unint64_t *)&xmmword_102304128 + 1));
  }
  else
  {
    *(_OWORD *)v125 = xmmword_102304128;
    v126 = unk_102304138;
  }
  *((_DWORD *)a1 + 11) = sub_100775A94(a2, (const char *)v125, 150, 2, 900);
  if (SHIBYTE(v126) < 0)
    operator delete(v125[0]);
  if (byte_1023042D7 < 0)
  {
    sub_100115CE4(v123, (void *)xmmword_1023042C0, *((unint64_t *)&xmmword_1023042C0 + 1));
  }
  else
  {
    *(_OWORD *)v123 = xmmword_1023042C0;
    v124 = unk_1023042D0;
  }
  *((_DWORD *)a1 + 3) = sub_100775A94(a2, (const char *)v123, 21600, 1, 86400);
  if (SHIBYTE(v124) < 0)
    operator delete(v123[0]);
  if (byte_1023042EF < 0)
  {
    sub_100115CE4(v121, (void *)xmmword_1023042D8, *((unint64_t *)&xmmword_1023042D8 + 1));
  }
  else
  {
    *(_OWORD *)v121 = xmmword_1023042D8;
    v122 = unk_1023042E8;
  }
  *((_DWORD *)a1 + 12) = sub_100775A94(a2, (const char *)v121, 10, 10, 2000);
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  if (byte_102304307 < 0)
  {
    sub_100115CE4(v119, (void *)xmmword_1023042F0, *((unint64_t *)&xmmword_1023042F0 + 1));
  }
  else
  {
    *(_OWORD *)v119 = xmmword_1023042F0;
    v120 = unk_102304300;
  }
  *((_DWORD *)a1 + 13) = sub_100775A94(a2, (const char *)v119, 100, 10, 2000);
  if (SHIBYTE(v120) < 0)
    operator delete(v119[0]);
  if (byte_10230431F < 0)
  {
    sub_100115CE4(v117, (void *)xmmword_102304308, *((unint64_t *)&xmmword_102304308 + 1));
  }
  else
  {
    *(_OWORD *)v117 = xmmword_102304308;
    v118 = unk_102304318;
  }
  *((_DWORD *)a1 + 14) = sub_100775A94(a2, (const char *)v117, 4, 10, 2000);
  if (SHIBYTE(v118) < 0)
    operator delete(v117[0]);
  if (byte_102304337 < 0)
  {
    sub_100115CE4(v115, (void *)xmmword_102304320, *((unint64_t *)&xmmword_102304320 + 1));
  }
  else
  {
    *(_OWORD *)v115 = xmmword_102304320;
    v116 = unk_102304330;
  }
  *((_DWORD *)a1 + 15) = sub_100775A94(a2, (const char *)v115, 400, 10, 2000);
  if (SHIBYTE(v116) < 0)
    operator delete(v115[0]);
  if (byte_1023043AF < 0)
  {
    sub_100115CE4(v113, (void *)xmmword_102304398, *((unint64_t *)&xmmword_102304398 + 1));
  }
  else
  {
    *(_OWORD *)v113 = xmmword_102304398;
    v114 = unk_1023043A8;
  }
  *((_DWORD *)a1 + 39) = sub_100775A94(a2, (const char *)v113, 100000, 25000, 1000000);
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  if (byte_1023043C7 < 0)
  {
    sub_100115CE4(v111, (void *)xmmword_1023043B0, *((unint64_t *)&xmmword_1023043B0 + 1));
  }
  else
  {
    *(_OWORD *)v111 = xmmword_1023043B0;
    v112 = unk_1023043C0;
  }
  *((_DWORD *)a1 + 40) = sub_100775A94(a2, (const char *)v111, 21, 0, 120);
  if (SHIBYTE(v112) < 0)
    operator delete(v111[0]);
  if (byte_102304157 < 0)
  {
    sub_100115CE4(v109, (void *)xmmword_102304140, *((unint64_t *)&xmmword_102304140 + 1));
  }
  else
  {
    *(_OWORD *)v109 = xmmword_102304140;
    v110 = unk_102304150;
  }
  a1[1] = sub_10077588C(a2, (const char *)v109, a1[1]);
  if (SHIBYTE(v110) < 0)
    operator delete(v109[0]);
  if (byte_10230416F < 0)
  {
    sub_100115CE4(v107, (void *)xmmword_102304158, *((unint64_t *)&xmmword_102304158 + 1));
  }
  else
  {
    *(_OWORD *)v107 = xmmword_102304158;
    v108 = unk_102304168;
  }
  a1[2] = sub_10077588C(a2, (const char *)v107, a1[2]);
  if (SHIBYTE(v108) < 0)
    operator delete(v107[0]);
  if (byte_102304277 < 0)
  {
    sub_100115CE4(v105, (void *)xmmword_102304260, *((unint64_t *)&xmmword_102304260 + 1));
  }
  else
  {
    *(_OWORD *)v105 = xmmword_102304260;
    v106 = unk_102304270;
  }
  a1[3] = sub_10077588C(a2, (const char *)v105, a1[3]);
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
  if (byte_10230434F < 0)
  {
    sub_100115CE4(v103, (void *)xmmword_102304338, *((unint64_t *)&xmmword_102304338 + 1));
  }
  else
  {
    *(_OWORD *)v103 = xmmword_102304338;
    v104 = unk_102304348;
  }
  a1[4] = sub_10077588C(a2, (const char *)v103, a1[4]);
  if (SHIBYTE(v104) < 0)
    operator delete(v103[0]);
  v102 = a1[6];
  a1[5] = 0;
  if (byte_102304187 >= 0)
    v4 = (const char *)&qword_102304170;
  else
    v4 = (const char *)qword_102304170;
  if (sub_1001E4874(a2, v4, (BOOL *)&v102))
  {
    a1[6] = v102;
    a1[5] = 1;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      if (byte_102304187 >= 0)
        v6 = &qword_102304170;
      else
        v6 = (uint64_t *)qword_102304170;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v231 = v6;
      *(_WORD *)&v231[8] = 1026;
      *(_DWORD *)v232 = v102;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      if (byte_102304187 >= 0)
        v91 = &qword_102304170;
      else
        v91 = (uint64_t *)qword_102304170;
      v143 = 136446466;
      *(_QWORD *)v144 = v91;
      *(_WORD *)&v144[8] = 1026;
      *(_DWORD *)v145 = v102;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", &v143, 18);
      v93 = (uint8_t *)v92;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::fillFromMobileAssetNVP(const CLNameValuePair &)", "%s\n", v92);
      if (v93 != buf)
        free(v93);
    }
  }
  v102 = a1[8];
  a1[7] = 0;
  if (byte_1023041E7 >= 0)
    v7 = (const char *)&qword_1023041D0;
  else
    v7 = (const char *)qword_1023041D0;
  if (sub_1001E4874(a2, v7, (BOOL *)&v102))
  {
    a1[8] = v102;
    a1[7] = 1;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      if (byte_1023041E7 >= 0)
        v9 = &qword_1023041D0;
      else
        v9 = (uint64_t *)qword_1023041D0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v231 = v9;
      *(_WORD *)&v231[8] = 1026;
      *(_DWORD *)v232 = v102;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      if (byte_1023041E7 >= 0)
        v94 = &qword_1023041D0;
      else
        v94 = (uint64_t *)qword_1023041D0;
      v143 = 136446466;
      *(_QWORD *)v144 = v94;
      *(_WORD *)&v144[8] = 1026;
      *(_DWORD *)v145 = v102;
      LODWORD(v97) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", &v143, v97);
      v96 = (uint8_t *)v95;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::fillFromMobileAssetNVP(const CLNameValuePair &)", "%s\n", v95);
      if (v96 != buf)
        free(v96);
    }
  }
  sub_100773D2C((uint64_t)a1, a2, 0, (uint64_t)qword_102303FA8, (uint64_t)qword_102303FC0, (uint64_t)qword_102303FD8);
  sub_100773D2C((uint64_t)a1, a2, 1, (uint64_t)qword_102303FF0, (uint64_t)qword_102304008, (uint64_t)qword_102304020);
  sub_100773D2C((uint64_t)a1, a2, 2, (uint64_t)qword_102304038, (uint64_t)qword_102304050, (uint64_t)qword_102304068);
  *(int32x2_t *)(a1 + 100) = vdup_n_s32(0x1770u);
  sub_100773D2C((uint64_t)a1, a2, 3, (uint64_t)qword_102304350, (uint64_t)qword_102304368, (uint64_t)qword_102304380);
  *((_QWORD *)a1 + 14) = 107374182450000;
  sub_100773D2C((uint64_t)a1, a2, 4, (uint64_t)qword_102304278, (uint64_t)qword_102304290, (uint64_t)qword_1023042A8);
  *(int32x2_t *)(a1 + 124) = vdup_n_s32(0x186A0u);
  sub_100773D2C((uint64_t)a1, a2, 5, (uint64_t)qword_102304188, (uint64_t)qword_1023041A0, (uint64_t)qword_1023041B8);
  *((_QWORD *)a1 + 17) = -4294917296;
  sub_100773D2C((uint64_t)a1, a2, 6, (uint64_t)qword_1023041E8, (uint64_t)qword_102304200, (uint64_t)qword_102304218);
  if (byte_102304247 < 0)
  {
    sub_100115CE4(v100, (void *)xmmword_102304230, *((unint64_t *)&xmmword_102304230 + 1));
  }
  else
  {
    *(_OWORD *)v100 = xmmword_102304230;
    v101 = unk_102304240;
  }
  *((_DWORD *)a1 + 37) = sub_100775A94(a2, (const char *)v100, 70, 1, 500);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[0]);
  if (byte_10230425F < 0)
  {
    sub_100115CE4(v98, (void *)xmmword_102304248, *((unint64_t *)&xmmword_102304248 + 1));
  }
  else
  {
    *(_OWORD *)v98 = xmmword_102304248;
    v99 = unk_102304258;
  }
  *((_DWORD *)a1 + 38) = sub_100775A94(a2, (const char *)v98, 86400, 43200, 17280000);
  if (SHIBYTE(v99) < 0)
    operator delete(v98[0]);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102152300);
  v10 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
  {
    v11 = *((_DWORD *)a1 + 5);
    v12 = *((_DWORD *)a1 + 6);
    v14 = *((_DWORD *)a1 + 7);
    v13 = *((_DWORD *)a1 + 8);
    v16 = *((_DWORD *)a1 + 9);
    v15 = *((_DWORD *)a1 + 10);
    v17 = a1[1];
    v18 = a1[3];
    v20 = *((_DWORD *)a1 + 3);
    v19 = *((_DWORD *)a1 + 4);
    v21 = a1[4];
    v22 = *((_DWORD *)a1 + 13);
    v23 = *((_DWORD *)a1 + 14);
    *(_DWORD *)v231 = *a1;
    v24 = a1[8];
    *(_DWORD *)&v231[6] = v19;
    v25 = *((_DWORD *)a1 + 38);
    *(_DWORD *)&v232[2] = v11;
    v26 = *((_DWORD *)a1 + 40);
    v234 = v12;
    v236 = v14;
    v28 = *((_DWORD *)a1 + 15);
    v27 = *((_DWORD *)a1 + 16);
    v238 = v13;
    v242 = v15;
    v30 = *((_DWORD *)a1 + 17);
    v29 = *((_DWORD *)a1 + 18);
    v246 = v17;
    v250 = v18;
    v32 = *((_DWORD *)a1 + 19);
    v31 = *((_DWORD *)a1 + 20);
    v254 = v21;
    v258 = v22;
    v33 = *((_DWORD *)a1 + 21);
    v34 = *((_DWORD *)a1 + 22);
    v262 = v28;
    v266 = v24;
    v36 = *((_DWORD *)a1 + 23);
    v35 = *((_DWORD *)a1 + 24);
    v270 = v25;
    v274 = v26;
    v37 = *((_DWORD *)a1 + 25);
    v38 = *((_DWORD *)a1 + 26);
    v278 = v30;
    v282 = v32;
    v39 = *((_DWORD *)a1 + 27);
    v40 = *((_DWORD *)a1 + 28);
    v286 = v33;
    v290 = v36;
    v42 = *((_DWORD *)a1 + 29);
    v41 = *((_DWORD *)a1 + 30);
    v294 = v37;
    v298 = v39;
    v44 = *((_DWORD *)a1 + 31);
    v43 = *((_DWORD *)a1 + 32);
    v302 = v42;
    v306 = v44;
    v45 = *((_DWORD *)a1 + 34);
    v310 = *((_DWORD *)a1 + 33);
    v47 = *((_DWORD *)a1 + 35);
    v46 = *((_DWORD *)a1 + 36);
    v240 = v16;
    v314 = v47;
    v48 = *((_DWORD *)a1 + 12);
    v244 = *((_DWORD *)a1 + 11);
    v248 = a1[2];
    v252 = v20;
    v256 = v48;
    v260 = v23;
    v264 = a1[6];
    v268 = *((_DWORD *)a1 + 37);
    v272 = *((_DWORD *)a1 + 39);
    v276 = v27;
    v280 = v29;
    v284 = v31;
    v288 = v34;
    v292 = v35;
    v296 = v38;
    v300 = v40;
    v304 = v41;
    v308 = v43;
    v312 = v45;
    *(_WORD *)&v231[4] = 1026;
    *(_WORD *)v232 = 1026;
    v233 = 1026;
    v235 = 1026;
    v237 = 1026;
    v239 = 1026;
    v241 = 1026;
    v243 = 1026;
    v245 = 1026;
    v247 = 1026;
    v249 = 1026;
    v251 = 1026;
    v253 = 1026;
    v255 = 1026;
    v257 = 1026;
    v259 = 1026;
    v261 = 1026;
    v263 = 1026;
    v265 = 1026;
    v267 = 1026;
    v269 = 1026;
    v271 = 1026;
    v273 = 1026;
    v275 = 1026;
    v277 = 1026;
    v279 = 1026;
    v281 = 1026;
    v283 = 1026;
    v285 = 1026;
    v287 = 1026;
    v289 = 1026;
    v291 = 1026;
    v293 = 1026;
    v295 = 1026;
    v297 = 1026;
    v299 = 1026;
    v301 = 1026;
    v303 = 1026;
    v305 = 1026;
    v307 = 1026;
    v309 = 1026;
    v311 = 1026;
    v313 = 1026;
    v315 = 1026;
    v316 = v46;
    *(_DWORD *)buf = 67251456;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,CLGMTPS,enabled,%{public}d,refreshPeriod,%{public}d,refreshPeriodNPLOITourist,%{public}d,minBattery,%{public}d,minBatteryAggressive,%{public}d,xpcInterval,%{public}d,downloadSz,%{public}d,uploadSz,%{public}d,downloadTime,%{public}d,insideOut,%{public}d,diskIntensive,%{public}d,touristMode,%{public}d,maxLocAge,%{public}d,nextPLOI,%{public}d,sections,%{public}d,sectionsTourist,%{public}d,sectionsNPLOI,%{public}d,sectionsSE,%{public}d,allowSE,%{public}d,allowAggressive,%{public}d,maxAggressiveSections,%{public}d,timeWindowForMaxAggressive,%{public}d,touristDistance,%{public}d,workoutLookbackDays,%{public}d,home,%{public}d,%{public}d,%{public}d,work,%{public}d,%{public}d,%{public}d,school,%{public}d,%{public}d,%{public}d,nploi,%{public}d,%{public}d,%{public}d,tourist,%{public}d,%{public}d,%{public}d,sigEnv,%{public}d,%{public}d,%{public}d,touristSigEnv,%{public}d,%{public}d,%{public}d", buf, 0x110u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v50 = *((_DWORD *)a1 + 5);
    v51 = *((_DWORD *)a1 + 6);
    v53 = *((_DWORD *)a1 + 7);
    v52 = *((_DWORD *)a1 + 8);
    v54 = *((_DWORD *)a1 + 9);
    v55 = *((_DWORD *)a1 + 10);
    v56 = a1[1];
    v57 = a1[3];
    v59 = *((_DWORD *)a1 + 3);
    v58 = *((_DWORD *)a1 + 4);
    v60 = a1[4];
    v62 = *((_DWORD *)a1 + 13);
    v61 = *((_DWORD *)a1 + 14);
    v63 = a1[8];
    *(_DWORD *)v144 = *a1;
    v64 = *((_DWORD *)a1 + 38);
    *(_DWORD *)&v144[6] = v58;
    v65 = *((_DWORD *)a1 + 40);
    *(_DWORD *)&v145[2] = v50;
    v147 = v51;
    v66 = *((_DWORD *)a1 + 15);
    v67 = *((_DWORD *)a1 + 16);
    v149 = v53;
    v151 = v52;
    v69 = *((_DWORD *)a1 + 17);
    v68 = *((_DWORD *)a1 + 18);
    v153 = v54;
    v155 = v55;
    v70 = *((_DWORD *)a1 + 19);
    v71 = *((_DWORD *)a1 + 20);
    v159 = v56;
    v163 = v57;
    v73 = *((_DWORD *)a1 + 21);
    v72 = *((_DWORD *)a1 + 22);
    v167 = v60;
    v171 = v62;
    v74 = *((_DWORD *)a1 + 23);
    v75 = *((_DWORD *)a1 + 24);
    v175 = v66;
    v179 = v63;
    v76 = *((_DWORD *)a1 + 25);
    v77 = *((_DWORD *)a1 + 26);
    v183 = v64;
    v187 = v65;
    v78 = *((_DWORD *)a1 + 27);
    v79 = *((_DWORD *)a1 + 28);
    v191 = v69;
    v195 = v70;
    v81 = *((_DWORD *)a1 + 29);
    v80 = *((_DWORD *)a1 + 30);
    v199 = v73;
    v203 = v74;
    v83 = *((_DWORD *)a1 + 31);
    v82 = *((_DWORD *)a1 + 32);
    v207 = v76;
    v211 = v78;
    v84 = *((_DWORD *)a1 + 33);
    v85 = *((_DWORD *)a1 + 34);
    v215 = v81;
    v219 = v83;
    v86 = *((_DWORD *)a1 + 35);
    v87 = *((_DWORD *)a1 + 36);
    v223 = v84;
    v227 = v86;
    v88 = *((_DWORD *)a1 + 12);
    v157 = *((_DWORD *)a1 + 11);
    v161 = a1[2];
    v165 = v59;
    v169 = v88;
    v173 = v61;
    v177 = a1[6];
    v181 = *((_DWORD *)a1 + 37);
    v185 = *((_DWORD *)a1 + 39);
    v189 = v67;
    v193 = v68;
    v197 = v71;
    v201 = v72;
    v205 = v75;
    v209 = v77;
    v213 = v79;
    v217 = v80;
    v221 = v82;
    v225 = v85;
    *(_WORD *)&v144[4] = 1026;
    *(_WORD *)v145 = 1026;
    v146 = 1026;
    v148 = 1026;
    v150 = 1026;
    v152 = 1026;
    v154 = 1026;
    v156 = 1026;
    v158 = 1026;
    v160 = 1026;
    v162 = 1026;
    v164 = 1026;
    v166 = 1026;
    v168 = 1026;
    v170 = 1026;
    v172 = 1026;
    v174 = 1026;
    v176 = 1026;
    v178 = 1026;
    v180 = 1026;
    v182 = 1026;
    v184 = 1026;
    v186 = 1026;
    v188 = 1026;
    v190 = 1026;
    v192 = 1026;
    v194 = 1026;
    v196 = 1026;
    v198 = 1026;
    v200 = 1026;
    v202 = 1026;
    v204 = 1026;
    v206 = 1026;
    v208 = 1026;
    v210 = 1026;
    v212 = 1026;
    v214 = 1026;
    v216 = 1026;
    v218 = 1026;
    v220 = 1026;
    v222 = 1026;
    v224 = 1026;
    v226 = 1026;
    v228 = 1026;
    v229 = v87;
    v143 = 67251456;
    LODWORD(v97) = 272;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,CLGMTPS,enabled,%{public}d,refreshPeriod,%{public}d,refreshPeriodNPLOITourist,%{public}d,minBattery,%{public}d,minBatteryAggressive,%{public}d,xpcInterval,%{public}d,downloadSz,%{public}d,uploadSz,%{public}d,downloadTime,%{public}d,insideOut,%{public}d,diskIntensive,%{public}d,touristMode,%{public}d,maxLocAge,%{public}d,nextPLOI,%{public}d,sections,%{public}d,sectionsTourist,%{public}d,sectionsNPLOI,%{public}d,sectionsSE,%{public}d,allowSE,%{public}d,allowAggressive,%{public}d,maxAggressiveSections,%{public}d,timeWindowForMaxAggressive,%{public}d,touristDistance,%{public}d,workoutLookbackDays,%{public}d,home,%{public}d,%{public}d,%{public}d,work,%{public}d,%{public}d,%{public}d,school,%{public}d,%{public}d,%{public}d,nploi,%{public}d,%{public}d,%{public}d,tourist,%{public}d,%{public}d,%{public}d,sigEnv,%{public}d,%{public}d,%{public}d,touristSigEnv,%{public}d,%{public}d,%{public}d", &v143, v97);
    v90 = (uint8_t *)v89;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::fillFromMobileAssetNVP(const CLNameValuePair &)", "%s\n", v89);
    if (v90 != buf)
      free(v90);
  }
  return 1;
}

void sub_1007756C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10077588C(uint64_t a1, const char *a2, char a3)
{
  uint64_t *v3;
  NSObject *v4;
  uint64_t *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  uint64_t *v15;
  __int16 v16;
  int v17;

  v3 = (uint64_t *)a2;
  HIBYTE(v9) = a3;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (sub_1001E4874(a1, a2, (BOOL *)&v9 + 7))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      v5 = v3;
      if (*((char *)v3 + 23) < 0)
        v5 = (uint64_t *)*v3;
      *(_DWORD *)buf = 136446466;
      v15 = v5;
      v16 = 1026;
      v17 = HIBYTE(v9);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      if (*((char *)v3 + 23) < 0)
        v3 = (uint64_t *)*v3;
      v10 = 136446466;
      v11 = v3;
      v12 = 1026;
      v13 = HIBYTE(v9);
      LODWORD(v9) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", &v10, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::getField(const CLNameValuePair &, const std::string, BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return HIBYTE(v9);
}

uint64_t sub_100775A94(uint64_t a1, const char *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t *v8;
  NSObject *v10;
  uint64_t *v11;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t *v21;
  __int16 v22;
  int v23;

  v7 = a3;
  v8 = (uint64_t *)a2;
  HIDWORD(v15) = a3;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (sub_1001E4B84(a1, a2, (_DWORD *)&v15 + 1))
  {
    if (SHIDWORD(v15) >= a4 && SHIDWORD(v15) <= a5)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v10 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v11 = v8;
        if (*((char *)v8 + 23) < 0)
          v11 = (uint64_t *)*v8;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = HIDWORD(v15);
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        if (*((char *)v8 + 23) < 0)
          v8 = (uint64_t *)*v8;
        v16 = 136446466;
        v17 = v8;
        v18 = 1026;
        v19 = HIDWORD(v15);
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", &v16, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "T CLMapMatcherOperatingPolicy::getField(const CLNameValuePair &, const std::string, T, T, T) [T = int]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      return HIDWORD(v15);
    }
  }
  return v7;
}

uint64_t sub_100775CBC(uint64_t a1, _QWORD *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v6;
  char v7;
  void **v8;
  __int128 *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  void *__p[2];
  uint64_t v60;

  v2 = (__int128 *)*a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) < 2)
    return 0;
  if (*((char *)v2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v6 = *v2;
    v60 = *((_QWORD *)v2 + 2);
    *(_OWORD *)__p = v6;
  }
  v7 = HIBYTE(v60);
  if (SHIBYTE(v60) < 0)
  {
    if (__p[1] == (void *)2)
      goto LABEL_17;
    v8 = (void **)__p[0];
    if (__p[1] != (void *)3)
    {
      v3 = 0;
      goto LABEL_125;
    }
LABEL_12:
    if (*(_WORD *)v8 != 20306 || *((_BYTE *)v8 + 2) != 87)
    {
      v3 = 0;
LABEL_122:
      if ((v7 & 0x80) == 0)
        return v3;
      v8 = (void **)__p[0];
LABEL_125:
      operator delete(v8);
      return v3;
    }
LABEL_17:
    v3 = 1;
    *(_BYTE *)a1 = 1;
    v11 = a2;
    v10 = (__int128 *)*a2;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[1] - (_QWORD)v10) >> 3);
    if (v12 >= 2)
    {
      v13 = *((unsigned __int8 *)v10 + 47);
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)v10 + 4);
      if (v13)
      {
        v15 = (char *)v10 + 24;
        if (v14 < 0)
          v15 = *(const char **)v15;
        *(_DWORD *)(a1 + 64) = (int)atof(v15);
      }
      if (v12 >= 3)
      {
        v16 = *((unsigned __int8 *)v10 + 71);
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *((_QWORD *)v10 + 7);
        if (v16)
        {
          v18 = (const char *)(v10 + 3);
          if (v17 < 0)
            v18 = *(const char **)v18;
          *(_DWORD *)(a1 + 68) = (int)atof(v18);
        }
        if (v12 >= 4)
        {
          v19 = *((unsigned __int8 *)v10 + 95);
          v20 = (char)v19;
          if ((v19 & 0x80u) != 0)
            v19 = *((_QWORD *)v10 + 10);
          if (v19)
          {
            v21 = (char *)v10 + 72;
            if (v20 < 0)
              v21 = *(const char **)v21;
            *(_DWORD *)(a1 + 76) = (int)atof(v21);
          }
          if (v12 >= 5)
          {
            v22 = *((unsigned __int8 *)v10 + 119);
            v23 = (char)v22;
            if ((v22 & 0x80u) != 0)
              v22 = *((_QWORD *)v10 + 13);
            if (v22)
            {
              v24 = (const char *)(v10 + 6);
              if (v23 < 0)
                v24 = *(const char **)v24;
              *(_DWORD *)(a1 + 80) = (int)atof(v24);
            }
            if (v12 >= 6)
            {
              v25 = *((unsigned __int8 *)v10 + 143);
              v26 = (char)v25;
              if ((v25 & 0x80u) != 0)
                v25 = *((_QWORD *)v10 + 16);
              if (v25)
              {
                v27 = (char *)v10 + 120;
                if (v26 < 0)
                  v27 = *(const char **)v27;
                *(_DWORD *)(a1 + 88) = (int)atof(v27);
              }
              if (v12 >= 7)
              {
                v28 = *((unsigned __int8 *)v10 + 167);
                v29 = (char)v28;
                if ((v28 & 0x80u) != 0)
                  v28 = *((_QWORD *)v10 + 19);
                if (v28)
                {
                  v30 = (const char *)(v10 + 9);
                  if (v29 < 0)
                    v30 = *(const char **)v30;
                  *(_DWORD *)(a1 + 92) = (int)atof(v30);
                }
                if (v12 >= 8)
                {
                  v31 = *((unsigned __int8 *)v10 + 191);
                  v32 = (char)v31;
                  if ((v31 & 0x80u) != 0)
                    v31 = *((_QWORD *)v10 + 22);
                  if (v31)
                  {
                    v33 = (char *)v10 + 168;
                    if (v32 < 0)
                      v33 = *(const char **)v33;
                    *(_DWORD *)(a1 + 100) = (int)atof(v33);
                  }
                  if (v12 >= 9)
                  {
                    v34 = *((unsigned __int8 *)v10 + 215);
                    v35 = (char)v34;
                    if ((v34 & 0x80u) != 0)
                      v34 = *((_QWORD *)v10 + 25);
                    if (v34)
                    {
                      v36 = (const char *)(v10 + 12);
                      if (v35 < 0)
                        v36 = *(const char **)v36;
                      *(_DWORD *)(a1 + 104) = (int)atof(v36);
                    }
                    if (v12 >= 0xA)
                    {
                      v37 = *((unsigned __int8 *)v10 + 239);
                      v38 = (char)v37;
                      if ((v37 & 0x80u) != 0)
                        v37 = *((_QWORD *)v10 + 28);
                      if (v37)
                      {
                        v39 = (char *)v10 + 216;
                        if (v38 < 0)
                          v39 = *(const char **)v39;
                        *(_DWORD *)(a1 + 112) = (int)atof(v39);
                      }
                      if (v12 >= 0xB)
                      {
                        v40 = *((unsigned __int8 *)v10 + 263);
                        v41 = (char)v40;
                        if ((v40 & 0x80u) != 0)
                          v40 = *((_QWORD *)v10 + 31);
                        if (v40)
                        {
                          v42 = (const char *)(v10 + 15);
                          if (v41 < 0)
                            v42 = *(const char **)v42;
                          *(_DWORD *)(a1 + 116) = (int)atof(v42);
                        }
                        if (v12 >= 0xC)
                        {
                          v43 = *((unsigned __int8 *)v10 + 287);
                          v44 = (char)v43;
                          if ((v43 & 0x80u) != 0)
                            v43 = *((_QWORD *)v10 + 34);
                          if (v43)
                          {
                            v45 = (char *)v10 + 264;
                            if (v44 < 0)
                              v45 = *(const char **)v45;
                            *(_DWORD *)(a1 + 72) = (int)atof(v45);
                          }
                          if (v12 >= 0xD)
                          {
                            v46 = *((unsigned __int8 *)v10 + 311);
                            v47 = (char)v46;
                            if ((v46 & 0x80u) != 0)
                              v46 = *((_QWORD *)v10 + 37);
                            if (v46)
                            {
                              v48 = (const char *)(v10 + 18);
                              if (v47 < 0)
                                v48 = *(const char **)v48;
                              *(_DWORD *)(a1 + 84) = (int)atof(v48);
                            }
                            if (v12 >= 0xE)
                            {
                              v49 = *((unsigned __int8 *)v10 + 335);
                              v50 = (char)v49;
                              if ((v49 & 0x80u) != 0)
                                v49 = *((_QWORD *)v10 + 40);
                              if (v49)
                              {
                                v51 = (char *)v10 + 312;
                                if (v50 < 0)
                                  v51 = *(const char **)v51;
                                *(_DWORD *)(a1 + 96) = (int)atof(v51);
                              }
                              if (v12 >= 0xF)
                              {
                                v52 = *((unsigned __int8 *)v10 + 359);
                                v53 = (char)v52;
                                if ((v52 & 0x80u) != 0)
                                  v52 = *((_QWORD *)v10 + 43);
                                if (v52)
                                {
                                  v54 = (const char *)(v10 + 21);
                                  if (v53 < 0)
                                    v54 = *(const char **)v54;
                                  *(_DWORD *)(a1 + 108) = (int)atof(v54);
                                }
                                if (v12 >= 0x10)
                                {
                                  v55 = *((unsigned __int8 *)v10 + 383);
                                  v56 = (char)v55;
                                  if ((v55 & 0x80u) != 0)
                                    v55 = *((_QWORD *)v10 + 46);
                                  if (v55)
                                  {
                                    v57 = (char *)v10 + 360;
                                    if (v56 < 0)
                                      v57 = *(const char **)v57;
                                    *(_DWORD *)(a1 + 120) = (int)atof(v57);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_122;
  }
  if (HIBYTE(v60) == 2)
    goto LABEL_17;
  if (HIBYTE(v60) == 3)
  {
    v8 = __p;
    goto LABEL_12;
  }
  return 0;
}

void sub_100776124(uint64_t **a1, std::string *a2, __int128 *a3)
{
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t i;
  std::string::pointer data;
  std::string v25[17];
  _BYTE v26[64];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[20];
  std::string *v33;

  if (sub_1001876D0((uint64_t)a1, (const void **)&a2->__r_.__value_.__l.__data_))
  {
    v25[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v6 = sub_10018774C(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (__int128 **)v25);
    v7 = *a3;
    v8 = a3[2];
    *((_OWORD *)v6 + 30) = a3[1];
    *((_OWORD *)v6 + 31) = v8;
    *((_OWORD *)v6 + 29) = v7;
    v9 = a3[3];
    v10 = a3[4];
    v11 = a3[6];
    *((_OWORD *)v6 + 34) = a3[5];
    *((_OWORD *)v6 + 35) = v11;
    *((_OWORD *)v6 + 32) = v9;
    *((_OWORD *)v6 + 33) = v10;
    v12 = a3[7];
    v13 = a3[8];
    v14 = a3[9];
    *((_DWORD *)v6 + 156) = *((_DWORD *)a3 + 40);
    *((_OWORD *)v6 + 37) = v13;
    *((_OWORD *)v6 + 38) = v14;
    *((_OWORD *)v6 + 36) = v12;
  }
  else
  {
    memset(v25, 0, 24);
    v15 = 1;
    do
    {
      v16 = &v25[v15];
      v16->__r_.__value_.__s.__data_[0] = 0;
      v16->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      v16->__r_.__value_.__s.__data_[16] = 0;
      *(_OWORD *)&v16[1].__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v16[1].__r_.__value_.__r.__words[2] = 0uLL;
      *(_OWORD *)&v16[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v16[3].__r_.__value_.__l.__data_ = 0uLL;
      v15 += 4;
      v16[3].__r_.__value_.__r.__words[2] = 0;
    }
    while (&v16[4] != (std::string *)v26);
    *(_DWORD *)v26 = 16777472;
    v26[4] = 1;
    *(_DWORD *)&v26[5] = 0;
    *(_OWORD *)&v26[28] = xmmword_101BC0BA0;
    *(_OWORD *)&v26[44] = xmmword_101BC0BB0;
    *(_DWORD *)&v26[60] = 400;
    *(_QWORD *)&v17 = -1;
    *((_QWORD *)&v17 + 1) = -1;
    v27 = v17;
    v28 = v17;
    v29 = v17;
    v30 = v17;
    v31 = v17;
    *(_DWORD *)v32 = -1;
    *(_OWORD *)&v32[4] = xmmword_101BC0BC0;
    *(_OWORD *)&v26[12] = xmmword_101BC0BD0;
    if (sub_1000C4240())
      *(_DWORD *)&v26[16] = 4233600;
    DWORD2(v27) = 125000;
    DWORD1(v28) = 125000;
    LODWORD(v29) = 125000;
    HIDWORD(v29) = 15000;
    DWORD2(v30) = 25000;
    DWORD1(v31) = -1;
    *(_DWORD *)v32 = -1;
    std::string::operator=(v25, a2);
    v18 = a3[9];
    v31 = a3[8];
    *(_OWORD *)v32 = v18;
    *(_DWORD *)&v32[16] = *((_DWORD *)a3 + 40);
    v19 = a3[5];
    v27 = a3[4];
    v28 = v19;
    v20 = a3[7];
    v29 = a3[6];
    v30 = v20;
    v21 = a3[1];
    *(_OWORD *)v26 = *a3;
    *(_OWORD *)&v26[16] = v21;
    v22 = a3[3];
    *(_OWORD *)&v26[32] = a3[2];
    *(_OWORD *)&v26[48] = v22;
    sub_1007763D8(a1, (uint64_t)v25);
    for (i = 0; i != -384; i -= 96)
    {
      v33 = &v25[i / 0x18 + 16];
      sub_10077AE18((void ***)&v33);
      v33 = &v25[i / 0x18 + 15];
      sub_10077AE18((void ***)&v33);
      data = v25[i / 0x18 + 14].__r_.__value_.__l.__data_;
      if (data)
      {
        v25[i / 0x18 + 14].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(data);
      }
    }
    if (SHIBYTE(v25[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25[0].__r_.__value_.__l.__data_);
  }
}

void sub_100776368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v18 = 0;
  while (1)
  {
    *(_QWORD *)(v16 - 56) = v15 + v18 + 384;
    sub_10077AE18((void ***)(v16 - 56));
    *(_QWORD *)(v16 - 56) = v15 + v18 + 360;
    sub_10077AE18((void ***)(v16 - 56));
    v19 = *(void **)(v15 + v18 + 336);
    if (v19)
    {
      *(_QWORD *)(v15 + v18 + 344) = v19;
      operator delete(v19);
    }
    v18 -= 96;
    if (v18 == -384)
    {
      if (a15 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1007763D8(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t i;
  void *v19;
  void *v20[2];
  char v21;
  void *__p;
  char v23;
  _BYTE v24[240];
  void **v25;

  if (sub_1001876D0((uint64_t)a1, (const void **)a2))
  {
    v20[0] = (void *)a2;
    v4 = sub_10018774C(a1, (const void **)a2, (uint64_t)&unk_101B9EB60, (__int128 **)v20);
    std::string::operator=((std::string *)(v4 + 7), (const std::string *)a2);
    v5 = 0;
    v6 = a2 + 56;
    do
    {
      v7 = &v4[v5];
      v8 = v6 + v5 * 8;
      v9 = *(_OWORD *)(v6 + v5 * 8 - 32);
      *((_BYTE *)v7 + 96) = *(_BYTE *)(v6 + v5 * 8 - 16);
      *((_OWORD *)v7 + 5) = v9;
      if (v4 + 7 != (uint64_t *)a2)
      {
        sub_1002A3054((char *)v7 + 104, *(char **)(v8 - 8), *(_QWORD *)v8, (uint64_t)(*(_QWORD *)v8 - *(_QWORD *)(v8 - 8)) >> 2);
        sub_10077BCF8((uint64_t)(v7 + 16), *(uint64_t **)(v8 + 16), *(uint64_t **)(v8 + 24), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 3));
        sub_10077BCF8((uint64_t)(v7 + 19), *(uint64_t **)(v8 + 40), *(uint64_t **)(v8 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40)) >> 3));
      }
      v5 += 12;
    }
    while (v5 != 48);
    v10 = *(_OWORD *)(a2 + 408);
    v11 = *(_OWORD *)(a2 + 440);
    *((_OWORD *)v4 + 30) = *(_OWORD *)(a2 + 424);
    *((_OWORD *)v4 + 31) = v11;
    *((_OWORD *)v4 + 29) = v10;
    v12 = *(_OWORD *)(a2 + 456);
    v13 = *(_OWORD *)(a2 + 472);
    v14 = *(_OWORD *)(a2 + 504);
    *((_OWORD *)v4 + 34) = *(_OWORD *)(a2 + 488);
    *((_OWORD *)v4 + 35) = v14;
    *((_OWORD *)v4 + 32) = v12;
    *((_OWORD *)v4 + 33) = v13;
    v15 = *(_OWORD *)(a2 + 520);
    v16 = *(_OWORD *)(a2 + 536);
    v17 = *(_OWORD *)(a2 + 552);
    *((_DWORD *)v4 + 156) = *(_DWORD *)(a2 + 568);
    *((_OWORD *)v4 + 37) = v16;
    *((_OWORD *)v4 + 38) = v17;
    *((_OWORD *)v4 + 36) = v15;
  }
  else
  {
    sub_10077AEF0(v20, (__int128 *)a2, (__int128 *)a2);
    sub_10077BB58(a1, (const void **)v20, (__int128 *)v20);
    for (i = 0; i != -384; i -= 96)
    {
      v25 = (void **)&v24[i + 48];
      sub_10077AE18(&v25);
      v25 = (void **)&v24[i + 24];
      sub_10077AE18(&v25);
      v19 = *(void **)&v24[i];
      if (v19)
      {
        *(_QWORD *)&v24[i + 8] = v19;
        operator delete(v19);
      }
    }
    if (v23 < 0)
      operator delete(__p);
    if (v21 < 0)
      operator delete(v20[0]);
  }
}

void sub_1007765AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1007733A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1007765C0(uint64_t **a1, const void **a2, int a3, int a4, int8x16_t *a5)
{
  __int128 *v8;
  uint64_t result;
  uint64_t *v11;
  __int128 *v12;

  v8 = (__int128 *)a2;
  if (sub_1001876D0((uint64_t)a1, a2)
    || (v8 = (__int128 *)qword_1023043C8, (result = sub_1001876D0((uint64_t)a1, (const void **)qword_1023043C8)) != 0))
  {
    v12 = v8;
    v11 = sub_10018774C(a1, (const void **)v8, (uint64_t)&unk_101B9EB60, &v12);
    return sub_10076FEEC((uint64_t)&v11[12 * a3 + 10], a4, a5);
  }
  return result;
}

uint64_t sub_10077665C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  NSObject *v16;
  double v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  double v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint64_t v33;
  double v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__dst[2];
  uint64_t v42;
  __int128 __p;
  uint64_t v44;
  BOOL v45;
  BOOL v46;
  uint64_t v47;
  _QWORD v48[2];
  CFTypeRef v49;
  int v50;
  double v51;
  uint8_t buf[4];
  double v53;

  v4 = (_QWORD *)(a1 + 8);
  sub_10077B518(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *v4 = 0;
  v49 = 0;
  if (sub_100527258(a2, CFSTR("CountryConfiguration"), &v49))
    sub_100777358((uint64_t **)a1, (CFArrayRef *)&v49);
  sub_100119F3C(v48);
  if (sub_100006BB4(a2, "GeneralSettings", v48))
  {
    v47 = *(_QWORD *)(a1 + 56);
    if (sub_1001FD98C((uint64_t)v48, "TrackRunProximityThreshold", &v47))
    {
      *(_QWORD *)(a1 + 56) = v47;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v5 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v6 = *(double *)(a1 + 56);
        *(_DWORD *)buf = 134349056;
        v53 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read trackRunProximityThreshold,%{public}.1lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v23 = *(double *)(a1 + 56);
        v50 = 134349056;
        v51 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,GeneralSettings,read trackRunProximityThreshold,%{public}.1lf", &v50, 12);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
    }
    v46 = *(_BYTE *)(a1 + 32);
    if (sub_1001E4874((uint64_t)v48, "UseMapDataBufferForMM", &v46))
    {
      *(_BYTE *)(a1 + 32) = v46;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v7 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v8 = *(unsigned __int8 *)(a1 + 32);
        *(_DWORD *)buf = 67240192;
        LODWORD(v53) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read useMapDataBuffer,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v26 = *(unsigned __int8 *)(a1 + 32);
        v50 = 67240192;
        LODWORD(v51) = v26;
        LODWORD(v33) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,GeneralSettings,read useMapDataBuffer,%{public}d", &v50, v33);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    v45 = *(_BYTE *)(a1 + 33);
    if (sub_1001E4874((uint64_t)v48, "UseXPCServiceForMapDataQueriesInMM", &v45))
    {
      *(_BYTE *)(a1 + 33) = v45;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
      {
        v10 = *(unsigned __int8 *)(a1 + 33);
        *(_DWORD *)buf = 67240192;
        LODWORD(v53) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read useXPCServiceForMapQueries,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v29 = *(unsigned __int8 *)(a1 + 33);
        v50 = 67240192;
        LODWORD(v51) = v29;
        LODWORD(v33) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,GeneralSettings,read useXPCServiceForMapQueries,%{public}d", &v50, v33);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
    v11 = atomic_load((unsigned __int8 *)&qword_102304478);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_102304478))
    {
      sub_1015A2E04(&xmmword_102304460, "MapsRoadDataBufferRadiusVehicle");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304460, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102304478);
    }
    if (byte_102304477 < 0)
    {
      sub_100115CE4(&__p, (void *)xmmword_102304460, *((unint64_t *)&xmmword_102304460 + 1));
    }
    else
    {
      __p = xmmword_102304460;
      v44 = unk_102304470;
    }
    *(_DWORD *)(a1 + 36) = sub_100775A94((uint64_t)v48, (const char *)&__p, *(unsigned int *)(a1 + 36), 50, 2500);
    if (SHIBYTE(v44) < 0)
      operator delete((void *)__p);
    v12 = atomic_load((unsigned __int8 *)&qword_102304498);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_102304498))
    {
      sub_1015A2E04(&xmmword_102304480, "MapsRoadDataBufferRadiusPedestrian");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304480, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102304498);
    }
    if (byte_102304497 < 0)
    {
      sub_100115CE4(__dst, (void *)xmmword_102304480, *((unint64_t *)&xmmword_102304480 + 1));
    }
    else
    {
      *(_OWORD *)__dst = xmmword_102304480;
      v42 = unk_102304490;
    }
    *(_DWORD *)(a1 + 40) = sub_100775A94((uint64_t)v48, (const char *)__dst, *(unsigned int *)(a1 + 40), 50, 2500);
    if (SHIBYTE(v42) < 0)
      operator delete(__dst[0]);
    v13 = atomic_load((unsigned __int8 *)&qword_1023044B8);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1023044B8))
    {
      sub_1015A2E04(&xmmword_1023044A0, "MapsRoadDataBufferRadiusBicycle");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023044A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1023044B8);
    }
    if (byte_1023044B7 < 0)
    {
      sub_100115CE4(v39, (void *)xmmword_1023044A0, *((unint64_t *)&xmmword_1023044A0 + 1));
    }
    else
    {
      *(_OWORD *)v39 = xmmword_1023044A0;
      v40 = unk_1023044B0;
    }
    *(_DWORD *)(a1 + 44) = sub_100775A94((uint64_t)v48, (const char *)v39, *(unsigned int *)(a1 + 44), 50, 2500);
    if (SHIBYTE(v40) < 0)
      operator delete(v39[0]);
    v14 = atomic_load((unsigned __int8 *)&qword_1023044D8);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1023044D8))
    {
      sub_1015A2E04(&xmmword_1023044C0, "MapsBuildingDataBufferRadiusPedestrian");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023044C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1023044D8);
    }
    if (byte_1023044D7 < 0)
    {
      sub_100115CE4(v37, (void *)xmmword_1023044C0, *((unint64_t *)&xmmword_1023044C0 + 1));
    }
    else
    {
      *(_OWORD *)v37 = xmmword_1023044C0;
      v38 = unk_1023044D0;
    }
    *(_DWORD *)(a1 + 48) = sub_100775A94((uint64_t)v48, (const char *)v37, *(unsigned int *)(a1 + 48), 5, 1000);
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    v15 = atomic_load((unsigned __int8 *)&qword_1023044F8);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1023044F8))
    {
      sub_1015A2E04(&xmmword_1023044E0, "MapsBuildingDataBufferRadiusBicycle");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023044E0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1023044F8);
    }
    if (byte_1023044F7 < 0)
    {
      sub_100115CE4(v35, (void *)xmmword_1023044E0, *((unint64_t *)&xmmword_1023044E0 + 1));
    }
    else
    {
      *(_OWORD *)v35 = xmmword_1023044E0;
      v36 = unk_1023044F0;
    }
    *(_DWORD *)(a1 + 52) = sub_100775A94((uint64_t)v48, (const char *)v35, *(unsigned int *)(a1 + 52), 5, 1000);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    v34 = *(double *)(a1 + 24);
    if (sub_1001FD98C((uint64_t)v48, "RoadWidthBufferForFitnessUseCase", &v34))
    {
      if (v34 < 0.0 || v34 > 50.0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v21 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          v53 = v34;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read invalid roadWidthBufferForFitnessUseCase,%{public}.1lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v50 = 134349056;
          v51 = v34;
          LODWORD(v33) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,GeneralSettings,read invalid roadWidthBufferForFitnessUseCase,%{public}.1lf", &v50, v33);
          v20 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v32);
          goto LABEL_84;
        }
      }
      else
      {
        *(double *)(a1 + 24) = v34;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102152300);
        v16 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          v17 = *(double *)(a1 + 24);
          *(_DWORD *)buf = 134349056;
          v53 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read roadWidthBufferForFitnessUseCase,%{public}.1lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v18 = *(double *)(a1 + 24);
          v50 = 134349056;
          v51 = v18;
          LODWORD(v33) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,GeneralSettings,read roadWidthBufferForFitnessUseCase,%{public}.1lf", &v50, v33);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v19);
LABEL_84:
          if (v20 != buf)
            free(v20);
        }
      }
    }
  }
  return sub_10011A5A8(v48);
}

void sub_100777250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  __cxa_guard_abort(&qword_1023044F8);
  sub_10011A5A8(&a49);
  _Unwind_Resume(a1);
}

void sub_100777358(uint64_t **a1, CFArrayRef *a2)
{
  int Count;
  NSObject *v3;
  CFIndex v4;
  const __CFDictionary *ValueAtIndex;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  NSObject *v9;
  std::string *v10;
  NSObject *v11;
  std::string *v12;
  NSObject *v13;
  std::string *v14;
  NSObject *v15;
  std::string *v16;
  NSObject *v17;
  std::string *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  uint64_t i;
  void *v23;
  std::string *v24;
  const char *v25;
  char *v26;
  std::string *v27;
  const char *v28;
  char *v29;
  std::string *v30;
  const char *v31;
  char *v32;
  std::string *v33;
  const char *v34;
  char *v35;
  std::string *v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t *v46;
  _BYTE v49[16];
  int v50;
  std::string *v51;
  int v52;
  std::string *v53;
  int v54;
  std::string *v55;
  int v56;
  std::string *v57;
  std::string __p[9];
  uint64_t v59;
  _BYTE v60[96];
  int v61;
  char v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  __int128 v74;
  _BYTE buf[1632];

  if (*a2)
  {
    Count = CFArrayGetCount(*a2);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,CountryConfiguration,numberOfCountries,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = Count;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,CountryConfiguration,numberOfCountries,%{public}d", __p, 8);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    if (Count >= 1)
    {
      v4 = 0;
      v45 = v60;
      v46 = &v59;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*a2, v4);
        sub_1001C1D6C((int)v49, ValueAtIndex);
        memset(__p, 0, 24);
        v6 = 1;
        do
        {
          v7 = &__p[v6];
          v7->__r_.__value_.__s.__data_[0] = 0;
          v7->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
          v7->__r_.__value_.__s.__data_[16] = 0;
          *(_OWORD *)&v7[1].__r_.__value_.__l.__data_ = 0uLL;
          *(_OWORD *)&v7[1].__r_.__value_.__r.__words[2] = 0uLL;
          *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = 0uLL;
          v6 += 4;
          v7[3].__r_.__value_.__r.__words[2] = 0;
        }
        while (&v7[4] != (std::string *)&v61);
        v61 = 16777472;
        v62 = 1;
        v63 = 0;
        v65 = xmmword_101BC0BA0;
        v66 = xmmword_101BC0BB0;
        v67 = 400;
        *(_QWORD *)&v8 = -1;
        *((_QWORD *)&v8 + 1) = -1;
        v68 = v8;
        v69 = v8;
        v70 = v8;
        v71 = v8;
        v72 = v8;
        v73 = -1;
        v74 = xmmword_101BC0BC0;
        v64 = xmmword_101BC0BD0;
        if (sub_1000C4240())
          DWORD1(v64) = 4233600;
        DWORD2(v68) = 125000;
        DWORD1(v69) = 125000;
        LODWORD(v70) = 125000;
        HIDWORD(v70) = 15000;
        DWORD2(v71) = 25000;
        DWORD1(v72) = -1;
        v73 = -1;
        if (sub_1000BCB64((uint64_t)v49, "CountryCode", __p))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v9 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v10 = __p;
            else
              v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,**ReadCountryCode**,%s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = __p;
            else
              v24 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            v56 = 136315138;
            v57 = v24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,**ReadCountryCode**,%s", (const char *)&v56);
            v26 = (char *)v25;
            sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }
          sub_100119F3C(&v56);
          if (sub_100006BB4((uint64_t)v49, "EnableActivityBasedPedestrianMapMatching", &v56))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            v11 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v12 = __p;
              else
                v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Reading PedestrianMM settings for,%{public}s", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102152300);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v30 = __p;
              else
                v30 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              v54 = 136446210;
              v55 = v30;
              LODWORD(v44) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Reading PedestrianMM settings for,%{public}s", &v54, v44);
              v32 = (char *)v31;
              sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v31);
              if (v32 != buf)
                free(v32);
            }
            sub_10076EB88((uint64_t)v46, (uint64_t)&v56);
          }
          sub_100119F3C(&v54);
          if (sub_100006BB4((uint64_t)v49, "EnableActivityBasedCyclingMapMatching", &v54))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            v13 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v14 = __p;
              else
                v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Reading CyclingMM settings for,%{public}s", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102152300);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v33 = __p;
              else
                v33 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              v52 = 136446210;
              v53 = v33;
              LODWORD(v44) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Reading CyclingMM settings for,%{public}s", &v52, v44);
              v35 = (char *)v34;
              sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v34);
              if (v35 != buf)
                free(v35);
            }
            sub_10076EB88((uint64_t)v45, (uint64_t)&v54);
          }
          sub_100119F3C(&v52);
          if (sub_100006BB4((uint64_t)v49, "GeoTilesPrecaching", &v52))
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            v15 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
            {
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v16 = __p;
              else
                v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Reading GeoTilesPrecaching settings for,%{public}s", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102152300);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v36 = __p;
              else
                v36 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              v50 = 136446210;
              v51 = v36;
              LODWORD(v44) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Reading GeoTilesPrecaching settings for,%{public}s", &v50, v44);
              v38 = (char *)v37;
              sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v37);
              if (v38 != buf)
                free(v38);
            }
            sub_1007743C0((unsigned __int8 *)&v61, (uint64_t)&v52);
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v17 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = __p;
            else
              v18 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Read all settings for,%{public}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = __p;
            else
              v27 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            v50 = 136446210;
            v51 = v27;
            LODWORD(v44) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Read all settings for,%{public}s", &v50, v44);
            v29 = (char *)v28;
            sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          sub_1007763D8(a1, (uint64_t)__p);
          sub_10011A5A8(&v52);
          sub_10011A5A8(&v54);
          sub_10011A5A8(&v56);
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102152300);
          v19 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get country code", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102152300);
            LOWORD(v56) = 0;
            LODWORD(v44) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,MA-OTA,Unable to get country code", &v56, v44, v45, v46);
            v21 = (char *)v20;
            sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v20);
            if (v21 != buf)
              free(v21);
          }
        }
        for (i = 0; i != -384; i -= 96)
        {
          *(_QWORD *)buf = &v60[i + 72];
          sub_10077AE18((void ***)buf);
          *(_QWORD *)buf = &v60[i + 48];
          sub_10077AE18((void ***)buf);
          v23 = *(void **)&v60[i + 24];
          if (v23)
          {
            *(_QWORD *)&v60[i + 32] = v23;
            operator delete(v23);
          }
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        sub_10011A5A8(v49);
        ++v4;
      }
      while (v4 != Count);
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152300);
    v39 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,NULL countryConfigArray", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152300);
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,MA-OTA,NULL countryConfigArray", __p, 2);
      v43 = (char *)v42;
      sub_100512490("Generic", 1, 0, 0, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
  }
}

void sub_1007783CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,void *__p)
{
  sub_10011A5A8(&a37);
  sub_10011A5A8(&a39);
  sub_100773434((uint64_t)&__p);
  sub_10011A5A8(&a31);
  _Unwind_Resume(a1);
}

void sub_1007784AC(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1007784D8(double **a1, double *a2)
{
  double *v4;
  double *v5;
  double v6;
  double *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  __int128 v26;
  BOOL v27;

  sub_100778868(a1);
  v4 = *a1;
  v5 = a1[1];
  if ((unint64_t)((char *)v5 - (char *)*a1) >= 0x40)
  {
    v6 = *a2;
    v7 = v4 + 2;
    if (v4 + 2 == v5)
    {
      v9 = 0.0;
    }
    else
    {
      v8 = 0;
      v9 = 0.0;
      do
      {
        v10 = *(v7 - 2);
        v11 = *v7;
        if (v10 != *v7)
        {
          if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_9;
          }
          v13 = vabdd_f64(v10, v11);
          v14 = fabs(v10);
          v15 = fabs(v11);
          if (v14 < v15)
            v14 = v15;
          v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
          if (v13 > v16)
          {
LABEL_9:
            v9 = v9 + sub_100778CD4(v7 - 2, v7);
            v8 += sub_100778F24(v7 - 2, v7);
          }
        }
        v7 += 2;
      }
      while (v7 != v5);
      if ((v8 & 1) != 0)
      {
        v17 = (double)((v8 >> 1) + 1);
        v18 = fabs(v9);
        v19 = -v18;
        v20 = -(v18 - v17 * 6.28318531);
        v21 = -(v19 + v17 * 6.28318531);
        if (v9 <= 0.0)
          v9 = v20;
        else
          v9 = v21;
      }
    }
    if (v6 * v6 * v9 < 0.0)
    {
      v23 = *a1;
      v22 = a1[1];
      if (*a1 != v22)
      {
        v24 = v22 - 2;
        if (v24 > v23)
        {
          v25 = v23 + 2;
          do
          {
            v26 = *((_OWORD *)v25 - 1);
            *((_OWORD *)v25 - 1) = *(_OWORD *)v24;
            *(_OWORD *)v24 = v26;
            v24 -= 2;
            v27 = v25 >= v24;
            v25 += 2;
          }
          while (!v27);
        }
      }
    }
  }
}

void sub_1007786A0(double **a1, double *a2)
{
  double *v4;
  double *v5;
  double v6;
  double *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  __int128 v26;
  BOOL v27;

  sub_100778868(a1);
  v4 = *a1;
  v5 = a1[1];
  if ((unint64_t)((char *)v5 - (char *)*a1) >= 0x40)
  {
    v6 = *a2;
    v7 = v4 + 2;
    if (v4 + 2 == v5)
    {
      v9 = 0.0;
    }
    else
    {
      v8 = 0;
      v9 = 0.0;
      do
      {
        v10 = *(v7 - 2);
        v11 = *v7;
        if (v10 != *v7)
        {
          if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_9;
          }
          v13 = vabdd_f64(v10, v11);
          v14 = fabs(v10);
          v15 = fabs(v11);
          if (v14 < v15)
            v14 = v15;
          v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
          if (v13 > v16)
          {
LABEL_9:
            v9 = v9 + sub_100778CD4(v7 - 2, v7);
            v8 += sub_100778F24(v7 - 2, v7);
          }
        }
        v7 += 2;
      }
      while (v7 != v5);
      if ((v8 & 1) != 0)
      {
        v17 = (double)((v8 >> 1) + 1);
        v18 = fabs(v9);
        v19 = -v18;
        v20 = -(v18 - v17 * 6.28318531);
        v21 = -(v19 + v17 * 6.28318531);
        if (v9 <= 0.0)
          v9 = v20;
        else
          v9 = v21;
      }
    }
    if (v6 * v6 * v9 > 0.0)
    {
      v23 = *a1;
      v22 = a1[1];
      if (*a1 != v22)
      {
        v24 = v22 - 2;
        if (v24 > v23)
        {
          v25 = v23 + 2;
          do
          {
            v26 = *((_OWORD *)v25 - 1);
            *((_OWORD *)v25 - 1) = *(_OWORD *)v24;
            *(_OWORD *)v24 = v26;
            v24 -= 2;
            v27 = v25 >= v24;
            v25 += 2;
          }
          while (!v27);
        }
      }
    }
  }
}

void sub_100778868(double **a1)
{
  double *v1;
  double *v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  double *v28;
  double *v29;
  double v30;
  double v31;

  v1 = *a1;
  v2 = a1[1];
  if ((unint64_t)((char *)v2 - (char *)*a1) >= 0x30)
  {
    v4 = *v1;
    v30 = v1[1];
    v31 = v4;
    sub_100778A68(&v31, &v30, 1);
    v5 = v30;
    v6 = v31;
    v31 = *(v2 - 2);
    v30 = *(v2 - 1);
    sub_100778A68(&v31, &v30, 1);
    if (v6 != v31)
    {
      if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      v11 = vabdd_f64(v6, v31);
      v12 = fabs(v6);
      v13 = fabs(v31);
      if (v12 >= v13)
        v13 = v12;
      v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
        goto LABEL_21;
    }
    if (v5 != v30)
    {
      if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      v7 = vabdd_f64(v5, v30);
      v8 = fabs(v5);
      v9 = fabs(v30);
      if (v8 >= v9)
        v9 = v8;
      v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v7 > v10)
      {
LABEL_21:
        v15 = *a1;
        v16 = a1[1];
        v18 = *(_QWORD *)*a1;
        v17 = *((_QWORD *)*a1 + 1);
        v19 = (unint64_t)a1[2];
        if ((unint64_t)v16 >= v19)
        {
          v21 = ((char *)v16 - (char *)v15) >> 4;
          if ((unint64_t)(v21 + 1) >> 60)
            sub_100259694();
          v22 = v19 - (_QWORD)v15;
          v23 = v22 >> 3;
          if (v22 >> 3 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v25 = (char *)sub_10028E224((uint64_t)(a1 + 2), v24);
          else
            v25 = 0;
          v26 = &v25[16 * v21];
          v27 = &v25[16 * v24];
          *(_QWORD *)v26 = v18;
          *((_QWORD *)v26 + 1) = v17;
          v20 = (double *)(v26 + 16);
          v29 = *a1;
          v28 = a1[1];
          if (v28 != *a1)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
              v26 -= 16;
              v28 -= 2;
            }
            while (v28 != v29);
            v28 = *a1;
          }
          *a1 = (double *)v26;
          a1[1] = v20;
          a1[2] = (double *)v27;
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_QWORD *)v16 = v18;
          *((_QWORD *)v16 + 1) = v17;
          v20 = v16 + 2;
        }
        a1[1] = v20;
      }
    }
  }
}

void sub_100778A68(double *a1, double *a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v6 = *a1;
  v7 = fabs(*a1);
  v8 = 180.0;
  if (v7 == 180.0)
    goto LABEL_2;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v10 = fabs(v7 + -180.0);
    v8 = 180.0;
    if (v7 < 180.0)
      v7 = 180.0;
    v11 = v7 >= 1.0 ? v7 * 2.22044605e-16 : 2.22044605e-16;
    if (v10 <= v11)
      goto LABEL_2;
  }
  v8 = 180.0;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0)
      goto LABEL_3;
    v8 = fmod(v6 + -180.0, 360.0) + 180.0;
    goto LABEL_2;
  }
  v6 = fmod(v6 + 180.0, 360.0) + -180.0;
  *a1 = v6;
  if (v6 == -180.0)
    goto LABEL_2;
  v12 = ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v12 || *(_QWORD *)&v6 == 0)
  {
    v8 = 180.0;
    v14 = fabs(v6 + 180.0);
    v15 = fabs(v6);
    if (v15 < 180.0)
      v15 = 180.0;
    v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v16)
    {
LABEL_2:
      *a1 = v8;
      v6 = v8;
    }
  }
  if (!a3)
    goto LABEL_37;
LABEL_3:
  v9 = fabs(*a2);
  if (v9 == 90.0)
    goto LABEL_5;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_37;
  v17 = fabs(v9 + -90.0);
  if (v9 < 90.0)
    v9 = 90.0;
  v18 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v18)
  {
LABEL_5:
    *a1 = 0.0;
    v6 = 0.0;
  }
  else
  {
LABEL_37:
    if (v6 <= -180.0)
      goto LABEL_52;
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v6 <= 180.0)
        return;
LABEL_49:
      sub_101907AC8();
    }
  }
  v19 = fabs(v6 + 180.0);
  v20 = fabs(v6);
  if (v20 < 180.0)
    v20 = 180.0;
  if (v20 >= 1.0)
    v21 = v20 * 2.22044605e-16;
  else
    v21 = 2.22044605e-16;
  if (v19 <= v21)
LABEL_52:
    sub_101907AF0();
  if (v6 > 180.0 && fabs(v6 + -180.0) > v21)
    goto LABEL_49;
}

long double sub_100778CD4(double *a1, double *a2)
{
  double v2;
  unsigned __int8 v3;
  double v4;
  double v5;
  unsigned __int8 v6;
  double v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double *v35;
  uint64_t v36;

  v2 = a1[1];
  v3 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v3 & 1) == 0)
  {
    v29 = a2;
    v33 = a1;
    v20 = __cxa_guard_acquire(&qword_1022A4130);
    a2 = v29;
    a1 = v33;
    if (v20)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      a2 = v29;
      a1 = v33;
    }
  }
  v4 = *(double *)&qword_1022A4128;
  v5 = a2[1];
  v6 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v6 & 1) == 0)
  {
    v30 = a2;
    v34 = a1;
    v21 = qword_1022A4128;
    v22 = __cxa_guard_acquire(&qword_1022A4130);
    v4 = *(double *)&v21;
    v23 = v22;
    a2 = v30;
    a1 = v34;
    if (v23)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v4 = *(double *)&v21;
      a2 = v30;
      a1 = v34;
    }
  }
  v7 = *(double *)&qword_1022A4128;
  v8 = *a2;
  v9 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v9 & 1) == 0)
  {
    v35 = a1;
    v24 = v4;
    v31 = *a2;
    v25 = __cxa_guard_acquire(&qword_1022A4130);
    v8 = v31;
    v4 = v24;
    v26 = v25;
    a1 = v35;
    if (v26)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v8 = v31;
      v4 = v24;
      a1 = v35;
    }
  }
  v10 = *(double *)&qword_1022A4128;
  v11 = *a1;
  v12 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v12 & 1) == 0)
  {
    v28 = v4;
    v32 = v8;
    v36 = qword_1022A4128;
    v27 = __cxa_guard_acquire(&qword_1022A4130);
    v8 = v32;
    v10 = *(double *)&v36;
    v4 = v28;
    if (v27)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v8 = v32;
      v10 = *(double *)&v36;
      v4 = v28;
    }
  }
  v13 = v8 * v10;
  v14 = tan(v2 * v4 * 0.5);
  v15 = tan(v5 * v7 * 0.5);
  v16 = (v14 + v15) / (v14 * v15 + 1.0);
  v17 = tan((v13 - v11 * *(double *)&qword_1022A4128) * 0.5);
  v18 = atan(v16 * v17);
  return v18 + v18;
}

BOOL sub_100778F24(double *a1, double *a2)
{
  double v2;
  unsigned __int8 v3;
  double v4;
  double v5;
  unsigned __int8 v6;
  double v7;
  double v8;
  double v9;
  unsigned __int8 v10;
  double v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  _BOOL8 result;
  double v16;
  double v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double *v35;
  double v36;

  v2 = *a1;
  v3 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v3 & 1) == 0)
  {
    v27 = a1;
    v33 = a2;
    v31 = *a1;
    v18 = __cxa_guard_acquire(&qword_1022A4130);
    v2 = v31;
    a2 = v33;
    v19 = v18;
    a1 = v27;
    if (v19)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v2 = v31;
      a1 = v27;
      a2 = v33;
    }
  }
  v4 = *(double *)&qword_1022A4128;
  v5 = *a1;
  v6 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v6 & 1) == 0)
  {
    v34 = a2;
    v32 = v2;
    v24 = qword_1022A4128;
    v28 = *a1;
    v20 = __cxa_guard_acquire(&qword_1022A4130);
    v4 = *(double *)&v24;
    v5 = v28;
    v2 = v32;
    a2 = v34;
    if (v20)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v4 = *(double *)&v24;
      v5 = v28;
      v2 = v32;
      a2 = v34;
    }
  }
  v7 = v2 * v4;
  v8 = floor(v5 * *(double *)&qword_1022A4128 / 6.28318531);
  v9 = *a2;
  v10 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v10 & 1) == 0)
  {
    v35 = a2;
    v23 = *a2;
    v25 = v7;
    v29 = v8;
    v21 = __cxa_guard_acquire(&qword_1022A4130);
    v7 = v25;
    v8 = v29;
    v9 = v23;
    a2 = v35;
    if (v21)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v7 = v25;
      v8 = v29;
      v9 = v23;
      a2 = v35;
    }
  }
  v11 = v7 - v8 * 6.28318531;
  v12 = v9 * *(double *)&qword_1022A4128;
  v13 = *a2;
  v14 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v14 & 1) == 0)
  {
    v26 = v12;
    v30 = v11;
    v36 = *a2;
    v22 = __cxa_guard_acquire(&qword_1022A4130);
    v13 = v36;
    v12 = v26;
    v11 = v30;
    if (v22)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v13 = v36;
      v12 = v26;
      v11 = v30;
    }
  }
  result = 0;
  v16 = v12 - floor(v13 * *(double *)&qword_1022A4128 / 6.28318531) * 6.28318531;
  if (v11 >= v16)
    v17 = v11;
  else
    v17 = v16;
  if (v16 < v11)
    v11 = v16;
  if (v17 > 3.14159265 && v11 < 3.14159265)
    return v17 - v11 > 3.14159265;
  return result;
}

uint64_t sub_1007791D0(double *a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v6;
  uint64_t result;
  double **v8;
  double **v9;
  double *v10;
  double *v11;
  double *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = *(double **)a2;
  v3 = *(double **)(a2 + 8);
  if ((unint64_t)v3 - *(_QWORD *)a2 < 0x40)
    return 0xFFFFFFFFLL;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  if (v2 + 2 == v3)
    return 0xFFFFFFFFLL;
  do
  {
    if (!sub_100779378((uint64_t)&v13, a1, v2, v2 + 2, (uint64_t)&v14))
      break;
    v6 = v2 + 4;
    v2 += 2;
  }
  while (v6 != v3);
  if (v16)
    return 0;
  if ((_DWORD)v15 && HIDWORD(v15))
  {
    if ((int)v15 < 1)
    {
      if (!(_DWORD)v14)
        return 0xFFFFFFFFLL;
    }
    else if (!((_DWORD)v14 + HIDWORD(v14)))
    {
      return 0xFFFFFFFFLL;
    }
  }
  else if (!(_DWORD)v14)
  {
    return 0xFFFFFFFFLL;
  }
  v9 = *(double ***)(a2 + 24);
  v8 = *(double ***)(a2 + 32);
  if (v9 != v8)
  {
    while (1)
    {
      v10 = *v9;
      v11 = v9[1];
      if ((unint64_t)((char *)v11 - (char *)*v9) >= 0x40)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        if (v10 + 2 != v11)
        {
          do
          {
            if (!sub_100779378((uint64_t)&v13, a1, v10, v10 + 2, (uint64_t)&v14))
              break;
            v12 = v10 + 4;
            v10 += 2;
          }
          while (v12 != v11);
          if (v16)
            return 0;
          if ((_DWORD)v15 && HIDWORD(v15))
          {
            if ((int)v15 < 1)
            {
              if ((_DWORD)v14)
                return 0xFFFFFFFFLL;
            }
            else if ((_DWORD)v14 + HIDWORD(v14))
            {
              return 0xFFFFFFFFLL;
            }
          }
          else if ((_DWORD)v14)
          {
            return 0xFFFFFFFFLL;
          }
        }
        v8 = *(double ***)(a2 + 32);
      }
      v9 += 3;
      result = 1;
      if (v9 == v8)
        return result;
    }
  }
  return 1;
}

BOOL sub_100779378(uint64_t a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  _BOOL8 result;
  unint64_t v11;
  double *v13;
  int v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  __int16 v18;

  v18 = 0;
  v17 = 0;
  if (sub_100779A78(a2, a3, a4, a5, (BOOL *)&v18 + 1, (BOOL *)&v18, &v17))
    return *(_BYTE *)(a5 + 16) == 0;
  v11 = sub_10077A62C(a2, a3, a4, HIBYTE(v18), v18, v17);
  v16 = v11;
  if (!(_DWORD)v11)
    return *(_BYTE *)(a5 + 16) == 0;
  if ((v11 & 0xFF00000000) == 0)
  {
    if ((_DWORD)v11 == 1 || (_DWORD)v11 == -1)
    {
      if (HIBYTE(v18))
        v13 = a3;
      else
        v13 = a4;
      v14 = sub_1007794F8(a1, a2, v13, (int *)&v16);
    }
    else
    {
      if (v17)
      {
        if ((int)v11 < 1)
          v15 = -1;
        else
          v15 = 1;
        if (180.0 - a3[1] - a4[1] <= 180.0)
          v15 = -v15;
LABEL_24:
        if ((int)v11 * v15 >= 1)
          *(_DWORD *)a5 += v11;
        *(_DWORD *)(a5 + 8) += v11;
        return *(_BYTE *)(a5 + 16) == 0;
      }
      v14 = sub_10077970C(a3, a4, a2);
    }
    v15 = v14;
    if (!v14)
    {
      result = 0;
      *(_BYTE *)(a5 + 16) = 1;
      *(_DWORD *)a5 = 0;
      return result;
    }
    LODWORD(v11) = v16;
    goto LABEL_24;
  }
  *(_DWORD *)(a5 + 4) -= v11;
  *(_DWORD *)(a5 + 12) -= v11;
  return *(_BYTE *)(a5 + 16) == 0;
}

uint64_t sub_1007794F8(uint64_t a1, double *a2, double *a3, int *a4)
{
  double v4;
  double v5;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  double v16;
  double v17;
  BOOL v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27[2];
  double v28[2];

  v4 = a2[1];
  v5 = a3[1];
  if (v4 == v5)
    return 0;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v23 = vabdd_f64(v4, v5);
    v24 = fabs(v4);
    v25 = fabs(v5);
    if (v24 < v25)
      v24 = v25;
    v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
    if (v23 <= v26)
      return 0;
  }
  v9 = *a3;
  v28[0] = *a3;
  v28[1] = v5;
  v27[1] = v5;
  v10 = -1.0;
  if (*a4 > 0)
    v10 = 1.0;
  v11 = v9 + v10;
  v12 = fabs(v11);
  v13 = 180.0;
  if (v12 != 180.0)
  {
    v14 = ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
       && (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
    if (v14 && *(_QWORD *)&v11 != 0)
      goto LABEL_26;
    v16 = fabs(v12 + -180.0);
    v13 = 180.0;
    if (v12 < 180.0)
      v12 = 180.0;
    v17 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 > v17)
    {
LABEL_26:
      v13 = 180.0;
      if (v11 <= 180.0)
      {
        if (v11 >= -180.0)
          goto LABEL_11;
        v13 = fmod(v11 + -180.0, 360.0) + 180.0;
      }
      else
      {
        v11 = fmod(v11 + 180.0, 360.0) + -180.0;
        if (v11 != -180.0)
        {
          v18 = ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
             && (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
          if (v18 && *(_QWORD *)&v11 != 0)
            goto LABEL_11;
          v13 = 180.0;
          v20 = fabs(v11 + 180.0);
          v21 = fabs(v11);
          if (v21 < 180.0)
            v21 = 180.0;
          v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v22)
            goto LABEL_11;
        }
      }
    }
  }
  v11 = v13;
LABEL_11:
  v27[0] = v11;
  return sub_10077970C(v28, v27, a2);
}

uint64_t sub_10077970C(double *a1, double *a2, double *a3)
{
  double v3;
  unsigned __int8 v4;
  double v5;
  unsigned __int8 v6;
  double v7;
  unsigned __int8 v8;
  double v9;
  unsigned __int8 v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  unsigned __int8 v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  double *v29;
  double v30;
  double v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  v43 = 0.0;
  v3 = *a1;
  v4 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v4 & 1) == 0)
  {
    v24 = a1;
    v27 = a2;
    v32 = a3;
    v23 = *a1;
    v16 = __cxa_guard_acquire(&qword_1022A4130);
    v3 = v23;
    a2 = v27;
    a3 = v32;
    v17 = v16;
    a1 = v24;
    if (v17)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v3 = v23;
      a1 = v24;
      a2 = v27;
      a3 = v32;
    }
  }
  v43 = v3 * *(double *)&qword_1022A4128;
  v42 = 0.0;
  v5 = a1[1];
  v6 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v6 & 1) == 0)
  {
    v28 = a2;
    v33 = a3;
    v25 = a1[1];
    v18 = __cxa_guard_acquire(&qword_1022A4130);
    v5 = v25;
    a2 = v28;
    a3 = v33;
    if (v18)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v5 = v25;
      a2 = v28;
      a3 = v33;
    }
  }
  v42 = v5 * *(double *)&qword_1022A4128;
  v41 = 0.0;
  v7 = *a2;
  v8 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v8 & 1) == 0)
  {
    v29 = a2;
    v34 = a3;
    v26 = *a2;
    v19 = __cxa_guard_acquire(&qword_1022A4130);
    v7 = v26;
    a2 = v29;
    a3 = v34;
    if (v19)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v7 = v26;
      a2 = v29;
      a3 = v34;
    }
  }
  v41 = v7 * *(double *)&qword_1022A4128;
  v40 = 0.0;
  v9 = a2[1];
  v10 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v10 & 1) == 0)
  {
    v35 = a3;
    v30 = a2[1];
    v20 = __cxa_guard_acquire(&qword_1022A4130);
    v9 = v30;
    a3 = v35;
    if (v20)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v9 = v30;
      a3 = v35;
    }
  }
  v40 = v9 * *(double *)&qword_1022A4128;
  v39 = 0.0;
  v11 = *a3;
  v12 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v12 & 1) == 0)
  {
    v36 = a3;
    v31 = *a3;
    v21 = __cxa_guard_acquire(&qword_1022A4130);
    v11 = v31;
    a3 = v36;
    if (v21)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v11 = v31;
      a3 = v36;
    }
  }
  v39 = v11 * *(double *)&qword_1022A4128;
  v38 = 0.0;
  v13 = a3[1];
  v14 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v14 & 1) == 0)
  {
    v37 = a3[1];
    v22 = __cxa_guard_acquire(&qword_1022A4130);
    v13 = v37;
    if (v22)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v13 = v37;
    }
  }
  v38 = v13 * *(double *)&qword_1022A4128;
  return sub_10077AC6C(&v43, &v42, &v41, &v40, &v39, &v38);
}

uint64_t sub_100779A78(double *a1, double *a2, double *a3, uint64_t a4, BOOL *a5, BOOL *a6, BOOL *a7)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BOOL4 v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  int v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  int v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  BOOL v56;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  BOOL v63;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  double v78;
  double v79;
  BOOL v80;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  double v95;
  double v96;
  BOOL v97;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t result;
  char v108;
  char v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  char v118;
  char v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;

  v12 = *a1;
  v11 = a1[1];
  v14 = *a2;
  v13 = a2[1];
  v16 = *a3;
  v15 = a3[1];
  v17 = vabdd_f64(*a1, *a2);
  v18 = 180.0;
  if (v17 == 180.0)
    goto LABEL_2;
  v19 = v12 - v14;
  if (COERCE__INT64(fabs(v12 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v47 = fabs(v17 + -180.0);
    v18 = 180.0;
    if (v17 < 180.0)
      v17 = 180.0;
    v48 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v47 <= v48)
      goto LABEL_2;
  }
  v18 = 180.0;
  if (v19 <= 180.0)
  {
    if (v19 >= -180.0)
      goto LABEL_3;
    v18 = fmod(v19 + -180.0, 360.0) + 180.0;
LABEL_2:
    v19 = v18;
    goto LABEL_3;
  }
  v19 = fmod(v19 + 180.0, 360.0) + -180.0;
  if (v19 == -180.0)
    goto LABEL_2;
  v49 = ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v49 || *(_QWORD *)&v19 == 0)
  {
    v18 = 180.0;
    v51 = fabs(v19 + 180.0);
    v52 = fabs(v19);
    if (v52 < 180.0)
      v52 = 180.0;
    v53 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
    if (v51 <= v53)
      goto LABEL_2;
  }
LABEL_3:
  v20 = fabs(v19);
  v21 = 2.22044605e-16;
  if (v20 >= 1.0)
    v21 = v20 * 2.22044605e-16;
  v22 = (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v20 <= v21;
  v23 = v19 == 0.0 || v22;
  v24 = vabdd_f64(v12, v16);
  v25 = 180.0;
  if (v24 == 180.0)
    goto LABEL_12;
  v26 = v12 - v16;
  if (COERCE__INT64(fabs(v12 - v16)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v54 = fabs(v24 + -180.0);
    v25 = 180.0;
    if (v24 < 180.0)
      v24 = 180.0;
    v55 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
    if (v54 <= v55)
      goto LABEL_12;
  }
  v25 = 180.0;
  if (v26 <= 180.0)
  {
    if (v26 >= -180.0)
      goto LABEL_13;
    v25 = fmod(v26 + -180.0, 360.0) + 180.0;
LABEL_12:
    v26 = v25;
    goto LABEL_13;
  }
  v26 = fmod(v26 + 180.0, 360.0) + -180.0;
  if (v26 == -180.0)
    goto LABEL_12;
  v56 = ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v56 || *(_QWORD *)&v26 == 0)
  {
    v25 = 180.0;
    v58 = fabs(v26 + 180.0);
    v59 = fabs(v26);
    if (v59 < 180.0)
      v59 = 180.0;
    v60 = v59 >= 1.0 ? v59 * 2.22044605e-16 : 2.22044605e-16;
    if (v58 <= v60)
      goto LABEL_12;
  }
LABEL_13:
  v27 = fabs(v26);
  v28 = 2.22044605e-16;
  if (v27 >= 1.0)
    v28 = v27 * 2.22044605e-16;
  v29 = (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v27 <= v28;
  v30 = v26 == 0.0 || v29;
  v31 = v12 + dbl_101BC0BE0[v12 <= 0.0];
  if ((v23 & 1) != 0)
    goto LABEL_22;
  v33 = vabdd_f64(v31, v14);
  v34 = 180.0;
  if (v33 == 180.0)
    goto LABEL_24;
  v35 = v31 - v14;
  v73 = fabs(v31 - v14);
  v74 = (unint64_t)(*(_QWORD *)&v73 - 0x10000000000000) >> 53;
  v75 = *(_QWORD *)&v73 - 1;
  v76 = v74 > 0x3FE && v75 > 0xFFFFFFFFFFFFELL;
  if (!v76 || COERCE__INT64(v31 - v14) == 0)
  {
    v78 = fabs(v33 + -180.0);
    v34 = 180.0;
    if (v33 < 180.0)
      v33 = 180.0;
    v79 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
    if (v78 <= v79)
      goto LABEL_24;
  }
  v34 = 180.0;
  if (v35 > 180.0)
  {
    v35 = fmod(v35 + 180.0, 360.0) + -180.0;
    if (v35 != -180.0)
    {
      v80 = ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (v80 && *(_QWORD *)&v35 != 0)
        goto LABEL_25;
      v34 = 180.0;
      v82 = fabs(v35 + 180.0);
      v83 = fabs(v35);
      if (v83 < 180.0)
        v83 = 180.0;
      v84 = v83 >= 1.0 ? v83 * 2.22044605e-16 : 2.22044605e-16;
      if (v82 > v84)
        goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35 < -180.0)
  {
    v34 = fmod(v35 + -180.0, 360.0) + 180.0;
LABEL_24:
    v35 = v34;
  }
LABEL_25:
  if (v35 == 0.0)
    goto LABEL_26;
  if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v85 = fabs(v35);
    v86 = 2.22044605e-16;
    if (v85 >= 1.0)
      v86 = v85 * 2.22044605e-16;
    if (v85 <= v86)
    {
LABEL_26:
      v32 = 0;
      goto LABEL_27;
    }
  }
  v87 = fabs(v13);
  if (v87 != 90.0)
  {
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v36 = 0;
    }
    else
    {
      v88 = fabs(v87 + -90.0);
      if (v87 < 90.0)
        v87 = 90.0;
      if (v87 >= 1.0)
        v89 = v87 * 2.22044605e-16;
      else
        v89 = 2.22044605e-16;
      v36 = v88 <= v89;
    }
    v32 = 1;
    goto LABEL_28;
  }
LABEL_22:
  v32 = 1;
LABEL_27:
  v36 = 1;
LABEL_28:
  *a5 = v36;
  if ((v30 & 1) != 0)
    goto LABEL_29;
  v38 = vabdd_f64(v31, v16);
  v39 = 180.0;
  if (v38 == 180.0)
    goto LABEL_31;
  v40 = v31 - v16;
  v90 = fabs(v31 - v16);
  v91 = (unint64_t)(*(_QWORD *)&v90 - 0x10000000000000) >> 53;
  v92 = *(_QWORD *)&v90 - 1;
  v93 = v91 > 0x3FE && v92 > 0xFFFFFFFFFFFFELL;
  if (!v93 || COERCE__INT64(v31 - v16) == 0)
  {
    v95 = fabs(v38 + -180.0);
    v39 = 180.0;
    if (v38 < 180.0)
      v38 = 180.0;
    v96 = v38 >= 1.0 ? v38 * 2.22044605e-16 : 2.22044605e-16;
    if (v95 <= v96)
      goto LABEL_31;
  }
  v39 = 180.0;
  if (v40 <= 180.0)
  {
    if (v40 >= -180.0)
      goto LABEL_32;
    v39 = fmod(v40 + -180.0, 360.0) + 180.0;
    goto LABEL_31;
  }
  v40 = fmod(v40 + 180.0, 360.0) + -180.0;
  if (v40 == -180.0)
    goto LABEL_31;
  v97 = ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v97 || *(_QWORD *)&v40 == 0)
  {
    v39 = 180.0;
    v99 = fabs(v40 + 180.0);
    v100 = fabs(v40);
    if (v100 < 180.0)
      v100 = 180.0;
    v101 = v100 >= 1.0 ? v100 * 2.22044605e-16 : 2.22044605e-16;
    if (v99 <= v101)
LABEL_31:
      v40 = v39;
  }
LABEL_32:
  if (v40 == 0.0)
    goto LABEL_33;
  if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v102 = fabs(v40);
    v103 = 2.22044605e-16;
    if (v102 >= 1.0)
      v103 = v102 * 2.22044605e-16;
    if (v102 <= v103)
    {
LABEL_33:
      v37 = 0;
      goto LABEL_34;
    }
  }
  v104 = fabs(v15);
  if (v104 == 90.0)
  {
LABEL_29:
    v37 = 1;
LABEL_34:
    v41 = 1;
    goto LABEL_35;
  }
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v41 = 0;
  }
  else
  {
    v105 = fabs(v104 + -90.0);
    if (v104 < 90.0)
      v104 = 90.0;
    if (v104 >= 1.0)
      v106 = v104 * 2.22044605e-16;
    else
      v106 = 2.22044605e-16;
    v41 = v105 <= v106;
  }
  v37 = 1;
LABEL_35:
  *a6 = v41;
  v42 = vabdd_f64(v16, v14);
  v43 = 180.0;
  if (v42 == 180.0)
    goto LABEL_36;
  v44 = v16 - v14;
  if (COERCE__INT64(fabs(v16 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v61 = fabs(v42 + -180.0);
    v43 = 180.0;
    if (v42 < 180.0)
      v42 = 180.0;
    v62 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
    if (v61 <= v62)
      goto LABEL_36;
  }
  v43 = 180.0;
  if (v44 <= 180.0)
  {
    if (v44 >= -180.0)
      goto LABEL_37;
    v43 = fmod(v44 + -180.0, 360.0) + 180.0;
LABEL_36:
    v44 = v43;
    goto LABEL_37;
  }
  v44 = fmod(v44 + 180.0, 360.0) + -180.0;
  if (v44 == -180.0)
    goto LABEL_36;
  v63 = ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v63 || *(_QWORD *)&v44 == 0)
  {
    v43 = 180.0;
    v65 = fabs(v44 + 180.0);
    v66 = fabs(v44);
    if (v66 < 180.0)
      v66 = 180.0;
    v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
    if (v65 <= v67)
      goto LABEL_36;
  }
LABEL_37:
  if (v44 == 180.0)
  {
    *a7 = 1;
LABEL_39:
    v45 = *a5 || *a6;
    *a6 = v45;
    *a5 = v45;
    v46 = fabs(v11);
    if (v46 == 90.0)
      goto LABEL_40;
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v71 = fabs(v46 + -90.0);
      if (v46 < 90.0)
        v46 = 90.0;
      v72 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
      if (v71 <= v72)
      {
LABEL_40:
        *a6 = 1;
        *a5 = 1;
      }
    }
    goto LABEL_216;
  }
  if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *a7 = 0;
    goto LABEL_216;
  }
  v68 = fabs(v44 + -180.0);
  v69 = fabs(v44);
  if (v69 < 180.0)
    v69 = 180.0;
  if (v69 >= 1.0)
    v70 = v69 * 2.22044605e-16;
  else
    v70 = 2.22044605e-16;
  *a7 = v68 <= v70;
  if (v68 <= v70)
    goto LABEL_39;
LABEL_216:
  result = 0;
  if (*a5 && *a6)
  {
    if (*a7)
    {
      if (180.0 - v13 - v15 <= 180.0)
      {
        if (v13 <= v11)
          v118 = v23;
        else
          v118 = 0;
        if ((v118 & 1) == 0)
        {
          v119 = v15 <= v11 ? v30 : 0;
          if ((v119 & 1) == 0)
          {
            v120 = 90.0;
            if (v11 != 90.0)
            {
              if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_294;
              v121 = fabs(v11 + -90.0);
              v122 = fabs(v11);
              if (v122 < 90.0)
                v122 = 90.0;
              v123 = v122 >= 1.0 ? v122 * 2.22044605e-16 : 2.22044605e-16;
              if (v121 > v123)
              {
LABEL_294:
                if (((v23 | v30) & 1) == 0)
                {
                  if (v11 == -90.0)
                    return 0;
                  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                  {
                    v124 = fabs(v11 + 90.0);
                    v125 = fabs(v11);
                    if (v125 >= 90.0)
                      v120 = v125;
                    v126 = v120 >= 1.0 ? v120 * 2.22044605e-16 : 2.22044605e-16;
                    if (v124 <= v126)
                      return 0;
                  }
                }
                return 1;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v11)
          v108 = v23;
        else
          v108 = 0;
        if ((v108 & 1) == 0)
        {
          v109 = v15 >= v11 ? v30 : 0;
          if ((v109 & 1) == 0 && v11 != -90.0)
          {
            if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              goto LABEL_244;
            v110 = 90.0;
            v111 = fabs(v11 + 90.0);
            v112 = fabs(v11);
            if (v112 >= 90.0)
              v110 = v112;
            v113 = v110 >= 1.0 ? v110 * 2.22044605e-16 : 2.22044605e-16;
            if (v111 > v113)
            {
LABEL_244:
              if (((v23 | v30) & 1) == 0)
              {
                v114 = 90.0;
                if (v11 == 90.0)
                  return 0;
                if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                {
                  v115 = fabs(v11 + -90.0);
                  v116 = fabs(v11);
                  if (v116 >= 90.0)
                    v114 = v116;
                  v117 = v114 >= 1.0 ? v114 * 2.22044605e-16 : 2.22044605e-16;
                  if (v115 <= v117)
                    return 0;
                }
              }
              return 1;
            }
          }
        }
      }
    }
    else if ((v13 > v11 || v15 < v11) && (v15 > v11 || v13 < v11) || ((v32 | v37) & 1) == 0)
    {
      return 1;
    }
    *(_BYTE *)(a4 + 16) = 1;
    return 1;
  }
  return result;
}

unint64_t sub_10077A62C(double *a1, double *a2, double *a3, int a4, int a5, int a6)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  _BOOL4 v31;
  int v32;
  _BOOL4 v33;
  double v34;
  uint64_t v35;
  const mach_header_64 *v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  BOOL v41;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  BOOL v55;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  unint64_t v69;
  BOOL v70;
  double v72;
  double v73;
  BOOL v74;
  double v76;
  double v77;
  double v78;

  v9 = *a1;
  v10 = *a2;
  v11 = *a3;
  v12 = vabdd_f64(*a1, *a2);
  v13 = 180.0;
  if (v12 != 180.0)
  {
    v14 = v9 - v10;
    if (COERCE__INT64(fabs(v9 - v10)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_51;
    v37 = fabs(v12 + -180.0);
    v13 = 180.0;
    if (v12 < 180.0)
      v12 = 180.0;
    v38 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v37 > v38)
    {
LABEL_51:
      v13 = 180.0;
      if (v14 <= 180.0)
      {
        if (v14 >= -180.0)
          goto LABEL_3;
        v13 = fmod(v14 + -180.0, 360.0) + 180.0;
      }
      else
      {
        v39 = fmod(v14 + 180.0, 360.0);
        v14 = v39 + -180.0;
        if (v39 + -180.0 != -180.0)
        {
          v40 = COERCE__INT64(fabs(v39 + -180.0)) - 1;
          v41 = (unint64_t)(COERCE__INT64(fabs(v39 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
             && v40 > 0xFFFFFFFFFFFFELL;
          if (v41 && *(_QWORD *)&v14 != 0)
            goto LABEL_3;
          v13 = 180.0;
          v43 = fabs(v14 + 180.0);
          v44 = fabs(v14);
          if (v44 < 180.0)
            v44 = 180.0;
          v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
          if (v43 > v45)
            goto LABEL_3;
        }
      }
    }
  }
  v14 = v13;
LABEL_3:
  if (a6)
  {
    v15 = 0;
    v16 = v14 < 0.0;
    goto LABEL_5;
  }
  v18 = vabdd_f64(v11, v10);
  v19 = 180.0;
  if (v18 == 180.0)
    goto LABEL_9;
  v20 = v11 - v10;
  if (COERCE__INT64(fabs(v11 - v10)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v51 = fabs(v18 + -180.0);
    v19 = 180.0;
    if (v18 < 180.0)
      v18 = 180.0;
    v52 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v51 <= v52)
      goto LABEL_9;
  }
  v19 = 180.0;
  if (v20 <= 180.0)
  {
    if (v20 >= -180.0)
      goto LABEL_10;
    v19 = fmod(v20 + -180.0, 360.0) + 180.0;
    goto LABEL_9;
  }
  v53 = fmod(v20 + 180.0, 360.0);
  v20 = v53 + -180.0;
  if (v53 + -180.0 == -180.0)
    goto LABEL_9;
  v54 = COERCE__INT64(fabs(v53 + -180.0)) - 1;
  v55 = (unint64_t)(COERCE__INT64(fabs(v53 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
     && v54 > 0xFFFFFFFFFFFFELL;
  if (!v55 || *(_QWORD *)&v20 == 0)
  {
    v19 = 180.0;
    v57 = fabs(v20 + 180.0);
    v58 = fabs(v20);
    if (v58 < 180.0)
      v58 = 180.0;
    v59 = v58 >= 1.0 ? v58 * 2.22044605e-16 : 2.22044605e-16;
    if (v57 <= v59)
LABEL_9:
      v20 = v19;
  }
LABEL_10:
  if ((a4 & 1) == 0 && !a5)
  {
    if (v14 >= 0.0)
      v21 = 0;
    else
      v21 = -1;
    if (v20 >= 0.0)
      v22 = 0;
    else
      v22 = -1;
    if (v20 > 0.0)
      v23 = 1;
    else
      v23 = v22;
    v24 = v23 == v21;
    if (v14 > 0.0)
      v24 = v20 > 0.0;
    v25 = fabs(v14);
    v26 = fabs(v20);
    if (v24 && v25 < v26)
    {
      v15 = 0;
      v16 = v20 < 0.0;
LABEL_5:
      if (v16)
        v17 = 4294967294;
      else
        v17 = 2;
      return v15 | v17;
    }
    v28 = 180.0;
    v29 = vabdd_f64(v9 + 180.0, v10);
    if (v29 != 180.0)
    {
      v30 = v9 + 180.0 - v10;
      v69 = COERCE__INT64(fabs(v30)) - 1;
      v70 = (unint64_t)(COERCE__INT64(fabs(v30)) - 0x10000000000000) >> 53 > 0x3FE && v69 > 0xFFFFFFFFFFFFELL;
      if (v70 && *(_QWORD *)&v30 != 0)
        goto LABEL_146;
      v72 = fabs(v29 + -180.0);
      v28 = 180.0;
      if (v29 < 180.0)
        v29 = 180.0;
      v73 = v29 >= 1.0 ? v29 * 2.22044605e-16 : 2.22044605e-16;
      if (v72 > v73)
      {
LABEL_146:
        v28 = 180.0;
        if (v30 <= 180.0)
        {
          if (v30 >= -180.0)
            goto LABEL_29;
          v28 = fmod(v30 + -180.0, 360.0) + 180.0;
        }
        else
        {
          v30 = fmod(v30 + 180.0, 360.0) + -180.0;
          if (v30 != -180.0)
          {
            v74 = ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (v74 && *(_QWORD *)&v30 != 0)
              goto LABEL_29;
            v28 = 180.0;
            v76 = fabs(v30 + 180.0);
            v77 = fabs(v30);
            if (v77 < 180.0)
              v77 = 180.0;
            v78 = v77 >= 1.0 ? v77 * 2.22044605e-16 : 2.22044605e-16;
            if (v76 > v78)
              goto LABEL_29;
          }
        }
      }
    }
    v30 = v28;
LABEL_29:
    v31 = v20 > 0.0;
    if (v30 >= 0.0)
      v32 = 0;
    else
      v32 = -1;
    v33 = v23 == v32;
    if (v30 <= 0.0)
      v31 = v33;
    v34 = fabs(v30);
    v35 = 2;
    if (v20 < 0.0)
      v35 = 4294967294;
    v36 = &_mh_execute_header;
    if (v34 >= v26)
    {
      v35 = 0;
      v36 = 0;
    }
    if (v31)
      v17 = v35;
    else
      v17 = 0;
    if (v31)
      v15 = (unint64_t)v36;
    else
      v15 = 0;
    return v15 | v17;
  }
  if (v20 >= 0.0)
    v17 = 1;
  else
    v17 = 0xFFFFFFFFLL;
  v46 = 180.0;
  v47 = v9 + 180.0;
  if (a4)
    v48 = v10;
  else
    v48 = v11;
  v49 = vabdd_f64(v48, v47);
  if (v49 == 180.0)
    goto LABEL_75;
  v50 = v48 - v47;
  if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v60 = fabs(v49 + -180.0);
    v46 = 180.0;
    if (v49 < 180.0)
      v49 = 180.0;
    v61 = v49 >= 1.0 ? v49 * 2.22044605e-16 : 2.22044605e-16;
    if (v60 <= v61)
      goto LABEL_75;
  }
  v46 = 180.0;
  if (v50 > 180.0)
  {
    v50 = fmod(v50 + 180.0, 360.0) + -180.0;
    if (v50 != -180.0)
    {
      v62 = ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (v62 && *(_QWORD *)&v50 != 0)
        goto LABEL_76;
      v46 = 180.0;
      v64 = fabs(v50 + 180.0);
      v65 = fabs(v50);
      if (v65 < 180.0)
        v65 = 180.0;
      v66 = v65 >= 1.0 ? v65 * 2.22044605e-16 : 2.22044605e-16;
      if (v64 > v66)
        goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v50 < -180.0)
  {
    v46 = fmod(v50 + -180.0, 360.0) + 180.0;
LABEL_75:
    v50 = v46;
  }
LABEL_76:
  if (v50 == 0.0)
  {
    v15 = (unint64_t)&_mh_execute_header;
  }
  else if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = 0;
  }
  else
  {
    v67 = fabs(v50);
    v68 = 2.22044605e-16;
    if (v67 >= 1.0)
      v68 = v67 * 2.22044605e-16;
    v15 = (unint64_t)(v67 <= v68) << 32;
  }
  return v15 | v17;
}

uint64_t sub_10077AC6C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  __double2 v11;
  __double2 v12;
  __double2 v13;
  __double2 v14;
  __double2 v15;
  __double2 v16;
  double v17;
  uint64_t result;
  double v19;
  double v20;

  v11 = __sincos_stret(*a2);
  v12 = __sincos_stret(*a1);
  v13 = __sincos_stret(*a4);
  v14 = __sincos_stret(*a3);
  v15 = __sincos_stret(*a6);
  v16 = __sincos_stret(*a5);
  v17 = v16.__sinval
      * (v15.__cosval
       * (v11.__sinval * (v13.__cosval * v14.__cosval) - v11.__cosval * v12.__cosval * v13.__sinval))
      + v15.__cosval
      * (v11.__cosval * v12.__sinval * v13.__sinval - v11.__sinval * (v13.__cosval * v14.__sinval))
      * v16.__cosval
      + (v11.__cosval * v12.__cosval * (v13.__cosval * v14.__sinval)
       - v11.__cosval * v12.__sinval * (v13.__cosval * v14.__cosval))
      * v15.__sinval;
  if (v17 == 0.0)
    return 0;
  if (COERCE_UNSIGNED_INT64(fabs(v16.__sinval* (v15.__cosval* (v11.__sinval * (v13.__cosval * v14.__cosval) - v11.__cosval * v12.__cosval * v13.__sinval))+ v15.__cosval* (v11.__cosval * v12.__sinval * v13.__sinval - v11.__sinval * (v13.__cosval * v14.__sinval))* v16.__cosval+ (v11.__cosval * v12.__cosval * (v13.__cosval * v14.__sinval)- v11.__cosval * v12.__sinval * (v13.__cosval * v14.__cosval))* v15.__sinval)) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v19 = fabs(v17);
    v20 = 2.22044605e-16;
    if (v19 >= 1.0)
      v20 = v19 * 2.22044605e-16;
    if (v17 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v19 <= v20)
      return 0;
  }
  return result;
}

uint64_t sub_10077ADC0(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 72);
  sub_10077AE18(&v4);
  v4 = (void **)(a1 + 48);
  sub_10077AE18(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10077AE18(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_10077AE9C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10077AE9C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 64);
  sub_10025E1F0(&v4);
  v3 = *(void **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(a2 + 48) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

_BYTE *sub_10077AEF0(_BYTE *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_10077AF68(__dst + 24, a3);
  return __dst;
}

void sub_10077AF4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_10077AF68(char *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  char v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = 0;
  v6 = (uint64_t)a2 + 56;
  do
  {
    v7 = &__dst[v5];
    v8 = *(_OWORD *)(v6 + v5 - 32);
    v9 = *(_BYTE *)(v6 + v5 - 16);
    *(_QWORD *)&__dst[v5 + 48] = 0;
    v10 = &__dst[v5 + 48];
    *(v10 - 8) = v9;
    *(_OWORD *)(v10 - 24) = v8;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    sub_10027205C(v10, *(const void **)(v6 + v5 - 8), *(_QWORD *)(v6 + v5), (uint64_t)(*(_QWORD *)(v6 + v5) - *(_QWORD *)(v6 + v5 - 8)) >> 2);
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 10) = 0;
    v11 = &__dst[v5 + 72];
    *((_QWORD *)v11 + 2) = 0;
    sub_10077B11C(v11, *(uint64_t **)(v6 + v5 + 16), *(uint64_t **)(v6 + v5 + 24), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v6 + v5 + 24) - *(_QWORD *)(v6 + v5 + 16)) >> 3));
    v12 = &__dst[v5];
    *((_QWORD *)v12 + 12) = 0;
    *((_QWORD *)v12 + 13) = 0;
    v13 = &__dst[v5 + 96];
    *((_QWORD *)v13 + 2) = 0;
    sub_10077B11C(v13, *(uint64_t **)(v6 + v5 + 40), *(uint64_t **)(v6 + v5 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v6 + v5 + 48) - *(_QWORD *)(v6 + v5 + 40)) >> 3));
    v5 += 96;
  }
  while (v5 != 384);
  v14 = *(__int128 *)((char *)a2 + 408);
  v15 = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(__dst + 424) = *(__int128 *)((char *)a2 + 424);
  *(_OWORD *)(__dst + 440) = v15;
  *(_OWORD *)(__dst + 408) = v14;
  v16 = *(__int128 *)((char *)a2 + 456);
  v17 = *(__int128 *)((char *)a2 + 472);
  v18 = *(__int128 *)((char *)a2 + 504);
  *(_OWORD *)(__dst + 488) = *(__int128 *)((char *)a2 + 488);
  *(_OWORD *)(__dst + 504) = v18;
  *(_OWORD *)(__dst + 456) = v16;
  *(_OWORD *)(__dst + 472) = v17;
  v19 = *(__int128 *)((char *)a2 + 520);
  v20 = *(__int128 *)((char *)a2 + 536);
  v21 = *(__int128 *)((char *)a2 + 552);
  *((_DWORD *)__dst + 142) = *((_DWORD *)a2 + 142);
  *(_OWORD *)(__dst + 536) = v20;
  *(_OWORD *)(__dst + 552) = v21;
  *(_OWORD *)(__dst + 520) = v19;
  return __dst;
}

void sub_10077B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;

  a10 = (void **)(v11 + 72);
  sub_10077AE18(&a10);
  v14 = *(void **)(v10 + v12 + 48);
  if (v14)
  {
    *(_QWORD *)(v10 + v12 + 56) = v14;
    operator delete(v14);
  }
  for (; v12; v12 -= 96)
    sub_10077ADC0(v10 - 72 + v12);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_10077B11C(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A2F6C(result, a4);
    result = (_QWORD *)sub_10077B1A0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10077B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10077AE18(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10077B1A0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_10077B248(a1, v4, v6);
      v6 += 11;
      v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10077B494((uint64_t)v9);
  return v4;
}

void sub_10077B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10077B494((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10077B248(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *v6;
  __int128 v7;

  v5 = *a3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
  *(_QWORD *)a2 = v5;
  v6 = (_BYTE *)(a2 + 16);
  if (*((char *)a3 + 39) < 0)
  {
    sub_100115CE4(v6, (void *)a3[2], a3[3]);
  }
  else
  {
    v7 = *((_OWORD *)a3 + 1);
    *(_QWORD *)(a2 + 32) = a3[4];
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  sub_1002AE804((_QWORD *)(a2 + 40), (const void *)a3[5], a3[6], (a3[6] - a3[5]) >> 4);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return sub_10077B32C((_QWORD *)(a2 + 64), a3[8], a3[9], 0xAAAAAAAAAAAAAAABLL * ((a3[9] - a3[8]) >> 3));
}

void sub_10077B2F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10077B32C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100259C18(result, a4);
    result = sub_10077B3B0((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10077B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10025E1F0(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10077B3B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1002AE804(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_10077B460((uint64_t)v8);
  return v4;
}

void sub_10077B44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10077B460((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10077B460(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E528(a1);
  return a1;
}

uint64_t sub_10077B494(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10077B4C8((uint64_t *)a1);
  return a1;
}

void sub_10077B4C8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      sub_10077AE9C(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10077B518(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10077B518(a1, *a2);
    sub_10077B518(a1, a2[1]);
    sub_10077B560((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10077B560(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void **v4;

  for (i = 0; i != -384; i -= 96)
  {
    v4 = (void **)(a1 + i + 408);
    sub_10077AE18(&v4);
    v4 = (void **)(a1 + i + 384);
    sub_10077AE18(&v4);
    v3 = *(void **)(a1 + i + 360);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 368) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_10077B5F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_100259694();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100279B30((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[88 * v3];
  v13 = &v7[88 * v6];
  sub_10077B248((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 88;
  sub_10077B714(a1, &v10);
  v8 = a1[1];
  sub_10077B8F4(&v10);
  return v8;
}

void sub_10077B700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10077B8F4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10077B714(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10077B788((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10077B788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 88);
      a3 -= 88;
      *(_BYTE *)(v7 - 80) = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(v7 - 88) = v8;
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 72) = v9;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 64);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_10077B870((uint64_t)v12);
  return v10;
}

uint64_t sub_10077B870(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10077B8A4((uint64_t *)a1);
  return a1;
}

void sub_10077B8A4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_10077AE9C(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_10077B8F4(void **a1)
{
  sub_10077B924(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10077B924(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    sub_10077AE9C(v4, i - 88);
  }
}

char *sub_10077B968@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x278uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_10077B9E4(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10077B9CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10077BB14(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10077B9E4(char *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  uint64_t v5;
  char *v6;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  bzero(__dst + 24, 0x240uLL);
  v5 = 48;
  do
  {
    v6 = &__dst[v5];
    *v6 = 0;
    *((_QWORD *)v6 + 1) = 0xBFF0000000000000;
    v6[16] = 0;
    *(_OWORD *)(v6 + 24) = 0uLL;
    *(_OWORD *)(v6 + 40) = 0uLL;
    *(_OWORD *)(v6 + 56) = 0uLL;
    *(_OWORD *)(v6 + 72) = 0uLL;
    v5 += 96;
    *((_QWORD *)v6 + 11) = 0;
  }
  while (v6 + 96 != __dst + 432);
  sub_10018755C((uint64_t)(__dst + 432));
  return __dst;
}

void sub_10077BAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v13;
  void *v14;

  v13 = 0;
  while (1)
  {
    a10 = (void **)(v10 + v13 + 408);
    sub_10077AE18(&a10);
    a10 = (void **)(v10 + v13 + 384);
    sub_10077AE18(&a10);
    v14 = *(void **)(v10 + v13 + 360);
    if (v14)
    {
      *(_QWORD *)(v10 + v13 + 368) = v14;
      operator delete(v14);
    }
    v13 -= 96;
    if (v13 == -384)
    {
      if (*(char *)(v10 + 47) < 0)
        operator delete(*v11);
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
    }
  }
}

void sub_10077BB14(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10077B560((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_10077BB58(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x278uLL);
    v9[1] = a1 + 1;
    sub_10077BC04((uint64_t)(v6 + 4), a3);
    v10 = 1;
    sub_1000145B0(a1, v11, v7, v6);
    v9[0] = 0;
    sub_10077BB14((uint64_t)v9, 0);
  }
  return v6;
}

__n128 sub_10077BC04(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v2 = 0;
  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v4;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  do
  {
    v5 = &a2[v2];
    v6 = a1 + v2 * 16;
    v7 = a2[v2 + 3];
    *(_BYTE *)(v6 + 64) = a2[v2 + 4];
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 72) = *(__int128 *)((char *)&a2[v2 + 4] + 8);
    *(_QWORD *)(v6 + 88) = *((_QWORD *)&a2[v2 + 5] + 1);
    *((_QWORD *)v5 + 9) = 0;
    *((_QWORD *)v5 + 10) = 0;
    *((_QWORD *)v5 + 11) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)(v6 + 112) = 0;
    *(_OWORD *)(v6 + 96) = a2[v2 + 6];
    *(_QWORD *)(v6 + 112) = *(_QWORD *)&a2[v2 + 7];
    *((_QWORD *)v5 + 12) = 0;
    *((_QWORD *)v5 + 13) = 0;
    *((_QWORD *)v5 + 14) = 0;
    *(_QWORD *)(v6 + 120) = 0;
    *(_QWORD *)(v6 + 128) = 0;
    *(_QWORD *)(v6 + 136) = 0;
    *(_OWORD *)(v6 + 120) = *(__int128 *)((char *)&a2[v2 + 7] + 8);
    *(_QWORD *)(v6 + 136) = *((_QWORD *)&a2[v2 + 8] + 1);
    *((_QWORD *)v5 + 15) = 0;
    *((_QWORD *)v5 + 16) = 0;
    *((_QWORD *)v5 + 17) = 0;
    v2 += 6;
  }
  while (v2 != 24);
  v8 = a2[27];
  v9 = a2[29];
  *(_OWORD *)(a1 + 448) = a2[28];
  *(_OWORD *)(a1 + 464) = v9;
  *(_OWORD *)(a1 + 432) = v8;
  v10 = a2[30];
  v11 = a2[31];
  v12 = a2[33];
  *(_OWORD *)(a1 + 512) = a2[32];
  *(_OWORD *)(a1 + 528) = v12;
  *(_OWORD *)(a1 + 480) = v10;
  *(_OWORD *)(a1 + 496) = v11;
  result = (__n128)a2[34];
  v14 = a2[35];
  v15 = a2[36];
  *(_DWORD *)(a1 + 592) = *((_DWORD *)a2 + 148);
  *(_OWORD *)(a1 + 560) = v14;
  *(_OWORD *)(a1 + 576) = v15;
  *(__n128 *)(a1 + 544) = result;
  return result;
}

void sub_10077BCF8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10077BE98((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL)
      sub_100259694();
    v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v10;
    sub_1002A2F6C((_QWORD *)a1, v11);
    v12 = sub_10077B1A0(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_10077BF04((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = sub_10077B1A0(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_10077BF04((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      sub_10077AE9C(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_10077BE88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10077BE90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10077BE98(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_10077AE9C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_10077BF04(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 9;
  do
  {
    v8 = v6 - 9;
    v7 = *(v6 - 9);
    *(_BYTE *)(a4 + 8) = *((_BYTE *)v6 - 64);
    *(_QWORD *)a4 = v7;
    std::string::operator=((std::string *)(a4 + 16), (const std::string *)(v6 - 7));
    if ((uint64_t *)a4 != v6 - 9)
    {
      sub_1002F3538((char *)(a4 + 40), (char *)*(v6 - 4), *(v6 - 3), (*(v6 - 3) - *(v6 - 4)) >> 4);
      sub_10077BFC0(a4 + 64, *(v6 - 1), *v6, 0xAAAAAAAAAAAAAAABLL * ((*v6 - *(v6 - 1)) >> 3));
    }
    a4 += 88;
    v6 += 11;
  }
  while (v8 + 11 != v5);
  return v5;
}

void sub_10077BFC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10025E40C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_100259C18((_QWORD *)a1, v11);
    v12 = sub_10077B3B0(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_10077C148((int)&v20, a2, v13, v9);
    v12 = sub_10077B3B0(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_10077C148((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_10077C138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10077C140(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10077C148(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        sub_1002F3538(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10077C1B4()
{
  sub_1015A2E04(&xmmword_102303F90, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303F90, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303FA8, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303FA8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303FC0, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303FC0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303FD8, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303FD8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303FF0, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303FF0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304008, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304008, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304020, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304020, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304038, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304038, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304050, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304050, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304068, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304068, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304080, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304080, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304098, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304098, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023040B0, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023040B0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023040C8, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023040C8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023040E0, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023040E0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023040F8, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023040F8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304110, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304110, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304128, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304128, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304140, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304140, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304158, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304158, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102304170, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304170, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304188, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304188, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023041A0, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023041A0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023041B8, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023041B8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023041D0, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023041D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023041E8, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023041E8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304200, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304200, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304218, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304218, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304230, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304230, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304248, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304248, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304260, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304260, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304278, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304278, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304290, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304290, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023042A8, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023042A8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023042C0, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023042C0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023042D8, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023042D8, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023042F0, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023042F0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304308, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304308, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304320, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304320, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304338, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304338, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304350, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304350, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304368, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304368, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304380, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304380, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102304398, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102304398, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023043B0, "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023043B0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023043C8, "ROW");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023043C8, (void *)&_mh_execute_header);
}

uint64_t sub_10077C910(uint64_t a1)
{
  uint64_t v2;
  id v3;
  double v4;
  int v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  int v11;
  double v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  double v19;

  *(_QWORD *)a1 = 0;
  v2 = a1 + 32;
  sub_1015A2E04((_QWORD *)(a1 + 8), "CLTrackRunGeoMapRunningTrackDataManager");
  sub_1002433B8(v2);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_101BC0BF0;
  *(_QWORD *)(a1 + 136) = 0x40A3880000000000;
  *(_WORD *)(a1 + 144) = 0;
  v3 = objc_alloc_init((Class)GEOMapFeatureAccess);
  *(_QWORD *)(a1 + 88) = v3;
  if (v3)
  {
    objc_msgSend(v3, "setAllowNetworkTileLoad:", 0);
    objc_msgSend(*(id *)(a1 + 88), "setAllowStaleData:", 1);
    objc_msgSend(*(id *)(a1 + 88), "setAllowOfflineData:", 1);
  }
  sub_1001E4804(&v17);
  v4 = *(double *)(a1 + 136);
  v19 = 0.0;
  v5 = sub_1001FD98C(v17, "MinimumDistanceForNewRunningTrackQueryInTrackRun", &v19);
  v6 = v19;
  if (!v5)
    v6 = v4;
  *(double *)(a1 + 136) = v6;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_1001E4804(&v17);
  v10 = *(double *)(a1 + 120);
  v19 = 0.0;
  v11 = sub_1001FD98C(v17, "RunningTrackQueryRadiusInTrackRun", &v19);
  v12 = v19;
  if (!v11)
    v12 = v10;
  *(double *)(a1 + 120) = v12;
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_10077CAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_10077EB50(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10077CAD8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  sub_10077CC9C(a1);
  if (*(_QWORD *)(a1 + 88))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102152398);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,CLTrackRunGeoMapRunningTrackDataManager::~CLTrackRunGeoMapRunningTrackDataManager()", buf, 2u);
    }
    v3 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102152398);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGCZ,destroy geocodec malloc zone,CLTrackRunGeoMapRunningTrackDataManager::~CLTrackRunGeoMapRunningTrackDataManager()", v7, 2);
      v6 = (uint8_t *)v5;
      v3 = sub_100512490("Generic", 1, 0, 2, "CLTrackRunGeoMapRunningTrackDataManager::~CLTrackRunGeoMapRunningTrackDataManager()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    GEOResetGeoCodecsAllocator(v3);

    *(_QWORD *)(a1 + 88) = 0;
  }
  sub_10077EB50(a1);
  return a1;
}

void sub_10077CC90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10077CC9C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 80))
    *(_BYTE *)(a1 + 80) = 0;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    sub_10077E598(v2);
    objc_msgSend(*(id *)(a1 + 88), "setAllowNetworkTileLoad:", 0);
    objc_msgSend(*(id *)(a1 + 88), "setAllowStaleData:", 1);
    objc_msgSend(*(id *)(a1 + 88), "setAllowOfflineData:", 1);
  }
  if (*(_BYTE *)(a1 + 112))
    *(_BYTE *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 144) = 0;
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
}

uint64_t sub_10077CD18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_10077CD24(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  _BOOL8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  _BOOL4 v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  _BOOL4 v28;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = sub_10011E634((double *)(a1 + 32), *a2, a2[1], *(double *)(a1 + 96), *(double *)(a1 + 104), 0.0);
    *(double *)(a1 + 72) = v3;
    *(_BYTE *)(a1 + 80) = 1;
    v4 = *(double *)(a1 + 136);
    v5 = v3 >= v4;
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v6 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 80))
        goto LABEL_24;
      v7 = *(_QWORD *)(a1 + 72);
      v8 = *(_QWORD *)(a1 + 136);
      *(_DWORD *)buf = 134349568;
      v24 = v7;
      v25 = 2050;
      v26 = v8;
      v27 = 1026;
      v28 = v3 >= v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#cltm,fDistanceFromLastQueryLocation_m,%{public}.1f,fMinimumDistanceForNewQuery_m,%{public}.1f,isQueryNeeded,%{public}d", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return v5;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    if (*(_BYTE *)(a1 + 80))
    {
      v9 = *(_QWORD *)(a1 + 72);
      v10 = *(_QWORD *)(a1 + 136);
      v17 = 134349568;
      v18 = v9;
      v19 = 2050;
      v20 = v10;
      v21 = 1026;
      v22 = v3 >= v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,fDistanceFromLastQueryLocation_m,%{public}.1f,fMinimumDistanceForNewQuery_m,%{public}.1f,isQueryNeeded,%{public}d", &v17, 28);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTrackRunGeoMapRunningTrackDataManager::IsQueryNeeded(const CLClientLocationCoordinate &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
      return v5;
    }
LABEL_24:
    sub_10028DF3C();
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021523B8);
  v13 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cltm,Will query,last query location has no value", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,Will query,last query location has no value", &v17, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTrackRunGeoMapRunningTrackDataManager::IsQueryNeeded(const CLClientLocationCoordinate &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return 1;
}

void sub_10077D0A8(uint64_t a1, double *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  unsigned int v23;
  _QWORD *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  unsigned int v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  _QWORD v36[5];
  _QWORD v37[5];
  _QWORD v38[7];
  __int128 v39;
  double v40;
  _QWORD v41[5];
  __int128 v42;
  int v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unsigned int v52;
  uint8_t buf[4];
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unsigned int v62;

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021523B8);
  v8 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v54) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#cltm,Setting up RunningTrack data query,forceFullDataQuery,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v43 = 67240192;
    LODWORD(v44) = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltm,Setting up RunningTrack data query,forceFullDataQuery,%{public}d", &v43, 8);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  v9 = 144;
  if (!a4)
    v9 = 145;
  if (*(_BYTE *)(a1 + v9))
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v10 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v54) = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#cltm,Warning,Not querying,query already in progress,forceFullDataQuery,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v43 = 67240192;
      LODWORD(v44) = a4;
      LODWORD(v35) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,Warning,Not querying,query already in progress,forceFullDataQuery,%{public}d", &v43, v35);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else if ((sub_10077CD24(a1, a2) & 1) != 0 || a4)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v13 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v54) = a4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cltm,Query is needed and will occur,forceFullDataQuery,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v43 = 67240192;
      LODWORD(v44) = a4;
      LODWORD(v35) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,Query is needed and will occur,forceFullDataQuery,%{public}d", &v43, v35);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    v14 = objc_autoreleasePoolPush();
    v15 = *a2;
    v16 = a2[1];
    v42 = *(_OWORD *)a2;
    v17 = +[NSMutableArray array](NSMutableArray, "array");
    v18 = sub_1001FCBB4();
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v19 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#cltm,Setting up trackHandler data query", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      LOWORD(v43) = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltm,Setting up trackHandler data query", &v43, v35);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_10077D924;
    v41[3] = &unk_102152328;
    v41[4] = v17;
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_10077DBD0;
    v38[3] = &unk_102152350;
    v38[4] = v17;
    v38[5] = a1;
    v38[6] = a3;
    v39 = v42;
    v40 = v18;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10077E738;
    v37[3] = &unk_102152378;
    v37[4] = v38;
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10077E748;
    v36[3] = &unk_102152378;
    v36[4] = v38;
    if (*(_QWORD *)(a1 + 88))
    {
      sub_10077E758(a1);
      v20 = 120;
      if (a4)
        v20 = 128;
      v21 = *(double *)(a1 + v20);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v22 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        v23 = objc_msgSend(*(id *)(a1 + 88), "allowNetworkTileLoad");
        *(_DWORD *)buf = 134284545;
        v54 = v15;
        v55 = 2049;
        v56 = v16;
        v57 = 2050;
        v58 = v21;
        v59 = 1026;
        v60 = a4;
        v61 = 1026;
        v62 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#cltm,Querying for tracks,centerCoordinate,%{private}.7lf,%{private}.7lf,radius_m,%{public}.0lf,forceFullDataQuery,%{public}d,allowNetworkTileLoad,%{public}d", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_1021523B8);
        v31 = qword_10229FC58;
        v32 = objc_msgSend(*(id *)(a1 + 88), "allowNetworkTileLoad");
        v43 = 134284545;
        v44 = v15;
        v45 = 2049;
        v46 = v16;
        v47 = 2050;
        v48 = v21;
        v49 = 1026;
        v50 = a4;
        v51 = 1026;
        v52 = v32;
        LODWORD(v35) = 44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "#cltm,Querying for tracks,centerCoordinate,%{private}.7lf,%{private}.7lf,radius_m,%{public}.0lf,forceFullDataQuery,%{public}d,allowNetworkTileLoad,%{public}d", &v43, v35);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      if (a4)
      {
        *(_BYTE *)(a1 + 144) = 1;
        v24 = v37;
      }
      else
      {
        *(_BYTE *)(a1 + 145) = 1;
        v24 = v36;
      }
      objc_msgSend(*(id *)(a1 + 88), "findRunningTracksNear:radius:handler:completionHandler:", v41, v24, v15, v16, v21);
    }
    objc_autoreleasePoolPop(v14);
  }
}

void sub_10077D924(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  v3 = a2;
  if (!v3)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#cltm,RunningTrack data query was unsuccessful", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "#cltm,RunningTrack data query was unsuccessful", v9, 2, v9[0]);
LABEL_21:
    v8 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v6);
    if (v8 != buf)
      free(v8);
    return;
  }
  v4 = v3;
  if (objc_msgSend(objc_msgSend(v3, "lanes"), "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    return;
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021523B8);
  v7 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#cltm,Returned track has zero lanes", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 16, "#cltm,Returned track has zero lanes", v9, 2, v9[0]);
    goto LABEL_21;
  }
}

void sub_10077DBD0(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  _BYTE v42[22];
  __int16 v43;
  id v44;
  uint8_t buf[4];
  _BYTE v46[10];
  id v47;
  __int16 v48;
  id v49;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021523B8);
  v7 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)v46 = v8;
    *(_WORD *)&v46[8] = 1026;
    LODWORD(v47) = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#cltm,Entered completionHandler,tracksFound,%{public}lu,wasFullDataQuery,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v24 = qword_10229FC58;
    v25 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)v42 = 134349312;
    *(_QWORD *)&v42[4] = v25;
    *(_WORD *)&v42[12] = 1026;
    *(_DWORD *)&v42[14] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#cltm,Entered completionHandler,tracksFound,%{public}lu,wasFullDataQuery,%{public}d", v42, 18);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  if (a3)
  {
    if (*(_BYTE *)(v6 + 144))
    {
      *(_BYTE *)(v6 + 144) = 0;
      goto LABEL_24;
    }
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v9 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "#cltm,fFullDataQueryInProgress flag already false, not expected.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      *(_WORD *)v42 = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 17, "#cltm,fFullDataQueryInProgress flag already false, not expected.", v42, v41, *(_QWORD *)v42);
LABEL_74:
      v40 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v10);
      if (v40 != buf)
        free(v40);
    }
  }
  else
  {
    if (*(_BYTE *)(v6 + 145))
    {
      *(_BYTE *)(v6 + 145) = 0;
      goto LABEL_24;
    }
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v11 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#cltm,fSparseDataQueryInProgress flag already false, not expected.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      *(_WORD *)v42 = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 17, "#cltm,fSparseDataQueryInProgress flag already false, not expected.", v42, v41, *(_QWORD *)v42);
      goto LABEL_74;
    }
  }
LABEL_24:
  if (a2)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v12 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(a2, "code");
      v14 = objc_msgSend(a2, "domain");
      v15 = objc_msgSend(a2, "localizedDescription");
      *(_DWORD *)buf = 134349571;
      *(_QWORD *)v46 = v13;
      *(_WORD *)&v46[8] = 2114;
      v47 = v14;
      v48 = 2113;
      v49 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#cltm,RunningTrack data query, error:%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v28 = qword_10229FC58;
      v29 = objc_msgSend(a2, "code");
      v30 = objc_msgSend(a2, "domain");
      v31 = objc_msgSend(a2, "localizedDescription");
      *(_DWORD *)v42 = 134349571;
      *(_QWORD *)&v42[4] = v29;
      *(_WORD *)&v42[12] = 2114;
      *(_QWORD *)&v42[14] = v30;
      v43 = 2113;
      v44 = v31;
      LODWORD(v41) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 16, "#cltm,RunningTrack data query, error:%{public}lld (%{public}@) \"%{private}@\"", v42, v41);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  v16 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (a2 && !v16)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v17 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#cltm,No track data obtained from the query", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      *(_WORD *)v42 = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,No track data obtained from the query", v42, v41);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    if (*(_BYTE *)(v6 + 144) || *(_BYTE *)(v6 + 145))
    {
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v18 = qword_10229FC58;
      if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(unsigned __int8 *)(v6 + 144);
        v20 = *(unsigned __int8 *)(v6 + 145);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v46 = v19;
        *(_WORD *)&v46[4] = 1026;
        *(_DWORD *)&v46[6] = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#cltm,Cannot release CLTrackRunGeoMapRunningTrackDataManager os_transaction nor clear tiles from memory due to another ongoing query,fFullDataQueryInProgress,%{public}d,fSparseDataQueryInProgress,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC50 == -1)
        {
LABEL_69:
          v36 = *(unsigned __int8 *)(v6 + 144);
          v37 = *(unsigned __int8 *)(v6 + 145);
          *(_DWORD *)v42 = 67240448;
          *(_DWORD *)&v42[4] = v36;
          *(_WORD *)&v42[8] = 1026;
          *(_DWORD *)&v42[10] = v37;
          LODWORD(v41) = 14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,Cannot release CLTrackRunGeoMapRunningTrackDataManager os_transaction nor clear tiles from memory due to another ongoing query,fFullDataQueryInProgress,%{public}d,fSparseDataQueryInProgress,%{public}d", v42, v41, *(_OWORD *)v42);
          v39 = (uint8_t *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v38);
          if (v39 != buf)
            free(v39);
          return;
        }
LABEL_76:
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
        goto LABEL_69;
      }
      return;
    }
LABEL_54:
    sub_10077E598(*(void **)(v6 + 88));
    if (*(_QWORD *)v6)
    {

      *(_QWORD *)v6 = 0;
    }
    return;
  }
  sub_1013A8728(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), (_OWORD *)(a1 + 56), (double *)(a1 + 72), a3 ^ 1, a2 == 0);
  if (!*(_BYTE *)(v6 + 144) && !*(_BYTE *)(v6 + 145))
    goto LABEL_54;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021523B8);
  v21 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int8 *)(v6 + 144);
    v23 = *(unsigned __int8 *)(v6 + 145);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v46 = v22;
    *(_WORD *)&v46[4] = 1026;
    *(_DWORD *)&v46[6] = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#cltm,Cannot release CLTrackRunGeoMapRunningTrackDataManager os_transaction nor clear tiles from memory due to another ongoing query,fFullDataQueryInProgress,%{public}d,fSparseDataQueryInProgress,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 == -1)
      goto LABEL_69;
    goto LABEL_76;
  }
}

void sub_10077E598(void *a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_1021523B8);
  v2 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cltm,Clearing track tiles and destroying GeoCodec zone", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v4[0] = 0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,Clearing track tiles and destroying GeoCodec zone", v4, 2);
    sub_100512490("Generic", 1, 0, 2, "static void CLTrackRunGeoMapRunningTrackDataManager::ClearTrackTilesAndDestroyGeoCodecMallocZone(const GEOMapFeatureAccess *)", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  if (a1)
    GEOResetGeoCodecsAllocator(objc_msgSend(a1, "clearRunningTrackTiles"));
}

uint64_t sub_10077E738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10077E748(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10077E758(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  if (*(_QWORD *)a1)
  {
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v2 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cltm,%s,os_transaction already taken, not taking another", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v8 = 136315138;
      v9 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltm,%s,os_transaction already taken, not taking another", (const char *)&v8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::ClTrackRunGeoMapDataTransaction::Create()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v7 = (_QWORD *)*v7;
    *(_QWORD *)a1 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", v7);
  }
}

uint64_t sub_10077E950(uint64_t result, _OWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 112);
  *(_OWORD *)(result + 96) = *a2;
  if (!v2)
    *(_BYTE *)(result + 112) = 1;
  return result;
}

void sub_10077E970(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  unsigned int v13;

  v3 = *(void **)(a1 + 88);
  if (v3 && objc_msgSend(v3, "allowNetworkTileLoad") != (_DWORD)a2)
  {
    objc_msgSend(*(id *)(a1 + 88), "setAllowNetworkTileLoad:", a2);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_1021523B8);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(*(id *)(a1 + 88), "allowNetworkTileLoad");
      *(_DWORD *)buf = 67240192;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltm,Changed allowNetworkTileLoad to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021523B8);
      v7 = qword_10229FC58;
      v8 = objc_msgSend(*(id *)(a1 + 88), "allowNetworkTileLoad");
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#cltm,Changed allowNetworkTileLoad to %{public}d", v11, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::SetNetworkTileLoadState(const BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

uint64_t sub_10077EB50(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10077EB94(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10077EBC0(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

BOOL sub_10077EBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  float v44[9];
  _BYTE v45[36];

  v6 = sub_10012C7A4((float *)a2);
  v8 = v7;
  v10 = v9;
  v11 = *(float *)(a2 + 16);
  v12 = *(float *)(a2 + 20);
  v13 = *(float *)(a2 + 24);
  sub_100B61F44((float *)a2, v44);
  sub_10053352C((uint64_t)v44, (uint64_t)v45);
  v14 = sub_1005335A4((uint64_t)v45, (float *)(a2 + 28));
  v16 = 0;
  v17 = 0.0;
  do
  {
    v17 = v17 + (float)(*(float *)(a2 + 28 + v16) * *(float *)(a2 + 28 + v16));
    v16 += 4;
  }
  while (v16 != 12);
  v18 = sqrt(v14 * v14 + v15 * v15);
  *(float *)(a1 + 32) = *(float *)(a1 + 32) + v18;
  ++*(_QWORD *)(a1 + 40);
  *(float *)a1 = sqrtf(v17) + *(float *)a1;
  v19 = *(_QWORD *)(a1 + 8) + 1;
  *(_QWORD *)(a1 + 8) = v19;
  v20 = fabsf((float)((float)(v8 * v12) + (float)(v6 * v11)) + (float)(v10 * v13)) + *(float *)(a1 + 16);
  *(float *)(a1 + 16) = v20;
  v21 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v21;
  if (v19 >= 0x100)
  {
    if (v21)
      v22 = v20 / (float)(unint64_t)v21;
    else
      v22 = 0.0;
    v23 = *(unsigned __int16 *)(a1 + 108);
    v24 = *(unsigned __int16 *)(a1 + 110);
    v25 = *(unsigned int *)(a1 + 112);
    if (v23 + v24 >= v25)
      v26 = *(unsigned int *)(a1 + 112);
    else
      v26 = 0;
    *(float *)(a1 + 108 + 4 * (v23 + v24 - v26) + 8) = v22;
    if (v25 <= v24)
    {
      v27 = v23 + 1;
      if (v27 < v25)
        LOWORD(v25) = 0;
      *(_WORD *)(a1 + 108) = v27 - v25;
    }
    else
    {
      *(_WORD *)(a1 + 110) = v24 + 1;
    }
    *(_BYTE *)(a1 + 92) = 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    sub_1004786E8(a1 + 92);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 96);
    v28 = *(_QWORD *)(a1 + 8);
    if (v28)
      v29 = *(float *)a1 / (float)v28;
    else
      v29 = 0.0;
    v30 = *(unsigned __int16 *)(a1 + 64);
    v31 = *(unsigned __int16 *)(a1 + 66);
    v32 = *(unsigned int *)(a1 + 68);
    if (v30 + v31 >= v32)
      v33 = *(unsigned int *)(a1 + 68);
    else
      v33 = 0;
    *(float *)(a1 + 64 + 4 * (v30 + v31 - v33) + 8) = v29;
    if (v32 <= v31)
    {
      v34 = v30 + 1;
      if (v34 < v32)
        LOWORD(v32) = 0;
      *(_WORD *)(a1 + 64) = v34 - v32;
    }
    else
    {
      *(_WORD *)(a1 + 66) = v31 + 1;
    }
    *(_BYTE *)(a1 + 48) = 1;
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    sub_1004786E8(a1 + 48);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 52);
    v35 = *(_QWORD *)(a1 + 40);
    if (v35)
      v36 = *(float *)(a1 + 32) / (float)v35;
    else
      v36 = 0.0;
    v37 = fabsf(v36);
    v38 = *(unsigned __int16 *)(a1 + 152);
    v39 = *(unsigned __int16 *)(a1 + 154);
    v40 = *(unsigned int *)(a1 + 156);
    if (v38 + v39 >= v40)
      v41 = *(unsigned int *)(a1 + 156);
    else
      v41 = 0;
    *(float *)(a1 + 152 + 4 * (v38 + v39 - v41) + 8) = v37;
    if (v40 <= v39)
    {
      v42 = v38 + 1;
      if (v42 < v40)
        LOWORD(v40) = 0;
      *(_WORD *)(a1 + 152) = v42 - v40;
    }
    else
    {
      *(_WORD *)(a1 + 154) = v39 + 1;
    }
    *(_BYTE *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    sub_1004786E8(a1 + 136);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 140);
    *(_QWORD *)a3 = *(_QWORD *)(a2 + 48);
  }
  return v19 > 0xFF;
}

int32x2_t *sub_10077EECC(int32x2_t *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = (int32x2_t)a2[1];
    *(_OWORD *)__dst->i8 = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  __dst[6] = vdup_n_s32(0xC61C3C00);
  __dst[7].i32[0] = -971228160;
  __dst[8] = (int32x2_t)0xBFF0000000000000;
  return __dst;
}

void sub_10077EF40(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

void sub_10077F010(id a1)
{
  qword_102304520 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSensorMonitorSilo"));
}

id sub_10077FFD8(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5;
  _BYTE v7[320];

  v5 = *a2;
  memcpy(v7, __src, sizeof(v7));
  return objc_msgSend(a4, "onStepNotification:data:", v5, v7);
}

void sub_100780028(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const void *v11;
  uint64_t v12;
  _OWORD v13[10];
  _BYTE v14[31];
  void *v15;
  void *v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *(_OWORD *)(a3 + 144);
  v13[8] = *(_OWORD *)(a3 + 128);
  v13[9] = v6;
  *(_OWORD *)v14 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v14[15] = *(_OWORD *)(a3 + 175);
  v7 = *(_OWORD *)(a3 + 80);
  v13[4] = *(_OWORD *)(a3 + 64);
  v13[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v13[6] = *(_OWORD *)(a3 + 96);
  v13[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v13[0] = *(_OWORD *)a3;
  v13[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v13[2] = *(_OWORD *)(a3 + 32);
  v13[3] = v10;
  v16 = 0;
  v15 = 0;
  v11 = *(const void **)(a3 + 191);
  v12 = *(_QWORD *)(a3 + 199);
  v17 = 0;
  sub_1007855D8(&v15, v11, v12, v12 - (_QWORD)v11);
  objc_msgSend(a4, "onFallSnippetNotification:data:", v5, v13);
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_1007800D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 191);
  if (v3)
  {
    *(_QWORD *)(v1 + 199) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007800F0(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onOdometerNotification:data:", v4, v12);
}

id sub_10078014C(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v4 = *a2;
  v5 = a3[1];
  v8[0] = *a3;
  v8[1] = v5;
  v6 = a3[3];
  v8[2] = a3[2];
  v8[3] = v6;
  return objc_msgSend(a4, "onCatherineNotification:data:", v4, v8);
}

id sub_100780188(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", a2, a3);
}

void sub_100780A5C(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  __int16 v9;
  xpc_activity_state_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  xpc_activity_state_t state;

  objc_msgSend(*(id *)(a1 + 32), "onAppUninstallationCheckActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102152460);
    v3 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      v12 = "com.apple.locationd.AppUninstallationCheck";
      v13 = 2050;
      state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102152460);
      v4 = qword_10229FF28;
      v7 = 136446466;
      v8 = "com.apple.locationd.AppUninstallationCheck";
      v9 = 2050;
      v10 = xpc_activity_get_state(a2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", &v7, 22);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLSensorMonitor scheduleAppUninstallationCheck]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100780F34(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  id v13;
  NSObject *v14;
  xpc_activity_state_t state;
  uint64_t v16;
  xpc_activity_state_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  const char *v27;
  __int16 v28;
  xpc_activity_state_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  xpc_activity_state_t v33;
  _BYTE v34[128];

  if ((objc_msgSend(*(id *)(a1 + 32), "deferXpcActivityIfNecessary:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v21 = a1;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v22, v34, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v23;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v23 != v6)
            objc_enumerationMutation(a2);
          v8 = *(char **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v7);
          if (qword_10229FF20 != -1)
            dispatch_once(&qword_10229FF20, &stru_102152460);
          v9 = qword_10229FF28;
          if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v31 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "App deleted: %@", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF20 != -1)
              dispatch_once(&qword_10229FF20, &stru_102152460);
            v26 = 138412290;
            v27 = v8;
            LODWORD(v20) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 0, "App deleted: %@", &v26, v20);
            v12 = (uint8_t *)v11;
            sub_100512490("Generic", 1, 0, 2, "-[CLSensorMonitor clearConfigurationsForUninstalledApps:]_block_invoke", "%s\n", v11);
            if (v12 != buf)
              free(v12);
          }
          if (objc_msgSend(objc_msgSend(v8, "pathExtension"), "isEqualToString:", CFSTR("watchkitapp")))
            v8 = (char *)objc_msgSend(v8, "stringByDeletingPathExtension");
          v10 = sub_100EFA98C();
          sub_100EFD514(v10, (uint64_t)v8);
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v13 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v22, v34, 16);
        v5 = v13;
      }
      while (v13);
    }
    if (!xpc_activity_set_state(*(xpc_activity_t *)(v21 + 40), 5))
    {
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102152460);
      v14 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_FAULT))
      {
        state = xpc_activity_get_state(*(xpc_activity_t *)(v21 + 40));
        *(_DWORD *)buf = 136446466;
        v31 = "com.apple.locationd.AppUninstallationCheck";
        v32 = 2050;
        v33 = state;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Done. Current state is %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102152460);
        v16 = qword_10229FF28;
        v17 = xpc_activity_get_state(*(xpc_activity_t *)(v21 + 40));
        v26 = 136446466;
        v27 = "com.apple.locationd.AppUninstallationCheck";
        v28 = 2050;
        v29 = v17;
        LODWORD(v20) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 17, "Failed to mark %{public}s activity as Done. Current state is %{public}ld", &v26, v20);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "-[CLSensorMonitor clearConfigurationsForUninstalledApps:]_block_invoke", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
  }
}

Class sub_10078522C()
{
  Class result;

  sub_100785264();
  result = objc_getClass("SRSensorWriter");
  qword_102304530 = (uint64_t)result;
  off_1022A41F8 = sub_1007852B4;
  return result;
}

void *sub_100785264()
{
  void *result;

  result = (void *)qword_102304538;
  if (!qword_102304538)
  {
    result = dlopen("/System/Library/Frameworks/SensorKit.framework/SensorKit", 2);
    qword_102304538 = (uint64_t)result;
    if (!result)
    {
      result = dlopen("/System/Library/PrivateFrameworks/SensorKit.framework/SensorKit", 2);
      qword_102304538 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t sub_1007852B4()
{
  return qword_102304530;
}

uint64_t sub_1007852C0()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorPedometerData");
  if (v1)
  {
    result = *v1;
    qword_102304540 = result;
  }
  else
  {
    result = qword_102304540;
  }
  off_1022A4200 = sub_10078530C;
  return result;
}

uint64_t sub_10078530C()
{
  return qword_102304540;
}

void sub_100785318(id a1)
{
  qword_1022A0258 = (uint64_t)os_log_create("com.apple.locationd.Core", "SensorKit");
}

uint64_t sub_100785344()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorOdometerSuitability");
  if (v1)
  {
    result = *v1;
    qword_102304548 = result;
  }
  else
  {
    result = qword_102304548;
  }
  off_1022A4208 = sub_100785390;
  return result;
}

uint64_t sub_100785390()
{
  return qword_102304548;
}

uint64_t sub_10078539C()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorFallStatistics");
  if (v1)
  {
    result = *v1;
    qword_102304550 = result;
  }
  else
  {
    result = qword_102304550;
  }
  off_1022A4210 = sub_1007853E8;
  return result;
}

uint64_t sub_1007853E8()
{
  return qword_102304550;
}

uint64_t sub_1007853F4()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorElevation");
  if (v1)
  {
    result = *v1;
    qword_102304558 = result;
  }
  else
  {
    result = qword_102304558;
  }
  off_1022A4218 = sub_100785440;
  return result;
}

uint64_t sub_100785440()
{
  return qword_102304558;
}

uint64_t sub_10078544C()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorOdometer");
  if (v1)
  {
    result = *v1;
    qword_102304560 = result;
  }
  else
  {
    result = qword_102304560;
  }
  off_1022A4220 = sub_100785498;
  return result;
}

uint64_t sub_100785498()
{
  return qword_102304560;
}

uint64_t sub_1007854A4()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorHeartRate");
  if (v1)
  {
    result = *v1;
    qword_102304568 = result;
  }
  else
  {
    result = qword_102304568;
  }
  off_1022A4228 = sub_1007854F0;
  return result;
}

uint64_t sub_1007854F0()
{
  return qword_102304568;
}

uint64_t sub_1007854FC()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_100785264();
  v1 = (uint64_t *)dlsym(v0, "SRSensorPhysicalActivityEvents");
  if (v1)
  {
    result = *v1;
    qword_102304570 = result;
  }
  else
  {
    result = qword_102304570;
  }
  off_1022A4230 = sub_100785548;
  return result;
}

uint64_t sub_100785548()
{
  return qword_102304570;
}

void sub_100785554(id a1)
{
  qword_10229FF28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100785580(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_1007855AC(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_1007855D8(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_100785650(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100785634(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100785650(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_100259694();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

NSDictionary *sub_100785690()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  sub_1015A2E04(qword_102304500, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304500, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_102220438;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_102220450;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_102220468;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_102220480;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_102220498;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1022204B0;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1022204C8;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_102304518 = (uint64_t)result;
  return result;
}

uint64_t sub_100785810(_DWORD *a1, CLMotionActivity *this)
{
  uint64_t result;
  _DWORD *v5;

  ++*a1;
  result = CLMotionActivity::isWalking(this);
  if ((result & 1) != 0 || (result = CLMotionActivity::isRunning(this), (_DWORD)result))
  {
    v5 = a1 + 1;
LABEL_4:
    ++*v5;
    return result;
  }
  result = CLMotionActivity::isCycling(this);
  if ((_DWORD)result)
  {
    v5 = a1 + 2;
    goto LABEL_4;
  }
  result = CLMotionActivity::isInVehicle(this);
  if ((_DWORD)result)
  {
    v5 = a1 + 3;
    goto LABEL_4;
  }
  return result;
}

void sub_10078588C(uint64_t a1, void **a2, std::string *__str, int a4, uint64_t a5, CLMotionActivity *this)
{
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type size;
  int v16;
  std::string *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  double v20;
  double v21;
  NSObject *v22;
  void *v23;
  const void *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  double v36;
  unint64_t v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint8_t *v48;
  void *__dst[2];
  void *v50;
  void *__p[2];
  void *v52;
  int v53;
  void *v54;
  __int16 v55;
  const void **v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  const void *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;

  if (*(double *)(a1 + 40) < 0.0)
    *(double *)(a1 + 40) = sub_1001FCBB4();
  v12 = (const void **)(a1 + 48);
  v13 = *(unsigned __int8 *)(a1 + 71);
  if ((v13 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(a1 + 71);
  else
    v14 = *(_QWORD *)(a1 + 56);
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v16 = (char)size;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (v14 == size)
  {
    if (v16 >= 0)
      v17 = __str;
    else
      v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(*v12, v17, *(_QWORD *)(a1 + 56)))
        goto LABEL_38;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 71))
        goto LABEL_38;
      v18 = (unsigned __int8 *)(a1 + 48);
      while (*v18 == v17->__r_.__value_.__s.__data_[0])
      {
        ++v18;
        v17 = (std::string *)((char *)v17 + 1);
        if (!--v13)
          goto LABEL_38;
      }
    }
  }
  std::string::operator=((std::string *)(a1 + 48), __str);
  v19 = *(_DWORD *)(a1 + 136);
  if (v19)
  {
    sub_100785E0C((char *)(a1 + 152), (double)v19);
    if (*(double *)(a1 + 424) > 0.0 && !sub_10011CE64(*(double *)(a1 + 408), *(double *)(a1 + 416)))
    {
      v20 = vabdd_f64(*(double *)(a5 + 76), *(double *)(a1 + 424));
      sub_100785E0C((char *)(a1 + 232), v20);
      v21 = sub_10011E634((double *)a1, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a5 + 4), *(double *)(a5 + 12), 0.0);
      sub_100785E0C((char *)(a1 + 312), v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021524C0);
      v22 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v23 = a2;
        else
          v23 = *a2;
        v24 = (const void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v24 = *v12;
        v25 = *(_DWORD *)(a1 + 176);
        v26 = *(_DWORD *)(a1 + 136);
        v27 = *(_QWORD *)(a5 + 76);
        v29 = *(_QWORD *)(a1 + 416);
        v28 = *(_QWORD *)(a1 + 424);
        v30 = *(_QWORD *)(a5 + 4);
        v31 = *(_QWORD *)(a5 + 12);
        v32 = *(_QWORD *)(a1 + 408);
        *(_DWORD *)buf = 136449027;
        v78 = v23;
        v79 = 2082;
        v80 = v24;
        v81 = 1026;
        v82 = v25;
        v83 = 1026;
        v84 = v26;
        v85 = 2050;
        v86 = v20;
        v87 = 2050;
        v88 = v21;
        v89 = 2050;
        v90 = v27;
        v91 = 2050;
        v92 = v28;
        v93 = 2049;
        v94 = v30;
        v95 = 2049;
        v96 = v31;
        v97 = 2049;
        v98 = v32;
        v99 = 2049;
        v100 = v29;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "MapsHarvestMetric,%{public}s,newTrip,%{public}s,numTrips,%{public}d,numHarvestedInLastTrip,%{public}d,durationBetweenTrips,%{public}.1lf,distanceBetweenTrip,%{public}.1lf,locationTime,%{public}.1lf,lastLocationTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,lastLL,%{private}.7lf,%{private}.7lf", buf, 0x72u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021524C0);
        if (*((char *)a2 + 23) >= 0)
          v38 = a2;
        else
          v38 = *a2;
        if (*(char *)(a1 + 71) < 0)
          v12 = (const void **)*v12;
        v39 = *(_DWORD *)(a1 + 176);
        v40 = *(_DWORD *)(a1 + 136);
        v41 = *(_QWORD *)(a5 + 76);
        v43 = *(_QWORD *)(a1 + 416);
        v42 = *(_QWORD *)(a1 + 424);
        v44 = *(_QWORD *)(a5 + 4);
        v45 = *(_QWORD *)(a5 + 12);
        v46 = *(_QWORD *)(a1 + 408);
        v53 = 136449027;
        v54 = v38;
        v55 = 2082;
        v56 = v12;
        v57 = 1026;
        v58 = v39;
        v59 = 1026;
        v60 = v40;
        v61 = 2050;
        v62 = v20;
        v63 = 2050;
        v64 = v21;
        v65 = 2050;
        v66 = v41;
        v67 = 2050;
        v68 = v42;
        v69 = 2049;
        v70 = v44;
        v71 = 2049;
        v72 = v45;
        v73 = 2049;
        v74 = v46;
        v75 = 2049;
        v76 = v43;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "MapsHarvestMetric,%{public}s,newTrip,%{public}s,numTrips,%{public}d,numHarvestedInLastTrip,%{public}d,durationBetweenTrips,%{public}.1lf,distanceBetweenTrip,%{public}.1lf,locationTime,%{public}.1lf,lastLocationTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,lastLL,%{private}.7lf,%{private}.7lf", &v53, 114);
        v48 = (uint8_t *)v47;
        sub_100512490("Generic", 1, 0, 2, "void CLMapsTracksAndRealTimeHarvestingMetric::update(const std::string &, const std::string &, const BOOL, const CLDaemonLocation &, const CLMotionActivity &)", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__p, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v52 = a2[2];
  }
  sub_100785EF8(a1, (uint64_t *)__p);
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
LABEL_38:
  sub_100785810((_DWORD *)(a1 + 72), this);
  sub_100785810((_DWORD *)(a1 + 136), this);
  v33 = *(_DWORD *)(a5 + 96);
  if ((v33 & 0xFFFFFFF7) == 1)
    v34 = a4;
  else
    v34 = 3;
  if (v33 == 3)
    v35 = 2;
  else
    v35 = v34;
  if (v35 != 3)
    sub_100785810((_DWORD *)(a1 + 16 * v35 + 88), this);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a5 + 4);
  v36 = *(double *)(a5 + 76);
  *(double *)(a1 + 424) = v36;
  HIDWORD(v37) = -2023406815 * (int)v36 + 9544368;
  LODWORD(v37) = HIDWORD(v37);
  if ((v37 >> 4) <= 0x123456)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100115CE4(__dst, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v50 = a2[2];
    }
    sub_100785EF8(a1, (uint64_t *)__dst);
    if (SHIBYTE(v50) < 0)
      operator delete(__dst[0]);
  }
}

void sub_100785DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

char *sub_100785E0C(char *result, double a2)
{
  char *v2;
  int v3;
  double v4;
  double v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;

  v2 = result;
  v12 = a2;
  v3 = *((_DWORD *)result + 6);
  if (v3)
  {
    v4 = *((double *)result + 1);
  }
  else
  {
    *((double *)result + 1) = a2;
    *((double *)result + 2) = a2;
    v4 = a2;
  }
  v5 = fabs(a2);
  if (v5 > fabs(v4))
    *((double *)result + 1) = a2;
  if (v5 < fabs(*((double *)result + 2)))
    *((double *)result + 2) = a2;
  v6 = v3 + 1;
  *((_DWORD *)result + 6) = v6;
  v7 = *((double *)result + 4);
  v8 = a2 - v7;
  v9 = v7 + (a2 - v7) / (double)v6;
  v10 = *((double *)result + 5) + (a2 - v9) * v8;
  *((double *)result + 4) = v9;
  *((double *)result + 5) = v10;
  *((double *)result + 6) = a2 * a2 / (double)v6 + *((double *)result + 6) - *((double *)result + 6) / (double)v6;
  if (*(int *)result >= 1)
  {
    result = sub_100787334((uint64_t)(result + 56), *((char **)result + 7), (char *)&v12);
    v11 = *((_QWORD *)v2 + 8);
    if (*(int *)v2 < (unint64_t)((v11 - *((_QWORD *)v2 + 7)) >> 3))
      *((_QWORD *)v2 + 8) = v11 - 8;
  }
  return result;
}

void sub_100785EF8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  int v56;
  uint64_t *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  uint8_t buf[4];
  uint64_t *v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  __int16 v180;
  int v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  uint64_t v193;
  __int16 v194;
  uint64_t v195;
  __int16 v196;
  uint64_t v197;
  __int16 v198;
  int v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  uint64_t v205;
  __int16 v206;
  int v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  __int16 v214;
  int v215;
  __int16 v216;
  uint64_t v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  __int16 v226;
  int v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  int v233;
  __int16 v234;
  uint64_t v235;
  __int16 v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021524C0);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2;
    if (*((char *)a2 + 23) < 0)
      v5 = (uint64_t *)*a2;
    v6 = *(_DWORD *)(a1 + 176);
    v7 = *(_DWORD *)(a1 + 396);
    v149 = v5;
    v8 = *(_DWORD *)(a1 + 404);
    v155 = v7;
    v9 = *(_DWORD *)(a1 + 76);
    v159 = v8;
    v10 = *(_DWORD *)(a1 + 84);
    v163 = v9;
    v11 = *(_DWORD *)(a1 + 92);
    v167 = v10;
    v12 = *(_DWORD *)(a1 + 100);
    v171 = v11;
    v13 = *(_DWORD *)(a1 + 108);
    v175 = v12;
    v14 = *(_DWORD *)(a1 + 116);
    v179 = v13;
    v15 = *(_DWORD *)(a1 + 124);
    v183 = v14;
    v16 = *(_DWORD *)(a1 + 132);
    v187 = v15;
    v17 = *(_QWORD *)(a1 + 184);
    v191 = v16;
    v193 = v17;
    v18 = *(_QWORD *)(a1 + 160);
    v19 = *(_QWORD *)(a1 + 168);
    v151 = v6;
    v195 = v18;
    v199 = v6;
    v20 = *(_QWORD *)(a1 + 248);
    v203 = *(_QWORD *)(a1 + 240);
    v21 = *(_DWORD *)(a1 + 256);
    v205 = v20;
    v22 = *(_QWORD *)(a1 + 344);
    v207 = v21;
    v209 = v22;
    v23 = *(_QWORD *)(a1 + 328);
    v211 = *(_QWORD *)(a1 + 320);
    v215 = *(_DWORD *)(a1 + 336);
    v24 = *(_QWORD *)(a1 + 448);
    v219 = *(_QWORD *)(a1 + 440);
    v25 = *(_DWORD *)(a1 + 456);
    v221 = v24;
    LODWORD(v24) = *(_DWORD *)(a1 + 516);
    v223 = v25;
    v26 = *(_DWORD *)(a1 + 524);
    v227 = v24;
    v27 = *(_QWORD *)(a1 + 424);
    v231 = v26;
    v235 = v27;
    v28 = *(_QWORD *)(a1 + 416);
    v237 = *(_QWORD *)(a1 + 408);
    v239 = v28;
    v153 = *(_DWORD *)(a1 + 392);
    v157 = *(_DWORD *)(a1 + 400);
    v161 = *(_DWORD *)(a1 + 72);
    v165 = *(_DWORD *)(a1 + 80);
    v169 = *(_DWORD *)(a1 + 88);
    v173 = *(_DWORD *)(a1 + 96);
    v177 = *(_DWORD *)(a1 + 104);
    v181 = *(_DWORD *)(a1 + 112);
    v185 = *(_DWORD *)(a1 + 120);
    v189 = *(_DWORD *)(a1 + 128);
    v197 = v19;
    v201 = *(_QWORD *)(a1 + 264);
    v213 = v23;
    v217 = *(_QWORD *)(a1 + 464);
    v225 = *(_DWORD *)(a1 + 512);
    v229 = *(_DWORD *)(a1 + 520);
    v150 = 1026;
    v152 = 1026;
    v154 = 1026;
    v156 = 1026;
    v158 = 1026;
    v160 = 1026;
    v162 = 1026;
    v164 = 1026;
    v166 = 1026;
    v168 = 1026;
    v170 = 1026;
    v172 = 1026;
    v174 = 1026;
    v176 = 1026;
    v178 = 1026;
    v180 = 1026;
    v182 = 1026;
    v184 = 1026;
    v186 = 1026;
    v188 = 1026;
    v190 = 1026;
    v198 = 1026;
    v206 = 1026;
    v214 = 1026;
    v222 = 1026;
    v224 = 1026;
    v226 = 1026;
    v228 = 1026;
    v230 = 1026;
    v232 = 1026;
    v233 = *(_DWORD *)(a1 + 528);
    v192 = 2050;
    v194 = 2050;
    v196 = 2050;
    v200 = 2050;
    v202 = 2050;
    v204 = 2050;
    v208 = 2050;
    v210 = 2050;
    v212 = 2050;
    v216 = 2050;
    v218 = 2050;
    v220 = 2050;
    v234 = 2050;
    v236 = 2049;
    v238 = 2049;
    *(_DWORD *)buf = 136457731;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MapsHarvestMetric,%{public}s,tripCount,%{public}d,rcvdTotal,%{public}d,rcvdWalk,%{public}d,rcvdCycling,%{public}d,rcvdVehicle,%{public}d,harvestedTotal,%{public}d,walking,%{public}d,cycling,%{public}d,vehicle,%{public}d,totalRegular,%{public}d,walkingRegular,%{public}d,cyclingRegular,%{public}d,vehicleRegular,%{public}d,totalProactive,%{public}d,walkingProactive,%{public}d,cyclingProactive,%{public}d,vehicleProactive,%{public}d,totalAccessory,%{public}d,walkingAccessory,%{public}d,cyclingAccessory,%{public}d,vehicleAccessory,%{public}d,tripHarvestCntAvg,%{public}.1lf,tripHarvestCntMax,%{public}.1lf,tripHarvestCnttMin,%{public}.1lf,tripHarvestCntEntryCount,%{public}d,tripsTimeGapAvg,%{public}.1lf,tripTimeGapMax,%{public}.1lf,tripsTimeGapMin,%{public}.1lf,tripTimeGapCount,%{public}d,tripDistGapAvg,%{public}.1lf,tripDistGapMax,%{public}.1lf,tripDistGapMin,%{public}.1lf,tripDistGapCount,%{public}d,uploadCountAvg,%{public}.1lf,uploadCntMax,%{public}.1lf,uploadCntMin,%{public}.1lf,numUploads,%{public}d,chargingUploads,%{public}d,proactiveUploads,%{public}d,walkingUploads,%{public}d,cyclingUploads,%{public}d,vehicleUploads,%{public}d,lastLocationTime,%{public}.1lf,lastLL,%{private}.7lf,%{private}.7lf", buf, 0x156u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021524C0);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v29 = *(_DWORD *)(a1 + 176);
    v30 = *(_DWORD *)(a1 + 392);
    v57 = a2;
    v31 = *(_DWORD *)(a1 + 396);
    v61 = v30;
    v32 = *(_DWORD *)(a1 + 400);
    v63 = v31;
    v33 = *(_DWORD *)(a1 + 404);
    v65 = v32;
    v67 = v33;
    v34 = *(_DWORD *)(a1 + 76);
    v69 = *(_DWORD *)(a1 + 72);
    v71 = v34;
    v35 = *(_DWORD *)(a1 + 84);
    v73 = *(_DWORD *)(a1 + 80);
    v75 = v35;
    v36 = *(_DWORD *)(a1 + 92);
    v77 = *(_DWORD *)(a1 + 88);
    v79 = v36;
    v37 = *(_DWORD *)(a1 + 100);
    v81 = *(_DWORD *)(a1 + 96);
    v83 = v37;
    v38 = *(_DWORD *)(a1 + 108);
    v85 = *(_DWORD *)(a1 + 104);
    v87 = v38;
    v39 = *(_DWORD *)(a1 + 116);
    v89 = *(_DWORD *)(a1 + 112);
    v40 = *(_DWORD *)(a1 + 132);
    v91 = v39;
    v41 = *(_QWORD *)(a1 + 184);
    v99 = v40;
    v101 = v41;
    v42 = *(_QWORD *)(a1 + 160);
    v43 = *(_QWORD *)(a1 + 168);
    v59 = v29;
    v103 = v42;
    v107 = v29;
    v44 = *(_QWORD *)(a1 + 248);
    v111 = *(_QWORD *)(a1 + 240);
    v45 = *(_DWORD *)(a1 + 256);
    v113 = v44;
    v46 = *(_QWORD *)(a1 + 344);
    v115 = v45;
    v117 = v46;
    v47 = *(_QWORD *)(a1 + 328);
    v119 = *(_QWORD *)(a1 + 320);
    v123 = *(_DWORD *)(a1 + 336);
    v48 = *(_QWORD *)(a1 + 448);
    v127 = *(_QWORD *)(a1 + 440);
    v49 = *(_DWORD *)(a1 + 456);
    v129 = v48;
    LODWORD(v48) = *(_DWORD *)(a1 + 516);
    v131 = v49;
    v50 = *(_DWORD *)(a1 + 524);
    v135 = v48;
    v51 = *(_QWORD *)(a1 + 424);
    v139 = v50;
    v143 = v51;
    v52 = *(_QWORD *)(a1 + 416);
    v145 = *(_QWORD *)(a1 + 408);
    v147 = v52;
    v53 = *(_DWORD *)(a1 + 124);
    v93 = *(_DWORD *)(a1 + 120);
    v95 = v53;
    v97 = *(_DWORD *)(a1 + 128);
    v105 = v43;
    v109 = *(_QWORD *)(a1 + 264);
    v121 = v47;
    v125 = *(_QWORD *)(a1 + 464);
    v133 = *(_DWORD *)(a1 + 512);
    v137 = *(_DWORD *)(a1 + 520);
    v58 = 1026;
    v60 = 1026;
    v62 = 1026;
    v64 = 1026;
    v66 = 1026;
    v68 = 1026;
    v70 = 1026;
    v72 = 1026;
    v74 = 1026;
    v76 = 1026;
    v78 = 1026;
    v80 = 1026;
    v82 = 1026;
    v84 = 1026;
    v86 = 1026;
    v88 = 1026;
    v90 = 1026;
    v92 = 1026;
    v94 = 1026;
    v96 = 1026;
    v98 = 1026;
    v106 = 1026;
    v114 = 1026;
    v122 = 1026;
    v130 = 1026;
    v132 = 1026;
    v134 = 1026;
    v136 = 1026;
    v138 = 1026;
    v140 = 1026;
    v141 = *(_DWORD *)(a1 + 528);
    v100 = 2050;
    v102 = 2050;
    v104 = 2050;
    v108 = 2050;
    v110 = 2050;
    v112 = 2050;
    v116 = 2050;
    v118 = 2050;
    v120 = 2050;
    v124 = 2050;
    v126 = 2050;
    v128 = 2050;
    v142 = 2050;
    v144 = 2049;
    v146 = 2049;
    v56 = 136457731;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "MapsHarvestMetric,%{public}s,tripCount,%{public}d,rcvdTotal,%{public}d,rcvdWalk,%{public}d,rcvdCycling,%{public}d,rcvdVehicle,%{public}d,harvestedTotal,%{public}d,walking,%{public}d,cycling,%{public}d,vehicle,%{public}d,totalRegular,%{public}d,walkingRegular,%{public}d,cyclingRegular,%{public}d,vehicleRegular,%{public}d,totalProactive,%{public}d,walkingProactive,%{public}d,cyclingProactive,%{public}d,vehicleProactive,%{public}d,totalAccessory,%{public}d,walkingAccessory,%{public}d,cyclingAccessory,%{public}d,vehicleAccessory,%{public}d,tripHarvestCntAvg,%{public}.1lf,tripHarvestCntMax,%{public}.1lf,tripHarvestCnttMin,%{public}.1lf,tripHarvestCntEntryCount,%{public}d,tripsTimeGapAvg,%{public}.1lf,tripTimeGapMax,%{public}.1lf,tripsTimeGapMin,%{public}.1lf,tripTimeGapCount,%{public}d,tripDistGapAvg,%{public}.1lf,tripDistGapMax,%{public}.1lf,tripDistGapMin,%{public}.1lf,tripDistGapCount,%{public}d,uploadCountAvg,%{public}.1lf,uploadCntMax,%{public}.1lf,uploadCntMin,%{public}.1lf,numUploads,%{public}d,chargingUploads,%{public}d,proactiveUploads,%{public}d,walkingUploads,%{public}d,cyclingUploads,%{public}d,vehicleUploads,%{public}d,lastLocationTime,%{public}.1lf,lastLL,%{private}.7lf,%{private}.7lf", &v56,
      342);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLMapsTracksAndRealTimeHarvestingMetric::outputDebugLog(const std::string)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
}

void sub_1007864D4(uint64_t a1, char *a2)
{
  char *v4;
  size_t v5;
  void **v6;
  char *v7;
  void *__p[2];
  char v9;
  _QWORD v10[8];

  if (*(double *)(a1 + 40) >= 0.0
    && vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 40)) >= 86400.0
    && *(_DWORD *)(a1 + 72))
  {
    if (a2[23] >= 0)
      v4 = a2;
    else
      v4 = *(char **)a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100786670;
    v10[3] = &unk_10214F7E8;
    v10[4] = a1;
    v10[5] = a1 + 88;
    v10[6] = a1 + 104;
    v10[7] = a1 + 120;
    AnalyticsSendEventLazy(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), v4), v10);
    if (a2[23] >= 0)
      v5 = a2[23];
    else
      v5 = *((_QWORD *)a2 + 1);
    v6 = __p;
    sub_100259584((uint64_t)__p, v5 + 10);
    if (v9 < 0)
      v6 = (void **)__p[0];
    if (v5)
    {
      if (a2[23] >= 0)
        v7 = a2;
      else
        v7 = *(char **)a2;
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, ",Submitted");
    sub_100785EF8(a1, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    sub_100787198(a1);
    if (*(double *)(a1 + 40) < 0.0)
      *(double *)(a1 + 40) = sub_1001FCBB4();
  }
}

void sub_100786654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100786670(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;
  int v8;
  double v9;
  BOOL v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  BOOL v16;
  int v17;
  double v18;
  BOOL v19;
  int v20;
  int v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  int v26;
  double v27;
  BOOL v28;
  int v29;
  int v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  int v35;
  double v36;
  BOOL v37;
  int v38;
  int v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  int v44;
  double v45;
  BOOL v46;
  int v47;
  int *v48;
  double v49;
  double v50;
  double v51;
  BOOL v52;
  int *v53;
  double v54;
  BOOL v55;
  int v56;
  int *v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  int *v62;
  double v63;
  BOOL v64;
  int v65;
  int *v66;
  double v67;
  double v68;
  double v69;
  BOOL v70;
  int *v71;
  double v72;
  BOOL v73;
  int v74;
  _QWORD v76[55];
  _QWORD v77[55];

  v2 = *(_QWORD *)(a1 + 32);
  v76[0] = CFSTR("tripCount");
  v77[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 176));
  v76[1] = CFSTR("totalLocationsReceived");
  v77[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 392));
  v76[2] = CFSTR("locReceivedWalking");
  v77[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 396));
  v76[3] = CFSTR("locReceivedCycling");
  v77[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 400));
  v76[4] = CFSTR("locReceivedVehicle");
  v77[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 404));
  v76[5] = CFSTR("harvestCountTotal");
  v77[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 72));
  v76[6] = CFSTR("harvestCountWalking");
  v77[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 76));
  v76[7] = CFSTR("harvestCountCycling");
  v77[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 80));
  v76[8] = CFSTR("harvestCountVehicle");
  v77[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 84));
  v76[9] = CFSTR("regularGPSCountTotal");
  v77[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 40));
  v76[10] = CFSTR("regularGPSCountWalking");
  v77[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4));
  v76[11] = CFSTR("regularGPSCountCycling");
  v77[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));
  v76[12] = CFSTR("regularGPSCountVehicle");
  v77[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12));
  v76[13] = CFSTR("proactiveGPSCountTotal");
  v77[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 48));
  v76[14] = CFSTR("proactiveGPSCountWalking");
  v77[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4));
  v76[15] = CFSTR("proactiveGPSCountCycling");
  v77[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8));
  v76[16] = CFSTR("proactiveGPSCountVehicle");
  v77[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 12));
  v76[17] = CFSTR("accessoryCountTotal");
  v77[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 56));
  v76[18] = CFSTR("accessoryCountWalking");
  v77[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 56) + 4));
  v76[19] = CFSTR("accessoryCountCycling");
  v77[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8));
  v76[20] = CFSTR("accessoryCountVehicle");
  v77[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 56) + 12));
  v76[21] = CFSTR("harvestedPercentage");
  v3 = *(_DWORD *)(v2 + 392);
  v4 = 0.0;
  v5 = 0.0;
  if (v3)
  {
    v6 = (double)*(int *)(v2 + 72) / (double)v3 * 100.0;
    v7 = v6 > 1.0 || v6 <= 0.0;
    v5 = (double)(int)llround(v6);
    if (!v7)
      v5 = 1.0;
  }
  v77[21] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5);
  v76[22] = CFSTR("harvestedPercentageWalking");
  v8 = *(_DWORD *)(v2 + 396);
  if (v8)
  {
    v9 = (double)*(int *)(v2 + 76) / (double)v8 * 100.0;
    v10 = v9 > 1.0 || v9 <= 0.0;
    v11 = llround(v9);
    if (v10)
      v4 = (double)v11;
    else
      v4 = 1.0;
  }
  v77[22] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4);
  v76[23] = CFSTR("harvestedPercentageCycling");
  v12 = *(_DWORD *)(v2 + 400);
  v13 = 0.0;
  v14 = 0.0;
  if (v12)
  {
    v15 = (double)*(int *)(v2 + 80) / (double)v12 * 100.0;
    v16 = v15 > 1.0 || v15 <= 0.0;
    v14 = (double)(int)llround(v15);
    if (!v16)
      v14 = 1.0;
  }
  v77[23] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v14);
  v76[24] = CFSTR("harvestedPercentageVehicle");
  v17 = *(_DWORD *)(v2 + 404);
  if (v17)
  {
    v18 = (double)*(int *)(v2 + 84) / (double)v17 * 100.0;
    v19 = v18 > 1.0 || v18 <= 0.0;
    v20 = llround(v18);
    if (v19)
      v13 = (double)v20;
    else
      v13 = 1.0;
  }
  v77[24] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v13);
  v76[25] = CFSTR("regularGPSPercentage");
  v21 = *(_DWORD *)(v2 + 72);
  v22 = 0.0;
  v23 = 0.0;
  if (v21)
  {
    v24 = (double)**(int **)(a1 + 40) / (double)v21 * 100.0;
    v25 = v24 > 1.0 || v24 <= 0.0;
    v23 = (double)(int)llround(v24);
    if (!v25)
      v23 = 1.0;
  }
  v77[25] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v23);
  v76[26] = CFSTR("proactiveGPSPercentage");
  v26 = *(_DWORD *)(v2 + 72);
  if (v26)
  {
    v27 = (double)**(int **)(a1 + 48) / (double)v26 * 100.0;
    v28 = v27 > 1.0 || v27 <= 0.0;
    v29 = llround(v27);
    if (v28)
      v22 = (double)v29;
    else
      v22 = 1.0;
  }
  v77[26] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v22);
  v76[27] = CFSTR("accessoryPercentage");
  v30 = *(_DWORD *)(v2 + 72);
  v31 = 0.0;
  v32 = 0.0;
  if (v30)
  {
    v33 = (double)**(int **)(a1 + 56) / (double)v30 * 100.0;
    v34 = v33 > 1.0 || v33 <= 0.0;
    v32 = (double)(int)llround(v33);
    if (!v34)
      v32 = 1.0;
  }
  v77[27] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v32);
  v76[28] = CFSTR("walkingPercentage");
  v35 = *(_DWORD *)(v2 + 72);
  if (v35)
  {
    v36 = (double)*(int *)(v2 + 76) / (double)v35 * 100.0;
    v37 = v36 > 1.0 || v36 <= 0.0;
    v38 = llround(v36);
    if (v37)
      v31 = (double)v38;
    else
      v31 = 1.0;
  }
  v77[28] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v31);
  v76[29] = CFSTR("cyclingPercentage");
  v39 = *(_DWORD *)(v2 + 72);
  v40 = 0.0;
  v41 = 0.0;
  if (v39)
  {
    v42 = (double)*(int *)(v2 + 80) / (double)v39 * 100.0;
    v43 = v42 > 1.0 || v42 <= 0.0;
    v41 = (double)(int)llround(v42);
    if (!v43)
      v41 = 1.0;
  }
  v77[29] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v41);
  v76[30] = CFSTR("vehiclePercentage");
  v44 = *(_DWORD *)(v2 + 72);
  if (v44)
  {
    v45 = (double)*(int *)(v2 + 84) / (double)v44 * 100.0;
    v46 = v45 > 1.0 || v45 <= 0.0;
    v47 = llround(v45);
    if (v46)
      v40 = (double)v47;
    else
      v40 = 1.0;
  }
  v77[30] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v40);
  v76[31] = CFSTR("walkingPercentageRegularGPS");
  v48 = *(int **)(a1 + 40);
  v49 = 0.0;
  v50 = 0.0;
  if (*v48)
  {
    v51 = (double)v48[1] / (double)*v48 * 100.0;
    v52 = v51 > 1.0 || v51 <= 0.0;
    v50 = (double)(int)llround(v51);
    if (!v52)
      v50 = 1.0;
  }
  v77[31] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v50);
  v76[32] = CFSTR("cyclingPercentageRegularGPS");
  v53 = *(int **)(a1 + 40);
  if (*v53)
  {
    v54 = (double)v53[2] / (double)*v53 * 100.0;
    v55 = v54 > 1.0 || v54 <= 0.0;
    v56 = llround(v54);
    if (v55)
      v49 = (double)v56;
    else
      v49 = 1.0;
  }
  v77[32] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v49);
  v76[33] = CFSTR("vehiclePercentageRegularGPS");
  v57 = *(int **)(a1 + 40);
  v58 = 0.0;
  v59 = 0.0;
  if (*v57)
  {
    v60 = (double)v57[3] / (double)*v57 * 100.0;
    v61 = v60 > 1.0 || v60 <= 0.0;
    v59 = (double)(int)llround(v60);
    if (!v61)
      v59 = 1.0;
  }
  v77[33] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v59);
  v76[34] = CFSTR("walkingPercentageProactiveGPS");
  v62 = *(int **)(a1 + 48);
  if (*v62)
  {
    v63 = (double)v62[1] / (double)*v62 * 100.0;
    v64 = v63 > 1.0 || v63 <= 0.0;
    v65 = llround(v63);
    if (v64)
      v58 = (double)v65;
    else
      v58 = 1.0;
  }
  v77[34] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v58);
  v76[35] = CFSTR("cyclingPercentageProactiveGPS");
  v66 = *(int **)(a1 + 48);
  v67 = 0.0;
  v68 = 0.0;
  if (*v66)
  {
    v69 = (double)v66[2] / (double)*v66 * 100.0;
    v70 = v69 > 1.0 || v69 <= 0.0;
    v68 = (double)(int)llround(v69);
    if (!v70)
      v68 = 1.0;
  }
  v77[35] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v68);
  v76[36] = CFSTR("vehiclePercentageProactiveGPS");
  v71 = *(int **)(a1 + 48);
  if (*v71)
  {
    v72 = (double)v71[3] / (double)*v71 * 100.0;
    v73 = v72 > 1.0 || v72 <= 0.0;
    v74 = llround(v72);
    if (v73)
      v67 = (double)v74;
    else
      v67 = 1.0;
  }
  v77[36] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v67);
  v76[37] = CFSTR("harvestCountPerTripAverage");
  v77[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 184));
  v76[38] = CFSTR("harvestCountPerTripMax");
  v77[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 160));
  v76[39] = CFSTR("harvestCountPerTripMin");
  v77[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 168));
  v76[40] = CFSTR("tripsTimeGapAvg");
  v77[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 264));
  v76[41] = CFSTR("tripsTimeGapMax");
  v77[41] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 240));
  v76[42] = CFSTR("tripsTimeGapMin");
  v77[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 248));
  v76[43] = CFSTR("tripsDistanceGapAvg");
  v77[43] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 344));
  v76[44] = CFSTR("tripsDistanceGapMax");
  v77[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 320));
  v76[45] = CFSTR("tripsDistanceGapMin");
  v77[45] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 328));
  v76[46] = CFSTR("uploadedCountAvg");
  v77[46] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 464));
  v76[47] = CFSTR("uploadedCountMax");
  v77[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 440));
  v76[48] = CFSTR("uploadedCountMin");
  v77[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(v2 + 448));
  v76[49] = CFSTR("numUploads");
  v77[49] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 456));
  v76[50] = CFSTR("numUploadsWhileCharging");
  v77[50] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 512));
  v76[51] = CFSTR("numProactiveLocationUploads");
  v77[51] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 516));
  v76[52] = CFSTR("numWalkingModeUploads");
  v77[52] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 520));
  v76[53] = CFSTR("numCyclingModeUploads");
  v77[53] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 524));
  v76[54] = CFSTR("numVehicleModeUploads");
  v77[54] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 528));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 55);
}

double sub_100787198(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  std::string::assign((std::string *)(a1 + 48), "");
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  return result;
}

char *sub_100787240(int32x2_t *a1, int a2, uint64_t a3, int a4, unint64_t a5)
{
  char *result;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64x2_t v14;
  int v15;

  result = sub_100785E0C((char *)&a1[54], (double)*(int *)a3);
  v11 = (*(_DWORD *)a3 - a2);
  v12 = (int)v11 >= 1 && v11 < a5;
  if (a2 < 1)
    v12 = 0;
  if (a2 > a5)
    v12 = 1;
  a1[64].i32[1] += v12;
  a1[64].i32[0] += a4;
  v13 = *(_QWORD *)(a3 + 4);
  v14.i64[0] = v13;
  v14.i64[1] = HIDWORD(v13);
  a1[65] = vsub_s32(a1[65], vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)vdupq_n_s64(a5))));
  if (*(unsigned int *)(a3 + 12) < a5)
    v15 = a1[66].i32[0];
  else
    v15 = a1[66].i32[0] + 1;
  a1[66].i32[0] = v15;
  return result;
}

uint64_t sub_100787308(uint64_t a1, char *a2, CLMotionActivity *a3)
{
  sub_1007864D4(a1, a2);
  return sub_100785810((_DWORD *)(a1 + 392), a3);
}

char *sub_100787334(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_100259694();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10025E6A0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10025E6A0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_100787574((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10078753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100787574(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_100787638(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100787664(uint64_t a1@<X8>)
{
  _BYTE *v2;
  int v3;
  void *__p[2];
  uint64_t v5;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = 0x100000003;
  *(_WORD *)(a1 + 8) = 0;
  v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_100115CE4(v2, __p[0], (unint64_t)__p[1]);
    v3 = SHIBYTE(v5);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void sub_1007876E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100787704(uint64_t a1)
{
  _BYTE v3[16];
  void *__p;
  char v5;

  sub_100787664((uint64_t)v3);
  sub_100787774(a1, (uint64_t)v3, (const char **)&off_1021524E0);
  if (v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_100787758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100787774(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v5 = sub_100631F84(a1, a2);
  if (sub_1000CC4F4(v5))
  {
    sub_100634364(a1, "BeaconStatus", a3, 0, 0);
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "iB: state No access to state DB", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152570);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state No access to state DB", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLBeaconMonitorDatabase::CLBeaconMonitorDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return a1;
}

void sub_100787938(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006322C0(v1);
  _Unwind_Resume(a1);
}

void sub_100787950(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  void *__p[2];
  char v8;
  uint8_t buf[16];
  uint64_t v10;
  _QWORD v11[8];

  if (sub_1000CC4F4(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v10, (uint64_t)"DELETE FROM ", 12);
    sub_100263F7C(v2, (uint64_t)"BeaconStatus", 12);
    std::stringbuf::str(__p, v11);
    if (v8 >= 0)
      v3 = (char *)__p;
    else
      v3 = (char *)__p[0];
    sub_1000CDA68(a1, v3);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152570);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "iB: state No access to DB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state No access to DB", __p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "void CLBeaconMonitorDatabase::clearLocationData()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_100787BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100787C50(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 v6;
  unint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  uint64_t v22;
  uint8_t *v23;
  char *v24;
  char *v25;
  const char *v26;
  _BYTE __p[12];
  __int16 v28;
  int v29;
  __int16 v30;
  uint8_t *v31;
  uint8_t v32[8];
  char v33;
  _BYTE buf[12];
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE *v38;

  v6 = sub_1000CC4F4(a1);
  if (v6)
  {
    if (a3 == 2 || a3 == 4)
    {
      v7 = sub_1007884E8(v6, a2);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152570);
      v8 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
        v9 = SBYTE3(v31) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 134284035;
        *(_QWORD *)&buf[4] = v7;
        v35 = 1025;
        v36 = a3;
        v37 = 2081;
        v38 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "iB: state store, %{private}lld, %{private}d, %{private}s", buf, 0x1Cu);
        if (SBYTE3(v31) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152570);
        v22 = qword_1022A0038;
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v32, a2);
        if (v33 >= 0)
          v23 = v32;
        else
          v23 = *(uint8_t **)v32;
        *(_DWORD *)__p = 134284035;
        *(_QWORD *)&__p[4] = v7;
        v28 = 1025;
        v29 = a3;
        v30 = 2081;
        v31 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "iB: state store, %{private}lld, %{private}d, %{private}s", __p, 28);
        v25 = v24;
        if (v33 < 0)
          operator delete(*(void **)v32);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconMonitorDatabase::storeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v25);
        if (v25 != buf)
          free(v25);
      }
      sub_100263E50((uint64_t)__p);
      v10 = sub_100263F7C((int *)((char *)&v29 + 2), (uint64_t)"INSERT OR REPLACE INTO ", 23);
      v11 = sub_100263F7C(v10, (uint64_t)"BeaconStatus", 12);
      v12 = sub_100263F7C(v11, (uint64_t)" (", 2);
      v13 = sub_100263F7C(v12, (uint64_t)"Key", 3);
      v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
      v15 = sub_100263F7C(v14, (uint64_t)"State", 5);
      sub_100263F7C(v15, (uint64_t)") VALUES (?, ?)", 15);
      std::stringbuf::str(buf, (char *)&v31 + 4);
      if (SBYTE3(v38) >= 0)
        v16 = buf;
      else
        v16 = *(char **)buf;
      sub_1000CDA68(a1, v16);
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    v20 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "iB: state Invalid for DB", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state Invalid for DB", __p, 2);
    v19 = (char *)v26;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::storeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v26);
LABEL_43:
    if (v19 != buf)
      free(v19);
    return 0;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152570);
  v17 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "iB: state No access to DB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state No access to DB", __p, 2);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::storeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v18);
    goto LABEL_43;
  }
  return 0;
}

void sub_100788488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

unint64_t sub_1007884E8(uint64_t a1, uint64_t a2)
{
  int v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  sub_10078A2A0((const void **)(a2 + 64), 47, (uint64_t)&v18);
  v3 = *(char *)(a2 + 63);
  if (v3 >= 0)
    v4 = (const std::string::value_type *)(a2 + 40);
  else
    v4 = *(const std::string::value_type **)(a2 + 40);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 63);
  else
    v5 = *(_QWORD *)(a2 + 48);
  v6 = std::string::append(&v18, v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v19, 47);
  v20 = v19;
  memset(&v19, 0, sizeof(v19));
  v8 = *(char *)(a2 + 111);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a2 + 88);
  else
    v9 = *(const std::string::value_type **)(a2 + 88);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 111);
  else
    v10 = *(_QWORD *)(a2 + 96);
  v11 = std::string::append(&v20, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v13 = sub_100115F1C((uint64_t)&v20, (char *)&v21);
  v14 = sub_100115F1C((uint64_t)&v20, (char *)(a2 + 8));
  v15 = *(unsigned __int16 *)(a2 + 32);
  v16 = *(unsigned __int16 *)(a2 + 34);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v15) ^ ((0xC6A4A7935BD1E995 * v15) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v14) ^ ((0xC6A4A7935BD1E995 * v14) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47)) + 3864292196u)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v16) ^ ((0xC6A4A7935BD1E995 * v16) >> 47))))
       + 3864292196u;
}

void sub_1007886A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100788700(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v15;
  void **v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  _DWORD v21[3];
  __int16 v22;
  _BYTE *v23;
  _BYTE buf[12];
  __int16 v25;
  void **v26;
  char v27;
  _QWORD v28[8];
  void *__p[2];
  char v30;

  v4 = sub_1000CC4F4(a1);
  if (v4)
  {
    v5 = sub_1007884E8(v4, a2);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v7 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 134283779;
      *(_QWORD *)&buf[4] = v5;
      v25 = 2081;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: state remove, %{private}lld, %{private}s", buf, 0x16u);
      if (v30 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152570);
      v17 = qword_1022A0038;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v27 >= 0)
        v18 = buf;
      else
        v18 = *(_BYTE **)buf;
      v21[0] = 134283779;
      *(_QWORD *)&v21[1] = v5;
      v22 = 2081;
      v23 = v18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "iB: state remove, %{private}lld, %{private}s", v21, 22);
      v20 = v19;
      if (v27 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconMonitorDatabase::removeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v20);
      if (v20 != (char *)__p)
        free(v20);
    }
    sub_100263E50((uint64_t)buf);
    v8 = sub_100263F7C((void ***)((char *)&v26 + 2), (uint64_t)"DELETE FROM ", 12);
    v9 = sub_100263F7C(v8, (uint64_t)"BeaconStatus", 12);
    v10 = sub_100263F7C(v9, (uint64_t)" WHERE ", 7);
    v11 = sub_100263F7C(v10, (uint64_t)"Key", 3);
    sub_100263F7C(v11, (uint64_t)"=?", 2);
    std::stringbuf::str(__p, v28);
    if (v30 >= 0)
      v12 = (char *)__p;
    else
      v12 = (char *)__p[0];
    sub_1000CDA68(a1, v12);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152570);
  v13 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "iB: state No access to DB", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state No access to DB", buf, 2);
    v16 = (void **)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::removeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v15);
    if (v16 != __p)
      free(v16);
  }
  return 0;
}

void sub_100788DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100788E18@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  v4 = sub_100263E50((uint64_t)v11);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v7 = 0;
    do
    {
      v8 = sub_1007884E8(v4, v5);
      if ((v7 & 1) != 0)
        sub_100263F7C(&v12, (uint64_t)", ", 2);
      v4 = std::ostream::operator<<(&v12, v8);
      v5 += 120;
      v7 = 1;
    }
    while (v5 != v6);
  }
  std::stringbuf::str(a2, v13);
  *(_QWORD *)((char *)v11
  v12 = v9;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v15);
}

void sub_100788F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100788F48(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *p_buf;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  char *v21;
  NSObject *v22;
  unint64_t v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  std::string::value_type v29[8];
  char v30;
  void *v31[2];
  char v32;
  std::string::value_type __s[8];
  char v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  void *__p[2];
  int64_t v42;
  __int128 buf;
  unsigned __int8 v44;

  v4 = sub_1000CC4F4(a1);
  if (v4)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    v5 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v6 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: state scrub, remaining, %{public}lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152570);
      v24 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
      LODWORD(__p[0]) = 134349056;
      *(void **)((char *)__p + 4) = (void *)v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: state scrub, remaining, %{public}lu", __p, 12);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconMonitorDatabase::scrubFenceStates(const std::vector<CLBTLEBeaconRegion_Type::MonitoredRegion> &)", "%s\n", v25);
      if (v26 != (char *)&buf)
        free(v26);
    }
    sub_100788E18(a2, &buf);
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v35, "DELETE FROM ");
    v7 = std::string::append(&v35, "BeaconStatus");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v34 = 7;
    strcpy(__s, " WHERE ");
    v9 = std::string::append(&v36, __s, 7uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v37, "Key");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v32 = 9;
    strcpy((char *)v31, " NOT IN (");
    v13 = std::string::append(&v38, (const std::string::value_type *)v31, 9uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((v44 & 0x80u) == 0)
      p_buf = (const std::string::value_type *)&buf;
    else
      p_buf = (const std::string::value_type *)buf;
    if ((v44 & 0x80u) == 0)
      v16 = v44;
    else
      v16 = *((_QWORD *)&buf + 1);
    v17 = std::string::append(&v39, p_buf, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v30 = 1;
    strcpy(v29, ")");
    v19 = std::string::append(&v40, v29, 1uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v42 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v30 < 0)
      operator delete(*(void **)v29);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (v42 >= 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    sub_1000CDA68(a1, v21);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152570);
  v22 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "iB: state can't scrub DB", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state can't scrub DB", __p, 2);
    v28 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::scrubFenceStates(const std::vector<CLBTLEBeaconRegion_Type::MonitoredRegion> &)", "%s\n", v27);
    if (v28 != (char *)&buf)
      free(v28);
  }
  return v4;
}

void sub_100789508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a48 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  _Unwind_Resume(a1);
}

uint64_t sub_100789614(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  NSObject *v18;
  const char *v20;
  std::string *v21;
  std::string::value_type v22[8];
  char v23;
  std::string::value_type v24[8];
  char v25;
  std::string::value_type __s[8];
  char v27;
  std::string v28;
  std::string v29;
  std::string v30;
  void *__p[2];
  int64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;

  v4 = sub_1000CC4F4(a1);
  if (v4)
  {
    sub_1007884E8(v4, a2);
    *((_BYTE *)&v28.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v28, "SELECT ");
    v5 = std::string::append(&v28, "State");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v27 = 6;
    strcpy(__s, " FROM ");
    v7 = std::string::append(&v29, __s, 6uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v30, "BeaconStatus");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v25 = 7;
    strcpy(v24, " WHERE ");
    v11 = std::string::append(&v34, v24, 7uLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v33, "Key");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v23 = 2;
    strcpy(v22, "=?");
    v15 = std::string::append(&v35, v22, 2uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v32 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (v23 < 0)
      operator delete(*(void **)v22);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(*(void **)v24);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (v27 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (v32 >= 0)
      v17 = (char *)__p;
    else
      v17 = (char *)__p[0];
    sub_1000CDA68(a1, v17);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152570);
  v18 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v35.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "iB: state No access to DB", (uint8_t *)&v35, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&v35, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152570);
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &v35, 1628, &_mh_execute_header, qword_1022A0038, 17, "iB: state No access to DB", &v33, 2);
    v21 = (std::string *)v20;
    sub_100512490("Generic", 1, 0, 0, "CLBTLEBeaconRegion_Type::RegionStates CLBeaconMonitorDatabase::getFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v20);
    if (v21 != &v35)
      free(v21);
  }
  return 1;
}

void sub_10078A170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10078A2A0@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = sub_100259584(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

void sub_10078A330(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

uint64_t sub_10078A35C(uint64_t a1)
{
  unsigned __int8 v3;
  unsigned __int8 v4[3];
  unsigned __int8 v5;
  unsigned __int8 v6[3];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1000;
  *(_WORD *)(a1 + 12) = 0;
  v5 = 0;
  sub_1018BF25C(v6, off_1022A2860[0], &v5, 0);
  *(_BYTE *)(a1 + 12) = v6[0];
  v3 = 0;
  sub_1018BF25C(v4, off_1022A2868[0], &v3, 0);
  *(_BYTE *)(a1 + 13) = v4[0];
  return a1;
}

uint64_t sub_10078A3E8(uint64_t result, uint64_t a2, double a3)
{
  unsigned int v3;
  _QWORD v4[5];

  v3 = *(unsigned __int16 *)(result + 10);
  if (!*(_WORD *)(result + 10) || *(double *)result + 86400.0 < a3)
  {
    v3 = 0;
    *(double *)result = a3;
    *(_WORD *)(result + 10) = 0;
  }
  if (v3 < *(unsigned __int16 *)(result + 8))
  {
    *(_WORD *)(result + 10) = v3 + 1;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10078A480;
    v4[3] = &unk_102131FE8;
    v4[4] = a2;
    return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.MagnetometerReset"), v4);
  }
  return result;
}

NSDictionary *sub_10078A480(uint64_t a1)
{
  _QWORD v3[7];
  _QWORD v4[7];

  v3[0] = CFSTR("exitingSaturation");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 25));
  v3[1] = CFSTR("shiftInSaturation");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 26));
  v3[2] = CFSTR("extendedSaturation");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 27));
  v3[3] = CFSTR("triggerCount");
  v4[3] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 17));
  v3[4] = CFSTR("timeSinceLastRemag");
  v4[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 9) / 1000000.0);
  v3[5] = CFSTR("timeSinceLastRemagTrigger");
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 1) / 1000000.0);
  v3[6] = CFSTR("successFlag");
  v4[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 7);
}

uint64_t sub_10078A5EC(uint64_t result, uint64_t a2, double a3)
{
  unsigned int v3;
  _QWORD v4[6];

  v3 = *(unsigned __int16 *)(result + 10);
  if (!*(_WORD *)(result + 10) || *(double *)result + 86400.0 < a3)
  {
    v3 = 0;
    *(double *)result = a3;
    *(_WORD *)(result + 10) = 0;
  }
  if (v3 < *(unsigned __int16 *)(result + 8))
  {
    *(_WORD *)(result + 10) = v3 + 1;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10078A684;
    v4[3] = &unk_102139B90;
    v4[4] = result;
    v4[5] = a2;
    return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.BasebandCompassCoex"), v4);
  }
  return result;
}

NSDictionary *sub_10078A684(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];
  _QWORD v5[5];

  v4[0] = CFSTR("hasActiveMagnetometerClientDuringHeatUp");
  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 2) != 0);
  v4[1] = CFSTR("durationOfNonDefaultState");
  v5[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 4));
  v4[2] = CFSTR("countOfTimesEnteringHeatup");
  v5[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1));
  v4[3] = CFSTR("IsOverrideForBasebandCompassCoexSupportSet");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 12));
  v4[4] = CFSTR("IsOverrideForBasebandUsageFlagSet");
  v5[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 13));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 5);
}

uint64_t sub_10078A798()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_10078A800()
{
  operator delete();
}

uint64_t sub_10078A824()
{
  if (qword_102304578 != -1)
    dispatch_once(&qword_102304578, &stru_102152590);
  return qword_102310CB8;
}

void sub_10078A86C(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_10078A890(uint64_t a1, int a2, _QWORD *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102152618);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v18) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryPPG] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102152618);
      v15 = 67240192;
      LODWORD(v16) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryPPG] Unrecognized update interval notification %{public}d", &v15, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryPPG::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102152618);
    v9 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v10 = *a3;
      *(_DWORD *)buf = 134349056;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryPPG] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102152618);
      v12 = *a3;
      v15 = 134349056;
      v16 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryPPG] Setting update interval to %{public}f", &v15, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryPPG::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return *(double *)a3;
  }
  return v5;
}

void sub_10078ABA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *DataValue;
  uint64_t IntegerValue;
  int v8;
  unint64_t TimeStamp;
  double v10;
  unsigned __int8 *v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  uint8_t *v22;
  _QWORD v23[2];
  char v24;
  unsigned __int8 v25;
  __int16 v26;
  unsigned __int8 v27;
  __int16 v28;
  char v29;
  __int16 v30;
  unsigned __int8 v31;
  __int16 v32;
  unsigned __int8 v33;
  __int16 v34;
  char v35;
  __int16 v36;
  char v37;
  __int16 v38;
  __int16 v39;
  int v40;
  int v41;
  __int16 v42;
  unsigned __int8 *v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  __int16 v48;
  unsigned __int8 *v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  unsigned __int8 *v53;
  __int16 v54;
  double v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned __int8 *v59;

  DataValue = (unsigned __int8 *)IOHIDEventGetDataValue(a4, 65540);
  IntegerValue = IOHIDEventGetIntegerValue(a4, 65539);
  if (!DataValue)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102152618);
    v17 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[AccessoryPPG] Invalid payload", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102152618);
    LOWORD(v40) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryPPG] Invalid payload", &v40, 2);
LABEL_30:
    v22 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryPPG::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v18);
    if (v22 != buf)
      free(v22);
    return;
  }
  v8 = IntegerValue;
  if (IntegerValue == 32)
  {
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v10 = sub_100127828(TimeStamp);
    *(double *)v23 = v10;
    v11 = *(unsigned __int8 **)(DataValue + 2);
    v23[1] = v11;
    v12 = *DataValue;
    v24 = *DataValue;
    v25 = DataValue[1];
    v13 = *((_WORD *)DataValue + 5);
    v27 = DataValue[12];
    v26 = v13;
    LOBYTE(v13) = DataValue[15];
    v28 = *(_WORD *)(DataValue + 13);
    v29 = v13;
    v14 = *((_WORD *)DataValue + 8);
    v31 = DataValue[18];
    v30 = v14;
    v15 = *(_WORD *)(DataValue + 19);
    v33 = DataValue[21];
    v32 = v15;
    LOBYTE(v15) = DataValue[24];
    v34 = *((_WORD *)DataValue + 11);
    v35 = v15;
    LOBYTE(v15) = DataValue[27];
    v36 = *(_WORD *)(DataValue + 25);
    v37 = v15;
    v38 = *((_WORD *)DataValue + 14);
    v39 = *((_WORD *)DataValue + 15);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102152618);
    v16 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67241219;
      v51 = v12;
      v52 = 2050;
      v53 = v11;
      v54 = 2050;
      v55 = v10;
      v56 = 1040;
      v57 = 32;
      v58 = 2097;
      v59 = DataValue;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[AccessoryPPG] frameNum,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102152618);
      v40 = 67241219;
      v41 = v12;
      v42 = 2050;
      v43 = v11;
      v44 = 2050;
      v45 = v10;
      v46 = 1040;
      v47 = 32;
      v48 = 2097;
      v49 = DataValue;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryPPG] frameNum,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", &v40, 44);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryPPG::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    sub_10012AC18(a1, 0, (uint64_t)v23, 40);
    return;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102152618);
  v19 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68157955;
    v51 = v8;
    v52 = 2097;
    v53 = DataValue;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[AccessoryPPG] Invalid payload: %{private}.*P", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102152618);
    v40 = 68157955;
    v41 = v8;
    v42 = 2097;
    v43 = DataValue;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryPPG] Invalid payload: %{private}.*P", &v40, 18);
    goto LABEL_30;
  }
}

void sub_10078B0E8(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

id sub_10078B22C(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _objc_msgSend(a4, "onDarwinNotification:data:", *a2, *a3);
}

void sub_10078E7A4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10078E7D0(uint64_t a1)
{
  sub_100A40BC8(a1);
}

void sub_10078EB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100A41B3C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10078EB6C(_QWORD *a1)
{
  *a1 = off_102152708;
  sub_10078FF8C((uint64_t)a1);
  return sub_100A41B3C((uint64_t)a1);
}

void sub_10078EBA4(_QWORD *a1)
{
  sub_10078EB6C(a1);
  operator delete();
}

uint64_t sub_10078EBC8()
{
  if ((sub_100195F08() & 1) != 0)
    return 0;
  else
    return sub_100ADB310();
}

void sub_10078EBEC(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  CLDeviceMotionProperties *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102152770);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Legacy compass started. Cover attached %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102152770);
    v11[0] = 67240192;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "Legacy compass started. Cover attached %{public}d", v11, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompass6::start(BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*(_QWORD *)(a1 + 200))
    operator new();
  if (*(_BYTE *)(a1 + 186))
  {
    if (!*(_QWORD *)(a1 + 144))
    {
      v5 = sub_1002433D4();
      *(_DWORD *)buf = 7;
      if (sub_1011937E0(v5, (int *)buf))
      {
        -[CLDeviceMotionProperties initWithMode:]([CLDeviceMotionProperties alloc], "initWithMode:", 7);
      }
      else
      {
        v6 = sub_1002433D4();
        *(_DWORD *)buf = 15;
        v7 = sub_1011937E0(v6, (int *)buf);
        v8 = [CLDeviceMotionProperties alloc];
        if (v7)
          -[CLDeviceMotionProperties initWithMode:](v8, "initWithMode:", 15);
        else
          -[CLDeviceMotionProperties initWithMode:](v8, "initWithMode:", 3);
      }
      operator new();
    }
  }
  else if (!*(_QWORD *)(a1 + 136))
  {
    operator new();
  }
  if (!*(_QWORD *)(a1 + 152))
    operator new();
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 164) = 0;
}

void sub_10078F0FC()
{
  operator delete();
}

void sub_10078F174(__int128 *a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  double v33;
  double v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  int v69;
  const char *v70;
  char *v71;
  int v72;
  const char *v73;
  const char *v74;
  char *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  __int128 v83;
  int v84;
  _QWORD v85[5];
  int v86;
  int v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  _BYTE v91[32];
  _BYTE v92[20];
  _BYTE v93[12];
  double v94;
  _BYTE v95[12];
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  _BYTE buf[32];
  _BYTE v110[32];
  _BYTE v111[54];
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;

  v89 = *a1;
  v90 = *((_QWORD *)a1 + 2);
  ++*(_DWORD *)(a2 + 160);
  v3 = atomic_load((unsigned __int8 *)&qword_102304588);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_102304588))
  {
    dword_102304580 = (int)(1.5 / *(double *)(a2 + 168));
    __cxa_guard_release(&qword_102304588);
  }
  v4 = *(_QWORD *)(a2 + 144);
  if (v4)
  {
    *(_WORD *)&v111[46] = 0;
    v5 = (os_unfair_lock_s *)(v4 + 140);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 140));
    v6 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)v111 = *(_OWORD *)(v4 + 80);
    *(_OWORD *)&v111[16] = v6;
    *(_OWORD *)&v111[32] = *(_OWORD *)(v4 + 112);
    *(_DWORD *)&v111[48] = *(_DWORD *)(v4 + 128);
    v7 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)buf = *(_OWORD *)(v4 + 16);
    *(_OWORD *)&buf[16] = v7;
    v8 = *(_OWORD *)(v4 + 64);
    *(_OWORD *)v110 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)&v110[16] = v8;
    v9 = *(unsigned __int8 *)(v4 + 136);
    os_unfair_lock_unlock(v5);
    if (v9)
    {
      *(float *)(a2 + 188) = sub_100A00000((double *)&buf[8]);
      *(_DWORD *)(a2 + 192) = v10;
      *(_DWORD *)(a2 + 196) = v11;
      sub_100A44508(*(_QWORD *)(a2 + 200), a2 + 188);
      sub_100A44524(*(_QWORD *)(a2 + 200), (uint64_t *)&buf[8]);
    }
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 136);
    if (v12)
    {
      v13 = (os_unfair_lock_s *)(v12 + 44);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 44));
      *(_OWORD *)buf = *(_OWORD *)(v12 + 16);
      *(_QWORD *)&buf[16] = *(_QWORD *)(v12 + 32);
      v14 = *(unsigned __int8 *)(v12 + 40);
      os_unfair_lock_unlock(v13);
      if (v14)
      {
        *(_QWORD *)(a2 + 188) = *(_QWORD *)&buf[8];
        *(_DWORD *)(a2 + 196) = *(_DWORD *)&buf[16];
        sub_100A44508(*(_QWORD *)(a2 + 200), a2 + 188);
      }
    }
  }
  v86 = -1082130432;
  if (*(float *)(a2 + 188) != 3.4028e38 && sub_100A43ADC(*(float32x2_t **)(a2 + 200), (uint64_t *)&v89 + 1))
  {
    if (!sub_100A44684(*(_QWORD *)(a2 + 200), (uint64_t)&v80, v21, v22, v23, v24, v25, v26, v27, v28, v15, v16, v17, v18, v19, v20))return;
    v79 = *(double *)&v89;
    v29 = *(_QWORD **)(a2 + 200);
    v30 = v29[205];
    v31 = v30
        ? *(_DWORD *)(*(_QWORD *)(v29[201] + (((unint64_t)(v30 + v29[204] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((v30 + v29[204] - 1) & 0x3FF))
        : 0;
    v87 = v31;
    v88 = *(_BYTE *)(a2 + 28);
    if (*(_BYTE *)(a2 + 185))
    {
      if (*((float *)&v83 + 2) < 0.0)
      {
        *(_BYTE *)(a2 + 185) = 0;
        v37 = sub_1000A6A30();
        sub_100ADB4BC(v37);
        v29 = *(_QWORD **)(a2 + 200);
      }
    }
    else if (*((float *)&v83 + 2) >= 0.0)
    {
      *(_BYTE *)(a2 + 185) = 1;
    }
    v38 = sub_100A45194((uint64_t)v29);
    HIBYTE(v78) = v38;
    if (*(unsigned __int8 *)(a2 + 184) != v38)
    {
      sub_10012AC18(a2, 1, (uint64_t)&v78 + 7, 1);
      *(_BYTE *)(a2 + 184) = HIBYTE(v78);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102152770);
      v39 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CompassAlignment";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = HIBYTE(v78);
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v89;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102152770);
        *(_DWORD *)v91 = 136315650;
        *(_QWORD *)&v91[4] = "CompassAlignment";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = HIBYTE(v78);
        *(_WORD *)&v91[18] = 2048;
        *(_QWORD *)&v91[20] = v89;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f", v91, 28, v77);
        v75 = (char *)v74;
        sub_100512490("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v74);
        if (v75 != buf)
          free(v75);
      }
      if (*(_BYTE *)(a2 + 29))
      {
        *(_QWORD *)v91 = off_1021723D0;
        *(_QWORD *)&v91[8] = CFAbsoluteTimeGetCurrent();
        *(_QWORD *)&v91[24] = v89;
        v92[0] = HIBYTE(v78);
        v40 = sub_1011B78D4();
        sub_1011B8DB0(v40, (uint64_t)v91);
        sub_1015EB864(buf);
        sub_101604E34((uint64_t)buf);
        v121 |= 1u;
        v118 = *(_QWORD *)&v91[8];
        v41 = v120;
        v42 = v89;
        *(_BYTE *)(v120 + 20) |= 1u;
        *(_QWORD *)(v41 + 8) = v42;
        v43 = v120;
        v44 = HIBYTE(v78);
        *(_BYTE *)(v120 + 20) |= 2u;
        *(_DWORD *)(v43 + 16) = v44;
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021527B0);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)buf);
        sub_1015EE304((PB::Base *)buf);
      }
    }
    LODWORD(v78) = 0;
    v77 = 0.0;
    sub_100A45180(*(_QWORD *)(a2 + 200), (uint64_t)&v77);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102152770);
    v45 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136318722;
      *(_QWORD *)&buf[4] = "Compass";
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = *(float *)&v83;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = *((float *)&v83 + 1);
      *(_WORD *)v110 = 2048;
      *(double *)&v110[2] = *((float *)&v83 + 2);
      *(_WORD *)&v110[10] = 2048;
      *(double *)&v110[12] = *(float *)&v80;
      *(_WORD *)&v110[20] = 2048;
      *(double *)&v110[22] = *((float *)&v80 + 1);
      *(_WORD *)&v110[30] = 2048;
      *(double *)v111 = *(float *)&v81;
      *(_WORD *)&v111[8] = 2048;
      *(double *)&v111[10] = *(float *)&v77;
      *(_WORD *)&v111[18] = 2048;
      *(double *)&v111[20] = *((float *)&v77 + 1);
      *(_WORD *)&v111[28] = 2048;
      *(double *)&v111[30] = *(float *)&v78;
      *(_WORD *)&v111[38] = 1024;
      *(_DWORD *)&v111[40] = HIDWORD(v83);
      *(_WORD *)&v111[44] = 2048;
      *(double *)&v111[46] = *(float *)v85;
      v112 = 2048;
      v113 = *((float *)v85 + 1);
      v114 = 2048;
      v115 = *(float *)&v85[1];
      v116 = 2048;
      v117 = v79;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f", buf, 0x94u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102152770);
      *(_DWORD *)v91 = 136318722;
      *(_QWORD *)&v91[4] = "Compass";
      *(_WORD *)&v91[12] = 2048;
      *(double *)&v91[14] = *(float *)&v83;
      *(_WORD *)&v91[22] = 2048;
      *(double *)&v91[24] = *((float *)&v83 + 1);
      *(_WORD *)v92 = 2048;
      *(double *)&v92[2] = *((float *)&v83 + 2);
      *(_WORD *)&v92[10] = 2048;
      *(double *)&v92[12] = *(float *)&v80;
      *(_WORD *)v93 = 2048;
      *(double *)&v93[2] = *((float *)&v80 + 1);
      *(_WORD *)&v93[10] = 2048;
      v94 = *(float *)&v81;
      *(_WORD *)v95 = 2048;
      *(double *)&v95[2] = *(float *)&v77;
      *(_WORD *)&v95[10] = 2048;
      v96 = *((float *)&v77 + 1);
      v97 = 2048;
      v98 = *(float *)&v78;
      v99 = 1024;
      v100 = HIDWORD(v83);
      v101 = 2048;
      v102 = *(float *)v85;
      v103 = 2048;
      v104 = *((float *)v85 + 1);
      v105 = 2048;
      v106 = *(float *)&v85[1];
      v107 = 2048;
      v108 = v79;
      LODWORD(v76) = 148;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f", v91, v76, v77, v78, v79, v80, v81, v82, *(double *)&v83,
        *((double *)&v83 + 1),
        v84,
        *(double *)((char *)v85 + 4),
        *(double *)((char *)&v85[1] + 4),
        *(double *)((char *)&v85[2] + 4),
        *(double *)((char *)&v85[3] + 4));
      v71 = (char *)v70;
      sub_100512490("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v70);
      if (v71 != buf)
        free(v71);
    }
    if (*(_BYTE *)(a2 + 29))
    {
      *(_QWORD *)v91 = off_102171620;
      *(_QWORD *)&v91[8] = CFAbsoluteTimeGetCurrent();
      *(double *)&v91[24] = v79;
      *(_QWORD *)&v46 = *(_QWORD *)((char *)&v83 + 4);
      *((double *)&v46 + 1) = v80;
      *(_OWORD *)&v92[4] = v46;
      *(_DWORD *)v92 = v83;
      *(_DWORD *)v93 = LODWORD(v81);
      *(double *)&v93[4] = v77;
      LODWORD(v94) = LODWORD(v78);
      BYTE4(v94) = BYTE12(v83);
      *(_QWORD *)v95 = v85[0];
      *(_DWORD *)&v95[8] = v85[1];
      v47 = sub_1011B78D4();
      sub_1011B8DB0(v47, (uint64_t)v91);
      sub_1015EB864(buf);
      sub_101604DD0((uint64_t)buf);
      v121 |= 1u;
      v118 = *(_QWORD *)&v91[8];
      v48 = v119;
      v49 = v79;
      *(_WORD *)(v119 + 68) |= 1u;
      *(double *)(v48 + 8) = v49;
      v50 = v119;
      *(_WORD *)(v119 + 68) |= 0x800u;
      v51 = DWORD1(v83);
      *(_DWORD *)(v50 + 56) = v83;
      v52 = v119;
      *(_WORD *)(v119 + 68) |= 0x2000u;
      *(_DWORD *)(v52 + 64) = v51;
      v53 = v119;
      LODWORD(v49) = DWORD2(v83);
      *(_WORD *)(v119 + 68) |= 2u;
      *(_DWORD *)(v53 + 16) = LODWORD(v49);
      v54 = v119;
      *(_WORD *)(v119 + 68) |= 0x100u;
      v55 = HIDWORD(v80);
      *(_DWORD *)(v54 + 44) = LODWORD(v80);
      v56 = v119;
      *(_WORD *)(v119 + 68) |= 0x200u;
      *(_DWORD *)(v56 + 48) = v55;
      v57 = v119;
      LODWORD(v49) = LODWORD(v81);
      *(_WORD *)(v119 + 68) |= 0x400u;
      *(_DWORD *)(v57 + 52) = LODWORD(v49);
      v58 = v119;
      *(_WORD *)(v119 + 68) |= 4u;
      v59 = HIDWORD(v77);
      *(_DWORD *)(v58 + 20) = LODWORD(v77);
      v60 = v119;
      *(_WORD *)(v119 + 68) |= 8u;
      *(_DWORD *)(v60 + 24) = v59;
      v61 = v119;
      LODWORD(v49) = LODWORD(v78);
      *(_WORD *)(v119 + 68) |= 0x10u;
      *(_DWORD *)(v61 + 28) = LODWORD(v49);
      v62 = v119;
      v63 = HIDWORD(v83);
      *(_WORD *)(v119 + 68) |= 0x20u;
      *(_DWORD *)(v62 + 32) = v63;
      v64 = v119;
      v65 = HIDWORD(v85[0]);
      *(_DWORD *)(v119 + 60) = v85[0];
      *(_WORD *)(v64 + 68) |= 0x1000u;
      v66 = v119;
      *(_WORD *)(v119 + 68) |= 0x80u;
      *(_DWORD *)(v66 + 40) = v65;
      v67 = v119;
      LODWORD(v49) = v85[1];
      *(_WORD *)(v119 + 68) |= 0x40u;
      *(_DWORD *)(v67 + 36) = LODWORD(v49);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021527B0);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
      sub_1015EE304((PB::Base *)buf);
    }
    if (SHIDWORD(v83) <= 0 && *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376) <= dword_102304580)
      return;
    sub_10012AC18(a2, 0, (uint64_t)&v79, 112);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102152770);
    v68 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v69 = *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v69;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v83);
      *(_WORD *)&buf[14] = 2048;
      *(double *)&buf[16] = v79;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102152770);
    v72 = *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376);
    *(_DWORD *)v91 = 67109632;
    *(_DWORD *)&v91[4] = v72;
    *(_WORD *)&v91[8] = 1024;
    *(_DWORD *)&v91[10] = HIDWORD(v83);
    *(_WORD *)&v91[14] = 2048;
    *(double *)&v91[16] = v79;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f", v91, 24, v77);
    v36 = (char *)v73;
    sub_100512490("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v73);
LABEL_67:
    if (v36 != buf)
      free(v36);
    return;
  }
  if (!*(_BYTE *)(a2 + 164) && *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376) > dword_102304580)
  {
    *((_QWORD *)&v83 + 1) = 3212836864;
    *(_QWORD *)&v83 = 0;
    LODWORD(v81) = 0;
    LOBYTE(v84) = 0;
    memset(v85, 0, 12);
    v87 = 0;
    v88 = 0;
    v79 = *(double *)&v89;
    v80 = 0.0;
    *(_BYTE *)(a2 + 164) = 1;
    sub_10012AC18(a2, 0, (uint64_t)&v79, 112);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102152770);
    v32 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v33 = *(double *)(a2 + 168) * (double)*(int *)(*(_QWORD *)(a2 + 200) + 376);
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Notify after %{public}.3f seconds of no event.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102152770);
      v34 = *(double *)(a2 + 168) * (double)*(int *)(*(_QWORD *)(a2 + 200) + 376);
      *(_DWORD *)v91 = 134349056;
      *(double *)&v91[4] = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Notify after %{public}.3f seconds of no event.", v91, 12);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v35);
      goto LABEL_67;
    }
  }
}

void sub_10078FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_1015EE304((PB::Base *)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_10078FF8C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102152770);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Legacy compass stopped.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102152770);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "Legacy compass stopped.", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompass6::stop()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v4 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = 0;
  if (v3)
  {
    v5 = sub_1000A6A30();
    sub_1000A4A6C(v5, 0, *(_QWORD *)(a1 + 152));
    v6 = *(_QWORD *)(a1 + 152);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 152) = 0;
  }
  if (*(_BYTE *)(a1 + 186))
  {
    if (v4)
    {
      v7 = sub_1002433D4();
      sub_101193558(v7, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  else if (*(_QWORD *)(a1 + 136))
  {
    v8 = sub_10024095C();
    sub_1000A4A6C(v8, 0, *(_QWORD *)(a1 + 136));
    v9 = *(_QWORD *)(a1 + 136);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(a1 + 136) = 0;
  }
  result = *(_QWORD *)(a1 + 200);
  if (result)
  {
    sub_100A43AD8();
    operator delete();
  }
  *(_DWORD *)(a1 + 188) = 2139095039;
  return result;
}

float sub_1007901D8(uint64_t a1, double *a2)
{
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
    return sub_100A4455C(v2, a2);
  return result;
}

uint64_t sub_1007901E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 200);
  if (result)
    return sub_100A445D0(result);
  return result;
}

void sub_1007901F8(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100790224(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100790254(uint64_t a1)
{
  sub_100015E88(a1);
  operator delete();
}

void sub_100790278(uint64_t a1, uint64_t a2, __int128 *a3)
{
  os_unfair_lock_s *v5;
  __int128 v6;

  v5 = (os_unfair_lock_s *)(a1 + 44);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 44));
  v6 = *a3;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 40) = 1;
  os_unfair_lock_unlock(v5);
}

void sub_1007902C8(uint64_t a1)
{
  sub_100015E88(a1);
  operator delete();
}

void sub_1007902EC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  os_unfair_lock_s *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = (os_unfair_lock_s *)(a1 + 140);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 140));
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[3];
  *(_OWORD *)(a1 + 48) = a3[2];
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  v9 = a3[4];
  v10 = a3[5];
  v11 = a3[6];
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a3 + 28);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 136) = 1;
  os_unfair_lock_unlock(v5);
}

void sub_100790354(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  int v6;
  void *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  sub_100270E34(a1 + 160, a3);
  *(_WORD *)(a1 + 192) = 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,constructor\"}", (uint8_t *)v8, 0x12u);
  }
  v6 = _os_feature_enabled_impl("CoreLocation", "TilesService");
  v7 = *(void **)a1;
  if (v6)
  {
    objc_msgSend(v7, "silo");
    operator new();
  }
  objc_msgSend(v7, "silo");
  operator new();
}

void sub_100790540()
{
  operator delete();
}

void sub_100790638(uint64_t a1, int a2, id *a3)
{
  NSObject *v6;
  id v7;
  _QWORD v8[7];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1026;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,tileFileDownloadCallback\", \"download,success\":%{public}hhd}", buf, 0x18u);
  }
  if (a3)
  {
    v7 = objc_msgSend(*a3, "silo");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1007912BC;
    v8[3] = &unk_1021528C0;
    v8[4] = a3;
    v8[5] = a1;
    v9 = a2;
    v8[6] = a3;
    objc_msgSend(v7, "async:", v8);
  }
}

void sub_10079077C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  const char *v10;
  char *p_p;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  NSObject *v22;
  uint64_t v23;
  void *__p;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BOOL4 v30;

  if (a2 && a4)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 72);
    if (v8 != v7)
    {
      if (a3)
        v9 = 0;
      else
        v9 = 4;
      if (a3)
      {
        if ((_os_feature_enabled_impl("CoreLocation", "TilesService") & 1) == 0)
        {
          v10 = (const char *)(a1 + 16);
          sub_1003625F4((const void **)(a1 + 16), (const void **)&unk_102304590, (uint64_t)&__p);
          if (v28 >= 0)
            p_p = (char *)&__p;
          else
            p_p = (char *)__p;
          if (*(char *)(a1 + 39) < 0)
            v10 = *(const char **)v10;
          if (sub_100513F8C(p_p, v10))
          {
            if (v28 >= 0)
              v12 = (const char *)&__p;
            else
              v12 = (const char *)__p;
            sub_1005164F0(v12);
          }
          if (SHIBYTE(v28) < 0)
            operator delete(__p);
        }
        v13 = (const char *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          v13 = *(const char **)v13;
        sub_1005169DC(v13, 3);
        v8 = *(_QWORD *)(a1 + 64);
        v7 = *(_QWORD *)(a1 + 72);
      }
      sub_100790B98(a1, (__int128 *)(v7 - 24), v9, 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) > 1);
      v14 = *(_QWORD *)(a1 + 72);
      v15 = (void **)(v14 - 24);
      if (*(char *)(v14 - 1) < 0)
        operator delete(*v15);
      *(_QWORD *)(a1 + 72) = v15;
      sub_100790C94(a1);
      return;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021528E0);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      __p = (void *)68289026;
      v25 = 2082;
      v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,download callback for unknown request\"}", (uint8_t *)&__p, 0x12u);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021528E0);
    }
    v23 = qword_1022A0048;
    if (os_signpost_enabled((os_log_t)qword_1022A0048))
    {
      __p = (void *)68289026;
      v25 = 2082;
      v26 = "";
      v18 = "CLRayTracingTileDownloader,download callback for unknown request";
      v19 = "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,download callback for unknown request\"}";
      v20 = v23;
      v21 = 18;
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021528E0);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      __p = (void *)68289538;
      v25 = 2082;
      v26 = "";
      v27 = 1026;
      v28 = a2 == 0;
      v29 = 1026;
      v30 = a4 == 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,unexpected nullptr\", \"download pointer null\":%{public}hhd, \"info pointer null\":%{public}hhd}", (uint8_t *)&__p, 0x1Eu);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021528E0);
    }
    v17 = qword_1022A0048;
    if (os_signpost_enabled((os_log_t)qword_1022A0048))
    {
      __p = (void *)68289538;
      v25 = 2082;
      v26 = "";
      v27 = 1026;
      v28 = a2 == 0;
      v29 = 1026;
      v30 = a4 == 0;
      v18 = "CLRayTracingTileDownloader,unexpected nullptr";
      v19 = "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,unexpected nullptr\", \"download pointer null\":%{public}h"
            "hd, \"info pointer null\":%{public}hhd}";
      v20 = v17;
      v21 = 30;
LABEL_41:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v18, v19, (uint8_t *)&__p, v21);
    }
  }
}

void sub_100790B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100790B98(uint64_t a1, __int128 *a2, char a3, char a4)
{
  void **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15[6];

  if (*(_QWORD *)(a1 + 184))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15[4] = (void **)&v14;
    v8 = (void **)sub_1002596A8((uint64_t)&v14, 1uLL);
    v15[0] = v8;
    v15[1] = v8;
    v15[3] = &v8[3 * v9];
    v10 = *a2;
    v8[2] = (void *)*((_QWORD *)a2 + 2);
    *(_OWORD *)v8 = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v15[2] = v8 + 3;
    sub_100074D44(&v12, v15);
    v11 = v13;
    sub_100074DB8((uint64_t)v15);
    v13 = v11;
    sub_10079127C(a1 + 160, (uint64_t)&v12, a3, a4);
    v15[0] = (void **)&v12;
    sub_100259608(v15);
  }
}

void sub_100790C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_100074DB8((uint64_t)va1);
  *(_QWORD *)(v2 - 40) = va;
  sub_100259608((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_100790C94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  std::string *p_buf;
  std::string::size_type size;
  char *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  std::string *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  void **v24;
  uint64_t v26;
  std::string v27;
  std::string buf;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile\"}", (uint8_t *)&buf, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021528E0);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      buf.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,fFileDownloader NULL\"}", (uint8_t *)&buf, 0x12u);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021528E0);
    }
    v17 = qword_1022A0048;
    if (os_signpost_enabled((os_log_t)qword_1022A0048))
    {
      buf.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRayTracingTileDownloader,downloadNextOnDemandTile,fFileDownloader NULL", "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,fFileDownloader NULL\"}", (uint8_t *)&buf, 0x12u);
    }
    return 0;
  }
  if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    *(_WORD *)(v3 + 80) = 257;
    v26 = 0x404E000000000000;
    v4 = (_QWORD *)(a1 + 40);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a1 + 136));
    sub_1003625F4((const void **)(*(_QWORD *)(a1 + 72) - 24), (const void **)&unk_102304590, (uint64_t)&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    else
      size = buf.__r_.__value_.__l.__size_;
    std::string::append((std::string *)(a1 + 40), (const std::string::value_type *)p_buf, size);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v7 = (char *)sub_1001FD94C();
    sub_1000B7884(v7, (uint64_t)&buf);
    v8 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    v9 = *(_QWORD *)(a1 + 72);
    v12 = *(const std::string::value_type **)(v9 - 24);
    v10 = v9 - 24;
    v11 = v12;
    v13 = *(char *)(v10 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v10;
    else
      v14 = v11;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v10 + 23);
    else
      v15 = *(_QWORD *)(v10 + 8);
    std::string::append((std::string *)(a1 + 16), v14, v15);
    memset(&buf, 0, sizeof(buf));
    if (_os_feature_enabled_impl("CoreLocation", "TilesService"))
    {
      std::string::operator=(&buf, (const std::string *)(a1 + 16));
    }
    else
    {
      sub_1003625F4((const void **)(a1 + 16), (const void **)&unk_102304590, (uint64_t)&v27);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      buf = v27;
    }
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &buf;
    else
      v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
    v19 = (*(uint64_t (**)(_QWORD, _QWORD *, std::string *, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v4, v20, &v26);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021528E0);
    v21 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v27.__r_.__value_.__r.__words[0] = 68289282;
      LOWORD(v27.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v27.__r_.__value_.__r.__words[2]) = v19;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile\", \"isDownloadRequestSuccessful\":%{public}hhd}", (uint8_t *)&v27, 0x18u);
    }
    if ((v19 & 1) == 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021528E0);
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v27.__r_.__value_.__r.__words[0] = 68289026;
        LOWORD(v27.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,request failed\"}", (uint8_t *)&v27, 0x12u);
      }
      sub_100790B98(a1, (__int128 *)(*(_QWORD *)(a1 + 72) - 24), 4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3) > 1);
      v23 = *(_QWORD *)(a1 + 72);
      v24 = (void **)(v23 - 24);
      if (*(char *)(v23 - 1) < 0)
        operator delete(*v24);
      *(_QWORD *)(a1 + 72) = v24;
      if (*(char *)(a1 + 39) < 0)
      {
        **(_BYTE **)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 39) = 0;
      }
      if (*(char *)(a1 + 63) < 0)
      {
        **(_BYTE **)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 40) = 0;
        *(_BYTE *)(a1 + 63) = 0;
      }
      sub_100790C94(a1);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    return v19;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v18 = qword_1022A0048;
  v19 = 0;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,empty list\"}", (uint8_t *)&buf, 0x12u);
    return 0;
  }
  return v19;
}

void sub_10079124C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10079127C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  char v6;
  char v7;

  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

void sub_1007912BC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLRayTracingTileDownloader,Calling tileDownloadCompleted", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021528E0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CLRayTracingTileDownloader,Calling tileDownloadCompleted", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "static void CLRayTracingTileDownloader::tileFileDownloadCallback(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10079077C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_10079145C(uint64_t a1, char a2, char a3)
{
  NSObject *v6;
  int v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 192);
    v8 = *(unsigned __int8 *)(a1 + 193);
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1026;
    v13 = v7;
    v14 = 1026;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,dataConnectivityStatus\", \"fDataConnectivityUp\":%{public}hhd, \"fCellularDataConnectivityUp\":%{public}hhd}", (uint8_t *)v9, 0x1Eu);
  }
  *(_BYTE *)(a1 + 192) = a2;
  *(_BYTE *)(a1 + 193) = a3;
}

void sub_100791568(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  __int128 v14;
  NSObject *v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021528E0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles\"}", (uint8_t *)&v16, 0x12u);
  }
  if (*(_BYTE *)(a1 + 192) || *(_BYTE *)(a1 + 193))
  {
    if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a1 + 72))
    {
      sub_100385A64((uint64_t *)(a1 + 64));
      *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v13 = (void **)(a1 + 136);
      if (*(char *)(a1 + 159) < 0)
        operator delete(*v13);
      v14 = *a3;
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v13 = v14;
      *((_BYTE *)a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      std::string::append((std::string *)(a1 + 136), "/");
      sub_100790C94(a1);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021528E0);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
        v16 = 68289538;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2050;
        v21 = v8;
        v22 = 2050;
        v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles rejecting\", \"existingDownloadListSize\":%{public}ld, \"requestedDownloadListSize\":%{public}ld}", (uint8_t *)&v16, 0x26u);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021528E0);
      }
      v10 = qword_1022A0048;
      if (os_signpost_enabled((os_log_t)qword_1022A0048))
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
        v16 = 68289538;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2050;
        v21 = v11;
        v22 = 2050;
        v23 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRayTracingTileDownloader,downloadTiles rejecting", "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles rejecting\", \"existingDownloadListSize\":%{public}ld, \"requestedDownloadListSize\":%{public}ld}", (uint8_t *)&v16, 0x26u);
      }
      if (*(_QWORD *)(a1 + 184))
        sub_10079127C(a1 + 160, a2, 1, 0);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021528E0);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles\"}", (uint8_t *)&v16, 0x12u);
    }
    if (*(_QWORD *)(a1 + 184))
      sub_10079127C(a1 + 160, a2, 3, 0);
  }
}

void sub_100791910(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*(char *)(a1 + 39) < 0)
  {
    **(_BYTE **)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 39) = 0;
  }
  if (*(char *)(a1 + 63) < 0)
  {
    **(_BYTE **)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 63) = 0;
  }
  sub_100259648((uint64_t *)(a1 + 64));
}

void sub_100791984(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1007919B0()
{
  sub_1015A2E04(qword_102304590, ".gz");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304590, (void *)&_mh_execute_header);
}

uint64_t sub_1007919F4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  double v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  char *v19;
  char *v20;
  double v21;
  void *v22[2];
  char v23;
  int v24;
  double v25[5];
  _BYTE __p[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  void **v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  _BYTE *v40;

  if (!*a3)
    return 4;
  sub_1002433B8((uint64_t)v25);
  v5 = sub_100B6F2BC((double *)(a1 + 4), a2, v25);
  if (v5 >= *((double *)sub_10108CCAC() + 5))
  {
    if (v5 >= *((double *)sub_10108CCAC() + 4))
      v6 = 1;
    else
      v6 = 2;
  }
  else
  {
    v6 = 3;
  }
  v24 = v6;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102152900);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
    v9 = *(char *)(a2 + 47) >= 0 ? a2 + 24 : *(_QWORD *)(a2 + 24);
    sub_100791D10(&v24, __p);
    v10 = v29 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315906;
    v34 = v8;
    v35 = 2080;
    v36 = v9;
    v37 = 2048;
    v38 = v5;
    v39 = 2080;
    v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "converging state change, fence, %s/%s, distance, %.2f, proximity state, %s", buf, 0x2Au);
    if (SHIBYTE(v29) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102152900);
    v12 = qword_1022A0068;
    if (*(char *)(a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    v14 = *(char *)(a2 + 47);
    v17 = *(_QWORD *)(a2 + 24);
    v16 = a2 + 24;
    v15 = v17;
    if (v14 < 0)
      v16 = v15;
    sub_100791D10(&v24, v22);
    if (v23 >= 0)
      v18 = v22;
    else
      v18 = (void **)v22[0];
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v13;
    v27 = 2080;
    v28 = v16;
    v29 = 2048;
    v30 = v5;
    v31 = 2080;
    v32 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "converging state change, fence, %s/%s, distance, %.2f, proximity state, %s", __p, 42, v21, (const char *)v22[0]);
    v20 = v19;
    if (v23 < 0)
      operator delete(v22[0]);
    sub_100512490("Generic", 1, 0, 2, "static CLFenceProximityState CLFenceApproachingClassifier::getFenceProximityState(const CLDaemonLocation &, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &)", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  return v6;
}

_QWORD *sub_100791D10@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 4)
    v5 = "Invalid";
  else
    v5 = off_102152920[v4];
  return sub_1015A2E04(a2, v5);
}

void sub_100791D40(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_1007921BC(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  TRANSITPbRegionPreloadMarket *v27;
  uint64_t v28;
  _QWORD v29[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        LODWORD(v6) = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_41;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_43:
        v28 = 32;
        goto LABEL_48;
      case 2u:
        *(_BYTE *)(a1 + 36) |= 1u;
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_51;
      case 3u:
        v22 = 0;
        v23 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v15 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              v10 = v23++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_47:
        v28 = 16;
LABEL_48:
        *(_DWORD *)(a1 + v28) = v15;
        goto LABEL_51;
      case 4u:
        v27 = objc_alloc_init(TRANSITPbRegionPreloadMarket);
        objc_msgSend((id)a1, "addMarkets:", v27);

        v29[0] = 0;
        v29[1] = 0;
        if (PBReaderPlaceMark(a2, v29) && (sub_100886358(v27, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v29);
LABEL_51:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_51;
    }
  }
}

char *sub_100792D00(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  __dst[24] = 0;
  *((_QWORD *)__dst + 6) = 0;
  *((_QWORD *)__dst + 5) = 0;
  *((_QWORD *)__dst + 4) = __dst + 40;
  __dst[56] = 0;
  *((_QWORD *)__dst + 8) = 0;
  __dst[72] = 0;
  *((_DWORD *)__dst + 19) = 0;
  return __dst;
}

char *sub_100792D70@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
  return result;
}

uint64_t *sub_100792D98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100793598(a2, (const void ***)(a1 + 32));
}

uint64_t sub_100792DA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_100792DAC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

char *sub_100792DB4(char *__dst, uint64_t a2, __int128 *a3)
{
  _BYTE *v5;
  __int128 v6;
  void *__p[2];
  uint64_t v9;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v9 = *(_QWORD *)(a2 + 16);
  }
  sub_100792D00(__dst, (__int128 *)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  v5 = __dst + 80;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(v5, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *((_QWORD *)__dst + 12) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_100792E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_100792E7C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100792E7C(uint64_t a1)
{
  sub_100090AE4(a1 + 32, *(char **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_100792EB8(_QWORD *result)
{
  result[1] = 0;
  *result = result + 1;
  result[5] = 0;
  result[4] = 0;
  result[2] = 0;
  result[3] = result + 4;
  return result;
}

uint64_t *sub_100792ED8(uint64_t *result, int a2, unint64_t a3)
{
  if (a2 == 1)
    return sub_100792F60((uint64_t)result, a3);
  if (!a2)
    return sub_100792EF8(result, a3);
  return result;
}

uint64_t *sub_100792EF8(uint64_t *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;
  unint64_t v7;

  v7 = a2;
  v2 = (_QWORD *)result[1];
  if (!v2)
    return sub_100210524((uint64_t **)result, &v7, (uint64_t *)&v7);
  v3 = result + 1;
  do
  {
    v4 = v2[4];
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 == result + 1 || v3[4] > a2)
    return sub_100210524((uint64_t **)result, &v7, (uint64_t *)&v7);
  return result;
}

uint64_t *sub_100792F60(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unint64_t v9;

  v9 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  result = (uint64_t *)(a1 + 32);
  v3 = v4;
  if (!v4)
    return sub_100210524((uint64_t **)result - 1, &v9, (uint64_t *)&v9);
  v5 = result;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == result || v5[4] > a2)
    return sub_100210524((uint64_t **)result - 1, &v9, (uint64_t *)&v9);
  return result;
}

void sub_100792FC8(uint64_t a1, int a2, unint64_t a3)
{
  if (a2 == 1)
  {
    sub_100793058(a1, a3);
  }
  else if (!a2)
  {
    sub_100792FE8(a1, a3);
  }
}

void sub_100792FE8(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 8);
    do
    {
      v4 = v2[4];
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = v2;
      else
        v6 = v2 + 1;
      if (v5)
        v3 = v2;
      v2 = (_QWORD *)*v6;
    }
    while (*v6);
    if (v3 != (uint64_t *)(a1 + 8) && v3[4] <= a2)
    {
      sub_10008A9F0((uint64_t **)a1, v3);
      operator delete(v3);
    }
  }
}

void sub_100793058(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v2 = (uint64_t *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = (uint64_t **)(a1 + 24);
    v5 = v2;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != v2 && v5[4] <= a2)
    {
      sub_10008A9F0(v4, v5);
      operator delete(v5);
    }
  }
}

id sub_1007930CC(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id result;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  void *__p[2];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char **v22;
  char *v23[2];
  _BYTE v24[128];

  if (objc_msgSend(a3, "objectForKey:", CFSTR("associatedStoreIdentifiers")))
  {
    v23[0] = 0;
    v23[1] = 0;
    v22 = v23;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v5 = objc_msgSend(a3, "objectForKey:", CFSTR("associatedStoreIdentifiers"));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v5);
          sub_1015A2E04(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i), "UTF8String"));
          sub_1006751D8((uint64_t **)&v22, (const void **)__p, (uint64_t)__p);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      }
      while (v6);
    }
    v9 = *a2;
    sub_100793598((uint64_t *)&v14, (const void ***)&v22);
    *(_BYTE *)(v9 + 24) = 1;
    if ((_QWORD **)(v9 + 32) != &v14)
      sub_100793670((uint64_t **)(v9 + 32), v14, &v15);
    sub_100090AE4((uint64_t)&v14, v15);
    sub_100090AE4((uint64_t)&v22, v23[0]);
  }
  if (objc_msgSend(a3, "objectForKey:", CFSTR("muid"))
    && objc_msgSend(objc_msgSend(a3, "objectForKey:", CFSTR("muid")), "unsignedLongLongValue"))
  {
    v10 = *a2;
    v11 = objc_msgSend(objc_msgSend(a3, "objectForKey:", CFSTR("muid")), "unsignedLongLongValue");
    *(_BYTE *)(v10 + 56) = 1;
    *(_QWORD *)(v10 + 64) = v11;
  }
  result = objc_msgSend(a3, "objectForKey:", CFSTR("resultProviderIdentifier"));
  if (result)
  {
    result = objc_msgSend(objc_msgSend(a3, "objectForKey:", CFSTR("resultProviderIdentifier")), "intValue");
    if ((_DWORD)result)
    {
      v13 = *a2;
      result = objc_msgSend(objc_msgSend(a3, "objectForKey:", CFSTR("resultProviderIdentifier")), "intValue");
      *(_BYTE *)(v13 + 72) = 1;
      *(_DWORD *)(v13 + 76) = (_DWORD)result;
    }
  }
  return result;
}

void sub_100793308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
  sub_100090AE4((uint64_t)&a9, a10);
  sub_100090AE4((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void sub_100793364(_QWORD *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30[2];
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;

  sub_1015A2E04(v33, (char *)objc_msgSend(a2, "UTF8String"));
  sub_1015A2E04(__p, (char *)objc_msgSend(a3, "UTF8String"));
  v7 = sub_100793898((uint64_t)v33, (uint64_t)__p, &v35);
  if (v32 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  v8 = (std::__shared_weak_count *)v36;
  v30[0] = v35;
  v30[1] = v36;
  if (v36)
  {
    v9 = (unint64_t *)(v36 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_1007930CC(v7, v30, a4);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v15 = (_QWORD *)*a1;
  v13 = a1 + 1;
  v14 = v15;
  if (v15 != v13)
  {
    do
    {
      v16 = v14[4];
      v28 = v35;
      v29 = (std::__shared_weak_count *)v36;
      if (v36)
      {
        v17 = (unint64_t *)(v36 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v16 + 16))(v16, 0, &v28);
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (_QWORD *)v14[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v14[2];
          v24 = *v23 == (_QWORD)v14;
          v14 = v23;
        }
        while (!v24);
      }
      v14 = v23;
    }
    while (v23 != v13);
  }
  v25 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v26 = (unint64_t *)(v36 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_100793540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_100261F44((uint64_t)&a12);
  sub_100261F44(v25 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_100793598(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1007935EC(a1, *a2, a2 + 1);
  return a1;
}

void sub_1007935D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100090AE4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1007935EC(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100675420(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t **sub_100793670(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v10 = (uint64_t **)sub_10031C1B0((uint64_t)v5, &v18, v17 + 4);
          sub_1000145B0(v5, v18, v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_10036C1BC((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_1007937F0((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100793844(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1007937DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1007937F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1007937F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100090AE4(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_100090AE4(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

const void **sub_100793844(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t v5;
  const void **v6;

  sub_1001B7B1C((uint64_t)a1, a2, (uint64_t)&v6);
  v3 = (uint64_t **)sub_10031C1B0((uint64_t)a1, &v5, v6 + 4);
  sub_1000145B0(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

uint64_t sub_100793898@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x80uLL);
  result = sub_1007938F8((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1007938E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007938F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102152958;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1007939CC((int)&v5, (char *)(a1 + 24), a2, a3);
  return a1;
}

void sub_100793948(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10079395C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102152958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100793970(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102152958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1007939A4(uint64_t a1)
{
  char v1;

  sub_100793A7C((uint64_t)&v1, a1 + 24);
}

void sub_1007939CC(int a1, char *__dst, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  *(_OWORD *)v6 = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v5 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_100792DB4(__dst, (uint64_t)v6, (__int128 *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_100793A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018EE63C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100793A7C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0)
    operator delete(*(void **)(a2 + 80));
  sub_100090AE4(a2 + 32, *(char **)(a2 + 40));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *sub_100793ACC(_QWORD *a1, void *a2)
{
  *a1 = objc_msgSend(a2, "copy");
  return a1;
}

id *sub_100793AF8(id *a1)
{
  if (*a1)

  return a1;
}

void sub_100793B2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  if (&_ADClientAddValueForScalarKey)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@.%@"), *a1, a2);
    ADClientAddValueForScalarKey(v4, a3);

  }
}

void sub_100793BA0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@.%@"), *a1, a2);
  ADClientSetValueForScalarKey(v4, a3);

}

void sub_100793C04(_QWORD *a1, uint64_t a2, double a3)
{
  id v4;

  v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@.%@"), *a1, a2);
  ADClientPushValueForDistributionKey(v4, a3);

}

uint64_t sub_100793C68(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;

  if ((result - 1) > 2)
    v2 = 0;
  else
    v2 = dword_101BC0FD4[(int)result - 1];
  if (a2 - 1 > 2)
    v3 = 0;
  else
    v3 = dword_101BC0FD4[a2 - 1];
  if (v2 <= v3)
    return a2;
  else
    return result;
}

void sub_100793CAC(_QWORD *a1@<X8>)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  HIDWORD(v10) = 0;
  sub_1001E4804(buf);
  v2 = sub_1001E4B84(*(uint64_t *)buf, "GpsSignalEnvironmentAiding", (_DWORD *)&v10 + 1);
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (HIDWORD(v10) == 1)
    v6 = 1;
  else
    v6 = v2 ^ 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102152998);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLSE,GpsSignalEnvironmentAiding,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v11[0] = 67240192;
    v11[1] = v6;
    LODWORD(v10) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,GpsSignalEnvironmentAiding,%{public}d", v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssAssistanceSignalEnv> CLGnssAssistanceSignalEnv::create(id<CLIntersiloUniverse>, CLGnssAssistanceSignalEnv::CLGnssAssistanceSignalEnvCallback)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v6)
    operator new();
  *a1 = 0;
}

void sub_100793F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == v16)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  operator delete();
}

void sub_100793FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_100270E34(a1 + 16, a3);
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101907CE4(qword_1022A0070 == -1);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGnssAssistanceSignalEnv.mm", 38, "CLGnssAssistanceSignalEnv");
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_102152998);
LABEL_3:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLSE,initializing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v8[0] = 0;
    LODWORD(v7) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,initializing", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceSignalEnv::CLGnssAssistanceSignalEnv(id<CLIntersiloUniverse>, CLGnssAssistanceSignalEnvCallback)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100D7F93C();
}

void sub_1007941FC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)v1[5];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *v1;
  *v1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100794264(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *a1;
  *a1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t sub_1007942D0(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 48);
  return result;
}

void sub_1007942DC(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  *(_BYTE *)(a1 + 64) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102152998);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLSE,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v5 = *(unsigned __int8 *)(a1 + 64);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLSE,fIsAirborne,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::feedAirborneActivity(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_100794490(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1007944BC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

_QWORD *sub_1007944E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = a2;
  a1[2] = 26;
  sub_100270E34((uint64_t)(a1 + 3), a3);
  return a1;
}

void sub_100794520(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100794548(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100794560(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _DWORD v25[4];
  uint8_t buf[4];
  int v27;

  result = (**(uint64_t (***)(_QWORD, _QWORD))*a1)(*a1, a1[1]);
  v4 = result;
  if ((_DWORD)result)
  {
    v5 = v3;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021529D8);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v27 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,sending event %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021529D8);
      v25[0] = 67109120;
      v25[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutActiveStateDetector,sending event %d", v25);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::updateModel()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v24 = 0;
    v23 = 0u;
    v22 = 0u;
    v21 = 0u;
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = 0u;
    v12 = 0u;
    v11 = 0u;
    v10[0] = v4;
    v10[1] = v5;
    *(_DWORD *)buf = 8;
    v7 = a1[6];
    if (!v7)
      sub_10025FD1C();
    return (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, buf, v10);
  }
  return result;
}

uint64_t sub_100794798(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 0x100) != 0)
      return sub_100794560(a1);
  }
  return result;
}

uint64_t sub_1007947DC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) != 0)
      return sub_100794560(a1);
  }
  return result;
}

uint64_t sub_100794820(uint64_t a1, int a2, double a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _DWORD v27[4];
  uint8_t buf[4];
  int v29;

  if (a2)
    v5 = 2;
  else
    v5 = 1;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021529D8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,sending external active state %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021529D8);
    v27[0] = 67109120;
    v27[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutActiveStateDetector,sending external active state %d", v27);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::feedExternalActiveState(BOOL, CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v26 = 0;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v11 = v5;
  v12 = a3;
  *(_DWORD *)buf = 8;
  v7 = *(_QWORD *)(a1 + 48);
  if (!v7)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, int *))(*(_QWORD *)v7 + 48))(v7, buf, &v11);
}

void sub_100794A4C(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021529D8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,setting workout type to,%{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021529D8);
    v15 = 134349056;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutActiveStateDetector,setting workout type to,%{public}ld", &v15, 12);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::setWorkoutType(CMWorkoutType)", "%s\n", v12);
    if (v13 != (char *)buf)
      free(v13);
  }
  if (a1[2] == a2)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021529D8);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[2];
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,workout type didn't change,%{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021529D8);
      v7 = a1[2];
      v15 = 134349056;
      v16 = v7;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutActiveStateDetector,workout type didn't change,%{public}ld", &v15, v14);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::setWorkoutType(CMWorkoutType)", "%s\n", v8);
      if (v9 != (char *)buf)
        free(v9);
    }
    return;
  }
  a1[2] = a2;
  if ((unint64_t)(a2 - 5) < 0x3D)
    goto LABEL_17;
  if (a2 <= 3)
  {
    if ((unint64_t)(a2 - 1) < 3)
    {
LABEL_17:
      v10 = *a1;
      *a1 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      return;
    }
    if (a2)
      return;
    goto LABEL_26;
  }
  if (a2 == 4)
    sub_100794E00();
  if (a2 == 66)
  {
LABEL_26:
    v11 = *a1;
    *a1 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    a1[2] = 0;
  }
}

void sub_100794E00()
{
  operator new();
}

void sub_100794E40()
{
  operator delete();
}

void sub_100794E64(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100794E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = a2;
  v3 = a1;
  sub_100796D70((uint64_t)&v4, &v2, &v3);
}

void sub_100794ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_102152A08;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_1001B7DEC();
}

void sub_1007953F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a17 < 0)
    operator delete(__p);
  v20 = v17[9];
  v17[9] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v17[8];
  v17[8] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v17[7];
  v17[7] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v17[6];
  v17[6] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v17[5];
  v17[5] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v17[4];
  v17[4] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v17[3];
  v17[3] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v17[2];
  v17[2] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *v18;
  *v18 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  _Unwind_Resume(exception_object);
}

void sub_10079555C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006AFBC4(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100795724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100795744(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onNetworkLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onNetworkLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onNetworkLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006B0200(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10079590C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10079592C(uint64_t a1, int *a2, int32x2_t *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006B0468(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100795AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100795B14(uint64_t a1, _DWORD *a2, uint8_t *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006B0AB8(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100795CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100795CFC(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onMotionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006AF7DC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100795EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100795EE4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006AF9F0(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007960AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007960CC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onOdometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006AF270(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100796294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007962B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_102152A08;

  *(_QWORD *)(a1 + 104) = 0;
  objc_msgSend(*(id *)(a1 + 96), "stopMonitoringEmergencyState:", CLISP_ME_TOKEN);

  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_1007963E8(uint64_t a1)
{
  sub_1007962B4(a1);
  operator delete();
}

uint64_t sub_10079640C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = a1[9];
  a1[9] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

id sub_1007964C0(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 == 12)
    sub_10061DCC4();
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2, 0);
}

id sub_10079653C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

id sub_10079654C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), a2);
}

id sub_10079655C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), a2);
}

id sub_10079656C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

id sub_10079657C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

BOOL sub_10079658C(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 88), "vendor"), "proxyForService:", CFSTR("CLDataProtectionManager")), "syncgetDataAvailability") == 0;
}

id sub_1007965BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 104), "syncgetIsAssociated");
}

void sub_1007965C4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  _BYTE *v6;
  __int128 v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[8];
  __int128 __p;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if ((a2 & 1) != 0)
  {
    *(_QWORD *)buf = qword_1023114A0;
    if (byte_1023114A8[23] < 0)
    {
      sub_100115CE4(&__p, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
    }
    else
    {
      __p = *(_OWORD *)byte_1023114A8;
      v13 = *(_QWORD *)&byte_1023114A8[16];
    }
    v14 = xmmword_1023114C0;
    v15 = xmmword_1023114D0;
    v16 = xmmword_1023114E0;
    v17 = qword_1023114F0;
    if ((objc_msgSend(*(id *)(a1 + 104), "syncgetAssociatedNetwork:", buf) & 1) != 0)
    {
      *(_QWORD *)a3 = *(_QWORD *)buf;
      v6 = (_BYTE *)(a3 + 8);
      if (SHIBYTE(v13) < 0)
      {
        sub_100115CE4(v6, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        *(_OWORD *)v6 = __p;
        *(_QWORD *)(a3 + 24) = v13;
      }
      v7 = v15;
      *(_OWORD *)(a3 + 32) = v14;
      *(_OWORD *)(a3 + 48) = v7;
      *(_OWORD *)(a3 + 64) = v16;
      *(_QWORD *)(a3 + 80) = v17;
      *(_BYTE *)(a3 + 88) = 1;
    }
    else
    {
      sub_10031F08C((_BYTE *)a3, (uint64_t)&byte_102311440);
    }
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102152B40);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "WIFI_LOC: failed to get power state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102152B40);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "WIFI_LOC: failed to get power state", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "virtual CLWifiService_Type::AssociationState CLWifiLocationProviderExternal::getAssociatedState(BOOL) const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_10031F08C((_BYTE *)a3, (uint64_t)&byte_102311440);
  }
}

void sub_100796854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100796878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unsigned int v7;
  id v8;
  NSObject *v9;
  const char *v10;
  uint64_t *v11;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  __int16 v19;
  uint64_t *v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t *v26;
  __int16 v27;
  int v28;

  v7 = a2;
  v8 = objc_msgSend(*(id *)(a1 + 104), "syncgetStartScanWithType:lowPriority:lowLatency:passive:requester:channels:", a2, a3, a4, 1, "wlp", a6);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102152B60);
  v9 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v10 = sub_1000A9998(v7);
    v11 = a5;
    if (*((char *)a5 + 23) < 0)
      v11 = (uint64_t *)*a5;
    *(_DWORD *)buf = 136446722;
    v24 = v10;
    v25 = 2082;
    v26 = v11;
    v27 = 1026;
    v28 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, %{public}s, %{public}s, result, %{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102152B60);
    v13 = qword_1022A0058;
    v14 = sub_1000A9998(v7);
    if (*((char *)a5 + 23) < 0)
      a5 = (uint64_t *)*a5;
    v17 = 136446722;
    v18 = v14;
    v19 = 2082;
    v20 = a5;
    v21 = 1026;
    v22 = (int)v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "@WifiFlow, scanreq, %{public}s, %{public}s, result, %{public}d", &v17, 28);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProviderExternal::startWifiScan(CLWifiService_Type::ScanType, BOOL, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if ((v8 & 1) == 0)
    sub_10001947C(4u);
  return v8;
}

id sub_100796AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 88), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetQueryLocationsForWifis:useCache:piggyback:config:", a2, a3, a4, a5);
}

uint64_t sub_100796B18(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 104), "setWifiPower:", a2);
  return 1;
}

id sub_100796B38(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 104), "syncgetSetAutoJoin:", a2);
}

BOOL sub_100796B44()
{
  return sub_10019CFA0() == 1;
}

uint64_t sub_100796B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 144))(*(_QWORD *)(a1 + 80), a2, a3, 0xFFFFFFFFLL);
}

__n128 sub_100796B74@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  void *v14;
  CLMotionActivity v15;

  v9 = 0;
  v10 = &v9;
  v11 = 0xB812000000;
  v12 = sub_100206D28;
  v13 = nullsub_55;
  v14 = &unk_102080316;
  CLMotionActivity::init(&v15);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100796C64;
  v8[3] = &unk_10214C4C0;
  v8[4] = &v9;
  sub_1005E9924((uint64_t)v8);
  v2 = v10;
  v3 = *((_OWORD *)v10 + 10);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)v10 + 9);
  *(_OWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 128) = v2[22];
  v4 = *((_OWORD *)v2 + 6);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *((_OWORD *)v2 + 8);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)v2 + 7);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *((_OWORD *)v2 + 4);
  *(_OWORD *)a1 = *((_OWORD *)v2 + 3);
  *(_OWORD *)(a1 + 16) = v6;
  _Block_object_dispose(&v9, 8);
  return result;
}

void sub_100796C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100796C64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 208))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

id sub_100796C84(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v7;
  __int128 v8;
  _OWORD v10[2];
  uint64_t v11;

  v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 88), "vendor"), "proxyForService:", CFSTR("CLWifiTilesManager"));
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  v11 = *(_QWORD *)(a2 + 32);
  return objc_msgSend(v7, "requestTileDownloadForLat:lon:details:", v10, a3, a4);
}

void sub_100796CEC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100796D18(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100796D44(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100796D70(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = operator new(0x88uLL);
  sub_100796DD0(v5, a2, a3);
}

void sub_100796DBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100796DD0(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = off_102152B90;
  a1[1] = 0;
  sub_100794ED4((uint64_t)(a1 + 3), *a2, *a3);
}

void sub_100796E10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100796E24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102152B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100796E38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102152B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100796E6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100796E7C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BC1008;
      v1[3] = unk_101BC1018;
      v1[4] = xmmword_101BC1028;
      v1[0] = xmmword_101BC0FE8;
      v1[1] = unk_101BC0FF8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100796F50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100796F68()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100797004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10079701C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1007970A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1007970C0()
{
  sub_1015A2E04(qword_1023045A8, "WifiLocationProvider");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023045A8, (void *)&_mh_execute_header);
}

uint64_t sub_100798B88(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t result;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v5 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v6 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v7 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v8 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v9 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v10 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v11 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v12 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v13 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v14 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    v15 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_12;
        v16 += 7;
        v22 = v17++ >= 9;
        if (v22)
        {
          v18 = 0;
          v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_14:
      if (v23 || (v18 & 7) == 4)
        break;
      switch((v18 >> 3))
      {
        case 1u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if ((v30 & 0x80) == 0)
              goto LABEL_135;
            v25 += 7;
            v22 = v26++ >= 9;
            if (v22)
            {
              LODWORD(v27) = 0;
              goto LABEL_137;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_135:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_137:
          v102 = v4[487];
          goto LABEL_178;
        case 2u:
          v38 = 0;
          v39 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x100u;
          while (2)
          {
            v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
              v27 |= (unint64_t)(v42 & 0x7F) << v38;
              if (v42 < 0)
              {
                v38 += 7;
                v22 = v39++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_141:
          v102 = v6[465];
          goto LABEL_178;
        case 3u:
          v43 = 0;
          v44 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x10000u;
          while (2)
          {
            v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46;
              v27 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                v22 = v44++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_145:
          v102 = v7[466];
          goto LABEL_178;
        case 4u:
          v48 = 0;
          v49 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x2000u;
          while (2)
          {
            v50 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51;
              v27 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v22 = v49++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_149:
          v102 = v8[467];
          goto LABEL_178;
        case 5u:
          v53 = 0;
          v54 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x800u;
          while (2)
          {
            v55 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v27 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v22 = v54++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_153:
          v102 = v9[468];
          goto LABEL_178;
        case 6u:
          v58 = 0;
          v59 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x8000u;
          while (2)
          {
            v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v27 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v22 = v59++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_157;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_157:
          v102 = v10[469];
          goto LABEL_178;
        case 7u:
          v63 = 0;
          v64 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x400u;
          while (2)
          {
            v65 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
              v27 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v22 = v64++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_161;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_161:
          v102 = v11[470];
          goto LABEL_178;
        case 8u:
          v68 = 0;
          v69 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x1000u;
          while (2)
          {
            v70 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v71 = v70 + 1;
            if (v70 == -1 || v71 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71;
              v27 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                v22 = v69++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_165;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_165:
          v102 = v12[471];
          goto LABEL_178;
        case 9u:
          v73 = 0;
          v74 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x4000u;
          while (2)
          {
            v75 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v76 = v75 + 1;
            if (v75 == -1 || v76 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v75);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76;
              v27 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                v22 = v74++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_169:
          v102 = v13[472];
          goto LABEL_178;
        case 0xAu:
          *(_DWORD *)(a1 + v5[464]) |= 0x80u;
          v78 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v78 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = v14[473];
          goto LABEL_203;
        case 0xBu:
          *(_DWORD *)(a1 + v5[464]) |= 0x10u;
          v80 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v80);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v80 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = v15[474];
          goto LABEL_203;
        case 0xCu:
          *(_DWORD *)(a1 + v5[464]) |= 0x20u;
          v81 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v81 <= 0xFFFFFFFFFFFFFFFBLL && v81 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v81 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 36;
          goto LABEL_203;
        case 0xDu:
          *(_DWORD *)(a1 + v5[464]) |= 0x40u;
          v82 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v82);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v82 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 40;
          goto LABEL_203;
        case 0xEu:
          *(_DWORD *)(a1 + v5[464]) |= 2u;
          v83 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v83);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v83 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 20;
          goto LABEL_203;
        case 0xFu:
          *(_DWORD *)(a1 + v5[464]) |= 4u;
          v84 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v84);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v84 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 24;
          goto LABEL_203;
        case 0x10u:
          *(_DWORD *)(a1 + v5[464]) |= 8u;
          v85 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v85);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v85 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 28;
          goto LABEL_203;
        case 0x11u:
          *(_DWORD *)(a1 + v5[464]) |= 0x100000u;
          v86 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v86);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v86 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 96;
          goto LABEL_203;
        case 0x12u:
          v87 = 0;
          v88 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x200u;
          while (2)
          {
            v89 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v90 = v89 + 1;
            if (v89 == -1 || v90 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v91 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v90;
              v27 |= (unint64_t)(v91 & 0x7F) << v87;
              if (v91 < 0)
              {
                v87 += 7;
                v22 = v88++ >= 9;
                if (v22)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_173:
          v102 = 52;
          goto LABEL_178;
        case 0x13u:
          *(_DWORD *)(a1 + v5[464]) |= 1u;
          v92 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v92 <= 0xFFFFFFFFFFFFFFF7 && v92 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v93 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v92);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v92 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v93 = 0;
          }
          *(_QWORD *)(a1 + 8) = v93;
          continue;
        case 0x14u:
          v94 = 0;
          v95 = 0;
          v27 = 0;
          *(_DWORD *)(a1 + v5[464]) |= 0x40000u;
          break;
        case 0x15u:
          *(_DWORD *)(a1 + v5[464]) |= 0x20000u;
          v99 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v99 <= 0xFFFFFFFFFFFFFFFBLL && v99 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v99);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v99 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 84;
          goto LABEL_203;
        case 0x16u:
          *(_DWORD *)(a1 + v5[464]) |= 0x200000u;
          v100 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v100);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v100 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 100;
          goto LABEL_203;
        case 0x17u:
          *(_DWORD *)(a1 + v5[464]) |= 0x80000u;
          v101 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v79 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v101);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v101 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v79 = 0;
          }
          v103 = 92;
LABEL_203:
          *(_DWORD *)(a1 + v103) = v79;
          continue;
        default:
          v31 = v4;
          v32 = v6;
          v33 = v5;
          v34 = v7;
          v35 = v8;
          v36 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v15 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          a1 = v36;
          v9 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          v8 = v35;
          v10 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          v7 = v34;
          v11 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          v5 = v33;
          v14 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          v6 = v32;
          v13 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          v4 = v31;
          v12 = &OBJC_IVAR___CLGatheringSettings__loggingPersistentMaxAge;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v96 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v97 = v96 + 1;
        if (v96 == -1 || v97 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v98 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v96);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v97;
        v27 |= (unint64_t)(v98 & 0x7F) << v94;
        if ((v98 & 0x80) == 0)
          goto LABEL_175;
        v94 += 7;
        v22 = v95++ >= 9;
        if (v22)
        {
          LODWORD(v27) = 0;
          goto LABEL_177;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_175:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v27) = 0;
LABEL_177:
      v102 = 88;
LABEL_178:
      *(_DWORD *)(a1 + v102) = v27;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10079B3D4(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = sub_10126552C((uint64_t)a1, a2);
  *((_OWORD *)v3 + 7) = 0u;
  v3[21] = 0;
  *v3 = off_102152C08;
  v3[20] = v3 + 21;
  v3[22] = 0;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_DWORD *)v3 + 46) = -1;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_BYTE *)v3 + 288) = 0;
  *((_DWORD *)v3 + 73) = -1;
  *((_WORD *)v3 + 148) = 0;
  *((_BYTE *)v3 + 298) = 0;
  v3[38] = v3 + 39;
  v3[39] = 0;
  v3[40] = 0;
  v3[41] = 0;
  v3[43] = off_102141E98;
  v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_102141ED0;
  *((_DWORD *)v4 + 6) = 31337;
  a1[43] = off_102152D70;
  a1[44] = v4 + 3;
  a1[45] = v4;
  a1[46] = 0;
  sub_100E35814();
}

void sub_10079BA20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1007A1B98(v4);
  sub_1007A1E58((uint64_t *)(v1 + 328), 0);
  sub_1007A1D44(v1 + 304, *(_QWORD **)(v1 + 312));
  sub_10079C284(v3);
  sub_1007A1CAC(v2, *(_QWORD **)(v1 + 168));
  v7 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 144) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *v5;
  *v5 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_1012655F4(v1);
  _Unwind_Resume(a1);
}

void sub_10079BB4C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLEFenceManagerConcrete::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007A0468(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10079BD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10079BD24(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLEFenceManagerConcrete::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10079FB64(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10079BEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10079BEFC(uint64_t a1)
{
  sub_10079BF04(*(_QWORD *)(a1 + 32));
}

void sub_10079BF04(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  NSObject *v5;
  int v6;
  _BOOL4 v7;
  _WORD v8[8];
  uint8_t buf[8];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BOOL4 v15;

  if (!*(_BYTE *)(a1 + 296))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v5 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 297);
      v7 = *(_QWORD *)(a1 + 328) == 0;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v6;
      v14 = 1026;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"iB: Initializing\", \"unlocked\":%{public}d, \"awaiting\":%{public}d}", buf, 0x1Eu);
    }
    sub_1012E6E54();
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v1 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "iB: Already initialized", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Already initialized", v8, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::unlockedInitialize()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

uint64_t sub_10079C284(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10079C2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_102152C08;
  sub_10079C9C8(a1);
  sub_1007A1B98(a1 + 344);
  sub_1007A1E58((uint64_t *)(a1 + 328), 0);
  sub_1007A1D44(a1 + 304, *(_QWORD **)(a1 + 312));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  sub_1007A1CAC(a1 + 160, *(_QWORD **)(a1 + 168));
  v2 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_1012655F4(a1);
}

void sub_10079C41C(uint64_t a1)
{
  sub_10079C2E8(a1);
  operator delete();
}

void sub_10079C440(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLEFenceManagerConcrete::onAuthorizationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onAuthorizationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onAuthorizationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10079E948(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10079C5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10079C618(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLEFenceManagerConcrete::onBeaconNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onBeaconNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onBeaconNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10079E044(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10079C7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10079C7F0(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLEFenceManagerConcrete::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10079FD48(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10079C9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10079C9C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  *(_QWORD *)(a1 + 336) = 0;
}

uint64_t sub_10079CA50(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  unsigned __int8 v7;
  _BYTE v9[16];
  void *__p[2];
  char v11;
  uint8_t buf[8];
  _BYTE v13[32];
  std::string v14[2];
  std::string v15;
  int v16;
  int v17;
  uint64_t (**v18)();
  __int128 v19;
  __int128 v20;
  int v21;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v5 = v11 >= 0 ? __p : (void **)__p[0];
    v6 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v13 = 2082;
    *(_QWORD *)&v13[2] = "";
    *(_WORD *)&v13[10] = 2081;
    *(_QWORD *)&v13[12] = v5;
    *(_WORD *)&v13[20] = 2050;
    *(_QWORD *)&v13[22] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Adding monitored region\", \"region\":%{private, location:escape_only}s, \"totalRegions\":%{public}lu}", buf, 0x26u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBeaconFenceAuthorizationManager")), "syncgetRemoveFence:", a2);
  v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBeaconFenceAuthorizationManager")), "syncgetAddFence:", a2);
  memset(v13, 0, sizeof(v13));
  *(_QWORD *)buf = off_10213F008;
  memset(v14, 0, sizeof(v14));
  memset(&v15, 0, sizeof(v15));
  v17 = 0;
  v18 = off_10213F058;
  v19 = 0u;
  v20 = 0u;
  v21 = 1;
  std::string::operator=((std::string *)v13, (const std::string *)(a2 + 8));
  *(_QWORD *)&v13[24] = *(_QWORD *)(a2 + 32);
  std::string::operator=(v14, (const std::string *)(a2 + 40));
  std::string::operator=(&v14[1], (const std::string *)(a2 + 64));
  std::string::operator=(&v15, (const std::string *)(a2 + 88));
  v16 = *(_DWORD *)(a2 + 112);
  if ((v7 & 1) != 0)
  {
    if (sub_1001DFAE8())
    {
      sub_100119F3C(v9);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      sub_10052A3B8((uint64_t)v9, "btle_fence_installed", (char *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      sub_1001DFAF4((uint64_t)v9, (uint64_t)"locationd");
      sub_10011A5A8(v9);
    }
    sub_100C3310C(a2, (unsigned __int8 *)(a1 + 192), *(void **)(a1 + 32));
  }
  else
  {
    v17 = 3;
  }
  LODWORD(__p[0]) = 0;
  (*(void (**)(uint64_t, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
  v18 = off_10213F058;
  if (SBYTE7(v20) < 0)
    operator delete((void *)v19);
  return sub_100114750((uint64_t)buf);
}

void sub_10079CD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_10011A5A8(&a10);
  sub_10079CD88((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10079CD88(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = off_10213F058;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  return sub_100114750(a1);
}

BOOL sub_10079CDC8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t v4[2];
  uint64_t v5;

  v4[0] = (uint64_t)v4;
  v4[1] = (uint64_t)v4;
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 224))(a1, a2, v4);
  v2 = v5 != 0;
  sub_1000CAD6C(v4);
  return v2;
}

void sub_10079CE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000CAD6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10079CE30(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  unsigned __int8 v7;
  _BYTE v9[16];
  void *__p[2];
  char v11;
  uint8_t buf[8];
  _BYTE v13[32];
  std::string v14[2];
  std::string v15;
  int v16;
  int v17;
  uint64_t (**v18)();
  __int128 v19;
  __int128 v20;
  int v21;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v5 = v11 >= 0 ? __p : (void **)__p[0];
    v6 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v13 = 2082;
    *(_QWORD *)&v13[2] = "";
    *(_WORD *)&v13[10] = 2081;
    *(_QWORD *)&v13[12] = v5;
    *(_WORD *)&v13[20] = 2050;
    *(_QWORD *)&v13[22] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Removing monitored region\", \"region\":%{private, location:escape_only}s, \"totalRegions\":%{public}lu}", buf, 0x26u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBeaconFenceAuthorizationManager")), "syncgetRemoveFence:", a2);
  memset(v13, 0, sizeof(v13));
  *(_QWORD *)buf = off_10213F008;
  memset(v14, 0, sizeof(v14));
  memset(&v15, 0, sizeof(v15));
  v17 = 0;
  v18 = off_10213F058;
  v19 = 0u;
  v20 = 0u;
  v21 = 1;
  std::string::operator=((std::string *)v13, (const std::string *)(a2 + 8));
  *(_QWORD *)&v13[24] = *(_QWORD *)(a2 + 32);
  std::string::operator=(v14, (const std::string *)(a2 + 40));
  std::string::operator=(&v14[1], (const std::string *)(a2 + 64));
  std::string::operator=(&v15, (const std::string *)(a2 + 88));
  v16 = *(_DWORD *)(a2 + 112);
  if ((v7 & 1) != 0)
  {
    if (sub_1001DFAE8())
    {
      sub_100119F3C(v9);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      sub_10052A3B8((uint64_t)v9, "btle_fence_uninstalled", (char *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      sub_1001DFAF4((uint64_t)v9, (uint64_t)"locationd");
      sub_10011A5A8(v9);
    }
    sub_100C33454(a2, *(void **)(a1 + 32));
  }
  else
  {
    v17 = 3;
  }
  LODWORD(__p[0]) = 1;
  (*(void (**)(uint64_t, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
  v18 = off_10213F058;
  if (SBYTE7(v20) < 0)
    operator delete((void *)v19);
  return sub_100114750((uint64_t)buf);
}

void sub_10079D0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_10011A5A8(&a10);
  sub_10079CD88((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10079D148(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  NSString *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  void **v11;
  int v12;
  int v13;
  void *p_p;
  _QWORD *v15;
  NSObject *v16;
  void **v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  uint64_t v23;
  uint8_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  _BYTE v36[18];
  char v37;
  int v38;
  _BYTE *v39;
  __int16 v40;
  int v41;
  void *__p;
  void *v43[2];
  __int128 v44;
  std::string v45[2];
  std::string v46;
  int v47;
  int v48;
  uint64_t (**v49)();
  __int128 v50;
  __int128 v51;
  int v52;
  uint8_t buf[8];
  __int128 v54;
  __int128 v55;
  std::string v56[2];
  std::string v57;
  int v58;
  int v59;
  uint64_t (**v60)();
  __int128 v61;
  __int128 v62;
  int v63;

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBeaconFenceAuthorizationManager"));
  if (*(char *)(a2 + 63) >= 0)
    v5 = a2 + 40;
  else
    v5 = *(_QWORD *)(a2 + 40);
  v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  if (*(char *)(a2 + 87) >= 0)
    v7 = a2 + 64;
  else
    v7 = *(_QWORD *)(a2 + 64);
  v8 = objc_msgSend(v4, "syncgetCanBundle:performFenceOperationFor:", v6, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  if (v8)
  {
    v9 = v8;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v10 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
      v11 = SHIBYTE(v43[1]) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67240451;
      *(_DWORD *)&buf[4] = v9;
      LOWORD(v54) = 2081;
      *(_QWORD *)((char *)&v54 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning Authorization error,%{public}d, while requesting state for region,%{private}s", buf, 0x12u);
      if (SHIBYTE(v43[1]) < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v23 = qword_1022A0038;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v54 >= 0)
        v24 = buf;
      else
        v24 = *(uint8_t **)buf;
      *(_DWORD *)v36 = 67240451;
      *(_DWORD *)&v36[4] = v9;
      *(_WORD *)&v36[8] = 2081;
      *(_QWORD *)&v36[10] = v24;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v23, 1, "#Warning Authorization error,%{public}d, while requesting state for region,%{private}s", v36, 18);
      v26 = v25;
      if (SHIBYTE(v54) < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v26);
      if (v26 != (char *)&__p)
        free(v26);
    }
    v44 = 0u;
    *(_OWORD *)v43 = 0u;
    __p = off_10213F008;
    memset(v45, 0, sizeof(v45));
    memset(&v46, 0, sizeof(v46));
    v48 = 0;
    v49 = off_10213F058;
    v50 = 0u;
    v51 = 0u;
    v52 = 1;
    std::string::operator=((std::string *)v43, (const std::string *)(a2 + 8));
    *((_QWORD *)&v44 + 1) = *(_QWORD *)(a2 + 32);
    std::string::operator=(v45, (const std::string *)(a2 + 40));
    std::string::operator=(&v45[1], (const std::string *)(a2 + 64));
    std::string::operator=(&v46, (const std::string *)(a2 + 88));
    v12 = *(_DWORD *)(a2 + 112);
    v52 = 1;
    if (v9 == 2)
      v13 = 2;
    else
      v13 = 3;
    if (v9 == 1)
      v13 = 1;
    v47 = v12;
    v48 = v13;
    *(_DWORD *)buf = 3;
    (*(void (**)(uint64_t, uint8_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &__p, 0, 0xFFFFFFFFLL, 0);
    v49 = off_10213F058;
    if (SBYTE7(v51) < 0)
      operator delete((void *)v50);
    p_p = &__p;
  }
  else
  {
    v55 = 0u;
    v54 = 0u;
    memset(v56, 0, sizeof(v56));
    memset(&v57, 0, sizeof(v57));
    *(_QWORD *)buf = off_10213F008;
    v59 = 0;
    v60 = off_10213F058;
    v61 = 0u;
    v63 = 1;
    v62 = 0u;
    std::string::operator=((std::string *)&v54, (const std::string *)(a2 + 8));
    *((_QWORD *)&v55 + 1) = *(_QWORD *)(a2 + 32);
    std::string::operator=(v56, (const std::string *)(a2 + 40));
    std::string::operator=(&v56[1], (const std::string *)(a2 + 64));
    std::string::operator=(&v57, (const std::string *)(a2 + 88));
    v58 = *(_DWORD *)(a2 + 112);
    __p = off_10213F058;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_100115CE4(v43, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)v43 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)&v44 = *(_QWORD *)(a2 + 24);
    }
    *((_QWORD *)&v44 + 1) = *(_QWORD *)(a2 + 32);
    v15 = sub_1007A2DB4(a1 + 160, (uint64_t)&__p);
    __p = off_10213F058;
    if (SBYTE7(v44) < 0)
      operator delete(v43[0]);
    if ((_QWORD *)(a1 + 168) == v15)
    {
      v19 = *(_QWORD *)(a1 + 328);
      if (v19)
      {
        v63 = sub_100789614(v19, a2);
      }
      else
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152DC0);
        v20 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
          v21 = SHIBYTE(v43[1]) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)v36 = 136380675;
          *(_QWORD *)&v36[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Unable to find region,%{private}s, in the cache", v36, 0xCu);
          if (SHIBYTE(v43[1]) < 0)
            operator delete(__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          v32 = qword_1022A0038;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v36, a2);
          if (v37 >= 0)
            v33 = v36;
          else
            v33 = *(_BYTE **)v36;
          v38 = 136380675;
          v39 = v33;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v32, 0, "#Warning Unable to find region,%{private}s, in the cache", &v38, 12);
          v35 = v34;
          if (v37 < 0)
            operator delete(*(void **)v36);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v35);
          if (v35 != (char *)&__p)
            free(v35);
        }
        v63 = 1;
        v59 = 3;
      }
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v16 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
        v17 = SHIBYTE(v43[1]) >= 0 ? &__p : (void **)__p;
        v18 = *((_DWORD *)v15 + 24);
        *(_DWORD *)v36 = 136380931;
        *(_QWORD *)&v36[4] = v17;
        *(_WORD *)&v36[12] = 1025;
        *(_DWORD *)&v36[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "iB: Region,%{private}s, has state,%{private}d", v36, 0x12u);
        if (SHIBYTE(v43[1]) < 0)
          operator delete(__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152DC0);
        v27 = qword_1022A0038;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v36, a2);
        if (v37 >= 0)
          v28 = v36;
        else
          v28 = *(_BYTE **)v36;
        v29 = *((_DWORD *)v15 + 24);
        v38 = 136380931;
        v39 = v28;
        v40 = 1025;
        v41 = v29;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v27, 2, "iB: Region,%{private}s, has state,%{private}d", &v38, 18);
        v31 = v30;
        if (v37 < 0)
          operator delete(*(void **)v36);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v31);
        if (v31 != (char *)&__p)
          free(v31);
      }
      v63 = *((_DWORD *)v15 + 24);
    }
    LODWORD(__p) = 3;
    (*(void (**)(uint64_t, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &__p, buf, 0, 0xFFFFFFFFLL, 0);
    v60 = off_10213F058;
    if (SBYTE7(v62) < 0)
      operator delete((void *)v61);
    p_p = buf;
  }
  return sub_100114750((uint64_t)p_p);
}

void sub_10079DA34(_Unwind_Exception *a1)
{
  sub_10079CD88((uint64_t)&STACK[0x6B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10079DAA4(uint64_t a1, uint64_t a2)
{
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = +[NSMutableSet set](NSMutableSet, "set");
  v5 = *(_QWORD **)(a1 + 160);
  v6 = (_QWORD *)(a1 + 168);
  if (v5 != v6)
  {
    do
    {
      if (*((_DWORD *)v5 + 24) == 2)
      {
        v7 = (_QWORD *)v5[9];
        if (v7 != v5 + 10)
        {
          do
          {
            if ((v7[18] & 5) != 0)
            {
              v8 = v7 + 9;
              if (*((char *)v7 + 95) < 0)
                v8 = (_QWORD *)*v8;
              objc_msgSend(v4, "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
            }
            v9 = (_QWORD *)v7[1];
            if (v9)
            {
              do
              {
                v10 = v9;
                v9 = (_QWORD *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v7[2];
                v11 = *v10 == (_QWORD)v7;
                v7 = v10;
              }
              while (!v11);
            }
            v7 = v10;
          }
          while (v10 != v5 + 10);
        }
      }
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v11 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v11);
      }
      v5 = v13;
    }
    while (v13 != v6);
  }
  return (*(uint64_t (**)(uint64_t, id))(a2 + 16))(a2, v4);
}

uint64_t sub_10079DBCC()
{
  return 1;
}

void sub_10079DBD4(uint64_t a1, const std::string *a2, int a3, int a4, int a5)
{
  NSObject *v10;
  const std::string *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  const std::string *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _DWORD v21[4];
  uint64_t (**v22)();
  void *__p[2];
  __int128 v24;
  int v25;
  _BYTE v26[24];
  uint64_t (**v27)();
  void *v28[2];
  __int128 v29;
  uint64_t (**v30)();
  __int128 v31;
  __int128 v32;
  int v33;
  char v34;
  uint8_t buf[4];
  const std::string *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v10 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = a2;
    else
      v11 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    v36 = v11;
    v37 = 1024;
    v38 = a3;
    v39 = 1024;
    v40 = a4;
    v41 = 1024;
    v42 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "@iB: Simulating Beacon : %s.%d.%d  RegionState : %d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = a2;
    else
      v15 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)v26 = 136315906;
    *(_QWORD *)&v26[4] = v15;
    *(_WORD *)&v26[12] = 1024;
    *(_DWORD *)&v26[14] = a3;
    *(_WORD *)&v26[18] = 1024;
    *(_DWORD *)&v26[20] = a4;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 1, "@iB: Simulating Beacon : %s.%d.%d  RegionState : %d", v26, 30, v21[0], v21[2]);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::simulateBeaconEvent(const std::string &, int, int, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v25 = 1;
  *(_QWORD *)v26 = v26;
  *(_QWORD *)&v26[8] = v26;
  *(_QWORD *)&v26[16] = 0;
  v27 = off_10213F058;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = off_10213F058;
  v31 = 0u;
  v32 = 0u;
  v34 = 1;
  if (a5 == 4)
    v12 = 4;
  else
    v12 = 1;
  if (a5 == 2)
    v12 = 2;
  v33 = v12;
  v22 = off_10213F058;
  *(_OWORD *)__p = 0uLL;
  v24 = 0uLL;
  std::string::operator=((std::string *)__p, a2);
  WORD4(v24) = a3;
  WORD5(v24) = a4;
  HIDWORD(v24) = 7;
  std::string::operator=((std::string *)v28, (const std::string *)__p);
  *((_QWORD *)&v29 + 1) = *((_QWORD *)&v24 + 1);
  sub_10079E044(a1, v13, &v25, (uint64_t)v26);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v14 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@iB: Simulating Beacon : beacon notification sent", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    LOWORD(v21[0]) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 1, "@iB: Simulating Beacon : beacon notification sent", v21, v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::simulateBeaconEvent(const std::string &, int, int, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v22 = off_10213F058;
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  v30 = off_10213F058;
  if (SBYTE7(v32) < 0)
    operator delete((void *)v31);
  v27 = off_10213F058;
  if (SBYTE7(v29) < 0)
    operator delete(v28[0]);
  sub_1007A1BE8((uint64_t *)v26);
}

void sub_10079E00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a19 < 0)
    operator delete(__p);
  sub_10079E8EC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10079E044(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  char v20;
  uint64_t *v21;
  int v22;
  id v23;
  __int128 *v24;
  NSString *v25;
  char *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  __int128 *v31;
  NSString *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  char v39;
  _BOOL4 v40;
  _QWORD v41[5];
  _DWORD v42[32];
  uint64_t (**v43)();
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *__p[2];
  char v50;
  uint64_t (**v51)();
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  std::string v57;
  int v58;
  int v59;
  uint64_t (**v60)();
  __int128 __src;
  __int128 v62;
  uint64_t v63;
  int v64[3];
  uint64_t v65;
  uint8_t buf[8];
  _BYTE v67[20];
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;

  if (*a3 != 1)
    return result;
  v5 = result;
  v53 = 0u;
  v52 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  memset(&v57, 0, sizeof(v57));
  v51 = off_10213F008;
  v59 = 0;
  v60 = off_10213F058;
  __src = 0u;
  v62 = 0u;
  v6 = *(_DWORD *)(a4 + 104);
  if (v6 == 4)
    goto LABEL_6;
  if (v6 != 2)
  {
    v6 = 1;
LABEL_6:
    LODWORD(v63) = v6;
    goto LABEL_7;
  }
  LODWORD(v63) = 2;
  std::string::operator=((std::string *)&__src, (const std::string *)(a4 + 72));
  *((_QWORD *)&v62 + 1) = *(_QWORD *)(a4 + 96);
LABEL_7:
  v7 = a4 + 24;
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v8 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 16))(__p, a4 + 24);
    v9 = v50;
    v10 = (void **)__p[0];
    v65 = a4 + 24;
    v11 = *((_DWORD *)sub_1007A320C((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101B9EB60, &v65) + 24);
    v12 = __p;
    if (v9 < 0)
      v12 = v10;
    v13 = *(_QWORD *)(v5 + 176);
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v67 = 2082;
    *(_QWORD *)&v67[2] = "";
    *(_WORD *)&v67[10] = 2081;
    *(_QWORD *)&v67[12] = v12;
    v68 = 1025;
    v69 = v11;
    v70 = 1025;
    v71 = v63;
    v72 = 2050;
    v73 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Zone state transition\", \"region\":%{private, location:escape_only}s, \"fromState\":%{private}d, \"toState\":%{private}d, \"totalRegions\":%{public}lu}", buf, 0x32u);
    if (v50 < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)buf = a4 + 24;
  v40 = 0;
  v14 = *((_DWORD *)sub_1007A320C((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101B9EB60, (uint64_t *)buf) + 24);
  v15 = v63;
  v16 = v63;
  if (v14 != 1 && (_DWORD)v63 != 1)
  {
    *(_QWORD *)buf = a4 + 24;
    v17 = sub_1007A320C((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101B9EB60, (uint64_t *)buf);
    v16 = v63;
    v40 = *((_DWORD *)v17 + 24) != v63;
  }
  *(_QWORD *)buf = a4 + 24;
  *((_DWORD *)sub_1007A320C((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101B9EB60, (uint64_t *)buf) + 24) = v16;
  v64[0] = *(_DWORD *)(a4 + 108);
  *(_QWORD *)buf = a4 + 24;
  v18 = (uint64_t *)sub_1007A320C((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101B9EB60, (uint64_t *)buf)[9];
  v19 = v14 != 1 || v15 == 1;
  v20 = v19;
  v39 = v20;
  while (1)
  {
    v21 = v18;
    *(_QWORD *)buf = v7;
    if (v18 == sub_1007A320C((uint64_t **)(v5 + 160), v7, (uint64_t)&unk_101B9EB60, (uint64_t *)buf) + 10)
      break;
    std::string::operator=((std::string *)&v52, (const std::string *)(v21 + 5));
    *((_QWORD *)&v53 + 1) = v21[8];
    std::string::operator=((std::string *)&v54, (const std::string *)v21 + 3);
    std::string::operator=((std::string *)((char *)&v55 + 8), (const std::string *)v21 + 4);
    std::string::operator=(&v57, (const std::string *)v21 + 5);
    v58 = *((_DWORD *)v21 + 36);
    sub_100C3375C((uint64_t)&v51, (unsigned __int8 *)(v5 + 192));
    if (v40)
    {
      if ((v22 = *((_DWORD *)v21 + 36), (v22 & 1) != 0) && (_DWORD)v63 == 2 || (v22 & 2) != 0 && (_DWORD)v63 == 4)
      {
        *(_QWORD *)buf = buf;
        *(_QWORD *)v67 = buf;
        *(_QWORD *)&v67[8] = 0;
        v23 = objc_msgSend(objc_msgSend(*(id *)(v5 + 32), "vendor"), "proxyForService:", CFSTR("CLBeaconFenceAuthorizationManager"));
        if ((SBYTE7(v55) & 0x80u) == 0)
          v24 = &v54;
        else
          v24 = (__int128 *)v54;
        v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24);
        if (v56 >= 0)
          v26 = (char *)&v55 + 8;
        else
          v26 = (char *)*((_QWORD *)&v55 + 1);
        objc_msgSend(v23, "syncgetFences:forBundle:onBehalfOf:", buf, v25, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26));
        HIDWORD(v63) = *(_DWORD *)&v67[8];
        sub_1000CAD6C((uint64_t *)buf);
        *(_QWORD *)buf = v21 + 4;
        v27 = sub_1007A370C((uint64_t **)(v5 + 304), (uint64_t)(v21 + 4), (uint64_t)&unk_101B9EB60, (uint64_t *)buf);
        *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
        LODWORD(__p[0]) = 0;
        v28 = sub_1007A3878((uint64_t)(v27 + 19), 0, 0, (int *)&v63, (uint64_t)&v60, (int *)&v63 + 1, v64, (double *)buf, (int *)__p);
        v28[1] = v27 + 19;
        v29 = v27[19];
        *v28 = v29;
        *(_QWORD *)(v29 + 8) = v28;
        v27[19] = (uint64_t)v28;
        ++v27[21];
        v30 = *(void **)(v5 + 336);
        if ((SBYTE7(v55) & 0x80u) == 0)
          v31 = &v54;
        else
          v31 = (__int128 *)v54;
        v32 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3321888768;
        v41[2] = sub_10079F908;
        v41[3] = &unk_102152D18;
        v41[4] = v5;
        sub_1004E5FB0((uint64_t)v42, (uint64_t)&v51);
        v42[30] = v59;
        v43 = off_10213F058;
        if (SBYTE7(v62) < 0)
        {
          sub_100115CE4(&v44, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v44 = __src;
          v45 = v62;
        }
        v46 = *((_QWORD *)&v62 + 1);
        v47 = v63;
        v48 = v64[0];
        objc_msgSend(v30, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 0, v32, 0, v41);
        v43 = off_10213F058;
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        sub_100114750((uint64_t)v42);
LABEL_47:
        if (v15 == 1)
          goto LABEL_55;
        goto LABEL_48;
      }
    }
    if ((v39 & 1) != 0)
      goto LABEL_47;
    *(_DWORD *)buf = 3;
    (*(void (**)(uint64_t, uint8_t *, uint64_t (***)(), _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 152))(v5, buf, &v51, 0, 0xFFFFFFFFLL, 0);
LABEL_48:
    v33 = *(_QWORD *)(v5 + 328);
    if (v33)
    {
      sub_100787C50(v33, (uint64_t)(v21 + 4), v63);
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v34 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#Warning iB: state changed before first unlock", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152DC0);
        LOWORD(__p[0]) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "#Warning iB: state changed before first unlock", __p, v38);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
    }
LABEL_55:
    v35 = (uint64_t *)v21[1];
    if (v35)
    {
      do
      {
        v18 = v35;
        v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        v18 = (uint64_t *)v21[2];
        v19 = *v18 == (_QWORD)v21;
        v21 = v18;
      }
      while (!v19);
    }
  }
  v60 = off_10213F058;
  if (SBYTE7(v62) < 0)
    operator delete((void *)__src);
  return sub_100114750((uint64_t)&v51);
}

void sub_10079E868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,char a58)
{
  sub_10079CD88((uint64_t)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_10079E8EC(uint64_t a1)
{
  *(_QWORD *)(a1 + 64) = off_10213F058;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)(a1 + 24) = off_10213F058;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_1007A1BE8((uint64_t *)a1);
  return a1;
}

uint64_t sub_10079E948(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  NSObject *v17;
  _BYTE *v18;
  NSObject *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  NSObject *v23;
  _BYTE *v24;
  NSObject *v25;
  void *p_p;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  NSObject *v35;
  const char *v36;
  void **v37;
  NSObject *v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  const char *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t (**v53)();
  std::string v54;
  uint64_t v55;
  _BYTE v56[12];
  char v57;
  int v58;
  _BYTE *v59;
  void *__p;
  __int16 v61;
  const char *v62;
  __int16 v63;
  _BYTE *v64;
  _BYTE buf[24];
  __int128 v66;

  v6 = *(_QWORD *)(a4 + 8);
  if (v6 != a4)
  {
    v7 = (uint64_t **)(a1 + 160);
    v52 = (_QWORD *)(a1 + 168);
    while (1)
    {
      v53 = off_10213F058;
      if (*(char *)(v6 + 47) < 0)
        sub_100115CE4(&v54, *(void **)(v6 + 24), *(_QWORD *)(v6 + 32));
      else
        v54 = *(std::string *)(v6 + 24);
      v8 = v6 + 16;
      v55 = *(_QWORD *)(v6 + 48);
      if (*a3 == 1)
        break;
      if (!*a3)
      {
        v9 = sub_1007A2DB4((uint64_t)v7, (uint64_t)&v53);
        if (v52 == v9 || !sub_1007A2F70((uint64_t)(v9 + 9), v6 + 16))
        {
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          v23 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(buf, v6 + 16);
            v24 = buf;
            if (buf[23] < 0)
              v24 = *(_BYTE **)buf;
            __p = (void *)68289283;
            v61 = 2082;
            v62 = "";
            v63 = 2081;
            v64 = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Resuming monitoring for fence\", \"region\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          *(_QWORD *)buf = off_10213F058;
          *(_OWORD *)&buf[8] = 0u;
          v66 = 0u;
          std::string::operator=((std::string *)&buf[8], &v54);
          *((_QWORD *)&v66 + 1) = v55;
          if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBTLEBeaconProvider")), "syncgetAddProximityZone:", buf) & 1) == 0)
          {
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_102152DC0);
            v25 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(&__p, v6 + 16);
              p_p = &__p;
              if (SBYTE3(v64) < 0)
                p_p = __p;
              *(_DWORD *)v56 = 136380675;
              *(_QWORD *)&v56[4] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Unable to monitor the zone for region,%{private}s", v56, 0xCu);
              if (SBYTE3(v64) < 0)
                operator delete(__p);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_102152DC0);
              v39 = qword_1022A0038;
              (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(v56, v6 + 16);
              v40 = v56;
              if (v57 < 0)
                v40 = *(_BYTE **)v56;
              v58 = 136380675;
              v59 = v40;
              LODWORD(v50) = 12;
              _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v39, 17, "Unable to monitor the zone for region,%{private}s", &v58, v50);
              v42 = v41;
              if (v57 < 0)
                operator delete(*(void **)v56);
              sub_100512490("Generic", 1, 0, 0, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v42);
              if (v42 != (char *)&__p)
                free(v42);
            }
          }
          __p = &v53;
          v27 = sub_1007A320C(v7, (uint64_t)&v53, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p);
          sub_1007A3468((uint64_t **)v27 + 9, v6 + 16, v6 + 16);
          __p = &v53;
          if (*((_DWORD *)sub_1007A320C(v7, (uint64_t)&v53, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p) + 24) != 1)
            goto LABEL_96;
          v28 = *(_QWORD *)(a1 + 328);
          if (v28)
          {
            v29 = sub_100789614(v28, v6 + 16);
            __p = &v53;
            *((_DWORD *)sub_1007A320C(v7, (uint64_t)&v53, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p) + 24) = v29;
LABEL_96:
            *(_QWORD *)buf = off_10213F058;
            if (SBYTE7(v66) < 0)
              operator delete(*(void **)&buf[8]);
            goto LABEL_98;
          }
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          v35 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning iB: state kNotificationFenceResume, before first unlock", (uint8_t *)&__p, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_96;
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          *(_WORD *)v56 = 0;
          LODWORD(v50) = 2;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0038, 0, "#Warning iB: state kNotificationFenceResume, before first unlock", v56, v50);
          v37 = (void **)v36;
          sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v36);
          goto LABEL_121;
        }
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152DC0);
        v10 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(&__p, v6 + 16);
          v11 = &__p;
          if (SBYTE3(v64) < 0)
            v11 = __p;
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iB: Already resumed monitoring for fence,%{private}s", buf, 0xCu);
          if (SBYTE3(v64) < 0)
            operator delete(__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          v12 = qword_1022A0038;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(buf, v6 + 16);
          v13 = buf;
          if (buf[23] < 0)
            v13 = *(_BYTE **)buf;
          *(_DWORD *)v56 = 136380675;
          *(_QWORD *)&v56[4] = v13;
          LODWORD(v50) = 12;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v12, 2, "iB: Already resumed monitoring for fence,%{private}s", v56, v50);
          v15 = v14;
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
LABEL_81:
          sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v15);
          if (v15 != (char *)&__p)
            free(v15);
        }
      }
LABEL_98:
      v53 = off_10213F058;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == a4)
        goto LABEL_123;
    }
    v16 = sub_1007A2DB4((uint64_t)v7, (uint64_t)&v53);
    if (v52 != v16 && sub_1007A2F70((uint64_t)(v16 + 9), v6 + 16))
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v17 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(buf, v6 + 16);
        v18 = buf;
        if (buf[23] < 0)
          v18 = *(_BYTE **)buf;
        __p = (void *)68289283;
        v61 = 2082;
        v62 = "";
        v63 = 2081;
        v64 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Suspending monitoring for fence\", \"region\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      *(_QWORD *)buf = off_10213F058;
      *(_OWORD *)&buf[8] = 0u;
      v66 = 0u;
      std::string::operator=((std::string *)&buf[8], &v54);
      *((_QWORD *)&v66 + 1) = v55;
      if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBTLEBeaconProvider")), "syncgetRemoveProximityZone:", buf) & 1) == 0)
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152DC0);
        v19 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(&__p, v6 + 16);
          v20 = &__p;
          if (SBYTE3(v64) < 0)
            v20 = __p;
          *(_DWORD *)v56 = 136380675;
          *(_QWORD *)&v56[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unable to unmonitor the zone for fence,%{private}s", v56, 0xCu);
          if (SBYTE3(v64) < 0)
            operator delete(__p);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          v43 = qword_1022A0038;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(v56, v6 + 16);
          v44 = v56;
          if (v57 < 0)
            v44 = *(_BYTE **)v56;
          v58 = 136380675;
          v59 = v44;
          LODWORD(v50) = 12;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v43, 17, "Unable to unmonitor the zone for fence,%{private}s", &v58, v50);
          v46 = v45;
          if (v57 < 0)
            operator delete(*(void **)v56);
          sub_100512490("Generic", 1, 0, 0, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v46);
          if (v46 != (char *)&__p)
            free(v46);
        }
      }
      __p = &v53;
      v21 = sub_1007A320C(v7, (uint64_t)&v53, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p);
      sub_1007A35DC((uint64_t **)v21 + 9, v6 + 16);
      __p = &v53;
      if (!sub_1007A320C(v7, (uint64_t)&v53, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p)[11])
        sub_1007A36B4(v7, (uint64_t)&v53);
      if (!*(_BYTE *)(a4 + 28))
        goto LABEL_96;
      v22 = *(_QWORD *)(a1 + 328);
      if (v22)
      {
        sub_100788700(v22, v6 + 16);
        goto LABEL_96;
      }
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v38 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "iB: state kNotificationFenceSuspend, before first unlock", (uint8_t *)&__p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_96;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      *(_WORD *)v56 = 0;
      LODWORD(v50) = 2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0038, 16, "iB: state kNotificationFenceSuspend, before first unlock", v56, v50);
      v37 = (void **)v47;
      sub_100512490("Generic", 1, 0, 0, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v47);
LABEL_121:
      if (v37 != &__p)
        free(v37);
      goto LABEL_96;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v30 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(&__p, v6 + 16);
      v31 = &__p;
      if (SBYTE3(v64) < 0)
        v31 = __p;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored", buf, 0xCu);
      if (SBYTE3(v64) < 0)
        operator delete(__p);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_98;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v32 = qword_1022A0038;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(buf, v6 + 16);
    v33 = buf;
    if (buf[23] < 0)
      v33 = *(_BYTE **)buf;
    *(_DWORD *)v56 = 136380675;
    *(_QWORD *)&v56[4] = v33;
    LODWORD(v50) = 12;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v32, 2, "iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored", v56, v50);
    v15 = v34;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_81;
  }
LABEL_123:
  result = sub_1001DFAE8();
  if ((result & 1) != 0)
  {
    sub_100119F3C(&v53);
    v49 = *(_QWORD *)(a4 + 8);
    if (v49 != a4)
    {
      while (*a3 != 1)
      {
        if (!*a3)
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v49 + 16) + 16))(&__p, v49 + 16);
          sub_10052A3B8((uint64_t)&v53, "btle_fence_resume", (char *)&__p);
          goto LABEL_129;
        }
LABEL_131:
        v49 = *(_QWORD *)(v49 + 8);
        if (v49 == a4)
          goto LABEL_132;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v49 + 16) + 16))(&__p, v49 + 16);
      sub_10052A3B8((uint64_t)&v53, "btle_fence_suspend", (char *)&__p);
LABEL_129:
      if (SBYTE3(v64) < 0)
        operator delete(__p);
      goto LABEL_131;
    }
LABEL_132:
    sub_1001DFAF4((uint64_t)&v53, (uint64_t)"locationd");
    return sub_10011A5A8(&v53);
  }
  return result;
}

void sub_10079F838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v38 - 144) = v37 + 16;
  if (*(char *)(v38 - 113) < 0)
    operator delete(*(void **)(v38 - 136));
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id **sub_10079F908(id **result, int a2)
{
  id **v2;
  id *v3;
  NSObject *v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _QWORD *v12;

  if (a2)
  {
    v2 = result;
    v3 = result[4];
    v8[0] = 2;
    (*((void (**)(id *, _DWORD *, id **, _QWORD, uint64_t, _QWORD))*v3 + 19))(v3, v8, result + 5, 0, 0xFFFFFFFFLL, 0);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v2 + 10;
      if (*((char *)v2 + 103) < 0)
        v5 = (_QWORD *)*v5;
      v8[0] = 68289283;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2081;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Launching application for notification (if necessary)\", \"bundle\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x1Cu);
    }
    v6 = objc_msgSend(objc_msgSend(v3[4], "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager"));
    v7 = v2 + 10;
    if (*((char *)v2 + 103) < 0)
      v7 = (_QWORD *)*v7;
    return (id **)objc_msgSend(v6, "launchApplication:requiringAuthForServiceMask:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), 1);
  }
  return result;
}

_BYTE *sub_10079FA7C(uint64_t a1, uint64_t a2)
{
  _BYTE *result;
  __int128 v5;
  uint64_t v6;

  sub_1004E5FB0(a1 + 40, a2 + 40);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = off_10213F058;
  result = (_BYTE *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)result = v5;
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v6 = *(_QWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v6;
  return result;
}

void sub_10079FB10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100114750(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10079FB24(uint64_t a1)
{
  *(_QWORD *)(a1 + 168) = off_10213F058;
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  return sub_100114750(a1 + 40);
}

void sub_10079FB64(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*a3 == 4 && *(_DWORD *)(a4 + 188) == 0)
  {
    v6 = *(_QWORD *)(a1 + 328);
    if (v6)
    {
      sub_100787950(v6);
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v7 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "iB: Warning data can't be cleared yet", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_102152DC0);
        v10[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "iB: Warning data can't be cleared yet", v10, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      *(_BYTE *)(a1 + 298) = 1;
    }
  }
}

void sub_10079FD48(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  BOOL v4;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  void **v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  NSObject *v19;
  _QWORD *v20;
  id v21;
  _QWORD *v22;
  char *v23;
  char **v24;
  int v25;
  int v26;
  int v27;
  void *__p[2];
  char v29;
  char **v30;
  char *v31[2];
  uint8_t buf[8];
  _BYTE v33[32];
  std::string v34[2];
  std::string v35;
  int v36;
  int v37;
  uint64_t (**v38)();
  __int128 v39;
  __int128 v40;
  int v41[4];

  v4 = *a3 != 10 || *a4 == 0;
  if (!v4)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v33 = 2082;
      *(_QWORD *)&v33[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Received display on notification\"}", buf, 0x12u);
    }
    v31[0] = 0;
    v31[1] = 0;
    v30 = v31;
    v7 = *(_QWORD **)(a1 + 160);
    if (v7 != (_QWORD *)(a1 + 168))
    {
      do
      {
        if (*((_DWORD *)v7 + 24) == 2)
        {
          v8 = (_QWORD *)v7[9];
          if (v8 != v7 + 10)
          {
            do
            {
              if ((v8[18] & 4) != 0)
              {
                if (qword_1022A0030 != -1)
                  dispatch_once(&qword_1022A0030, &stru_102152DC0);
                v9 = qword_1022A0038;
                if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
                {
                  (*(void (**)(void **__return_ptr, _QWORD *))(v8[4] + 16))(__p, v8 + 4);
                  v10 = __p;
                  if (v29 < 0)
                    v10 = (void **)__p[0];
                  *(_DWORD *)buf = 68289283;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)v33 = 2082;
                  *(_QWORD *)&v33[2] = "";
                  *(_WORD *)&v33[10] = 2081;
                  *(_QWORD *)&v33[12] = v10;
                  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Display turned on, notifying region\", \"region\":%{private, location:escape_only}s}", buf, 0x1Cu);
                  if (v29 < 0)
                    operator delete(__p[0]);
                }
                memset(v33, 0, sizeof(v33));
                *(_QWORD *)buf = off_10213F008;
                memset(v34, 0, sizeof(v34));
                memset(&v35, 0, sizeof(v35));
                v38 = off_10213F058;
                v39 = 0u;
                v40 = 0u;
                v37 = 0;
                v41[0] = 1;
                std::string::operator=((std::string *)v33, (const std::string *)(v8 + 5));
                *(_QWORD *)&v33[24] = v8[8];
                std::string::operator=(v34, (const std::string *)v8 + 3);
                std::string::operator=(&v34[1], (const std::string *)v8 + 4);
                std::string::operator=(&v35, (const std::string *)v8 + 5);
                v36 = *((_DWORD *)v8 + 36);
                v41[0] = 2;
                LODWORD(__p[0]) = 3;
                (*(void (**)(uint64_t, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
                __p[0] = v8 + 4;
                v11 = sub_1007A370C((uint64_t **)(a1 + 304), (uint64_t)(v8 + 4), (uint64_t)&unk_101B9EB60, (uint64_t *)__p);
                v26 = -1;
                v27 = -1;
                __p[0] = COERCE_VOID_(CFAbsoluteTimeGetCurrent());
                v25 = 1;
                v12 = sub_1007A3878((uint64_t)(v11 + 19), 0, 0, v41, (uint64_t)&v38, &v27, &v26, (double *)__p, &v25);
                v12[1] = v11 + 19;
                v13 = v11[19];
                *v12 = v13;
                *(_QWORD *)(v13 + 8) = v12;
                v11[19] = (uint64_t)v12;
                ++v11[21];
                sub_10019C3A8((uint64_t **)&v30, (const void **)v8 + 9, (uint64_t)(v8 + 9));
                v38 = off_10213F058;
                if (SBYTE7(v40) < 0)
                  operator delete((void *)v39);
                sub_100114750((uint64_t)buf);
              }
              v14 = (_QWORD *)v8[1];
              if (v14)
              {
                do
                {
                  v15 = v14;
                  v14 = (_QWORD *)*v14;
                }
                while (v14);
              }
              else
              {
                do
                {
                  v15 = (_QWORD *)v8[2];
                  v4 = *v15 == (_QWORD)v8;
                  v8 = v15;
                }
                while (!v4);
              }
              v8 = v15;
            }
            while (v15 != v7 + 10);
          }
        }
        v16 = (_QWORD *)v7[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v7[2];
            v4 = *v17 == (_QWORD)v7;
            v7 = v17;
          }
          while (!v4);
        }
        v7 = v17;
      }
      while (v17 != (_QWORD *)(a1 + 168));
      v18 = (uint64_t *)v30;
      if (v30 != v31)
      {
        do
        {
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_102152DC0);
          v19 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
          {
            v20 = v18 + 4;
            if (*((char *)v18 + 55) < 0)
              v20 = (_QWORD *)*v20;
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v33 = 2082;
            *(_QWORD *)&v33[2] = "";
            *(_WORD *)&v33[10] = 2081;
            *(_QWORD *)&v33[12] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Launching application for notification (if necessary)\", \"bundle\":%{private, location:escape_only}s}", buf, 0x1Cu);
          }
          v21 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager"));
          v22 = v18 + 4;
          if (*((char *)v18 + 55) < 0)
            v22 = (_QWORD *)*v22;
          objc_msgSend(v21, "launchApplication:requiringAuthForServiceMask:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22), 1);
          v23 = (char *)v18[1];
          if (v23)
          {
            do
            {
              v24 = (char **)v23;
              v23 = *(char **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (char **)v18[2];
              v4 = *v24 == (char *)v18;
              v18 = (uint64_t *)v24;
            }
            while (!v4);
          }
          v18 = (uint64_t *)v24;
        }
        while (v24 != v31);
      }
    }
    sub_100090AE4((uint64_t)&v30, v31[0]);
  }
}

void sub_1007A0304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29)
{
  sub_100090AE4((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007A033C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

BOOL sub_1007A03B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;

  v6 = a6[23];
  v7 = *((_QWORD *)a6 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a6[23];
  else
    v8 = *((_QWORD *)a6 + 1);
  v9 = *(unsigned __int8 *)(a4 + 63);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 48);
  if (v8 != v9)
    return v8 == 0;
  v13 = *(unsigned __int8 **)(a4 + 40);
  v11 = (unsigned __int8 *)(a4 + 40);
  v12 = v13;
  if (v10 >= 0)
    v14 = v11;
  else
    v14 = v12;
  if ((v6 & 0x80) != 0)
  {
    v15 = memcmp(*(const void **)a6, v14, *((_QWORD *)a6 + 1));
    v8 = v7;
    if (!v15)
      return 1;
    return v8 == 0;
  }
  if (a6[23])
  {
    while (*a6 == *v14)
    {
      ++a6;
      ++v14;
      if (!--v6)
        return 1;
    }
    return v8 == 0;
  }
  return 1;
}

uint64_t sub_1007A0458()
{
  return 1;
}

uint64_t sub_1007A0460()
{
  return 1;
}

void sub_1007A0468(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  const char *v23;
  uint8_t *v24;
  uint8_t *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BOOL4 v29;
  uint8_t buf[8];
  unint64_t v31;
  unint64_t v32;

  if (*a3 == 1)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 297);
      v8 = *(unsigned __int8 *)(a4 + 4);
      v9 = *(_QWORD *)(a1 + 328) == 0;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v7;
      LOWORD(v31) = 1026;
      *(_DWORD *)((char *)&v31 + 2) = v8;
      HIWORD(v31) = 1026;
      LODWORD(v32) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: state kNotificationDeviceUnlockedSinceBoot, from, %{public}d, to, %{public}d, start, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102152DC0);
      v20 = *(unsigned __int8 *)(a1 + 297);
      v21 = *(unsigned __int8 *)(a4 + 4);
      v22 = *(_QWORD *)(a1 + 328) == 0;
      LODWORD(v25) = 67240704;
      HIDWORD(v25) = v20;
      v26 = 1026;
      v27 = v21;
      v28 = 1026;
      v29 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: state kNotificationDeviceUnlockedSinceBoot, from, %{public}d, to, %{public}d, start, %{public}d", &v25, 20);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v10 = *(unsigned __int8 *)(a4 + 4);
    *(_BYTE *)(a1 + 297) = v10;
    if (v10)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 1);
      sub_1007A07C8(a1, (uint64_t)"kNotificationDeviceUnlockedSinceBoot");
      if (*(_QWORD *)(a1 + 176))
      {
        *(_QWORD *)buf = 0;
        v31 = 0;
        v32 = 0;
        v11 = *(_QWORD **)(a1 + 160);
        if (v11 != (_QWORD *)(a1 + 168))
        {
          v12 = 0;
          do
          {
            v13 = (_QWORD *)v11[9];
            if (v13 != v11 + 10)
            {
              do
              {
                v14 = (uint64_t)(v13 + 4);
                if (v12 >= v32)
                {
                  v12 = sub_1007A3C58((uint64_t *)buf, v14);
                }
                else
                {
                  sub_1004E5FB0(v12, v14);
                  v12 += 120;
                }
                v31 = v12;
                v15 = (_QWORD *)v13[1];
                if (v15)
                {
                  do
                  {
                    v16 = v15;
                    v15 = (_QWORD *)*v15;
                  }
                  while (v15);
                }
                else
                {
                  do
                  {
                    v16 = (_QWORD *)v13[2];
                    v17 = *v16 == (_QWORD)v13;
                    v13 = v16;
                  }
                  while (!v17);
                }
                v13 = v16;
              }
              while (v16 != v11 + 10);
            }
            v18 = (_QWORD *)v11[1];
            if (v18)
            {
              do
              {
                v19 = v18;
                v18 = (_QWORD *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                v19 = (_QWORD *)v11[2];
                v17 = *v19 == (_QWORD)v11;
                v11 = v19;
              }
              while (!v17);
            }
            v11 = v19;
          }
          while (v19 != (_QWORD *)(a1 + 168));
        }
        sub_100788F48(*(_QWORD *)(a1 + 328), (uint64_t *)buf);
        v25 = buf;
        sub_1007A3BCC((void ***)&v25);
      }
    }
  }
}

void sub_1007A0794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = (void **)&a15;
  sub_1007A3BCC(&a11);
  _Unwind_Resume(a1);
}

void sub_1007A07C8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 328);
    v6 = *(unsigned __int8 *)(a1 + 297);
    *(_DWORD *)buf = 134284035;
    v18 = v5;
    v19 = 1026;
    v20 = v6;
    v21 = 2082;
    v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: createStateDatabase, fStateDatabase, %{private}p, fDeviceUnlockedSinceBoot, %{public}d, reason, %{public}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102152DC0);
    v7 = *(_QWORD *)(a1 + 328);
    v8 = *(unsigned __int8 *)(a1 + 297);
    v11 = 134284035;
    v12 = v7;
    v13 = 1026;
    v14 = v8;
    v15 = 2082;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: createStateDatabase, fStateDatabase, %{private}p, fDeviceUnlockedSinceBoot, %{public}d, reason, %{public}s", &v11, 28);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::createStateDatabase(const char *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*(_QWORD *)(a1 + 328))
  {
    if (*(_BYTE *)(a1 + 297))
      operator new();
  }
}

void sub_1007A0A08()
{
  operator delete();
}

uint64_t sub_1007A0A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = atomic_load((unsigned __int8 *)&qword_1022A4378);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v5 = __cxa_guard_acquire(&qword_1022A4378);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_1022A4360 = 0;
      *(_QWORD *)algn_1022A4368 = 0;
      qword_1022A4370 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1022A4360, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A4378);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &qword_1022A4360);
}

BOOL sub_1007A0ADC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102152DA0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1007A0D5C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1007A2900(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1007A0E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A0E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v5)();
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t (**v14)();
  __int128 __p;
  __int128 v16;
  int v17;

  v6 = 0u;
  v7 = 0u;
  v5 = off_10213F008;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = 0;
  v14 = off_10213F058;
  v16 = 0u;
  __p = 0u;
  v17 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
  v14 = off_10213F058;
  if (SBYTE7(v16) < 0)
    operator delete((void *)__p);
  return sub_100114750((uint64_t)&v5);
}

void sub_1007A0EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10079CD88((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007A0ED4(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  char **v34;
  char *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1007A2608((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1007A24CC((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1007A28B0((uint64_t)v29, *(char **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_1007A28B0((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1007A2900(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1007A1F00();
    os_activity_scope_leave(&state);
  }
}

void sub_1007A14F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1007A153C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102152DA0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102152DA0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102152DA0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102152DA0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1007A1AE4(uint64_t a1)
{
  sub_1007A1B98(a1);
  operator delete();
}

void sub_1007A1B08(uint64_t a1)
{
  sub_100090A50(a1);
  objc_msgSend(*(id *)(a1 + 24), "setValid:", 0);

  *(_QWORD *)(a1 + 24) = 0;
}

void sub_1007A1B40(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1007A1B6C(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

_QWORD *sub_1007A1B98(uint64_t a1)
{
  *(_QWORD *)a1 = off_102152D70;
  sub_100090A50(a1);
  objc_msgSend(*(id *)(a1 + 24), "setValid:", 0);

  *(_QWORD *)(a1 + 24) = 0;
  return sub_100090A0C((_QWORD *)a1);
}

void sub_1007A1BE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_1007A1C58((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1007A1C58(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = off_10213F058;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1007A1CAC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1007A1CAC(a1, *a2);
    sub_1007A1CAC(a1, a2[1]);
    sub_1007A1CF4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1007A1CF4(uint64_t a1)
{
  sub_100364238(a1 + 40, *(_QWORD **)(a1 + 48));
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_1007A1D44(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1007A1D44(a1, *a2);
    sub_1007A1D44(a1, a2[1]);
    sub_1007A1D98(a2 + 19);
    sub_100114750((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1007A1D98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_1007A1E08((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1007A1E08(uint64_t a1)
{

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 8) = off_10213F058;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1007A1E58(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10064BB88(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1007A1E94(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  sub_100261F44(a1 + 32);
  sub_1007A28B0(v2, *(char **)(a1 + 16));
  return a1;
}

uint64_t sub_1007A1ECC(uint64_t a1)
{
  sub_100261F44(a1 + 24);
  sub_1007A28B0(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1007A1F00()
{
  operator new();
}

void sub_1007A1FE8()
{
  uint64_t v0;

  sub_100114750(v0);
  operator delete();
}

void sub_1007A201C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1007A2B68(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1007A23F0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102152DA0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102152DA0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1007A23F0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1007A2B68(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1000BC378(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

__n128 *sub_1007A24CC(uint64_t **a1, __n128 *a2)
{
  uint64_t **v4;
  __n128 *v5;
  uint64_t *v6;
  signed __int32 v7;
  uint64_t **v8;
  signed __int32 v9;
  uint64_t **v11;
  char v12;

  v4 = a1 + 1;
  v5 = (__n128 *)operator new(0x58uLL);
  v11 = v4;
  sub_1004A6D08(v5 + 2, a2);
  v12 = 1;
  v6 = a1[1];
  if (v6)
  {
    v7 = v5[2].n128_i32[0];
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v7 >= v9)
          break;
        v6 = *v8;
        v4 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v4 = v8 + 1;
        goto LABEL_10;
      }
    }
    sub_1007A25B4((uint64_t)&v11, (char **)v5);
    return (__n128 *)v8;
  }
  else
  {
    v8 = v4;
LABEL_10:
    sub_1000145B0(a1, (uint64_t)v8, v4, (uint64_t *)v5);
  }
  return v5;
}

void sub_1007A25B4(uint64_t a1, char **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100261F44((uint64_t)(a2 + 8));
    sub_1007A28B0((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_1007A2608(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1007A2664((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_1007A2664(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1007A26B8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1007A26A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A28B0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1007A26B8(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1007A273C(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1007A273C(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_10034258C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1007A27BC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_1007A27BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007A2848(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1007A2864(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1007A2864(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1007A28B0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1007A28B0(a1, *(_QWORD *)a2);
    sub_1007A28B0(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

_QWORD *sub_1007A2900@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD0uLL);
  result = sub_1007A2958(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1007A2944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007A2958(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102152DF0;
  a1[1] = 0;
  sub_1007A2A28((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1007A29A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007A29B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102152DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007A29CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102152DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007A2A00(uint64_t a1)
{
  char v2;

  return sub_1007A2AC4((uint64_t)&v2, a1 + 24);
}

_BYTE *sub_1007A2A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;
  uint64_t v7;

  sub_1004E5FB0(a2, a3);
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 128) = off_10213F058;
  result = (_BYTE *)(a2 + 136);
  if (*(char *)(a3 + 159) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a3 + 136), *(_QWORD *)(a3 + 144));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 136);
    *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
    *(_OWORD *)result = v6;
  }
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
  v7 = *(_QWORD *)(a3 + 168);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a3 + 176);
  *(_QWORD *)(a2 + 168) = v7;
  return result;
}

void sub_1007A2AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100114750(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A2AC4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 128) = off_10213F058;
  if (*(char *)(a2 + 159) < 0)
    operator delete(*(void **)(a2 + 136));
  return sub_100114750(a2);
}

uint64_t sub_1007A2B04(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    *(_QWORD *)(v1 + 128) = off_10213F058;
    if (*(char *)(v1 + 159) < 0)
      operator delete(*(void **)(v1 + 136));
    sub_100114750(v1);
    operator delete();
  }
  return result;
}

id sub_1007A2B68(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1007A2BB4(a1);
  else
    return 0;
}

id sub_1007A2BB4(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102152E30);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BC119ELL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102152E30);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BC119ELL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_1007A2D88(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_1007A2DB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1007A2E2C((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1007A2E2C(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

BOOL sub_1007A2E2C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  const void **v10;
  char v11;
  size_t v12;
  int v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  int v21;

  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_DWORD *)(a2 + 36);
  if (v2 != v3)
    return v2 < v3;
  if ((v2 & 1) == 0)
    goto LABEL_3;
  v10 = (const void **)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 31);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = *(char *)(a2 + 31);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 31);
  else
    v14 = *(_QWORD *)(a2 + 16);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 8);
  else
    v15 = *(unsigned __int8 **)(a2 + 8);
  if (v12 != v14)
    goto LABEL_29;
  if ((*(_BYTE *)(a1 + 31) & 0x80) != 0)
  {
    if (!memcmp(*v10, v15, *(_QWORD *)(a1 + 16)))
      goto LABEL_3;
LABEL_29:
    if (v11 >= 0)
      v19 = (const void *)(a1 + 8);
    else
      v19 = *v10;
    if (v14 >= v12)
      v20 = v12;
    else
      v20 = v14;
    v21 = memcmp(v19, v15, v20);
    if (v21)
      return v21 < 0;
    else
      return v12 < v14;
  }
  if (*(_BYTE *)(a1 + 31))
  {
    v16 = v15;
    v17 = (unsigned __int8 *)(a1 + 8);
    v18 = *(unsigned __int8 *)(a1 + 31);
    while (*v17 == *v16)
    {
      ++v17;
      ++v16;
      if (!--v18)
        goto LABEL_3;
    }
    goto LABEL_29;
  }
LABEL_3:
  if ((v2 & 2) == 0
    || (v6 = *(unsigned __int16 *)(a1 + 32), v7 = *(unsigned __int16 *)(a2 + 32), v8 = v6 >= v7, v6 == v7))
  {
    if ((v2 & 4) == 0)
      return 0;
    v8 = *(unsigned __int16 *)(a1 + 34) >= *(unsigned __int16 *)(a2 + 34);
  }
  return !v8;
}

uint64_t sub_1007A2F70(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((sub_1007A2FD8(a2, (uint64_t)(v2 + 4)) & 1) == 0)
      {
        if (!sub_1007A2FD8((uint64_t)(v2 + 4), a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1007A2FD8(uint64_t a1, uint64_t a2)
{
  const void **v2;
  char v3;
  size_t v4;
  int v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t result;
  const void **v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  size_t v31;
  unsigned __int8 *v32;
  const void **v33;
  uint64_t v34;
  const void *v35;
  size_t v36;

  v2 = (const void **)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 87);
  else
    v4 = *(_QWORD *)(a1 + 72);
  v5 = *(char *)(a2 + 87);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 87);
  else
    v6 = *(_QWORD *)(a2 + 72);
  if (v5 >= 0)
    v7 = (unsigned __int8 *)(a2 + 64);
  else
    v7 = *(unsigned __int8 **)(a2 + 64);
  if (v4 != v6)
    goto LABEL_35;
  if ((*(_BYTE *)(a1 + 87) & 0x80) != 0)
  {
    if (memcmp(*v2, v7, *(_QWORD *)(a1 + 72)))
      goto LABEL_35;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    v10 = v7;
    v11 = (unsigned __int8 *)(a1 + 64);
    v12 = *(unsigned __int8 *)(a1 + 87);
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12)
        goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_18:
  v2 = (const void **)(a1 + 40);
  v3 = *(_BYTE *)(a1 + 63);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 63);
  else
    v4 = *(_QWORD *)(a1 + 48);
  v13 = *(char *)(a2 + 63);
  if (v13 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 63);
  else
    v6 = *(_QWORD *)(a2 + 48);
  if (v13 >= 0)
    v7 = (unsigned __int8 *)(a2 + 40);
  else
    v7 = *(unsigned __int8 **)(a2 + 40);
  if (v4 != v6)
    goto LABEL_35;
  if ((*(_BYTE *)(a1 + 63) & 0x80) != 0)
  {
    if (!memcmp(*v2, v7, *(_QWORD *)(a1 + 48)))
      goto LABEL_49;
LABEL_35:
    if (v3 >= 0)
      v17 = v2;
    else
      v17 = *v2;
    if (v6 >= v4)
      v18 = v4;
    else
      v18 = v6;
    v19 = memcmp(v17, v7, v18);
    v20 = v4 >= v6;
    goto LABEL_42;
  }
  if (*(_BYTE *)(a1 + 63))
  {
    v14 = v7;
    v15 = (unsigned __int8 *)(a1 + 40);
    v16 = *(unsigned __int8 *)(a1 + 63);
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v16)
        goto LABEL_49;
    }
    goto LABEL_35;
  }
LABEL_49:
  v23 = (const void **)(a1 + 88);
  v24 = *(unsigned __int8 *)(a1 + 111);
  v25 = *(_QWORD *)(a1 + 96);
  if ((v24 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(a1 + 111);
  else
    v26 = *(_QWORD *)(a1 + 96);
  v29 = *(unsigned __int8 **)(a2 + 88);
  v28 = (unsigned __int8 *)(a2 + 88);
  v27 = v29;
  v30 = (char)v28[23];
  if (v30 >= 0)
    v31 = v28[23];
  else
    v31 = *((_QWORD *)v28 + 1);
  if (v30 < 0)
    v28 = v27;
  if (v26 == v31)
  {
    if ((v24 & 0x80) != 0)
    {
      result = memcmp(*v23, v28, v25);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!(_DWORD)v24)
        return 0;
      v32 = v28;
      v33 = v23;
      v34 = v24;
      while (*(unsigned __int8 *)v33 == *v32)
      {
        result = 0;
        v33 = (const void **)((char *)v33 + 1);
        ++v32;
        if (!--v34)
          return result;
      }
    }
  }
  if ((v24 & 0x80u) == 0)
    v35 = v23;
  else
    v35 = *v23;
  if (v31 >= v26)
    v36 = v26;
  else
    v36 = v31;
  v19 = memcmp(v35, v28, v36);
  v20 = v26 >= v31;
LABEL_42:
  v21 = !v20;
  if (v19)
    return v19 < 0;
  else
    return v21;
}

uint64_t *sub_1007A320C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1007A32B4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1007A3344((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1007A3424((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_1007A32B4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_1007A2E2C(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1007A2E2C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1007A3344@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1007A33AC((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007A3394(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A3424(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A33AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_10213F058;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_DWORD *)(a1 + 64) = 1;
  return a1;
}

void sub_1007A3424(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1007A1CF4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_1007A3468(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_1007A34E4((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1007A3574((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000145B0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_1007A34E4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_1007A2FD8(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1007A2FD8(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1007A3574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x98uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5FB0((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007A35C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1003653C8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A35DC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_1007A363C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  (*(void (**)(uint64_t *))v4[4])(v4 + 4);
  operator delete(v4);
  return 1;
}

_QWORD *sub_1007A363C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1007A2FD8((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1007A2FD8(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t sub_1007A36B4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_1007A2DB4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_1007A1CF4((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_1007A370C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1007A34E4((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1007A37A0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_1007A37A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0xB0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5FB0((uint64_t)(v6 + 4), *a2);
  v6[19] = v6 + 19;
  v6[20] = v6 + 19;
  v6[21] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007A3810(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  *v1 = 0;
  sub_1007A382C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1007A382C(uint64_t a1, uint64_t *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_1007A1D98(__p + 19);
    sub_100114750((uint64_t)(__p + 4));
  }
  if (__p)
    operator delete(__p);
}

_QWORD *sub_1007A3878(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, int *a6, int *a7, double *a8, int *a9)
{
  _QWORD *v16;

  v16 = operator new(0x60uLL);
  *v16 = a2;
  v16[1] = a3;
  sub_1007A3914((uint64_t)(v16 + 2), *a4, a5, *a6, *a7, *a9, *a8);
  return v16;
}

void sub_1007A3900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A3914(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  __int128 v13;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = off_10213F058;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v13 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 16) = v13;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 32);
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  *(double *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 72) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "Pending iBeacon notification");
  return a1;
}

void sub_1007A39DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v3 + 16;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1007A3A00()
{
  operator new();
}

void sub_1007A3AE8()
{
  uint64_t v0;

  sub_100114750(v0);
  operator delete();
}

uint64_t sub_1007A3B1C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    *(_QWORD *)(v1 + 128) = off_10213F058;
    if (*(char *)(v1 + 159) < 0)
      operator delete(*(void **)(v1 + 136));
    sub_100114750(v1);
    operator delete();
  }
  return result;
}

uint64_t *sub_1007A3B80(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, a2);
  sub_1007A1D98(a2 + 19);
  sub_100114750((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void sub_1007A3BCC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 120;
      v7 = v4 - 120;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 120;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1007A3C58(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100313328(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[120 * v4];
  v16 = &v10[120 * v9];
  sub_1004E5FB0((uint64_t)v14, a2);
  v15 = v14 + 120;
  sub_1007A3D5C(a1, &v13);
  v11 = a1[1];
  sub_1007A3E68((uint64_t)&v13);
  return v11;
}

void sub_1007A3D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1007A3E68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A3D5C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1007A3DD0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1007A3DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 120;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 120;
    sub_1004E5FB0(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1007A3E68(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 120);
    *(_QWORD *)(a1 + 16) = i - 120;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1007A3EB8(uint64_t a1)
{
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1007A3EE0(uint64_t a1, int a2)
{
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v3 = *(double *)(a1 + 8);
  v4 = v3 * 0.75 + 0.2;
  v5 = v3 * 0.75 + 0.125;
  if (a2 == 2)
    v5 = v4;
  *(double *)(a1 + 8) = v5;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102152E50);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DeviceProximityProcessor,fGnssLowAvailableProb,%{public}0.2f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102152E50);
    v8 = *(_QWORD *)(a1 + 8);
    v11 = 134349056;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "DeviceProximityProcessor,fGnssLowAvailableProb,%{public}0.2f", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::DeviceProximityProcessor::runPredictionFilter(const CLDeviceProximityState, const CFTimeInterval)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_1007A40B8(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  uint64_t v18;

  if (vabdd_f64(a3, *(double *)(a1 + 16)) > 6.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102152E50);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 134349312;
      v16 = a3;
      v17 = 2050;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DeviceProximityProcessor,FilterReset,timestamp,%{public}.2f,lastTimestamp,%{public}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102152E50);
      v8 = *(_QWORD *)(a1 + 16);
      v11 = 134349312;
      v12 = a3;
      v13 = 2050;
      v14 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "DeviceProximityProcessor,FilterReset,timestamp,%{public}.2f,lastTimestamp,%{public}.2f", &v11, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::DeviceProximityProcessor::measurementInput(const CLDeviceProximityState, const CFTimeInterval)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)a1 = 0;
  }
  *(double *)(a1 + 16) = a3;
  sub_1007A3EE0(a1, a2);
}

_OWORD *sub_1007A42BC(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0u;
  a1[1] = 0u;
  sub_100270E34((uint64_t)(a1 + 2), a3);
  sub_100197040();
  if (sub_1000C4240())
    operator new();
  sub_100197040();
  if (sub_100762300())
    operator new();
  return a1;
}

void sub_1007A44D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == v13)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  operator delete();
}

uint64_t *sub_1007A460C(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  v5 = (_QWORD *)a1[7];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
    v2 = (_QWORD *)a1[7];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
LABEL_10:
  sub_1007A47EC(a1 + 3, 0);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    operator delete();
  sub_1007A47B0(a1 + 1, 0);
  v8 = *a1;
  *a1 = 0;
  if (v8)
    operator delete();
  return a1;
}

double sub_1007A46EC(uint64_t *a1, _DWORD *a2, double *a3)
{
  uint64_t v3;
  double result;

  v3 = *a1;
  if (*a1)
  {
    *a2 = *(_DWORD *)(v3 + 24);
    result = *(double *)(v3 + 16);
    *a3 = result;
  }
  return result;
}

void sub_1007A4708(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1007A4734(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_100342508((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1007A4798(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1007A47B0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100C2891C();
    operator delete();
  }
  return result;
}

uint64_t sub_1007A47EC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10097A114();
    operator delete();
  }
  return result;
}

void sub_1007A482C()
{
  operator delete();
}

_QWORD *sub_1007A4840(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102152E80;
  result[1] = v3;
  return result;
}

uint64_t sub_1007A4874(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102152E80;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007A4890(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1007A48CC()
{
}

void sub_1007A48DC()
{
  operator delete();
}

_QWORD *sub_1007A48F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102152F10;
  result[1] = v3;
  return result;
}

uint64_t sub_1007A4924(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102152F10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1007A4940(uint64_t a1, int *a2, double *a3)
{
  double v3;
  uint64_t *v4;

  v3 = *a3;
  v4 = *(uint64_t **)(a1 + 8);
  sub_1007A40B8(v4[2], *a2, *a3);
  return sub_1000B5CF0(v4, v3);
}

uint64_t sub_1007A4980(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1007A49BC()
{
}

uint64_t sub_1007A49C8()
{
  _OWORD v1[7];

  v1[4] = xmmword_101BC1218;
  v1[5] = unk_101BC1228;
  v1[6] = xmmword_101BC1238;
  v1[0] = xmmword_101BC11D8;
  v1[1] = unk_101BC11E8;
  v1[2] = xmmword_101BC11F8;
  v1[3] = unk_101BC1208;
  sub_1007A4734((uint64_t)&unk_102310CC0, (int *)v1, 7);
  return __cxa_atexit((void (*)(void *))sub_1007A3EB8, &unk_102310CC0, (void *)&_mh_execute_header);
}

uint64_t sub_1007A5C94(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        while (1)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v18 = v17 + 1;
          if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0)
            goto LABEL_64;
          v14 += 7;
          v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_66;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_66:
        v44 = 24;
        goto LABEL_79;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v10 = v22++ >= 9;
              if (v10)
              {
                v23 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v23 = 0;
LABEL_70:
        *(_BYTE *)(a1 + 48) = v23 != 0;
        continue;
      case 3u:
        v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v28 = 0;
        }
        v45 = 16;
        goto LABEL_84;
      case 4u:
        v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v28 = 0;
        }
        v45 = 8;
LABEL_84:
        *(_QWORD *)(a1 + v45) = v28;
        continue;
      case 5u:
        v30 = 0;
        v31 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 52) |= 0x10u;
        while (2)
        {
          v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
            v16 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v10 = v31++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_74:
        v44 = 44;
        goto LABEL_79;
      case 6u:
        v35 = 0;
        v36 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 52) |= 8u;
        break;
      case 7u:
        *(_BYTE *)(a1 + 52) |= 2u;
        v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v41 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v41 = 0;
        }
        v46 = 32;
        goto LABEL_91;
      case 8u:
        *(_BYTE *)(a1 + 52) |= 4u;
        v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v41 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v41 = 0;
        }
        v46 = 36;
        goto LABEL_91;
      case 9u:
        *(_BYTE *)(a1 + 52) |= 1u;
        v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v41 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v41 = 0;
        }
        v46 = 28;
LABEL_91:
        *(_DWORD *)(a1 + v46) = v41;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v38 = v37 + 1;
      if (v37 == -1 || v38 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
      v16 |= (unint64_t)(v39 & 0x7F) << v35;
      if ((v39 & 0x80) == 0)
        goto LABEL_76;
      v35 += 7;
      v10 = v36++ >= 9;
      if (v10)
      {
        LODWORD(v16) = 0;
        goto LABEL_78;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v16) = 0;
LABEL_78:
    v44 = 40;
LABEL_79:
    *(_DWORD *)(a1 + v44) = v16;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

CFRunLoopTimerRef *sub_1007A6C18(CFRunLoopTimerRef *a1)
{
  CFRunLoopTimerRef *result;

  result = sub_100A0804C(a1, 1, 1);
  *result = (CFRunLoopTimerRef)off_102152FC8;
  return result;
}

void sub_1007A6C48(uint64_t a1)
{
  sub_100A08120(a1);
  operator delete();
}

_QWORD *sub_1007A6C6C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;

  sub_100270E34((uint64_t)v8, a3);
  sub_100723F80(a1, a2, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *a1 = off_102153000;
  return a1;
}

void sub_1007A6D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A6D68(uint64_t result, double a2)
{
  if (*(double *)(result + 40) > a2)
    a2 = *(double *)(result + 40);
  *(double *)(result + 40) = a2;
  return result;
}

_QWORD *sub_1007A6D7C(uint64_t a1)
{
  double *v2;
  _QWORD *v3;
  __n128 v4;
  char v5;
  _QWORD *result;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  double v14;
  __int16 v15;
  _BYTE v16[24];
  _BYTE *v17;

  v15 = 0;
  v13 = 0;
  v14 = 0.0;
  v2 = (double *)(a1 + 40);
  v3 = operator new(0x20uLL);
  *v3 = off_102153050;
  v3[1] = &v14;
  v3[2] = (char *)&v15 + 1;
  v3[3] = &v15;
  v17 = v3;
  v4.n128_u64[0] = 0x404E000000000000;
  v5 = sub_100723FC0(a1, v2, &v13, (uint64_t)v16, v4);
  result = v17;
  if (v17 == v16)
  {
    v7 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if ((v5 & 1) != 0)
  {
    if (v14 / 60.0 >= 4.40208912)
    {
      v12 = 0;
      v9 = *(double *)(a1 + 40) + 60.0;
      v11[0] = *(_QWORD *)(a1 + 40);
      *(double *)&v11[1] = v9;
      *(double *)&v11[2] = v14 / 60.0;
      LOWORD(v12) = 2;
      BYTE2(v12) = HIBYTE(v15);
      BYTE3(v12) = v15;
      v10 = *(_QWORD *)(a1 + 32);
      if (!v10)
        sub_10025FD1C();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v10 + 48))(v10, v11, v14 / 60.0);
      v8 = *v2 + 60.0;
    }
    else
    {
      v8 = *(double *)(v13 + 8);
    }
    *v2 = v8;
  }
  return result;
}

void sub_1007A6EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(exception_object);
}

void sub_1007A6F34()
{
  operator delete();
}

__n128 sub_1007A6F48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102153050;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1007A6F88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102153050;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1007A6FB0(uint64_t result, uint64_t a2, double *a3)
{
  BOOL *v3;

  v3 = *(BOOL **)(result + 16);
  **(double **)(result + 8) = **(double **)(result + 8) + *(double *)(a2 + 16) * *a3;
  *v3 = (*v3 | *(unsigned __int8 *)(a2 + 28)) != 0;
  **(_BYTE **)(result + 24) = (**(unsigned __int8 **)(result + 24) | *(unsigned __int8 *)(a2 + 29)) != 0;
  return result;
}

uint64_t sub_1007A7000(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1007A703C()
{
}

uint64_t sub_1007A7048(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1007AA22C((uint64_t *)(a1 + 96), 0);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1007A70C0(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  *((_QWORD *)__dst + 6) = 0x100000002;
  *((_WORD *)__dst + 28) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst + 64, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 10) = *((_QWORD *)a3 + 2);
    *((_OWORD *)__dst + 4) = v7;
  }
  *((_QWORD *)__dst + 11) = 0;
  operator new();
}

void sub_1007A7368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  uint64_t *v21;
  uint64_t v23;

  v23 = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v18 + 104) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_1007AA22C(v21, 0);
  if (*(char *)(v18 + 87) < 0)
    operator delete(*v20);
  if (*(char *)(v18 + 47) < 0)
    operator delete(*v19);
  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A741C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2 || !sub_1000CC4F4(v2))
    sub_1007A9A14();
  result = sub_10094E1C0(*(_QWORD *)(a1 + 96));
  if ((result & 1) == 0)
    return sub_10094E158(*(_QWORD *)(a1 + 96));
  return result;
}

uint64_t sub_1007A74A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
    return sub_1000CC4F4(result);
  return result;
}

uint64_t sub_1007A74B8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  char *v16;
  NSObject *v17;
  const char *v19;
  std::string *v20;
  void *__p[2];
  unsigned __int8 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  void *v26[2];
  int64_t v27;
  std::string v28;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2 && sub_1000CC4F4(v2))
  {
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
    strcpy(v23.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    v3 = *(char *)(a1 + 23);
    if (v3 >= 0)
      v4 = (const std::string::value_type *)a1;
    else
      v4 = *(const std::string::value_type **)a1;
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 23);
    else
      v5 = *(_QWORD *)(a1 + 8);
    v6 = std::string::append(&v23, v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v24, " (");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_10005BE30((uint64_t)__p);
    if ((v22 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v11 = v22;
    else
      v11 = (std::string::size_type)__p[1];
    v12 = std::string::append(&v25, (const std::string::value_type *)v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v28, ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)v26 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if ((char)v22 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (v27 >= 0)
      v16 = (char *)v26;
    else
      v16 = (char *)v26[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 104), v16);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v17 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v28, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v28, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(v26[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v28, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", v26, 2);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileHeaderDatabase::saveWifiTileHeader(const CLWifiTileHeaderEntry &, std::optional<CLWifiTileParser::MemoryMappedFileHandle *>)", "%s\n", v19);
    if (v20 != &v28)
      free(v20);
  }
  return 0;
}

void sub_1007A7BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A7C88(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  char *p_p;
  NSObject *v19;
  const char *v21;
  std::string *v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 __p;
  int64_t v29;
  std::string v30;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2 && sub_1000CC4F4(v2))
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v23, "DELETE FROM ");
    v3 = *(char *)(a1 + 23);
    if (v3 >= 0)
      v4 = (const std::string::value_type *)a1;
    else
      v4 = *(const std::string::value_type **)a1;
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 23);
    else
      v5 = *(_QWORD *)(a1 + 8);
    v6 = std::string::append(&v23, v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v24, " WHERE ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v25, "TileX");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v26, " = ? AND ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v27, "TileY");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v30, " = ? ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v29 = v16->__r_.__value_.__r.__words[2];
    __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (v29 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(*(_QWORD *)(a1 + 104), p_p);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v19 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v30.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v30, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v30, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, &v30, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", &__p, 2);
    v22 = (std::string *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileHeaderDatabase::deleteByTileXY(const WifiTileXY &)", "%s\n", v21);
    if (v22 != &v30)
      free(v22);
  }
  return 0;
}

void sub_1007A81AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  if (a51 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007A827C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  char *v25;
  NSObject *v26;
  std::string *v27;
  std::string::value_type v28[8];
  char v29;
  std::string::value_type v30[8];
  char v31;
  std::string::value_type v32[8];
  char v33;
  std::string::value_type __s[8];
  char v35;
  void *__p[2];
  unsigned __int8 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  void *v45[2];
  int64_t v46;
  std::string v47;

  *a2 = 0;
  a2[144] = 0;
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 && sub_1000CC4F4(v3))
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v38, "SELECT ");
    sub_10005BE30((uint64_t)__p);
    if ((v37 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v37 & 0x80u) == 0)
      v5 = v37;
    else
      v5 = (std::string::size_type)__p[1];
    v6 = std::string::append(&v38, (const std::string::value_type *)v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v35 = 6;
    strcpy(__s, " FROM ");
    v8 = std::string::append(&v39, __s, 6uLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = *(char *)(a1 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a1;
    else
      v11 = *(const std::string::value_type **)a1;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 23);
    else
      v12 = *(_QWORD *)(a1 + 8);
    v13 = std::string::append(&v40, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v33 = 7;
    strcpy(v32, " WHERE ");
    v15 = std::string::append(&v41, v32, 7uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v42, "TileX");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v31 = 7;
    strcpy(v30, "=? AND ");
    v19 = std::string::append(&v43, v30, 7uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v44, "TileY");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v29 = 2;
    strcpy(v28, "=?");
    v23 = std::string::append(&v47, v28, 2uLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v46 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)v45 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0)
      operator delete(*(void **)v28);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v31 < 0)
      operator delete(*(void **)v30);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(*(void **)v32);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (v35 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if ((char)v37 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v46 >= 0)
      v25 = (char *)v45;
    else
      v25 = (char *)v45[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 104), v25);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v26 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v47.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v47, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v47, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(v45[0]) = 0;
    v27 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v47, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", v45, 2);
    sub_100512490("Generic", 1, 0, 2, "std::optional<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectByTileXY(const WifiTileXY &)", "%s\n", (const char *)v27);
    if (v27 != &v47)
      free(v27);
  }
}

void sub_1007A8974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A8B18(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  char *v10;
  NSObject *v11;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  int64_t v17;
  std::string v18;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2 && sub_1000CC4F4(v2))
  {
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&v15, "SELECT COUNT(*) FROM ");
    v3 = *(char *)(a1 + 23);
    if (v3 >= 0)
      v4 = (const std::string::value_type *)a1;
    else
      v4 = *(const std::string::value_type **)a1;
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 23);
    else
      v5 = *(_QWORD *)(a1 + 8);
    v6 = std::string::append(&v15, v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v18, ";");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v17 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v17 >= 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 104), v10);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v11 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v18.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v18, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v18, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v18, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", __p, 2);
    v14 = (std::string *)v13;
    sub_100512490("Generic", 1, 0, 2, "int CLWifiTileHeaderDatabase::countTileHeaders()", "%s\n", v13);
    if (v14 != &v18)
      free(v14);
  }
  return 0;
}

void sub_1007A8F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A8F88(uint64_t a1, int a2)
{
  uint64_t v4;
  std::string __p;

  sub_1015A2E04(&__p, "AccessTimestamp");
  v4 = sub_1007A9014(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1007A8FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A9014(uint64_t a1, int a2, std::string *this)
{
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  int v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  char *p_p;
  NSObject *v29;
  std::string *v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 __p;
  int64_t v40;
  std::string v41;

  if (std::string::compare(this, "AccessTimestamp") && std::string::compare(this, "GizmoSyncTimestamp"))
    sub_101907EA0();
  v5 = *(_QWORD *)(a1 + 104);
  if (v5 && sub_1000CC4F4(v5))
  {
    *((_BYTE *)&v32.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v32, "UPDATE ");
    v6 = *(char *)(a1 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)a1;
    else
      v7 = *(const std::string::value_type **)a1;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 23);
    else
      v8 = *(_QWORD *)(a1 + 8);
    v9 = std::string::append(&v32, v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v33, " SET ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v13 >= 0)
      v14 = this;
    else
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v13 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    v16 = std::string::append(&v34, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v35, " = ? WHERE ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v36, "TileX");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v37, " = ? AND ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v38, "TileY");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v41, " = ?");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v40 = v26->__r_.__value_.__r.__words[2];
    __p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v40 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(*(_QWORD *)(a1 + 104), p_p);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v29 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v41.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v41, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v41, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(__p) = 0;
    v31 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v41, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", &__p, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileHeaderDatabase::updateTimestampByTileXY(cl::chrono::CFAbsoluteTimeClock::time_point, const WifiTileXY &, const std::string &)", "%s\n", (const char *)v31);
    if (v31 != &v41)
      free(v31);
  }
  return 0;
}

void sub_1007A9880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1007A9988(uint64_t a1, int a2)
{
  uint64_t v4;
  std::string __p;

  sub_1015A2E04(&__p, "GizmoSyncTimestamp");
  v4 = sub_1007A9014(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1007A99F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007A9A14()
{
  operator new();
}

void sub_1007A9E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1007A9EDC(uint64_t a1)
{
  sub_10094F0C4(*(_QWORD *)(a1 + 96));
}

void sub_1007A9EF8(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  sub_10095003C(*(_QWORD *)(a1 + 96), a2, a3, a4, a5, a6);
}

void sub_1007A9F00(uint64_t a1)
{
  sub_100950370(*(_QWORD *)(a1 + 96));
}

void sub_1007A9F08(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t buf[8];
  char v7;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  sub_1015A2E04(buf, "SELECT NAME FROM sqlite_master WHERE type='table' AND name LIKE 'wifi_tile_%'");
  if (v7 >= 0)
    v2 = (char *)buf;
  else
    v2 = *(char **)buf;
  sub_1000CDA68(*(_QWORD *)(a1 + 104), v2);
}

void sub_1007AA17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  __p = &a19;
  sub_100259608((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1007AA200(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1007AA22C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10094DB00();
    operator delete();
  }
  return result;
}

uint64_t sub_1007AA268(uint64_t *a1, int *a2, int *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, uint64_t *a12, int *a13, uint64_t *a14, int *a15, uint64_t *a16, uint64_t *a17, int *a18)
{
  char *v19;
  unint64_t v20;
  unint64_t v21;
  int *v28;
  uint64_t *v29;
  uint64_t *v30;
  int *v31;
  uint64_t *v32;
  double *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  double *v38;
  int *v39;
  int *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double *v57;
  double *v58;
  double *v59;

  v19 = (char *)*a1;
  v20 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v21 = v20 + 1;
  if (v20 + 1 > 0x1C71C71C71C71C7)
    sub_100259694();
  v29 = a17;
  v28 = a18;
  v30 = a16;
  v31 = a13;
  v33 = a11;
  v32 = a12;
  v34 = (uint64_t)(a1 + 2);
  v35 = 0x8E38E38E38E38E39 * ((a1[2] - (uint64_t)v19) >> 4);
  if (2 * v35 > v21)
    v21 = 2 * v35;
  if (v35 >= 0xE38E38E38E38E3)
    v36 = 0x1C71C71C71C71C7;
  else
    v36 = v21;
  if (v36)
  {
    v58 = a5;
    v59 = a7;
    v37 = a6;
    v38 = a4;
    v57 = a8;
    v39 = a3;
    v40 = a2;
    v41 = v20;
    v42 = sub_100686504(v34, v36);
    v30 = a16;
    a5 = v58;
    v29 = a17;
    v20 = v41;
    v28 = a18;
    a2 = v40;
    v33 = a11;
    v32 = a12;
    a3 = v39;
    v31 = a13;
    a8 = v57;
    a4 = v38;
    a6 = v37;
    a7 = v59;
    v43 = v42;
    v34 = (uint64_t)(a1 + 2);
    v45 = v44;
  }
  else
  {
    v43 = 0;
    v45 = 0;
  }
  v46 = (uint64_t)v43 + 144 * v20;
  sub_1007AA4A4(v34, v46, a2, a3, a4, a5, a6, a7, a8, a9, a10, v33, v32, v31, a14, a15, v30, v29, v28);
  v47 = v46 + 144;
  v49 = (char *)*a1;
  v48 = (char *)a1[1];
  if (v48 != (char *)*a1)
  {
    do
    {
      *(_OWORD *)(v46 - 144) = *((_OWORD *)v48 - 9);
      v50 = *((_OWORD *)v48 - 8);
      v51 = *((_OWORD *)v48 - 7);
      v52 = *((_OWORD *)v48 - 5);
      *(_OWORD *)(v46 - 96) = *((_OWORD *)v48 - 6);
      *(_OWORD *)(v46 - 80) = v52;
      *(_OWORD *)(v46 - 128) = v50;
      *(_OWORD *)(v46 - 112) = v51;
      v53 = *((_OWORD *)v48 - 4);
      v54 = *((_OWORD *)v48 - 3);
      v55 = *((_OWORD *)v48 - 2);
      *(_OWORD *)(v46 - 20) = *(_OWORD *)(v48 - 20);
      *(_OWORD *)(v46 - 48) = v54;
      *(_OWORD *)(v46 - 32) = v55;
      *(_OWORD *)(v46 - 64) = v53;
      v46 -= 144;
      v48 -= 144;
    }
    while (v48 != v49);
    v48 = (char *)*a1;
  }
  *a1 = v46;
  a1[1] = v47;
  a1[2] = (uint64_t)v43 + 144 * v45;
  if (v48)
    operator delete(v48);
  return v47;
}

void sub_1007AA48C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007AA4A4(uint64_t a1, uint64_t a2, int *a3, int *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, uint64_t *a13, int *a14, uint64_t *a15, int *a16, uint64_t *a17, uint64_t *a18, int *a19)
{
  return sub_1000CE84C(a2, *a3, *a4, *a13, *a14, *a15, *a16, *a19, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12, *a17, *a18);
}

void sub_1007AA548()
{
  qword_1023045C0 = (uint64_t)"TileX";
  dword_1023045C8 = 1;
  word_1023045CC = 1;
  byte_1023045D0 = 0;
  byte_1023045E8 = 0;
  qword_1023045F0 = (uint64_t)"TileY";
  dword_1023045F8 = 1;
  word_1023045FC = 1;
  byte_102304600 = 0;
  byte_102304618 = 0;
  qword_102304620 = (uint64_t)"SouthwestLatitude";
  dword_102304628 = 2;
  word_10230462C = 0;
  byte_102304630 = 0;
  byte_102304648 = 0;
  qword_102304650 = (uint64_t)"SouthwestLongitude";
  dword_102304658 = 2;
  word_10230465C = 0;
  byte_102304660 = 0;
  byte_102304678 = 0;
  qword_102304680 = (uint64_t)"DeltaLatitude";
  dword_102304688 = 2;
  word_10230468C = 0;
  byte_102304690 = 0;
  byte_1023046A8 = 0;
  qword_1023046B0 = (uint64_t)"DeltaLongitude";
  dword_1023046B8 = 2;
  word_1023046BC = 0;
  byte_1023046C0 = 0;
  byte_1023046D8 = 0;
  qword_1023046E0 = (uint64_t)"Altitude";
  dword_1023046E8 = 2;
  word_1023046EC = 0;
  byte_1023046F0 = 0;
  byte_102304708 = 0;
  qword_102304710 = (uint64_t)"MinimumAltitude";
  dword_102304718 = 2;
  word_10230471C = 0;
  byte_102304720 = 0;
  byte_102304738 = 0;
  qword_102304740 = (uint64_t)"MaximumAltitude";
  dword_102304748 = 2;
  word_10230474C = 0;
  byte_102304750 = 0;
  byte_102304768 = 0;
  qword_102304770 = (uint64_t)"GenerationTimestamp";
  dword_102304778 = 1;
  word_10230477C = 0;
  byte_102304780 = 0;
  byte_102304798 = 0;
  qword_1023047A0 = (uint64_t)"ExpirationAge";
  dword_1023047A8 = 1;
  word_1023047AC = 0;
  byte_1023047B0 = 0;
  byte_1023047C8 = 0;
  qword_1023047D0 = (uint64_t)"Version";
  dword_1023047D8 = 1;
  word_1023047DC = 0;
  byte_1023047E0 = 0;
  byte_1023047F8 = 0;
  qword_102304800 = (uint64_t)"Flags";
  dword_102304808 = 1;
  word_10230480C = 0;
  byte_102304810 = 0;
  byte_102304828 = 0;
  qword_102304830 = (uint64_t)"NumberOfIndexEntries";
  dword_102304838 = 1;
  word_10230483C = 0;
  byte_102304840 = 0;
  byte_102304858 = 0;
  qword_102304860 = (uint64_t)"AccessTimestamp";
  dword_102304868 = 1;
  word_10230486C = 0;
  byte_102304870 = 0;
  byte_102304888 = 0;
  qword_102304890 = (uint64_t)"GizmoSyncTimestamp";
  dword_102304898 = 1;
  word_10230489C = 0;
  byte_1023048A0 = 0;
  byte_1023048B8 = 0;
  qword_1023048C0 = (uint64_t)"NumberOfInputPoints";
  dword_1023048C8 = 1;
  word_1023048CC = 0;
  byte_1023048D0 = 0;
  byte_1023048E8 = 0;
  qword_1023048F0 = 0;
  dword_1023048F8 = 5;
  word_1023048FC = 0;
  byte_102304900 = 0;
  byte_102304918 = 0;
}

void sub_1007AA750()
{
  operator new();
}

void sub_1007AA7C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007AA804@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return sub_100FD3340(*a1, a2, (void **)a3);
}

void sub_1007AA834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1007AA850(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  double v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;

  v3 = *(double *)(a1 + 88) + *(double *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(double *)(a1 + 120) + *(double *)(a2 + 88);
  *(_QWORD *)v12 = 0;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)&v12[8] = *(_OWORD *)(a2 + 40);
  *(double *)&v12[24] = v3;
  v13 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)&v14 = v4;
  *((double *)&v14 + 1) = v5;
  uuid_copy((unsigned __int8 *)&v11 + 8, (const unsigned __int8 *)(a1 + 16));
  sub_100FD41CC(*(uint64_t **)a1, (uint64_t)&v10);
  v6 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 80) = v6;
  v7 = v14;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(double *)&v10;
  v9 = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

void sub_1007AA910(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == 1)
  {
    uuid_parse("00000000-0000-0000-0000-000000000000", (unsigned __int8 *)(a1 + 16));
  }
  else if (!v3)
  {
    uuid_copy((unsigned __int8 *)(a1 + 16), (const unsigned __int8 *)(a2 + 64));
    sub_1007AA970(a1);
  }
}

void sub_1007AA970(uint64_t a1)
{
  CFAbsoluteTime Current;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  void *__p;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint8_t buf[16];
  __int128 v19;
  __int128 v20;
  _BYTE v21[48];
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  __p = 0;
  v13 = 0;
  v14 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  if (sub_100FD4AD4(*(_QWORD *)a1, 1, &__p) != 100 || __p == v13)
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
  }
  else
  {
    v3 = *(v13 - 5);
    v22 = *(v13 - 6);
    v23 = v3;
    v24 = *((_QWORD *)v13 - 8);
    v4 = *(_OWORD *)((char *)v13 - 24);
    v15 = *(_OWORD *)((char *)v13 - 40);
    v16 = v4;
    v17 = *((_QWORD *)v13 - 1);
  }
  *(_OWORD *)buf = v22;
  v19 = v23;
  *(_OWORD *)&v21[8] = v15;
  *(_QWORD *)&v20 = v24;
  *(_OWORD *)&v21[24] = v16;
  *(_QWORD *)&v21[40] = v17;
  *((CFAbsoluteTime *)&v20 + 1) = Current;
  *(CFAbsoluteTime *)v21 = Current;
  uuid_copy((unsigned __int8 *)&v19 + 8, (const unsigned __int8 *)(a1 + 16));
  sub_100FD41CC(*(uint64_t **)a1, (uint64_t)buf);
  v5 = *(_OWORD *)v21;
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)&v21[32];
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&v21[16];
  *(_OWORD *)(a1 + 112) = v6;
  v7 = v19;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 48) = v7;
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_1021530E0);
  v8 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting up first session entry", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_1021530E0);
    v11 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "Setting up first session entry", &v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiDataStore::setupFirstEntry()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_1007AABE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007AAC00(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_1007AAC2C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1007AAC84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007AACA4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1007AACBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1007AACFC(_QWORD *result, uint64_t a2)
{
  *result = off_102153188;
  result[1] = a2;
  return result;
}

id sub_1007AAD0C(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetCellTransmitStatus");
}

id sub_1007AAD30(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRegistrationStatus");
}

id sub_1007AAD54(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRegistrationStatusForSim:", a2);
}

id sub_1007AAD88(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetIsRegisteredOnCell");
}

id sub_1007AADAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetServingCells:addNeighborCells:", a2, a3);
}

id sub_1007AADE8(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRadioAccessTechnology");
}

id sub_1007AAE0C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRadioAccessTechnologyForSim:", a2);
}

id sub_1007AAE40(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRefreshCellMonitor");
}

id sub_1007AAE64(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRefreshCellMonitorForSim:", a2);
}

id sub_1007AAE98(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetServingGsmCell:", a2);
}

id sub_1007AAECC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetSignalStrength:", a2);
}

id sub_1007AAF00(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetSignalStrengthForSim:", a2);
}

id sub_1007AAF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:forClient:", CFSTR("CLTelephonyService"), CFSTR("CLHarvesterService")), "fetchSignalStrengthMeasurementForSim:withReply:", a2, a3);
}

id sub_1007AAF78(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:forClient:", CFSTR("CLTelephonyService"), CFSTR("CLHarvesterService")), "fetchIratStreamingInfoWithReply:", a2);
}

double sub_1007AAFB4(uint64_t a1, uint64_t a2)
{
  id v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetNonSystemLocationClientKey");
  if (v3)
  {
    sub_1015A2E04(&v5, (char *)objc_msgSend(v3, "UTF8String"));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

void sub_1007AB024(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  id v5;

  v5 = 0;
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetCopyServingOperator:", &v5);
  if (v5)
  {
    sub_1015A2E04(&v3, (char *)objc_msgSend(v5, "UTF8String"));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v3;
    *(_QWORD *)(a2 + 16) = v4;
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }

}

id sub_1007AB0CC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetCopyServingOperatorForSim:", a2);
}

void sub_1007AB100(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  id v5;

  v5 = 0;
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetCopyServingProviderFromCarrierBundle:", &v5);
  if (v5)
  {
    sub_1015A2E04(&v3, (char *)objc_msgSend(v5, "UTF8String"));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v3;
    *(_QWORD *)(a2 + 16) = v4;
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }

}

id sub_1007AB1A8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetCopyServingProviderFromCarrierBundleForSim:", a2);
}

id sub_1007AB1DC(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  __int128 v13;
  _OWORD v15[8];
  _OWORD v16[2];
  _QWORD v17[4];
  __int128 v18;
  __int128 v19;

  v6 = objc_alloc((Class)CLLocation);
  v7 = a3[7];
  v15[6] = a3[6];
  v15[7] = v7;
  v16[0] = a3[8];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a3 + 140);
  v8 = a3[3];
  v15[2] = a3[2];
  v15[3] = v8;
  v9 = a3[5];
  v15[4] = a3[4];
  v15[5] = v9;
  v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  v11 = objc_msgSend(v6, "initWithClientLocation:", v15);
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
  v13 = a2[1];
  v18 = *a2;
  v19 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007AB92C;
  v17[3] = &unk_102153288;
  return objc_msgSend(v12, "setLocation_GSM:forCell:", v11, objc_msgSend(v17, "copy"));
}

id sub_1007AB2C4(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  __int128 v13;
  _OWORD v15[8];
  _OWORD v16[2];
  _QWORD v17[4];
  __int128 v18;
  __int128 v19;

  v6 = objc_alloc((Class)CLLocation);
  v7 = a3[7];
  v15[6] = a3[6];
  v15[7] = v7;
  v16[0] = a3[8];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a3 + 140);
  v8 = a3[3];
  v15[2] = a3[2];
  v15[3] = v8;
  v9 = a3[5];
  v15[4] = a3[4];
  v15[5] = v9;
  v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  v11 = objc_msgSend(v6, "initWithClientLocation:", v15);
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
  v13 = a2[1];
  v18 = *a2;
  v19 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007AB938;
  v17[3] = &unk_1021532A8;
  return objc_msgSend(v12, "setLocation_SCDMA:forCell:", v11, objc_msgSend(v17, "copy"));
}

id sub_1007AB3AC(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[8];
  _OWORD v17[2];
  _QWORD v18[4];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v6 = objc_alloc((Class)CLLocation);
  v7 = a3[7];
  v16[6] = a3[6];
  v16[7] = v7;
  v17[0] = a3[8];
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a3 + 140);
  v8 = a3[3];
  v16[2] = a3[2];
  v16[3] = v8;
  v9 = a3[5];
  v16[4] = a3[4];
  v16[5] = v9;
  v10 = a3[1];
  v16[0] = *a3;
  v16[1] = v10;
  v11 = objc_msgSend(v6, "initWithClientLocation:", v16);
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
  v13 = a2[3];
  v21 = a2[2];
  v22 = v13;
  v23 = a2[4];
  v24 = *((_QWORD *)a2 + 10);
  v14 = a2[1];
  v19 = *a2;
  v20 = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1007AB944;
  v18[3] = &unk_1021532C8;
  return objc_msgSend(v12, "setLocation_LTE:forCell:", v11, objc_msgSend(v18, "copy"));
}

void sub_1007AB4C0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 __p;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  _OWORD v53[8];
  _OWORD v54[2];

  v6 = objc_alloc((Class)CLLocation);
  v7 = a3[7];
  v53[6] = a3[6];
  v53[7] = v7;
  v54[0] = a3[8];
  *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)a3 + 140);
  v8 = a3[3];
  v53[2] = a3[2];
  v53[3] = v8;
  v9 = a3[5];
  v53[4] = a3[4];
  v53[5] = v9;
  v10 = a3[1];
  v53[0] = *a3;
  v53[1] = v10;
  v11 = objc_msgSend(v6, "initWithClientLocation:", v53);
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
  v24 = *(_DWORD *)a2;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  sub_10027205C(&v25, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v13 = *(_OWORD *)(a2 + 208);
  v38 = *(_OWORD *)(a2 + 192);
  v39[0] = v13;
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a2 + 220);
  v14 = *(_OWORD *)(a2 + 144);
  v34 = *(_OWORD *)(a2 + 128);
  v35 = v14;
  v15 = *(_OWORD *)(a2 + 176);
  v36 = *(_OWORD *)(a2 + 160);
  v37 = v15;
  v16 = *(_OWORD *)(a2 + 80);
  v30 = *(_OWORD *)(a2 + 64);
  v31 = v16;
  v17 = *(_OWORD *)(a2 + 112);
  v32 = *(_OWORD *)(a2 + 96);
  v33 = v17;
  v18 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v18;
  if (*(char *)(a2 + 263) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 240);
    v41 = *(_QWORD *)(a2 + 256);
  }
  v19 = *(_OWORD *)(a2 + 408);
  v50 = *(_OWORD *)(a2 + 392);
  v51 = v19;
  v20 = *(_OWORD *)(a2 + 344);
  v46 = *(_OWORD *)(a2 + 328);
  v47 = v20;
  v21 = *(_OWORD *)(a2 + 376);
  v48 = *(_OWORD *)(a2 + 360);
  v49 = v21;
  v22 = *(_OWORD *)(a2 + 280);
  v42 = *(_OWORD *)(a2 + 264);
  v43 = v22;
  v23 = *(_OWORD *)(a2 + 312);
  v44 = *(_OWORD *)(a2 + 296);
  v45 = v23;
  v52 = *(_DWORD *)(a2 + 424);
  objc_msgSend(v12, "setLocation_CDMA:forCell:", v11, sub_1007AB68C(&v24));
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__p);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1007AB660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007AB68C(int *a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  _QWORD v15[4];
  int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  __int128 __p;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_1007AB968;
  v15[3] = &unk_1021532E8;
  v16 = *a1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_10027205C(&v17, *((const void **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 2);
  v2 = *((_OWORD *)a1 + 13);
  v30 = *((_OWORD *)a1 + 12);
  v31[0] = v2;
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 55);
  v3 = *((_OWORD *)a1 + 9);
  v26 = *((_OWORD *)a1 + 8);
  v27 = v3;
  v4 = *((_OWORD *)a1 + 11);
  v28 = *((_OWORD *)a1 + 10);
  v29 = v4;
  v5 = *((_OWORD *)a1 + 5);
  v22 = *((_OWORD *)a1 + 4);
  v23 = v5;
  v6 = *((_OWORD *)a1 + 7);
  v24 = *((_OWORD *)a1 + 6);
  v25 = v6;
  v7 = *((_OWORD *)a1 + 3);
  v20 = *((_OWORD *)a1 + 2);
  v21 = v7;
  if (*((char *)a1 + 263) < 0)
  {
    sub_100115CE4(&__p, *((void **)a1 + 30), *((_QWORD *)a1 + 31));
  }
  else
  {
    __p = *((_OWORD *)a1 + 15);
    v33 = *((_QWORD *)a1 + 32);
  }
  v8 = *(_OWORD *)(a1 + 102);
  v42 = *(_OWORD *)(a1 + 98);
  v43 = v8;
  v9 = *(_OWORD *)(a1 + 86);
  v38 = *(_OWORD *)(a1 + 82);
  v39 = v9;
  v10 = *(_OWORD *)(a1 + 94);
  v40 = *(_OWORD *)(a1 + 90);
  v41 = v10;
  v11 = *(_OWORD *)(a1 + 70);
  v34 = *(_OWORD *)(a1 + 66);
  v35 = v11;
  v12 = *(_OWORD *)(a1 + 78);
  v36 = *(_OWORD *)(a1 + 74);
  v37 = v12;
  v44 = a1[106];
  v13 = objc_msgSend(v15, "copy");
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  return v13;
}

void sub_1007AB7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007AB810(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[8];
  _OWORD v18[2];
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = objc_alloc((Class)CLLocation);
  v7 = a3[7];
  v17[6] = a3[6];
  v17[7] = v7;
  v18[0] = a3[8];
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)((char *)a3 + 140);
  v8 = a3[3];
  v17[2] = a3[2];
  v17[3] = v8;
  v9 = a3[5];
  v17[4] = a3[4];
  v17[5] = v9;
  v10 = a3[1];
  v17[0] = *a3;
  v17[1] = v10;
  v11 = objc_msgSend(v6, "initWithClientLocation:", v17);
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
  v13 = a2[3];
  v22 = a2[2];
  v23 = v13;
  v14 = a2[5];
  v24 = a2[4];
  v25 = v14;
  v15 = a2[1];
  v20 = *a2;
  v21 = v15;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1007ABBE4;
  v19[3] = &unk_102153318;
  return objc_msgSend(v12, "setLocation_NR:forCell:", v11, objc_msgSend(v19, "copy"));
}

id sub_1007AB908(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLWifiService")), "syncgetIsAssociated");
}

__n128 sub_1007AB92C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 sub_1007AB938@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 sub_1007AB944@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v2;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 112);
  result = *(__n128 *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

__n128 sub_1007AB968@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  sub_10027205C((_QWORD *)(a2 + 8), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  v4 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 208) = v4;
  *(_OWORD *)(a2 + 220) = *(_OWORD *)(a1 + 252);
  v5 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = v5;
  v6 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 176) = v6;
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v7;
  v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v8;
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v9;
  v10 = (_BYTE *)(a2 + 240);
  if (*(char *)(a1 + 295) < 0)
  {
    sub_100115CE4(v10, *(void **)(a1 + 272), *(_QWORD *)(a1 + 280));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)(a1 + 272);
    *(_QWORD *)(a2 + 256) = *(_QWORD *)(a1 + 288);
  }
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a1 + 456);
  v11 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a2 + 392) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a2 + 408) = v11;
  v12 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 344) = v12;
  v13 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a2 + 376) = v13;
  v14 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 280) = v14;
  result = *(__n128 *)(a1 + 344);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 328);
  *(__n128 *)(a2 + 312) = result;
  return result;
}

void sub_1007ABA54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1007ABA70(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  __int128 v23;
  __int128 v24;

  v4 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a1 + 40;
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_10027205C((_QWORD *)(a1 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v5 + 72) = v8;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v5 + 136) = v11;
  *(_OWORD *)(v5 + 120) = v10;
  *(_OWORD *)(v5 + 104) = v9;
  v12 = *(_OWORD *)(a2 + 208);
  v13 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(v5 + 212) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(v5 + 200) = v14;
  *(_OWORD *)(v5 + 184) = v13;
  *(_OWORD *)(v5 + 168) = v12;
  v15 = (_BYTE *)(v5 + 232);
  if (*(char *)(a2 + 295) < 0)
  {
    sub_100115CE4(v15, *(void **)(a2 + 272), *(_QWORD *)(a2 + 280));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(v5 + 248) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)v15 = v16;
  }
  v17 = *(_OWORD *)(a2 + 296);
  v18 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v18;
  *(_OWORD *)(a1 + 296) = v17;
  v19 = *(_OWORD *)(a2 + 344);
  v20 = *(_OWORD *)(a2 + 360);
  v21 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v21;
  *(_OWORD *)(a1 + 344) = v19;
  *(_OWORD *)(a1 + 360) = v20;
  result = *(__n128 *)(a2 + 408);
  v23 = *(_OWORD *)(a2 + 424);
  v24 = *(_OWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 424) = v23;
  *(_OWORD *)(a1 + 440) = v24;
  *(__n128 *)(a1 + 408) = result;
  return result;
}

void sub_1007ABB84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007ABBA0(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_1007ABBE4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v2;
  v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v3;
  result = *(__n128 *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

void sub_1007ABCA4(id a1)
{
  qword_102304938 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCountryTrackerSilo"));
}

void sub_1007AC328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007AC36C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshSettings");
}

id sub_1007AC374(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onManagerNotification:data:", a2, a3);
}

id sub_1007AC384(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onLocationUnknownTimer");
}

id sub_1007AC38C(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0180 != -1)
    dispatch_once(&qword_1022A0180, &stru_1021533E8);
  v2 = qword_1022A0188;
  if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reverting to cheap location only\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "requestLocationWithDesiredAccuracy:", kCLLocationAccuracyBystander);
}

void sub_1007AC478(id a1, NSString *a2, NSDictionary *a3)
{
  id v5;
  NSDate *v6;
  id v7;
  NSObject *v8;
  const char *v9;
  id v10;
  double v11;
  uint64_t v12;
  NSNumber *v13;
  unsigned __int8 v14;
  double v15;
  unsigned int v16;
  id v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  NSDate *v27;
  __int16 v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  NSNumber *v33;

  if (a3 && -[NSDictionary count](a3, "count"))
  {
    v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", -[NSDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("com.apple.RegulatoryDomain.peer_status.countryCode")), 4);
    v16 = 0;
    objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("com.apple.RegulatoryDomain.peer_status.priority")), "getBytes:length:", &v16, 4);
    v15 = 0.0;
    objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("com.apple.RegulatoryDomain.peer_status.timestamp")), "getBytes:length:", &v15, 8);
    v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v15);
    v7 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, CFSTR("com.apple.RegulatoryDomain.peer_status.countryCode"));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16), CFSTR("com.apple.RegulatoryDomain.peer_status.priority"));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, CFSTR("com.apple.RegulatoryDomain.peer_status.timestamp"));
    v14 = 0;
    objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("com.apple.RegulatoryDomain.peer_status.isDisputed")), "getBytes:length:", &v14, 1);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14), CFSTR("com.apple.RegulatoryDomain.peer_status.isDisputed"));
    if (qword_1022A0180 != -1)
      dispatch_once(&qword_1022A0180, &stru_1021533E8);
    v8 = qword_1022A0188;
    if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_DEFAULT))
    {
      v9 = -[NSString UTF8String](a2, "UTF8String");
      v10 = objc_msgSend(v5, "UTF8String");
      v11 = v15;
      v12 = v16;
      v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14);
      *(_DWORD *)buf = 68290562;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2082;
      v23 = v9;
      v24 = 2082;
      v25 = v10;
      v26 = 2114;
      v27 = v6;
      v28 = 2050;
      v29 = v11;
      v30 = 2050;
      v31 = v12;
      v32 = 2114;
      v33 = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received a peer update, forwarding...\", \"deviceID\":%{public, location:escape_only}s, \"country\":%{public, location:escape_only}s, \"timestamp\":%{public, location:escape_only}@, \"timestampVal\":\"%{public}f\", \"priority\":%{public}lu, \"disputed?\":%{public, location:escape_only}@}", buf, 0x4Eu);
    }
    v17 = v7;
    RDUpdateCountryCodeFromPeerInfo(a2, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  }
  else
  {
    RDUpdateCountryCodeFromPeer(a2, 0);
  }
}

id sub_1007AC76C(uint64_t a1)
{
  NSObject *v2;
  double v3;
  _QWORD *v4;
  void *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (qword_1022A0180 != -1)
    dispatch_once(&qword_1022A0180, &stru_1021533E8);
  v2 = qword_1022A0188;
  if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "timeToActiveGiveup");
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"timeout elapsed with no locations for current country, requesting low-cost active update\", \"duration\":%{public}d}", (uint8_t *)v7, 0x18u);
  }
  objc_msgSend(*(id *)(a1 + 32), "requestLocationWithDesiredAccuracy:", kCLLocationAccuracyKilometer);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = (void *)v4[4];
  objc_msgSend(v4, "timeToActiveGiveup");
  return objc_msgSend(v5, "setNextFireDelay:");
}

void sub_1007ACA6C(uint64_t a1)
{

}

void sub_1007AD22C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSMutableArray *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  id v23;
  NSObject *v24;
  id v25;
  char *v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSArray *v35;
  double v36;
  double v37;
  double v38;
  NSObject *v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  id v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  uint64_t v51;
  double v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD v72[2];
  _QWORD v73[2];
  uint8_t buf[4];
  int v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  _BYTE v79[20];
  int v80;
  _BYTE v81[128];
  _BYTE v82[128];

  if (qword_1022A0180 != -1)
    dispatch_once(&qword_1022A0180, &stru_1021533E8);
  v6 = qword_1022A0188;
  if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289539;
    v75 = 0;
    v76 = 2082;
    v77 = "";
    v78 = 2113;
    *(_QWORD *)v79 = a2;
    *(_WORD *)&v79[8] = 2114;
    *(_QWORD *)&v79[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"response from fetchPossibleTerritoriesForLocation\", \"results\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (a3)
  {
    if (qword_1022A0180 != -1)
      dispatch_once(&qword_1022A0180, &stru_1021533E8);
    v7 = qword_1022A0188;
    if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v75 = 0;
      v76 = 2082;
      v77 = "";
      v78 = 2114;
      *(_QWORD *)v79 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error getting country info\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A0180 != -1)
        dispatch_once(&qword_1022A0180, &stru_1021533E8);
    }
    v8 = qword_1022A0188;
    if (os_signpost_enabled((os_log_t)qword_1022A0188))
    {
      *(_DWORD *)buf = 68289282;
      v75 = 0;
      v76 = 2082;
      v77 = "";
      v78 = 2114;
      *(_QWORD *)v79 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error getting country info", "{\"msg%{public}.0s\":\"error getting country info\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_85;
  }
  v58 = a1;
  if (!a2)
  {
    if (qword_1022A0180 != -1)
      dispatch_once(&qword_1022A0180, &stru_1021533E8);
    v34 = qword_1022A0188;
    if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      v75 = 0;
      v76 = 2082;
      v77 = "";
      v78 = 2114;
      *(_QWORD *)v79 = CFSTR("XZ");
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"no country info found, defaulting to international waters\", \"code\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v9 = +[NSMutableArray arrayWithObject:](NSMutableArray, "arrayWithObject:", CFSTR("XZ"), a1);
    goto LABEL_68;
  }
  v9 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(a2, "count"));
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v68, v82, 16);
  if (!v10)
  {
LABEL_68:
    v12 = 0;
    goto LABEL_69;
  }
  v11 = v10;
  v12 = 0;
  v13 = *(_QWORD *)v69;
  v62 = *(_QWORD *)v69;
  v60 = a2;
  do
  {
    v14 = 0;
    v61 = v11;
    do
    {
      if (*(_QWORD *)v69 != v13)
        objc_enumerationMutation(a2);
      v63 = (char *)v14;
      v15 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)v14);
      if (v15)
      {
        if (objc_msgSend(v15, "isDisputed"))
        {
          if (qword_1022A0180 != -1)
            dispatch_once(&qword_1022A0180, &stru_1021533E8);
          v16 = qword_1022A0188;
          if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_INFO))
          {
            v17 = objc_msgSend(objc_msgSend(v15, "disputedTerritoryName"), "UTF8String");
            *(_DWORD *)buf = 68289283;
            v75 = 0;
            v76 = 2082;
            v77 = "";
            v78 = 2081;
            *(_QWORD *)v79 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"result is a disputed territory, adding all interested parties\", \"name\":%{private, location:escape_only}s}", buf, 0x1Cu);
          }
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v18 = objc_msgSend(v15, "interestedPartyIso3166CountryCodes2", v58);
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v64, v81, 16);
          if (v19)
          {
            v20 = v19;
            v21 = *(_QWORD *)v65;
            do
            {
              for (i = 0; i != v20; i = (char *)i + 1)
              {
                if (*(_QWORD *)v65 != v21)
                  objc_enumerationMutation(v18);
                v23 = objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i), "copy");
                -[NSMutableArray addObject:](v9, "addObject:", v23);
                if (qword_1022A0180 != -1)
                  dispatch_once(&qword_1022A0180, &stru_1021533E8);
                v24 = qword_1022A0188;
                if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_INFO))
                {
                  v25 = objc_msgSend(v23, "UTF8String");
                  *(_DWORD *)buf = 68289283;
                  v75 = 0;
                  v76 = 2082;
                  v77 = "";
                  v78 = 2081;
                  *(_QWORD *)v79 = v25;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"adding interested party\", \"countryCode\":%{private, location:escape_only}s}", buf, 0x1Cu);
                }
              }
              v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v64, v81, 16);
            }
            while (v20);
            v12 = 1;
            a2 = v60;
            v11 = v61;
            v13 = v62;
          }
          else
          {
            v12 = 1;
          }
LABEL_59:
          v26 = v63;
          goto LABEL_60;
        }
        if ((objc_msgSend(v15, "isDisputed") & 1) != 0 || !objc_msgSend(v15, "iso3166CountryCode2"))
        {
          if (qword_1022A0180 != -1)
            dispatch_once(&qword_1022A0180, &stru_1021533E8);
          v32 = qword_1022A0188;
          if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289282;
            v75 = 0;
            v76 = 2082;
            v77 = "";
            v78 = 2114;
            *(_QWORD *)v79 = v15;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"got a result that lacked a 2-letter ISO country code\", \"terr\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A0180 != -1)
              dispatch_once(&qword_1022A0180, &stru_1021533E8);
          }
          v33 = qword_1022A0188;
          if (os_signpost_enabled((os_log_t)qword_1022A0188))
          {
            *(_DWORD *)buf = 68289282;
            v75 = 0;
            v76 = 2082;
            v77 = "";
            v78 = 2114;
            *(_QWORD *)v79 = v15;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got a result that lacked a 2-letter ISO country code", "{\"msg%{public}.0s\":\"got a result that lacked a 2-letter ISO country code\", \"terr\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
          goto LABEL_59;
        }
        v29 = objc_msgSend(objc_msgSend(v15, "iso3166CountryCode2"), "copy");
        -[NSMutableArray addObject:](v9, "addObject:", v29);
        if (qword_1022A0180 != -1)
          dispatch_once(&qword_1022A0180, &stru_1021533E8);
        v26 = v63;
        v30 = qword_1022A0188;
        if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_INFO))
        {
          v31 = objc_msgSend(v29, "UTF8String");
          *(_DWORD *)buf = 68289283;
          v75 = 0;
          v76 = 2082;
          v77 = "";
          v78 = 2081;
          *(_QWORD *)v79 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"adding resultant country code\", \"countryCode\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        v13 = v62;
      }
      else
      {
        if (qword_1022A0180 != -1)
          dispatch_once(&qword_1022A0180, &stru_1021533E8);
        v26 = v63;
        v27 = qword_1022A0188;
        if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          v75 = 0;
          v76 = 2082;
          v77 = "";
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"empty territory element?\"}", buf, 0x12u);
          if (qword_1022A0180 != -1)
            dispatch_once(&qword_1022A0180, &stru_1021533E8);
        }
        v28 = qword_1022A0188;
        if (os_signpost_enabled((os_log_t)qword_1022A0188))
        {
          *(_DWORD *)buf = 68289026;
          v75 = 0;
          v76 = 2082;
          v77 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "empty territory element?", "{\"msg%{public}.0s\":\"empty territory element?\"}", buf, 0x12u);
        }
      }
LABEL_60:
      v14 = v26 + 1;
    }
    while (v14 != v11);
    v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v68, v82, 16);
  }
  while (v11);
LABEL_69:
  v35 = -[NSSet allObjects](+[NSSet setWithArray:](NSSet, "setWithArray:", v9, v58), "allObjects");
  if (!objc_msgSend(*(id *)(v59 + 32), "countriesAreUnchanged:", v35))
  {
    if (qword_1022A0180 != -1)
      dispatch_once(&qword_1022A0180, &stru_1021533E8);
    v45 = qword_1022A0188;
    if (!os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_INFO))
      goto LABEL_84;
    v46 = objc_msgSend(*(id *)(v59 + 32), "previousCountries");
    *(_DWORD *)buf = 68289795;
    v75 = 0;
    v76 = 2082;
    v77 = "";
    v78 = 2113;
    *(_QWORD *)v79 = v46;
    *(_WORD *)&v79[8] = 2113;
    *(_QWORD *)&v79[10] = v35;
    *(_WORD *)&v79[18] = 1025;
    v80 = v12 & 1;
    v47 = "{\"msg%{public}.0s\":\"location country codes have changed, sending\", \"prev\":%{private, location:escape_onl"
          "y}@, \"curr\":%{private, location:escape_only}@, \"disputed\":%{private}hhd}";
    v48 = v45;
    v49 = OS_LOG_TYPE_INFO;
    v50 = 44;
    goto LABEL_83;
  }
  -[NSDate timeIntervalSince1970](+[NSDate now](NSDate, "now"), "timeIntervalSince1970");
  v37 = v36;
  objc_msgSend(*(id *)(v59 + 32), "previousCountryCodeTimeStamp");
  if ((int)objc_msgSend(*(id *)(v59 + 32), "countryCodeDebounceInterval") <= (int)(v37 - v38))
  {
    if (qword_1022A0180 != -1)
      dispatch_once(&qword_1022A0180, &stru_1021533E8);
    v51 = qword_1022A0188;
    if (!os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_DEFAULT))
      goto LABEL_84;
    -[NSDate timeIntervalSince1970](+[NSDate now](NSDate, "now"), "timeIntervalSince1970");
    v53 = (int)v52;
    objc_msgSend(*(id *)(v59 + 32), "previousCountryCodeTimeStamp");
    v55 = v54;
    v56 = objc_msgSend(*(id *)(v59 + 32), "countryCodeDebounceInterval");
    *(_DWORD *)buf = 68289794;
    v75 = 0;
    v76 = 2082;
    v77 = "";
    v78 = 1026;
    *(_DWORD *)v79 = v53;
    *(_WORD *)&v79[4] = 2050;
    *(_QWORD *)&v79[6] = v55;
    *(_WORD *)&v79[14] = 1026;
    *(_DWORD *)&v79[16] = v56;
    v47 = "{\"msg%{public}.0s\":\"already sent this country code, but it's been long enough so sending it again\", \"now\""
          ":%{public}d, \"prevTime\":\"%{public}f\", \"delta\":%{public}d}";
    v48 = v51;
    v49 = OS_LOG_TYPE_DEFAULT;
    v50 = 40;
LABEL_83:
    _os_log_impl((void *)&_mh_execute_header, v48, v49, v47, buf, v50);
LABEL_84:
    a1 = v59;

    *(_QWORD *)(*(_QWORD *)(v59 + 32) + 200) = -[NSArray copy](v35, "copy");
    -[NSDate timeIntervalSince1970](+[NSDate now](NSDate, "now"), "timeIntervalSince1970");
    *(_QWORD *)(*(_QWORD *)(v59 + 32) + 208) = v57;
    *(_BYTE *)(*(_QWORD *)(v59 + 32) + 99) = v12 & 1;
    v72[0] = kRDUpdateKeyCountryCodes;
    v72[1] = kRDUpdateKeyInDisputedArea;
    v73[0] = v35;
    v73[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:");
    objc_msgSend(*(id *)(v59 + 32), "sendUpdateToRDIfAllowed:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v73, v72, 2));
    goto LABEL_85;
  }
  if (qword_1022A0180 != -1)
    dispatch_once(&qword_1022A0180, &stru_1021533E8);
  a1 = v59;
  v39 = qword_1022A0188;
  if (os_log_type_enabled((os_log_t)qword_1022A0188, OS_LOG_TYPE_DEFAULT))
  {
    -[NSDate timeIntervalSince1970](+[NSDate now](NSDate, "now"), "timeIntervalSince1970");
    v41 = (int)v40;
    objc_msgSend(*(id *)(v59 + 32), "previousCountryCodeTimeStamp");
    v43 = v42;
    v44 = objc_msgSend(*(id *)(v59 + 32), "countryCodeDebounceInterval");
    *(_DWORD *)buf = 68289794;
    v75 = 0;
    v76 = 2082;
    v77 = "";
    v78 = 1026;
    *(_DWORD *)v79 = v41;
    *(_WORD *)&v79[4] = 2050;
    *(_QWORD *)&v79[6] = v43;
    *(_WORD *)&v79[14] = 1026;
    *(_DWORD *)&v79[16] = v44;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"already sent this country code, skipping\", \"now\":%{public}d, \"prevTime\":\"%{public}f\", \"delta\":%{public}d}", buf, 0x28u);
  }
LABEL_85:

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = 0;
}

void sub_1007AE7D0(id a1)
{
  qword_1022A0188 = (uint64_t)os_log_create("com.apple.locationd.Position", "Country");
}

uint64_t sub_1007AE7FC()
{
  sub_1015A2E04(&qword_102304920, "CountryTracker");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304920, (void *)&_mh_execute_header);
}

_QWORD *sub_1007AE840(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_10144648C(a1, a2);
  *result = off_102153418;
  return result;
}

_QWORD *sub_1007AE864(_QWORD *result)
{
  *result = off_102153490;
  return result;
}

void sub_1007AE878(_QWORD *a1)
{
  *a1 = off_102153490;
  operator delete();
}

float sub_1007AE89C()
{
  return 0.0;
}

void sub_1007AE8A4(uint64_t a1, void *a2)
{
  sub_1004F96E4(a1, a2);
}

void sub_1007AECE4()
{
  operator delete();
}

void sub_1007AEE24()
{
  sub_100E4F1B8();
}

void sub_1007AEFFC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerNotifierWatch::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102153738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102153738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007B1A58(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007AF1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007AF1D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(*(id *)(v3 + 32), "silo");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_1007AF2B8;
  v12[3] = &unk_102153610;
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v12[4] = v3;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_msgSend(v4, "async:", v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1007AF2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_1007AF2B8(uint64_t a1)
{
  uint64_t v2;
  __int128 **v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 **v8[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(__int128 ***)(a1 + 48);
  v8[0] = *(__int128 ***)(a1 + 40);
  v8[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 1);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_1007AF35C(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)(v3 + 1);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*((void (**)(__int128 **))*v3 + 2))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
}

void sub_1007AF348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007AF35C(uint64_t a1, __int128 ***a2)
{
  __int128 *v2;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v2 = **a2;
  if (v2 != (*a2)[1])
  {
    v5 = a1 + 1368;
    v6 = **a2;
    do
    {
      v15 = *v6;
      v16 = v6[1];
      v17 = *((_QWORD *)v6 + 4);
      v13 = *(__int128 *)((char *)v6 + 44);
      v14 = *((_DWORD *)v6 + 15);
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v21 = v15;
      v22 = v16;
      *(_QWORD *)v23 = v17;
      *(_DWORD *)&v23[8] = 1;
      *(_DWORD *)&v23[28] = v14;
      *(_OWORD *)&v23[12] = v13;
      v12 = 8;
      (*(void (**)(uint64_t, int *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v12, &v21, 0, 0xFFFFFFFFLL, 0);
      sub_10121487C(v5, v2, (void **)&v18);
      v2 += 4;
      v6 += 4;
    }
    while (v6 != (*a2)[1]);
    v8 = v18;
    v7 = v19;
    if (v18 != v19)
    {
      do
      {
        if (*((_BYTE *)v8 + 61))
        {
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v9 = *v8;
          v10 = v8[1];
          v11 = v8[3];
          *(_OWORD *)v23 = v8[2];
          *(_OWORD *)&v23[16] = v11;
          v21 = v9;
          v22 = v10;
          LODWORD(v15) = 7;
          (*(void (**)(uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v15, &v21, 0, 0xFFFFFFFFLL, 0);
        }
        v8 += 4;
      }
      while (v8 != v7);
      v7 = v18;
    }
    if (v7)
    {
      v19 = v7;
      operator delete(v7);
    }
  }
}

void sub_1007AF514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007AF538(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(*(id *)(v3 + 32), "silo");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_1007AF61C;
  v12[3] = &unk_102153660;
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v12[4] = v3;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_msgSend(v4, "async:", v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1007AF608(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_1007AF61C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t **)(a1 + 48);
  v8[0] = *(uint64_t **)(a1 + 40);
  v8[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 1);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_1007AF6C0(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)(v3 + 1);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(uint64_t *))(*v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
}

void sub_1007AF6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007AF6C0(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  void *v10;
  ALActivityLog *v11;
  double v12;
  int v13;
  int v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = *a2;
  if (*a2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      v6 = a1 + 3752;
      do
      {
        v7 = *(unsigned int *)(v3 + 8);
        v12 = *(double *)v3;
        v8 = v12;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v16 = 0u;
        v13 = v7;
        v14 = 1;
        v15[0] = sub_1007B1FB4(v6, (uint64_t)&v12);
        v15[1] = v9;
        LODWORD(v12) = 5;
        (*(void (**)(uint64_t, double *, _QWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v12, v15, 0, 0xFFFFFFFFLL, 0);
        v10 = objc_autoreleasePoolPush();
        v11 = objc_alloc_init(ALActivityLog);
        -[ALActivityLog setTimestamp:](v11, "setTimestamp:", v8);
        -[ALActivityLog setCoarseElevation:](v11, "setCoarseElevation:", objc_alloc_init(ALCMCoarseElevation));
        -[ALCMCoarseElevation setElevationAscended:](-[ALActivityLog coarseElevation](v11, "coarseElevation"), "setElevationAscended:", v7);
        -[ALCMCoarseElevation setSource:](-[ALActivityLog coarseElevation](v11, "coarseElevation"), "setSource:", 1);
        objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v11);
        objc_autoreleasePoolPop(v10);
        v3 += 16;
      }
      while (v3 != v4);
    }
  }
}

uint64_t sub_1007AF834(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1007AF858(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

void sub_1007AF860(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v4 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[1128];
    *(_DWORD *)buf = 67240448;
    v13 = v5;
    v14 = 1026;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update location authorization, current, %{public}d, new, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v6 = a1[1128];
    v9[0] = 67240448;
    v9[1] = v6;
    v10 = 1026;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Update location authorization, current, %{public}d, new, %{public}d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::updateStateOnAuthorization(BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (a1[1128] != a2)
  {
    sub_1007AFFB8((uint64_t)a1);
    sub_1007AEE24(a1);
    a1[1128] = a2;
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1 + 232))(a1);
  }
}

void sub_1007AFA5C(float *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLOdometerNotifierWatch::onFlightSegment");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102153738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onFlightSegment", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102153738);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onFlightSegment\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1007B3BC0(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1007AFC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007AFC2C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerNotifierWatch::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102153738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102153738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007B3884(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007AFDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1007AFE04(_QWORD *a1)
{
  void *v2;

  sub_1007B4430(a1 + 9, 0);
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1007AFE44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1021534E0;
  *(_QWORD *)(a1 + 920) = off_1021535F0;
  sub_1007AFFB8(a1);
  if (sub_1001FBB04(0))
  {
    v2 = sub_1001FBB04(0);
    sub_1000A4A6C(v2, 28, *(_QWORD *)(a1 + 3928));
    v3 = *(_QWORD *)(a1 + 3928);
    *(_QWORD *)(a1 + 3928) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  *(_QWORD *)(a1 + 3992) = 0;
  v5 = *(_QWORD *)(a1 + 3928);
  *(_QWORD *)(a1 + 3928) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 3920);
  *(_QWORD *)(a1 + 3920) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 3912);
  *(_QWORD *)(a1 + 3912) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 3904);
  *(_QWORD *)(a1 + 3904) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 3896);
  *(_QWORD *)(a1 + 3896) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 3888);
  *(_QWORD *)(a1 + 3888) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_1007B4430((uint64_t *)(a1 + 3872), 0);
  v11 = *(void **)(a1 + 3824);
  if (v11)
  {
    *(_QWORD *)(a1 + 3832) = v11;
    operator delete(v11);
  }
  sub_1012141AC(a1 + 1368);
  sub_100BCD638(a1 + 1176);
  v12 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return sub_1004FA1D0(a1);
}

uint64_t sub_1007AFFB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 3888);
  *(_QWORD *)(a1 + 3888) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 3896);
  *(_QWORD *)(a1 + 3896) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 3912);
  *(_QWORD *)(a1 + 3912) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  objc_msgSend(*(id *)(a1 + 1136), "releaseAccuracyEnablementAssertionForClient:", CLISP_ME_TOKEN);

  *(_QWORD *)(a1 + 1136) = 0;
  result = *(_QWORD *)(a1 + 3920);
  if (result)
  {
    *(_QWORD *)(a1 + 3920) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_1007B0060(uint64_t a1)
{
  return sub_1007AFE44(a1 - 920);
}

void sub_1007B0068(uint64_t a1)
{
  sub_1007AFE44(a1);
  operator delete();
}

void sub_1007B008C(uint64_t a1)
{
  sub_1007AFE44(a1 - 920);
  operator delete();
}

id sub_1007B00B4(uint64_t a1, char a2)
{
  void *v2;
  _QWORD v4[5];
  char v5;

  v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007B0110;
  v4[3] = &unk_1021468D0;
  v4[4] = a1;
  v5 = a2;
  return objc_msgSend(v2, "async:", v4);
}

id sub_1007B0110(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    v2 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling kNotificationOdometerUpdateElevation from companion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "Enabling kNotificationOdometerUpdateElevation from companion", v9, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::updatePhoneWorkoutElevationSubscription(BOOL)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *(_DWORD *)buf = 3;
    return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 1168) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(v1 + 1168) + 8), sub_10061FAA0(buf), 0);
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    v4 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabling kNotificationOdometerUpdateElevation from companion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "Disabling kNotificationOdometerUpdateElevation from companion", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::updatePhoneWorkoutElevationSubscription(BOOL)_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_DWORD *)buf = 3;
    return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 1168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 1168) + 8), sub_10061FAA0(buf));
  }
}

id sub_1007B0414(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v4 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Added client for cycling workout distance updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Added client for cycling workout distance updates", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::registerForCyclingWorkoutDistanceUpdates(id<CLOdometerNotifierClientProtocol>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 3880), "addObject:", a2);
}

id sub_1007B05B4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v4 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed client from cycling workout distance updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Removed client from cycling workout distance updates", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::unregisterForCyclingWorkoutDistanceUpdates(id<CLOdometerNotifierClientProtocol>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 3880), "removeObject:", a2);
}

void sub_1007B0754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[4];

  v2 = sub_1001FBB04(0);
  *(_DWORD *)buf = 5;
  if (!sub_1001B7864(a1, (int *)buf, 1))
  {
    if (v2)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 72) + 40))(v2 + 72, 0);
    *(_DWORD *)buf = 5;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), sub_10061FAA0(buf));
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    v7 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CoarseElevation,src,phone,0,watch,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "CoarseElevation,src,phone,0,watch,0", v11, 2, v11[0]);
      goto LABEL_48;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 3985))
  {
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 72);
      v3 = v2 + 72;
      if ((*(unsigned int (**)(uint64_t))(v4 + 16))(v3))
      {
        if ((sub_1001B7910() & 0x1000000000) != 0)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, 1);
      }
    }
    *(_DWORD *)buf = 5;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), sub_10061FAA0(buf), 0);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CoarseElevation,phone,1,watch,1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "CoarseElevation,phone,1,watch,1", v11, 2, v11[0]);
LABEL_48:
      v10 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::updateCoarseElevationSubscription()", "%s\n", v6);
      if (v10 != buf)
        free(v10);
      return;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 1130) || !v2)
  {
    if (!v2)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 72) + 16))(v2 + 72)
    || (sub_1001B7910() & 0x1000000000) == 0)
  {
LABEL_38:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 72) + 40))(v2 + 72, 0);
LABEL_39:
    *(_DWORD *)buf = 5;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), sub_10061FAA0(buf), 0);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    v9 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CoarseElevation,src,phone,1,watch,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "CoarseElevation,src,phone,1,watch,0", v11, 2, v11[0]);
      goto LABEL_48;
    }
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 72) + 40))(v2 + 72, 1);
  *(_DWORD *)buf = 5;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), sub_10061FAA0(buf));
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102153758);
  v8 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CoarseElevation,src,phone,0,watch,1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "CoarseElevation,src,phone,0,watch,1", v11, 2, v11[0]);
    goto LABEL_48;
  }
}

void sub_1007B0CB4(_BYTE *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v2 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1128];
    *(_DWORD *)buf = 2;
    v4 = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
    v5 = a1[1131];
    *(_DWORD *)buf = 67240704;
    v19 = v3;
    v20 = 1026;
    v21 = v4;
    v22 = 1026;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating odometer state, authorized, %{public}d, has active clients, %{public}d, workout distance controller, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v7 = qword_10229FDF8;
    v8 = a1[1128];
    v13[0] = 2;
    v9 = sub_1001B7864((uint64_t)a1, v13, 1);
    v10 = a1[1131];
    v13[0] = 67240704;
    v13[1] = v8;
    v14 = 1026;
    v15 = v9;
    v16 = 1026;
    v17 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "Updating odometer state, authorized, %{public}d, has active clients, %{public}d, workout distance controller, %{public}d", v13, 20);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::updateOdometerState()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (a1[1128] && ((*(_DWORD *)buf = 2, sub_1001B7864((uint64_t)a1, (int *)buf, 1)) || a1[1131]))
    sub_1007B0F38((uint64_t)a1);
  else
    sub_1007B12CC(a1);
  *(_DWORD *)buf = 3;
  v6 = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
  sub_1012151E0((uint64_t)(a1 + 1368), v6);
  sub_1007B0754((uint64_t)a1);
}

void sub_1007B0F38(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v2 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enable GPS; Start GPS subscription", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 1, "Enable GPS; Start GPS subscription",
      v10,
      2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::enableGPS()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(_QWORD *)(a1 + 3920);
  if (v3)
    objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), 41, 0);
  if (*(_BYTE *)(a1 + 1144))
  {
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v4 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Switching to GPS leech, rhythmic waking mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v10[0] = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 1, "Switching to GPS leech, rhythmic waking mode", v10, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::enableGPS()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    objc_msgSend(*(id *)(a1 + 1136), "releaseAccuracyEnablementAssertionForClient:", CLISP_ME_TOKEN);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 3888) + 8), 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3888) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 3888) + 8), 5, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3912) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 3912) + 8), 23, 0);
    sub_100BCEF8C(a1 + 1176, 1);
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 3888) + 8), 5);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3912) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 3912) + 8), 23);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3888) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 3888) + 8), 0, 0);
    sub_100BCEF8C(a1 + 1176, -1);
    objc_msgSend(*(id *)(a1 + 1136), "takeAccuracyEnablementAssertionForClient:withDesiredAccuracy:", CLISP_ME_TOKEN, -1.0);
  }
  *(_BYTE *)(a1 + 1129) = 1;
}

_BYTE *sub_1007B12CC(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (result[1129])
  {
    v1 = result;
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v2 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Disable GPS; Stop GPS subscription", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 1, "Disable GPS; Stop GPS subscription",
        v6,
        2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::disableGPS()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 486) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 486) + 8), 0);
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 486) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 486) + 8), 5);
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 489) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 489) + 8), 23);
    sub_100BCEF8C((uint64_t)(v1 + 1176), -1);
    result = objc_msgSend(*((id *)v1 + 142), "releaseAccuracyEnablementAssertionForClient:", CLISP_ME_TOKEN);
    v3 = *((_QWORD *)v1 + 490);
    if (v3)
      result = objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 41);
    v1[1129] = 0;
    v1[1145] = 0;
  }
  return result;
}

void sub_1007B14D0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerNotifierWatch::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102153738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102153738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007B22C4((unsigned __int8 *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007B1688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007B16A8(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerNotifierWatch::onSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102153738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102153738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007B383C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007B1860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007B1880(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102153738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102153738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007B414C((unsigned __int8 *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007B1A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007B1A58(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v6;
  double Current;
  double v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  ALActivityLog *v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  _WORD v24[8];
  _OWORD v25[12];
  _OWORD v26[4];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[8];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v6 = *a3;
  if (*a3 == 8)
  {
    *(_DWORD *)buf = 5;
    if (!sub_1001B7864(a1, (int *)buf, 1)
      || *(_BYTE *)(a1 + 3985) && (sub_1001B7910() & 0x1000000000) != 0)
    {
      *(_DWORD *)buf = 5;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), sub_10061FAA0(buf));
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      *(_QWORD *)buf = sub_1007B1FB4(a1 + 3752, a4);
      v32 = v12;
      LODWORD(v25[0]) = 5;
      (*(void (**)(uint64_t, _OWORD *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v25, buf, 0, 0xFFFFFFFFLL, 0);
      v13 = objc_autoreleasePoolPush();
      v14 = objc_alloc_init(ALActivityLog);
      -[ALActivityLog setTimestamp:](v14, "setTimestamp:", *(double *)a4);
      -[ALActivityLog setCoarseElevation:](v14, "setCoarseElevation:", objc_alloc_init(ALCMCoarseElevation));
      -[ALCMCoarseElevation setElevationAscended:](-[ALActivityLog coarseElevation](v14, "coarseElevation"), "setElevationAscended:", *(unsigned int *)(a4 + 8));
      -[ALCMCoarseElevation setSource:](-[ALActivityLog coarseElevation](v14, "coarseElevation"), "setSource:", *(unsigned int *)(a4 + 12));
      objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v14);
      objc_autoreleasePoolPop(v13);
    }
  }
  else if (v6 == 6)
  {
    if (*(_BYTE *)a4)
      v15 = *(_BYTE *)(a4 + 1) == 0;
    else
      v15 = 1;
    v16 = !v15;
    v17 = *(unsigned __int8 *)(a4 + 16);
    if (*(_BYTE *)(a4 + 16))
      v18 = v16;
    else
      v18 = 0;
    if (*(unsigned __int8 *)(a1 + 1130) != v18)
    {
      *(_BYTE *)(a1 + 1130) = v18;
      sub_1007B0754(a1);
    }
    sub_1012153C4(a1 + 1368, v16, v17 != 0);
  }
  else if (v6 == 4)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v8 = Current;
    if (*(_BYTE *)(a1 + 1444))
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v9 = *(_OWORD *)(a4 + 16);
      v26[0] = *(_OWORD *)a4;
      v26[1] = v9;
      v10 = *(_OWORD *)(a4 + 48);
      v26[2] = *(_OWORD *)(a4 + 32);
      v26[3] = v10;
      sub_1012141B0(a1 + 1368, (uint64_t)v26, (uint64_t)&v27);
      memset(&v25[4], 0, 128);
      v25[0] = v27;
      v25[1] = v28;
      v25[2] = v29;
      v25[3] = v30;
      if (v8 - *(double *)(a1 + 1152) > 15.0)
      {
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102153758);
        v11 = qword_10229FD78;
        if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "watch:notifying elevation entry from phone", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102153758);
          v24[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "watch:notifying elevation entry from phone", v24, 2);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        *(double *)(a1 + 1152) = v8;
      }
      *(_DWORD *)buf = 7;
      (*(void (**)(uint64_t, uint8_t *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v25, 0, 0xFFFFFFFFLL, 0);
    }
    else if (Current - *(double *)(a1 + 1152) > 15.0)
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      v19 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "elevation update from phone, source unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102153758);
        LOWORD(v25[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "elevation update from phone, source unavailable", v25, 2);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      *(double *)(a1 + 1152) = v8;
    }
  }
}

uint64_t sub_1007B1FB4(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  _OWORD *v13;
  NSObject *v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  double v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  double v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v4 = *(double *)a2;
  v5 = *(double *)(a1 + 32);
  if (*(double *)a2 <= v5)
    goto LABEL_18;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = a1 + 16;
  if (!v6)
    v7 = a1;
  v8 = *(_DWORD *)(a2 + 8) - *(_DWORD *)(v7 + 8);
  if (v8 < 0)
    v8 = *(_DWORD *)(v7 + 8) - *(_DWORD *)(a2 + 8);
  if (v6 == *(_DWORD *)(a1 + 44))
  {
    v9 = *(_DWORD *)(a1 + 40);
    v10 = v8 >= 0x12C;
    v11 = 300;
  }
  else
  {
    if (v4 - *(double *)(a1 + 16 * (v6 != 0)) <= 200.0)
    {
      if (v8 >= 0x12C)
        v8 = 300;
      v12 = *(_DWORD *)(a1 + 40) + (fmin(v4 - v5, 180.0) * (double)v8 / 180.0);
      goto LABEL_17;
    }
    v9 = *(_DWORD *)(a1 + 40);
    v10 = v8 >= 0xC8;
    v11 = 200;
  }
  if (v10)
    v8 = v11;
  v12 = v9 + v8;
LABEL_17:
  *(double *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = v12;
  *(_DWORD *)(a1 + 44) = v6;
LABEL_18:
  if (*(_DWORD *)(a2 + 12))
    v13 = (_OWORD *)(a1 + 16);
  else
    v13 = (_OWORD *)a1;
  *v13 = *(_OWORD *)a2;
  sub_100197040();
  if (sub_10075D288())
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102153758);
    v14 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(double *)a2;
      v16 = *(_DWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 12);
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_DWORD *)(a1 + 40);
      v20 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)buf = 134219264;
      v43 = v15;
      v44 = 1024;
      v45 = v16;
      v46 = 1024;
      v47 = v17;
      v48 = 2048;
      v49 = v18;
      v50 = 1024;
      v51 = v19;
      v52 = 1024;
      v53 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "onCoarseElevation,startTime,%.3f,ascended,%d,source,%d,fused,startTime,%.3f,ascended,%d,source,%d", buf, 0x2Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102153758);
      v22 = *(double *)a2;
      v23 = *(_DWORD *)(a2 + 8);
      v24 = *(_DWORD *)(a2 + 12);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(_DWORD *)(a1 + 40);
      v27 = *(_DWORD *)(a1 + 44);
      v30 = 134219264;
      v31 = v22;
      v32 = 1024;
      v33 = v23;
      v34 = 1024;
      v35 = v24;
      v36 = 2048;
      v37 = v25;
      v38 = 1024;
      v39 = v26;
      v40 = 1024;
      v41 = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "onCoarseElevation,startTime,%.3f,ascended,%d,source,%d,fused,startTime,%.3f,ascended,%d,source,%d", COERCE_DOUBLE(&v30), 46);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "CLCoarseElevationChangeEntry CLCoarseElevationFusion::feedSample(const CLCoarseElevationChangeEntry &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  return *(_QWORD *)(a1 + 32);
}

void sub_1007B22C4(unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7;
  int v8;
  int *v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  uint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count *v40;

  v7 = *a3;
  if (*a3 > 13)
  {
    if (v7 == 14)
    {
      v16 = sub_1004FABF8((uint64_t)a1);
      sub_1007AF860(a1, v16);
      return;
    }
    if (v7 != 23)
    {
LABEL_30:
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v17 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_ERROR))
      {
        v18 = *a3;
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Warning Received unhandled location provider notification, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDF0 != -1)
          dispatch_once(&qword_10229FDF0, &stru_102153778);
        v19 = *a3;
        v26 = 67240192;
        LODWORD(v27) = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 16, "#Warning Received unhandled location provider notification, %{public}d", &v26, 8);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "void CLOdometerNotifierWatch::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      return;
    }
    v8 = 2;
  }
  else
  {
    if (v7)
    {
      if (v7 == 5)
      {
        if (a1[1147])
        {
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          *(_OWORD *)buf = 0u;
          v29 = 0u;
          *(_DWORD *)buf = 1;
          v26 = 9;
          (*(void (**)(unsigned __int8 *, int *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v26, buf, 0, 0xFFFFFFFFLL, 0);
        }
        return;
      }
      goto LABEL_30;
    }
    v8 = 1;
  }
  v9 = *(int **)(a4 + 800);
  if (v9 && (unint64_t)sub_10104BD1C(v9) >= 2)
  {
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v10 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEBUG))
    {
      v11 = sub_10104BD1C(*(int **)(a4 + 800));
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Location batch notification size %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v22 = qword_10229FDF8;
      v23 = sub_10104BD1C(*(int **)(a4 + 800));
      v26 = 134349056;
      v27 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "Location batch notification size %{public}ld", &v26, 12);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (sub_10104BD1C(*(int **)(a4 + 800)))
    {
      v12 = 0;
      do
      {
        sub_10104B598(*(_QWORD *)(a4 + 800), v12, (uint64_t)&v26);
        sub_10104BAA8(*(_QWORD *)(a4 + 800), v12, (uint64_t)buf);
        sub_1007B27E4((uint64_t)a1, (uint64_t)&v26, (uint64_t)buf);
        v13 = v40;
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        ++v12;
      }
      while (v12 < sub_10104BD1C(*(int **)(a4 + 800)));
    }
  }
  else
  {
    sub_1007B27E4((uint64_t)a1, a4, a4 + 160);
  }
  if (a1[1147])
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    *(_OWORD *)buf = 0u;
    v29 = 0u;
    *(_DWORD *)buf = v8;
    v26 = 9;
    (*(void (**)(unsigned __int8 *, int *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v26, buf, 0, 0xFFFFFFFFLL, 0);
  }
}

void sub_1007B27C4(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_1007B27E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  uint64_t v7;
  CFAbsoluteTime Current;
  uint64_t v9;
  __int128 v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  double v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  __int128 v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _BYTE v67[48];
  _BYTE v68[32];
  __int128 v69;
  uint64_t v70;
  __int128 v71[2];
  uint64_t v72;
  __int128 v73;
  char v74;
  __int128 v75;
  char v76;
  int v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  _BYTE v96[10];
  _BYTE v97[6];
  int v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  uint8_t buf[4];
  _BYTE v126[20];
  uint64_t v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  _BYTE v141[10];
  _BYTE v142[6];
  int v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  uint64_t v169;

  v6 = (__int128 *)(a3 + 360);
  if (sub_100B45B9C())
  {
    v7 = sub_100B45B9C();
    Current = CFAbsoluteTimeGetCurrent();
    v9 = *(_QWORD *)(a3 + 24);
    *(CFAbsoluteTime *)v71 = Current;
    *((_QWORD *)&v71[0] + 1) = v9;
    v71[1] = *(_OWORD *)(a2 + 4);
    v72 = *(_QWORD *)(a2 + 20);
    v10 = *v6;
    v73 = v6[1];
    v74 = 0;
    v75 = v10;
    v76 = 0;
    sub_100B45C60(v7, v71);
  }
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102153758);
  v11 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_DWORD *)(a3 + 352);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)v126 = 0;
    *(_WORD *)&v126[4] = 2082;
    *(_QWORD *)&v126[6] = "";
    *(_WORD *)&v126[14] = 1025;
    *(_DWORD *)&v126[16] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLElevationAWDAggregator\", \"Origin Device\":%{private}d}", buf, 0x18u);
  }
  if (sub_10009ED0C())
  {
    v13 = sub_10009ED0C();
    sub_10134D664(v13, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a3 + 376), *(double *)(a3 + 384));
  }
  if ((*(_DWORD *)(a2 + 96) | 2) != 3)
    goto LABEL_15;
  v14 = *(double *)a3;
  if (!sub_1016E1AB8(*(_DWORD *)(a3 + 616)) || v14 < 0.0)
    goto LABEL_15;
  if (*(_BYTE *)(a1 + 1145))
  {
    v15 = *(double *)(a3 + 8);
    if (v15 < 0.0 || (v16 = *(double *)(a3 + 16), v16 < 0.0))
    {
LABEL_15:
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v17 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a2 + 76);
        v19 = *(_QWORD *)(a2 + 28);
        v21 = *(double *)a3;
        v20 = *(_QWORD *)(a3 + 8);
        v22 = *(_QWORD *)(a2 + 44);
        v23 = *(_QWORD *)(a2 + 52);
        v24 = *(double *)(a3 + 16);
        v25 = *(_QWORD *)(a3 + 24);
        v26 = *(_DWORD *)(a3 + 352);
        v27 = *(_DWORD *)(a2 + 96);
        v28 = *(_DWORD *)(a3 + 616);
        *(_DWORD *)buf = 134286337;
        *(_QWORD *)v126 = v20;
        *(_WORD *)&v126[8] = 2050;
        *(_QWORD *)&v126[10] = v18;
        *(_WORD *)&v126[18] = 2049;
        v127 = v19;
        v128 = 2049;
        v129 = v21;
        v130 = 2050;
        v131 = v24;
        v132 = 2049;
        v133 = v22;
        v134 = 2050;
        v135 = v23;
        v136 = 2050;
        v137 = v25;
        v138 = 2049;
        v139 = v22;
        v140 = 1026;
        *(_DWORD *)v141 = v26;
        *(_WORD *)&v141[4] = 1026;
        *(_DWORD *)&v141[6] = v27;
        *(_WORD *)v142 = 1026;
        *(_DWORD *)&v142[2] = v28;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Drop entry! distance, %{private}.8f, startTime, %{public}.8f, gps altitude, %{private}.8f, odometer, %{private}.8f, accuracy, %{public}.8f, gpsSpeed, %{private}.8f, gpsSpeedAccuracy, %{public}.8f, timestampGps, %{public}.8f, rawSpeed, %{private}.8f, originDevice, %{public}d, locationType, %{public}d, batchedLocationFixType, %{public}d", buf, 0x6Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDF0 != -1)
          dispatch_once(&qword_10229FDF0, &stru_102153778);
        v40 = *(_QWORD *)(a2 + 76);
        v41 = *(_QWORD *)(a2 + 28);
        v43 = *(double *)a3;
        v42 = *(_QWORD *)(a3 + 8);
        v44 = *(_QWORD *)(a2 + 44);
        v45 = *(_QWORD *)(a2 + 52);
        v46 = *(double *)(a3 + 16);
        v47 = *(_QWORD *)(a3 + 24);
        v48 = *(_DWORD *)(a3 + 352);
        v49 = *(_DWORD *)(a2 + 96);
        v50 = *(_DWORD *)(a3 + 616);
        v77 = 134286337;
        v78 = v42;
        v79 = 2050;
        v80 = v40;
        v81 = 2049;
        v82 = v41;
        v83 = 2049;
        v84 = v43;
        v85 = 2050;
        v86 = v46;
        v87 = 2049;
        v88 = v44;
        v89 = 2050;
        v90 = v45;
        v91 = 2050;
        v92 = v47;
        v93 = 2049;
        v94 = v44;
        v95 = 1026;
        *(_DWORD *)v96 = v48;
        *(_WORD *)&v96[4] = 1026;
        *(_DWORD *)&v96[6] = v49;
        *(_WORD *)v97 = 1026;
        *(_DWORD *)&v97[2] = v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Drop entry! distance, %{private}.8f, startTime, %{public}.8f, gps altitude, %{private}.8f, odometer, %{private}.8f, accuracy, %{public}.8f, gpsSpeed, %{private}.8f, gpsSpeedAccuracy, %{public}.8f, timestampGps, %{public}.8f, rawSpeed, %{private}.8f, originDevice, %{public}d, locationType, %{public}d, batchedLocationFixType, %{public}d", &v77, 110);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 1145) = 1;
    v15 = *(double *)(a3 + 8);
    v16 = *(double *)(a3 + 16);
  }
  v69 = 0u;
  *(_OWORD *)&v68[16] = 0u;
  *(_OWORD *)v68 = 0u;
  memset(&v67[16], 0, 32);
  *(_OWORD *)v67 = 0u;
  *(_QWORD *)&v56 = *(_QWORD *)(a2 + 76);
  *((double *)&v56 + 1) = v15;
  v29 = *(_QWORD *)(a2 + 28);
  v57 = v16;
  v58 = v29;
  v59 = *(_QWORD *)(a2 + 44);
  v60 = v59;
  v30 = *(_QWORD *)(a2 + 52);
  v61 = *(double *)a3;
  v62 = v30;
  v31 = *(_QWORD *)(a3 + 344);
  v63 = *(_QWORD *)(a3 + 24);
  v64 = v31;
  v32 = *(_DWORD *)(a3 + 352);
  v65 = 0;
  v66 = v32;
  *(_DWORD *)v67 = *(_DWORD *)(a2 + 96);
  v33 = *(_OWORD *)(a3 + 496);
  v34 = *v6;
  *(_OWORD *)&v67[8] = v6[1];
  *(_OWORD *)&v67[24] = v33;
  v35 = *(_QWORD *)(a2 + 68);
  *(double *)&v67[40] = *(double *)(a2 + 60) * 0.0174532924;
  *(_QWORD *)v68 = v35;
  *(_OWORD *)&v68[8] = v34;
  v36 = *(_DWORD *)(a1 + 1160);
  *(_DWORD *)&v68[24] = *(_DWORD *)(a3 + 616);
  *(_DWORD *)&v68[28] = v36;
  LOBYTE(v69) = *(_BYTE *)(a3 + 288);
  DWORD2(v69) = *(_DWORD *)(a3 + 276);
  v70 = *(_QWORD *)(a3 + 280);
  v37 = CFAbsoluteTimeGetCurrent();
  if (sub_1007B30B4(a1 + 928, (double *)(a1 + 1120), &v56, v37))
  {
    sub_1004FADC8(a1, (uint64_t)&v56);
    v59 = v38;
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v39 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
    {
      v55 = v70;
      *(_DWORD *)buf = 134289665;
      *(_QWORD *)v126 = *((_QWORD *)&v56 + 1);
      *(_WORD *)&v126[8] = 2050;
      *(_QWORD *)&v126[10] = v56;
      *(_WORD *)&v126[18] = 2049;
      v127 = v58;
      v128 = 2049;
      v129 = v61;
      v130 = 2050;
      v131 = v57;
      v132 = 2049;
      v133 = v59;
      v134 = 2050;
      v135 = v62;
      v136 = 2050;
      v137 = v63;
      v138 = 2050;
      v139 = v64;
      v140 = 2049;
      *(_QWORD *)v141 = v60;
      *(_WORD *)&v141[8] = 1026;
      *(_DWORD *)v142 = v66;
      *(_WORD *)&v142[4] = 1026;
      v143 = *(_DWORD *)v67;
      v144 = 2049;
      v145 = *(_QWORD *)&v67[8];
      v146 = 2050;
      v147 = *(_QWORD *)&v67[16];
      v148 = 2049;
      v149 = *(_QWORD *)&v67[24];
      v150 = 2050;
      v151 = *(_QWORD *)&v67[32];
      v152 = 2049;
      v153 = *(_QWORD *)&v67[40];
      v154 = 2050;
      v155 = *(_QWORD *)v68;
      v156 = 2049;
      v157 = *(_QWORD *)&v68[8];
      v158 = 2049;
      v159 = *(_QWORD *)&v68[16];
      v160 = 1024;
      v161 = *(_DWORD *)&v68[24];
      v162 = 1026;
      v163 = *(_DWORD *)&v68[28];
      v164 = 1026;
      v165 = v69;
      v166 = 1025;
      v167 = DWORD2(v69);
      v168 = 2049;
      v169 = v70;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Notifying odometer clients, distance, %{private}.8f, startTime, %{public}.8f, gps altitude, %{private}.8f, odometer, %{private}.8f, accuracy, %{public}.8f, gpsSpeed, %{private}.8f, gpsSpeedAccuracy, %{public}.8f, timestampGps, %{public}.8f, machContinuousTime, %{public}.8f, rawSpeed, %{private}.8f, originDevice, %{public}d, locationType, %{public}d, groundAltitude, %{private}.8f, groundAltitudeUncertainty, %{public}.8f, smoothedGPSAltitude, %{private}.8f, smoothedGPSAltitudeUncertainty, %{public}.8f, gpsCourseRadians, %{private}.8f, gpsCourseAccuracy, %{public}.8f, slope, %{private}.4f, maxAbsSlope, %{private}.4f, batchedLocationFixType, %d, signalEnv, %{public}d, trackRunOdometerHasBeenCorrected, %{public}d, trackProximity, %{private}d, distanceToTrackMeters, %{private}.1f", buf, 0xE4u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v77 = 134289665;
      v78 = *((_QWORD *)&v56 + 1);
      v79 = 2050;
      v80 = v56;
      v81 = 2049;
      v82 = v58;
      v83 = 2049;
      v84 = v61;
      v85 = 2050;
      v86 = v57;
      v87 = 2049;
      v88 = v59;
      v89 = 2050;
      v90 = v62;
      v91 = 2050;
      v92 = v63;
      v93 = 2050;
      v94 = v64;
      v95 = 2049;
      *(_QWORD *)v96 = v60;
      *(_WORD *)&v96[8] = 1026;
      *(_DWORD *)v97 = v66;
      *(_WORD *)&v97[4] = 1026;
      v98 = *(_DWORD *)v67;
      v99 = 2049;
      v100 = *(_QWORD *)&v67[8];
      v101 = 2050;
      v102 = *(_QWORD *)&v67[16];
      v103 = 2049;
      v104 = *(_QWORD *)&v67[24];
      v105 = 2050;
      v106 = *(_QWORD *)&v67[32];
      v107 = 2049;
      v108 = *(_QWORD *)&v67[40];
      v109 = 2050;
      v110 = *(_QWORD *)v68;
      v111 = 2049;
      v112 = *(_QWORD *)&v68[8];
      v113 = 2049;
      v114 = *(_QWORD *)&v68[16];
      v115 = 1024;
      v116 = *(_DWORD *)&v68[24];
      v117 = 1026;
      v118 = *(_DWORD *)&v68[28];
      v119 = 1026;
      v120 = v69;
      v121 = 1025;
      v122 = DWORD2(v69);
      v123 = 2049;
      v124 = v70;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Notifying odometer clients, distance, %{private}.8f, startTime, %{public}.8f, gps altitude, %{private}.8f, odometer, %{private}.8f, accuracy, %{public}.8f, gpsSpeed, %{private}.8f, gpsSpeedAccuracy, %{public}.8f, timestampGps, %{public}.8f, machContinuousTime, %{public}.8f, rawSpeed, %{private}.8f, originDevice, %{public}d, locationType, %{public}d, groundAltitude, %{private}.8f, groundAltitudeUncertainty, %{public}.8f, smoothedGPSAltitude, %{private}.8f, smoothedGPSAltitudeUncertainty, %{public}.8f, gpsCourseRadians, %{private}.8f, gpsCourseAccuracy, %{public}.8f, slope, %{private}.4f, maxAbsSlope, %{private}.4f, batchedLocationFixType, %d, signalEnv, %{public}d, trackRunOdometerHasBeenCorrected, %{public}d, trackProximity, %{private}d, distanceToTrackMeters, %{private}.1f", &v77, 228, v55);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    sub_10121567C(a1 + 1368, (uint64_t)&v56);
    *(_DWORD *)buf = 4;
    (*(void (**)(uint64_t, uint8_t *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v56, 0, 0xFFFFFFFFLL, 0);
    sub_100DE421C(a1 + 3800, &v56);
  }
}

BOOL sub_1007B30B4(uint64_t a1, double *a2, __int128 *a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  const char *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint8_t *v67;
  uint64_t v68;
  _BYTE v69[24];
  _BYTE v70[40];
  uint8_t buf[4];
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  _BYTE v76[10];
  double v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v8 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_INFO))
  {
    v9 = *((_QWORD *)a3 + 6);
    *(_DWORD *)buf = 134283521;
    v72 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Incoming odometer, %{private}.8f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v60 = *((_QWORD *)a3 + 6);
    *(_DWORD *)v69 = 134283521;
    *(_QWORD *)&v69[4] = v60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 1, "Incoming odometer, %{private}.8f", v69, 12);
    v62 = (uint8_t *)v61;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)", "%s\n", v61);
    if (v62 != buf)
      free(v62);
  }
  v10 = *(double *)(a1 + 64);
  if (v10 <= 0.0 || (v11 = *((double *)a3 + 8), v11 <= 0.0))
    v12 = *(double *)a3 - *(double *)a1;
  else
    v12 = v11 - v10;
  if (v12 > 0.0 && *(double *)a3 + 15.0 >= a4)
  {
    if (*((_DWORD *)a3 + 21) == *(_DWORD *)(a1 + 84) && *((_DWORD *)a3 + 22) == *(_DWORD *)(a1 + 88))
    {
      v29 = *((double *)a3 + 6);
      v30 = *(double *)(a1 + 48);
      if (v29 >= v30)
      {
        v38 = v29 - v30;
LABEL_38:
        v51 = *a3;
        v52 = a3[1];
        v53 = a3[3];
        *(_OWORD *)(a1 + 32) = a3[2];
        *(_OWORD *)(a1 + 48) = v53;
        *(_OWORD *)a1 = v51;
        *(_OWORD *)(a1 + 16) = v52;
        v54 = a3[4];
        v55 = a3[5];
        v56 = a3[7];
        *(_OWORD *)(a1 + 96) = a3[6];
        *(_OWORD *)(a1 + 112) = v56;
        *(_OWORD *)(a1 + 64) = v54;
        *(_OWORD *)(a1 + 80) = v55;
        v57 = a3[8];
        v58 = a3[9];
        v59 = a3[11];
        *(_OWORD *)(a1 + 160) = a3[10];
        *(_OWORD *)(a1 + 176) = v59;
        *(_OWORD *)(a1 + 128) = v57;
        *(_OWORD *)(a1 + 144) = v58;
        *a2 = v38 + *a2;
        *((double *)a3 + 1) = v38;
        *((double *)a3 + 6) = *a2;
        return 1;
      }
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v31 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_QWORD *)(a1 + 64);
        v33 = *((_QWORD *)a3 + 8);
        v34 = *(double *)a1;
        v35 = *(double *)a3;
        v36 = *(_QWORD *)(a1 + 48);
        v37 = *((_QWORD *)a3 + 6);
        *(_DWORD *)buf = 134350337;
        v72 = v32;
        v73 = 2050;
        v74 = v33;
        v75 = 2050;
        *(double *)v76 = v34;
        *(_WORD *)&v76[8] = 2050;
        v77 = v35;
        v78 = 2049;
        v79 = v36;
        v80 = 2049;
        v81 = v37;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Source may have reset. Gps,%{public}.2lf,%{public}.2lf,startTime,%{public}.2lf,%{public}.2lf,odometer,%{private}.2lf,%{private}.2lf", buf, 0x3Eu);
      }
      v38 = 0.0;
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_38;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v39 = *(_QWORD *)(a1 + 64);
      v40 = *((_QWORD *)a3 + 8);
      v41 = *(double *)a1;
      v42 = *(double *)a3;
      v43 = *(_QWORD *)(a1 + 48);
      v44 = *((_QWORD *)a3 + 6);
      *(_DWORD *)v69 = 134350337;
      *(_QWORD *)&v69[4] = v39;
      *(_WORD *)&v69[12] = 2050;
      *(_QWORD *)&v69[14] = v40;
      *(_WORD *)&v69[22] = 2050;
      *(_WORD *)&v70[8] = 2050;
      *(double *)&v70[10] = v42;
      *(_WORD *)&v70[18] = 2049;
      *(_QWORD *)&v70[20] = v43;
      *(_WORD *)&v70[28] = 2049;
      *(_QWORD *)&v70[30] = v44;
      LODWORD(v68) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Source may have reset. Gps,%{public}.2lf,%{public}.2lf,startTime,%{public}.2lf,%{public}.2lf,odometer,%{private}.2lf,%{private}.2lf", v69, v68, *(_OWORD *)v69, *(_QWORD *)&v69[16], *(_QWORD *)&v41, *(_OWORD *)&v70[8], *(_OWORD *)&v70[24]);
    }
    else
    {
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v46 = qword_10229FDF8;
      if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
      {
        v47 = *(_QWORD *)(a1 + 48);
        v48 = *((_QWORD *)a3 + 6);
        v49 = *(_DWORD *)(a1 + 88);
        v50 = *((_DWORD *)a3 + 22);
        *(_DWORD *)buf = 134284289;
        v72 = v47;
        v73 = 2049;
        v74 = v48;
        v75 = 1026;
        *(_DWORD *)v76 = v49;
        *(_WORD *)&v76[4] = 1026;
        *(_DWORD *)&v76[6] = v50;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Odometer source change,previous,%{private}lf,current,%{private}lf,previousType,%{public}d,type,%{public}d", buf, 0x22u);
      }
      v38 = 0.0;
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_38;
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v63 = *(_QWORD *)(a1 + 48);
      v64 = *((_QWORD *)a3 + 6);
      v65 = *(_DWORD *)(a1 + 88);
      v66 = *((_DWORD *)a3 + 22);
      *(_DWORD *)v69 = 134284289;
      *(_QWORD *)&v69[4] = v63;
      *(_WORD *)&v69[12] = 2049;
      *(_QWORD *)&v69[14] = v64;
      *(_WORD *)&v69[22] = 1026;
      *(_DWORD *)v70 = v65;
      *(_WORD *)&v70[4] = 1026;
      *(_DWORD *)&v70[6] = v66;
      LODWORD(v68) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Odometer source change,previous,%{private}lf,current,%{private}lf,previousType,%{public}d,type,%{public}d", v69, v68, *(_OWORD *)v69, *(_QWORD *)&v69[16], *(_QWORD *)v70, *(_OWORD *)&v70[8], *(_OWORD *)&v70[24]);
    }
    v67 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)", "%s\n", v45);
    if (v67 != buf)
      free(v67);
    goto LABEL_38;
  }
  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v13 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 64);
    v15 = *((_QWORD *)a3 + 8);
    v16 = *(double *)a1;
    v17 = *(double *)a3;
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *((_QWORD *)a3 + 6);
    *(_DWORD *)buf = 134350337;
    v72 = v14;
    v73 = 2050;
    v74 = v15;
    v75 = 2050;
    *(double *)v76 = v16;
    *(_WORD *)&v76[8] = 2050;
    v77 = v17;
    v78 = 2049;
    v79 = v18;
    v80 = 2049;
    v81 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Current odometer sample fails time check. Gps,%{public}.2lf,%{public}.2lf,startTime,%{public}.2lf,%{public}.2lf,odometer,%{private}.2lf,%{private}.2lf", buf, 0x3Eu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v21 = *(_QWORD *)(a1 + 64);
    v22 = *((_QWORD *)a3 + 8);
    v23 = *(double *)a1;
    v24 = *(double *)a3;
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *((_QWORD *)a3 + 6);
    *(_DWORD *)v69 = 134350337;
    *(_QWORD *)&v69[4] = v21;
    *(_WORD *)&v69[12] = 2050;
    *(_QWORD *)&v69[14] = v22;
    *(_WORD *)&v69[22] = 2050;
    *(double *)v70 = v23;
    *(_WORD *)&v70[8] = 2050;
    *(double *)&v70[10] = v24;
    *(_WORD *)&v70[18] = 2049;
    *(_QWORD *)&v70[20] = v25;
    *(_WORD *)&v70[28] = 2049;
    *(_QWORD *)&v70[30] = v26;
    LODWORD(v68) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "#Warning Current odometer sample fails time check. Gps,%{public}.2lf,%{public}.2lf,startTime,%{public}.2lf,%{public}.2lf,odometer,%{private}.2lf,%{private}.2lf", v69, v68);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
    return 0;
  }
  return result;
}

void sub_1007B383C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t v5;

  if (!*a3)
  {
    *(_DWORD *)(a1 + 1160) = *a4;
    if (sub_100B45B9C())
    {
      v5 = sub_100B45B9C();
      sub_100B45BE0(v5, *a4);
    }
  }
}

uint64_t sub_1007B3884(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;

  if (*a3 == 2)
  {
    v5 = result;
    v6 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)(v6 - 13) >= 2)
    {
      if (v6 == 15)
      {
        v7 = 0;
        *(_BYTE *)(result + 1144) = 0;
      }
      else
      {
        v7 = *(_BYTE *)(result + 1144) != 0;
      }
    }
    else
    {
      v7 = *(_QWORD *)(a4 + 224) == 1;
      *(_BYTE *)(result + 1144) = v7;
    }
    sub_101215684(result + 1368, v7);
    sub_100DE4270(v5 + 3800, a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 232))(v5);
  }
  return result;
}

uint64_t sub_1007B3920(_BYTE *a1, char a2)
{
  a1[1131] = a2;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 232))(a1);
}

uint64_t sub_1007B3930(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 211) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 920) + 232))(a1 - 920);
}

void sub_1007B3948(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *__p;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[128];

  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_1007B4CDC(&v15, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(void **)(a1 + 3880);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v18, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v9 = 0;
        v10 = 0;
        __p = 0;
        sub_1007B4CDC(&__p, v15, (uint64_t)v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - (_BYTE *)v15) >> 6));
        objc_msgSend(v7, "onCyclingDistanceUpdate:", sub_1007B3AFC((uint64_t)&__p));
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v18, 16);
    }
    while (v4);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_1007B3AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007B3AFC(uint64_t a1)
{
  id v1;
  _QWORD v3[4];
  void *__p;
  void *v5;
  uint64_t v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1007B4D54;
  v3[3] = &unk_102153A30;
  v5 = 0;
  v6 = 0;
  __p = 0;
  sub_1007B4CDC(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6));
  v1 = objc_msgSend(v3, "copy");
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1007B3B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007B3BB8(uint64_t a1, uint64_t a2)
{
  sub_1007B3948(a1 - 920, a2);
}

id sub_1007B3BC0(uint64_t a1, float *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  const HKQuantityTypeIdentifier *v8;
  HKQuantitySample *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  HKQuantitySample *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;

  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102153778);
  v4 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v7 = a2[8];
    *(_DWORD *)buf = 134349568;
    v25 = v5;
    v26 = 2050;
    v27 = v6;
    v28 = 2050;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received flight segment,start,%{public}f,end,%{public}f,rate,%{public}f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v12 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    v14 = a2[8];
    v18 = 134349568;
    v19 = v12;
    v20 = 2050;
    v21 = v13;
    v22 = 2050;
    v23 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Received flight segment,start,%{public}f,end,%{public}f,rate,%{public}f", &v18, 32);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onFlightSegment(const CLElevationFlightSegment *)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v8 = &HKQuantityTypeIdentifierStairDescentSpeed;
  if (a2[8] > 0.0)
    v8 = &HKQuantityTypeIdentifierStairAscentSpeed;
  v9 = +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:metadata:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:metadata:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", *v8), +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("m/s")), fabsf(a2[8])), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *((double *)a2 + 1)), 0);
  v10 = *(void **)(a1 + 3992);
  v17 = v9;
  return objc_msgSend(v10, "saveObjects:withCompletion:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1), &stru_1021536B0);
}

void sub_1007B3E8C(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102153798);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AscentDescentRate successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102153798);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "AscentDescentRate successfully pushed to HKHealthStore", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onFlightSegment(const CLElevationFlightSegment *)_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102153798);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKHealthStore, AscentDescentRate, saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102153798);
      v11 = 138543362;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "HKHealthStore, AscentDescentRate, saveObjects failed on, %{public}@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "void CLOdometerNotifierWatch::onFlightSegment(const CLElevationFlightSegment *)_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_1007B414C(unsigned __int8 *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _OWORD v14[2];
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (*a3 == 41)
  {
    v5 = *(_OWORD *)(a4 + 1464);
    v16 = *(_OWORD *)(a4 + 1448);
    v17 = v5;
    v6 = a1[1146];
    v15[0] = v16;
    v15[1] = v5;
    v7 = sub_1016E1AD0(v6, (uint64_t)v15);
    v14[0] = v16;
    v14[1] = v17;
    v8 = sub_1016E1AF4((uint64_t)v14);
    v9 = sub_1016E1B00(v7, v8);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102153778);
    v10 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v8;
      *(_WORD *)&buf[14] = 1026;
      LODWORD(v24) = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received operation status, isRhythmicActive, %{public}d, is1HzGnssActive, %{public}d, inRhythmicMode, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102153778);
      v18[0] = 67240704;
      v18[1] = v7;
      v19 = 1026;
      v20 = v8;
      v21 = 1026;
      v22 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Received operation status, isRhythmicActive, %{public}d, is1HzGnssActive, %{public}d, inRhythmicMode, %{public}d", v18, 20);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v11 = a1[1147];
    a1[1147] = v9;
    if (!v11)
    {
      if (v9)
      {
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        *(_OWORD *)buf = 0u;
        v24 = 0u;
        *(_DWORD *)buf = 3;
        v18[0] = 9;
        (*(void (**)(unsigned __int8 *, _DWORD *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v18, buf, 0, 0xFFFFFFFFLL, 0);
      }
    }
    a1[1146] = v7;
  }
}

void sub_1007B43D8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1007B4404(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1007B4430(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F5B3F4();
    operator delete();
  }
  return result;
}

void sub_1007B446C(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1007B4498(id a1)
{
  qword_10229FDF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_1007B44C4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1007B44F4()
{
  operator delete();
}

_QWORD *sub_1007B4508()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021537C8;
  return result;
}

void sub_1007B452C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021537C8;
}

double sub_1007B4544(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;

  v2 = *a2;
  result = **a2;
  v4 = 0.0;
  while (v2 != a2[1])
  {
    v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_1007B4570(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1007B45AC()
{
}

void sub_1007B45BC()
{
  operator delete();
}

_QWORD *sub_1007B45D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102153848;
  return result;
}

void sub_1007B45F4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102153848;
}

double sub_1007B460C(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;
  double *v5;

  v2 = a2[1];
  result = **a2;
  v4 = 0.0;
  if (*a2 != v2)
  {
    v5 = *a2;
    do
    {
      v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_1007B465C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1007B4698()
{
}

void sub_1007B46A8()
{
  operator delete();
}

_QWORD *sub_1007B46BC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021538C8;
  return result;
}

void sub_1007B46E0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021538C8;
}

BOOL sub_1007B46F8(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_1007B4708(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1007B4744()
{
}

void sub_1007B4754()
{
  operator delete();
}

_QWORD *sub_1007B4768()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102153948;
  return result;
}

void sub_1007B478C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102153948;
}

BOOL sub_1007B47A4(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_1007B47BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1007B47F8()
{
}

_QWORD *sub_1007B4804(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021539C8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1007B4938;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007B494C;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1007B4910(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007B4938(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1007B494C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1007B4968(uint64_t a1)
{
  sub_1007B4C40(a1);
  operator delete();
}

id sub_1007B498C(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD __dst[3];
  uint64_t v25;
  int v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  int v41;

  if (a4 >= 0x38)
    v8 = 56;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x39)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102153718);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v35 = 0x8000000101BC1C23 & 0x7FFFFFFFFFFFFFFFLL;
      v36 = 2048;
      v37 = 56;
      v38 = 2048;
      v39 = a4;
      v40 = 1024;
      v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102153718);
      v26 = 136315906;
      v27 = 0x8000000101BC1C23 & 0x7FFFFFFFFFFFFFFFLL;
      v28 = 2048;
      v29 = 56;
      v30 = 2048;
      v31 = a4;
      v32 = 1024;
      v33 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v26, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLElevationFlightSegment>::dispatchData(int, const void *, size_t) [T = CLElevationFlightSegment]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1007B4C98;
  v18[3] = &unk_102153A10;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst[0];
  v20 = __dst[1];
  v21 = __dst[2];
  v22 = v25;
  v23 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_1007B4C40(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021539C8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1007B4C98(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 104));
  return result;
}

_QWORD *sub_1007B4CDC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1003A0D00(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1007B4D38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1007B4D54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1007B4CDC(a2, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 6));
}

_QWORD *sub_1007B4D7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return sub_1007B4CDC(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 6));
}

void sub_1007B4DA4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_1007B4DBC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BC1840;
      v1[3] = unk_101BC1850;
      v1[4] = xmmword_101BC1860;
      v1[0] = xmmword_101BC1820;
      v1[1] = unk_101BC1830;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1007B4E90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007B4EA8()
{
  qword_102304948 = (uint64_t)off_1021537C8;
  qword_102304960 = (uint64_t)&qword_102304948;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_102304948, (void *)&_mh_execute_header);
  qword_102304968 = (uint64_t)off_102153848;
  qword_102304980 = (uint64_t)&qword_102304968;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_102304968, (void *)&_mh_execute_header);
  qword_102304988 = (uint64_t)off_1021538C8;
  qword_1023049A0 = (uint64_t)&qword_102304988;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_102304988, (void *)&_mh_execute_header);
  qword_1023049A8 = (uint64_t)off_102153948;
  qword_1023049C0 = (uint64_t)&qword_1023049A8;
  return __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_1023049A8, (void *)&_mh_execute_header);
}

uint64_t sub_1007B4F64(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1011BA46C(a1 + 16);
  *(_DWORD *)(a1 + 61680) = 16;
  return a1;
}

uint64_t sub_1007B4F9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int *v6;
  int v7;
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  NSObject *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  const char *v55;
  char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  char *v60;
  double v61;
  _BYTE v62[136];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  unsigned int v77;
  _BYTE buf[52];
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  uint64_t v94;

  v5 = sub_1007B59C8((int *)a1, a2);
  if (!(_DWORD)v5)
    return v5;
  v6 = (int *)(a1 + 61680);
  v7 = *(_DWORD *)(a1 + 61680);
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)v62 = off_102138928;
    v8 = sub_10042316C();
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102153A60);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CNNWorkoutClass,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102153A60);
      v76 = 67109120;
      v77 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CNNWorkoutClass,%d", &v76);
      v56 = (char *)v55;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    v7 = *v6;
  }
  if ((v7 & 0x10) != 0)
  {
    *(_QWORD *)v62 = off_102166CB8;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    memset(&v62[8], 0, 128);
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v75 = 0;
    v10 = sub_100A94DC8((uint64_t)v62, a1 + 16);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102153A60);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GBTWorkoutClass,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102153A60);
      v76 = 67109120;
      v77 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "GBTWorkoutClass,%d", &v76);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    if ((*v6 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_18;
  }
  v10 = 5;
  if ((v7 & 0x100) != 0)
  {
LABEL_18:
    sub_1013124F4((uint64_t)v62);
    v12 = sub_10131252C((uint64_t)v62, (uint64_t *)(a1 + 16));
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102153A60);
    v13 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "LRWorkoutClass,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102153A60);
      v76 = 67109120;
      v77 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "LRWorkoutClass,%d", &v76);
      v60 = (char *)v59;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
  }
LABEL_23:
  if (v10 == 1)
  {
    if (*(float *)(a1 + 64) >= -48.0
      && *(float *)(a1 + 276) <= 30.0
      && *(float *)(a1 + 260) <= 0.5
      && *(float *)(a1 + 124) <= 10.0)
    {
      v10 = 1;
    }
    else
    {
      v10 = 5;
    }
  }
  else if (!v10)
  {
    if ((sub_1001B7910() & 0x40000000) != 0)
      v10 = 0;
    else
      v10 = 5;
  }
  a3[1] = sub_10042314C(v10);
  *a3 = *(_QWORD *)(a1 + 8);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102153A60);
  v14 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v15 = sub_10042314C(v10);
    v17 = *a3;
    v16 = a3[1];
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v15;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v16;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Tier2WorkoutClass,%d,CMWorkoutType,%ld,SmoothedCMWorkoutType,%ld,startTime,%f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102153A60);
    v34 = qword_10229FE68;
    v35 = sub_10042314C(v10);
    v37 = *a3;
    v36 = a3[1];
    *(_WORD *)&v62[8] = 2048;
    *(_QWORD *)&v62[10] = v35;
    *(_WORD *)&v62[18] = 2048;
    *(_QWORD *)&v62[20] = v36;
    *(_WORD *)&v62[28] = 2048;
    *(_QWORD *)&v62[30] = v37;
    LODWORD(v61) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "Tier2WorkoutClass,%d,CMWorkoutType,%ld,SmoothedCMWorkoutType,%ld,startTime,%f", v62, *(_QWORD *)&v61, __PAIR64__(v10, 67109888), *(double *)&v62[8]);
    v39 = (char *)v38;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  sub_10132E328(a1 + 16, (uint64_t)buf);
  v18 = *(_OWORD *)&buf[16];
  *((_OWORD *)a3 + 1) = *(_OWORD *)buf;
  *((_OWORD *)a3 + 2) = v18;
  *((_OWORD *)a3 + 3) = *(_OWORD *)&buf[32];
  *((_DWORD *)a3 + 16) = *(_DWORD *)(a1 + 696);
  *((_DWORD *)a3 + 17) = *(_DWORD *)(a1 + 700);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102153A60);
  v19 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *((float *)a3 + 7);
    v21 = *((float *)a3 + 8);
    v22 = *((float *)a3 + 9);
    v23 = *((float *)a3 + 10);
    v24 = *((float *)a3 + 11);
    v25 = *((float *)a3 + 12);
    v26 = *((float *)a3 + 13);
    v27 = *((float *)a3 + 14);
    v28 = a3[2];
    v29 = *((float *)a3 + 6);
    v30 = *((float *)a3 + 16);
    v31 = *((float *)a3 + 17);
    v32 = *a3;
    *(_DWORD *)buf = 134221056;
    *(double *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v21;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v22;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = v23;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v24;
    v79 = 2048;
    v80 = v25;
    v81 = 2048;
    v82 = v26;
    v83 = 2048;
    v84 = v27;
    v85 = 2048;
    v86 = v28;
    v87 = 2048;
    v88 = v29;
    v89 = 2048;
    v90 = v30;
    v91 = 2048;
    v92 = v31;
    v93 = 2048;
    v94 = v32;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "XGBoostWorkoutPrediction,otherProb,%f,indoorCyclingProb,%f,outdoorCyclingProb,%f,swimmingProb,%f,runningProb,%f,walkingProb,%f,rowingProb,%f,ellipticalProb,%f,type,%ld,conf,%f,yawRange,%f,yawRangeStd,%f,startTime,%f", buf, 0x84u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102153A60);
    v40 = *((float *)a3 + 7);
    v41 = *((float *)a3 + 8);
    v42 = *((float *)a3 + 9);
    v43 = *((float *)a3 + 10);
    v44 = *((float *)a3 + 11);
    v45 = *((float *)a3 + 12);
    v46 = *((float *)a3 + 13);
    v47 = *((float *)a3 + 14);
    v48 = a3[2];
    v49 = *((float *)a3 + 6);
    v50 = *((float *)a3 + 16);
    v51 = *((float *)a3 + 17);
    v52 = *a3;
    *(_DWORD *)v62 = 134221056;
    *(double *)&v62[4] = v40;
    *(_WORD *)&v62[12] = 2048;
    *(double *)&v62[14] = v41;
    *(_WORD *)&v62[22] = 2048;
    *(double *)&v62[24] = v42;
    *(_WORD *)&v62[32] = 2048;
    *(double *)&v62[34] = v43;
    *(_WORD *)&v62[42] = 2048;
    *(double *)&v62[44] = v44;
    *(_WORD *)&v62[52] = 2048;
    *(double *)&v62[54] = v45;
    *(_WORD *)&v62[62] = 2048;
    *(double *)&v62[64] = v46;
    *(_WORD *)&v62[72] = 2048;
    *(double *)&v62[74] = v47;
    *(_WORD *)&v62[82] = 2048;
    *(_QWORD *)&v62[84] = v48;
    *(_WORD *)&v62[92] = 2048;
    *(double *)&v62[94] = v49;
    *(_WORD *)&v62[102] = 2048;
    *(double *)&v62[104] = v50;
    *(_WORD *)&v62[112] = 2048;
    *(double *)&v62[114] = v51;
    *(_WORD *)&v62[122] = 2048;
    *(_QWORD *)&v62[124] = v52;
    LODWORD(v61) = 132;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "XGBoostWorkoutPrediction,otherProb,%f,indoorCyclingProb,%f,outdoorCyclingProb,%f,swimmingProb,%f,runningProb,%f,walkingProb,%f,rowingProb,%f,ellipticalProb,%f,type,%ld,conf,%f,yawRange,%f,yawRangeStd,%f,startTime,%f", COERCE_DOUBLE(v62), v61);
    v54 = (char *)v53;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return v5;
}

uint64_t sub_1007B59C8(int *a1, uint64_t a2)
{
  __int32 v4;
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  int v12;
  float v13;
  float v14;
  float v16[3];
  float v17[3];
  float v18[9];
  float v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  float32x2_t v24;
  int v25;
  float32x2_t v26;
  int v27;

  if (*((double *)a1 + 1) == 0.0)
    *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 48);
  v26.i32[0] = sub_10012C7A4((float *)a2);
  v26.i32[1] = v4;
  v27 = v5;
  v24 = *(float32x2_t *)(a2 + 16);
  v25 = *(_DWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 28);
  v23 = *(float *)(a2 + 36);
  v20 = 1065353216;
  v21 = 0;
  sub_100B61F90((float *)a2, v18);
  v19[0] = sub_1005335A4((uint64_t)v18, (float *)&v24);
  v19[1] = v6;
  v19[2] = v7;
  sub_100B61F90((float *)a2, v18);
  v17[0] = sub_1005335A4((uint64_t)v18, (float *)&v22);
  v17[1] = v8;
  v17[2] = v9;
  v10 = a1[1];
  if (!v10)
  {
    sub_10012C7A4((float *)a2);
    v26.f32[1] = -v11;
    v24.f32[1] = -v24.f32[1];
    *(float *)&v22 = -*(float *)&v22;
    v10 = a1[1];
  }
  v12 = *a1;
  if (*a1 == v10)
  {
    v26.f32[0] = -sub_10012C7A4((float *)a2);
    v24.f32[0] = -v24.f32[0];
    *((float *)&v22 + 1) = -*((float *)&v22 + 1);
    LODWORD(v20) = -1082130432;
    v12 = *a1;
  }
  if (v12 == 1)
    v23 = -v23;
  sub_100B61F90((float *)a2, v18);
  v16[0] = sub_1005335A4((uint64_t)v18, (float *)&v20);
  v16[1] = v13;
  v16[2] = v14;
  return sub_1011BA61C((uint64_t)(a1 + 4), &v24, (float *)&v22, &v26, v19, v17, v16);
}

void sub_1007B5B4C(int *a1, _QWORD *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  *(_QWORD *)a1 = *a2;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102153A60);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    v5 = a1[1];
    *(_DWORD *)buf = 67109376;
    v14 = v4;
    v15 = 1024;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DeviceOrientation,%d,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102153A60);
    v6 = *a1;
    v7 = a1[1];
    v10[0] = 67109376;
    v10[1] = v6;
    v11 = 1024;
    v12 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "DeviceOrientation,%d,%d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Classifier::setDeviceOrientation(const CLGizmoOrientation &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_1007B5D1C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1007B5D48(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  int v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  double v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  int v77;
  uint8_t buf[4];
  const char *v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  int v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  double v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  int v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  int v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  int v121;
  __int16 v122;
  const char *v123;
  __int16 v124;
  int v125;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102153A80);
  v2 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *a1;
    v4 = a1[1];
    v5 = *((_DWORD *)a1 + 4);
    v6 = *((_DWORD *)a1 + 5);
    v7 = *((_DWORD *)a1 + 6);
    v8 = *((float *)a1 + 7);
    v10 = *((_DWORD *)a1 + 8);
    v9 = *((_DWORD *)a1 + 9);
    v11 = *((_DWORD *)a1 + 10);
    v12 = *((_DWORD *)a1 + 11);
    v14 = *((_DWORD *)a1 + 12);
    v13 = *((_DWORD *)a1 + 13);
    *(_DWORD *)buf = 136321026;
    v79 = "startTime";
    v80 = 2048;
    v81 = v3;
    v82 = 2080;
    v83 = "endTime";
    v84 = 2048;
    v85 = v4;
    v86 = 2080;
    v87 = "avgInterCalibrationTime";
    v88 = 1024;
    v89 = v5;
    v90 = 2080;
    v91 = "pctTurnsRejected";
    v92 = 1024;
    v93 = v6;
    v94 = 2080;
    v95 = "poolLength";
    v96 = 1024;
    v97 = v7;
    v98 = 2080;
    v99 = "avgLapCorrection";
    v100 = 2048;
    v101 = v8;
    v102 = 2080;
    v103 = "numLaps";
    v104 = 1024;
    v105 = v10;
    v106 = 2080;
    v107 = "numLapInsertions";
    v108 = 1024;
    v109 = v9;
    v110 = 2080;
    v111 = "numLapsForConvergence";
    v112 = 1024;
    v113 = v11;
    v114 = 2080;
    v115 = "pctStrokesFailCurvature";
    v116 = 1024;
    v117 = v12;
    v118 = 2080;
    v119 = "pctStrokesFailMA";
    v120 = 1024;
    v121 = v14;
    v122 = 2080;
    v123 = "pctStrokesFailAccel";
    v124 = 1024;
    v125 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u", buf, 0xCEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102153A80);
    v15 = *a1;
    v16 = a1[1];
    v17 = *((_DWORD *)a1 + 4);
    v18 = *((_DWORD *)a1 + 5);
    v19 = *((_DWORD *)a1 + 6);
    v20 = *((float *)a1 + 7);
    v21 = *((_DWORD *)a1 + 8);
    v22 = *((_DWORD *)a1 + 9);
    v23 = *((_DWORD *)a1 + 10);
    v24 = *((_DWORD *)a1 + 11);
    v26 = *((_DWORD *)a1 + 12);
    v25 = *((_DWORD *)a1 + 13);
    v30 = 136321026;
    v31 = "startTime";
    v32 = 2048;
    v33 = v15;
    v34 = 2080;
    v35 = "endTime";
    v36 = 2048;
    v37 = v16;
    v38 = 2080;
    v39 = "avgInterCalibrationTime";
    v40 = 1024;
    v41 = v17;
    v42 = 2080;
    v43 = "pctTurnsRejected";
    v44 = 1024;
    v45 = v18;
    v46 = 2080;
    v47 = "poolLength";
    v48 = 1024;
    v49 = v19;
    v50 = 2080;
    v51 = "avgLapCorrection";
    v52 = 2048;
    v53 = v20;
    v54 = 2080;
    v55 = "numLaps";
    v56 = 1024;
    v57 = v21;
    v58 = 2080;
    v59 = "numLapInsertions";
    v60 = 1024;
    v61 = v22;
    v62 = 2080;
    v63 = "numLapsForConvergence";
    v64 = 1024;
    v65 = v23;
    v66 = 2080;
    v67 = "pctStrokesFailCurvature";
    v68 = 1024;
    v69 = v24;
    v70 = 2080;
    v71 = "pctStrokesFailMA";
    v72 = 1024;
    v73 = v26;
    v74 = 2080;
    v75 = "pctStrokesFailAccel";
    v76 = 1024;
    v77 = v25;
    LODWORD(v29) = 206;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 0, "SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u", (const char *)&v30, v29);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "static void CLMetricCollectorBase::logStats(const CLSwimSessionStats &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
}

void sub_1007B6180(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_1007B61B0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

CLClientManagerAuthorizationContext *sub_1007B61E0(uint64_t a1)
{
  CLClientManagerAuthorizationContext *result;
  uint64_t v3;
  uint64_t v4;

  LOBYTE(v3) = 0;
  qword_102304A10 = -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]([CLClientManagerAuthorizationContext alloc], "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:", 0, 5, 5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, v3);
  LOBYTE(v4) = 0;
  result = -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]([CLClientManagerAuthorizationContext alloc], "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:", 0, 4, 4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, v4);
  qword_102304A18 = (uint64_t)result;
  return result;
}

uint64_t sub_1007B6260(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != -48; i -= 24)
  {
    if (*(char *)(a1 + i + 47) < 0)
      operator delete(*(void **)(a1 + i + 24));
  }
  return a1;
}

uint64_t sub_1007B6B50(uint64_t a1)
{
  *(_QWORD *)a1 = off_102153AB0;
  sub_1007F5F24(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1007B6B84(uint64_t a1)
{
  *(_QWORD *)a1 = off_102153AB0;
  sub_1007F5F24(a1 + 16, *(_QWORD **)(a1 + 24));
  operator delete();
}

id sub_1007B6BC8(uint64_t a1, void *a2, NSMutableDictionary *a3)
{
  id v4;
  unsigned int v6;
  _BOOL8 v7;
  uint64_t v8;

  v4 = a2;
  v6 = objc_msgSend(a2, "isValidCKP");
  if (a3 && v6)
  {
    v4 = sub_100196E90(a1, (uint64_t)v4);
    v7 = sub_1001A0520(a1, (uint64_t)v4);
    v8 = sub_1001985D8(*(_QWORD *)(a1 + 376), v4);
    a3 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a3);
    -[NSMutableDictionary setObject:forKeyedSubscript:](a3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7), CFSTR("BigSwitchState"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](a3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8), CFSTR("InUseLevel"));
  }
  return objc_msgSend(*(id *)(a1 + 1072), "setPersistentStoreDictionary:forClient:", a3, objc_msgSend(v4, "legacyClientKey"));
}

id sub_1007B6CB0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
}

void sub_1007B6CBC(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  void **v7;
  id v8;
  __int128 *p_p;
  NSString *v10;
  NSObject *v11;
  id v12;
  NSMutableDictionary *v13;
  id v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  void *__dst[2];
  uint64_t v25;
  __int128 __p;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  NSString *v36;
  __int16 v37;
  id v38;

  v6 = *a2;
  if (*(char *)(*a2 + 95) < 0)
  {
    sub_100115CE4(__dst, *(void **)(v6 + 72), *(_QWORD *)(v6 + 80));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v6 + 72);
    v25 = *(_QWORD *)(v6 + 88);
  }
  if (*(char *)(v6 + 119) < 0)
  {
    sub_100115CE4(&__p, *(void **)(v6 + 96), *(_QWORD *)(v6 + 104));
  }
  else
  {
    __p = *(_OWORD *)(v6 + 96);
    v27 = *(_QWORD *)(v6 + 112);
  }
  v28 = *(_QWORD *)(v6 + 120);
  if (v25 >= 0)
    v7 = __dst;
  else
    v7 = (void **)__dst[0];
  v8 = sub_100196E90(*(_QWORD *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7)));
  if (v27 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = objc_msgSend(a3, "UTF8String");
    *(_DWORD *)buf = 68289795;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2114;
    v34 = v8;
    v35 = 2114;
    v36 = v10;
    v37 = 2081;
    v38 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#PersistentSubscription PersistenceBackend clearObjectForKeyForSubscription\", \"client\":%{public, location:escape_only}@, \"storageName\":%{public, location:escape_only}@, \"storageKey\":%{private, location:escape_only}s}", buf, 0x30u);
  }
  v13 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "dictionaryForKey:atKeyPath:defaultValue:", v10, v8, &__NSDictionary0__struct));
  -[NSMutableDictionary removeObjectForKey:](v13, "removeObjectForKey:", a3);
  v14 = -[NSMutableDictionary count](v13, "count");
  v15 = *(void **)(*(_QWORD *)(a1 + 8) + 136);
  if (v14)
  {
    objc_msgSend(v15, "setDictionary:forKey:atKeyPath:", v13, v10, v8);
  }
  else
  {
    objc_msgSend(v15, "removeValueForKey:atKeyPath:", v10, v8);
    v16 = (std::__shared_weak_count *)a2[1];
    v22 = *a2;
    v23 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    sub_100210C24(a1 + 16, &v22);
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
}

void sub_1007B6FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_100261F44((uint64_t)&a9);
  sub_1002FDAA0((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_1007B6FF4(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void **v14;
  id v15;
  __int128 *p_p;
  NSString *v17;
  NSObject *v18;
  id v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSMutableDictionary *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__dst[2];
  uint64_t v30;
  __int128 __p;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  NSString *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  uint64_t v46;

  if (a4)
  {
    v8 = *a2;
    if (*(char *)(*a2 + 95) < 0)
    {
      sub_100115CE4(__dst, *(void **)(v8 + 72), *(_QWORD *)(v8 + 80));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v8 + 72);
      v30 = *(_QWORD *)(v8 + 88);
    }
    if (*(char *)(v8 + 119) < 0)
    {
      sub_100115CE4(&__p, *(void **)(v8 + 96), *(_QWORD *)(v8 + 104));
    }
    else
    {
      __p = *(_OWORD *)(v8 + 96);
      v32 = *(_QWORD *)(v8 + 112);
    }
    v33 = *(_QWORD *)(v8 + 120);
    if (v30 >= 0)
      v14 = __dst;
    else
      v14 = (void **)__dst[0];
    v15 = sub_100196E90(*(_QWORD *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14)));
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v19 = objc_msgSend(a3, "UTF8String");
      *(_DWORD *)buf = 68290051;
      v36 = 0;
      v37 = 2082;
      v38 = "";
      v39 = 2114;
      v40 = v15;
      v41 = 2114;
      v42 = v17;
      v43 = 2081;
      v44 = v19;
      v45 = 2113;
      v46 = a4;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#PersistentSubscription PersistenceBackend setObjectForKeyForSubscription\", \"client\":%{public, location:escape_only}@, \"storageName\":%{public, location:escape_only}@, \"storageKey\":%{private, location:escape_only}s, \"storageValue\":%{private, location:escape_only}@}", buf, 0x3Au);
    }
    v20 = (std::__shared_weak_count *)a2[1];
    v27 = *a2;
    v28 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    sub_1007F5F6C((uint64_t **)(a1 + 16), (unint64_t *)&v27, &v27);
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "dictionaryForKey:atKeyPath:defaultValue:", v17, v15, &__NSDictionary0__struct, v27));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", a4, a3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "setDictionary:forKey:atKeyPath:", v26, v17, v15);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v30) < 0)
      operator delete(__dst[0]);
  }
  else
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v34[0] = *a2;
    v34[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_1007B6CBC(a1, v34, a3);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1007B736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007B73CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "persist");
}

void sub_1007B73D8(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a2[1];
  v8 = *a2;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_100210C24(a1 + 16, &v8);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1007B745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1007B7470(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD v5[5];

  v2 = a1 + 3;
  sub_1007F5F24((uint64_t)(a1 + 2), (_QWORD *)a1[3]);
  a1[2] = v2;
  a1[4] = 0;
  *v2 = 0;
  v3 = *(void **)(a1[1] + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007B74F0;
  v5[3] = &unk_102153AE8;
  v5[4] = a1;
  return objc_msgSend(v3, "iterateAllAnchorKeyPathsWithBlock:", v5);
}

void sub_1007B74F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  sub_1007B7538(v3, a2);
  sub_1007B764C(v3, a2);
  sub_1007B7760(v3, a2);
  sub_1007B7874(v3, a2);
}

void sub_1007B7538(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if (sub_1007F60A4(a1, a2))
  {
    sub_1001AB31C(*(_QWORD *)(a1 + 8), a2, &v14);
    if ((sub_1007F60A4(a1, a2) & 1) != 0)
    {
      v12 = v14;
      v13 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      sub_1007F5F6C((uint64_t **)(a1 + 16), (unint64_t *)&v12, &v12);
      v6 = v13;
      if (v13)
      {
        v7 = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1007B7628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1007B764C(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if (sub_1007F65A8(a1, a2))
  {
    sub_1007F6670(*(uint64_t **)(a1 + 8), a2, &v14);
    if ((sub_1007F65A8(a1, a2) & 1) != 0)
    {
      v12 = v14;
      v13 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      sub_1007F5F6C((uint64_t **)(a1 + 16), (unint64_t *)&v12, &v12);
      v6 = v13;
      if (v13)
      {
        v7 = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1007B773C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1007B7760(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if (sub_100091FD8(a1, a2))
  {
    sub_1007F6DD4(*(uint64_t **)(a1 + 8), a2, &v14);
    if ((sub_100091FD8(a1, a2) & 1) != 0)
    {
      v12 = v14;
      v13 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      sub_1007F5F6C((uint64_t **)(a1 + 16), (unint64_t *)&v12, &v12);
      v6 = v13;
      if (v13)
      {
        v7 = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1007B7850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1007B7874(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if (sub_1007F7538(a1, a2))
  {
    sub_1007C6DA8(*(uint64_t **)(a1 + 8), a2, &v14);
    if ((sub_1007F7538(a1, a2) & 1) != 0)
    {
      v12 = v14;
      v13 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      sub_1007F5F6C((uint64_t **)(a1 + 16), (unint64_t *)&v12, &v12);
      v6 = v13;
      if (v13)
      {
        v7 = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1007B7964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1007B7988(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007B79FC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102304A60 != -1)
    dispatch_once(&qword_102304A60, block);
  return qword_102310CD8;
}

void sub_1007B79FC()
{
  operator new();
}

void sub_1007B7A44()
{
  operator delete();
}

BOOL sub_1007B7A68(const char *a1, _QWORD *a2)
{
  size_t v4;

  v4 = strlen(a1);
  if (*((char *)a2 + 23) < 0)
  {
    if (v4 == a2[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a2 = (_QWORD *)*a2;
      return memcmp(a2, a1, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a2 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_10035AD9C();
    return memcmp(a2, a1, v4) == 0;
  }
  return 0;
}

void sub_1007B7AF4(uint64_t a1, CLConnection *a2, CLConnectionMessage **a3, _QWORD *a4)
{
  NSSet *v8;
  id v9;
  id v10;
  uint64_t UniqueRemotePid;
  int v12;
  NSObject *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v28;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v36;
  id v37;
  _QWORD *v38;
  NSObject *v39;
  id v40;
  _QWORD *v41;
  uint8_t buf[8];
  _WORD v46[5];
  __int16 v47;
  id v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;

  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSDateInterval, a2), 0);
  v9 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a3, v8), "objectForKey:", CFSTR("kCLConnectionMessageClientKeyForIdentityValidation"));
  v10 = sub_100196E90(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", v9));
  UniqueRemotePid = CLConnection::getUniqueRemotePid(a2);
  if ((sub_1007BBD94(a1, (uint64_t)v10, UniqueRemotePid) & 1) != 0)
  {
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      v12 = *((unsigned __int8 *)a4 + 23);
      if (v12 != 14)
      {
        if (v12 != 19)
        {
          if (v12 == 25)
          {
            if (*a4 != 0x6E6F697461636F4CLL
              || a4[1] != 0x4872657461647055
              || a4[2] != 0x616369726F747369
              || *((_BYTE *)a4 + 24) != 108)
            {
              if (*a4 != 0x756F72676B636142
                || a4[1] != 0x697669746341646ELL
                || a4[2] != 0x6F69737365537974
                || *((_BYTE *)a4 + 24) != 110)
              {
                goto LABEL_81;
              }
LABEL_109:
              operator new();
            }
LABEL_94:
            operator new();
          }
LABEL_81:
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v36 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            v37 = objc_msgSend(v9, "UTF8String");
            v38 = *((char *)a4 + 23) >= 0 ? a4 : (_QWORD *)*a4;
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            v46[0] = 2082;
            *(_QWORD *)&v46[1] = "";
            v47 = 2082;
            v48 = v37;
            v49 = 2082;
            v50 = (uint64_t)v38;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#locationUpdater unknnown DaemonIdentifiable client type\", \"Client\":%{public, location:escape_only}s, \"ClientType\":%{public, location:escape_only}s}", buf, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v39 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v40 = objc_msgSend(v9, "UTF8String");
            if (*((char *)a4 + 23) >= 0)
              v41 = a4;
            else
              v41 = (_QWORD *)*a4;
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            v46[0] = 2082;
            *(_QWORD *)&v46[1] = "";
            v47 = 2082;
            v48 = v40;
            v49 = 2082;
            v50 = (uint64_t)v41;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#locationUpdater unknnown DaemonIdentifiable client type", "{\"msg%{public}.0s\":\"#locationUpdater unknnown DaemonIdentifiable client type\", \"Client\":%{public, location:escape_only}s, \"ClientType\":%{public, location:escape_only}s}", buf, 0x26u);
          }
          return;
        }
        v30 = *a4 == 0x6E6F697461636F4CLL
           && a4[1] == 0x4C72657461647055
           && *(_QWORD *)((char *)a4 + 11) == 0x6576694C72657461;
        v28 = a4;
        if (!v30)
        {
LABEL_74:
          v31 = *v28;
          v32 = v28[1];
          v33 = *(uint64_t *)((char *)v28 + 11);
          if (v31 == 0x756363416C6C7546 && v32 == 0x7373655379636172 && v33 == 0x6E6F697373655379)
            operator new();
          goto LABEL_81;
        }
LABEL_96:
        operator new();
      }
      if (*a4 != 0x5365636976726553 || *(_QWORD *)((char *)a4 + 6) != 0x6E6F697373655365)
        goto LABEL_81;
LABEL_95:
      operator new();
    }
    v18 = a4[1];
    if (v18 == 19)
    {
      v19 = *(_QWORD *)*a4 == 0x6E6F697461636F4CLL && *(_QWORD *)(*a4 + 8) == 0x4C72657461647055;
      if (v19 && *(_QWORD *)(*a4 + 11) == 0x6576694C72657461)
        goto LABEL_96;
    }
    if (v18 == 25)
    {
      if (*(_QWORD *)*a4 == 0x6E6F697461636F4CLL
        && *(_QWORD *)(*a4 + 8) == 0x4872657461647055
        && *(_QWORD *)(*a4 + 16) == 0x616369726F747369
        && *(_BYTE *)(*a4 + 24) == 108)
      {
        goto LABEL_94;
      }
      v18 = a4[1];
    }
    if (v18 == 14)
    {
      if (*(_QWORD *)*a4 == 0x5365636976726553 && *(_QWORD *)(*a4 + 6) == 0x6E6F697373655365)
        goto LABEL_95;
      v18 = a4[1];
    }
    if (v18 == 25)
    {
      if (*(_QWORD *)*a4 == 0x756F72676B636142
        && *(_QWORD *)(*a4 + 8) == 0x697669746341646ELL
        && *(_QWORD *)(*a4 + 16) == 0x6F69737365537974
        && *(_BYTE *)(*a4 + 24) == 110)
      {
        goto LABEL_109;
      }
      v18 = a4[1];
    }
    if (v18 != 19)
      goto LABEL_81;
    v28 = (uint64_t *)*a4;
    goto LABEL_74;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v17 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v46[0] = 2082;
    *(_QWORD *)&v46[1] = "";
    v47 = 2082;
    v48 = objc_msgSend(v9, "UTF8String");
    v49 = 2050;
    v50 = UniqueRemotePid;
    v51 = 1026;
    v52 = (unsigned __int16)UniqueRemotePid;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Cannot create DaemonIdentifiableClient\", \"IdentityToBeValidated\":%{public, location:escape_only}s, \"ConnectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d}", buf, 0x2Cu);
  }
}

void sub_1007B82EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete();
}

void sub_1007B8380(uint64_t a1, CLConnection *a2, CLConnectionMessage **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSSet *v21;
  id v22;
  id v23;
  uint64_t UniqueRemotePid;
  NSObject *v25;
  void *__p;
  _WORD v28[6];
  id v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v5 = objc_opt_class(CLMonitoringRecord, a2);
  v7 = objc_opt_class(CLMonitoringEvent, v6);
  v9 = objc_opt_class(NSDictionary, v8);
  v11 = objc_opt_class(NSString, v10);
  v13 = objc_opt_class(NSDate, v12);
  v15 = objc_opt_class(CLCircularGeographicCondition, v14);
  v17 = objc_opt_class(CLBeaconIdentityCondition, v16);
  v19 = objc_opt_class(CLMinimumAltitudeCondition, v18);
  v21 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v7, v9, v11, v13, v15, v17, v19, objc_opt_class(CLCondition, v20), 0);
  v22 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a3, v21), "objectForKey:", CFSTR("kCLConnectionMessageClientKeyForIdentityValidation"));
  v23 = sub_100196E90(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", v22));
  UniqueRemotePid = CLConnection::getUniqueRemotePid(a2);
  if ((sub_1007BBD94(a1, (uint64_t)v23, UniqueRemotePid) & 1) != 0)
    operator new();
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v25 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289794;
    v28[0] = 2082;
    *(_QWORD *)&v28[1] = "";
    v28[5] = 2082;
    v29 = objc_msgSend(v22, "UTF8String");
    v30 = 2050;
    v31 = UniqueRemotePid;
    v32 = 1026;
    v33 = (unsigned __int16)UniqueRemotePid;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Cannot create DaemonIdentifiableMonitor\", \"IdentityToBeValidated\":%{public, location:escape_only}s, \"ConnectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d}", (uint8_t *)&__p, 0x2Cu);
  }
}

void sub_1007B8694(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  operator delete();
}

void sub_1007B86D8()
{
  operator new();
}

void sub_1007B89F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B8A34()
{
  operator new();
}

void sub_1007B8D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B8D90()
{
  operator new();
}

void sub_1007B90B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B90EC()
{
  operator new();
}

void sub_1007B940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B9448()
{
  operator new();
}

void sub_1007B9768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B97A4()
{
  operator new();
}

void sub_1007B9AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B9B00()
{
  operator new();
}

void sub_1007B9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007B9E5C()
{
  operator new();
}

void sub_1007BA17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007BA1B8()
{
  operator new();
}

void sub_1007BA4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007BA514()
{
  operator new();
}

void sub_1007BA834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007BA870()
{
  operator new();
}

void sub_1007BAB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007BABCC()
{
  operator new();
}

void sub_1007BAEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007BAF28()
{
  operator new();
}

void sub_1007BB248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007BB284(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  _BOOL8 v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  CLConnectionMessage *v9;
  CLConnectionMessage *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  uint64_t *v23;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  v5 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v7 + 23) >= 0)
      v8 = v7;
    else
      v8 = (uint64_t *)*v7;
    *(_DWORD *)buf = 68289538;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = v6;
    v22 = 2082;
    v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received message from #CoreLocationAgent\", \"User\":%{public, location:escape_only}s, \"message\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  v9 = *a2;
  v10 = a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)((char *)v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_1007BB410(v5, v15);
  if (v10)
  {
    v13 = (unint64_t *)((char *)v10 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v10 + 16))(v10);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
    }
  }
}

void sub_1007BB3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007BB410(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  void *Dictionary;
  id v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  void *v32;

  v3 = (_QWORD *)CLConnectionMessage::name(*a2);
  v4 = *((char *)v3 + 23);
  if (v4 < 0)
  {
    if (v3[1] != 38)
      goto LABEL_7;
    v3 = (_QWORD *)*v3;
  }
  else if (v4 != 38)
  {
LABEL_7:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v6 = CLConnectionMessage::name(*a2);
      v7 = *(char *)(v6 + 23) >= 0 ? (char *)v6 : *(char **)v6;
      v25 = 68289282;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2082;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CoreLocationAgent defaultMessageHandler received un-handled messaeg\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v25, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v8 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v9 = (char *)CLConnectionMessage::name(*a2);
      if (v9[23] >= 0)
        v10 = v9;
      else
        v10 = *(char **)v9;
      v25 = 68289282;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2082;
      v30 = v10;
      v11 = "#CoreLocationAgent defaultMessageHandler received un-handled messaeg";
      v12 = "{\"msg%{public}.0s\":\"#CoreLocationAgent defaultMessageHandler received un-handled messaeg\", \"message\":%"
            "{public, location:escape_only}s}";
      v13 = v8;
      goto LABEL_20;
    }
    return;
  }
  if (memcmp(v3, "kCLConnectionMessageAuthPromptResponse", 0x26uLL))
    goto LABEL_7;
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v16 = objc_msgSend(Dictionary, "allKeys");
  if (objc_msgSend(v16, "containsObject:", CFSTR("uuid"))
    && objc_msgSend(v16, "containsObject:", CFSTR("pid"))
    && (objc_msgSend(v16, "containsObject:", CFSTR("response")) & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v18 = CLConnectionMessage::name(*a2);
      v19 = *(char *)(v18 + 23) >= 0 ? (char *)v18 : *(char **)v18;
      v25 = 68289538;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2082;
      v30 = v19;
      v31 = 2114;
      v32 = Dictionary;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt response from #CoreLocationAgent is not yet supported on this platform\", \"message\":%{public, location:escape_only}s, \"resposne\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v20 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v21 = (char *)CLConnectionMessage::name(*a2);
      if (v21[23] >= 0)
        v22 = v21;
      else
        v22 = *(char **)v21;
      v25 = 68289538;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2082;
      v30 = v22;
      v31 = 2114;
      v32 = Dictionary;
      v11 = "#AuthPrompt response from #CoreLocationAgent is not yet supported on this platform";
      v12 = "{\"msg%{public}.0s\":\"#AuthPrompt response from #CoreLocationAgent is not yet supported on this platform\","
            " \"message\":%{public, location:escape_only}s, \"resposne\":%{public, location:escape_only}@}";
      v13 = v20;
      v14 = 38;
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v23 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v25 = 68289282;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2114;
      v30 = (char *)Dictionary;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt auth response from #CoreLocationAgent is malformed. Don't apply auth-response\", \"resposne\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v24 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v25 = 68289282;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2114;
      v30 = (char *)Dictionary;
      v11 = "#AuthPrompt auth response from #CoreLocationAgent is malformed. Don't apply auth-response";
      v12 = "{\"msg%{public}.0s\":\"#AuthPrompt auth response from #CoreLocationAgent is malformed. Don't apply auth-resp"
            "onse\", \"resposne\":%{public, location:escape_only}@}";
      v13 = v24;
LABEL_20:
      v14 = 28;
LABEL_21:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, (uint8_t *)&v25, v14);
    }
  }
}

void sub_1007BB8E4()
{
  operator new();
}

void sub_1007BBC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007BBC40(id *a1, uint64_t a2)
{
  CLClientManagerAuthorizationContext *v4;

  v4 = sub_10019EE88((uint64_t)a1, a2, &xmmword_101C17478);
  return sub_1001A4C54(a1, a2, (uint64_t)v4);
}

void sub_1007BBC78(uint64_t a1, CLConnection *a2, CLConnectionMessage **a3)
{
  CLConnection *v3;
  uint64_t v4;
  CLConnectionMessage **v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  CLConnectionMessage *v11;
  CLConnectionMessage *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _Unwind_Exception *v17;
  CLConnectionMessage *v18[2];

  v6 = *(_QWORD **)(a1 + 824);
  if (!v6)
    goto LABEL_12;
  v5 = a3;
  v3 = a2;
  v4 = a1;
  v7 = (_QWORD *)(a1 + 824);
  do
  {
    v8 = v6[4];
    v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (_QWORD *)(a1 + 824) || v7[4] > (unint64_t)a2)
LABEL_12:
    sub_1019086B4();
  if (!sub_100B9DAB0(v7[5]))
  {
    v17 = (_Unwind_Exception *)sub_101908828();
    sub_100261F44((uint64_t)v18);
    _Unwind_Resume(v17);
  }
  sub_100090424(v4, v3);
  v11 = *v5;
  v12 = v5[1];
  v18[0] = v11;
  v18[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)((char *)v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_1000B7D74(v4, v3, v18);
  if (v12)
  {
    v15 = (unint64_t *)((char *)v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
}

id sub_1007BBD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  id v25;

  v5 = sub_100196E90(a1, a2);
  v6 = objc_msgSend(*(id *)(a1 + 360), "objectForKey:", v5);
  v7 = objc_msgSend(v6, "containsObject:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a3));
  if ((v7 & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 68289794;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v5;
      v20 = 2050;
      v21 = a3;
      v22 = 1026;
      v23 = (unsigned __int16)a3;
      v9 = "{\"msg%{public}.0s\":\"#identityValidation successful\", \"Identity\":%{public, location:escape_only}@, \"Con"
           "nectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d}";
      v10 = v8;
      v11 = 44;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 68290050;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v5;
      v20 = 2050;
      v21 = a3;
      v22 = 1026;
      v23 = (unsigned __int16)a3;
      v24 = 2114;
      v25 = v6;
      v9 = "{\"msg%{public}.0s\":\"#warning #identityValidation Identity invalid for connected client\", \"Identity\":%{p"
           "ublic, location:escape_only}@, \"ConnectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d, "
           "\"AllowedUniquePids\":%{public, location:escape_only}@}";
      v10 = v12;
      v11 = 54;
      goto LABEL_10;
    }
  }
  return v7;
}

void sub_1007BBF94(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, void *a5, int a6)
{
  id v11;
  NSString *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  id v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  uint64_t *v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  void *v43;

  v29 = objc_alloc_init((Class)NSAutoreleasePool);
  v11 = sub_100196E90(a1, a2);
  if ((objc_msgSend(*(id *)(a1 + 136), "dictionaryExistsAtKeyPath:", v11) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    if (*((char *)a3 + 23) >= 0)
      v16 = a3;
    else
      v16 = (uint64_t *)*a3;
    *(_DWORD *)buf = 68289794;
    v31 = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2114;
    v35 = v11;
    v36 = 2082;
    v37 = v16;
    v38 = 1026;
    v39 = a4;
    v17 = "{\"msg%{public}.0s\":\"skip persisting #dic for rehydration. Client not found\", \"Client\":%{public, location"
          ":escape_only}@, \"dic\":%{public, location:escape_only}s, \"dicType\":%{public}d}";
LABEL_13:
    v18 = v15;
    v19 = 44;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_38;
  }
  if (a6 && !objc_msgSend(a5, "count"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    if (*((char *)a3 + 23) >= 0)
      v27 = a3;
    else
      v27 = (uint64_t *)*a3;
    *(_DWORD *)buf = 68289794;
    v31 = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2114;
    v35 = v11;
    v36 = 2082;
    v37 = v27;
    v38 = 1026;
    v39 = a4;
    v17 = "{\"msg%{public}.0s\":\"skip persisting #dic for rehydration, payload is empty\", \"Client\":%{public, location"
          ":escape_only}@, \"dic\":%{public, location:escape_only}s, \"dicType\":%{public}d}";
    goto LABEL_13;
  }
  v12 = -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4), "stringValue");
  v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "dictionaryForKey:atKeyPath:defaultValue:", CFSTR("DIC"), v11, +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary")), "mutableCopy");
  if (objc_msgSend(v13, "objectForKeyedSubscript:", v12))
    v14 = objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", v12), "mutableCopy");
  else
    v14 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v20 = v14;
  if (*((char *)a3 + 23) >= 0)
    v21 = a3;
  else
    v21 = (uint64_t *)*a3;
  if (a6)
  {
    objc_msgSend(v14, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
    if (*((char *)a3 + 23) >= 0)
      v22 = a3;
    else
      v22 = (uint64_t *)*a3;
    objc_msgSend(v20, "setObject:forKeyedSubscript:", a5, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
  }
  else
  {
    objc_msgSend(v14, "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
  }
  if (objc_msgSend(v20, "count"))
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v20, v12);
  else
    objc_msgSend(v13, "removeObjectForKey:", v12);
  v23 = objc_msgSend(v13, "count");
  v24 = *(void **)(a1 + 136);
  if (v23)
    objc_msgSend(v24, "setDictionary:forKey:atKeyPath:", v13, CFSTR("DIC"), v11);
  else
    objc_msgSend(v24, "removeValueForKey:atKeyPath:", CFSTR("DIC"), v11);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v25 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0)
      v26 = a3;
    else
      v26 = (uint64_t *)*a3;
    *(_DWORD *)buf = 68290306;
    v31 = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2114;
    v35 = v11;
    v36 = 2082;
    v37 = v26;
    v38 = 1026;
    v39 = a4;
    v40 = 1026;
    v41 = a6;
    v42 = 2114;
    v43 = a5;
    v17 = "{\"msg%{public}.0s\":\"updated persistent-store for #dic rehydration\", \"Client\":%{public, location:escape_o"
          "nly}@, \"dic\":%{public, location:escape_only}s, \"dicType\":%{public}d, \"coming\":%{public}hhd, \"Rehydratio"
          "nPayload\":%{public, location:escape_only}@}";
    v18 = v25;
    v19 = 60;
    goto LABEL_37;
  }
LABEL_38:

}

void sub_1007BC3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1007BC424(uint64_t a1)
{
  CLConnectionServer *v2;
  CLConnection *v3;

  v2 = *(CLConnectionServer **)(a1 + 808);
  if (v2)
  {
    CLConnectionServer::~CLConnectionServer(v2);
    operator delete();
  }
  sub_1007BC48C(a1);
  v3 = *(CLConnection **)(a1 + 936);
  if (v3)
  {
    CLConnection::deferredDelete(v3);
    *(_QWORD *)(a1 + 936) = 0;
  }
  objc_msgSend(*(id *)(a1 + 248), "invalidate");

  *(_QWORD *)(a1 + 248) = 0;
}

void sub_1007BC48C(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = objc_autoreleasePoolPush();
  v3 = *(_QWORD **)(a1 + 816);
  if (v3 != (_QWORD *)(a1 + 824))
  {
    do
    {
      v4 = (_QWORD *)v3[1];
      v5 = v3;
      if (v4)
      {
        do
        {
          v6 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v5[2];
          v7 = *v6 == (_QWORD)v5;
          v5 = v6;
        }
        while (!v7);
      }
      sub_100209F54(a1, (CLConnection *)v3[4]);
      v3 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 824));
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1007BC514(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  CLConnection *v9;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v3, "isValidCKP"))
  {
    v4 = *(_QWORD **)(a1 + 816);
    if (v4 != (_QWORD *)(a1 + 824))
    {
      do
      {
        v5 = (_QWORD *)v4[1];
        v6 = v4;
        if (v5)
        {
          do
          {
            v7 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v8 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (!v8);
        }
        v9 = (CLConnection *)v4[4];
        if (objc_msgSend(sub_1001948D4(v4[5], 0), "isEqual:", v3))
          sub_100209F54(a1, v9);
        v4 = v7;
      }
      while (v7 != (_QWORD *)(a1 + 824));
    }
  }
}

uint64_t sub_1007BC5C8(uint64_t a1, char a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v13;
  std::__shared_weak_count *v14;
  char v15;

  v15 = a2;
  sub_1001E4804(&v13);
  sub_10011B81C(v13, CFSTR("LocationServicesEnabledIn8.0"), &v15);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1001E4804(&v13);
  sub_100569514(v13);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_1005695B4((uint64_t)&v13, CFSTR("com.apple.locationd.notbackedup"), 0, (uint64_t)CFSTR("mobile"));
  sub_10011B81C((uint64_t)&v13, CFSTR("LocationServicesEnabledIn8.0"), &v15);
  sub_100569514((uint64_t)&v13);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.locationd/Prefs"), 0, 0, 1u);
  sub_1007BC73C(a1, a3, 1);
  return sub_100569628(&v13);
}

void sub_1007BC714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007BC73C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t *i;
  _QWORD *v12;
  id v13;
  CLClientManagerAuthorizationContext *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t *v18;
  NSDictionary *v19;
  NSObject *v20;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  uint8_t *v25;
  _QWORD v26[3];
  _QWORD v27[3];
  uint8_t buf[32];
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _BYTE v32[24];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p[4];
  unsigned int v37;
  uint8_t v38[8];
  _BYTE v39[24];
  uint64_t v40;
  uint64_t v41;

  sub_1005159FC();
  v6 = sub_10019CFA0();
  v7 = sub_100515AC8();
  if (objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus") != (_DWORD)v6
    || *(unsigned __int8 *)(a1 + 800) != v7)
  {
    objc_msgSend(*(id *)(a1 + 120), "setLocationServicesEnabledStatus:", v6);
    *(_BYTE *)(a1 + 800) = v7;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus");
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v22 = qword_1022A01D8;
      v23 = objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus");
      *(_DWORD *)v38 = 67109376;
      *(_DWORD *)&v38[4] = v23;
      *(_WORD *)v39 = 1024;
      *(_DWORD *)&v39[2] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)", v38, 14);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkLocationServicesEnabledState(const std::string &, BOOL)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (a3)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync sending kNotificationLocationServicesStatus\"}", buf, 0x12u);
      }
      objc_msgSend(*(id *)(a1 + 1536), "sendGlobalAuthStatus:", sub_1001A09FC());
    }
    sub_1007C0C44(a1);
    *(_OWORD *)v31 = 0u;
    memset(v32, 0, 19);
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    memset(buf, 0, sizeof(buf));
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    memset(__p, 0, 27);
    v37 = objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus");
    *(_DWORD *)v38 = 4;
    (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v38, buf, 1, 0xFFFFFFFFLL, 0);
    sub_1007BC48C(a1);
    for (i = *(uint64_t **)(a1 + 992); i; i = (uint64_t *)*i)
    {
      v12 = i + 2;
      if (*((char *)i + 39) < 0)
        v12 = (_QWORD *)*v12;
      v13 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)));
      if ((objc_msgSend(v13, "isValidCKP") & 1) != 0)
      {
        v14 = sub_1000B9630(a1, (uint64_t)v13, &xmmword_101C17478);
        sub_1002402F8(a1, (uint64_t)v13, (uint64_t)v14);
      }
    }
    v15 = *(void **)(a1 + 136);
    *(_QWORD *)v38 = _NSConcreteStackBlock;
    *(_QWORD *)v39 = 3221225472;
    *(_QWORD *)&v39[8] = sub_1007F19C8;
    *(_QWORD *)&v39[16] = &unk_102154360;
    v40 = a1;
    LOBYTE(v41) = 0;
    objc_msgSend(v15, "iterateAllAnchorKeyPathsWithBlock:", v38);
    v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBTLEFenceManager"));
    v17 = *(void **)(a1 + 136);
    *(_QWORD *)v38 = _NSConcreteStackBlock;
    *(_QWORD *)v39 = 3221225472;
    *(_QWORD *)&v39[8] = sub_1007BD1C8;
    *(_QWORD *)&v39[16] = &unk_102153BE8;
    v40 = (uint64_t)v16;
    v41 = a1;
    objc_msgSend(v17, "iterateAllAnchorKeyPathsWithBlock:", v38);
    sub_1007BD58C(a1);
    v27[0] = &__kCFBooleanFalse;
    v26[0] = CFSTR("IsResetEvent");
    v26[1] = CFSTR("EventSource");
    if (*((char *)a2 + 23) >= 0)
      v18 = a2;
    else
      v18 = (uint64_t *)*a2;
    v27[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18);
    v26[2] = CFSTR("Enabled");
    v27[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus") == 1);
    v19 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 3);
    if (qword_1022A02C0 != -1)
      dispatch_once(&qword_1022A02C0, &stru_102154588);
    v20 = qword_1022A02C8;
    if (os_log_type_enabled((os_log_t)qword_1022A02C8, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v38 = 68289282;
      *(_WORD *)v39 = 2082;
      *(_QWORD *)&v39[2] = "";
      *(_WORD *)&v39[10] = 2114;
      *(_QWORD *)&v39[12] = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#checkLocationServicesEnabledState #CoreAnalytics\", \"Bigswitch Analytics\":%{public, location:escape_only}@}", v38, 0x1Cu);
    }
    AnalyticsSendEvent(CFSTR("com.apple.locationd.bigswitch"), v19);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAuthorizationStatusChangedNotification, 0, 0, 0);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35) < 0)
      operator delete(*((void **)&v34 + 1));
    if (SBYTE7(v34) < 0)
      operator delete((void *)v33);
    if ((v32[15] & 0x80000000) != 0)
      operator delete(v31[1]);
    if (SHIBYTE(v31[0]) < 0)
      operator delete(v30[0]);
    if (SHIBYTE(v29) < 0)
      operator delete(*(void **)&buf[24]);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
}

void sub_1007BCD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007BCD78(uint64_t a1)
{
  unsigned int *v1;

  v1 = *(unsigned int **)(a1 + 272);
  if (v1)
    return *v1;
  else
    return 5;
}

id sub_1007BCD90(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = +[CLClientKeyPath nullClientKeyPath](CLClientKeyPath, "nullClientKeyPath");
  v3 = *(_QWORD *)(a1 + 272);
  if (v3)
    return *(id *)(v3 + 8);
  return result;
}

id sub_1007BCDC4(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v3 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](sub_10019F2A0(a1, a2), "objectAtIndexedSubscript:", 0), "intValue");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2114;
    v10 = a2;
    v11 = 2050;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client static registration result\", \"Client\":%{public, location:escape_only}@, \"registration\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v6, 0x26u);
  }
  return v3;
}

id sub_1007BCED8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", a2);
}

uint64_t sub_1007BCEE4(uint64_t a1, uint64_t a2)
{
  return sub_1007BCEF0(*(_QWORD *)(a1 + 32), a2, 6);
}

uint64_t sub_1007BCEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t result;
  int v7;
  int v8;
  double v9;
  double v10;
  CFAbsoluteTime Current;
  NSObject *v12;
  char *v13;
  double v14;
  char *v15;
  const char *v16;
  uint8_t *v17;
  __CFString *v18;
  uint64_t v19;
  int v20;
  char *v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  id v27;
  __int16 v28;
  CFAbsoluteTime v29;
  uint8_t buf[4];
  char *v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  id v37;
  __int16 v38;
  CFAbsoluteTime v39;

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = (uint64_t)objc_msgSend(v5, "isValidCKP");
  if ((_DWORD)result)
  {
    v18 = 0;
    v19 = 0;
    sub_100195BD4(a3, &v19, &v18);
    v7 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", v19, v5, 0xFFFFFFFFLL);
    v8 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", v18, v5, 0xFFFFFFFFLL);
    if (v7 != -1 && ((v9 = (double)v7, v10 = (double)v8, v8 == -1) || v10 < v9))
    {
      Current = CFAbsoluteTimeGetCurrent();
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = off_102153B38[a3];
        *(_DWORD *)buf = 136447234;
        v31 = v13;
        v32 = 2050;
        v33 = v9;
        v34 = 2050;
        v35 = v10;
        v36 = 2114;
        v37 = v5;
        v38 = 2050;
        v39 = Current;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}@ - setting to %{public}.2f", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v15 = off_102153B38[a3];
        v20 = 136447234;
        v21 = v15;
        v22 = 2050;
        v23 = v9;
        v24 = 2050;
        v25 = v10;
        v26 = 2114;
        v27 = v5;
        v28 = 2050;
        v29 = Current;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}@ - setting to %{public}.2f", &v20, 52);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::checkServiceStopped(CLClientKeyPath *, CLClientServiceType)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      v14 = CFAbsoluteTimeGetCurrent();
      sub_100194D94(a1, (uint64_t)v5, a3, 0, 0, 0, v14);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1007BD1C8(uint64_t a1, void *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t result;
  double v10;
  double v11;
  CFAbsoluteTime Current;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __CFString *v23;
  uint64_t v24;
  int v25;
  char *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  CFAbsoluteTime v34;
  uint8_t buf[4];
  char *v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  CFAbsoluteTime v44;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 40);
  do
  {
    v23 = 0;
    v24 = 0;
    v6 = sub_1007BD564(v4);
    sub_100195BD4(v6, &v24, &v23);
    objc_msgSend(*(id *)(v5 + 136), "doubleForKey:atKeyPath:defaultValue:", v24, a2, -1.0);
    v8 = v7;
    result = (uint64_t)objc_msgSend(*(id *)(v5 + 136), "doubleForKey:atKeyPath:defaultValue:", v23, a2, -1.0);
    if (v8 != -1.0)
    {
      v11 = v10;
      if (v10 == -1.0 || v10 < v8)
      {
        if (v4 - 1 >= 3)
        {
          if (v4)
            goto LABEL_18;
          result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "syncgetHasMonitoredRegions:", objc_msgSend(a2, "legacyClientKey"));
          if ((result & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v5 + 32), "vendor"), "proxyForService:", CFSTR("CLFenceManager")), "syncgetHasMonitoredFences:", objc_msgSend(a2, "legacyClientKey"));
        }
        Current = CFAbsoluteTimeGetCurrent();
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v14 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v15 = off_102153B38[sub_1007BD564(v4)];
          *(_DWORD *)buf = 136447234;
          v36 = v15;
          v37 = 2050;
          v38 = v8;
          v39 = 2050;
          v40 = v11;
          v41 = 2114;
          v42 = a2;
          v43 = 2050;
          v44 = Current;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}@ - setting to %{public}.2f", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v18 = qword_1022A01D8;
          v19 = off_102153B38[sub_1007BD564(v4)];
          v25 = 136447234;
          v26 = v19;
          v27 = 2050;
          v28 = v8;
          v29 = 2050;
          v30 = v11;
          v31 = 2114;
          v32 = a2;
          v33 = 2050;
          v34 = Current;
          LODWORD(v22) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}@ - setting to %{public}.2f", &v25, v22);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkRegionsStopped()_block_invoke", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        v16 = sub_1007BD564(v4);
        v17 = CFAbsoluteTimeGetCurrent();
        result = sub_100194D94(v5, (uint64_t)a2, v16, 0, 0, 0, v17);
      }
    }
LABEL_18:
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_1007BD564(unsigned int a1)
{
  uint64_t v2;

  if (a1 < 4)
    return qword_101BC2248[a1];
  v2 = sub_101908B10();
  return sub_1007BD58C(v2);
}

void sub_1007BD58C(uint64_t a1)
{
  void *v2;
  _QWORD v3[6];
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = (int *)&v4;
  v6 = 0x2020000000;
  v7 = 0;
  v2 = *(void **)(a1 + 136);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007BD640;
  v3[3] = &unk_102153C10;
  v3[4] = &v4;
  v3[5] = a1;
  objc_msgSend(v2, "iterateAllAnchorKeyPathsWithBlock:", v3);
  if (v5[6] >= 1)
    sub_100091C2C(a1);
  _Block_object_dispose(&v4, 8);
}

void sub_1007BD628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1007BD640(uint64_t a1, void *a2)
{
  uint64_t v4;
  id result;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;

  v4 = *(_QWORD *)(a1 + 40);
  result = objc_msgSend(*(id *)(v4 + 136), "hasValueForKey:atKeyPath:", CFSTR("RangeTimeStarted"), a2);
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v7[0] = 68289282;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = objc_msgSend(a2, "legacyClientKey");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"stop range for client\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
    }
    objc_msgSend(*(id *)(v4 + 136), "removeValueForKey:atKeyPath:", CFSTR("RangeTimeStarted"), a2);
    result = objc_msgSend(*(id *)(v4 + 136), "setDouble:forKey:atKeyPath:", CFSTR("RangeTimeStopped"), a2, CFAbsoluteTimeGetCurrent());
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  return result;
}

uint64_t sub_1007BD7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  sub_1007BCEF0(v3, a2, 11);
  return sub_1007BCEF0(v3, a2, 3);
}

void sub_1007BD7E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  id v9;
  CLClientManagerAuthorizationContext *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  void *__p[2];
  char v21;
  _BYTE v22[72];
  _QWORD v23[5];
  NSErrorUserInfoKey v24;
  const __CFString *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  NSErrorUserInfoKey v36;
  const __CFString *v37;
  NSErrorUserInfoKey v38;
  const __CFString *v39;

  v9 = sub_100195B0C(a1, a2);
  v10 = sub_1000B9630(a1, (uint64_t)v9, &xmmword_101C17478);
  if (-[CLClientManagerAuthorizationContext isAuthorizedForServiceTypeMask:](v10, "isAuthorizedForServiceTypeMask:", 4112))
  {
    if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v11 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289282;
        v27 = 0;
        v28 = 2082;
        v29 = "";
        v30 = 2114;
        v31 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#transcriptSession skip prompting. Restrictions enabled\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      v36 = NSDebugDescriptionErrorKey;
      v37 = CFSTR("Restrictions are enabled.  Changing authorization isn't allowed");
      (*(void (**)(uint64_t, _QWORD, NSError *))(a5 + 16))(a5, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1)));
    }
    else if (*(_QWORD *)(a1 + 272))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(unsigned int **)(a1 + 272);
        v15 = *((_QWORD *)v14 + 1);
        v16 = *v14;
        *(_DWORD *)buf = 68289794;
        v27 = 0;
        v28 = 2082;
        v29 = "";
        v30 = 2114;
        v31 = v9;
        v32 = 2114;
        v33 = v15;
        v34 = 2050;
        v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession skip prompting. InflightPromptAuthorizationRequest found.\", \"Client\":%{public, location:escape_only}@, \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x30u);
      }
      v24 = NSDebugDescriptionErrorKey;
      v25 = CFSTR("App is already presenting the user with an authorization prompt");
      (*(void (**)(uint64_t, _QWORD, NSError *))(a5 + 16))(a5, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1)));
    }
    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1007BDDA8;
      v23[3] = &unk_102153C38;
      v23[4] = a5;
      sub_1015A2E04(__p, "");
      sub_1007F5908((uint64_t)v22, a4, (uint64_t)v9, v23, (__int128 *)__p);
      v17 = sub_1007BDDB4(a1, (uint64_t)v9, 0, (uint64_t)v22, a3);
      sub_100235568((uint64_t)v22);
      if (v21 < 0)
        operator delete(__p[0]);
      if (!v17)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v18 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289282;
          v27 = 0;
          v28 = 2082;
          v29 = "";
          v30 = 2114;
          v31 = v9;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Could not post #transcriptSession\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v19 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          *(_DWORD *)buf = 68289282;
          v27 = 0;
          v28 = 2082;
          v29 = "";
          v30 = 2114;
          v31 = v9;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Could not post #transcriptSession", "{\"msg%{public}.0s\":\"#Warning Could not post #transcriptSession\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      v27 = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2114;
      v31 = v9;
      v32 = 1026;
      LODWORD(v33) = -[CLClientManagerAuthorizationContext registrationResult](v10, "registrationResult");
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #Warning skip prompting .No point in prompting if the user doesn't want them to get access to precise current location \", \"Client\":%{public, location:escape_only}@, \"RegistrationResult\":%{public}d}", buf, 0x22u);
    }
    v38 = NSDebugDescriptionErrorKey;
    v39 = CFSTR("Registration Result should be WIU or Always to enable Transcript Session");
    (*(void (**)(uint64_t, _QWORD, NSError *))(a5 + 16))(a5, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1)));
  }
}

void sub_1007BDD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100235568((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1007BDDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL sub_1007BDDB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  BOOL v11;
  unsigned int v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  _BOOL8 result;
  const char *v20;
  const char *v21;
  _BYTE *v22;
  __CFString *v23;
  const __CFURL *v24;
  __CFBundle *v25;
  uint64_t v26;
  const __CFString *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  const __CFString *v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  char v41;
  const __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  __CFBundle *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __CFString *v59;
  CFTypeRef v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __CFBundle *v66;
  __CFBundle *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  const __CFString *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  __CFBundle *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  id v101;
  NSObject *v102;
  id v103;
  char v104;
  NSObject *v105;
  NSObject *v106;
  _BOOL4 v107;
  __CFDictionary *Mutable;
  NSArray *v109;
  NSObject *v110;
  char *v111;
  id v112;
  NSData *v113;
  NSObject *v114;
  NSData *v115;
  double v116;
  double v117;
  unsigned int v118;
  __CFUserNotification *v119;
  NSObject *v120;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *v122;
  NSObject *v123;
  NSObject *v124;
  NSObject *v125;
  NSObject *v126;
  uint64_t v127;
  unsigned int v128;
  NSString *v129;
  CFTypeRef v130;
  __CFString *v131;
  const __CFAllocator *alloc;
  CFStringRef format;
  CFTypeRef v134;
  CFStringRef value;
  NSMutableDictionary *v136;
  const __CFString *cf;
  SInt32 error[4];
  CFErrorRef errorPtr;
  id v140;
  _BYTE buf[28];
  __int16 v142;
  id v143;
  id v144;

  v9 = sub_100196E90(a1, a2);
  v10 = sub_100195B0C(a1, (uint64_t)v9);
  sub_1007D4958(a1, v10, 1);
  if (&SBUserNotificationPendInSetupIfNotAllowedKey)
    v11 = &SBUserNotificationHideOnClonedDisplay == 0;
  else
    v11 = 1;
  if (v11
    || &SBUserNotificationDefaultButtonTag == 0
    || &SBUserNotificationExtensionItemsKey == 0
    || &SBUserNotificationExtensionIdentifierKey == 0)
  {
    return 0;
  }
  v15 = *(_DWORD *)a4;
  cf = sub_1007CDED4(a1, v9, a3);
  if (!cf)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"createClientUserNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v18 = qword_1022A01D8;
    result = os_signpost_enabled((os_log_t)qword_1022A01D8);
    if (!result)
      return result;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v9;
    v20 = "createClientUserNotification: BundleDisplayName nil";
    v21 = "{\"msg%{public}.0s\":\"createClientUserNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}";
LABEL_28:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, v21, buf, 0x1Cu);
    return 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v16 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v9;
    v142 = 1026;
    LODWORD(v143) = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CUN Creating client user notification for client\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
  }
  v136 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a5);
  if (*(char *)(a4 + 39) < 0)
  {
    sub_100115CE4(buf, *(void **)(a4 + 16), *(_QWORD *)(a4 + 24));
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)(a4 + 16);
    *(_QWORD *)&buf[16] = *(_QWORD *)(a4 + 32);
  }
  if (buf[23] >= 0)
    v22 = buf;
  else
    v22 = *(_BYTE **)buf;
  v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  errorPtr = 0;
  sub_100197040();
  if (sub_1000C4240())
  {
    v24 = (const __CFURL *)sub_1001AF3C4(objc_msgSend(v9, "bundleId"));
    v25 = CFBundleCreate(kCFAllocatorDefault, v24);
    if (v25)
    {
      v26 = sub_1001AC584();
      v27 = sub_1001AC5C4(v26, v25, CFSTR("NSLocationUsageDescriptionCarplay"), 0);
      CFRelease(v25);
      if (v27)
        CFRelease(v27);
    }
  }
  v28 = _os_feature_enabled_impl("CoreLocation", "CLNotThisTime");
  if (v28)
    v29 = objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("AuthorizationPromptOptionTypeNegative"), v9, 0);
  else
    v29 = 0;
  v30 = 0;
  v31 = 0;
  switch(v15)
  {
    case 0u:
    case 0xAu:
    case 0xFu:
      CFRelease(cf);
      return 0;
    case 1u:
    case 3u:
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationTemporaryPreciseAuthPromptPlugin");
      v43 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v43, CFSTR("LOCATION_CLIENT_PERMISSION_PLAIN_WHEN_IN_USE_TITLE"));
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      v44 = sub_1001AC584();
      v45 = CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON");
      if (v28)
        v46 = CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON");
      else
        v46 = CFSTR("LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON");
      if (v28)
      {
        v45 = CFSTR("LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON");
        v47 = CFSTR("LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON");
      }
      else
      {
        v47 = CFSTR("LOCATION_CLIENT_PERMISSION_NEVER_BUTTON");
      }
      if (v29)
        v48 = CFSTR("LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON");
      else
        v48 = v46;
      if (v29)
        v49 = CFSTR("LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON");
      else
        v49 = v45;
      if (v29)
        v50 = CFSTR("LOCATION_CLIENT_PERMISSION_NEVER_BUTTON");
      else
        v50 = v47;
      v134 = (CFTypeRef)sub_100814D7C(v44, v48);
      v51 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v51, v49);
      v52 = sub_1001AC584();
      v53 = (const void *)sub_100814D7C(v52, v50);
      v54 = (__CFBundle *)sub_1007CE594(a1, (uint64_t)v9);
      if (v54)
      {
        v131 = sub_1007CE648(a1, v9, v54, 1u, 0, v23);
        CFRelease(v54);
        v31 = 0;
        goto LABEL_113;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021545A8);
      v94 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021545A8);
      }
      v18 = qword_1022A01C8;
      result = os_signpost_enabled((os_log_t)qword_1022A01C8);
      if (result)
        goto LABEL_220;
      return result;
    case 2u:
    case 4u:
    case 5u:
      v32 = sub_1001AC584();
      v33 = CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON");
      if (!v28)
        v33 = CFSTR("LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON");
      if (v29)
        v34 = CFSTR("LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON");
      else
        v34 = v33;
      v30 = sub_100814D7C(v32, v34);
      v35 = sub_1001AC584();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", (id)sub_100814D7C(v35, CFSTR("PRECISE_ON_PILL_BUTTON_TITLE")), CFSTR("PreciseButtonOnTitle"));
      v36 = sub_1001AC584();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", (id)sub_100814D7C(v36, CFSTR("PRECISE_OFF_PILL_BUTTON_TITLE")), CFSTR("PreciseButtonOffTitle"));
      v37 = sub_1001AC584();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", (id)sub_100814D7C(v37, CFSTR("ONLY_HERE_PILL_BUTTON_TITLE")), CFSTR("OnlyHereTitle"));
      v31 = 1;
      goto LABEL_50;
    case 6u:
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationRepromptAlwaysAuthPromptPlugin");
      v61 = objc_msgSend(-[NSMutableDictionary objectForKey:](v136, "objectForKey:", CFSTR("LocationCount")), "unsignedLongValue");
      v62 = (_QWORD *)sub_1001AC584();
      if (v61)
      {
        format = sub_100814D80(v62, CFSTR("LOCATION_CLIENT_PERMISSION_REPROMPT_OTHER"));
        alloc = kCFAllocatorDefault;
        value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%lu %@"), format, &errorPtr, v61, cf);
      }
      else
      {
        format = sub_100814D80(v62, CFSTR("LOCATION_REPROMPT_ALWAYS_TITLE"));
        alloc = kCFAllocatorDefault;
        value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      }
      v98 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v98, CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE_ONLY_BUTTON"));
      v99 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v99, CFSTR("LOCATION_CLIENT_PERMISSION_KEEP_ALWAYS_BUTTON"));
      v131 = sub_1007CE184(a1, (uint64_t)v9);
      goto LABEL_123;
    case 7u:
    case 8u:
      v55 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v55, CFSTR("LOCATION_CLIENT_PERMISSION_UPGRADE_WHENINUSE_ALWAYS"));
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      v56 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v56, CFSTR("LOCATION_CLIENT_PERMISSION_KEEP_WHENINUSE_BUTTON"));
      v57 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v57, CFSTR("LOCATION_CLIENT_PERMISSION_ALWAYS_BUTTON"));
      v131 = sub_1007CE184(a1, (uint64_t)v9);
      goto LABEL_94;
    case 9u:
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationTemporaryPreciseAuthPromptPlugin");
      v63 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v63, CFSTR("LOCATION_CLIENT_PERMISSION_TEMPORARY_PRECISE_TITLE"));
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      v64 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v64, CFSTR("LOCATION_CLIENT_PERMISSION_TEMPORARY_PRECISE_YES_BUTTON"));
      v65 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v65, CFSTR("LOCATION_CLIENT_PERMISSION_TEMPORARY_PRECISE_NO_BUTTON"));
      v131 = (__CFString *)objc_msgSend(-[NSMutableDictionary objectForKey:](v136, "objectForKey:", CFSTR("UsageDescription")), "copy");
      if (v131 || !v23)
        goto LABEL_92;
      v66 = (__CFBundle *)sub_1007CE594(a1, (uint64_t)v9);
      v67 = v66;
      if (v66)
      {
        CFAutorelease(v66);
        v69 = -[__CFDictionary objectForKeyedSubscript:](CFBundleGetInfoDictionary(v67), "objectForKeyedSubscript:", CFSTR("NSLocationTemporaryUsageDescriptionDictionary"));
        if (!v69)
        {
          sub_1002355A0((unsigned int *)a4, (uint64_t)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Info.plist is missing the %@ key"), CFSTR("NSLocationTemporaryUsageDescriptionDictionary")));
          return 0;
        }
        v70 = objc_opt_class(NSDictionary, v68);
        if ((objc_opt_isKindOfClass(v69, v70) & 1) == 0)
        {
          sub_1002355A0((unsigned int *)a4, (uint64_t)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Info.plist value for %@ key is not a dictionary"), CFSTR("NSLocationTemporaryUsageDescriptionDictionary")));
          return 0;
        }
        v72 = objc_msgSend(v69, "objectForKeyedSubscript:", v23);
        if (!v72)
        {
          sub_1002355A0((unsigned int *)a4, (uint64_t)CFSTR("The purposeKey provided isn't present in the app's Info.plist dictionary of temporary usage descriptions"));
          return 0;
        }
        v73 = objc_opt_class(NSString, v71);
        if ((objc_opt_isKindOfClass(v72, v73) & 1) == 0)
        {
          sub_1002355A0((unsigned int *)a4, (uint64_t)CFSTR("The purposeKey provided names an entry in Info.plist which isn't a string"));
          return 0;
        }
        v74 = sub_1001AC584();
        v131 = (__CFString *)sub_1001AC5C4(v74, v67, v23, 1);
        if (!v131)
          v131 = (__CFString *)objc_msgSend(v72, "copy");
LABEL_92:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", CFSTR("UserLocationIsPrecise"), CFSTR("UserLocationIsPrecise"));
LABEL_123:
        v53 = 0;
        v31 = 0;
        goto LABEL_124;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021545A8);
      v126 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021545A8);
      }
      v18 = qword_1022A01C8;
      result = os_signpost_enabled((os_log_t)qword_1022A01C8);
      if (!result)
        return result;
      goto LABEL_220;
    case 0xBu:
LABEL_50:
      v134 = (CFTypeRef)v30;
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationVanillaWhenInUseAuthPromptPlugin");
      v38 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v38, CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE"));
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      if (!objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("IsAppClip"), v9, 0))
      {
        v58 = sub_1001AC584();
        if (v29)
        {
          v130 = (CFTypeRef)sub_100814D7C(v58, CFSTR("LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON"));
        }
        else
        {
          if (v28)
          {
            v130 = (CFTypeRef)sub_100814D7C(v58, CFSTR("LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON"));
            v42 = CFSTR("LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON");
            goto LABEL_111;
          }
          v130 = (CFTypeRef)sub_100814D7C(v58, CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON"));
        }
        goto LABEL_110;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v39 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Client is #appclip\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      v40 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v40, CFSTR("LOCATION_CLIENT_PERMISSION_WHENINUSE_UNTIL_TOMORROW_BUTTON"));
      v41 = v29 | v28;
      if (v29)
        v42 = CFSTR("LOCATION_CLIENT_PERMISSION_NEVER_BUTTON");
      else
        v42 = CFSTR("LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON");
      if ((v41 & 1) == 0)
LABEL_110:
        v42 = CFSTR("LOCATION_CLIENT_PERMISSION_NEVER_BUTTON");
LABEL_111:
      v95 = sub_1001AC584();
      v53 = (const void *)sub_100814D7C(v95, v42);
      v96 = (__CFBundle *)sub_1007CE594(a1, (uint64_t)v9);
      if (!v96)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021545A8);
        v97 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v9;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021545A8);
        }
        v18 = qword_1022A01C8;
        result = os_signpost_enabled((os_log_t)qword_1022A01C8);
        if (!result)
          return result;
LABEL_220:
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        v20 = "#AuthPrompt couldn't get bundle for client";
        v21 = "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}";
        goto LABEL_28;
      }
      v131 = sub_1007CE648(a1, v9, v96, 1u, 0, v23);
      CFRelease(v96);
LABEL_113:
      *(_BYTE *)(a4 + 4) = v29;
LABEL_124:
      v60 = v134;
      v59 = value;
      if (errorPtr)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v100 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v101 = objc_msgSend(-[__CFError localizedDescription](errorPtr, "localizedDescription"), "UTF8String");
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v9;
          v142 = 2082;
          v143 = v101;
          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Error, couldn't create prompt for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v102 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v103 = objc_msgSend(-[__CFError localizedDescription](errorPtr, "localizedDescription"), "UTF8String");
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v9;
          v142 = 2082;
          v143 = v103;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v102, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Error, couldn't create prompt for client due to error returned by CFStringCreateStringWithValidatedFormat.", "{\"msg%{public}.0s\":\"#Error, couldn't create prompt for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        }

        return 0;
      }
      v128 = 32;
      if (v131)
      {
        v104 = 0;
        goto LABEL_147;
      }
LABEL_137:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v134 = v60;
      value = v59;
      v105 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        v142 = 1026;
        LODWORD(v143) = v15;
        _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, unable to copy purpose string from client\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
      }
      if ((objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v136, "objectForKeyedSubscript:", CFSTR("isAutoPrompting")), "BOOLValue") & 1) == 0)
      {
        v131 = 0;
        alloc = kCFAllocatorDefault;
        v104 = 1;
LABEL_147:
        Mutable = CFDictionaryCreateMutable(alloc, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(Mutable, SBUserNotificationPendInSetupIfNotAllowedKey, kCFBooleanTrue);
        if (!*(_BYTE *)(a1 + 232))
          CFDictionarySetValue(Mutable, SBUserNotificationHideOnClonedDisplay, kCFBooleanTrue);
        if (value)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, value);
          CFRelease(value);
        }
        if (format)
          CFRelease(format);
        if (v134)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, v134);
          CFRelease(v134);
        }
        if (v130)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationOtherButtonTitleKey, v130);
          CFRelease(v130);
        }
        if (v53)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, v53);
          CFRelease(v53);
        }
        if (v15 <= 0x10)
        {
          if (((1 << v15) & 0x1EEBF) == 0)
          {
            CFDictionarySetValue(Mutable, SBUserNotificationAllowedApplicationsKey, &off_1022204E0);
LABEL_180:
            CFDictionarySetValue(Mutable, SBUserNotificationDefaultButtonTag, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v128));
            CFDictionarySetValue(Mutable, SBUserNotificationButtonLayoutDirectionKey, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
            if ((v31 & _os_feature_enabled_impl("CoreLocation", "cl_zoth")) == 1)
              -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("CLAuthPromptShowOnlyHerePill"));
            if (v129 && sub_100515A84())
            {
              v112 = +[NSExtensionItem extensionItemForDict:withName:withPayload:](NSExtensionItem, "extensionItemForDict:withName:withPayload:", objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v9), "dictionary"), cf, v136);
              *(_QWORD *)error = 0;
              v140 = v112;
              v113 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v140, 1), 1, error);
              if (*(_QWORD *)error)
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102154528);
                v114 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 68289283;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2113;
                  *(_QWORD *)&buf[20] = *(_QWORD *)error;
                  _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed archiving extension item\", \"error\":%{private, location:escape_only}@}", buf, 0x1Cu);
                }
              }
              else
              {
                v115 = v113;
                CFDictionarySetValue(Mutable, SBUserNotificationExtensionIdentifierKey, v129);
                CFDictionarySetValue(Mutable, SBUserNotificationExtensionItemsKey, v115);
              }
            }
            if ((v104 & 1) == 0)
            {
              CFDictionarySetValue(Mutable, kCFUserNotificationAlertMessageKey, v131);
              CFRelease(v131);
            }
            CFRelease(cf);
            objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
            v117 = v116;
            error[0] = 0;
            v118 = *(_DWORD *)a4;
            v119 = CFUserNotificationCreate(alloc, 0.0, 0x20uLL, error, Mutable);
            CFRelease(Mutable);
            if (v119)
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v120 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v9;
                v142 = 1026;
                LODWORD(v143) = v118;
                _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CUN Created client user notification for client\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
              }
              RunLoopSource = CFUserNotificationCreateRunLoopSource(alloc, v119, (CFUserNotificationCallBack)sub_1007F0F54, 0);
              if (RunLoopSource)
              {
                sub_1007F0FC0(a4, v119, v117);
                CFRelease(v119);
                v122 = (__CFRunLoop *)sub_100193530();
                CFRunLoopAddSource(v122, RunLoopSource, kCFRunLoopCommonModes);
                CFRelease(RunLoopSource);
                operator new();
              }
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v124 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v9;
                _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CUN Could not create runloop source for  CFUserNotification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102154528);
              }
              v125 = qword_1022A01D8;
              if (os_signpost_enabled((os_log_t)qword_1022A01D8))
              {
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v9;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v125, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CUN Could not create runloop source for  CFUserNotification", "{\"msg%{public}.0s\":\"#CUN Could not create runloop source for  CFUserNotification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
              }
              CFRelease(v119);
              return 0;
            }
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v123 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(_QWORD *)&buf[20] = v9;
              _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CUN Could not create CFUserNotification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
            }
            v18 = qword_1022A01D8;
            if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
              return 0;
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(_QWORD *)&buf[20] = v9;
            v20 = "#CUN Could not create CFUserNotification";
            v21 = "{\"msg%{public}.0s\":\"#CUN Could not create CFUserNotification\", \"Client\":%{public, location:escape_only}@}";
            goto LABEL_28;
          }
          sub_100197040();
          if (!sub_100081BD0()
            || (objc_msgSend(objc_msgSend(v9, "clientAnchor"), "isEqualToString:", CFSTR("com.apple.weather")) & 1) == 0)
          {
            if (a3)
            {
              if (sub_100247EA0(v9))
              {
                CFDictionarySetValue(Mutable, kCFUserNotificationAlertTopMostKey, &__kCFBooleanTrue);
                CFDictionarySetValue(Mutable, SBUserNotificationForcesModalAlertAppearance, &__kCFBooleanTrue);
                CFDictionarySetValue(Mutable, SBUserNotificationDisplayActionButtonOnLockScreen, &__kCFBooleanTrue);
              }
            }
            else if (objc_msgSend(v9, "bundleId")
                   && (objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v136, "objectForKeyedSubscript:", CFSTR("IsWebClip")), "BOOLValue") & 1) == 0)
            {
              v144 = objc_msgSend(v9, "bundleId");
              v109 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v144, 1);
              CFDictionarySetValue(Mutable, SBUserNotificationAllowedApplicationsKey, v109);
            }
          }
        }
        if (v15 - 13 <= 1)
        {
          CFDictionarySetValue(Mutable, SBUserNotificationAllowInSetupKey, &__kCFBooleanTrue);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v110 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_INFO, "#CUN LocationButton prompt allowed during buddy-setup", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            LOWORD(error[0]) = 0;
            LODWORD(v127) = 2;
            v111 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#CUN LocationButton prompt allowed during buddy-setup", error, v127);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::createAndPostClientUserNotification(CLClientKeyPath *, NSString *, CLClientManager_Type::AuthorizationRequest, NSDictionary *)", "%s\n", v111);
            if (v111 != buf)
              free(v111);
          }
        }
        goto LABEL_180;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v106 = qword_1022A01D8;
      v107 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v107)
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        v142 = 1026;
        LODWORD(v143) = v15;
        _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #autoPrompt fail to createAndPostClientUserNotification - purpose(UsageDescription) is NULL\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
        return 0;
      }
      return result;
    case 0xCu:
      v75 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v75, CFSTR("LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_TITLE"));
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      v76 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v76, CFSTR("LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_YES_BUTTON"));
      v77 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v77, CFSTR("LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_NO_BUTTON"));
      v78 = sub_1001AC584();
      v131 = (__CFString *)sub_100814D7C(v78, CFSTR("LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_PURPOSE"));
LABEL_94:
      v129 = 0;
      goto LABEL_123;
    case 0xDu:
      v79 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v79, CFSTR("LOCATION_CLIENT_PERMISSION_PLAIN_TITLE_FOR_LOCATION_BUTTONS"));
      v80 = sub_1001AC584();
      v131 = (__CFString *)sub_100814D7C(v80, CFSTR("LOCATION_CLIENT_PERMISSION_EXPLANATION_FOR_LOCATION_BUTTONS"));
      v81 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v81, CFSTR("LOCATION_CLIENT_PERMISSION_ALLOW_LOCATION_BUTTONS"));
      v82 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v82, CFSTR("LOCATION_CLIENT_PERMISSION_DENY_LOCATION_BUTTONS"));
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationTemporaryPreciseAuthPromptPlugin");
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      goto LABEL_123;
    case 0xEu:
      v83 = sub_1001AC584();
      format = (CFStringRef)sub_100814D7C(v83, CFSTR("LOCATION_CLIENT_PERMISSION_TITLE_FOR_LOCATION_BUTTONS"));
      v84 = sub_1001AC584();
      v131 = (__CFString *)sub_100814D7C(v84, CFSTR("LOCATION_CLIENT_PERMISSION_EXPLANATION_FOR_LOCATION_BUTTONS"));
      v85 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v85, CFSTR("LOCATION_CLIENT_PERMISSION_ALLOW_LOCATION_BUTTONS"));
      v86 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v86, CFSTR("LOCATION_CLIENT_PERMISSION_DENY_LOCATION_BUTTONS"));
      v87 = sub_1001AC584();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", (id)sub_100814D7C(v87, CFSTR("PRECISE_ON_PILL_BUTTON_TITLE")), CFSTR("PreciseButtonOnTitle"));
      v88 = sub_1001AC584();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v136, "setObject:forKeyedSubscript:", (id)sub_100814D7C(v88, CFSTR("PRECISE_OFF_PILL_BUTTON_TITLE")), CFSTR("PreciseButtonOffTitle"));
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationVanillaWhenInUseAuthPromptPlugin");
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      goto LABEL_123;
    case 0x10u:
      v129 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.corelocation.CoreLocationRepromptAlwaysAuthPromptPlugin");
      v89 = (_QWORD *)sub_1001AC584();
      format = sub_100814D80(v89, CFSTR("LOCATION_CLIENT_TRANSCRIPT_TITLE"));
      alloc = kCFAllocatorDefault;
      value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), format, &errorPtr, cf);
      v131 = (__CFString *)objc_msgSend(-[NSMutableDictionary objectForKey:](v136, "objectForKey:", CFSTR("UsageDescription")), "copy");
      if (!v131)
      {
        v90 = (_QWORD *)sub_1001AC584();
        v91 = sub_100814D80(v90, CFSTR("LOCATION_CLIENT_TRANSCRIPT_USAGE_DESCRIPTION"));
        v131 = (__CFString *)CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), v91, &errorPtr, cf);
        CFRelease(v91);
      }
      v92 = sub_1001AC584();
      v134 = (CFTypeRef)sub_100814D7C(v92, CFSTR("LOCATION_CLIENT_TRANSCRIPT_YES_BUTTON"));
      v93 = sub_1001AC584();
      v130 = (CFTypeRef)sub_100814D7C(v93, CFSTR("LOCATION_CLIENT_TRANSCRIPT_NO_BUTTON"));
      goto LABEL_123;
    default:
      v59 = 0;
      format = 0;
      v129 = 0;
      v130 = 0;
      v60 = 0;
      v53 = 0;
      v128 = 0;
      v31 = 0;
      goto LABEL_137;
  }
}

void sub_1007BFBB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  operator delete();
}

void sub_1007BFC38(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _QWORD *i;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  std::__shared_weak_count *v15;
  uint64_t v16;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v3, "isValidCKP"))
  {
    v4 = (_QWORD *)(a1 + 976);
    if (v3)
    {
      objc_msgSend(v3, "cppClientKey");
    }
    else
    {
      __p = 0;
      v15 = 0;
      v16 = 0;
    }
    v5 = sub_1001987C8(v4, (unsigned __int8 *)&__p);
    v6 = v5;
    if (SHIBYTE(v16) < 0)
    {
      operator delete(__p);
      if (!v6)
        return;
    }
    else if (!v5)
    {
      return;
    }
    for (i = (_QWORD *)*((_QWORD *)v6 + 7); i; i = (_QWORD *)*i)
    {
      v8 = (std::__shared_weak_count *)i[4];
      if (v8)
      {
        v9 = std::__shared_weak_count::lock(v8);
        v15 = v9;
        if (v9)
        {
          v10 = v9;
          v11 = (void *)i[3];
          __p = v11;
          if (v11)
            sub_1007207C0((uint64_t)v11);
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
    }
    sub_1000592D8(v4, v6, (uint64_t)&__p);
    sub_1007F616C((uint64_t)&__p, 0);
  }
}

void sub_1007BFD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007BFD78(uint64_t a1)
{
  _QWORD *i;
  _QWORD *j;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  for (i = *(_QWORD **)(a1 + 992); i; i = (_QWORD *)*i)
  {
    for (j = (_QWORD *)i[7]; j; j = (_QWORD *)*j)
    {
      v4 = (std::__shared_weak_count *)j[4];
      if (v4)
      {
        v5 = std::__shared_weak_count::lock(v4);
        if (v5)
        {
          v6 = v5;
          v7 = j[3];
          if (v7)
            sub_1007207C0(v7);
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
  sub_1007F7F50(a1 + 976);
}

void sub_1007BFE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007BFE34(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[24];

  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4))), "isValidCKP"))
  {
    v5 = (_QWORD *)(a1 + 976);
    v6 = sub_1001987C8(v5, (unsigned __int8 *)a2);
    if (v6)
    {
      v7 = v6;
      v8 = v6 + 40;
      v9 = sub_1007F7FE0((_QWORD *)v6 + 5, a2 + 6);
      if (v9)
      {
        v10 = v9;
        v11 = (std::__shared_weak_count *)v9[4];
        if (v11)
        {
          v12 = v9[3];
          p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
          do
            v14 = __ldxr(p_shared_weak_owners);
          while (__stxr(v14 + 1, p_shared_weak_owners));
          v15 = std::__shared_weak_count::lock(v11);
          if (v15)
          {
            v16 = v15;
            if (v12)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v18 = __ldaxr(p_shared_owners);
              while (__stlxr(v18 - 1, p_shared_owners));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v16);
              }
              std::__shared_weak_count::__release_weak(v11);
              return;
            }
            sub_1007F80F0(v8, v10);
            v19 = (unint64_t *)&v16->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          else
          {
            sub_1007F80F0(v8, v10);
          }
          std::__shared_weak_count::__release_weak(v11);
        }
        else
        {
          sub_1007F80F0(v8, v9);
        }
      }
      if (!*((_QWORD *)v7 + 8))
      {
        sub_1000592D8(v5, v7, (uint64_t)v21);
        sub_1007F616C((uint64_t)v21, 0);
      }
    }
  }
}

uint64_t sub_1007BFFF4(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  double Current;

  v7 = sub_1007BD564(a3);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100194D94(a1, a2, v7, a4, 0, 0, Current);
}

uint64_t sub_1007C0048(uint64_t a1, uint64_t a2, int a3)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return sub_100194D94(a1, a2, 6, a3, 0, 0, Current);
}

void sub_1007C0090(id *a1, uint64_t a2, double *a3)
{
  id v6;
  CLClientManagerAuthorizationContext *v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v6 = objc_msgSend(a1[17], "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v6, "isValidCKP"))
  {
    objc_msgSend(a1[17], "setDouble:forKey:atKeyPath:", CFSTR("TimeMissing"), v6, *a3);
    v7 = sub_10019EE88((uint64_t)a1, (uint64_t)v6, &xmmword_101C17478);
    sub_1001A4C54(a1, (uint64_t)v6, (uint64_t)v7);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"How can an app be missing if we don't have an entry for it?\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v9 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "How can an app be missing if we don't have an entry for it?", "{\"msg%{public}.0s\":\"How can an app be missing if we don't have an entry for it?\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

id sub_1007C02A0(id *a1, uint64_t a2)
{
  id v3;
  id result;
  CLClientManagerAuthorizationContext *v5;

  v3 = objc_msgSend(a1[17], "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v3, "isValidCKP");
  if ((_DWORD)result)
  {
    objc_msgSend(a1[17], "removeValueForKey:atKeyPath:", CFSTR("TimeMissing"), v3);
    v5 = sub_10019EE88((uint64_t)a1, (uint64_t)v3, &xmmword_101C17478);
    return (id)sub_1001A4C54(a1, (uint64_t)v3, (uint64_t)v5);
  }
  return result;
}

id sub_1007C0318(uint64_t a1, uint64_t a2)
{
  id v3;
  id result;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v3, "isValidCKP");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("PromptedSettings"), v3, 0);
  return result;
}

id sub_1007C0370(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  _QWORD v6[6];

  v3 = sub_100196E90(a1, a2);
  objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("PromptedSettings"), v3, 0)+ 1, CFSTR("PromptedSettings"), v3);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  v4 = *(void **)(a1 + 136);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10020F11C;
  v6[3] = &unk_102153D78;
  v6[4] = v3;
  v6[5] = a1;
  return objc_msgSend(v4, "iterateIdentitiesRelatedToKeyPath:withBlock:", v3, v6);
}

void sub_1007C0424(uint64_t a1, void *a2, int a3, uint64_t *a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  NSObject *v17;
  const char *v18;
  id v19;
  void *__p;
  _BYTE v21[24];

  if (!objc_msgSend(a2, "isValidCKP"))
    return;
  if (objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      __p = (void *)68289282;
      *(_WORD *)v21 = 2082;
      *(_QWORD *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(_QWORD *)&v21[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ClearClient removing client entry for System Service\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v9 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      __p = (void *)68289282;
      *(_WORD *)v21 = 2082;
      *(_QWORD *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(_QWORD *)&v21[12] = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ClearClient removing client entry for System Service", "{\"msg%{public}.0s\":\"#ClearClient removing client entry for System Service\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289282;
    *(_WORD *)v21 = 2082;
    *(_QWORD *)&v21[2] = "";
    *(_WORD *)&v21[10] = 2114;
    *(_QWORD *)&v21[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient removing client entry\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  sub_1007BFC38(a1, (uint64_t)a2);
  if (a3)
  {
    v11 = (const char *)objc_msgSend(objc_msgSend(a2, "legacyClientKey"), "UTF8String");
    v12 = v11 ? (char *)v11 : "";
    sub_1015A2E04(&__p, v12);
    sub_1007C0900(a1, (uint64_t *)&__p, a4);
    if ((v21[15] & 0x80000000) != 0)
      operator delete(__p);
  }
  v13 = (char *)objc_msgSend(objc_msgSend(a2, "clientAnchor"), "UTF8String");
  if (v13)
    v14 = v13;
  else
    v14 = "";
  sub_1015A2E04(&__p, v14);
  v15 = sub_1001987C8(qword_1023049C8, (unsigned __int8 *)&__p);
  v16 = v15;
  if ((v21[15] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (v16)
      goto LABEL_25;
LABEL_30:
    v19 = objc_msgSend(*(id *)(a1 + 416), "objectForKey:", a2);
    if (v19)
    {
      sub_1007C0B50(a1, a2, v19, 1);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_40;
      __p = (void *)68289282;
      *(_WORD *)v21 = 2082;
      *(_QWORD *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(_QWORD *)&v21[12] = a2;
      v18 = "{\"msg%{public}.0s\":\"#ClearClient Completely removed attribution for client\", \"Client\":%{public, locati"
            "on:escape_only}@}";
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_40;
      __p = (void *)68289282;
      *(_WORD *)v21 = 2082;
      *(_QWORD *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(_QWORD *)&v21[12] = a2;
      v18 = "{\"msg%{public}.0s\":\"#ClearClient client is not attributed. No special deattribution needed\", \"Client\":"
            "%{public, location:escape_only}@}";
    }
    goto LABEL_39;
  }
  if (!v15)
    goto LABEL_30;
LABEL_25:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v17 = qword_1022A01D8;
  if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    goto LABEL_40;
  __p = (void *)68289282;
  *(_WORD *)v21 = 2082;
  *(_QWORD *)&v21[2] = "";
  *(_WORD *)&v21[10] = 2114;
  *(_QWORD *)&v21[12] = a2;
  v18 = "{\"msg%{public}.0s\":\"#ClearClient attribution unavailable client\", \"Client\":%{public, location:escape_only}@}";
LABEL_39:
  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&__p, 0x1Cu);
LABEL_40:
  objc_msgSend(*(id *)(a1 + 136), "removeDictionaryAtKeyPath:", a2, __p, *(_OWORD *)v21, *(_QWORD *)&v21[16]);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  sub_1015A2E04(&__p, "");
  sub_100193838(a1, a2, (uint64_t)&__p);
  if ((v21[15] & 0x80000000) != 0)
    operator delete(__p);
}

void sub_1007C08D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007C0900(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  CLCompanionSyncAuthObject *v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  int v14;
  uint64_t *v15;
  uint8_t buf[4];
  uint64_t *v17;

  sub_100197040();
  if (sub_10019DF90())
  {
    v6 = objc_alloc_init(CLCompanionSyncAuthObject);
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    -[CLCompanionSyncAuthObject setClientKey:](v6, "setClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
    -[CLCompanionSyncAuthObject setOperationType:](v6, "setOperationType:", 3);
    v8 = *(void **)(a1 + 1536);
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = (uint64_t *)*a3;
    objc_msgSend(v8, "deleteObject:withSyncSessionReason:", v6, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = (uint64_t *)*a2;
      *(_DWORD *)buf = 136446210;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#authsync deleteObject: %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      if (*((char *)a2 + 23) >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      v14 = 136446210;
      v15 = v12;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#authsync deleteObject: %{public}s", &v14, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::synchronizeAuthorizationChangeTypeDelete(const std::string &, const std::string &)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
}

id sub_1007C0B50(uint64_t a1, void *a2, void *a3, char a4)
{
  double v8;
  double v9;

  objc_msgSend(objc_msgSend(a3, "attributionTimer"), "nextFireDelay");
  v9 = v8;
  objc_msgSend(objc_msgSend(a3, "attributionTimer"), "invalidate");
  if (v9 < 1.79769313e308)
    sub_1007C3CD4(a1, a2, (uint64_t)objc_msgSend(a3, "attributionIdentifier"), a4);
  return objc_msgSend(*(id *)(a1 + 416), "removeObjectForKey:", a2);
}

id sub_1007C0BD8(id *a1)
{
  sub_1007BFD78((uint64_t)a1);
  objc_msgSend(a1[17], "clear");
  objc_msgSend(a1[135], "removeAllObjects");
  objc_msgSend(a1[134], "setClientsAuthorizationMap:", objc_msgSend(a1[135], "copy"));
  objc_msgSend(0, "isValidCKP");
  return objc_msgSend(a1[134], "setPersistentStoreDictionary:forClient:", 0, objc_msgSend(0, "legacyClientKey"));
}

id sub_1007C0C44(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  objc_msgSend(*(id *)(a1 + 1080), "removeAllObjects");
  objc_msgSend(0, "isValidCKP");
  objc_msgSend(*(id *)(a1 + 1072), "setPersistentStoreDictionary:forClient:", 0, objc_msgSend(0, "legacyClientKey"));
  v2 = *(void **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007C0CD0;
  v4[3] = &unk_102153AE8;
  v4[4] = a1;
  return objc_msgSend(v2, "iterateAllAnchorKeyPathsWithBlock:", v4);
}

uint64_t sub_1007C0CD0(uint64_t a1, uint64_t a2)
{
  id *v3;
  CLClientManagerAuthorizationContext *v4;

  v3 = *(id **)(a1 + 32);
  v4 = sub_10019EE88((uint64_t)v3, a2, &xmmword_101C17478);
  return sub_1001A4C54(v3, a2, (uint64_t)v4);
}

void sub_1007C0D0C(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  id v9;
  NSObject *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  id v14;
  void *v15[2];
  uint64_t v16;
  std::string __p;
  void *v18[2];
  uint64_t v19;
  _BYTE buf[28];

  v9 = sub_100195B0C(a1, a2);
  if (objc_msgSend(v9, "isAuthSharingSubIdentity"))
    v9 = objc_msgSend(v9, "anchorKeyPath");
  if (a4 == 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#IncidentalPrompt CLCM:InUseAssertion IncidentalPresence\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1007C0FDC(a1, v9);
  }
  v11 = *(_QWORD **)(a1 + 376);
  if (v9)
  {
    objc_msgSend(v9, "cppClientKey");
  }
  else
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
  }
  __p = *a3;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  sub_1001FA3D8(&__p, v11, (uint64_t)v18, a4, (uint64_t *)a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  v12 = (char *)objc_msgSend(objc_msgSend(v9, "legacyClientKey"), "UTF8String");
  if (v12)
    v13 = v12;
  else
    v13 = "";
  sub_1015A2E04(buf, v13);
  if (sub_100C1F99C(a5))
  {
    sub_100311C38(a1 + 616, buf, (uint64_t)buf);
    v14 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", v9);
    if (v14)
    {
      if (objc_msgSend(*(id *)(a1 + 392), "objectForKeyedSubscript:", v14))
      {
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_100115CE4(v15, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)v15 = *(_OWORD *)buf;
          v16 = *(_QWORD *)&buf[16];
        }
        sub_1007C1858(a1, (uint64_t *)v15);
        if (SHIBYTE(v16) < 0)
          operator delete(v15[0]);
        sub_1007C1A8C();
      }
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
}

void sub_1007C0F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  sub_100C1EE6C(v33);
  _Unwind_Resume(a1);
}

BOOL sub_1007C0FDC(uint64_t a1, void *a2)
{
  id v2;
  id v4;
  unsigned int v5;
  unsigned int v6;
  NSObject *v7;
  CLClientManagerAuthorizationContext *v8;
  uint64_t v9;
  _BOOL8 result;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  uint64_t v16;
  unsigned int v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  NSObject *v28;
  NSObject *v29;
  void *__p[2];
  char v31;
  _BYTE v32[72];
  _WORD v33[8];
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v2 = a2;
  if ((objc_msgSend(a2, "isValidCKP") & 1) == 0 && !objc_msgSend(*(id *)(a1 + 1096), "count"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#IncidentalPrompt skip prompting. No client for incidental prompt", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v33[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#IncidentalPrompt skip prompting. No client for incidental prompt", v33, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::considerPromptingForIncidentalUse(CLClientKeyPath *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
      return 0;
    }
    return result;
  }
  if ((objc_msgSend(v2, "isValidCKP") & 1) == 0)
    v2 = objc_msgSend(*(id *)(a1 + 1096), "lastObject");
  v4 = sub_100196E90(a1, (uint64_t)v2);
  v5 = sub_100248810(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v4), "dictionary"));
  if (v5 != 1)
  {
    v6 = v5;
    if (v5)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      result = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO);
      if (!result)
        return result;
      *(_DWORD *)buf = 68289538;
      v35 = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2114;
      v39 = v4;
      v40 = 2050;
      v41 = v6;
      v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. IncidentalUseMode should be UnDetermined\", \"Clien"
            "t\":%{public, location:escape_only}@, \"IncidentalUseMode\":%{public, location:CLClientIncidentalUseMode}lld}";
      v13 = v12;
      v14 = OS_LOG_TYPE_INFO;
      v15 = 38;
      goto LABEL_52;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v35 = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2114;
      v39 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#IncidentalPrompt Ineligible marking as NotDetermined\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1007C3608(a1, 1, (uint64_t)v4);
  }
  v8 = sub_1000B9630(a1, (uint64_t)v4, &xmmword_101C17478);
  if (-[CLClientManagerAuthorizationContext registrationResult](v8, "registrationResult") != 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v16 = qword_1022A01D8;
    result = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO);
    if (!result)
      return result;
    v17 = -[CLClientManagerAuthorizationContext registrationResult](v8, "registrationResult");
    *(_DWORD *)buf = 68289538;
    v35 = 0;
    v36 = 2082;
    v37 = "";
    v38 = 2114;
    v39 = v4;
    v40 = 1026;
    LODWORD(v41) = v17;
    v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. Registration Result should be WIU\", \"Client\":%{pub"
          "lic, location:escape_only}@, \"RegistrationResult\":%{public}d}";
    v13 = v16;
    v14 = OS_LOG_TYPE_INFO;
    v15 = 34;
    goto LABEL_52;
  }
  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    result = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)buf = 68289282;
      v35 = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2114;
      v39 = v4;
      v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. Restrictions enabled\", \"Client\":%{public, locati"
            "on:escape_only}@}";
LABEL_51:
      v13 = v9;
      v14 = OS_LOG_TYPE_INFO;
      v15 = 28;
      goto LABEL_52;
    }
    return result;
  }
  if ((objc_msgSend(*(id *)(a1 + 1096), "containsObject:", v4) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      v35 = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2114;
      v39 = v4;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#IncidentalPrompt client queued\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(a1 + 1096), "addObject:", v4);
  }
  if (*(_BYTE *)(a1 + 1060))
  {
    if (!*(_QWORD *)(a1 + 272))
    {
      sub_1015A2E04(__p, "");
      sub_1007F5908((uint64_t)v32, 12, (uint64_t)v4, 0, (__int128 *)__p);
      v27 = sub_1007BDDB4(a1, (uint64_t)v4, 0, (uint64_t)v32, 0);
      sub_100235568((uint64_t)v32);
      if (v31 < 0)
        operator delete(__p[0]);
      if (v27)
        return 1;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v28 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289282;
        v35 = 0;
        v36 = 2082;
        v37 = "";
        v38 = 2114;
        v39 = v4;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Could not post #IncidentalUsePrompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v29 = qword_1022A01D8;
      result = os_signpost_enabled((os_log_t)qword_1022A01D8);
      if (result)
      {
        *(_DWORD *)buf = 68289282;
        v35 = 0;
        v36 = 2082;
        v37 = "";
        v38 = 2114;
        v39 = v4;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Could not post #IncidentalUsePrompt", "{\"msg%{public}.0s\":\"#Warning Could not post #IncidentalUsePrompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        return 0;
      }
      return result;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v22 = qword_1022A01D8;
    v23 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v23)
      return result;
    v24 = *(unsigned int **)(a1 + 272);
    v25 = *((_QWORD *)v24 + 1);
    v26 = *v24;
    *(_DWORD *)buf = 68289794;
    v35 = 0;
    v36 = 2082;
    v37 = "";
    v38 = 2114;
    v39 = v4;
    v40 = 2114;
    v41 = v25;
    v42 = 2050;
    v43 = v26;
    v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. InflightPromptAuthorizationRequest found.\", \"Client"
          "\":%{public, location:escape_only}@, \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestTyp"
          "e\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    v13 = v22;
    v14 = OS_LOG_TYPE_DEFAULT;
    v15 = 48;
LABEL_52:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v11, buf, v15);
    return 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  result = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO);
  if (result)
  {
    *(_DWORD *)buf = 68289282;
    v35 = 0;
    v36 = 2082;
    v37 = "";
    v38 = 2114;
    v39 = v4;
    v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. Not at homescreen.\", \"Client\":%{public, location:escape_only}@}";
    goto LABEL_51;
  }
  return result;
}

void sub_1007C1824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_100235568((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1007C1858(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  NSString *v5;
  id v6;
  double v7;
  double Current;
  id v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;

  v4 = a2;
  if (*((char *)a2 + 23) < 0)
    v4 = (uint64_t *)*a2;
  v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v6 = objc_msgSend(*(id *)(a1 + 584), "objectForKey:", v5);
  if (v6)
  {
    objc_msgSend(v6, "doubleValue");
    Current = v7;
  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(*(id *)(a1 + 584), "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), v5);
  }
  v9 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary", v5);
  v11 = (uint64_t *)qword_1023049F0;
  for (i = qword_1023049F8; v11 != (uint64_t *)i; ++v11)
  {
    v12 = *v11;
    v18 = 0;
    v19 = 0;
    sub_100195BD4(v12, &v19, &v18);
    v13 = v19;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v15 = a2;
      if (*((char *)a2 + 23) < 0)
        v15 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68289794;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = v15;
      v26 = 2050;
      v27 = v12;
      v28 = 1026;
      v29 = 1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync munged starttime for watch\", \"client\":%{public, location:escape_only}s, \"service\":%{public, location:CLClientServiceType}lld, \"isReceivingLocation\":%{public}hhd}", buf, 0x2Cu);
    }
    objc_msgSend(v9, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current), v13);
  }
  sub_1007C1A8C();
  return objc_msgSend(*(id *)(a1 + 1528), "client:didChangeUsageData:", v17, v9);
}

uint64_t sub_1007C1A8C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1001FD94C();
  sub_10023EC14(v0);
  v1 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 944))(v1);
}

uint64_t sub_1007C1AC8(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  v3 = objc_msgSend(sub_100196E90(a1, a2), "legacyClientKey");
  sub_1015A2E04(__p, (char *)objc_msgSend(v3, "UTF8String"));
  sub_1007C1BA4(a1, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  objc_msgSend(*(id *)(a1 + 584), "removeObjectForKey:", v3);
  sub_1015A2E04(v5, (char *)objc_msgSend(v3, "UTF8String"));
  sub_10019C594((_QWORD *)(a1 + 616), (unsigned __int8 *)v5);
  if (v6 < 0)
    operator delete(v5[0]);
  return sub_1007C1A8C();
}

void sub_1007C1B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007C1BA4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  NSString *v4;
  id v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  NSObject *v12;
  uint64_t *v13;
  double Current;
  id v15;
  double v16;
  NSObject *v17;
  __int128 v19;
  __CFString *v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t *v28;
  __int16 v29;
  uint64_t v30;

  v3 = a2;
  if (*((char *)a2 + 23) < 0)
    v3 = (uint64_t *)*a2;
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v8 = (uint64_t *)qword_1023049F0;
  v7 = qword_1023049F8;
  if (qword_1023049F0 != qword_1023049F8)
  {
    *(_QWORD *)&v6 = 68289026;
    v19 = v6;
    do
    {
      v9 = *v8;
      v21 = 0;
      v22 = 0;
      sub_100195BD4(v9, &v22, &v21);
      v11 = v21;
      v10 = v22;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v13 = a2;
        if (*((char *)a2 + 23) < 0)
          v13 = (uint64_t *)*a2;
        *(_DWORD *)buf = 68289538;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        v28 = v13;
        v29 = 2050;
        v30 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync send stoptime due to expiry of temp assertion\", \"client\":%{public, location:escape_only}s, \"service\":%{public, location:CLClientServiceType}lld}", buf, 0x26u);
      }
      Current = CFAbsoluteTimeGetCurrent();
      v15 = objc_msgSend(*(id *)(a1 + 584), "objectForKey:", v4);
      if (v15)
      {
        objc_msgSend(v15, "doubleValue");
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v19;
          v24 = 0;
          v25 = 2082;
          v26 = "";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #Warning Missing start time but stop location usage sync is called\"}", buf, 0x12u);
        }
        v16 = Current + -10.0;
      }
      objc_msgSend(v5, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16, v19), v10);
      objc_msgSend(v5, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current), v11);
      ++v8;
    }
    while (v8 != (uint64_t *)v7);
  }
  return objc_msgSend(*(id *)(a1 + 1528), "client:didChangeUsageData:", v4, v5);
}

void sub_1007C1E4C(uint64_t a1, void *a2)
{
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  NSObject *v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void *v15;

  v4 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(a2, "subIdentityType") == 122)
  {
    v5 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("TemporaryAuthorization"), a2, 0);
    if (v5)
    {
      if ((v5 & 5) != 0)
      {
        sub_1015A2E04(__p, "ClientRemoved");
        sub_1007C0424(v4, a2, 1, (uint64_t *)__p);
        if (v9 < 0)
          operator delete(__p[0]);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v6 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          v11 = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2114;
          v15 = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth  tmp authorized zone deleted\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v7 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          v11 = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2114;
          v15 = a2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth key deleted for zone\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        objc_msgSend(*(id *)(v4 + 136), "removeValueForKey:atKeyPath:", CFSTR("TemporaryAuthorization"), a2);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
}

void sub_1007C2074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007C2098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v5, "isValidCKP"))
  {
    v6 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("IncidentalUseMode"), v5, 0);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#IncidentalUseMode able to get client's incidental use mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#IncidentalUseMode able to get client's incidental use mode", v14, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::getIncidentalUseMode(CLClientKeyPath *, void (^)(CLClientIncidentalUseMode))", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    v6 = 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v16 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#IncidentalUseMode  returning with value:%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14[0] = 67109120;
    v14[1] = (_DWORD)v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#IncidentalUseMode  returning with value:%d", v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::getIncidentalUseMode(CLClientKeyPath *, void (^)(CLClientIncidentalUseMode))", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return (*(uint64_t (**)(uint64_t, id))(a3 + 16))(a3, v6);
}

void sub_1007C23C0(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;
  NSObject *v6;
  const __CFDate *v7;
  id v8;
  double AbsoluteTime;
  id v10;
  id v11;
  NSObject *v12;
  _QWORD v13[7];
  int v14;
  uint8_t buf[8];
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = a2;
  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v16) = 2082;
      *(_QWORD *)((char *)&v16 + 2) = "";
      WORD5(v16) = 1026;
      HIDWORD(v16) = v4;
      LOWORD(v17) = 2114;
      *(_QWORD *)((char *)&v17 + 2) = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Reported\", \"utility\":%{public}d, \"date\":%{public, location:escape_only}@}", buf, 0x22u);
    }
    v7 = (const __CFDate *)objc_msgSend(a3, "dateByAddingTimeInterval:", -600.0);
    v8 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v7, a3);
    AbsoluteTime = CFDateGetAbsoluteTime(v7);
    if (AbsoluteTime < CFAbsoluteTimeGetCurrent())
    {
      v10 = objc_msgSend(objc_alloc((Class)RTStoredLocationEnumerationOptions), "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:type:", v8, 0, 0, 14, 0.0);
      objc_msgSend(v10, "setSmoothingRequired:", 1);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&v16 = buf;
      *((_QWORD *)&v16 + 1) = 0x3052000000;
      *(_QWORD *)&v17 = sub_100206D6C;
      *((_QWORD *)&v17 + 1) = sub_100207B20;
      v18 = 0;
      v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLRoutineMonitor"), CFSTR("CLClientManager"));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1007C2694;
      v13[3] = &unk_102153C88;
      v13[5] = buf;
      v13[6] = a1;
      v13[4] = v8;
      v14 = v4;
      objc_msgSend(v11, "enumerateStoredLocationsWithOptions:withReply:", v10, v13);
      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v16) = 2082;
      *(_QWORD *)((char *)&v16 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007C2674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007C2694(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  const __CFDate *v18;
  const __CFDate *v19;
  id v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  NSObject *v27;
  id v28;
  int v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  _BYTE v34[10];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v29 = 68289282;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2114;
      *(_QWORD *)v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Got error fetching locations from CoreRoutine\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v29 = 68289282;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2114;
      *(_QWORD *)v34 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LocationUtilityEvent Got error fetching locations from CoreRoutine", "{\"msg%{public}.0s\":\"#LocationUtilityEvent Got error fetching locations from CoreRoutine\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 68289538;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 1026;
      *(_DWORD *)v34 = a4;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = objc_msgSend(a2, "count");
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Reply back from CoreRoutine\", \"enumerationCompleted\":%{public}d, \"count\":%{public}d}", (uint8_t *)&v29, 0x1Eu);
    }
    if ((a4 & 1) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
      {
        objc_msgSend(objc_msgSend(*(id *)(v10 + 560), "startDate"), "timeIntervalSinceReferenceDate");
        v13 = v12;
        objc_msgSend(objc_msgSend(*(id *)(v10 + 560), "endDate"), "timeIntervalSinceReferenceDate");
        v15 = v14;
        v16 = v13 + (v14 - v13) * 0.5;
        objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "timestamp"), "timeIntervalSinceReferenceDate");
        if (v17 <= v16)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v25 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v26 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "timestamp");
            v29 = 68290050;
            v31 = 2082;
            v30 = 0;
            v32 = "";
            v33 = 2114;
            *(_QWORD *)v34 = v26;
            *(_WORD *)&v34[8] = 2050;
            v35 = v16;
            v36 = 2050;
            v37 = v13;
            v38 = 2050;
            v39 = v15;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Location timestamp is earlier than or equal to last interval in archive. Will not persist.\", \"lastLocation.timestamp\":%{public, location:escape_only}@, \"lastLocationUtilityEventIntervalInArchiveMidPoint\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveStartTime\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveEndTime\":\"%{public}.6f\"}", (uint8_t *)&v29, 0x3Au);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v27 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v28 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "timestamp");
            v29 = 68290050;
            v31 = 2082;
            v30 = 0;
            v32 = "";
            v33 = 2114;
            *(_QWORD *)v34 = v28;
            *(_WORD *)&v34[8] = 2050;
            v35 = v16;
            v36 = 2050;
            v37 = v13;
            v38 = 2050;
            v39 = v15;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LocationUtilityEvent Location timestamp is earlier than or equal to last interval in archive. Will not persist.", "{\"msg%{public}.0s\":\"#LocationUtilityEvent Location timestamp is earlier than or equal to last interval in archive. Will not persist.\", \"lastLocation.timestamp\":%{public, location:escape_only}@, \"lastLocationUtilityEventIntervalInArchiveMidPoint\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveStartTime\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveEndTime\":\"%{public}.6f\"}", (uint8_t *)&v29, 0x3Au);
          }
        }
        else
        {
          *(double *)&v18 = COERCE_DOUBLE(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "timestamp"), "dateByAddingTimeInterval:", -0.5));
          *(double *)&v19 = COERCE_DOUBLE(objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "timestamp"), "dateByAddingTimeInterval:", 0.5));
          v20 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
          objc_msgSend(v20, "setStartTime:", CFDateGetAbsoluteTime(v18));
          objc_msgSend(v20, "setStopTime:", CFDateGetAbsoluteTime(v19));
          objc_msgSend(v20, "setScore:", *(unsigned int *)(a1 + 56));
          objc_msgSend(*(id *)(v10 + 552), "writeSecondaryObject:toField:", v20, 1);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v21 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v22 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "timestamp");
            v29 = 68289794;
            v30 = 0;
            v31 = 2082;
            v32 = "";
            v33 = 2114;
            *(_QWORD *)v34 = v22;
            *(_WORD *)&v34[8] = 2114;
            v35 = *(double *)&v18;
            v36 = 2114;
            v37 = *(double *)&v19;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Persist utility event interval\", \"lastLocation.timestamp\":%{public, location:escape_only}@, \"locationUtilityEventIntervalStart\":%{public, location:escape_only}@, \"locationUtilityEventIntervalEnd\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x30u);
          }

          *(_QWORD *)(v10 + 560) = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v18, v19);
        }

      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v23 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v24 = *(_QWORD *)(a1 + 32);
          v29 = 68289282;
          v30 = 0;
          v31 = 2082;
          v32 = "";
          v33 = 2114;
          *(_QWORD *)v34 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent No locations in interval.\", \"interval\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
        }
      }
    }
    else if (objc_msgSend(a2, "count"))
    {

      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(a2, "lastObject");
    }
  }
}

id sub_1007C2CF8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  NSObject *v14;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[6];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  _BYTE v32[128];

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    obj = +[NSMutableArray array](NSMutableArray, "array");
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Retrieval request\", \"lookBackWindowStartDate\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (a2)
    {
      v5 = *(void **)(a1 + 552);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1007C31F8;
      v21[3] = &unk_102153CB0;
      v21[4] = a2;
      v21[5] = obj;
      sub_1007C3040(v5, 0, (uint64_t)v21);
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v32, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v18;
        do
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v18 != v8)
              objc_enumerationMutation(obj);
            v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v9);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v11 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              v12 = objc_msgSend(v10, "startDate");
              v13 = objc_msgSend(v10, "endDate");
              *(_DWORD *)buf = 68289794;
              v23 = 0;
              v24 = 2082;
              v25 = "";
              v26 = 2114;
              v27 = a2;
              v28 = 2114;
              v29 = v12;
              v30 = 2114;
              v31 = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Retrieved interval\", \"lookBackWindowStartDate\":%{public, location:escape_only}@, \"intervalStartDate\":%{public, location:escape_only}@, \"intervalEndDate\":%{public, location:escape_only}@}", buf, 0x30u);
            }
            v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v32, 16);
        }
        while (v7);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
    return 0;
  }
  return obj;
}

void sub_1007C3040(void *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD v7[8];
  _QWORD v8[4];
  uint8_t buf[8];
  __int128 v10;
  uint64_t v11;

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&v10 = buf;
    *((_QWORD *)&v10 + 1) = 0x2020000000;
    v11 = 0;
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x2020000000;
    v8[3] = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1007D25F4;
    v7[3] = &unk_102153F08;
    v7[6] = buf;
    v7[7] = v8;
    v7[4] = a2;
    v7[5] = a3;
    objc_msgSend(a1, "iterateSecondaryData:forField:withHandler:", objc_msgSend(a1, "mappedSecondaryData"), 1, v7);
    _Block_object_dispose(v8, 8);
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v10) = 2082;
      *(_QWORD *)((char *)&v10 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007C31D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1007C31F8(uint64_t a1, double a2, double a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceReferenceDate");
  if ((a3 - a2) * 0.5 + a2 >= v6)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a2), objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a3)));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9[0] = 68289794;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v8;
      v14 = 1026;
      v15 = (int)a2;
      v16 = 1026;
      v17 = (int)a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Retrieved interval prior\", \"lookBackWindowStartDate\":%{public, location:escape_only}@, \"startTime\":%{public}d, \"endTime\":%{public}d}", (uint8_t *)v9, 0x28u);
    }
  }
}

void sub_1007C3390(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  uint8_t buf[8];
  _BYTE v9[20];

  v3 = sub_100196E90(a1, a2);
  if (!objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
LABEL_6:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    goto LABEL_8;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v9 = 2082;
    *(_QWORD *)&v9[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning location services settings are frozen by restrictions - resetting\"}", buf, 0x12u);
    goto LABEL_6;
  }
LABEL_8:
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v9 = 2082;
    *(_QWORD *)&v9[2] = "";
    *(_WORD *)&v9[10] = 2114;
    *(_QWORD *)&v9[12] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"resetting and disconnecting client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  sub_1007BC514(a1, (uint64_t)v3);
  if (v3)
  {
    objc_msgSend(v3, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)&v9[8] = 0;
  }
  sub_10019CD70((uint64_t **)(a1 + 728), (const void **)buf);
  if ((v9[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v3)
      goto LABEL_15;
  }
  else if (v3)
  {
LABEL_15:
    objc_msgSend(v3, "cppClientKey");
    goto LABEL_18;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
LABEL_18:
  sub_10019CD70((uint64_t **)(a1 + 752), (const void **)buf);
  if ((v9[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(__p, "ClientRemoved");
  sub_1007C0424(a1, v3, 1, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1007C35CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007C3608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[8];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:");
  v7 = objc_msgSend(v6, "isValidCKP");
  if ((_DWORD)v7)
  {
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a2, CFSTR("IncidentalUseMode"), v6);
    objc_msgSend(*(id *)(a1 + 136), "persist");
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#IncidentalUseMode able to SET client's incidental use mode:%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v14[0] = 67109120;
      v14[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#IncidentalUseMode able to SET client's incidental use mode:%d", v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::setIncidentalUseMode(CLClientIncidentalUseMode, CLClientKeyPath *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_1015A2E04(buf, "");
    sub_100193838(a1, v6, (uint64_t)buf);
    if (SBYTE3(v19) < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to find client to update #IncidentalUseMode\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to find client to update #IncidentalUseMode", "{\"msg%{public}.0s\":\"Unable to find client to update #IncidentalUseMode\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return v7;
}

void sub_1007C3964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007C3988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;

  v5 = sub_100195B0C(a1, a3);
  objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a2, CFSTR("LocationButtonUseMode"), v5);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    v8[0] = 68289538;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2114;
    v12 = v5;
    v13 = 2050;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LocationButtonUseMode updated\", \"Client\":%{public, location:escape_only}@, \"Mode\":%{public, location:CLClientLocationButtonUseMode}lld}", (uint8_t *)v8, 0x26u);
  }
  return 1;
}

void sub_1007C3AE4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 72))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      v9 = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = v4;
      v15 = 2114;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution Attribution timer fired\", \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
  }
  sub_1007C3CD4(v2, *(void **)(a1 + 48), (uint64_t)objc_msgSend(*(id *)(a1 + 40), "attributionIdentifier"), 0);
  if (!objc_msgSend(*(id *)(a1 + 40), "totalAttributionCount"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "attributionTimer"), "invalidate");
    objc_msgSend(*(id *)(a1 + 56), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)(a1 + 72))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_QWORD *)(a1 + 40);
        v9 = 68289538;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        v13 = 2114;
        v14 = v7;
        v15 = 2114;
        v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution No subscriptions remaining; removing AttributionRecord for cli"
          "ent\", \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}",
          (uint8_t *)&v9,
          0x26u);
      }
    }
  }
}

void sub_1007C3CD4(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  NSObject *v8;
  NSString *v9;
  void *v10;
  _QWORD v11[5];
  _QWORD v12[5];
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;

  sub_100197040();
  if (sub_1001974CC())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v9 = -[NSUUID UUIDString](+[NSUUID UUID](NSUUID, "UUID"), "UUIDString");
      *(_DWORD *)buf = 68289794;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = a2;
      v20 = 2114;
      v21 = a3;
      v22 = 2082;
      v23 = -[NSString UTF8String](v9, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SystemStatus Publishing receiving location interval end\", \"Client\":%{public, location:escape_only}@, \"AttributionIdentifier\":%{public, location:escape_only}@, \"MessageUUID\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    else
    {
      v9 = 0;
    }
    v10 = *(void **)(a1 + 400);
    v11[4] = v9;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1007C4530;
    v12[3] = &unk_102153D28;
    v12[4] = a3;
    v13 = a4;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1007C4840;
    v11[3] = &unk_10212BB58;
    objc_msgSend(v10, "updateVolatileData:completion:", v12, v11);
    if (_os_feature_enabled_impl("CoreLocation", "CLSwissLocationAttribution"))
      sub_10019E180(a1, *(void **)(a1 + 544), (_QWORD *)(a1 + 504), a2);
  }
}

void sub_1007C3E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  id v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  id v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  char v23;
  void *__p;
  __int16 v25;
  const char *v26;
  __int16 v27;
  _BYTE v28[14];
  __int16 v29;
  void *v30;

  sub_100197040();
  if (!sub_1001974CC())
    return;
  v6 = sub_100196E90(a1, a2);
  v7 = objc_msgSend(v6, "clientAnchor");
  if (!v7)
    goto LABEL_5;
  sub_1015A2E04(&__p, (char *)objc_msgSend(v7, "UTF8String"));
  v8 = sub_1001987C8(qword_1023049C8, (unsigned __int8 *)&__p);
  v9 = v8;
  if ((v28[3] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (v9)
    {
LABEL_5:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        __p = (void *)68289282;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        *(_QWORD *)v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting deattribution for attribution-unavailable client. Aborting deattribution\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v11 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        __p = (void *)68289282;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        *(_QWORD *)v28 = v6;
        v12 = "#SystemStatusAttribution attempting deattribution for attribution-unavailable client. Aborting deattribution";
        v13 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting deattribution for attribution-unavailable clien"
              "t. Aborting deattribution\", \"Client\":%{public, location:escape_only}@}";
LABEL_12:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, (uint8_t *)&__p, 0x1Cu);
        return;
      }
      return;
    }
  }
  else if (v8)
  {
    goto LABEL_5;
  }
  v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v6), "dictionary");
  v15 = sub_100197514(v6, v14);
  if (!v15)
    return;
  if (v15 != 2)
    goto LABEL_23;
  v6 = (id)qword_102304A68;
  if (*(_QWORD *)(a1 + 424) != 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      __p = (void *)68289282;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      *(_QWORD *)v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution deattribution for System Service; defaulting to Traffic for reco"
        "rd keeping\", \"SystemService\":%{public, location:escape_only}@}",
        (uint8_t *)&__p,
        0x1Cu);
    }
LABEL_23:
    v16 = 1;
    goto LABEL_24;
  }
  v16 = 0;
LABEL_24:
  v18 = objc_msgSend(*(id *)(a1 + 416), "objectForKey:", v6);
  v19 = v18;
  if (v18)
  {
    objc_msgSend(v18, "decrementAttributionCountForServiceType:", a3);
    if (v16)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v20 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        __p = (void *)68289794;
        v25 = 2082;
        v26 = "";
        v27 = 1026;
        *(_DWORD *)v28 = a3;
        *(_WORD *)&v28[4] = 2114;
        *(_QWORD *)&v28[6] = v6;
        v29 = 2114;
        v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution #AttributionRecord servicetype count decremented\", \"ServiceType\":%{public}d, \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x2Cu);
      }
      if (objc_msgSend(v19, "totalAttributionCount"))
        return;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v21 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        __p = (void *)68289282;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        *(_QWORD *)v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution No subscriptions remaining after deattribution; removing Attri"
          "butionRecord for client and ending system status attribution\", \"Client\":%{public, location:escape_only}@}",
          (uint8_t *)&__p,
          0x1Cu);
      }
    }
    else if (objc_msgSend(v19, "totalAttributionCount"))
    {
      return;
    }
    v23 = (sub_100199284(v14) & 6) == 0 || !sub_1001A0520(a1, (uint64_t)v6);
    sub_1007C0B50(a1, v6, v19, v23);
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v22 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    __p = (void *)68289282;
    v25 = 2082;
    v26 = "";
    v27 = 2114;
    *(_QWORD *)v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattribution.\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v11 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    __p = (void *)68289282;
    v25 = 2082;
    v26 = "";
    v27 = 2114;
    *(_QWORD *)v28 = v6;
    v12 = "#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattribution.";
    v13 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattr"
          "ibution.\", \"Client\":%{public, location:escape_only}@}";
    goto LABEL_12;
  }
}

void sub_1007C4448(uint64_t a1)
{
  NSObject *v2;
  id v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  id v8;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatus Received and processed interval beginning message\", \"MessageUUID\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

void sub_1007C4530(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  if (objc_msgSend(objc_msgSend(a2, "attributions"), "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    objc_msgSend(a2, "removeAttribution:", *(_QWORD *)(a1 + 32));
    objc_msgSend(a3, "setUserInitiated:", *(unsigned __int8 *)(a1 + 40));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v14 = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus removing attribution that doesn't exist!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v8 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v14 = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus removing attribution that doesn't exist!", "{\"msg%{public}.0s\":\"#SystemStatus removing attribution that doesn't exist!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
  }
  if (objc_msgSend(objc_msgSend(a2, "attributions"), "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v14 = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus removed attribution but it still exists!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v12 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus removed attribution but it still exists!", "{\"msg%{public}.0s\":\"#SystemStatus removed attribution but it still exists!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
  }
}

void sub_1007C4840(uint64_t a1)
{
  NSObject *v2;
  id v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  id v8;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatus Received and processed interval end message\", \"MessageUUID\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

BOOL sub_1007C4928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  NSObject *v17;
  NSObject *v18;
  void *__p[2];
  char v20;
  uint8_t v21[72];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    result = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)buf = 68289282;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = a2;
      v6 = "{\"msg%{public}.0s\":\"#LocationButtonFirstUsage skip prompting. Restrictions enabled\", \"Client\":%{public,"
           " location:escape_only}@}";
      v7 = v4;
      v8 = OS_LOG_TYPE_INFO;
      v9 = 28;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, buf, v9);
      return 0;
    }
    return result;
  }
  if (!*(_QWORD *)(a1 + 272))
  {
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", a2), "BOOLForKey:defaultValue:", CFSTR("DefaultAccuracyReduced"), 0))v15 = 13;
    else
      v15 = 14;
    sub_1015A2E04(__p, "");
    sub_1007F5908((uint64_t)v21, v15, a2, 0, (__int128 *)__p);
    v16 = sub_1007BDDB4(a1, a2, 0, (uint64_t)v21, 0);
    sub_100235568((uint64_t)v21);
    if (v20 < 0)
    {
      operator delete(__p[0]);
      if (v16)
        return 1;
    }
    else if (v16)
    {
      return 1;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Could not post #LocationButtonFirstUsage\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v18 = qword_1022A01D8;
    result = os_signpost_enabled((os_log_t)qword_1022A01D8);
    if (result)
    {
      *(_DWORD *)buf = 68289282;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Could not post #LocationButtonFirstUsage", "{\"msg%{public}.0s\":\"#Warning Could not post #LocationButtonFirstUsage\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      return 0;
    }
    return result;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v10 = qword_1022A01D8;
  v11 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v11)
  {
    v12 = *(unsigned int **)(a1 + 272);
    v13 = *((_QWORD *)v12 + 1);
    v14 = *v12;
    *(_DWORD *)buf = 68289794;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2114;
    v27 = a2;
    v28 = 2114;
    v29 = v13;
    v30 = 2050;
    v31 = v14;
    v6 = "{\"msg%{public}.0s\":\"#LocationButtonFirstUsage skip prompting. InflightPromptAuthorizationRequest found.\", \""
         "Client\":%{public, location:escape_only}@, \"inflightClient\":%{public, location:escape_only}@, \"inflightReque"
         "stType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    v7 = v10;
    v8 = OS_LOG_TYPE_DEFAULT;
    v9 = 48;
    goto LABEL_11;
  }
  return result;
}

void sub_1007C4CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100235568((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1007C4CE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  id v10;
  unsigned int v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  _DWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  void *__p;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unsigned int v35;

  v10 = sub_100195B0C(a1, a2);
  v11 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("LocationButtonUseMode"), v10, 0);
  v12 = -[CLClientManagerAuthorizationContext transientAwareRegistrationResult](sub_1000B9630(a1, (uint64_t)v10, &xmmword_101C17478), "transientAwareRegistrationResult");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68290562;
    v22 = 2082;
    v23 = "";
    v24 = 2114;
    v25 = v10;
    v26 = 1026;
    v27 = a4;
    v28 = 1026;
    v29 = a5;
    v30 = 1026;
    v31 = a6;
    v32 = 2050;
    v33 = v11;
    v34 = 1026;
    v35 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth Explicit temporary authorization request received\", \"Client\":%{public, location:escape_only}@, \"Granted\":%{public}hhd, \"UsingLocationButton\":%{public}hhd, \"VoiceInteractionEnabled\":%{public}hhd, \"LocationButtonUseMode\":%{public, location:CLClientLocationButtonUseMode}lld, \"TransientAwareRegistrationResult\":%{public}d}", (uint8_t *)&__p, 0x3Eu);
  }
  if (a5 && (a4 & 1) == 0)
  {
    sub_101908C7C();
    __break(1u);
    goto LABEL_29;
  }
  if (!a5)
    goto LABEL_16;
  if (v12 != 4 && v12 != 2 || (a6 & 1) == 0 && v11)
  {
    if (v11 == 1)
    {
      if (qword_1022A01D0 == -1)
      {
LABEL_14:
        v14 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          return;
        __p = (void *)68289282;
        v22 = 2082;
        v23 = "";
        v24 = 2114;
        v25 = v10;
        v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth could not be granted , #LocationButtonUse denied\", \"Client\":%{pub"
              "lic, location:escape_only}@}";
        v16 = v14;
        v17 = 28;
        goto LABEL_26;
      }
LABEL_29:
      dispatch_once(&qword_1022A01D0, &stru_102154528);
      goto LABEL_14;
    }
LABEL_16:
    sub_1007C508C(*(void **)(a1 + 136), (uint64_t)v10, 1, a4);
    v18 = *(_DWORD **)(a1 + 272);
    if (v18 && (*(_DWORD *)(a1 + 312) == 2 || *v18 == 1))
    {
      objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", 2, CFSTR("CorrectiveCompensationEnabled"), v10);
      objc_msgSend(*(id *)(a1 + 136), "persist");
    }
    sub_1015A2E04(&__p, "");
    sub_100193838(a1, v10, (uint64_t)&__p);
    if (SBYTE3(v25) < 0)
      operator delete(__p);
    return;
  }
  v19 = sub_1007C4928(a1, (uint64_t)v10);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v20 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289538;
    v22 = 2082;
    v23 = "";
    v24 = 2114;
    v25 = v10;
    v26 = 1026;
    v27 = v19;
    v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth #LocationButtonUse prompting status\", \"Client\":%{public, location:esc"
          "ape_only}@, \"PromptingStatus\":%{public}hhd}";
    v16 = v20;
    v17 = 34;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&__p, v17);
  }
}

void sub_1007C5068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007C508C(void *a1, uint64_t a2, int a3, int a4)
{
  unsigned int v8;
  uint64_t v9;

  if (!objc_msgSend(a1, "registeredKeyPathForClientIdentifier:", a2))
    objc_msgSend(a1, "registerClient:fromAuthSync:", a2, 0);
  v8 = objc_msgSend(a1, "intForKey:atKeyPath:defaultValue:", CFSTR("TemporaryAuthorization"), a2, 0);
  if (a4)
  {
    v9 = v8 | a3;
    return objc_msgSend(a1, "setInt:forKey:atKeyPath:", v9, CFSTR("TemporaryAuthorization"), a2);
  }
  v9 = v8 & ~a3;
  if ((v8 & ~a3) != 0)
    return objc_msgSend(a1, "setInt:forKey:atKeyPath:", v9, CFSTR("TemporaryAuthorization"), a2);
  return objc_msgSend(a1, "removeValueForKey:atKeyPath:", CFSTR("TemporaryAuthorization"), a2);
}

void sub_1007C5140(uint64_t a1, void *a2, int a3)
{
  NSObject *v6;
  void **v7;
  int v8;
  int v9;
  void *__p;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  int v16;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289538;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = a2;
    v15 = 1026;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth-Precise\", \"Client\":%{public, location:escape_only}@, \"granted\":%{public}hhd}", (uint8_t *)&__p, 0x22u);
  }
  v7 = (void **)(a1 + 136);
  if (a3)
    v8 = 2;
  else
    v8 = 8;
  if (a3)
    v9 = 8;
  else
    v9 = 2;
  sub_1007C508C(*(void **)(a1 + 136), (uint64_t)a2, v8, 1);
  sub_1007C508C(*v7, (uint64_t)a2, v9, 0);
  objc_msgSend(*v7, "persist");
  sub_1015A2E04(&__p, "");
  sub_100193838(a1, a2, (uint64_t)&__p);
  if (SBYTE3(v14) < 0)
    operator delete(__p);
}

void sub_1007C52B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007C52D8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  id v7;
  id v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  std::string *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  NSObject *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  std::string *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  NSObject *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  std::string *v54;
  uint64_t v55;
  NSObject *v56;
  std::string *v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  NSObject *v61;
  NSObject *v62;
  std::string *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  NSObject *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  const char *v73;
  char *v74;
  NSObject *v75;
  std::string *v76;
  uint64_t v77;
  std::string *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  char *v83;
  std::string *v84;
  const char *v85;
  char *v86;
  std::string *v87;
  const char *v88;
  char *v89;
  const char *v90;
  char *v91;
  const char *v92;
  char *v93;
  const char *v94;
  _BOOL4 v95;
  unsigned int v96;
  std::string v97;
  int v98;
  _QWORD v99[3];
  _BYTE buf[28];
  __int16 v101;
  int v102;

  memset(&v97, 0, sizeof(v97));
  if (a4)
  {
    v7 = sub_100195B0C(a1, a4);
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "cppClientKey");
    else
      memset(buf, 0, 24);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    v97 = *(std::string *)buf;
  }
  else
  {
    std::string::assign(&v97, "*nobody*");
    v8 = 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = "-";
    v11 = *(_QWORD *)(a1 + 696);
    if (a2)
      v10 = "+";
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v11;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLEEA Emergency clients %d %s 1", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v80 = "-";
    v81 = *(_QWORD *)(a1 + 696);
    if (a2)
      v80 = "+";
    v98 = 67109378;
    LODWORD(v99[0]) = v81;
    WORD2(v99[0]) = 2080;
    *(_QWORD *)((char *)v99 + 6) = v80;
    LODWORD(v94) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA Emergency clients %d %s 1", &v98, v94);
    v83 = (char *)v82;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v82);
    if (v83 != buf)
      free(v83);
  }
  if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)v97.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLEEA adding emergency client,%{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v84 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v84 = (std::string *)v97.__r_.__value_.__r.__words[0];
      v98 = 136446210;
      v99[0] = v84;
      LODWORD(v94) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA adding emergency client,%{public}s", &v98, v94);
      v86 = (char *)v85;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v85);
      if (v86 != buf)
        free(v86);
    }
    v14 = *(_QWORD *)(a1 + 696);
    v95 = v14 == 0;
    v96 = a2;
    if (v14)
    {
      v15 = v8;
      v16 = *(_QWORD **)(a1 + 680);
      if (v16 != (_QWORD *)(a1 + 688))
      {
        do
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v17 = v16 + 4;
          v18 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v19 = v16 + 4;
            if (*((char *)v16 + 55) < 0)
              v19 = (_QWORD *)*v17;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLEEA %{public}s is still an emergency client", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            if (*((char *)v16 + 55) < 0)
              v17 = (_QWORD *)*v17;
            v98 = 136446210;
            v99[0] = v17;
            LODWORD(v94) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA %{public}s is still an emergency client", &v98, v94);
            v24 = (char *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          v20 = (_QWORD *)v16[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v16[2];
              v22 = *v21 == (_QWORD)v16;
              v16 = v21;
            }
            while (!v22);
          }
          v16 = v21;
        }
        while (v21 != (_QWORD *)(a1 + 688));
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v40 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#CLEEA First emergency client connected", buf, 2u);
      }
      v15 = v8;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LOWORD(v98) = 0;
        LODWORD(v94) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA First emergency client connected", &v98, v94);
        v91 = (char *)v90;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v90);
        if (v91 != buf)
          free(v91);
      }
    }
    sub_100793844((uint64_t **)(a1 + 680), (uint64_t)&v97);
    v41 = v15;
    v42 = v96;
    if (!a3)
      goto LABEL_155;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v43 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v44 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v44 = (std::string *)v97.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLEPTO adding beneficiary for deauthorization override \", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100793844((uint64_t **)(a1 + 704), (uint64_t)&v97);
    v31 = v41;
    v45 = *(_QWORD **)(a1 + 704);
    if (v45 != (_QWORD *)(a1 + 712))
    {
      do
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v46 = v45 + 4;
        v47 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v48 = v45 + 4;
          if (*((char *)v45 + 55) < 0)
            v48 = (_QWORD *)*v46;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#CLEPTO (+) : %{public}s is still a beneficiary for deauthorization override", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          if (*((char *)v45 + 55) < 0)
            v46 = (_QWORD *)*v46;
          v98 = 136446210;
          v99[0] = v46;
          LODWORD(v94) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEPTO (+) : %{public}s is still a beneficiary for deauthorization override", &v98, v94);
          v52 = (char *)v51;
          sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v51);
          if (v52 != buf)
            free(v52);
        }
        v49 = (_QWORD *)v45[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v45[2];
            v22 = *v50 == (_QWORD)v45;
            v45 = v50;
          }
          while (!v22);
        }
        v45 = v50;
      }
      while (v50 != (_QWORD *)(a1 + 712));
    }
LABEL_154:
    v41 = v31;
    v42 = v96;
LABEL_155:
    if (v95)
    {
      sub_1005159F0(v42);
      sub_1015A2E04(buf, "com.apple.locationd.CLEEA");
      sub_1007BC73C(a1, (uint64_t *)buf, 1);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLEmergencyController")), "onCLEmergencyEnablementAssertion:", v42);
    }
    if (v41)
    {
      sub_1015A2E04(buf, "");
      sub_100193838(a1, v41, (uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    goto LABEL_174;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v25 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v26 = &v97;
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v97.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#CLEEA removing emergency client,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v87 = &v97;
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v87 = (std::string *)v97.__r_.__value_.__r.__words[0];
    v98 = 136446210;
    v99[0] = v87;
    LODWORD(v94) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA removing emergency client,%{public}s", &v98, v94);
    v89 = (char *)v88;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v88);
    if (v89 != buf)
      free(v89);
  }
  v27 = (_QWORD *)(a1 + 680);
  v28 = sub_10019C4C0(a1 + 680, (const void **)&v97.__r_.__value_.__l.__data_);
  v29 = (_QWORD *)(a1 + 688);
  if (a1 + 688 == v28)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v53 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v54 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v54 = (std::string *)v97.__r_.__value_.__r.__words[0];
      v55 = *(_QWORD *)(a1 + 696);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v54;
      v101 = 1026;
      v102 = v55;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLEEA Trying to remove emergency beneficiary which doesn't exist\", \"MissingClientKey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}", buf, 0x22u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v56 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v57 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = (std::string *)v97.__r_.__value_.__r.__words[0];
      v58 = *(_QWORD *)(a1 + 696);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v57;
      v101 = 1026;
      v102 = v58;
      v59 = "#CLEEA Trying to remove emergency beneficiary which doesn't exist";
      v60 = "{\"msg%{public}.0s\":\"#CLEEA Trying to remove emergency beneficiary which doesn't exist\", \"MissingClientK"
            "ey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}";
      goto LABEL_173;
    }
  }
  else
  {
    sub_100675198((uint64_t **)(a1 + 680), v28);
    v30 = *(_QWORD *)(a1 + 696);
    v95 = v30 == 0;
    v96 = 0;
    if (v30)
    {
      v31 = v8;
      v32 = (_QWORD *)*v27;
      if ((_QWORD *)*v27 != v29)
      {
        do
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v33 = v32 + 4;
          v34 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v35 = v32 + 4;
            if (*((char *)v32 + 55) < 0)
              v35 = (_QWORD *)*v33;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#CLEEA %{public}s is still an emergency client", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            if (*((char *)v32 + 55) < 0)
              v33 = (_QWORD *)*v33;
            v98 = 136446210;
            v99[0] = v33;
            LODWORD(v94) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA %{public}s is still an emergency client", &v98, v94);
            v39 = (char *)v38;
            sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v38);
            if (v39 != buf)
              free(v39);
          }
          v36 = (_QWORD *)v32[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v32[2];
              v22 = *v37 == (_QWORD)v32;
              v32 = v37;
            }
            while (!v22);
          }
          v32 = v37;
        }
        while (v37 != v29);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v61 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#CLEEA Last emergency client disconnected", buf, 2u);
      }
      v31 = v8;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LOWORD(v98) = 0;
        LODWORD(v94) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEEA Last emergency client disconnected", &v98, v94);
        v93 = (char *)v92;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v92);
        if (v93 != buf)
          free(v93);
      }
    }
    if (!a3)
      goto LABEL_154;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v62 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v63 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v63 = (std::string *)v97.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLEPTO removing beneficiary for deauthorization override\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v64 = (_QWORD *)(a1 + 704);
    v65 = sub_10019C4C0(a1 + 704, (const void **)&v97.__r_.__value_.__l.__data_);
    v66 = (_QWORD *)(a1 + 712);
    if (a1 + 712 != v65)
    {
      sub_100675198((uint64_t **)(a1 + 704), v65);
      v67 = (_QWORD *)*v64;
      if ((_QWORD *)*v64 != v66)
      {
        do
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v68 = v67 + 4;
          v69 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v70 = v67 + 4;
            if (*((char *)v67 + 55) < 0)
              v70 = (_QWORD *)*v68;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v70;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#CLEPTO (-) : %{public}s is still a beneficiary for deauthorization override", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            if (*((char *)v67 + 55) < 0)
              v68 = (_QWORD *)*v68;
            v98 = 136446210;
            v99[0] = v68;
            LODWORD(v94) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#CLEPTO (-) : %{public}s is still a beneficiary for deauthorization override", &v98, v94);
            v74 = (char *)v73;
            sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v73);
            if (v74 != buf)
              free(v74);
          }
          v71 = (_QWORD *)v67[1];
          if (v71)
          {
            do
            {
              v72 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v72 = (_QWORD *)v67[2];
              v22 = *v72 == (_QWORD)v67;
              v67 = v72;
            }
            while (!v22);
          }
          v67 = v72;
        }
        while (v72 != v66);
      }
      goto LABEL_154;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v75 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v76 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v76 = (std::string *)v97.__r_.__value_.__r.__words[0];
      v77 = *(_QWORD *)(a1 + 720);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v76;
      v101 = 1026;
      v102 = v77;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLEPTO Trying to remove deauthorizationOverride beneficiary which doesn't exist\", \"MissingClientKey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}", buf, 0x22u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v56 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v78 = &v97;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
      v79 = *(_QWORD *)(a1 + 720);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v78;
      v101 = 1026;
      v102 = v79;
      v59 = "#CLEPTO Trying to remove deauthorizationOverride beneficiary which doesn't exist";
      v60 = "{\"msg%{public}.0s\":\"#CLEPTO Trying to remove deauthorizationOverride beneficiary which doesn't exist\", \""
            "MissingClientKey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}";
LABEL_173:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v56, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v59, v60, buf, 0x22u);
    }
  }
LABEL_174:
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
}

void sub_1007C6698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007C671C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _BOOL8 v8;
  _BOOL8 v9;
  _BOOL8 v10;
  _BOOL8 v11;
  void *__p[2];
  char v14;

  v5 = a1 + 1112;
  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(a2, "clientAnchor"), "UTF8String"));
  v6 = (_DWORD *)sub_10019C4C0(v5, (const void **)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if ((_DWORD *)(a1 + 1120) == v6)
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v7 = v6[17];
    v8 = v6[14] != 0;
    v9 = v6[15] != 0;
    v10 = v6[16] != 0;
    v11 = v7 != 0;
  }
  objc_msgSend(a3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8), CFSTR("PassiveServiceSession"));
  objc_msgSend(a3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9), CFSTR("WhenInUseServiceSession"));
  objc_msgSend(a3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10), CFSTR("AlwaysServiceSession"));
  return objc_msgSend(a3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11), CFSTR("SessionWithOldLinking"));
}

void sub_1007C6858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1007C6874(uint64_t a1, void *a2, void *a3)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  void *__p;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  _BOOL4 v22;

  result = 0;
  if (a2)
  {
    if (a3)
    {
      result = +[CLAuthorizationDatabase keyPath:sharesAuthWithKeyPath:](CLAuthorizationDatabase, "keyPath:sharesAuthWithKeyPath:", a2, a3);
      if (result)
      {
        if ((objc_msgSend(a2, "isEqual:", a3) & 1) != 0)
          return 1;
        objc_msgSend(a2, "cppClientKey");
        v7 = sub_10019C4C0(a1 + 680, (const void **)&__p);
        if (SBYTE3(v16) < 0)
          operator delete(__p);
        objc_msgSend(a3, "cppClientKey");
        v8 = sub_10019C4C0(a1 + 680, (const void **)&__p);
        v9 = a1 + 688;
        if (SBYTE3(v16) < 0)
          operator delete(__p);
        if (v9 == v7 && v9 == v8)
        {
          return 1;
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v10 = qword_1022A01D8;
          v11 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v11)
          {
            __p = (void *)68290050;
            v13 = 2082;
            v14 = "";
            v15 = 2114;
            v16 = a2;
            v17 = 1026;
            v18 = v9 != v7;
            v19 = 2114;
            v20 = a3;
            v21 = 1026;
            v22 = v9 != v8;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Auth sharing overridden\", \"ckpA\":%{public, location:escape_only}@, \"ckpAIsBeneficiary\":%{public}hhd, \"ckpB\":%{public, location:escape_only}@, \"ckpBIsBeneficiary\":%{public}hhd}", (uint8_t *)&__p, 0x32u);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1007C6A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007C6A7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  void **v11;
  std::string *v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *i;
  uint64_t v19;
  id v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void **v24;
  uint8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36[2];
  void *__p[2];
  char v38;
  std::string v39;
  _BYTE v40[128];

  sub_100584F4C(0, &v39);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  if (!size)
  {
    sub_101908DF0(v2, v3, v4, v5, v6, v7, v8, v9, v25, v26, v27, v28, v29, (uint64_t)v30, v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33,
      *((uint64_t *)&v33 + 1),
      v34,
      *((uint64_t *)&v34 + 1),
      v35,
      v36[0]);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm", 3159, "migrateLegacySLCSubscriptions");
    __break(1u);
  }
  sub_100259584((uint64_t)__p, size + 17);
  if (v38 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v39;
  else
    v12 = (std::string *)v39.__r_.__value_.__r.__words[0];
  memmove(v11, v12, size);
  strcpy((char *)v11 + size, "significant.plist");
  if (v38 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (sub_1000B78B0((const char *)v13))
  {
    sub_100119F3C(v36);
    if (v38 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    sub_10003CE20((uint64_t)v36, (uint64_t)v14);
    v15 = (void *)sub_10011A5AC((uint64_t)v36);
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v17)
            objc_enumerationMutation(v15);
          v19 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          v20 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", v19));
          if (objc_msgSend(v20, "isValidCKP"))
          {
            sub_1007C6DA8((uint64_t *)a1, (uint64_t)v20, &v29);
            sub_10100213C(v29, objc_msgSend(v15, "objectForKeyedSubscript:", v19));
            v21 = v30;
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v23 = __ldaxr(p_shared_owners);
              while (__stlxr(v23 - 1, p_shared_owners));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
          }
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
      }
      while (v16);
    }
    if (v38 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    sub_100512FA8((const char *)v24);
    sub_10011A5A8(v36);
  }
  if (v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_1007C6D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_10011A5A8(&a24);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_1007C6DA8(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 __p;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  CLClientManagerAuthorizationContext *v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  _UNKNOWN **v60;
  id v61;
  uint8_t buf[8];
  _BYTE v63[30];
  char v64;

  v5 = sub_100196E90((uint64_t)a1, a2);
  v61 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    objc_msgSend(v5, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v63 = 0;
    *(_QWORD *)&v63[8] = 0;
  }
  v58 = buf;
  v6 = sub_1001ABAB4((uint64_t)(a1 + 122), buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v58) + 40;
  if ((v63[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = &v60;
  v7 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v58 = 0;
  v59 = 0;
  v8 = (std::__shared_weak_count *)v7[4];
  if (v8
    && (v9 = std::__shared_weak_count::lock(v8), (v59 = v9) != 0)
    && (v10 = v9, v11 = (void *)v7[3], (v58 = (uint8_t *)v11) != 0))
  {
    if (v12)
    {
      *(_QWORD *)buf = v12;
      *(_QWORD *)v63 = v10;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)v63 = 0;
    }
    v32 = sub_1002B7674((uint64_t)a3, (__int128 *)buf);
    v40 = *(std::__shared_weak_count **)v63;
    if (*(_QWORD *)v63)
    {
      v41 = (unint64_t *)(*(_QWORD *)v63 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (!*a3)
    {
      sub_101908F38(v32, v33, v34, v35, v36, v37, v38, v39, v46, v47, v48, v49, v50, (uint64_t)v51, v52, *((uint64_t *)&v52 + 1), __p, *((uint64_t *)&__p + 1), v54,
        v55,
        *((uint64_t *)&v55 + 1),
        v56,
        (uint64_t)v57,
        (uint64_t)v58);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.h", 360, "getOrCreatePersistentSubscriptionForClient");
      __break(1u);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289538;
      *(_WORD *)v63 = 2082;
      *(_QWORD *)&v63[2] = "";
      *(_WORD *)&v63[10] = 2082;
      *(_QWORD *)&v63[12] = (unint64_t)"17CLSLCSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      *(_WORD *)&v63[20] = 2114;
      *(_QWORD *)&v63[22] = v61;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v57 = sub_10019EE88((uint64_t)a1, (uint64_t)v61, &xmmword_101C17478);
    if (v61)
    {
      objc_msgSend(v61, "cppClientKey");
    }
    else
    {
      v55 = 0uLL;
      v56 = 0;
    }
    sub_101001FEC(&__p);
    sub_1002354C4((char *)buf, &v55, &__p, (uint64_t)v60);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
    sub_1007F8318(a1 + 4, (uint64_t *)&v57, (uint64_t *)&v61, (uint64_t)buf, &v52);
    sub_1002B7674((uint64_t)a3, &v52);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_QWORD *)&v52 = &v60;
    v19 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)&v52);
    v21 = (_QWORD *)*a3;
    v20 = a3[1];
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)v19[4];
    v19[3] = v21;
    v19[4] = v20;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
    v25 = (_QWORD *)*a3;
    v26 = a1[128];
    v50 = a1[127];
    v51 = (std::__shared_weak_count *)v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    sub_100224578(v25, &v50);
    v29 = v51;
    if (v51)
    {
      v30 = (unint64_t *)&v51->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v64 < 0)
      operator delete(*(void **)&v63[16]);
    if ((v63[15] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1007C721C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_100261F44((uint64_t)&a30);
  sub_100261F44(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_1007C72C0(uint64_t a1)
{
  uint64_t result;
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  _QWORD v7[5];

  sub_100197040();
  result = sub_100195F08();
  if ((result & 1) == 0)
  {
    v3 = +[NSMutableArray array](NSMutableArray, "array");
    v4 = *(void **)(a1 + 136);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1007C7394;
    v7[3] = &unk_102153DA0;
    v7[4] = v3;
    objc_msgSend(v4, "iterateAllAnchorKeyPathsWithBlock:", v7);
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLAppMonitor"), CFSTR("CLClientManager"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1007C73E0;
    v6[3] = &unk_102153DC0;
    v6[4] = a1;
    return (uint64_t)objc_msgSend(v5, "checkApplications:withReply:", v3, v6);
  }
  return result;
}

id sub_1007C7394(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "bundleId");
  if (result)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(a2, "legacyClientKey"));
  return result;
}

_BYTE *sub_1007C73E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  return sub_1007C73E8(*(double **)(a1 + 32), a2, a3, a4);
}

_BYTE *sub_1007C73E8(double *a1, void *a2, void *a3, void *a4)
{
  NSObject *v5;
  id v6;
  char *v7;
  char *v8;
  id v9;
  uint64_t v10;
  double v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  double v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  NSObject *v24;
  uint64_t v25;
  char v26;
  const char *v27;
  uint8_t *v28;
  void *v29;
  const char *v30;
  uint8_t *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  NSObject *v48;
  uint64_t v49;
  void *v50;
  double v51;
  NSObject *v52;
  uint64_t v54;
  id v55;
  char *v56;
  id v57;
  const char *v58;
  uint8_t *v59;
  const char *v60;
  uint8_t *v61;
  uint64_t v62;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *__p[2];
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  double v80;
  double Current;
  _BYTE v82[128];
  _BYTE v83[128];
  void *v84[6];
  void *v85[2];
  void *v86[8];
  void *v87[2];
  _OWORD v88[2];
  uint64_t v89;
  _BYTE v90[128];
  uint8_t buf[48];
  void *v92[2];
  void *v93[5];
  __int128 v94;
  _OWORD v95[95];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(a2, "count");
    v7 = (char *)objc_msgSend(a2, "count");
    v8 = &v7[(_QWORD)objc_msgSend(a3, "count")];
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = (char *)objc_msgSend(a4, "count") + (_QWORD)v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ClearClient installation check found %ld uninstalled apps (amongst %ld bundle IDs)", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v54 = qword_1022A01D8;
    v55 = objc_msgSend(a2, "count");
    v56 = (char *)objc_msgSend(a2, "count");
    v57 = objc_msgSend(a3, "count");
    LODWORD(v84[0]) = 134218240;
    *(void **)((char *)v84 + 4) = v55;
    WORD2(v84[1]) = 2048;
    *(void **)((char *)&v84[1] + 6) = &v56[(_QWORD)v57 + (unint64_t)objc_msgSend(a4, "count")];
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 0, "#ClearClient installation check found %ld uninstalled apps (amongst %ld bundle IDs)", v84, 22);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v80 = 0.0;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
  if (!v9)
  {
    v11 = -1.0;
    goto LABEL_96;
  }
  v10 = *(_QWORD *)v77;
  v11 = -1.0;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v77 != v10)
        objc_enumerationMutation(a2);
      v13 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)v12);
      v14 = objc_alloc_init((Class)NSAutoreleasePool);
      v15 = sub_100196E90((uint64_t)a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", v13, 105));
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#ClearClient %@ is missing ", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LODWORD(v84[0]) = 138412290;
        *(void **)((char *)v84 + 4) = v15;
        LODWORD(v62) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#ClearClient %@ is missing ", v84, v62);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      v80 = 2.22507386e-308;
      if (sub_1001AA820((uint64_t)a1, (uint64_t)v15, &v80))
      {
        v17 = v80;
        v18 = Current - v80;
        if (Current - v80 >= a1[30])
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v19 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *((_QWORD *)a1 + 30);
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(_QWORD *)&buf[20] = v15;
            *(_WORD *)&buf[28] = 2050;
            *(double *)&buf[30] = v18;
            *(_WORD *)&buf[38] = 2050;
            *(_QWORD *)&buf[40] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Deleting entry as client has been missing beyond safe harbor threshold\", \"Client\":%{public, location:escape_only}@, \"missingTimeDuration_s\":\"%{public}.09f\", \"safe harbor threshold_s\":\"%{public}.09f\"}", buf, 0x30u);
          }
          sub_1015A2E04(__p, "ClientRemoved");
          sub_1007C0424((uint64_t)a1, v15, 1, (uint64_t *)__p);
          if (v75 < 0)
            operator delete(__p[0]);
          memset(v93, 0, 35);
          *(_OWORD *)v92 = 0u;
          memset(buf, 0, sizeof(buf));
          v94 = 0u;
          memset(v95, 0, 59);
          if (v15)
          {
            objc_msgSend(v15, "clientName");
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
          else
          {
            v89 = 0;
            memset(v88, 0, sizeof(v88));
            *(_OWORD *)v87 = 0uLL;
            *(_OWORD *)v85 = 0uLL;
            memset(v86, 0, sizeof(v86));
            memset(v84, 0, sizeof(v84));
          }
          *(_OWORD *)buf = *(_OWORD *)v84;
          *(void **)&buf[16] = v84[2];
          HIBYTE(v84[2]) = 0;
          LOBYTE(v84[0]) = 0;
          if ((char)buf[47] < 0)
            operator delete(*(void **)&buf[24]);
          *(_OWORD *)&buf[24] = *(_OWORD *)&v84[3];
          *(void **)&buf[40] = v84[5];
          HIBYTE(v84[5]) = 0;
          LOBYTE(v84[3]) = 0;
          if (SHIBYTE(v93[0]) < 0)
            operator delete(v92[0]);
          *(_OWORD *)v92 = *(_OWORD *)v85;
          v93[0] = v86[0];
          HIBYTE(v86[0]) = 0;
          LOBYTE(v85[0]) = 0;
          if (SHIBYTE(v93[3]) < 0)
            operator delete(v93[1]);
          *(_OWORD *)&v93[1] = *(_OWORD *)&v86[1];
          v93[3] = v86[3];
          HIBYTE(v86[3]) = 0;
          LOBYTE(v86[1]) = 0;
          LOWORD(v93[4]) = v86[4];
          BYTE2(v93[4]) = BYTE2(v86[4]);
          if (SBYTE7(v95[0]) < 0)
            operator delete((void *)v94);
          v94 = *(_OWORD *)&v86[5];
          *(void **)&v95[0] = v86[7];
          HIBYTE(v86[7]) = 0;
          LOBYTE(v86[5]) = 0;
          if (SHIBYTE(v95[1]) < 0)
            operator delete(*((void **)&v95[0] + 1));
          v26 = 0;
          *(_OWORD *)((char *)v95 + 8) = *(_OWORD *)v87;
          *((_QWORD *)&v95[1] + 1) = *(_QWORD *)&v88[0];
          BYTE7(v88[0]) = 0;
          LOBYTE(v87[0]) = 0;
          if (SBYTE7(v95[3]) < 0)
          {
            operator delete(*(void **)&v95[2]);
            v26 = BYTE7(v88[0]);
          }
          v95[2] = *(_OWORD *)((char *)v88 + 8);
          *(_QWORD *)&v95[3] = *((_QWORD *)&v88[1] + 1);
          HIBYTE(v88[1]) = 0;
          BYTE8(v88[0]) = 0;
          WORD4(v95[3]) = v89;
          BYTE10(v95[3]) = BYTE2(v89);
          if (v26 < 0)
            operator delete(v87[0]);
          if (SHIBYTE(v86[7]) < 0)
            operator delete(v86[5]);
          if (SHIBYTE(v86[3]) < 0)
            operator delete(v86[1]);
          if (SHIBYTE(v86[0]) < 0)
            operator delete(v85[0]);
          if (SHIBYTE(v84[5]) < 0)
            operator delete(v84[3]);
          if (SHIBYTE(v84[2]) < 0)
            operator delete(v84[0]);
          LODWORD(v84[0]) = 1;
          (*(void (**)(double *, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v84, buf, 0, 0xFFFFFFFFLL, 0);
          if (SBYTE7(v95[3]) < 0)
            operator delete(*(void **)&v95[2]);
          if (SHIBYTE(v95[1]) < 0)
            operator delete(*((void **)&v95[0] + 1));
          if (SBYTE7(v95[0]) < 0)
            operator delete((void *)v94);
          if (SHIBYTE(v93[3]) < 0)
            operator delete(v93[1]);
          if (SHIBYTE(v93[0]) < 0)
            operator delete(v92[0]);
          if ((char)buf[47] < 0)
            operator delete(*(void **)&buf[24]);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          goto LABEL_44;
        }
      }
      else
      {
        v18 = 0.0;
        v17 = v80;
      }
      if (v17 == 2.22507386e-308)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v21 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v15;
          *(_WORD *)&buf[28] = 2050;
          *(double *)&buf[30] = Current;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Marking client as missing\", \"Client\":%{public, location:escape_only}@, \"missingTime_s\":\"%{public}.09f\"}", buf, 0x26u);
        }
        sub_1007C0090((id *)a1, (uint64_t)v15, &Current);
        v22 = (void *)*((_QWORD *)a1 + 17);
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_10020F11C;
        *(_QWORD *)&buf[24] = &unk_102153D78;
        *(_QWORD *)&buf[40] = a1;
        *(_QWORD *)&buf[32] = v15;
        objc_msgSend(v22, "iterateIdentitiesRelatedToKeyPath:withBlock:", v15, buf);
      }
      if (a1[30] - v18 < v11 || v11 == -1.0)
        v11 = a1[30] - v18;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v24 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v25 = *((_QWORD *)a1 + 30);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%@ has been missing for %.3fs (safe harbor threshold: %.3fs)", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v29 = (void *)*((_QWORD *)a1 + 30);
        LODWORD(v84[0]) = 138412802;
        *(void **)((char *)v84 + 4) = v15;
        WORD2(v84[1]) = 2048;
        *(void **)((char *)&v84[1] + 6) = *(void **)&v18;
        HIWORD(v84[2]) = 2048;
        v84[3] = v29;
        LODWORD(v62) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "%@ has been missing for %.3fs (safe harbor threshold: %.3fs)", v84, v62);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
LABEL_44:

      v12 = (char *)v12 + 1;
    }
    while (v9 != v12);
    v32 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
    v9 = v32;
  }
  while (v32);
LABEL_96:
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v33 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v70, v83, 16);
  if (v33)
  {
    v34 = *(_QWORD *)v71;
    do
    {
      v35 = 0;
      do
      {
        if (*(_QWORD *)v71 != v34)
          objc_enumerationMutation(a3);
        v36 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)v35);
        v37 = objc_alloc_init((Class)NSAutoreleasePool);
        v38 = sub_100196E90((uint64_t)a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", v36, 105));
        if (sub_1001AA820((uint64_t)a1, (uint64_t)v38, &v80))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v39 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v40 = *((_QWORD *)a1 + 30);
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(_QWORD *)&buf[20] = v38;
            *(_WORD *)&buf[28] = 2050;
            *(_QWORD *)&buf[30] = v40;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Client restored within safe harbor threshold - keeping\", \"Client\":%{public, location:escape_only}@, \"safe harbor threshold_s\":\"%{public}.09f\"}", buf, 0x26u);
          }
          sub_1007C02A0((id *)a1, (uint64_t)v38);
          v41 = (void *)*((_QWORD *)a1 + 17);
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_10020F11C;
          *(_QWORD *)&buf[24] = &unk_102153D78;
          *(_QWORD *)&buf[40] = a1;
          *(_QWORD *)&buf[32] = v38;
          objc_msgSend(v41, "iterateIdentitiesRelatedToKeyPath:withBlock:", v38, buf);
        }

        v35 = (char *)v35 + 1;
      }
      while (v33 != v35);
      v33 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v70, v83, 16);
    }
    while (v33);
  }
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v42 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v66, v82, 16);
  if (v42)
  {
    v43 = *(_QWORD *)v67;
    do
    {
      v44 = 0;
      do
      {
        if (*(_QWORD *)v67 != v43)
          objc_enumerationMutation(a4);
        v45 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)v44);
        v46 = objc_alloc_init((Class)NSAutoreleasePool);
        v47 = sub_100196E90((uint64_t)a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", v45, 105));
        if (sub_1001AA820((uint64_t)a1, (uint64_t)v47, &v80))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v48 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v49 = *((_QWORD *)a1 + 30);
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(_QWORD *)&buf[20] = v47;
            *(_WORD *)&buf[28] = 2050;
            *(_QWORD *)&buf[30] = v49;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Client restored (remotely) within safe harbor threshold - keeping\", \"Client\":%{public, location:escape_only}@, \"safe harbor threshold_s\":\"%{public}.09f\"}", buf, 0x26u);
          }
          sub_1007C02A0((id *)a1, (uint64_t)v47);
        }
        objc_msgSend(*((id *)a1 + 17), "setBool:forKey:atKeyPath:", 1, CFSTR("SyncedAuthForUninstalledApp"), v47);

        v44 = (char *)v44 + 1;
      }
      while (v42 != v44);
      v42 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v66, v82, 16);
    }
    while (v42);
  }
  v50 = (void *)*((_QWORD *)a1 + 31);
  if (v11 == -1.0)
  {
    objc_msgSend(v50, "setNextFireDelay:", 1.79769313e308);
  }
  else
  {
    objc_msgSend(v50, "nextFireDelay");
    if (v11 < v51)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v52 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#ClearClient updated AppUninstallTimer; next timer will fire in %.3fs",
          buf,
          0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LODWORD(v84[0]) = 134217984;
        *(void **)((char *)v84 + 4) = *(void **)&v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#ClearClient updated AppUninstallTimer; next timer will fire in %.3fs",
          COERCE_DOUBLE(v84));
        v61 = (uint8_t *)v60;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      objc_msgSend(*((id *)a1 + 31), "setNextFireDelay:", v11);
    }
  }
  objc_msgSend(*((id *)a1 + 17), "persist");
  sub_100091C2C((uint64_t)a1);
  return sub_10019DBAC(a1);
}

void sub_1007C8490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1007C8520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  const __CFString *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  const __CFDictionary *v21;
  __CFUserNotification *v22;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  void *__p[2];
  char v32;
  SInt32 error;
  void *keys;
  _BYTE v35[24];
  CFStringRef v36;
  CFTypeRef cf;
  uint64_t v38;
  void *values[5];

  v7 = sub_100196E90(a1, a2);
  if (!&SBUserNotificationPendInSetupIfNotAllowedKey)
    return 0;
  v9 = (uint64_t)v7;
  v10 = sub_1001AC584();
  v11 = (void *)sub_100814D7C(v10, CFSTR("LOCATION_ACCURACY"));
  if (a3 == 1)
  {
    v13 = sub_1001AC584();
    v14 = CFSTR("IMPROVE_LOCATION_ACCURACY_BLUETOOTH");
LABEL_10:
    v15 = (void *)sub_100814D7C(v13, v14);
    goto LABEL_11;
  }
  if (!a3)
  {
    v12 = MGGetBoolAnswer(CFSTR("wapi"));
    v13 = sub_1001AC584();
    if (v12)
      v14 = CFSTR("IMPROVE_LOCATION_ACCURACY_WLAN");
    else
      v14 = CFSTR("IMPROVE_LOCATION_ACCURACY_WIFI");
    goto LABEL_10;
  }
  v15 = 0;
LABEL_11:
  v16 = sub_1001AC584();
  v17 = (void *)sub_100814D7C(v16, CFSTR("OK"));
  v18 = sub_1001AC584();
  v19 = (void *)sub_100814D7C(v18, CFSTR("SETTINGS"));
  v20 = v19;
  if (v11 && v15 && v17 && v19)
  {
    keys = (void *)SBUserNotificationPendInSetupIfNotAllowedKey;
    *(_QWORD *)v35 = kCFUserNotificationAlertHeaderKey;
    *(_QWORD *)&v35[8] = kCFUserNotificationAlertMessageKey;
    *(_QWORD *)&v35[16] = kCFUserNotificationDefaultButtonTitleKey;
    v36 = kCFUserNotificationAlternateButtonTitleKey;
    values[0] = kCFBooleanTrue;
    values[1] = v11;
    values[2] = v15;
    values[3] = v17;
    values[4] = v19;
    v21 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v21)
    {
      error = 0;
      v22 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, &error, v21);
      CFRelease(v21);
    }
    else
    {
      v22 = 0;
    }
    goto LABEL_20;
  }
  v22 = 0;
  if (v19)
LABEL_20:
    CFRelease(v20);
  if (v17)
    CFRelease(v17);
  if (v15)
    CFRelease(v15);
  if (v11)
    CFRelease(v11);
  if (v22)
  {
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v22, (CFUserNotificationCallBack)sub_1007F0F54, 0);
    if (RunLoopSource)
    {
      v24 = (__CFRunLoop *)sub_100193530();
      CFRunLoopAddSource(v24, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
      CFRetain(v22);
      sub_1007E7010(a4);
      *(_QWORD *)(a4 + 24) = v22;
      sub_1015A2E04(__p, "");
      sub_1007F5908((uint64_t)&keys, 15, v9, 0, (__int128 *)__p);
      if (v32 < 0)
        operator delete(__p[0]);
      objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
      v26 = v25;
      CFRetain(v22);
      if (cf)
        CFRelease(cf);
      cf = v22;
      v38 = v26;
      operator new();
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v29 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      keys = (void *)68289282;
      *(_WORD *)v35 = 2082;
      *(_QWORD *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2114;
      *(_QWORD *)&v35[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not create runloop source for ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v30 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      keys = (void *)68289282;
      *(_WORD *)v35 = 2082;
      *(_QWORD *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2114;
      *(_QWORD *)&v35[12] = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not create runloop source for ImproveAccuracyPrefs notification", "{\"msg%{public}.0s\":\"Could not create runloop source for ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
    }
    CFRelease(v22);
    return 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v27 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    keys = (void *)68289282;
    *(_WORD *)v35 = 2082;
    *(_QWORD *)&v35[2] = "";
    *(_WORD *)&v35[10] = 2114;
    *(_QWORD *)&v35[12] = v9;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Could not create ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v28 = qword_1022A01D8;
  result = os_signpost_enabled((os_log_t)qword_1022A01D8);
  if (result)
  {
    keys = (void *)68289282;
    *(_WORD *)v35 = 2082;
    *(_QWORD *)&v35[2] = "";
    *(_WORD *)&v35[10] = 2114;
    *(_QWORD *)&v35[12] = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not create ImproveAccuracyPrefs notification", "{\"msg%{public}.0s\":\"Could not create ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_1007C8AD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  operator delete();
}

id sub_1007C8B2C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  id v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  id v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  NSObject *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  NSObject *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  const char *v46;
  void **v47;
  uint64_t v48;
  id v49;
  const char *v50;
  void **v51;
  uint64_t v52;
  const std::string::value_type *p_buf;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  void **v58;
  const char *v59;
  void **v60;
  _OWORD v61[8];
  _OWORD v62[2];
  _QWORD v63[6];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  _OWORD v73[8];
  _OWORD v74[2];
  _QWORD v75[2];
  uint64_t (*v76)(uint64_t, uint64_t, double);
  void *v77;
  uint64_t v78;
  std::string v79;
  __int128 buf;
  unsigned __int8 v81;
  int v82;
  std::string *v83;
  void *__p[2];
  int64_t v85;
  std::string v86;

  if (*(_QWORD *)(a1 + 1144))
    goto LABEL_50;
  v6 = objc_alloc((Class)NSDictionary);
  sub_100585420(&v86);
  sub_1015A2E04(&v79, off_1022A4448);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v79;
  else
    v7 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    size = v79.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v86, (const std::string::value_type *)v7, size);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v85 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v85 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  *(_QWORD *)(a1 + 1144) = objc_msgSend(v6, "initWithContentsOfFile:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  if (SHIBYTE(v85) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v12 = *(void **)(a1 + 1144);
  if (v12)
  {
    *(_QWORD *)(a1 + 1152) = objc_msgSend(objc_msgSend(v12, "allKeys"), "sortedArrayUsingComparator:", &stru_102153E00);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1144), "description"), "UTF8String");
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DAR map: %s", (uint8_t *)__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v48 = qword_1022A01D8;
      v49 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1144), "description"), "UTF8String");
      LODWORD(v86.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v48, 2, "DAR map: %s", (const char *)&v86);
      v51 = (void **)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v50);
      if (v51 != __p)
        free(v51);
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1152), "description"), "UTF8String");
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "DAR map sorted keys: %s", (uint8_t *)__p, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_50;
    bzero(__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1152), "description"), "UTF8String");
    LODWORD(v86.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "DAR map sorted keys: %s", (const char *)&v86);
    v20 = (void **)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v19);
    if (v20 == __p)
      goto LABEL_50;
LABEL_92:
    free(v20);
    goto LABEL_50;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v21 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    sub_100585420(&v86);
    sub_1015A2E04(&v79, off_1022A4448);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v79;
    else
      v22 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      v23 = v79.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v86, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v85 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = __p;
    if (v85 < 0)
      v26 = (void **)__p[0];
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v26;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "DAR: could not read map file %{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v85) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v52 = qword_1022A01D8;
    sub_100585420(&v79);
    sub_1015A2E04(&buf, off_1022A4448);
    if ((v81 & 0x80u) == 0)
      p_buf = (const std::string::value_type *)&buf;
    else
      p_buf = (const std::string::value_type *)buf;
    if ((v81 & 0x80u) == 0)
      v54 = v81;
    else
      v54 = *((_QWORD *)&buf + 1);
    v55 = std::string::append(&v79, p_buf, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = &v86;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v57 = (std::string *)v86.__r_.__value_.__r.__words[0];
    v82 = 136446210;
    v83 = v57;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v52, 17, "DAR: could not read map file %{public}s", &v82, 12);
    v20 = v58;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if ((char)v81 < 0)
      operator delete((void *)buf);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 0, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", (const char *)v20);
    if (v20 != __p)
      goto LABEL_92;
  }
LABEL_50:
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v76 = sub_1007C9710;
  v77 = &unk_102153E28;
  v78 = a3;
  if (*(_QWORD *)(a1 + 1144))
  {
    if (*(double *)(a1 + 1180) == -1.0
      || vabdd_f64(*(double *)(a1 + 1236), *(double *)((char *)a2 + 76)) > 604800.0
      || sub_100124100(*(double *)(a1 + 1164), *(double *)(a1 + 1172), *(double *)((char *)a2 + 4), *(double *)((char *)a2 + 12)) > 500.0)
    {
      v27 = a2[7];
      v28 = a2[8];
      v29 = a2[5];
      v70 = a2[6];
      v71 = v27;
      v72[0] = v28;
      *(_OWORD *)((char *)v72 + 12) = *(__int128 *)((char *)a2 + 140);
      v30 = a2[3];
      v31 = a2[4];
      v32 = a2[1];
      v66 = a2[2];
      v67 = v30;
      v68 = v31;
      v69 = v29;
      v64 = *a2;
      v65 = v32;
      v33 = *(void **)(a1 + 1552);
      *(_QWORD *)&v30 = *(_QWORD *)((char *)a2 + 4);
      *(_QWORD *)&v31 = *(_QWORD *)((char *)a2 + 12);
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v63[2] = sub_1007C9B24;
      v63[3] = &unk_102153E70;
      v63[4] = v75;
      v63[5] = a1;
      return objc_msgSend(v33, "getNumberOfInputApsUsedInWifiTileForCoordinate:withReply:", v63, *(double *)&v30, *(double *)&v31);
    }
    else
    {
      v40 = *(void **)(a1 + 1320);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v41 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 134217984;
        *(void **)((char *)__p + 4) = v40;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "DAR: applying cached quantization %f", (uint8_t *)__p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LODWORD(v86.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01D8, 2, "DAR: applying cached quantization %f", COERCE_DOUBLE(&v86));
        v60 = (void **)v59;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v59);
        if (v60 != __p)
          free(v60);
      }
      v42 = a2[7];
      v61[6] = a2[6];
      v61[7] = v42;
      v62[0] = a2[8];
      *(_OWORD *)((char *)v62 + 12) = *(__int128 *)((char *)a2 + 140);
      v43 = a2[3];
      v61[2] = a2[2];
      v61[3] = v43;
      v44 = a2[5];
      v61[4] = a2[4];
      v61[5] = v44;
      v45 = a2[1];
      v61[0] = *a2;
      v61[1] = v45;
      return (id)v76((uint64_t)v75, (uint64_t)v61, *(double *)&v40);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v35 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = (void *)0x3FB999999999999ALL;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning DAR: applying default quantization %f", (uint8_t *)__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LODWORD(v86.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = 0x3FB999999999999ALL;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning DAR: applying default quantization %f", COERCE_DOUBLE(&v86));
      v47 = (void **)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v46);
      if (v47 != __p)
        free(v47);
    }
    v36 = a2[7];
    v73[6] = a2[6];
    v73[7] = v36;
    v74[0] = a2[8];
    *(_OWORD *)((char *)v74 + 12) = *(__int128 *)((char *)a2 + 140);
    v37 = a2[3];
    v73[2] = a2[2];
    v73[3] = v37;
    v38 = a2[5];
    v73[4] = a2[4];
    v73[5] = v38;
    v39 = a2[1];
    v73[0] = *a2;
    v73[1] = v39;
    return (id)v76((uint64_t)v75, (uint64_t)v73, 0.1);
  }
}

void sub_1007C9620(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  _Unwind_Resume(a1);
}

int64_t sub_1007C96A8(id a1, id a2, id a3)
{
  id v5;
  id v7;

  v5 = objc_msgSend(a2, "integerValue");
  if ((uint64_t)v5 > (uint64_t)objc_msgSend(a3, "integerValue"))
    return 1;
  v7 = objc_msgSend(a2, "integerValue");
  if ((uint64_t)v7 >= (uint64_t)objc_msgSend(a3, "integerValue"))
    return 0;
  else
    return -1;
}

uint64_t sub_1007C9710(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  double v31;
  _OWORD v32[8];
  _OWORD v33[2];
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  v31 = a3;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a2 + 4);
    v7 = *(_QWORD *)(a2 + 12);
    v8 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)buf = 134218496;
    v41 = v6;
    v42 = 2048;
    v43 = v7;
    v44 = 2048;
    v45 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "DAR: original location: %.8f, %.8f, %.2f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v20 = *(_QWORD *)(a2 + 4);
    v21 = *(_QWORD *)(a2 + 12);
    v22 = *(_QWORD *)(a2 + 20);
    v34 = 134218496;
    v35 = v20;
    v36 = 2048;
    v37 = v21;
    v38 = 2048;
    v39 = v22;
    LODWORD(v30) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "DAR: original location: %.8f, %.8f, %.2f", COERCE_DOUBLE(&v34), v30, v31);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  *(float64x2_t *)(a2 + 4) = vmulq_n_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a2 + 4), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v31, 0))), v31);
  *(double *)(a2 + 20) = sqrt(v31 * v31 * 5000000000.0 + *(double *)(a2 + 20) * *(double *)(a2 + 20));
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a2 + 4);
    v11 = *(_QWORD *)(a2 + 12);
    v12 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)buf = 134218496;
    v41 = v10;
    v42 = 2048;
    v43 = v11;
    v44 = 2048;
    v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "DAR:  reduced location: %.8f, %.8f, %.2f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v25 = *(_QWORD *)(a2 + 4);
    v26 = *(_QWORD *)(a2 + 12);
    v27 = *(_QWORD *)(a2 + 20);
    v34 = 134218496;
    v35 = v25;
    v36 = 2048;
    v37 = v26;
    v38 = 2048;
    v39 = v27;
    LODWORD(v30) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "DAR:  reduced location: %.8f, %.8f, %.2f", COERCE_DOUBLE(&v34), v30, v31);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = objc_alloc((Class)CLLocation);
  v15 = *(_OWORD *)(a2 + 112);
  v32[6] = *(_OWORD *)(a2 + 96);
  v32[7] = v15;
  v33[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(a2 + 140);
  v16 = *(_OWORD *)(a2 + 48);
  v32[2] = *(_OWORD *)(a2 + 32);
  v32[3] = v16;
  v17 = *(_OWORD *)(a2 + 80);
  v32[4] = *(_OWORD *)(a2 + 64);
  v32[5] = v17;
  v18 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v18;
  return (*(uint64_t (**)(uint64_t, id))(v13 + 16))(v13, objc_msgSend(v14, "initWithClientLocation:", v32));
}

uint64_t sub_1007C9B24(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  double v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  int v19;

  v2 = a2;
  v4 = a1[5];
  v5 = (char *)objc_msgSend(*(id *)(v4 + 1152), "indexOfObject:inSortedRange:options:usingComparator:", -[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), "stringValue"), 0, objc_msgSend(*(id *)(v4 + 1152), "count"), 1024, &stru_102153E48);
  if (v5 == objc_msgSend(*(id *)(v4 + 1152), "count")
    || objc_msgSend(objc_msgSend(*(id *)(v4 + 1152), "objectAtIndex:", v5), "integerValue") != (id)v2)
  {
    --v5;
  }
  objc_msgSend(objc_msgSend(*(id *)(v4 + 1144), "objectForKey:", objc_msgSend(*(id *)(v4 + 1152), "objectAtIndex:", v5)), "doubleValue");
  v7 = v6;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v17 = v7;
    v18 = 1024;
    v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DAR: applying new quantization %f based on ap count %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = 134218240;
    v13 = v7;
    v14 = 1024;
    v15 = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "DAR: applying new quantization %f based on ap count %d", COERCE_DOUBLE(&v12), 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (v2)
  {
    memmove((void *)(v4 + 1160), a1 + 6, 0x9CuLL);
    *(double *)(v4 + 1320) = v7;
  }
  return (*(uint64_t (**)(double))(a1[4] + 16))(v7);
}

int64_t sub_1007C9DF4(id a1, id a2, id a3)
{
  id v5;
  id v7;

  v5 = objc_msgSend(a2, "integerValue");
  if ((uint64_t)v5 > (uint64_t)objc_msgSend(a3, "integerValue"))
    return 1;
  v7 = objc_msgSend(a2, "integerValue");
  if ((uint64_t)v7 >= (uint64_t)objc_msgSend(a3, "integerValue"))
    return 0;
  else
    return -1;
}

void sub_1007C9E5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  unint64_t v17;

  v2 = *(_QWORD **)(a1 + 912);
  v3 = (_QWORD *)(a1 + 920);
  if (v2 != (_QWORD *)(a1 + 920))
  {
    while (1)
    {
      v6 = v2[4];
      if ((*(unsigned int (**)(uint64_t, unint64_t))(a2 + 16))(a2, v6))
        break;
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
      if (v8 == v3)
        return;
    }
    *(_QWORD *)(v6 + 8) = mach_continuous_time();
    sub_1007CA05C(a1, v6);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic consuming a matching butterfly\", \"eaten\":\"%{public}p\"}", (uint8_t *)&v12, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    }
    v11 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic consuming a matching butterfly", "{\"msg%{public}.0s\":\"#dic consuming a matching butterfly\", \"eaten\":\"%{public}p\"}", (uint8_t *)&v12, 0x1Cu);
    }
  }
}

void sub_1007CA05C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint8_t buf[8];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;

  v3 = *(_QWORD **)(a1 + 920);
  if (!v3)
    goto LABEL_12;
  v5 = (uint64_t **)(a1 + 912);
  v6 = (uint64_t *)(a1 + 920);
  do
  {
    v7 = v3[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == (uint64_t *)(a1 + 920) || v6[4] > a2)
LABEL_12:
    sub_1019091F4();
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = sub_100026CC8(a2);
    v20 = 2050;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"destroying #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v11 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v12 = sub_100026CC8(a2);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v12;
    v20 = 2050;
    v21 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "destroying #dic", "{\"msg%{public}.0s\":\"destroying #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  sub_1015A2E04(buf, (char *)-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p"), a2), "UTF8String"));
  v13 = sub_100026CC8(a2);
  v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
  sub_1007BBF94(a1, v13, (uint64_t *)buf, v14, 0, 0);
  sub_10008A9F0(v5, v6);
  operator delete(v6);
  (*(void (**)(unint64_t))(*(_QWORD *)a2 + 8))(a2);
  if (SBYTE3(v19) < 0)
    operator delete(*(void **)buf);
}

void sub_1007CA304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007CA328(uint64_t a1)
{
  id v2;
  _QWORD v4[5];

  v2 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 144) = v2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007CA3A4;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  objc_msgSend(v2, "setHandler:", v4);
  return objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", 600.0);
}

id sub_1007CA3A4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 136), "persist");
  return objc_msgSend(*(id *)(v1 + 144), "setNextFireDelay:", 600.0);
}

_QWORD *sub_1007CA3D4@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1007CA44C()
{
  return 1;
}

uint64_t sub_1007CA454()
{
  return 1;
}

id sub_1007CA45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = objc_opt_class(NSDictionary, a2);
  v6 = objc_opt_class(NSNumber, v5);
  v8 = objc_opt_class(NSString, v7);
  return +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v6, v8, objc_opt_class(NSArray, v9), 0), a1, a2);
}

NSData *sub_1007CA500(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  NSData *result;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10221B618, CFSTR("version"));
  v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = *(void **)(a1 + 136);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1007CA760;
  v9[3] = &unk_102153BE8;
  v9[4] = v3;
  v9[5] = a1;
  objc_msgSend(v4, "iterateAllAnchorKeyPathsWithBlock:", v9);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("clients"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1001A09FC() == 1), CFSTR("global"));
  v8 = 0;
  result = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, &v8);
  if (v8)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to archive authorization decisions\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v7 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to archive authorization decisions", "{\"msg%{public}.0s\":\"failed to archive authorization decisions\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return 0;
  }
  return result;
}

void sub_1007CA760(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void **v6;
  void *v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *v12[2];
  __int128 v13;
  void *v14[2];
  __int128 v15;
  void *v16[2];
  void *__p[2];
  __int128 v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(a2, "clientName");
  }
  else
  {
    v19 = 0;
    *(_OWORD *)__p = 0u;
    v18 = 0u;
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v13 = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    *(_OWORD *)v8 = 0u;
  }
  v5 = objc_msgSend(a2, "legacyClientKey", v8[0], v8[1], v9[0]);
  sub_1001A8D50((uint64_t)v8);
  if (v15 >= 0)
    v6 = &v14[1];
  else
    v6 = (void **)v14[1];
  if (-[NSString hasPrefix:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), "hasPrefix:", CFSTR("com.apple.")))
  {
    goto LABEL_11;
  }
  v7 = (void *)HIBYTE(v12[0]);
  if (SHIBYTE(v12[0]) < 0)
    v7 = v11[1];
  if (v7)
LABEL_11:
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(*(id *)(v4 + 136), "readonlyStoreAtKeyPath:", a2), "dictionary"), v5);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
    operator delete(v8[0]);
}

void sub_1007CA8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

NSError *sub_1007CA8E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  const char *v6;
  size_t v7;
  size_t v8;
  char v9;
  std::string *p_s1;
  NSObject *v11;
  id v12;
  NSError *v13;
  NSObject *v14;
  NSError *v16;
  std::string __s1;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;

  memset(&__s1, 0, sizeof(__s1));
  v5 = sub_1001FD94C();
  if (!sub_1000BD5F0(v5, (uint64_t)CFSTR("kAuthorizationDecisionsConfirmationToken"), &__s1))
    goto LABEL_10;
  v6 = (const char *)objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
  v7 = strlen(v6);
  v8 = v7;
  v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    if (v7 != -1)
    {
      p_s1 = &__s1;
      goto LABEL_9;
    }
LABEL_26:
    sub_10035AD9C();
  }
  if (v7 != __s1.__r_.__value_.__l.__size_)
    goto LABEL_10;
  if (v7 == -1)
    goto LABEL_26;
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (!memcmp(p_s1, v6, v8))
  {
    v13 = 0;
    if ((v9 & 0x80) == 0)
      return v13;
    goto LABEL_22;
  }
LABEL_10:
  v16 = 0;
  sub_1007CA45C(a2, (uint64_t)&v16);
  if (v16)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = objc_msgSend(-[NSError description](v16, "description"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2082;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Attempting to apply archived auth decisions; early return due to failure to unarchive aut"
        "horization decisions\", \"errorDesc\":%{public, location:escape_only}s}",
        buf,
        0x1Cu);
    }
    v13 = v16;
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Did not fail to unarchive authorization decisions! This is unexpected unless the archive came from a Sydro or earlier device. Early returning because this function must no-op.\"}", buf, 0x12u);
    }
    v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, 0);
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_22:
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1007CAB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

id sub_1007CAB7C(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v4, "isValidCKP") & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v4, 0);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v8 = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#compensation failed to load persistent store for client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v7 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v8 = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#compensation failed to load persistent store for client", "{\"msg%{public}.0s\":\"#compensation failed to load persistent store for client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
  }
  return 0;
}

void sub_1007CAD68(uint64_t a1, char a2)
{
  int *v2;
  int v3;

  v2 = *(int **)(a1 + 272);
  if (!v2)
  {
LABEL_6:
    sub_1007CBE58(a1, a2);
    return;
  }
  v3 = *v2;
  switch(v3)
  {
    case 15:
      sub_1007CB950((_QWORD *)a1, a2);
      break;
    case 10:
      sub_1007CB684(a1, a2);
      break;
    case 6:
      sub_1007CAD9C(a1, a2);
      return;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_1007CAD9C(uint64_t a1, char a2)
{
  id v3;
  std::string::size_type v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  std::string *v9;
  __int128 v10;
  _BYTE *v11;
  NSString *v12;
  unsigned int v13;
  int v14;
  id v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  NSObject *v19;
  NSObject *v20;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  _QWORD v27[7];
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  std::string v34;
  _BYTE buf[28];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  int v45;

  v3 = sub_100196E90(a1, *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8));
  v4 = a2 & 3;
  if (v4 == 2)
    goto LABEL_4;
  if (v4 == 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User has selected 'WIU' on #reprompt for %{public}@, changing authorization.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LODWORD(v34.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "User has selected 'WIU' on #reprompt for %{public}@, changing authorization.", &v34, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onClientTrialRepromptNotification(CFOptionFlags)", "%s\n", v23);
      if (v23 != buf)
        free(v23);
    }
    sub_1007DD8CC(a1, (uint64_t)v3, 4u, 0, v7, 1, 1);
    goto LABEL_21;
  }
  if ((a2 & 3) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#warning No user response to #reprompt for client %{public}@ (flags 0x%{public}lx)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LODWORD(v34.__r_.__value_.__l.__data_) = 138543618;
      *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      WORD2(v34.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 6) = v4;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#warning No user response to #reprompt for client %{public}@ (flags 0x%{public}lx)", &v34, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onClientTrialRepromptNotification(CFOptionFlags)", "%s\n", v24);
      if (v24 != buf)
        free(v24);
    }
LABEL_21:
    v25 = 0;
    goto LABEL_22;
  }
LABEL_4:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User has authorized continued access for %@ at #reprompt", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LODWORD(v34.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "User has authorized continued access for %@ at #reprompt", &v34, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onClientTrialRepromptNotification(CFOptionFlags)", "%s\n", v22);
    if (v22 != buf)
      free(v22);
  }
  v25 = 1;
LABEL_22:
  objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), v3, CFAbsoluteTimeGetCurrent());
  sub_100584F4C(0, &v34);
  v9 = std::string::append(&v34, "locScoreInfoReport");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0)
    v11 = buf;
  else
    v11 = *(_BYTE **)buf;
  v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v13 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("ConsumptionCoolingRate"), v3, 0);
  v14 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("NextConsumptionThresholdScore"), v3, 0);
  v15 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("NextNextConsumptionThresholdScore"), v3, 0);
  if (v25)
  {
    if (v3)
      objc_msgSend(v3, "cppClientKey");
    else
      memset(buf, 0, 24);
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    v17 = *((_DWORD *)sub_100199794(a1 + 440, buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v34) + 12);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", v15, CFSTR("NextConsumptionThresholdScore"), v3);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("NextNextConsumptionThresholdScore"), v3);
    if (v13 + 1 < 2)
      v18 = v13 + 1;
    else
      v18 = 2;
    if ((float)((float)v14 + (float)v14) < (float)(int)v15)
      v16 = 1;
    else
      v16 = v18;
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", v16, CFSTR("ConsumptionCoolingRate"), v3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290562;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v3;
      v36 = 1026;
      v37 = v14;
      v38 = 1026;
      v39 = (int)v15;
      v40 = 1026;
      v41 = v17;
      v42 = 1026;
      v43 = v13;
      v44 = 1026;
      v45 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting #reprompt thresholds\", \"Client\":%{public, location:escape_only}@, \"priorThreshold\":%{public}d, \"newThreshold\":%{public}d, \"currentUsage\":%{public}d, \"priorCooling\":%{public}d, \"newCooling\":%{public}d}", buf, 0x3Au);
    }
  }
  else
  {
    LODWORD(v16) = 0;
    v17 = 0;
  }
  objc_msgSend(*(id *)(a1 + 136), "persist");
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1007F2210;
  v27[3] = &unk_102154388;
  v27[5] = v3;
  v27[6] = a1;
  v27[4] = v12;
  v33 = v25;
  v28 = v13;
  v29 = v14;
  v30 = v16;
  v31 = (int)v15;
  v32 = v17;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.client.reprompt.response"), v27);
  v34.__r_.__value_.__r.__words[0] = 0;
  if (!-[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v12, &v34))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v34.__r_.__value_.__r.__words[0];
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Got error removing #reprompt checkpoint file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return sub_1007F05A4((uint64_t *)(a1 + 272), 0);
}

void sub_1007CB634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007CB684(uint64_t a1, char a2)
{
  id v4;
  NSObject *v5;
  _BOOL8 v6;
  unsigned int **v7;
  uint64_t v8;
  NSObject *v9;
  char *v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[24];
  __int16 v18;
  int v19;

  v4 = sub_100196E90(a1, *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8));
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v5 = qword_1022A01D8;
  v6 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    *(_WORD *)&v17[14] = 2114;
    *(_QWORD *)&v17[16] = v4;
    v18 = 1026;
    v19 = a2 & 3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User responded on BigSwitch prompt\", \"Client\":%{public, location:escape_only}@, \"response\":%{public}d}", buf, 0x22u);
  }
  v7 = (unsigned int **)(a1 + 272);
  v8 = a2 & 3;
  if (!v8 || v8 == 2)
    goto LABEL_9;
  if (v8 == 1)
  {
    sub_1007F23E4(v6, "prefs:root=Privacy&path=LOCATION");
LABEL_9:
    sub_1007C0370(a1, (uint64_t)v4);
    goto LABEL_15;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)v17 = v4;
    *(_WORD *)&v17[8] = 2050;
    *(_QWORD *)&v17[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning no user response to client %{public}@ (flags 0x%{public}lx)", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = 138543618;
    v13 = v4;
    v14 = 2050;
    v15 = v8;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#warning no user response to client %{public}@ (flags 0x%{public}lx)", &v12, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onClientPrefsNotification(CFOptionFlags)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
LABEL_15:
  sub_100008150(*v7);
  return sub_1007F05A4((uint64_t *)v7, 0);
}

void sub_1007CB950(_QWORD *a1, char a2)
{
  id v4;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  const void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  double Current;
  _BYTE v26[12];
  __int16 v27;
  uint64_t v28;
  char v29;
  int v30;
  _BYTE *v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[8];
  __int16 v35;
  const char *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  int v40;

  v4 = sub_100196E90((uint64_t)a1, *(_QWORD *)(a1[34] + 8));
  v5 = *(const void **)(a1[34] + 48);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2114;
    v38 = v4;
    v39 = 1026;
    v40 = a2 & 3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User responded on ImproveAccuracyPrefs prompt\", \"Client\":%{public, location:escape_only}@, \"response\":%{public}d}", buf, 0x22u);
  }
  v7 = a1[129];
  v8 = a1[130];
  if (v7 != v8)
  {
    v9 = (unsigned int **)(a1 + 34);
    while (1)
    {
      v10 = *(const void **)(v7 + 24);
      if (v10)
      {
        v11 = CFEqual(v10, v5);
        v8 = a1[130];
        if ((_DWORD)v11)
          break;
      }
      v7 += 32;
      if (v7 == v8)
        goto LABEL_10;
    }
    if (v7 != v8)
    {
      v14 = a2 & 3;
      if (!v14 || v14 == 2)
        goto LABEL_54;
      if (v14 != 1)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v16 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v17 = "Unknown";
          if (*(_QWORD *)v7 == 1)
            v17 = "Bluetooth";
          if (*(_QWORD *)v7)
            v18 = (char *)v17;
          else
            v18 = "Wifi";
          sub_1015A2E04(buf, v18);
          if (SBYTE3(v38) >= 0)
            v19 = buf;
          else
            v19 = *(uint8_t **)buf;
          *(_DWORD *)v26 = 136446466;
          *(_QWORD *)&v26[4] = v19;
          v27 = 2050;
          v28 = v14;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)", v26, 0x16u);
          if (SBYTE3(v38) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v20 = qword_1022A01D8;
          v21 = "Unknown";
          if (*(_QWORD *)v7 == 1)
            v21 = "Bluetooth";
          if (*(_QWORD *)v7)
            v22 = (char *)v21;
          else
            v22 = "Wifi";
          sub_1015A2E04(v26, v22);
          if (v29 >= 0)
            v23 = v26;
          else
            v23 = *(_BYTE **)v26;
          v30 = 136446466;
          v31 = v23;
          v32 = 2050;
          v33 = v14;
          v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)", &v30, 22);
          if (v29 < 0)
            operator delete(*(void **)v26);
          sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onImproveAccuracyPrefsNotification(CFOptionFlags)", "%s\n", v24);
          if (v24 != (char *)buf)
            free(v24);
        }
        goto LABEL_55;
      }
      if (*(_QWORD *)v7)
      {
        if (*(_QWORD *)v7 != 1)
        {
LABEL_54:
          Current = CFAbsoluteTimeGetCurrent();
          sub_1007E7090((double *)v7, Current);
LABEL_55:
          sub_1007E7010(v7);
          sub_100008150(*v9);
          sub_1007F05A4((uint64_t *)v9, 0);
          return;
        }
        v15 = "prefs:root=Bluetooth";
      }
      else
      {
        v15 = "prefs:root=WIFI";
      }
      sub_1007F23E4(v11, v15);
      goto LABEL_54;
    }
  }
LABEL_10:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = (id)v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"ImproveAccuracyNotification object not created for notification\", \"notification\":\"%{public}p\"}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v13 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = (id)v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ImproveAccuracyNotification object not created for notification", "{\"msg%{public}.0s\":\"ImproveAccuracyNotification object not created for notification\", \"notification\":\"%{public}p\"}", buf, 0x1Cu);
  }
}

void sub_1007CBE58(uint64_t a1, char a2)
{
  unsigned int **v4;
  _DWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  void *v20;
  NSString *v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  Class isa;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _UNKNOWN **v46;
  int v47;
  void *v48;
  NSObject *v49;
  NSObject *v50;
  _BOOL4 v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double Current;
  NSObject *v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  NSObject *v63;
  _BOOL4 v64;
  int v65;
  unsigned int v66;
  void *v67;
  id v68;
  NSObject *v69;
  const char *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  int v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  unsigned int v83;
  _QWORD v84[5];
  void *__p[2];
  uint64_t v86;
  _QWORD v87[7];
  _QWORD v88[7];
  _DWORD v89[2];
  __int16 v90;
  uint8_t buf[8];
  _BYTE v92[36];
  __int16 v93;
  const char *v94;
  _QWORD v95[3];
  _QWORD v96[3];

  v4 = (unsigned int **)(a1 + 272);
  v5 = sub_100196E90(a1, *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8));
  if ((objc_msgSend(v5, "isValidCKP") & 1) != 0)
  {
LABEL_6:
    v8 = **v4;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    goto LABEL_9;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)*v4 + 1);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v92 = 2082;
    *(_QWORD *)&v92[2] = "";
    *(_WORD *)&v92[10] = 2114;
    *(_QWORD *)&v92[12] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning onClientUserNotification fInflightPromptAuthorizationRequest failed to evaluate to a real, registered client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    goto LABEL_6;
  }
  v8 = **v4;
LABEL_9:
  v9 = qword_1022A01D8;
  v10 = a2 & 3;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v92 = 2082;
    *(_QWORD *)&v92[2] = "";
    *(_WORD *)&v92[10] = 2114;
    *(_QWORD *)&v92[12] = v5;
    *(_WORD *)&v92[20] = 1026;
    *(_DWORD *)&v92[22] = v8;
    *(_WORD *)&v92[26] = 1026;
    *(_DWORD *)&v92[28] = a2 & 3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User responded to prompt for client\", \"client\":%{public, location:escape_only}@, \"requestType\":%{public}d, \"response\":%{public}d}", buf, 0x28u);
  }
  if (v10 == 3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v92 = 2082;
      *(_QWORD *)&v92[2] = "";
      *(_WORD *)&v92[10] = 2114;
      *(_QWORD *)&v92[12] = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User dismissed prompt for client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v95[0] = CFSTR("ClientKey");
    v96[0] = objc_msgSend(v5, "legacyClientKey");
    v95[1] = CFSTR("RequestType");
    v96[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8);
    v95[2] = CFSTR("Dismissed");
    v96[2] = &__kCFBooleanTrue;
    AnalyticsSendEvent(CFSTR("com.apple.locationd.client.prompt.response"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v96, v95, 3));
    sub_1002355A0(*v4, (uint64_t)CFSTR("The user dismissed the prompt"));
    sub_1007F05A4((uint64_t *)v4, 0);
    return;
  }
  v12 = *((unsigned __int8 *)*v4 + 4);
  v13 = _os_feature_enabled_impl("CoreLocation", "CLNotThisTime");
  v14 = *v4;
  if (*((char *)*v4 + 39) < 0)
  {
    sub_100115CE4(__p, *((void **)v14 + 2), *((_QWORD *)v14 + 3));
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v14 + 1);
    v86 = *((_QWORD *)v14 + 4);
  }
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
      if (v12)
      {
        if ((a2 & 3) != 0)
        {
          if (v10 != 1)
            goto LABEL_35;
          goto LABEL_39;
        }
LABEL_40:
        v15 = 0;
        v83 = 2;
        goto LABEL_41;
      }
      if (v13)
      {
        if ((a2 & 3) == 0)
        {
LABEL_35:
          v83 = 0;
          v10 = 1;
          v19 = 1;
          v15 = 1;
          goto LABEL_42;
        }
        if (v10 != 1)
        {
          v83 = 0;
          v15 = 0;
          v10 = 1;
LABEL_41:
          v19 = 1;
LABEL_42:
          if (*(_DWORD *)(a1 + 312) == 3)
          {
            *(_BYTE *)(a1 + 233) = 1;
            *(_QWORD *)buf = 0;
            *(_QWORD *)v92 = buf;
            *(_QWORD *)&v92[8] = 0x2020000000;
            *(_QWORD *)&v92[16] = 0;
            v20 = *(void **)(a1 + 136);
            v84[0] = _NSConcreteStackBlock;
            v84[1] = 3221225472;
            v84[2] = sub_1007F23A4;
            v84[3] = &unk_1021543B0;
            v84[4] = buf;
            objc_msgSend(v20, "iterateIdentitiesRelatedToKeyPath:withBlock:", v5, v84);
            v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("cl-user-zone"), -[NSNumber stringValue](+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)v92 + 24) + 1), "stringValue"));
            _Block_object_dispose(buf, 8);
            if (!v10)
            {
LABEL_44:
              if ((v8 - 1) < 2)
                v22 = 1;
              else
                v22 = v19;
              if ((v22 & 1) != 0)
              {
                v23 = 0;
              }
              else
              {
                v26 = sub_100195B0C(a1, (uint64_t)v5);
                sub_1007F1470(a1, (uint64_t)v26, 0, 0);
                v23 = 2;
              }
              goto LABEL_138;
            }
          }
          else
          {
            v21 = 0;
            if (!v10)
              goto LABEL_44;
          }
          if (v15)
          {
            sub_1007C508C(*(void **)(a1 + 136), (uint64_t)v5, 4, 1);
            objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", 1, CFSTR("AuthorizationPromptOptionTypeNegative"), v5);
            if (v12)
              v23 = 14;
            else
              v23 = 13;
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v24 = qword_1022A01D8;
            if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
              goto LABEL_138;
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            v25 = "{\"msg%{public}.0s\":\"#TemporaryAuth Client has been granted temporary negative status\", \"Client\":"
                  "%{public, location:escape_only}@}";
          }
          else
          {
            if (v21)
              v5 = objc_msgSend(v5, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", v21, 122);
            sub_1007C508C(*(void **)(a1 + 136), (uint64_t)v5, 1, 1);
            objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("AuthorizationPromptOptionTypeNegative"), v5);
            if (v12)
              v23 = 12;
            else
              v23 = 1;
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v24 = qword_1022A01D8;
            if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
              goto LABEL_138;
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            v25 = "{\"msg%{public}.0s\":\"#TemporaryAuth Client has been granted temporary positive status\", \"ClientKey"
                  "\":%{public, location:escape_only}@}";
          }
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x1Cu);
LABEL_138:
          v65 = *(_DWORD *)(a1 + 312) - 1;
          if (v65 > 2)
            v66 = 0;
          else
            v66 = dword_101BC2268[v65];
          if ((v8 & 0xFFFFFFFD) == 1)
            v39 = 2;
          else
            v39 = v66;
          v67 = (void *)HIBYTE(v86);
          if (v86 < 0)
            v67 = __p[1];
          if (v67)
          {
            sub_1007F11F4(a1, (uint64_t)v5, (uint64_t *)__p);
          }
          else
          {
            v68 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", v5);
            if (objc_msgSend(v68, "isValidCKP"))
              objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("AuthorizationPurposeKey"), v68);
          }
          goto LABEL_167;
        }
      }
      else
      {
        if ((a2 & 3) == 0)
          goto LABEL_40;
        if (v10 == 1)
        {
LABEL_39:
          v83 = 0;
          v15 = 0;
          goto LABEL_41;
        }
      }
      v10 = 0;
      v19 = 0;
      v15 = 0;
      v83 = 4;
      goto LABEL_42;
    case 7:
    case 8:
      if (v10 == 1)
      {
        v18 = 0;
        v83 = 4;
      }
      else
      {
        if (v10 != 2)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v80 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68290051;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            *(_WORD *)&v92[20] = 1026;
            *(_DWORD *)&v92[22] = a2 & 3;
            *(_WORD *)&v92[26] = 2082;
            *(_QWORD *)&v92[28] = "assert";
            v93 = 2081;
            v94 = "false";
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Impossible response to WhenInUse Upgrade to Always prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v81 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            *(_DWORD *)buf = 68290051;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            *(_WORD *)&v92[20] = 1026;
            *(_DWORD *)&v92[22] = a2 & 3;
            *(_WORD *)&v92[26] = 2082;
            *(_QWORD *)&v92[28] = "assert";
            v93 = 2081;
            v94 = "false";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v81, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Impossible response to WhenInUse Upgrade to Always prompt", "{\"msg%{public}.0s\":\"Impossible response to WhenInUse Upgrade to Always prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v30 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68290051;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            *(_WORD *)&v92[20] = 1026;
            *(_DWORD *)&v92[22] = a2 & 3;
            *(_WORD *)&v92[26] = 2082;
            *(_QWORD *)&v92[28] = "assert";
            v93 = 2081;
            v94 = "false";
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Impossible response to WhenInUse Upgrade to Always prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
          }
          v79 = 4850;
          goto LABEL_210;
        }
        v83 = 3;
        v18 = 1;
      }
      if (*(_QWORD *)(a1 + 264))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v50 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v51 = *(_QWORD *)(a1 + 288) != 0;
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v92 = 2082;
          *(_QWORD *)&v92[2] = "";
          *(_WORD *)&v92[10] = 2114;
          *(_QWORD *)&v92[12] = v5;
          *(_WORD *)&v92[20] = 2050;
          *(_QWORD *)&v92[22] = v83;
          *(_WORD *)&v92[30] = 1026;
          *(_DWORD *)&v92[32] = v51;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional prompt response\", \"Client\":%{public, location:escape_only}@, \"GrantedStatus\":%{public, location:CLClientAuthorizationStatus}lld, \"FollowupPending\":%{public}hhd}", buf, 0x2Cu);
        }
        objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
        v53 = v52;
        v54 = *(double *)(a1 + 304);
        *(_QWORD *)(a1 + 304) = 0;
        v55 = -1.0;
        objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("ProvisionalMonitoringBegin"), v5, -1.0);
        v57 = v56;
        if (v56 != -1.0)
        {
          Current = CFAbsoluteTimeGetCurrent();
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v55 = Current - v57;
          v59 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            *(_WORD *)&v92[20] = 2050;
            *(double *)&v92[22] = v55;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional total duration\", \"ClientKey\":%{public, location:escape_only}@, \"duration\":\"%{public}f\"}", buf, 0x26u);
          }
        }
        v60 = *(_QWORD *)(a1 + 288);
        if (v60)
        {
          (*(void (**)(uint64_t, uint64_t))(v60 + 16))(v60, v18);

          *(_QWORD *)(a1 + 288) = 0;
          v23 = 3;
        }
        else
        {
          v23 = 0;
        }
        v74 = sub_100195B0C(a1, (uint64_t)v5);
        sub_1007F1470(a1, (uint64_t)v74, 1, 0);
        v39 = 0;
        v37 = v53 - v54;
        goto LABEL_170;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v63 = qword_1022A01D8;
      v37 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v64 = *(_QWORD *)(a1 + 288) != 0;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v92 = 2082;
        *(_QWORD *)&v92[2] = "";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 2050;
        *(_QWORD *)&v92[22] = v83;
        *(_WORD *)&v92[30] = 1026;
        *(_DWORD *)&v92[32] = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Non-#provisional WIU to Always #AuthPrompt prompt response\", \"ClientKey\":%{public, location:escape_only}@, \"GrantedStatus\":%{public, location:CLClientAuthorizationStatus}lld, \"BypassingSomeoneElseOnDeck\":%{public}hhd}", buf, 0x2Cu);
      }
      v23 = 0;
      v39 = 0;
      goto LABEL_169;
    case 9:
      v40 = a2 & 3;
      if (v40 == 1)
        v23 = 4;
      else
        v23 = 5;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v41 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v42 = "NO";
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_QWORD *)&v92[2] = "";
        *(_WORD *)v92 = 2082;
        if (v40 == 1)
          v42 = "YES";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 2082;
        *(_QWORD *)&v92[22] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Temporary relief from #compensation response\", \"ClientKey\":%{public, location:escape_only}@, \"TempPrecise\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      if (v40 == 1)
        v43 = 2;
      else
        v43 = 8;
      sub_1007C508C(*(void **)(a1 + 136), (uint64_t)v5, v43, 1);
      v44 = sub_100199284(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary"));
      v45 = v44;
      v46 = CLPContext_ptr;
      if (v44)
      {
        if (v44 == 2)
        {
          v47 = 4;
          goto LABEL_177;
        }
        if (v44 == 4)
        {
          v47 = 3;
LABEL_177:
          v83 = v47;
          goto LABEL_187;
        }
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v75 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v92 = 2082;
          *(_QWORD *)&v92[2] = "";
          *(_WORD *)&v92[10] = 2114;
          *(_QWORD *)&v92[12] = v5;
          *(_WORD *)&v92[20] = 2050;
          *(_QWORD *)&v92[22] = v45;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected authorization status for #TemporaryAuth precise promptee\", \"ClientKey\":%{public, location:escape_only}@, \"AuthMask\":%{public}lu}", buf, 0x26u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v76 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v92 = 2082;
          *(_QWORD *)&v92[2] = "";
          *(_WORD *)&v92[10] = 2114;
          *(_QWORD *)&v92[12] = v5;
          *(_WORD *)&v92[20] = 2050;
          *(_QWORD *)&v92[22] = v45;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v76, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected authorization status for #TemporaryAuth precise promptee", "{\"msg%{public}.0s\":\"Unexpected authorization status for #TemporaryAuth precise promptee\", \"ClientKey\":%{public, location:escape_only}@, \"AuthMask\":%{public}lu}", buf, 0x26u);
        }
        v83 = 2;
        v46 = CLPContext_ptr;
      }
      else
      {
        v83 = 0;
      }
LABEL_187:
      objc_msgSend(v46[239], "numberWithBool:", v40 == 1);
      v39 = 0;
LABEL_168:
      v37 = -1.0;
LABEL_169:
      v55 = -1.0;
LABEL_170:
      v87[0] = CFSTR("ClientKey");
      v88[0] = objc_msgSend(v5, "legacyClientKey");
      v87[1] = CFSTR("Special");
      v88[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v23);
      v87[2] = CFSTR("RequestType");
      v88[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8);
      v87[3] = CFSTR("GrantedStatus");
      v88[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v83);
      v87[4] = CFSTR("CCStatus");
      v88[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v39);
      v87[5] = CFSTR("OnDeckDuration");
      v88[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v37);
      v87[6] = CFSTR("ProvisionalMonitoringDuration");
      v88[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v55);
      AnalyticsSendEvent(CFSTR("com.apple.locationd.client.prompt.response"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v88, v87, 7));
      sub_1007DD8CC(a1, (uint64_t)v5, v83, v39, v73, 1, 1);
      sub_100008150(*v4);
      sub_1007F05A4((uint64_t *)v4, 0);
      goto LABEL_171;
    case 12:
      v34 = a2 & 3;
      if (v34 == 1)
        v23 = 6;
      else
        v23 = 7;
      if ((a2 & 3) == 1)
        v35 = 3;
      else
        v35 = 2;
      objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", v35, CFSTR("IncidentalUseMode"), v5);
      +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v34 == 1);
      objc_msgSend(*(id *)(a1 + 1096), "removeObject:", v5);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v36 = qword_1022A01D8;
      v37 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v38 = "Disallowed";
        *(_DWORD *)buf = 68289538;
        *(_QWORD *)&v92[2] = "";
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v92 = 2082;
        if (v34 == 1)
          v38 = "Allowed";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 2082;
        *(_QWORD *)&v92[22] = v38;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt response\", \"ClientKey\":%{public, location:escape_only}@, \"IncidentalUseMode\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      v39 = 0;
      v83 = 4;
      goto LABEL_169;
    case 13:
    case 14:
      if (v10 == 2)
      {
        v17 = 0;
        v16 = 0;
LABEL_104:
        objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", v16, CFSTR("LocationButtonUseMode"), v5);
        v48 = *(void **)(a1 + 136);
        if (v17)
        {
          sub_1007C508C(v48, (uint64_t)v5, 1, 1);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v49 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v92 = 2082;
            *(_QWORD *)&v92[2] = "";
            *(_WORD *)&v92[10] = 2114;
            *(_QWORD *)&v92[12] = v5;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth granted temporary auth , allowed chosen on #LocationButtonUse prompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
          v83 = 0;
          v23 = 8;
        }
        else
        {
          v61 = sub_100199284(objc_msgSend(objc_msgSend(v48, "readonlyStoreAtKeyPath:", v5), "dictionary"));
          if (v61 >= 5)
            v62 = 2;
          else
            v62 = dword_101BC2274[v61];
          v83 = v62;
          v23 = 9;
        }
        v71 = *(_DWORD *)(a1 + 312) - 1;
        if (v71 > 2)
          v72 = 0;
        else
          v72 = dword_101BC2268[v71];
        if ((_DWORD)v8 == 13)
          v39 = 2;
        else
          v39 = v72;
LABEL_167:
        *(_DWORD *)(a1 + 312) = 0;
        goto LABEL_168;
      }
      if (v10 == 1)
      {
        v16 = 2;
        v17 = 1;
        goto LABEL_104;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v77 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v92 = 2082;
        *(_QWORD *)&v92[2] = "";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 1026;
        *(_DWORD *)&v92[22] = a2 & 3;
        *(_WORD *)&v92[26] = 2082;
        *(_QWORD *)&v92[28] = "assert";
        v93 = 2081;
        v94 = "false";
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Impossible response to LocationButtonUse prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v78 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v92 = 2082;
        *(_QWORD *)&v92[2] = "";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 1026;
        *(_DWORD *)&v92[22] = a2 & 3;
        *(_WORD *)&v92[26] = 2082;
        *(_QWORD *)&v92[28] = "assert";
        v93 = 2081;
        v94 = "false";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v78, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Impossible response to LocationButtonUse prompt", "{\"msg%{public}.0s\":\"Impossible response to LocationButtonUse prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v30 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v92 = 2082;
        *(_QWORD *)&v92[2] = "";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 1026;
        *(_DWORD *)&v92[22] = a2 & 3;
        *(_WORD *)&v92[26] = 2082;
        *(_QWORD *)&v92[28] = "assert";
        v93 = 2081;
        v94 = "false";
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Impossible response to LocationButtonUse prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }
      v79 = 4811;
LABEL_210:
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.mm", v79, "onClientUserNotification");
      __break(1u);
LABEL_211:
      dispatch_once(&qword_1022A01D0, &stru_102154528);
LABEL_72:
      isa = v30[59].isa;
      v89[0] = 67240448;
      v89[1] = a2 & 3;
      v90 = 1026;
      *(_DWORD *)((char *)v5 + 10) = v8;
      LODWORD(v82) = 14;
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, isa, 17, "#AuthPrompt Received response (%{public}d) for invalid/unrecognized response type (%{public}d)", v89, v82);
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::onClientUserNotification(CFOptionFlags)", "%s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
LABEL_171:
      if (SHIBYTE(v86) < 0)
        operator delete(__p[0]);
      return;
    case 16:
      v27 = a2 & 3;
      if (v27 == 1)
        v23 = 10;
      else
        v23 = 11;
      v28 = sub_100199284(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary"));
      if (v28 > 4)
        v29 = 2;
      else
        v29 = dword_101BC2274[v28];
      v83 = v29;
      +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v27 == 1);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v69 = qword_1022A01D8;
      v37 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v70 = "Disallowed";
        *(_DWORD *)buf = 68289538;
        *(_QWORD *)&v92[2] = "";
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v92 = 2082;
        if (v27 == 1)
          v70 = "Allowed";
        *(_WORD *)&v92[10] = 2114;
        *(_QWORD *)&v92[12] = v5;
        *(_WORD *)&v92[20] = 2082;
        *(_QWORD *)&v92[22] = v70;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt response\", \"ClientKey\":%{public, location:escape_only}@, \"IncidentalUseMode\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      v39 = 0;
      goto LABEL_169;
    default:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v30 = &qword_1022A0000;
      v31 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = a2 & 3;
        *(_WORD *)v92 = 1026;
        *(_DWORD *)&v92[2] = v8;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "#AuthPrompt Received response (%{public}d) for invalid/unrecognized response type (%{public}d)", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_171;
      v5 = v89;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 == -1)
        goto LABEL_72;
      goto LABEL_211;
  }
}

void sub_1007CDE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007CDEA8(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = sub_100195B0C(a1, a2);
  sub_1007D4958(a1, v3, 1);
}

const __CFString *sub_1007CDED4(uint64_t a1, void *a2, void *a3)
{
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  id v9;
  __CFBundle *v10;
  uint64_t v11;
  const __CFString *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  id v18;
  const __CFString *v19;
  __CFString *v20;
  const __CFString *v21;
  uint64_t v23;
  void *__p;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  uint64_t v30;

  sub_100197040();
  v6 = sub_100195F08();
  if (!a3 || !v6)
    goto LABEL_5;
  sub_1015A2E04(&__p, (char *)objc_msgSend(a3, "UTF8String"));
  v7 = sub_1011477E4((uint64_t **)&__p);
  v8 = v7;
  if (SBYTE3(v28) < 0)
  {
    operator delete(__p);
    if (!v8)
      goto LABEL_8;
LABEL_5:
    v9 = objc_msgSend(*(id *)(a1 + 136), "stringForKey:atKeyPath:defaultValue:", CFSTR("PlatformSpecificBundleId"), a2, 0);
    if (!v9)
      v9 = objc_msgSend(a2, "bundleId");
LABEL_11:
    v13 = +[NSMutableArray array](NSMutableArray, "array");
    v14 = sub_1001AC584();
    v15 = (void *)sub_100814EB4(v14);
    if (v15)
      objc_msgSend(v13, "addObject:", v15);
    if (v9)
    {
      v23 = 0;
      v16 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", v9, 0, &v23);
      if (v23)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          v18 = objc_msgSend(v9, "UTF8String");
          __p = (void *)68289538;
          v25 = 2082;
          v26 = "";
          v27 = 2082;
          v28 = v18;
          v29 = 2114;
          v30 = v23;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Could not get LSApplicationRecord from cfDisplayIdentifier\", \"cfDisplayIdentifier\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x26u);
        }
      }
      if (v16)
      {
        v19 = (const __CFString *)objc_msgSend(v16, "localizedNameWithPreferredLocalizations:", v13);
        v12 = v19;
        if (v19)
        {
          CFRetain(v19);
LABEL_26:

          return v12;
        }
      }
      v20 = (__CFString *)sub_1001CD64C(v9);
      v21 = sub_1007EEE90(v20);
    }
    else
    {
      if (!objc_msgSend(a2, "bundlePath"))
      {
        v12 = 0;
        goto LABEL_26;
      }
      v21 = sub_1007EEE90((__CFString *)objc_msgSend(a2, "bundlePath"));
    }
    v12 = v21;
    goto LABEL_26;
  }
  if (v7)
    goto LABEL_5;
LABEL_8:
  v10 = sub_10114734C(a3);
  if (!v10)
  {
    v9 = 0;
    goto LABEL_11;
  }
  v11 = sub_1001AC584();
  v12 = sub_1001AC5C4(v11, v10, _kCFBundleDisplayNameKey, 0);
  CFRelease(v10);
  return v12;
}

void sub_1007CE160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *sub_1007CE184(uint64_t a1, uint64_t a2)
{
  id v3;
  __CFBundle *v4;
  NSObject *v5;
  NSObject *v6;
  __CFString *v7;
  __CFString *v8;
  const __CFString *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  __CFString *v15;
  uint64_t v16;
  CFStringRef v17;
  CFErrorRef errorPtr;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;

  v3 = sub_100196E90(a1, a2);
  errorPtr = 0;
  v4 = (__CFBundle *)sub_1007CE594(a1, (uint64_t)v3);
  if (!v4)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2114;
      v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"copyCombinedClientPurpose couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    }
    v6 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289282;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2114;
      v24 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "copyCombinedClientPurpose couldn't get bundle for client", "{\"msg%{public}.0s\":\"copyCombinedClientPurpose couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  v7 = sub_1007CE648(a1, v3, v4, 0, 1, 0);
  if (v7)
  {
    v8 = v7;
    goto LABEL_11;
  }
  v8 = sub_1007CE648(a1, v3, v4, 0, 0, 0);
  if (!v8)
  {
LABEL_11:
    v9 = 0;
    if (!v4)
      goto LABEL_13;
    goto LABEL_12;
  }
  v15 = sub_1007CE648(a1, v3, v4, 1u, 0, 0);
  v16 = sub_1001AC584();
  if (v15)
  {
    v9 = (const __CFString *)sub_100814D7C(v16, CFSTR("LOCATION_CLIENT_PERMISSION_MESSAGE"));
    v17 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@ %@"), v9, &errorPtr, v8, v15);
  }
  else
  {
    v9 = (const __CFString *)sub_100814D7C(v16, CFSTR("LOCATION_CLIENT_PERMISSION_MESSAGE_REDUCED"));
    v17 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), v9, &errorPtr, v8);
  }
  v8 = (__CFString *)v17;
  if (v4)
LABEL_12:
    CFRelease(v4);
LABEL_13:
  if (v9)
    CFRelease(v9);
  if (errorPtr)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v11 = objc_msgSend(-[__CFError localizedDescription](errorPtr, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2114;
      v24 = v3;
      v25 = 2082;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Error, couldn't copyCombinedClientPurpose for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v12 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v13 = objc_msgSend(-[__CFError localizedDescription](errorPtr, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2114;
      v24 = v3;
      v25 = 2082;
      v26 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Error, couldn't copyCombinedClientPurpose for client due to error returned by CFStringCreateStringWithValidatedFormat.", "{\"msg%{public}.0s\":\"#Error, couldn't copyCombinedClientPurpose for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
    }

  }
  return v8;
}

id sub_1007CE594(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (result)
    return (id)sub_101147FF4(objc_msgSend(*(id *)(a1 + 136), "stringForKey:atKeyPath:defaultValue:", CFSTR("PlatformSpecificBundleId"), result, 0), objc_msgSend(*(id *)(a1 + 136), "stringForKey:atKeyPath:defaultValue:", CFSTR("BundleId"), result, 0), (const __CFString *)objc_msgSend(*(id *)(a1 + 136), "stringForKey:atKeyPath:defaultValue:", CFSTR("BundlePath"), result, 0), 0);
  return result;
}

__CFString *sub_1007CE648(uint64_t a1, void *a2, __CFBundle *a3, unsigned int a4, int a5, __CFString *a6)
{
  NSObject *v8;
  __CFString *v9;
  uint64_t v12;
  __CFString **v13;
  const __CFString *v14;
  id v16;
  NSObject *v17;
  id v19;
  id v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int v29;
  id v30;
  __int16 v31;
  id v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  id v36;

  if (!a3)
    return 0;
  if (a4 >= 2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v34 = a2;
      v35 = 1026;
      LODWORD(v36) = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Requesting client (%{public}@) purpose for unsupported registration type %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v29 = 138543618;
      v30 = a2;
      v31 = 1026;
      LODWORD(v32) = a4;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Requesting client (%{public}@) purpose for unsupported registration type %{public}d", &v29, 18);
      sub_100512490("Generic", 1, 0, 2, "CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(CLClientKeyPath *, CFBundleRef, CLClientRegistrationResult, BOOL, CFStringRef)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    return 0;
  }
  if (a5)
  {
    v12 = sub_1001AC584();
    v13 = &off_102141068;
LABEL_11:
    v14 = sub_1001AC5C4(v12, a3, *v13, 0);
    goto LABEL_15;
  }
  if (!a4)
  {
    v23 = sub_1001AC584();
    v9 = (__CFString *)sub_1001AC5C4(v23, a3, CFSTR("NSLocationAlwaysUsageDescription"), 0);
    if (v9)
      goto LABEL_16;
    v12 = sub_1001AC584();
    v13 = &off_102141050;
    goto LABEL_11;
  }
  v16 = -[__CFString length](a6, "length");
  v12 = sub_1001AC584();
  if (!v16)
  {
    v13 = &off_102141060;
    goto LABEL_11;
  }
  v14 = sub_1008147E4(v12, a3, CFSTR("NSLocationAuthorizationPurposeDescriptionDictionary"), a6, 0);
LABEL_15:
  v9 = (__CFString *)v14;
  if (v14)
  {
LABEL_16:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      v34 = a2;
      v35 = 2080;
      v36 = -[__CFString UTF8String](v9, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "purpose string from %@'s bundle: '%s'", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v25 = qword_1022A01D8;
      v29 = 138412546;
      v30 = a2;
      v31 = 2080;
      v32 = -[__CFString UTF8String](v9, "UTF8String");
      v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "purpose string from %@'s bundle: '%s'", &v29, 22);
      sub_100512490("Generic", 1, 0, 2, "CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(CLClientKeyPath *, CFBundleRef, CLClientRegistrationResult, BOOL, CFStringRef)", "%s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
    return v9;
  }
  v19 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v19, "isValidCKP"))
    return 0;
  v20 = objc_msgSend(*(id *)(a1 + 136), "stringForKey:atKeyPath:defaultValue:", CFSTR("Purpose"), v19, 0);
  v9 = 0;
  if (a4 != 1)
  {
    v21 = v20;
    if (v20)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v22 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v34 = v19;
        v35 = 2080;
        v36 = objc_msgSend(v21, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "purpose string from %@'s property: '%s'", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v27 = qword_1022A01D8;
        v29 = 138412546;
        v30 = v19;
        v31 = 2080;
        v32 = objc_msgSend(v21, "UTF8String");
        v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "purpose string from %@'s property: '%s'", &v29, 22);
        sub_100512490("Generic", 1, 0, 2, "CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(CLClientKeyPath *, CFBundleRef, CLClientRegistrationResult, BOOL, CFStringRef)", "%s\n", v28);
        if (v28 != (char *)buf)
          free(v28);
      }
      CFRetain(v21);
      return (__CFString *)v21;
    }
  }
  return v9;
}

void sub_1007CEC18(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007F5A3C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102304AC8 != -1)
    dispatch_once(&qword_102304AC8, block);
}

uint64_t sub_1007CEC84(uint64_t a1, uint64_t a2, unsigned int *a3, NSDictionary *a4)
{
  uint64_t v8;
  id v9;
  void *v10;
  NSArray *v11;
  uint64_t v12;
  id v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  unsigned int *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  CLClientKeyPath *v22;
  unsigned int v23;
  NSObject *v24;
  NSObject *v25;
  _BOOL4 v26;
  NSObject *v27;
  id v28;
  unsigned int *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v33;
  NSObject *v34;
  BOOL v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  char *v41;
  _BYTE v42[72];
  audit_token_t v43;
  _BYTE v44[72];
  const __CFString *v45;
  NSNumber *v46;
  _DWORD v47[4];
  uint8_t buf[8];
  _BYTE v49[32];
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v8 = *a3;
  v9 = sub_1001948D4(a2, 0);
  v10 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v11 = sub_10019F2A0(a1, (uint64_t)v9);
  v12 = (uint64_t)objc_msgSend(-[NSArray objectAtIndexedSubscript:](v11, "objectAtIndexedSubscript:", 0), "intValue");
  v13 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](v11, "objectAtIndexedSubscript:", 1), "intValue");
  v14 = sub_100B9EB64(a2);
  if ((_DWORD)v12 == 2 && (sub_100B9EB5C(a2) & v14 & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing prompt because the client asked us not to\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt location services settings are frozen by restrictions - denying\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1002355A0(a3, (uint64_t)CFSTR("Restrictions are enabled.  Changing authorization isn't allowed"));
    v12 = 2;
    if (v13 <= 8 && ((1 << (char)v13) & 0x103) != 0)
      return (uint64_t)v13;
    return v12;
  }
  if (objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus"))
  {
    if (v12 > 4 || (_DWORD)v12 == 3)
      return v12;
    if (*(_QWORD *)(a1 + 272))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = +[CLClientKeyPath nullClientKeyPath](CLClientKeyPath, "nullClientKeyPath");
        v18 = *(unsigned int **)(a1 + 272);
        if (v18)
        {
          v17 = (id)*((_QWORD *)v18 + 1);
          v19 = *v18;
        }
        else
        {
          v19 = 5;
        }
        *(_DWORD *)buf = 68290050;
        *(_WORD *)v49 = 2082;
        *(_DWORD *)&buf[4] = 0;
        *(_QWORD *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2114;
        *(_QWORD *)&v49[12] = v9;
        *(_WORD *)&v49[20] = 2050;
        *(_QWORD *)&v49[22] = v8;
        *(_WORD *)&v49[30] = 2114;
        v50 = (uint64_t)v17;
        v51 = 2050;
        v52 = v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring request because authorization in progress\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inflightClientKey\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x3Au);
      }
      sub_1002355A0(a3, (uint64_t)CFSTR("App is already presenting the user with an authorization prompt"));
      return v12;
    }
    if (objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus") != 1)
      return v12;
    if (v8 <= 0xB)
    {
      if (((1 << v8) & 0xB9E) != 0)
      {
        if (sub_100BB03C4(a2))
        {
          sub_100B9DAA0(a2);
          v22 = sub_1001A4450(&v43);
          v23 = sub_1011472B8(-[CLClientKeyPath bundleId](v22, "bundleId"));
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v24 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v49 = 2082;
            *(_QWORD *)&v49[2] = "";
            *(_WORD *)&v49[10] = 2114;
            *(_QWORD *)&v49[12] = v22;
            *(_WORD *)&v49[20] = 2114;
            *(_QWORD *)&v49[22] = v9;
            *(_WORD *)&v49[30] = 1026;
            LODWORD(v50) = v23;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt check if #webClip\", \"NaturalIdentity\":%{public, location:escape_only}@, \"Client\":%{public, location:escape_only}@, \"isWebClip\":%{public}hhd}", buf, 0x2Cu);
          }
          if (v23)
          {
            v45 = CFSTR("IsWebClip");
            v46 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
            a4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
          }
        }
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v25 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v49 = 2082;
          *(_QWORD *)&v49[2] = "";
          *(_WORD *)&v49[10] = 1026;
          *(_DWORD *)&v49[12] = v8;
          *(_WORD *)&v49[16] = 2114;
          *(_QWORD *)&v49[18] = v9;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Showing #AuthPrompt\", \"requestType\":%{public}d, \"Client\":%{public, location:escape_only}@}", buf, 0x22u);
        }
        sub_1007F5A68((uint64_t)v42, (uint64_t)a3);
        v26 = sub_1007BDDB4(a1, (uint64_t)v9, v10, (uint64_t)v42, (uint64_t)a4);
        sub_100235568((uint64_t)v42);
        if (v26)
          goto LABEL_77;
        return v12;
      }
      if ((_DWORD)v8 == 5)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v38 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          return v12;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2114;
        *(_QWORD *)&v49[12] = v9;
        v39 = "{\"msg%{public}.0s\":\"#AuthPrompt #Notice ERROR: Client is depending on legacy on-demand authorization, w"
              "hich is not supported for new apps\", \"Client\":%{public, location:escape_only}@}";
LABEL_92:
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0x1Cu);
        return v12;
      }
      if ((_DWORD)v8 == 10)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v38 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          return v12;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2114;
        *(_QWORD *)&v49[12] = v9;
        v39 = "{\"msg%{public}.0s\":\"#AuthPrompt Client requested a big switch prompt, but the big switch is already on\""
              ", \"Client\":%{public, location:escape_only}@}";
        goto LABEL_92;
      }
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v40 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "#AuthPrompt Unrecognized/invalid request type: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v47[0] = 67240192;
      v47[1] = v8;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "#AuthPrompt Unrecognized/invalid request type: %{public}d", v47, 8);
      sub_100512490("Generic", 1, 0, 0, "CLTypeRegistrationResult CLClientManager::requestClientAuthorization(CLDaemonClient *, CLClientManager_Type::AuthorizationRequest, NSDictionary *)", "%s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
    return v12;
  }
  if (sub_10011E0F0())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing big switch re-enable prompt on OSX\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return 2;
  }
  if ((sub_100B9EB5C(a2) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v31 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing big switch re-enable prompt because the client asked us not to\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
LABEL_24:
    sub_1002355A0(a3, (uint64_t)CFSTR("App asked us not to show prompts"));
    return 2;
  }
  if ((v14 & 1) == 0
    && (!sub_100B9EB74(a2) || (int)sub_1007C0318(a1, (uint64_t)v9) >= *(_DWORD *)(a1 + 944)))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v33 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing big switch re-enable prompt because the client has asked for too many\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1002355A0(a3, (uint64_t)CFSTR("App asked us too many times to show big switch re-enable prompt."));
    return 2;
  }
  if (*(_QWORD *)(a1 + 272))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v27 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v28 = +[CLClientKeyPath nullClientKeyPath](CLClientKeyPath, "nullClientKeyPath");
      v29 = *(unsigned int **)(a1 + 272);
      if (v29)
      {
        v28 = (id)*((_QWORD *)v29 + 1);
        v30 = *v29;
      }
      else
      {
        v30 = 5;
      }
      *(_DWORD *)buf = 68290050;
      *(_WORD *)v49 = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      *(_WORD *)&v49[20] = 2050;
      *(_QWORD *)&v49[22] = v8;
      *(_WORD *)&v49[30] = 2114;
      v50 = (uint64_t)v28;
      v51 = 2050;
      v52 = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring request because authorization in progress -- not showing big switch re-enable prompt\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x3Au);
    }
    sub_1002355A0(a3, (uint64_t)CFSTR("App is already presenting the user with an authorization prompt"));
    return 2;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v34 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v49 = 2082;
    *(_QWORD *)&v49[2] = "";
    *(_WORD *)&v49[10] = 2114;
    *(_QWORD *)&v49[12] = v9;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Showing big switch #AuthPrompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  *a3 = 10;
  sub_1007F5A68((uint64_t)v44, (uint64_t)a3);
  v35 = sub_1007CF9C0(a1, (uint64_t)v9, v10, (uint64_t)v44);
  sub_100235568((uint64_t)v44);
  v12 = 2;
  if (v35)
  {
    LODWORD(v8) = 10;
LABEL_77:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v36 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(_QWORD *)&v49[12] = v9;
      *(_WORD *)&v49[20] = 2050;
      *(_QWORD *)&v49[22] = v8;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt posted\", \"Client\":%{public, location:escape_only}@, \"type\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
    }
    v37 = *(void **)(a1 + 136);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v49 = 3221225472;
    *(_QWORD *)&v49[8] = sub_10020F11C;
    *(_QWORD *)&v49[16] = &unk_102153D78;
    *(_QWORD *)&v49[24] = v9;
    v50 = a1;
    objc_msgSend(v37, "iterateIdentitiesRelatedToKeyPath:withBlock:", v9, buf);
  }
  return v12;
}

void sub_1007CF998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_100235568((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007CF9C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  CFStringRef v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL8 result;
  CFStringRef v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFDictionary *v26;
  __CFUserNotification *v27;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *v29;
  double v30;
  NSObject *v31;
  char *v32;
  NSObject *v33;
  char *v34;
  SInt32 error;
  CFErrorRef errorPtr;
  int v37;
  id v38;
  uint8_t buf[4];
  _BYTE v40[14];
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;
  void *values[4];
  void *keys[4];

  v7 = sub_100196E90(a1, a2);
  if (!&SBUserNotificationPendInSetupIfNotAllowedKey)
    return 0;
  v8 = v7;
  v9 = sub_1007CDED4(a1, v7, a3);
  if (!v9)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(_QWORD *)&v40[6] = "";
      v41 = 2114;
      v42 = v8;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"createClientPrefsNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v19 = qword_1022A01D8;
    result = os_signpost_enabled((os_log_t)qword_1022A01D8);
    if (!result)
      return result;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v40 = 0;
    *(_WORD *)&v40[4] = 2082;
    *(_QWORD *)&v40[6] = "";
    v41 = 2114;
    v42 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "createClientPrefsNotification: BundleDisplayName nil", "{\"msg%{public}.0s\":\"createClientPrefsNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    return 0;
  }
  v10 = v9;
  errorPtr = 0;
  v11 = sub_1001AC584();
  v12 = (const __CFString *)sub_100814D7C(v11, CFSTR("LOCATION_DISABLED"));
  v13 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, CFSTR("%@"), v12, &errorPtr, v10);
  if (errorPtr)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v15 = objc_msgSend(-[__CFError localizedDescription](errorPtr, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(_QWORD *)&v40[6] = "";
      v41 = 2114;
      v42 = v8;
      v43 = 2082;
      v44 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Error, couldn't createAndPostClientPrefsNotification for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v16 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v17 = objc_msgSend(-[__CFError localizedDescription](errorPtr, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(_QWORD *)&v40[6] = "";
      v41 = 2114;
      v42 = v8;
      v43 = 2082;
      v44 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Error, couldn't createAndPostClientPrefsNotification for client due to error returned by CFStringCreateStringWithValidatedFormat.", "{\"msg%{public}.0s\":\"#Error, couldn't createAndPostClientPrefsNotification for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
    }

    return 0;
  }
  v21 = v13;
  v22 = sub_1001AC584();
  v23 = (void *)sub_100814D7C(v22, CFSTR("LOCATION_DISABLED_SETTINGS"));
  v24 = sub_1001AC584();
  v25 = (void *)sub_100814D7C(v24, CFSTR("LOCATION_DISABLED_CANCEL"));
  keys[0] = (void *)SBUserNotificationPendInSetupIfNotAllowedKey;
  keys[1] = (void *)kCFUserNotificationAlertHeaderKey;
  keys[2] = (void *)kCFUserNotificationAlternateButtonTitleKey;
  keys[3] = (void *)kCFUserNotificationDefaultButtonTitleKey;
  values[0] = kCFBooleanTrue;
  values[1] = (void *)v21;
  values[2] = v23;
  values[3] = v25;
  v26 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v12)
    CFRelease(v12);
  if (v21)
    CFRelease(v21);
  if (v23)
    CFRelease(v23);
  if (v25)
    CFRelease(v25);
  CFRelease(v10);
  error = 0;
  v27 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, &error, v26);
  CFRelease(v26);
  if (v27)
  {
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v27, (CFUserNotificationCallBack)sub_1007F0F54, 0);
    if (RunLoopSource)
    {
      v29 = (__CFRunLoop *)sub_100193530();
      CFRunLoopAddSource(v29, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
      objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
      sub_1007F0FC0(a4, v27, v30);
      CFRelease(v27);
      operator new();
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v33 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Could not create runloop source for client prefs notification for %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v37 = 138543362;
      v38 = v8;
      v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Could not create runloop source for client prefs notification for %{public}@", &v37, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLClientManager::createAndPostClientPrefsNotification(CLClientKeyPath *, NSString *, CLClientManager_Type::AuthorizationRequest)", "%s\n", v34);
      if (v34 != (char *)buf)
        free(v34);
    }
    CFRelease(v27);
    return 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v31 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Could not create client prefs notification for %{public}@", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v37 = 138543362;
    v38 = v8;
    v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Could not create client prefs notification for %{public}@", &v37, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLClientManager::createAndPostClientPrefsNotification(CLClientKeyPath *, NSString *, CLClientManager_Type::AuthorizationRequest)", "%s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
    return 0;
  }
  return result;
}

void sub_1007D0180()
{
  operator delete();
}

NSDictionary *sub_1007D01AC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSDictionary *v11;
  _QWORD v13[11];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  _QWORD v34[11];
  _QWORD v35[11];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1001A09FC();
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 1;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 1;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 1;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 1;
  v3 = +[NSMutableArray array](NSMutableArray, "array");
  v4 = *(void **)(v1 + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007D05BC;
  v13[3] = &unk_102153EC0;
  v13[9] = &v14;
  v13[10] = v1;
  v13[4] = v3;
  v13[5] = &v30;
  v13[6] = &v26;
  v13[7] = &v22;
  v13[8] = &v18;
  objc_msgSend(v4, "iterateAllAnchorKeyPathsWithBlock:", v13);
  v5 = log2((double)(int)objc_msgSend(*(id *)(v1 + 136), "clientCount"));
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(*(id *)(v1 + 40), "currentLatchedAbsoluteTimestamp");
    v7 = objc_msgSend(v3, "objectAtIndexedSubscript:", (int)v6 % (int)objc_msgSend(v3, "count"));
    v8 = objc_msgSend(*(id *)(v1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v7, 0);
    v9 = objc_msgSend(*(id *)(v1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v7, 0);
    v10 = objc_msgSend(*(id *)(v1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("IncidentalUseMode"), v7, 0);
    v34[0] = CFSTR("BigSwitchEnabled");
    v35[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v2 == 1);
    v34[1] = CFSTR("AggLog2ClientCount");
    v35[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v5);
    v34[2] = CFSTR("AggNoAlwaysApps");
    v35[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v31 + 24));
    v34[3] = CFSTR("AggNoChosenCCOn");
    v35[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v27 + 24));
    v34[4] = CFSTR("AggNoSSDisabled");
    v35[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v23 + 24));
    v34[5] = CFSTR("AggNoIUEligible");
    v35[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v19 + 24));
    v34[6] = CFSTR("AggNoIUDenied");
    v35[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v15 + 24));
    v34[7] = CFSTR("ClientKey");
    v35[7] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", objc_msgSend(objc_msgSend(v7, "legacyClientKey"), "UTF8String"));
    v34[8] = CFSTR("AuthMask");
    v35[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
    v34[9] = CFSTR("CCStatus");
    v35[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9);
    v34[10] = CFSTR("IUMode");
    v35[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 11);
  }
  else
  {
    v11 = 0;
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  return v11;
}

void sub_1007D0558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1007D05BC(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 v11;
  BOOL v12;
  uint64_t v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22[2];
  void *__p[2];
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = objc_msgSend(a2, "legacyClientKey");
  if (objc_msgSend(*(id *)(v4 + 136), "hasValueForKey:atKeyPath:", CFSTR("SupportedAuthorizationMask"), a2)&& (objc_msgSend(*(id *)(v4 + 136), "hasValueForKey:atKeyPath:", CFSTR("TimeMissing"), a2) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  }
  v6 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), a2, 0);
  v7 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), a2, 0);
  v8 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("IncidentalUseMode"), a2, 0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v9 = v6 == 4;
  else
    v9 = 0;
  if (v9)
  {
    if (a2)
    {
      objc_msgSend(a2, "clientName");
      if (BYTE1(v20))
      {
LABEL_14:
        if (SHIBYTE(v24) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v22[0]);
        if (SHIBYTE(v21) < 0)
          operator delete(*((void **)&v20 + 1));
        if (SHIBYTE(v19) < 0)
          operator delete(v18[1]);
        if (SHIBYTE(v18[0]) < 0)
          operator delete(v17[0]);
        if (SHIBYTE(v16) < 0)
          operator delete(v15[1]);
        if (SHIBYTE(v15[0]) < 0)
          operator delete(v14[0]);
        goto LABEL_28;
      }
    }
    else
    {
      v25 = 0;
      *(_OWORD *)__p = 0u;
      v24 = 0u;
      v21 = 0u;
      *(_OWORD *)v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)v15 = 0u;
      v16 = 0u;
      *(_OWORD *)v14 = 0u;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    goto LABEL_14;
  }
LABEL_28:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    v10 = v7 == 2;
  else
    v10 = 0;
  if (v10)
  {
    sub_1015A2E04(v14, (char *)objc_msgSend(v5, "UTF8String"));
    if (sub_10142AE54((_QWORD **)v14))
    {
      v11 = sub_101147CE0(v5);
      if (SHIBYTE(v15[0]) < 0)
        operator delete(v14[0]);
      if ((v11 & 1) == 0)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    }
    else if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    v12 = v6 == 1;
  else
    v12 = 0;
  if (v12
    && (objc_msgSend(CFSTR("com.apple.locationd.bundle-/System/Library/LocationBundles/WifiCalling.bundle"), "isEqualToString:", v5) & 1) == 0)
  {
    if (a2)
    {
      objc_msgSend(a2, "clientName");
      if (BYTE1(v20))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
    else
    {
      v25 = 0;
      *(_OWORD *)__p = 0u;
      v24 = 0u;
      v21 = 0u;
      *(_OWORD *)v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)v15 = 0u;
      v16 = 0u;
      *(_OWORD *)v14 = 0u;
    }
    if (SHIBYTE(v24) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v21) < 0)
      operator delete(*((void **)&v20 + 1));
    if (SHIBYTE(v19) < 0)
      operator delete(v18[1]);
    if (SHIBYTE(v18[0]) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[1]);
    if (SHIBYTE(v15[0]) < 0)
      operator delete(v14[0]);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (*(_BYTE *)(v13 + 24) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    if (v8)
    {
      *(_BYTE *)(v13 + 24) = 0;
      if (v8 == 2)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
    }
  }
}

void sub_1007D0918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007D0934(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  NSNumber *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  NSNumber *v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  NSNumber *v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  NSNumber *v26;
  id v27;
  _QWORD *v28;
  _QWORD *v29;
  id v30;
  _QWORD *j;
  _QWORD *k;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  NSNumber *v37;
  id v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  id v41;
  uint64_t v42;
  void *m;
  void *v44;
  NSNumber *v45;
  _QWORD *v46;
  const void *v47;
  uint64_t v48;
  NSNumber *v49;
  void *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  id v55;
  id v56;
  id v57;
  CLOSTransaction *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id obj;
  id obja;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  _BYTE v77[128];

  v59 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLClientManager::getInternalState");
  v63 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "getStateSummary"), "cl_deepMutableCopy");
  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  obj = +[NSMutableArray array](NSMutableArray, "array");
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v3 = *(void **)(a1 + 1080);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v73;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v73 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)i);
        v8 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", objc_msgSend(*(id *)(a1 + 1080), "objectForKeyedSubscript:", v7));
        objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(*(id *)(a1 + 1080), "objectForKeyedSubscript:", v7), "getStateSummary"), v8);
        v9 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", v7));
        if (objc_msgSend(v9, "isValidCKP"))
          objc_msgSend(objc_msgSend(v63, "objectForKeyedSubscript:", objc_msgSend(v9, "clientKey")), "setObject:forKeyedSubscript:", v8, CFSTR("AuthContext"));
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
    }
    while (v4);
  }
  v62 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v10 = *(_QWORD **)(a1 + 816);
  if (v10 != (_QWORD *)(a1 + 824))
  {
    do
    {
      v11 = v10[5];
      v12 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v11);
      objc_msgSend(v62, "setObject:forKeyedSubscript:", sub_100BB03CC(v11), v12);
      v13 = objc_msgSend(objc_msgSend(v62, "objectForKeyedSubscript:", v12), "objectForKeyedSubscript:", CFSTR("AuthContext"));
      if (v13 && !objc_msgSend(v2, "objectForKeyedSubscript:", v13))
        objc_msgSend(obj, "addObject:", sub_100B9E874(v11));
      v14 = (_QWORD *)v10[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v10[2];
          v16 = *v15 == (_QWORD)v10;
          v10 = v15;
        }
        while (!v16);
      }
      v10 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 824));
  }
  v61 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v17 = *(_QWORD **)(a1 + 888);
  if (v17 != (_QWORD *)(a1 + 896))
  {
    do
    {
      v18 = v17[5];
      v19 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v18);
      objc_msgSend(v61, "setObject:forKeyedSubscript:", sub_101106354((CLConnection **)v18), v19);
      v20 = objc_msgSend(objc_msgSend(v61, "objectForKeyedSubscript:", v19), "objectForKeyedSubscript:", CFSTR("AuthContext"));
      if (v20 && !objc_msgSend(v2, "objectForKeyedSubscript:", v20))
        objc_msgSend(obj, "addObject:", *(_QWORD *)(v18 + 40));
      v21 = (_QWORD *)v17[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v17[2];
          v16 = *v22 == (_QWORD)v17;
          v17 = v22;
        }
        while (!v16);
      }
      v17 = v22;
    }
    while (v22 != (_QWORD *)(a1 + 896));
  }
  v23 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v24 = *(_QWORD **)(a1 + 912);
  if (v24 != (_QWORD *)(a1 + 920))
  {
    do
    {
      v25 = v24[4];
      v26 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v25);
      objc_msgSend(v23, "setObject:forKeyedSubscript:", sub_101106354((CLConnection **)v25), v26);
      v27 = objc_msgSend(objc_msgSend(v23, "objectForKeyedSubscript:", v26), "objectForKeyedSubscript:", CFSTR("AuthContext"));
      if (v27 && !objc_msgSend(v2, "objectForKeyedSubscript:", v27))
        objc_msgSend(obj, "addObject:", *(_QWORD *)(v25 + 40));
      v28 = (_QWORD *)v24[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v24[2];
          v16 = *v29 == (_QWORD)v24;
          v24 = v29;
        }
        while (!v16);
      }
      v24 = v29;
    }
    while (v29 != (_QWORD *)(a1 + 920));
  }
  v30 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  for (j = *(_QWORD **)(a1 + 992); j; j = (_QWORD *)*j)
  {
    for (k = (_QWORD *)j[7]; k; k = (_QWORD *)*k)
    {
      v33 = (std::__shared_weak_count *)k[4];
      if (v33)
      {
        v34 = std::__shared_weak_count::lock(v33);
        v71 = v34;
        if (v34)
        {
          v35 = v34;
          v36 = (_QWORD *)k[3];
          v70 = v36;
          if (v36)
          {
            v37 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v36);
            objc_msgSend(v30, "setObject:forKeyedSubscript:", (*(uint64_t (**)(_QWORD *))(*v36 + 32))(v36), v37);
            v38 = objc_msgSend(objc_msgSend(v30, "objectForKeyedSubscript:", v37), "objectForKeyedSubscript:", CFSTR("AuthContext"));
            if (v38)
            {
              if (!objc_msgSend(v2, "objectForKeyedSubscript:", v38))
                objc_msgSend(obj, "addObject:", v36[17]);
            }
          }
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
    }
  }
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
  if (v41)
  {
    v42 = *(_QWORD *)v67;
    do
    {
      for (m = 0; m != v41; m = (char *)m + 1)
      {
        if (*(_QWORD *)v67 != v42)
          objc_enumerationMutation(obj);
        v44 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)m);
        v45 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v44);
        if (!objc_msgSend(v2, "objectForKeyedSubscript:", v45))
          objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(v44, "getStateSummary"), v45);
      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
    }
    while (v41);
  }
  v60 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  obja = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v46 = *(_QWORD **)(a1 + 840);
  if (v46 != (_QWORD *)(a1 + 848))
  {
    do
    {
      v47 = (const void *)v46[5];
      v48 = (*(uint64_t (**)(const void *))(*(_QWORD *)v47 + 32))(v47);
      if (v48)
      {
        v49 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v47);
        v51 = obja;
        if (v50
        {
          objc_msgSend(v51, "setObject:forKeyedSubscript:", v48, v49);
        }
      }
      v53 = (_QWORD *)v46[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (_QWORD *)v46[2];
          v16 = *v54 == (_QWORD)v46;
          v46 = v54;
        }
        while (!v16);
      }
      v46 = v54;
    }
    while (v54 != (_QWORD *)(a1 + 848));
  }
  v55 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v55, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("CollectTimestamp"));
  v56 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v56, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ssZ"));
  objc_msgSend(v55, "setObject:forKeyedSubscript:", objc_msgSend(v56, "stringFromDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", CFAbsoluteTimeGetCurrent())), CFSTR("CollectTime"));
  objc_msgSend(v55, "setObject:forKeyedSubscript:", -[NSProcessInfo operatingSystemVersionString](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "operatingSystemVersionString"), CFSTR("BuildVersion"));
  v57 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v63, CFSTR("AuthorizationDatabaseState"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", sub_100C1F534(*(_QWORD *)(a1 + 376)), CFSTR("InUseLevelTrackerState"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v2, CFSTR("AuthorizationContextStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v62, CFSTR("DaemonClientStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v61, CFSTR("DaemonIdentifiableClientStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v23, CFSTR("DaemonIdentifiableClientWithoutConnectionStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v30, CFSTR("PersistentSubscriptionStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v60, CFSTR("InUseAssertionStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", obja, CFSTR("EmergencyAssertionStates"));
  objc_msgSend(v57, "setObject:forKeyedSubscript:", v55, CFSTR("CollectionMetadata"));

  return v57;
}

void sub_1007D1194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007D11B4(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  double v8;
  double v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  NSObject *v31;
  unint64_t v32;
  id v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[6];
  uint8_t v47[128];
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  int v55;
  _BYTE v56[128];

  v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (v6)
  {
    v7 = v6;
    v37 = a3;
    if (qword_102304A80 != -1)
      dispatch_once(&qword_102304A80, &stru_102153EE0);
    objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
    v9 = v8 / 86400.0;
    v10 = (unint64_t)v9;
    if (qword_102304A70 == (unint64_t)v9)
      goto LABEL_19;
    qword_102304A70 = (unint64_t)v9;
    objc_msgSend((id)qword_102304A78, "removeAllObjects");
    v11 = +[NSMutableArray array](NSMutableArray, "array");
    v12 = *(void **)(a1 + 136);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1007D1B4C;
    v46[3] = &unk_102153BE8;
    v46[4] = v11;
    v46[5] = a1;
    objc_msgSend(v12, "iterateAllAnchorKeyPathsWithBlock:", v46);
    v13 = objc_msgSend(v11, "count");
    if (v13)
    {
      v14 = (unint64_t)v13;
      v15 = 5;
      v16 = v10;
      do
      {
        v17 = objc_msgSend(v11, "objectAtIndex:", v16 % v14);
        objc_msgSend((id)qword_102304A78, "addObject:", v17);
        v16 += v10;
        --v15;
      }
      while (v15);
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v18 = (void *)qword_102304A78;
      v19 = objc_msgSend((id)qword_102304A78, "countByEnumeratingWithState:objects:count:", &v42, v56, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v43;
        do
        {
          v22 = 0;
          do
          {
            if (*(_QWORD *)v43 != v21)
              objc_enumerationMutation(v18);
            v23 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v22);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v24 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289538;
              v49 = 0;
              v50 = 2082;
              v51 = "";
              v52 = 2114;
              v53 = v23;
              v54 = 1026;
              v55 = v14;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MetricForFunctionCalls: adding client of the day\", \"ckp\":%{public, location:escape_only}@, \"totalClients\":%{public}d}", buf, 0x22u);
            }
            v22 = (char *)v22 + 1;
          }
          while (v20 != v22);
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v42, v56, 16);
        }
        while (v20);
      }
LABEL_19:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v25 = (void *)qword_102304A78;
      v26 = objc_msgSend((id)qword_102304A78, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v39;
        do
        {
          v29 = 0;
          do
          {
            if (*(_QWORD *)v39 != v28)
              objc_enumerationMutation(v25);
            v30 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v29);
            if (objc_msgSend(objc_msgSend(v30, "clientAnchor"), "isEqualToString:", objc_msgSend(v7, "clientAnchor")))
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v31 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 68289282;
                v49 = 0;
                v50 = 2082;
                v51 = "";
                v52 = 2114;
                v53 = v7;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MetricForFunctionCalls: sending metrics for client\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
              }
              v32 = (unint64_t)objc_msgSend(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageFunctionBitmapKey")), "unsignedIntegerValue");
              v33 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
              objc_msgSend(v33, "setObject:forKeyedSubscript:", objc_msgSend(v30, "description"), CFSTR("client"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageTotalFunctionCallsKey")), CFSTR("invocationCount"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v32 & 1), CFSTR("LSEnabled"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 1) & 1), CFSTR("APIAvailable_G"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 2) & 1), CFSTR("StartLocation"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 3) & 1), CFSTR("StopLocation"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 4) & 1), CFSTR("ReqLocation"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 5) & 1), CFSTR("Deferred_G"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 6) & 1), CFSTR("StartHeading"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 7) & 1), CFSTR("StopHeading"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 8) & 1), CFSTR("StartSLC"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 9) & 1), CFSTR("StopSLC"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 10) & 1), CFSTR("StartPushes"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 11) & 1), CFSTR("StopPushes"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 12) & 1), CFSTR("StartRegion"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 13) & 1), CFSTR("StopRegion"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 14) & 1), CFSTR("RegionState"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 15) & 1), CFSTR("MaxRegionDistance"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 16) & 1), CFSTR("Regions"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 17) & 1), CFSTR("Ranging_G"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 18) & 1), CFSTR("Historical"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 19) & 1), CFSTR("AuthStatus"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 20) & 1), CFSTR("AccuracyAuth"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 21) & 1), CFSTR("WidgetAuth"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 22) & 1), CFSTR("RequestWIU"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 23) & 1), CFSTR("RequestAlways"));
              objc_msgSend(v33, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 24) & 1), CFSTR("RequestAccuracy"));
              AnalyticsSendEvent(CFSTR("com.apple.CoreLocation.invocationcount"), v33);
            }
            v29 = (char *)v29 + 1;
          }
          while (v27 != v29);
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
        }
        while (v27);
      }
      return;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v36 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2114;
      v53 = a2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MetricForFunctionCalls: No clients considered for metrics today.\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v34 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2114;
      v53 = a2;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client is not registered. Skip metric for function calls\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v35 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2114;
      v53 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client is not registered. Skip metric for function calls", "{\"msg%{public}.0s\":\"Client is not registered. Skip metric for function calls\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
}

void sub_1007D1B24(id a1)
{
  qword_102304A78 = (uint64_t)+[NSMutableSet set](NSMutableSet, "set");
}

id sub_1007D1B4C(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("isSystemService"), a2, 0);
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return result;
}

void sub_1007D1BA4(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v12 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v12, "isValidCKP") & 1) != 0)
  {
    sub_1007D1D18(a1, (uint64_t)v12, a3, a4, a5, a6);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v14[0] = 68289282;
      v14[1] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#luHistorical client not found - fetching dateIntervals\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v14, 0x1Cu);
    }
  }
}

void sub_1007D1D18(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  NSObject *v13;
  unsigned int v14;
  int v15;
  id v16;
  NSDate *v17;
  NSObject *v18;
  char v19;
  int v20;
  int v21;
  unint64_t v22;
  id v23;
  id v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  NSObject *v30;
  unsigned int v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  char *v37;
  char *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unsigned __int8 v43;
  id v44;
  uint64_t v45;
  void *i;
  void *v47;
  NSObject *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id obj;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[8];
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  _BYTE v65[128];
  uint64_t buf;
  __int16 v67;
  const char *v68;
  __int16 v69;
  _BYTE v70[18];
  __int16 v71;
  id v72;
  __int16 v73;
  id v74;
  __int16 v75;
  id v76;

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    v54 = sub_100196E90(a1, a2);
    if (objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("com.apple.developer.corelocation.wilderness-safety")), "BOOLValue"))
    {
      obj = +[NSMutableArray array](NSMutableArray, "array");
      v12 = a3;
    }
    else
    {
      v14 = objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("com.apple.locationd.transcript-session")), "BOOLValue");
      obj = +[NSMutableArray array](NSMutableArray, "array");
      v12 = a3;
      if (!v14)
      {
        v15 = 0;
        v53 = 0;
        goto LABEL_11;
      }
    }
    v53 = sub_1007C2CF8(a1, a5);
    v15 = 1;
LABEL_11:
    v16 = +[NSMutableArray array](NSMutableArray, "array");
    v51 = a1;
    v17 = sub_1007D446C(a1, (uint64_t)v54);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68290306;
      v67 = 2082;
      v68 = "";
      v69 = 2114;
      *(_QWORD *)v70 = a5;
      *(_WORD *)&v70[8] = 2114;
      *(_QWORD *)&v70[10] = v17;
      v71 = 2114;
      v72 = objc_msgSend(v12, "startDate");
      v73 = 2114;
      v74 = objc_msgSend(v12, "endDate");
      v75 = 2114;
      v76 = v54;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationAttributionInfo #luHistorical calculateCheeseCoverage\", \"lookbackWindowStartDate\":%{public, location:escape_only}@, \"transcriptStartDate\":%{public, location:escape_only}@, \"interestStartDate\":%{public, location:escape_only}@, \"interestEndDate\":%{public, location:escape_only}@, \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x44u);
    }
    v19 = v15 ^ 1;
    if (!v17)
      v19 = 1;
    if ((v19 & 1) != 0)
    {
      v52 = 0;
      if (!v15)
      {
LABEL_35:
        v61 = 0;
        v62 = &v61;
        v63 = 0x2020000000;
        v64 = 0;
        if ((_os_feature_enabled_impl("CoreLocation", "CLSwissLocationAttribution") & 1) != 0)
        {
          v29 = *(void **)(v51 + 544);
          v60[0] = _NSConcreteStackBlock;
          v60[1] = 3221225472;
          v60[2] = sub_1007D4848;
          v60[3] = &unk_102153FA0;
          v60[6] = &v61;
          v60[7] = v51;
          v60[4] = v16;
          v60[5] = obj;
          sub_1007C3040(v29, (uint64_t)v54, (uint64_t)v60);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v30 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v31 = objc_msgSend(obj, "count");
            buf = 68289538;
            v67 = 2082;
            v68 = "";
            v69 = 1026;
            *(_DWORD *)v70 = v31;
            *(_WORD *)&v70[4] = 2114;
            *(_QWORD *)&v70[6] = v54;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationAttributionInfo finished iterating through swiss cheese archive\", \"resultCount\":%{public}d, \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x22u);
          }
        }
        while (1)
        {
          v32 = objc_msgSend(v16, "count", v51);
          if ((unint64_t)v32 <= *((int *)v62 + 6))
            break;
          objc_msgSend(obj, "addObject:", objc_msgSend(v16, "objectAtIndexedSubscript:"));
          ++*((_DWORD *)v62 + 6);
        }
        objc_msgSend(objc_msgSend(v12, "startDate"), "timeIntervalSinceReferenceDate");
        v34 = v33;
        objc_msgSend(objc_msgSend(v12, "endDate"), "timeIntervalSinceReferenceDate");
        v36 = v35;
        v37 = (char *)objc_msgSend(obj, "count");
        if (v37)
        {
          v38 = v37 - 1;
          do
          {
            objc_msgSend(objc_msgSend(objc_msgSend(obj, "objectAtIndexedSubscript:", v38), "startDate"), "timeIntervalSinceReferenceDate");
            v40 = v39;
            objc_msgSend(objc_msgSend(objc_msgSend(obj, "objectAtIndexedSubscript:", v38), "endDate"), "timeIntervalSinceReferenceDate");
            v42 = v41;
            v43 = objc_msgSend(objc_msgSend(obj, "objectAtIndexedSubscript:", v38), "intersectsDateInterval:", v12);
            if (v40 < v34 || v42 > v36)
            {
              if ((v43 & 1) != 0)
              {
                if (v40 < v34 || v42 <= v36 || v40 >= v36)
                {
                  if (v40 < v34 && v42 <= v36)
                    objc_msgSend(obj, "replaceObjectAtIndex:withObject:", v38, objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v34), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v42)));
                }
                else
                {
                  objc_msgSend(obj, "replaceObjectAtIndex:withObject:", v38, objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v40), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v36)));
                }
              }
              else
              {
                objc_msgSend(obj, "removeObjectAtIndex:", v38);
              }
            }
            --v38;
          }
          while (v38 != (char *)-1);
        }
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
        if (v44)
        {
          v45 = *(_QWORD *)v57;
          do
          {
            for (i = 0; i != v44; i = (char *)i + 1)
            {
              if (*(_QWORD *)v57 != v45)
                objc_enumerationMutation(obj);
              v47 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v48 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
              {
                v49 = objc_msgSend(v47, "startDate");
                v50 = objc_msgSend(v47, "endDate");
                buf = 68289794;
                v67 = 2082;
                v68 = "";
                v69 = 2114;
                *(_QWORD *)v70 = v49;
                *(_WORD *)&v70[8] = 2114;
                *(_QWORD *)&v70[10] = v50;
                v71 = 2114;
                v72 = v54;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationAttributionInfo #luHistorical cheeseCoverage calculated and includes this interval\", \"startDate\":%{public, location:escape_only}@, \"endDate\":%{public, location:escape_only}@, \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
              }
            }
            v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
          }
          while (v44);
        }
        (*(void (**)(uint64_t, id))(a6 + 16))(a6, obj);
        _Block_object_dispose(&v61, 8);
        return;
      }
    }
    else
    {
      v52 = +[NSMutableArray array](NSMutableArray, "array");
      objc_msgSend(v52, "addObject:", objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v17, +[NSDate now](NSDate, "now")));
      if (!v15)
        goto LABEL_35;
    }
    v20 = 0;
    v21 = 0;
    while (1)
    {
      if ((unint64_t)objc_msgSend(v53, "count", v51) <= v20)
      {
        if ((unint64_t)objc_msgSend(v52, "count") <= v21)
          goto LABEL_35;
        v22 = v21;
      }
      else
      {
        v22 = v21;
      }
      v23 = objc_msgSend(v53, "count");
      v24 = objc_msgSend(v52, "count");
      v25 = (unint64_t)v24;
      if ((unint64_t)v24 <= v22)
      {
        v27 = 0.0;
        if ((unint64_t)v23 <= v20)
          goto LABEL_34;
      }
      else
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v52, "objectAtIndexedSubscript:", v22), "startDate"), "timeIntervalSinceReferenceDate");
        v27 = v26;
        if ((unint64_t)v23 <= v20)
          goto LABEL_32;
      }
      objc_msgSend(objc_msgSend(objc_msgSend(v53, "objectAtIndexedSubscript:", v20), "startDate"), "timeIntervalSinceReferenceDate");
      if (v28 > v27 && v25 > v22)
      {
LABEL_32:
        v24 = objc_msgSend(v16, "addObject:", objc_msgSend(v52, "objectAtIndexedSubscript:", v22));
        ++v21;
        goto LABEL_34;
      }
      v24 = objc_msgSend(v16, "addObject:", objc_msgSend(v53, "objectAtIndexedSubscript:", v20++));
LABEL_34:
      sub_1007D46F0((uint64_t)v24, v16);
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v67 = 2082;
    v68 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", (uint8_t *)&buf, 0x12u);
  }
}

void sub_1007D2594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1007D25F4(uint64_t a1, uint64_t a2)
{
  id v3;
  double v4;
  unsigned __int8 v5;
  unsigned int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;

  v3 = objc_msgSend(objc_alloc((Class)CLPLocationConsumptionScoreInfo), "initWithData:", a2);
  if (objc_msgSend(CFSTR("com.apple.locationd.all-location-clients-stop"), "isEqualToString:", objc_msgSend(v3, "clientKey")))
  {
    v4 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v4 > 0.0 && v4 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    goto LABEL_6;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "isValidCKP") & 1) == 0)
  {
LABEL_11:
    v7 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "startTime");
    v9 = v8;
    objc_msgSend(v3, "stopTime");
    (*(void (**)(uint64_t, double, double))(v7 + 16))(v7, v9, v10);
    goto LABEL_19;
  }
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clientKey"), "isEqualToString:", objc_msgSend(v3, "clientKey"));
  v6 = objc_msgSend(v3, "hasStartTime");
  if ((v5 & 1) == 0)
  {
    if (v6)
      objc_msgSend(v3, "startTime");
    else
      objc_msgSend(v3, "stopTime");
    v12 = *(_QWORD *)(a1 + 56);
    goto LABEL_18;
  }
  if (v6 && objc_msgSend(v3, "hasStopTime"))
    goto LABEL_11;
  if (objc_msgSend(v3, "hasStartTime"))
  {
    objc_msgSend(v3, "startTime");
    v12 = *(_QWORD *)(a1 + 48);
LABEL_18:
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 24) = v11;
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "hasStopTime"))
  {
    v13 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v13 > 0.0)
    {
      objc_msgSend(v3, "stopTime");
      if (v13 < v14)
      {
        v15 = *(_QWORD *)(a1 + 40);
        v16 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        objc_msgSend(v3, "stopTime");
        (*(void (**)(uint64_t, double, double))(v15 + 16))(v15, v16, v17);
LABEL_6:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
        goto LABEL_19;
      }
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v18 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v22 = 68289538;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2050;
    v27 = v19;
    v28 = 2114;
    v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid ConsumptionScore interval\", \"startTime\":\"%{public}f\", \"scoreInfo\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v20 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v22 = 68289538;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2050;
    v27 = v21;
    v28 = 2114;
    v29 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid ConsumptionScore interval", "{\"msg%{public}.0s\":\"Invalid ConsumptionScore interval\", \"startTime\":\"%{public}f\", \"scoreInfo\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
  }
LABEL_19:

}

void sub_1007D2964(uint64_t a1)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void **p_p;
  void *__p;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  double v17;

  sub_1015A2E04(&__p, (char *)objc_msgSend(CFSTR("com.apple.locationd.all-location-clients-stop"), "UTF8String"));
  p_p = &__p;
  v2 = (double *)sub_100199794(a1, (unsigned __int8 *)&__p, (uint64_t)&unk_101B9EB60, (__int128 **)&p_p);
  if (SBYTE3(v15) < 0)
    operator delete(__p);
  v3 = *(double **)(a1 + 16);
  if (v3)
  {
    v4 = v2[5] + 10.0;
    do
    {
      v5 = v3[5];
      if (v5 > 0.0)
      {
        if (v5 <= v4)
        {
          *((_DWORD *)v3 + 12) += (int)(v4 - v5);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v6 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v7 = *((_QWORD *)v3 + 5);
            __p = (void *)68289538;
            v12 = 2082;
            v13 = "";
            v14 = 2050;
            v15 = v7;
            v16 = 2050;
            v17 = v4;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when reading usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", (uint8_t *)&__p, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v8 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v9 = *((_QWORD *)v3 + 5);
            __p = (void *)68289538;
            v12 = 2082;
            v13 = "";
            v14 = 2050;
            v15 = v9;
            v16 = 2050;
            v17 = v4;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Detected CFAbsoluteTime rollback when reading usage score", "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when reading usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", (uint8_t *)&__p, 0x26u);
          }
        }
      }
      v3[5] = 0.0;
      v3 = *(double **)v3;
    }
    while (v3);
  }
}

void sub_1007D2BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007D2BE4(uint64_t a1, void *a2, uint64_t a3)
{
  CLOSTransaction *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    objc_msgSend(a2, "pruneSecondaryDataOlderThan:", CFAbsoluteTimeGetCurrent() + -432000.0);
    v5 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "com.apple.locationd.reading-score-archive");
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Updating the #reprompt location consumption score info from archive\"}", buf, 0x12u);
    }
    v7 = objc_autoreleasePoolPush();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1007D2E7C;
    v10[3] = &unk_102153F28;
    v10[4] = a3;
    objc_msgSend(a2, "iterateSecondaryData:forField:withHandler:", objc_msgSend(a2, "mappedSecondaryData"), 1, v10);
    objc_autoreleasePoolPop(v7);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Finished - Updating the #reprompt location consumption score info from archive\"}", buf, 0x12u);
    }

  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007D2E7C(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)CLPLocationConsumptionScoreInfo), "initWithData:", a2);
  sub_1007D2ECC(*(_QWORD *)(a1 + 32), v3);

}

void sub_1007D2ECC(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint8_t buf[8];
  __int16 v16;
  const char *v17;
  char v18;

  if (!objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    v17 = "";
    v6 = "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}";
    v7 = v5;
    v8 = OS_LOG_TYPE_DEFAULT;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, buf, 0x12u);
    return;
  }
  if (objc_msgSend(CFSTR("com.apple.locationd.all-location-clients-stop"), "isEqualToString:", objc_msgSend(a2, "clientKey")))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Detected locationd startup; marking all historical clients as \"stopped\"\"}",
        buf,
        0x12u);
    }
    sub_1007D2964(a1);
    return;
  }
  if (!objc_msgSend(a2, "clientKey"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    v17 = "";
    v6 = "{\"msg%{public}.0s\":\"Detected clientKey is empty\"}";
    v7 = v13;
    v8 = OS_LOG_TYPE_DEBUG;
    goto LABEL_26;
  }
  sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(a2, "clientKey"), "UTF8String"));
  v14 = buf;
  v9 = sub_100199794(a1, buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v14);
  if (v18 < 0)
    operator delete(*(void **)buf);
  sub_1015A2E04(buf, (char *)objc_msgSend(CFSTR("com.apple.locationd.all-location-clients-stop"), "UTF8String"));
  v14 = buf;
  v10 = sub_100199794(a1, buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v14);
  if (v18 < 0)
    operator delete(*(void **)buf);
  if (objc_msgSend(a2, "hasStartTime") && objc_msgSend(a2, "hasStopTime"))
  {
    v9[12] += 500;
    objc_msgSend(a2, "stopTime");
  }
  else if (objc_msgSend(a2, "hasStartTime"))
  {
    objc_msgSend(a2, "startTime");
    *((_QWORD *)v9 + 5) = v12;
    objc_msgSend(a2, "startTime");
  }
  else
  {
    if (!objc_msgSend(a2, "hasScore"))
      return;
    v9[12] += objc_msgSend(a2, "score");
    *((_QWORD *)v9 + 5) = 0;
    objc_msgSend(a2, "stopTime");
  }
  v10[5] = v11;
}

void sub_1007D3228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007D3250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _QWORD handler[7];
  _WORD v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registering pruning activity with check-in criteria for location consumption score info archive.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Registering pruning activity with check-in criteria for location consumption score info archive.", v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::registerPruningActivityForLocationConsumptionScoreInfoArchive(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
    xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, 86400);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_GRACE_PERIOD, 14400);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1007D357C;
    handler[3] = &unk_102150F60;
    handler[4] = a2;
    handler[5] = a1;
    handler[6] = a3;
    xpc_activity_register("CLClientManager.loc-consumption-pruning", v7, handler);
    xpc_release(v7);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007D357C(_QWORD *a1, xpc_activity_t activity)
{
  uint64_t v3;
  xpc_activity_state_t state;
  void *v5;
  xpc_activity_state_t v6;
  NSObject *v7;
  _QWORD v8[7];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  xpc_activity_state_t v14;

  v3 = a1[5];
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    v5 = *(void **)(v3 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1007D36CC;
    v8[3] = &unk_102153F50;
    v8[4] = a1[4];
    v8[5] = v3;
    v8[6] = a1[6];
    objc_msgSend(v5, "async:", v8);
  }
  else
  {
    v6 = state;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip consumption score pruning activity\", \"Current State\":%{public}ld}", buf, 0x1Cu);
    }
  }
}

void sub_1007D36CC(uint64_t a1)
{
  sub_1007D36DC(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48));
}

void sub_1007D36DC(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  CLOSTransaction *v7;
  id v8;
  uint64_t *i;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  uint32_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  uint64_t *j;
  _QWORD *v24;
  NSString *v25;
  CLClientKeyPath *v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  void *k;
  void *v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  void *context;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[5];
  _QWORD v48[2];
  uint64_t *v49;
  uint8_t v50[128];
  uint8_t buf[8];
  __int128 v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t (*v54)(uint64_t);
  _BYTE v55[32];
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  _QWORD *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v52) = 2082;
      *(_QWORD *)((char *)&v52 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Pruning location consumption score info archive.\"}", buf, 0x12u);
    }
    v7 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "com.apple.locationd.pruning-score-archive");
    context = objc_autoreleasePoolPush();
    sub_1007F85C4((uint64_t)v48, a3);
    v8 = objc_msgSend(a2, "pruneAndGetSecondaryDataOlderThan:", CFAbsoluteTimeGetCurrent() + -259200.0);
    if (objc_msgSend(v8, "length"))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&v52 = buf;
      *((_QWORD *)&v52 + 1) = 0x5812000000;
      v53 = sub_10020A684;
      v54 = sub_10020A67C;
      memset(v55, 0, sizeof(v55));
      v56 = 0;
      v57 = 1065353216;
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_1007D40A4;
      v47[3] = &unk_102153F78;
      v47[4] = buf;
      objc_msgSend(a2, "iterateSecondaryData:forField:withHandler:", v8, 1, v47);
      sub_1007D2964(v52 + 48);
      for (i = *(uint64_t **)(v52 + 64); i; i = (uint64_t *)*i)
      {
        v10 = i + 2;
        v11 = sub_1001987C8(v48, (unsigned __int8 *)i + 16);
        v12 = v11;
        if (v11)
        {
          *((_DWORD *)v11 + 12) -= *((_DWORD *)i + 12);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v13 = qword_1022A01D8;
          if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
            continue;
          if (*((char *)i + 39) < 0)
            v10 = (_QWORD *)*v10;
          v14 = -*((_DWORD *)i + 12);
          v15 = *((_DWORD *)v12 + 12);
          v58 = 68289794;
          v59 = 2082;
          v60 = "";
          v61 = 2082;
          v62 = v10;
          v63 = 1026;
          v64 = v14;
          v65 = 1026;
          v66 = v15;
          v16 = v13;
          v17 = OS_LOG_TYPE_DEBUG;
          v18 = "{\"msg%{public}.0s\":\"Pruning LocationConsumptionUsageScore\", \"Client\":%{public, location:escape_onl"
                "y}s, \"ScoreAdjustment\":%{public}d, \"NewScore\":%{public}d}";
          v19 = 40;
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v20 = qword_1022A01D8;
          if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            continue;
          v58 = 68289026;
          v59 = 2082;
          v60 = "";
          v16 = v20;
          v17 = OS_LOG_TYPE_DEFAULT;
          v18 = "{\"msg%{public}.0s\":\"#Warning Found a client in pruned data, that does not exist in memory.\"}";
          v19 = 18;
        }
        _os_log_impl((void *)&_mh_execute_header, v16, v17, v18, (uint8_t *)&v58, v19);
      }
      _Block_object_dispose(buf, 8);
      sub_1002A1C94((uint64_t)&v55[8]);
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Before rotation \"stopping\" the active clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v58) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Before rotation \"stopping\" the active clients", &v58, 2);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::pruneAndRotateLocationConsumptionScoreArchiveAndUpdateTheStateAccordingly(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    v22 = objc_alloc_init((Class)NSMutableArray);
    for (j = v49; j; j = (uint64_t *)*j)
    {
      if (*((double *)j + 5) > 0.0)
      {
        v24 = j + 2;
        if (*((char *)j + 39) < 0)
          v24 = (_QWORD *)*v24;
        v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24);
        if (-[NSString isEqualToString:](v25, "isEqualToString:", CFSTR("com.apple.locationd.all-location-clients-stop")))
        {
          sub_10019E180(a1, a2, v48, 0);
          objc_msgSend(v22, "addObject:", +[NSNull null](NSNull, "null"));
        }
        else
        {
          v26 = +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", v25);
          sub_10019E180(a1, a2, v48, v26);
          objc_msgSend(v22, "addObject:", v26);
        }
      }
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v27 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Rotating location consumption score info archive.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v58) = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Rotating location consumption score info archive.", &v58, v41);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::pruneAndRotateLocationConsumptionScoreArchiveAndUpdateTheStateAccordingly(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    objc_msgSend(a2, "rotateSecondaryFile");
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v28 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "After rotation \"resuming\" the \"stopped\" clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v58) = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "After rotation \"resuming\" the \"stopped\" clients", &v58, v41);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::pruneAndRotateLocationConsumptionScoreArchiveAndUpdateTheStateAccordingly(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v29 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v44;
      do
      {
        for (k = 0; k != v29; k = (char *)k + 1)
        {
          if (*(_QWORD *)v44 != v30)
            objc_enumerationMutation(v22);
          v32 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)k);
          if (objc_msgSend(v32, "isEqual:", +[NSNull null](NSNull, "null")))
            v33 = 0;
          else
            v33 = v32;
          sub_1001988C8(a1, a2, (uint64_t)v48, v33);
        }
        v29 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
      }
      while (v29);
    }

    sub_1002A1C94((uint64_t)v48);
    objc_autoreleasePoolPop(context);

  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v34 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v52) = 2082;
      *(_QWORD *)((char *)&v52 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007D4044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_1002A1C94((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_1007D40A4(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)CLPLocationConsumptionScoreInfo), "initWithData:", a2);
  sub_1007D2ECC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, v3);

}

void sub_1007D40FC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  CLHRequestArchive *v4;
  std::string *v5;
  __int128 v6;
  _BYTE *v7;
  id *v8;
  double Current;
  id v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  std::string v14;
  _BYTE buf[1632];

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Resetting resetLocationAttributionIntervalArchive", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v14.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Resetting resetLocationAttributionIntervalArchive", &v14, 2);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetLocationAttributionIntervalArchive()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }

    v4 = [CLHRequestArchive alloc];
    sub_100584F4C(0, &v14);
    v5 = std::string::append(&v14, "locationAttributionInfo/");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v5->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v7 = buf;
    else
      v7 = *(_BYTE **)buf;
    *(_QWORD *)(a1 + 544) = -[CLHRequestArchive initWithDirectory:itemCountThresholdForAutoCleanUp:](v4, "initWithDirectory:itemCountThresholdForAutoCleanUp:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), 500);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    objc_msgSend(*(id *)(a1 + 544), "setRotationInterval:", -1.0);
    v8 = (id *)(a1 + 544);
    sub_1007D3250(a1, *(_QWORD *)(a1 + 544), a1 + 504);
    Current = CFAbsoluteTimeGetCurrent();
    v10 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
    objc_msgSend(v10, "setClientKey:", CFSTR("com.apple.locationd.all-location-clients-stop"));
    objc_msgSend(v10, "setStopTime:", Current);
    objc_msgSend(v10, "setScore:", 0);
    objc_msgSend(*v8, "writeSecondaryObject:toField:", v10, 1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007D4430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDate *sub_1007D446C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  NSDate *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NSDate *v20;

  v3 = objc_msgSend(*(id *)(a1 + 136), "dictionaryForKey:atKeyPath:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1022A2870), a2, 0);
  if (!v3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      return 0;
    v13 = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = a2;
    v8 = "{\"msg%{public}.0s\":\"#luHistorical TranscriptSession not found - fetching dateIntervals\", \"Client\":%{publi"
         "c, location:escape_only}@}";
    v9 = v7;
    v10 = OS_LOG_TYPE_DEBUG;
    goto LABEL_15;
  }
  v4 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("startDate"));
  if (!v4)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      return 0;
    v13 = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = a2;
    v8 = "{\"msg%{public}.0s\":\"#luHistorical transcriptStartDate not found\", \"Client\":%{public, location:escape_only}@}";
    v9 = v11;
    v10 = OS_LOG_TYPE_DEFAULT;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, 0x1Cu);
    return 0;
  }
  objc_msgSend(v4, "doubleValue");
  v5 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = a2;
    v19 = 2114;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical transcriptStartDate\", \"Client\":%{public, location:escape_only}@, \"startDate\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x26u);
  }
  return v5;
}

void sub_1007D46F0(uint64_t a1, void *a2)
{
  char *v3;
  char *v4;
  char *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  NSDate *v10;
  double v11;
  double v12;
  double v13;
  id v14;

  v3 = (char *)objc_msgSend(a2, "count");
  v4 = v3 - 2;
  if ((unint64_t)v3 >= 2)
  {
    v5 = v3 - 1;
    v6 = objc_msgSend(a2, "objectAtIndexedSubscript:", v4);
    v14 = objc_msgSend(a2, "objectAtIndexedSubscript:", v5);
    objc_msgSend(objc_msgSend(v6, "endDate"), "timeIntervalSinceReferenceDate");
    v8 = v7;
    objc_msgSend(objc_msgSend(v14, "startDate"), "timeIntervalSinceReferenceDate");
    if (v8 >= v9)
    {
      objc_msgSend(objc_msgSend(v6, "startDate"), "timeIntervalSinceReferenceDate");
      v10 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
      objc_msgSend(objc_msgSend(v6, "endDate"), "timeIntervalSinceReferenceDate");
      v12 = v11;
      objc_msgSend(objc_msgSend(v14, "endDate"), "timeIntervalSinceReferenceDate");
      if (v12 < v13)
      {
        objc_msgSend(objc_msgSend(v14, "endDate"), "timeIntervalSinceReferenceDate");
        objc_msgSend(a2, "replaceObjectAtIndex:withObject:", v4, objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v10, +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:")));
      }
      objc_msgSend(a2, "removeObjectAtIndex:", v5);
    }

  }
}

void sub_1007D4848(uint64_t a1, double a2, double a3)
{
  id v6;
  id v7;
  double v8;
  id v9;

  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") > *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                          + 24)
    && (v6 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:")) != 0
    && (v7 = v6, objc_msgSend(objc_msgSend(v6, "startDate"), "timeIntervalSinceReferenceDate"), v8 <= a2))
  {
    v9 = objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }
  else
  {
    v9 = objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a3)));
  }
  sub_1007D46F0((uint64_t)v9, *(void **)(a1 + 40));
}

id sub_1007D4930(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 136), "primaryKeyPathForAuthLimitedKeyPath:", a2);
}

id sub_1007D493C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 136), "dataForKey:atKeyPath:defaultValue:", CFSTR("ClientStorageToken"), a2, 0);
}

void sub_1007D4958(uint64_t a1, void *a2, int a3)
{
  id v4;
  unsigned int v6;
  NSObject *v7;
  id v8;
  unsigned int v9;
  char *v10;
  char *v11;
  void *__p[2];
  char v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  int v20;

  v4 = a2;
  if (objc_msgSend(a2, "website"))
    v4 = objc_msgSend(v4, "anchorKeyPath");
  v6 = objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("SuppressShowingInSettings"), v4, 0);
  objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("SuppressShowingInSettings"), v4);
  objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", 1, CFSTR("Registered"), v4);
  if (v6)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = v4;
      v19 = 1026;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client will now show up in settings\", \"Client\":%{public, location:escape_only}@, \"shouldSync\":%{public}hhd}", buf, 0x22u);
    }
    if (a3)
    {
      sub_100197040();
      if (sub_10019DF90() || (sub_100197040(), sub_100195F08()))
      {
        v8 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v4, 0);
        v9 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v4, 0);
        v10 = (char *)objc_msgSend(objc_msgSend(v4, "legacyClientKey"), "UTF8String");
        if (v10)
          v11 = v10;
        else
          v11 = "";
        sub_1015A2E04(buf, v11);
        sub_1015A2E04(__p, "ShowingClientInSettings");
        sub_1007D4BE0(a1, (uint64_t)buf, 0, (uint64_t)v8, v9 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)__p);
        if (v13 < 0)
          operator delete(__p[0]);
        if (SBYTE3(v18) < 0)
          operator delete(*(void **)buf);
      }
    }
  }
}

void sub_1007D4BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1007D4BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  CLCompanionSyncAuthObject *v15;
  CLCompanionSyncAuthObject *v16;
  NSMutableArray *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  CLCompanionSyncAuthObject *v22;
  int v23;
  CLCompanionSyncAuthObject *v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  _BYTE v57[128];

  sub_100197040();
  if (!sub_10019DF90())
  {
    sub_100197040();
    if (!sub_100195F08())
      return;
  }
  v14 = a3 ? 0 : a6;
  v15 = sub_1007DACF4(a1, (uint64_t *)a2, v14, 1);
  if (!v15)
    return;
  v16 = v15;
  if (a3)
  {
    v34 = BYTE4(a5);
    v35 = a2;
    v36 = a5;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v17 = -[CLCompanionSyncAuthObject interestZones](v15, "interestZones");
    v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v37, v57, 16);
    if (v18)
    {
      v19 = v18;
      v32 = a4;
      v33 = a6;
      v20 = *(_QWORD *)v38;
LABEL_10:
      v21 = 0;
      while (1)
      {
        if (*(_QWORD *)v38 != v20)
          objc_enumerationMutation(v17);
        v22 = *(CLCompanionSyncAuthObject **)(*((_QWORD *)&v37 + 1) + 8 * v21);
        if ((objc_msgSend(-[CLCompanionSyncAuthObject zoneIdentifier](v22, "zoneIdentifier"), "isEqualToString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3)) & 1) != 0)break;
        if (v19 == (id)++v21)
        {
          v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v37, v57, 16);
          if (v19)
            goto LABEL_10;
          v22 = 0;
          break;
        }
      }
      a4 = v32;
      a6 = v33;
    }
    else
    {
      v22 = 0;
    }
    -[CLCompanionSyncAuthObject setClearClient:](v22, "setClearClient:", a6);
    -[CLCompanionSyncAuthObject setAuthMask:](v22, "setAuthMask:", a4);
    a2 = v35;
    a5 = v36;
    v23 = v34;
    if (!v34)
      goto LABEL_24;
    v24 = v22;
    goto LABEL_23;
  }
  -[CLCompanionSyncAuthObject setAuthMask:](v15, "setAuthMask:", a4);
  v23 = BYTE4(a5);
  if (BYTE4(a5))
  {
    v24 = v16;
LABEL_23:
    -[CLCompanionSyncAuthObject setCorrectiveCompensationMask:](v24, "setCorrectiveCompensationMask:", a5);
  }
LABEL_24:
  if (*((char *)a7 + 23) >= 0)
    v25 = a7;
  else
    v25 = (uint64_t *)*a7;
  objc_msgSend(*(id *)(a1 + 1536), "addObject:withSyncSessionReason:", v16, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v26 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = *(_QWORD *)a2;
    if (v23)
      v28 = a5;
    else
      v28 = 0;
    *(_DWORD *)buf = 136446978;
    v50 = v27;
    v51 = 1026;
    v52 = a4;
    v53 = 1026;
    v54 = v28;
    v55 = 1026;
    v56 = a6;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#authsync addObject: %{public}s %{public}u %{public}u %{public}d ", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    if (*(char *)(a2 + 23) >= 0)
      v29 = a2;
    else
      v29 = *(_QWORD *)a2;
    if (v23)
      v30 = a5;
    else
      v30 = 0;
    v41 = 136446978;
    v42 = v29;
    v43 = 1026;
    v44 = a4;
    v45 = 1026;
    v46 = v30;
    v47 = 1026;
    v48 = a6;
    v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#authsync addObject: %{public}s %{public}u %{public}u %{public}d ", &v41, 30);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::synchronizeAuthorizationChangeTypeAdd(const std::string &, const char *, uint32_t, std::optional<uint32_t>, BOOL, const std::string &)", "%s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
  }
}

void sub_1007D4FA4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  BOOL v7;
  int v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  if (*(_BYTE *)(a1 + 1568))
    v7 = 0;
  else
    v7 = *a3 == 1;
  if (v7)
  {
    v8 = *(unsigned __int8 *)(a4 + 4);
    *(_BYTE *)(a1 + 1568) = v8;
    if (v8)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v10[0] = 68289026;
        v10[1] = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic rehydration on device first unlock\"}", (uint8_t *)v10, 0x12u);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1560) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8), 1);
      sub_1007D50CC((_QWORD *)a1);
    }
  }
}

void sub_1007D50CC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  CLConnection **i;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD v27[5];
  void *__p;
  char *v29;
  char *v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;

  __p = 0;
  v29 = 0;
  v30 = 0;
  v2 = (_QWORD *)a1[111];
  v3 = a1 + 112;
  if (v2 != a1 + 112)
  {
    v4 = 0;
    do
    {
      if (v4 >= v30)
      {
        v5 = (v4 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v5 + 1) >> 61)
          sub_100259694();
        v6 = (v30 - (_BYTE *)__p) >> 2;
        if (v6 <= v5 + 1)
          v6 = v5 + 1;
        if ((unint64_t)(v30 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v7 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v7 = v6;
        if (v7)
          v8 = (char *)sub_10025E6A0((uint64_t)&v30, v7);
        else
          v8 = 0;
        v9 = &v8[8 * v5];
        *(_QWORD *)v9 = v2[4];
        v4 = v9 + 8;
        v11 = (char *)__p;
        v10 = v29;
        if (v29 != __p)
        {
          do
          {
            v12 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *((_QWORD *)v9 - 1) = v12;
            v9 -= 8;
          }
          while (v10 != v11);
          v10 = (char *)__p;
        }
        __p = v9;
        v29 = v4;
        v30 = &v8[8 * v7];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v4 = v2[4];
        v4 += 8;
      }
      v29 = v4;
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
    for (i = (CLConnection **)__p; i != (CLConnection **)v4; ++i)
      sub_100209F54((uint64_t)a1, *i);
  }
  v17 = (_QWORD *)a1[114];
  if (v17 != a1 + 115)
  {
    do
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v18 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v19 = sub_100026CC8(v17[4]);
        v20 = v17[4];
        *(_DWORD *)buf = 68289538;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2114;
        v36 = v19;
        v37 = 2050;
        v38 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic triggerRetirement due to rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v21 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v22 = sub_100026CC8(v17[4]);
        v23 = v17[4];
        *(_DWORD *)buf = 68289538;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2114;
        v36 = v22;
        v37 = 2050;
        v38 = v23;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic triggerRetirement due to rehydration", "{\"msg%{public}.0s\":\"#dic triggerRetirement due to rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      }
      sub_1011072B8(v17[4]);
      v24 = (_QWORD *)v17[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v17[2];
          v15 = *v25 == (_QWORD)v17;
          v17 = v25;
        }
        while (!v15);
      }
      v17 = v25;
    }
    while (v25 != a1 + 115);
  }
  v26 = (void *)a1[17];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1007D5D6C;
  v27[3] = &unk_102153AE8;
  v27[4] = a1;
  objc_msgSend(v26, "iterateAllAnchorKeyPathsWithBlock:", v27);
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1007D546C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007D54A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  id obj;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  int v30;
  _BYTE v31[128];

  v6 = sub_100196E90(a1, a2);
  v7 = objc_msgSend(objc_msgSend(a4, "dictionaryForKey:defaultValue:", CFSTR("DIC"), 0), "objectForKeyedSubscript:", -[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3), "stringValue"));
  if (v7)
  {
    v19 = v7;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    obj = objc_msgSend(v7, "allKeys");
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v31, 16);
    if (v8)
    {
      v18 = *(_QWORD *)v21;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v21 != v18)
            objc_enumerationMutation(obj);
          v10 = objc_msgSend(v19, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v9));
          switch((int)a3)
          {
            case 1:
              operator new();
            case 2:
              operator new();
            case 3:
              if ((objc_msgSend(objc_msgSend(v10, "objectForKey:", CFSTR("SessionActive")), "BOOLValue") & 1) != 0)
                operator new();
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v14 = qword_1022A01D8;
              if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
                goto LABEL_29;
              __p = (void *)68289538;
              v25 = 2082;
              v26 = "";
              v27 = 2114;
              v28 = v6;
              v29 = 1026;
              v30 = 3;
              v12 = v14;
              v13 = "{\"msg%{public}.0s\":\"#dic CLDaemonBackgroundActivitySession session is not active. Will skip on be"
                    "ing a butterfly\", \"Client\":%{public, location:escape_only}@, \"dicType\":%{public}d}";
              break;
            case 4:
              operator new();
            case 5:
              operator new();
            case 6:
              if ((objc_msgSend(objc_msgSend(v10, "objectForKey:", CFSTR("SessionActive")), "BOOLValue") & 1) != 0)
                operator new();
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v15 = qword_1022A01D8;
              if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
                goto LABEL_29;
              __p = (void *)68289538;
              v25 = 2082;
              v26 = "";
              v27 = 2114;
              v28 = v6;
              v29 = 1026;
              v30 = 6;
              v12 = v15;
              v13 = "{\"msg%{public}.0s\":\"#dic CLDaemonServiceSession session is not active. Will skip on being a butte"
                    "rfly\", \"Client\":%{public, location:escape_only}@, \"dicType\":%{public}d}";
              break;
            default:
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v11 = qword_1022A01D8;
              if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
                goto LABEL_29;
              __p = (void *)68289538;
              v25 = 2082;
              v26 = "";
              v27 = 2114;
              v28 = v6;
              v29 = 1026;
              v30 = a3;
              v12 = v11;
              v13 = "{\"msg%{public}.0s\":\"#Warning #dic rehydration, unrecognized dic type\", \"Client\":%{public, loca"
                    "tion:escape_only}@, \"dicType\":%{public}d}";
              break;
          }
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&__p, 0x22u);
LABEL_29:
          v9 = (char *)v9 + 1;
        }
        while (v8 != v9);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v31, 16);
      }
      while (v8);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v16 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289538;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v6;
      v29 = 1026;
      v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip #dic rehydration, specified dic type does not exists\", \"Client\":%{public, location:escape_only}@, \"dicType\":%{public}d}", (uint8_t *)&__p, 0x22u);
    }
  }
}

void sub_1007D5C94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  operator delete();
}

id sub_1007D5D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007D5DC8;
  v5[3] = &unk_102153FC0;
  v5[4] = v2;
  return objc_msgSend(v3, "iterateIdentitiesRelatedToKeyPath:withBlock:", a2, v5);
}

void sub_1007D5DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2114;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic #rehydration started\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
  }
  if ((objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("DIC"), a2) & 1) != 0)
  {
    v5 = objc_msgSend(*(id *)(v3 + 136), "readonlyStoreAtKeyPath:", a2);
    sub_1007D54A0(v3, a2, 3, v5);
    sub_1007D54A0(v3, a2, 1, v5);
    sub_1007D54A0(v3, a2, 2, v5);
    sub_1007D54A0(v3, a2, 4, v5);
    sub_1007D54A0(v3, a2, 6, v5);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = a2;
      v7 = "{\"msg%{public}.0s\":\"#dic #rehydration completed\", \"Client\":%{public, location:escape_only}@}";
      v8 = v6;
      v9 = OS_LOG_TYPE_DEFAULT;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = a2;
      v7 = "{\"msg%{public}.0s\":\"skip #rehydration No #dic\", \"Client\":%{public, location:escape_only}@}";
      v8 = v10;
      v9 = OS_LOG_TYPE_DEBUG;
      goto LABEL_14;
    }
  }
}

void sub_1007D6064(uint64_t a1, void *a2, int a3, int a4, int a5, int a6, int a7)
{
  NSObject *v14;
  void **v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t *v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  id v24;
  void *v25;
  NSObject *v26;
  void **v27;
  NSObject *v28;
  void **v29;
  NSObject *v30;
  void **v31;
  int v32;
  NSObject *v33;
  void **v34;
  NSObject *v35;
  void **v36;
  NSObject *v37;
  void **v38;
  NSObject *v39;
  void **v40;
  NSObject *v41;
  void **v42;
  NSObject *v43;
  void **v44;
  NSObject *v45;
  void **v46;
  NSObject *v47;
  void **v48;
  NSObject *v49;
  void **v50;
  NSObject *v51;
  void **v52;
  NSObject *v53;
  void **v54;
  NSObject *v55;
  void **v56;
  _QWORD v57[6];
  void *__p[2];
  char v59;
  uint8_t buf[8];
  __int16 v61;
  const char *v62;
  __int16 v63;
  void **v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  _BYTE v68[10];
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  if ((a3 & 1) != 0 || (a4 & 1) != 0 || (a5 & 1) != 0 || a6)
  {
    sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(a2, "clientAnchor"), "UTF8String"));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = __p;
      if (v59 < 0)
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 68290818;
      *(_DWORD *)&buf[4] = 0;
      v61 = 2082;
      v62 = "";
      v63 = 2114;
      v64 = (void **)a2;
      v65 = 2082;
      v66 = (const char *)v15;
      v67 = 1026;
      *(_DWORD *)v68 = a3;
      *(_WORD *)&v68[4] = 1026;
      *(_DWORD *)&v68[6] = a4;
      v69 = 1026;
      v70 = a5;
      v71 = 1026;
      v72 = a6;
      v73 = 1026;
      v74 = a7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updating ClientServiceSessionInfo cache\", \"Client\":%{public, location:escape_only}@, \"anchor\":%{public, location:escape_only}s, \"adjustRefCountForPassiveServiceSession\":%{public}hhd, \"adjustRefCountForWhenInUseServiceSession\":%{public}hhd, \"adjustRefCountForAlwaysServiceSession\":%{public}hhd, \"adjustRefCountForOldSDKLinking\":%{public}hhd, \"coming\":%{public}hhd}", buf, 0x44u);
    }
    v16 = (_DWORD *)sub_10019C4C0(a1 + 1112, (const void **)__p);
    v17 = (_DWORD *)(a1 + 1120);
    if (a7)
    {
      if (v17 == v16)
      {
        *(_QWORD *)buf = __p;
        v18 = sub_1007F8638((uint64_t **)(a1 + 1112), (const void **)__p, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        v18[7] = 0;
        v18[8] = 0;
      }
      v19 = (_DWORD *)sub_10019C4C0(a1 + 1112, (const void **)__p);
      if (a3)
      {
        ++v19[14];
        if (!a4)
        {
LABEL_16:
          if (!a5)
            goto LABEL_17;
          goto LABEL_39;
        }
      }
      else if (!a4)
      {
        goto LABEL_16;
      }
      ++v19[15];
      if (!a5)
      {
LABEL_17:
        if (!a6)
        {
LABEL_41:
          v24 = a2;
          v25 = *(void **)(a1 + 40);
          v57[0] = _NSConcreteStackBlock;
          v57[1] = 3221225472;
          v57[2] = sub_1007D6F24;
          v57[3] = &unk_102131360;
          v57[4] = v24;
          v57[5] = a1;
          objc_msgSend(v25, "async:", v57);
          if (v59 < 0)
            operator delete(__p[0]);
          return;
        }
LABEL_40:
        ++v19[17];
        goto LABEL_41;
      }
LABEL_39:
      ++v19[16];
      if (!a6)
        goto LABEL_41;
      goto LABEL_40;
    }
    if (v17 == v16)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v26 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v27 = __p;
        if (v59 < 0)
          v27 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        v61 = 2082;
        v62 = "";
        v63 = 2082;
        v64 = v27;
        v65 = 2082;
        v66 = "assert";
        v67 = 2081;
        *(_QWORD *)v68 = "iter != fClientServiceSessionInfoMap.end()";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for SevriceSessionInfo - Client not found\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v28 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v29 = __p;
        if (v59 < 0)
          v29 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        v61 = 2082;
        v62 = "";
        v63 = 2082;
        v64 = v29;
        v65 = 2082;
        v66 = "assert";
        v67 = 2081;
        *(_QWORD *)v68 = "iter != fClientServiceSessionInfoMap.end()";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for SevriceSessionInfo - Client not found", "{\"msg%{public}.0s\":\"Decrementing refcount for SevriceSessionInfo - Client not found\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v30 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        v31 = __p;
        if (v59 < 0)
          v31 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        v61 = 2082;
        v62 = "";
        v63 = 2082;
        v64 = v31;
        v65 = 2082;
        v66 = "assert";
        v67 = 2081;
        *(_QWORD *)v68 = "iter != fClientServiceSessionInfoMap.end()";
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for SevriceSessionInfo - Client not found\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }
      v32 = 6498;
    }
    else
    {
      if (a3)
      {
        v20 = v16[14];
        if (v20 <= 0)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v33 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            v34 = __p;
            if (v59 < 0)
              v34 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v34;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.passiveServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v35 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v36 = __p;
            if (v59 < 0)
              v36 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v36;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.passiveServiceSessions > 0";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for Mosasaurus - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v37 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            v38 = __p;
            if (v59 < 0)
              v38 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v38;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.passiveServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          }
          v32 = 6502;
          goto LABEL_129;
        }
        v16[14] = v20 - 1;
      }
      if (a4)
      {
        v21 = v16[15];
        if (v21 <= 0)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v39 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            v40 = __p;
            if (v59 < 0)
              v40 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v40;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.whenInUseServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v41 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v42 = __p;
            if (v59 < 0)
              v42 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v42;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.whenInUseServiceSessions > 0";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for Mosasaurus - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v43 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            v44 = __p;
            if (v59 < 0)
              v44 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v44;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.whenInUseServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          }
          v32 = 6507;
          goto LABEL_129;
        }
        v16[15] = v21 - 1;
      }
      if (a5)
      {
        v22 = v16[16];
        if (v22 <= 0)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v45 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            v46 = __p;
            if (v59 < 0)
              v46 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v46;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.alwaysServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for MosaTuna - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v47 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v48 = __p;
            if (v59 < 0)
              v48 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v48;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.alwaysServiceSessions > 0";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for MosaTuna - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for MosaTuna - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v49 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            v50 = __p;
            if (v59 < 0)
              v50 = (void **)__p[0];
            *(_DWORD *)buf = 68289795;
            *(_DWORD *)&buf[4] = 0;
            v61 = 2082;
            v62 = "";
            v63 = 2082;
            v64 = v50;
            v65 = 2082;
            v66 = "assert";
            v67 = 2081;
            *(_QWORD *)v68 = "iter->second.alwaysServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for MosaTuna - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          }
          v32 = 6512;
          goto LABEL_129;
        }
        v16[16] = v22 - 1;
      }
      if (!a6)
      {
LABEL_32:
        if (!v16[14] && !v16[15] && !v16[16] && !v16[17])
          sub_100675198((uint64_t **)(a1 + 1112), (uint64_t)v16);
        goto LABEL_41;
      }
      v23 = v16[17];
      if (v23 > 0)
      {
        v16[17] = v23 - 1;
        goto LABEL_32;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v51 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v52 = __p;
        if (v59 < 0)
          v52 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        v61 = 2082;
        v62 = "";
        v63 = 2082;
        v64 = v52;
        v65 = 2082;
        v66 = "assert";
        v67 = 2081;
        *(_QWORD *)v68 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for OldSDKLinking - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v53 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v54 = __p;
        if (v59 < 0)
          v54 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        v61 = 2082;
        v62 = "";
        v63 = 2082;
        v64 = v54;
        v65 = 2082;
        v66 = "assert";
        v67 = 2081;
        *(_QWORD *)v68 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for OldSDKLinking - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for OldSDKLinking - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v55 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        v56 = __p;
        if (v59 < 0)
          v56 = (void **)__p[0];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        v61 = 2082;
        v62 = "";
        v63 = 2082;
        v64 = v56;
        v65 = 2082;
        v66 = "assert";
        v67 = 2081;
        *(_QWORD *)v68 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for OldSDKLinking - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }
      v32 = 6517;
    }
LABEL_129:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm", v32, "updateClientServiceSessionInfo");
    __break(1u);
  }
}

void sub_1007D6EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007D6F24(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *__p[2];
  char v5;

  v3 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  sub_1015A2E04(__p, "");
  sub_100193838(v2, v3, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);

}

void sub_1007D6F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007D6FA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSNumber *v16;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];

  if (objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", CFSTR("SubIdentities"), a2))
  {
    if (objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("RemoteUsage")))
    {
      v4 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("RemoteUsage"));
      v5 = objc_msgSend(v4, "allKeys");
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v36;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(_QWORD *)v36 != v7)
              objc_enumerationMutation(v5);
            v9 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
            v10 = objc_msgSend(v4, "objectForKeyedSubscript:", v9);
            v12 = objc_opt_class(NSArray, v11);
            if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0)
              objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("RemoteUsage")), "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v9), "objectAtIndexedSubscript:", 1), v9);
          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        }
        while (v6);
      }
    }
    v13 = 0;
    while (1)
    {
      v34 = 0uLL;
      sub_100195BD4(v13, (_QWORD *)&v34 + 1, (__CFString **)&v34);
      v15 = *((_QWORD *)&v34 + 1);
      v14 = v34;
      if (v34 != 0)
        break;
LABEL_20:
      if (++v13 == 21)
        return;
    }
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = 0;
    v26 = 0;
    v27 = &v26;
    v28 = 0x2020000000;
    v29 = 0;
    v22 = 0;
    v23 = (double *)&v22;
    v24 = 0x2020000000;
    v25 = 0x7FEFFFFFFFFFFFFFLL;
    v18 = 0;
    v19 = (double *)&v18;
    v20 = 0x2020000000;
    v21 = 0xBFF0000000000000;
    objc_msgSend(*(id *)(a1 + 136), "iterateIdentitiesRelatedToKeyPath:withBlock:");
    if (*((_BYTE *)v31 + 24))
    {
      v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v23[3]);
    }
    else
    {
      if (!*((_BYTE *)v27 + 24))
      {
LABEL_19:
        _Block_object_dispose(&v18, 8);
        _Block_object_dispose(&v22, 8);
        _Block_object_dispose(&v26, 8);
        _Block_object_dispose(&v30, 8);
        goto LABEL_20;
      }
      v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v19[3]);
      v15 = v14;
    }
    objc_msgSend(a3, "setObject:forKeyedSubscript:", v16, v15);
    goto LABEL_19;
  }
}

void sub_1007D72A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1007D72E8(_QWORD *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[9];
  v5 = objc_autoreleasePoolPush();
  if ((objc_msgSend(a2, "isEqual:", a1[4]) & 1) == 0
    && +[CLAuthorizationDatabase keyPath:sharesAuthWithKeyPath:](CLAuthorizationDatabase, "keyPath:sharesAuthWithKeyPath:", a2, a1[4]))
  {
    v6 = objc_msgSend(*(id *)(v4 + 136), "readonlyStoreAtKeyPath:", a2);
    objc_msgSend(v6, "doubleForKey:defaultValue:", a1[10], -1.0);
    v8 = v7;
    objc_msgSend(v6, "doubleForKey:defaultValue:", a1[11], -1.0);
    if (v8 == -1.0)
    {
      if (v9 != -1.0)
      {
        *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
        v11 = *(_QWORD *)(a1[8] + 8);
        if (*(double *)(v11 + 24) < v9)
          *(double *)(v11 + 24) = v9;
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
      v10 = *(_QWORD *)(a1[6] + 8);
      if (v8 < *(double *)(v10 + 24))
        *(double *)(v10 + 24) = v8;
    }
  }
  objc_autoreleasePoolPop(v5);
}

void sub_1007D73E8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[5];
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running #AuthDatabaseMigration_7", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Running #AuthDatabaseMigration_7", v11, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_7()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(void **)(a1 + 136);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1007D76DC;
  v10[3] = &unk_102153AE8;
  v10[4] = a1;
  objc_msgSend(v3, "iterateAllAnchorKeyPathsWithBlock:", v10);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration_7", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Finished #AuthDatabaseMigration_7", v11, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_7()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

id sub_1007D76DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007D7738;
  v5[3] = &unk_102153FC0;
  v5[4] = v2;
  return objc_msgSend(v3, "iterateIdentitiesRelatedToKeyPath:withBlock:", a2, v5);
}

id sub_1007D7738(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  unsigned int v6;
  unsigned __int8 v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  NSNumber *v19;
  __CFString *v20;
  double v21;
  NSNumber *v22;
  NSObject *v23;
  id v24;
  unsigned int v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned __int8 v28;
  void *v29;
  __CFString *v31;
  uint64_t v32;
  __CFString *v33;
  uint8_t buf[8];
  __int16 v35;
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  id v40;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(*(id *)(v3 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("SupportedAuthorizationMask"), a2, 0);
  if ((v4 & 6) == 4)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2114;
      v38 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration client's authorization mask contains Always but not WhenInUse\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(v3 + 136), "setInt:forKey:atKeyPath:", v4 | 2, CFSTR("SupportedAuthorizationMask"), a2);
  }
  v6 = objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("Authorized"), a2);
  v7 = objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("Authorization"), a2);
  if (v6 && (v7 & 1) == 0)
  {
    if (objc_msgSend(*(id *)(v3 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("Authorized"), a2, 0))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: Y => Always\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      v9 = 4;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10 = qword_1022A01D8;
      v9 = 1;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = a2;
        v9 = 1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: N => Never\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    if (v4)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v11 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: Authorization mask already available\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: Imputing default supported authorization mask\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      objc_msgSend(*(id *)(v3 + 136), "setInt:forKey:atKeyPath:", 7, CFSTR("SupportedAuthorizationMask"), a2);
    }
    if ((sub_1007D7F38(v3, (uint64_t)a2, v9, 0, 0, 1, 1) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration Client missing for authorization update, but didn't we just create it?\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v14 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2114;
        v38 = a2;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthDatabaseMigration Client missing for authorization update, but didn't we just create it?", "{\"msg%{public}.0s\":\"#AuthDatabaseMigration Client missing for authorization update, but didn't we just create it?\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  objc_msgSend(*(id *)(v3 + 136), "removeValueForKey:atKeyPath:", CFSTR("Authorized"), a2);
  if ((objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("RemoteUsage"), a2) & 1) == 0)
  {
    v15 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v16 = (uint64_t *)"\a";
    do
    {
      v33 = 0;
      *(_QWORD *)buf = 0;
      sub_100195BD4(*v16, buf, &v33);
      v31 = 0;
      v32 = 0;
      sub_100195BD4(v16[1], &v32, &v31);
      v17 = *(_QWORD *)buf;
      objc_msgSend(*(id *)(v3 + 136), "doubleForKey:atKeyPath:defaultValue:", *(_QWORD *)buf, a2, -1.0);
      if (v18 != -1.0)
      {
        v19 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v19, v32);
        objc_msgSend(*(id *)(v3 + 136), "removeValueForKey:atKeyPath:", v17, a2);
      }
      v20 = v33;
      objc_msgSend(*(id *)(v3 + 136), "doubleForKey:atKeyPath:defaultValue:", v33, a2, -1.0);
      if (v21 != -1.0)
      {
        v22 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v22, v31);
        objc_msgSend(*(id *)(v3 + 136), "removeValueForKey:atKeyPath:", v20, a2);
      }
      v16 += 2;
    }
    while (v16 != qword_101BC1D90);
    if (objc_msgSend(v15, "count"))
      objc_msgSend(*(id *)(v3 + 136), "setDictionary:forKey:atKeyPath:", v15, CFSTR("RemoteUsage"), a2);
  }
  if (objc_msgSend(a2, "website"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v23 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v24 = objc_msgSend(*(id *)(v3 + 136), "readonlyStoreAtKeyPath:", a2);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2114;
      v38 = a2;
      v39 = 2114;
      v40 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration found website. Removing from database\", \"client\":%{public, location:escape_only}@, \"dictionary\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    objc_msgSend(*(id *)(v3 + 136), "removeDictionaryAtKeyPath:", a2);
  }
  v25 = objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("Registered"), a2);
  v26 = objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("Authorization"), a2);
  v27 = objc_msgSend(*(id *)(v3 + 136), "hasValueForKey:atKeyPath:", CFSTR("SupportedAuthorizationMask"), a2);
  v28 = objc_msgSend(*(id *)(v3 + 136), "isKeyPathRegisteredSystemService:", a2);
  v29 = *(void **)(v3 + 136);
  if ((v26 & 1) != 0 || (v25 & v27 & 1) != 0 || (v28 & 1) != 0)
  {
    objc_msgSend(v29, "removeValueForKey:atKeyPath:", CFSTR("SuppressShowingInSettings"), a2);
    return objc_msgSend(*(id *)(v3 + 136), "setBool:forKey:atKeyPath:", 1, CFSTR("Registered"), a2);
  }
  else
  {
    objc_msgSend(v29, "setBool:forKey:atKeyPath:", 1, CFSTR("SuppressShowingInSettings"), a2);
    return objc_msgSend(*(id *)(v3 + 136), "removeValueForKey:atKeyPath:", CFSTR("Registered"), a2);
  }
}

uint64_t sub_1007D7F38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  id v12;
  uint64_t result;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  signed int v17;
  int v18;
  NSObject *v19;
  BOOL v21;
  NSObject *v22;
  char *v23;
  char *v24;
  id v25;
  NSObject *v26;
  id v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  double v39;
  NSObject *v40;
  void *v41;
  void *v42;
  char *v43;
  _BYTE __p[12];
  __int16 v45;
  id v46;
  __int16 v47;
  int v48;
  _BYTE buf[28];
  __int16 v50;
  __int128 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  _BOOL4 v60;

  if (a5)
  {
    v12 = sub_100195B0C(a1, a2);
  }
  else
  {
    v12 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
    result = (uint64_t)objc_msgSend(v12, "isValidCKP");
    if (!(_DWORD)result)
      return result;
  }
  if (objc_msgSend(v12, "zoneId"))
  {
    if ((objc_msgSend(*(id *)(a1 + 136), "dictionaryExistsAtKeyPath:", v12) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Zone not found - adding zone under client.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v15 = qword_1022A01D8;
      result = os_signpost_enabled((os_log_t)qword_1022A01D8);
      if ((_DWORD)result)
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Zone not found - adding zone under client.", "{\"msg%{public}.0s\":\"Zone not found - adding zone under client.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        return 0;
      }
      return result;
    }
  }
  else if (objc_msgSend(v12, "website")
         && (objc_msgSend(*(id *)(a1 + 136), "dictionaryExistsAtKeyPath:", v12) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v16 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"website not found - added website subIdentity under client.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  v17 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:");
  v18 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:");
  if (v17 != a3)
    sub_1007D4958(a1, v12, 0);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v19 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68291074;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v12;
    v50 = 1026;
    LODWORD(v51) = v17;
    WORD2(v51) = 2050;
    *(_QWORD *)((char *)&v51 + 6) = a3;
    HIWORD(v51) = 1026;
    v52 = v18;
    v53 = 1026;
    v54 = a4;
    v55 = 1026;
    v56 = a7;
    v57 = 1026;
    v58 = a6;
    v59 = 1026;
    v60 = v17 != a3;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update client authorization mask\", \"Client\":%{public, location:escape_only}@, \"old\":%{public}d, \"new\":%{public}lu, \"oldCC\":%{public}d, \"newCC\":%{public}d, \"localAuthorizationChange\":%{public}d, \"mayIncreaseAuth\":%{public}hhd, \"authStateHasChanged\":%{public}hhd}", buf, 0x4Au);
  }
  v21 = (v18 == (_DWORD)a4 || (_DWORD)a4 == 0) && v17 == a3;
  if (!v21 && a7 && !objc_msgSend(v12, "website"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v22 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290050;
      *(_WORD *)&buf[8] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v12;
      v50 = 1026;
      LODWORD(v51) = v17;
      WORD2(v51) = 1026;
      *(_DWORD *)((char *)&v51 + 6) = a3;
      WORD5(v51) = 1026;
      HIDWORD(v51) = a4;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Calling on synchronizeAuthorizationChangeTypeAdd\", \"Client\":%{public, location:escape_only}@, \"currentAuth\":%{public}d, \"newAuth\":%{public}d, \"correctiveCompensation\":%{public}d}", buf, 0x2Eu);
    }
    v23 = (char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
    if (v23)
      v24 = v23;
    else
      v24 = "";
    sub_1015A2E04(buf, v24);
    v25 = objc_msgSend(objc_msgSend(v12, "zoneId"), "UTF8String");
    sub_1015A2E04(__p, "AuthorizationChange");
    sub_1007D4BE0(a1, (uint64_t)buf, (uint64_t)v25, a3, a4 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)__p);
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)__p);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (!objc_msgSend(v12, "zoneId") && !objc_msgSend(v12, "website"))
  {
    if (a3)
    {
      v27 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("SupportedAuthorizationMask"), v12, 1);
      if ((a3 & ~(uint64_t)(int)v27) != 0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v28 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349570;
          *(_QWORD *)&buf[4] = a3;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = (_DWORD)v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#warning New authMask %{public}lu for client %{public}@ implicitly extends its supported mask (%{public}d) until next connection & slide", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          *(_DWORD *)__p = 134349570;
          *(_QWORD *)&__p[4] = a3;
          v45 = 2114;
          v46 = v12;
          v47 = 1026;
          v48 = (int)v27;
          v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#warning New authMask %{public}lu for client %{public}@ implicitly extends its supported mask (%{public}d) until next connection & slide", __p, 28);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::updateStaticAuthorizationMaskForClientWithCompensation(CLClientKeyPath *, CLLocationDictionaryUtilitiesAuthorizationMask, CLClientCorrectiveCompensation, BOOL, BOOL, BOOL, BOOL)", "%s\n", v43);
          if (v43 != buf)
            free(v43);
        }
        v27 = (id)(v27 | a3);
      }
      objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", v27, CFSTR("SupportedAuthorizationMask"), v12);
      if (a3 != 2)
        sub_1007F1470(a1, (uint64_t)v12, 1, a3 == 4);
      goto LABEL_48;
    }
    sub_1007F1470(a1, (uint64_t)v12, 1, 0);
LABEL_66:
    v29 = objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v12);
    v30 = v29;
    if (v17)
    {
      if (v29)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v31 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v12;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ClearingAuthorization for System Service!\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v32 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v12;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ClearingAuthorization for System Service!", "{\"msg%{public}.0s\":\"#ClearingAuthorization for System Service!\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        goto LABEL_84;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v36 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_84;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v12;
      v50 = 1026;
      LODWORD(v51) = v17;
      v34 = "{\"msg%{public}.0s\":\"#ClearingAuthorization updateStaticAuthorizationMask setting to not-determined\", \"c"
            "lient\":%{public, location:escape_only}@, \"oldAuth\":%{public}d}";
      v35 = v36;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v33 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_84;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v12;
      v50 = 1026;
      LODWORD(v51) = v30;
      v34 = "{\"msg%{public}.0s\":\"#ClearingAuthorization updateStaticAuthorizationMask setting to not-determined, but i"
            "t's already set to not-determined.\", \"Client\":%{public, location:escape_only}@, \"SystemService\":%{public}hhd}";
      v35 = v33;
    }
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, buf, 0x22u);
LABEL_84:
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("Authorization"), v12);
    a3 = 0;
    goto LABEL_85;
  }
  if (!a3)
    goto LABEL_66;
LABEL_48:
  if (v17 >= a3 || a6)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v26 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v12;
      v50 = 2050;
      *(_QWORD *)&v51 = a3;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"setting authorization value\", \"Client\":%{public, location:escape_only}@, \"newAuth\":%{public}lu}", buf, 0x26u);
    }
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a3, CFSTR("Authorization"), v12);
    a3 = (int)objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v12, 0);
  }
LABEL_85:
  if (v18 >= (int)a4)
    v37 = 1;
  else
    v37 = a6;
  if ((_DWORD)a4 && v37)
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a4, CFSTR("CorrectiveCompensationEnabled"), v12);
  v38 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("IncidentalUseMode"), v12, 0);
  if (a3 != 2 && v38)
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", 1, CFSTR("IncidentalUseMode"), v12);
  if (objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("IsAppClip"), v12, 0))
  {
    if (a3 == 2)
    {
      v39 = TMGetKernelMonotonicClock();
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v40 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v12;
        v50 = 2050;
        *(double *)&v51 = v39;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting registration time for #appclip\", \"Client\":%{public, location:escape_only}@, \"registrationTime\":\"%{public}f\"}", buf, 0x26u);
      }
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("AuthorizationRegisterTime"), v12, v39);
      goto LABEL_106;
    }
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("AuthorizationRegisterTime"), v12);
  }
  if ((a3 & 6) == 0)
  {
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("ProvisionalMonitoring"), v12);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), v12);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("NextConsumptionThresholdScore"), v12);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("NextNextConsumptionThresholdScore"), v12);
    v41 = *(void **)(a1 + 136);
    if (a3 == 1)
    {
      objc_msgSend(v41, "removeValueForKey:atKeyPath:", CFSTR("TemporaryAuthorization"), v12);
      objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("LocationButtonUseMode"), v12);
    }
    else
    {
      objc_msgSend(v41, "removeValueForKey:atKeyPath:", CFSTR("AuthorizationUpgradeAvailable"), v12);
    }
  }
LABEL_106:
  if ((objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v12) & 1) == 0
    && !objc_msgSend(v12, "subIdentityId"))
  {
    v42 = *(void **)(a1 + 136);
    if (a3 == 4)
    {
      if ((objc_msgSend(v42, "hasValueForKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), v12) & 1) == 0)
        objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), v12, CFAbsoluteTimeGetCurrent());
      if ((objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", CFSTR("NextConsumptionThresholdScore"), v12) & 1) == 0)objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", 0, CFSTR("NextConsumptionThresholdScore"), v12);
      goto LABEL_115;
    }
    objc_msgSend(v42, "removeValueForKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), v12);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("NextConsumptionThresholdScore"), v12);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("NextNextConsumptionThresholdScore"), v12);
  }
  if (a3)
LABEL_115:
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("AuthorizationPromptOptionTypeNegative"), v12);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  sub_1015A2E04(buf, "");
  sub_100193838(a1, v12, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  return 1;
}

void sub_1007D8D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_1007D8DA4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[5];
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running #AuthDatabaseMigration_9", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Running #AuthDatabaseMigration_9", v11, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_9()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(void **)(a1 + 136);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1007D90A0;
  v10[3] = &unk_102153AE8;
  v10[4] = a1;
  objc_msgSend(v3, "iterateAllAnchorKeyPathsWithBlock:", v10);
  sub_1007C72C0(a1);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration_9", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Finished #AuthDatabaseMigration_9", v11, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_9()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

id sub_1007D90A0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  uint32_t v8;
  id result;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  uint8_t buf[56];

  v3 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(a2, "executablePath"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      return objc_msgSend(*(id *)(v3 + 136), "removeDictionaryAtKeyPath:", a2, v12, *(_OWORD *)v13, *(_OWORD *)&v13[16]);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = a2;
    v5 = "{\"msg%{public}.0s\":\"Removing executable client from authdb\", \"Client\":%{public, location:escape_only}@}";
    v6 = buf;
    v7 = v4;
    v8 = 28;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v5, v6, v8);
    return objc_msgSend(*(id *)(v3 + 136), "removeDictionaryAtKeyPath:", a2, v12, *(_OWORD *)v13, *(_OWORD *)&v13[16]);
  }
  result = objc_msgSend(a2, "bundleId");
  if (result)
  {
    memset(buf, 0, 41);
    result = objc_msgSend(*(id *)(v3 + 136), "expensivelyGetIdentifyingInformation:forClient:", buf, a2);
    if ((_DWORD)result)
    {
      v10 = objc_msgSend(a2, "bundleId");
      result = objc_msgSend(v10, "isEqual:", *(_QWORD *)buf);
      if ((result & 1) == 0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v11 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          return objc_msgSend(*(id *)(v3 + 136), "removeDictionaryAtKeyPath:", a2, v12, *(_OWORD *)v13, *(_OWORD *)&v13[16]);
        v12 = 68289538;
        *(_WORD *)v13 = 2082;
        *(_QWORD *)&v13[2] = "";
        *(_WORD *)&v13[10] = 2114;
        *(_QWORD *)&v13[12] = objc_msgSend(a2, "bundleId");
        *(_WORD *)&v13[20] = 2114;
        *(_QWORD *)&v13[22] = *(_QWORD *)buf;
        v5 = "{\"msg%{public}.0s\":\"#Warning found alternative identity as top-level identity authdb. Removing client fr"
             "om authdb\", \"ExistingClientBundleId\":%{public, location:escape_only}@, \"CanonicalizedBundleId\":%{publi"
             "c, location:escape_only}@}";
        v6 = (uint8_t *)&v12;
        v7 = v11;
        v8 = 38;
        goto LABEL_6;
      }
    }
  }
  return result;
}

void sub_1007D9290(uint64_t a1)
{
  NSObject *v2;
  id v3;
  unsigned int v4;
  unsigned int v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _WORD v15[8];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running #AuthDatabaseMigration_8", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Running #AuthDatabaseMigration_8", v15, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_8()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/AssistantServices.framework"), 112));
  if (objc_msgSend(v3, "isValidCKP"))
  {
    v4 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v3, 0);
    v5 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v3, 0);
    if (v4 == 2 && v5 == 0)
    {
      sub_1007D96C8(a1, (uint64_t)v3, 0, (uint64_t)CFSTR("Siri needs to be reset"));
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v7 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_21;
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v8 = "{\"msg%{public}.0s\":\"#AuthDatabaseMigration_8 Siri authorization cleared\"}";
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v7 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_21;
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v8 = "{\"msg%{public}.0s\":\"#AuthDatabaseMigration_8 Siri has a user-set authorization value; not clearing.\"}";
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
LABEL_21:
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration_8", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v15[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Finished #AuthDatabaseMigration_8", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_8()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

id sub_1007D96C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  id v7;
  id result;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;

  v7 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v7, "isValidCKP");
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289794;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = v7;
      v15 = 1026;
      v16 = a3;
      v17 = 2114;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearingAuthorization and corrective compensation\", \"Client\":%{public, location:escape_only}@, \"forceSyncToPairedDevice\":%{public}hhd, \"Reason\":%{public, location:escape_only}@}", (uint8_t *)v10, 0x2Cu);
    }
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("CorrectiveCompensationEnabled"), v7);
    return (id)sub_1007D7F38(a1, (uint64_t)v7, 0, 0, 0, 1, 1);
  }
  return result;
}

void sub_1007D982C(uint64_t a1)
{
  NSDictionary *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  unsigned int v9;
  NSObject *v10;
  char *v11;
  char *v12;
  void *v13;
  NSArray *v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  NSArray *v19;
  void *v20;
  uint64_t v21;
  id v22;
  BOOL v23;
  char v24;
  NSObject *v25;
  NSObject *v26;
  void *context;
  _QWORD v28[6];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[6];
  _BYTE v40[128];
  _QWORD v41[21];
  uint8_t buf[8];
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  _BYTE v51[128];
  _QWORD v52[4];
  _QWORD v53[4];

  context = objc_autoreleasePoolPush();
  v52[0] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/Weather.framework"), 112);
  v53[0] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.weather"), 105);
  v52[1] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.Shoebox"), 105);
  v53[1] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/PassKitCore.framework"), 112);
  v52[2] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.Passbook"), 105);
  v53[2] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/PassKitCore.framework"), 112);
  v52[3] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/Parsec.framework"), 112);
  v53[3] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/CoreParsec.framework"), 112);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 4);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v3 = -[NSDictionary countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v35, v51, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v36;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v36 != v4)
          objc_enumerationMutation(v2);
        v6 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v5);
        if (objc_msgSend(*(id *)(a1 + 136), "dictionaryExistsAtKeyPath:", v6))
        {
          v7 = -[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", v6);
          v8 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v6, 0xFFFFFFFFLL);
          if (objc_msgSend(*(id *)(a1 + 136), "migrateDictionaryAtKeyPath:toKeyPath:forceMigrationOnAuthCollision:", v6, v7, 0))
          {
            v9 = sub_1007CAB7C(a1, (uint64_t)v7);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v10 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289794;
              *(_DWORD *)&buf[4] = 0;
              v43 = 2082;
              v44 = "";
              v45 = 2114;
              v46 = v7;
              v47 = 1026;
              v48 = (int)v8;
              v49 = 1026;
              v50 = v9;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration #authsync Calling on synchronizeAuthorizationChangeTypeAdd\", \"ToKey\":%{public, location:escape_only}@, \"FromAuth\":%{public}d, \"CorrectiveCompensation\":%{public}d}", buf, 0x28u);
            }
            v11 = (char *)objc_msgSend(objc_msgSend(v7, "legacyClientKey"), "UTF8String");
            if (v11)
              v12 = v11;
            else
              v12 = "";
            sub_1015A2E04(buf, v12);
            sub_1015A2E04(__p, "Migration-migrator");
            sub_1007D4BE0(a1, (uint64_t)buf, 0, (uint64_t)v8, v9 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)__p);
            if (v34 < 0)
              operator delete(__p[0]);
            if (SBYTE3(v46) < 0)
              operator delete(*(void **)buf);
          }
        }
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = -[NSDictionary countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v35, v51, 16);
    }
    while (v3);
  }
  objc_autoreleasePoolPop(context);
  v13 = objc_autoreleasePoolPush();
  v41[0] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.webapp"), 105);
  v41[1] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.AdSheet"), 105);
  v41[2] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.AdSheetPad"), 105);
  v41[3] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.AdSheetPhone"), 105);
  v41[4] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.springboard"), 105);
  v41[5] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("com.apple.CarPlayApp"), 105);
  v41[6] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/Assistant.framework"), 112);
  v41[7] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/AOSNotification.framework"), 112);
  v41[8] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/LocationBundles/LocationPerformance.framework"), 112);
  v41[9] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/LocationBundles/LocationdInternal.framework"), 112);
  v41[10] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/PrivateFrameworks/iAdCore.framework"), 112);
  v41[11] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/Applications/AdSheet.app"), 112);
  v41[12] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/Frameworks/Twitter.framework"), 112);
  v41[13] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/Frameworks/Weibo.framework"), 112);
  v41[14] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/Frameworks/Facebook.framework"), 112);
  v41[15] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/SocialServices/Twitter.socialplugin"), 112);
  v41[16] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/SocialServices/Weibo.socialplugin"), 112);
  v41[17] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/SocialServices/Facebook.socialplugin"), 112);
  v41[18] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/Frameworks/Social.framework/XPCServices/com.apple.twitter.xpc"), 112);
  v41[19] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/Frameworks/Social.framework/XPCServices/com.apple.weibo.xpc"), 112);
  v41[20] = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/Frameworks/Social.framework/XPCServices/com.apple.facebook.xpc"), 112);
  v14 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, 21);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v15 = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v29, v40, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v16)
          objc_enumerationMutation(v14);
        v18 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(*(id *)(a1 + 136), "dictionaryExistsAtKeyPath:", v18))
          objc_msgSend(*(id *)(a1 + 136), "removeDictionaryAtKeyPath:", v18);
      }
      v15 = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v29, v40, 16);
    }
    while (v15);
  }
  objc_autoreleasePoolPop(v13);
  v39[0] = CFSTR("AttributionCount");
  v39[1] = CFSTR("AuthorizationPurposeKey");
  v39[2] = CFSTR("AppSwitcherQuitAppTime");
  v39[3] = CFSTR("TrialPeriodBegin");
  v39[4] = CFSTR("TrialPeriodNeedsReprompt");
  v39[5] = CFSTR("ExistsInLSDatabase");
  v19 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v39, 6);
  v20 = *(void **)(a1 + 136);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1007DA1C4;
  v28[3] = &unk_102153BE8;
  v28[4] = v19;
  v28[5] = a1;
  objc_msgSend(v20, "iterateAllAnchorKeyPathsWithBlock:", v28);
  v21 = GEOGetDefaultInteger(GEOAddressCorrectionAuthorizationStatusKey, 0);
  v22 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/LocationBundles/AppGenius.bundle"), 112));
  if (objc_msgSend(v22, "isValidCKP"))
  {
    v23 = v21 == 2;
    v24 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v22, 0) == 1|| v23;
    if ((v24 & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v25 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        v43 = 2082;
        v44 = "";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting Improve Maps to Denied because Maps does not believe it is authorized.\"}", buf, 0x12u);
      }
      sub_1007D7F38(a1, (uint64_t)v22, 1uLL, 0, 1, 1, 1);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v26 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v43 = 2082;
      v44 = "";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning AppGenius is not registered during update-version migration; this may be accepta"
        "ble if we have never set up system services on this device before.\"}",
        buf,
        0x12u);
    }
  }
}

void sub_1007DA188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  _Unwind_Resume(a1);
}

id sub_1007DA1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[6];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(v2 + 136);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007DA220;
  v6[3] = &unk_102153D78;
  v6[4] = v3;
  v6[5] = v2;
  return objc_msgSend(v4, "iterateIdentitiesRelatedToKeyPath:withBlock:", a2, v6);
}

void sub_1007DA220(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void *v22;
  _BYTE v23[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v23, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(v4 + 136), "removeValueForKey:atKeyPath:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i), a2);
      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v23, 16);
    }
    while (v6);
  }
  v9 = objc_msgSend(a2, "bundlePath");
  if (v9)
  {
    v10 = v9;
    if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", v9))
    {
      if ((objc_msgSend(v10, "isEqualToString:", objc_msgSend(v10, "stringByResolvingSymlinksInPath")) & 1) == 0)
      {
        objc_msgSend(*(id *)(v4 + 136), "removeDictionaryAtKeyPath:", a2);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v11 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 2114;
          v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration Clearing client with symlinks in its bundlePath\", \"BundlePath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2114;
        v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration #warning bundle path does not exist on disk;  clearing.\", \"Bun"
          "dlePath\":%{public, location:escape_only}@}",
          buf,
          0x1Cu);
      }
      objc_msgSend(*(id *)(v4 + 136), "removeDictionaryAtKeyPath:", a2);
    }
  }
}

void sub_1007DA498(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  CLAuthorizationDatabase *v7;
  float v8;
  float v9;
  int v10;
  uint8_t *v11;
  NSString *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  CFTypeRef v23[2];
  uint8_t buf[8];
  __int16 v25;
  const char *v26;
  __int16 v27;
  NSString *v28;
  __int16 v29;
  CFTypeRef v30;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting #AuthDatabaseMigration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v23[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Starting #AuthDatabaseMigration", v23, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::setupAndMigrateAuthDatabase(NSString *, BOOL)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v7 = +[CLAuthorizationDatabase authorizationDatabaseWithFilename:withDataProtectionClass:](CLAuthorizationDatabase, "authorizationDatabaseWithFilename:withDataProtectionClass:", a2, 2);
  *(_QWORD *)(a1 + 136) = v7;
  -[CLAuthorizationDatabase migrationVersionNumber](v7, "migrationVersionNumber");
  v9 = v8;
  if (v8 < 7.0)
    sub_1007D73E8(a1);
  if (v9 < 8.1)
    sub_1007D9290(a1);
  if (v9 < 9.0)
    sub_1007D8DA4(a1);
  if (v9 < 12.0)
    v10 = 1;
  else
    v10 = a3;
  if (v10 == 1)
    sub_1007D982C(a1);
  sub_100197040();
  sub_10075A71C("kern.bootsessionuuid", buf);
  if (SBYTE3(v28) >= 0)
    v11 = buf;
  else
    v11 = *(uint8_t **)buf;
  v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  if (SBYTE3(v28) < 0)
    operator delete(*(void **)buf);
  v23[0] = 0;
  v13 = sub_1001FD94C();
  sub_100219F40(v13, (uint64_t)CFSTR("kLastBootSessionUUID"), v23);
  if (!-[NSString isEqualToString:](v12, "isEqualToString:", v23[0]))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v12;
      v29 = 2114;
      v30 = v23[0];
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"First locationd run for boot session\", \"bootSession\":%{public, location:escape_only}@, \"lastSession\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v15 = sub_1001FD94C();
    sub_100528910(v15);
    v16 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 944))(v16);
    goto LABEL_30;
  }
  if (v10)
LABEL_30:
    objc_msgSend(*(id *)(a1 + 136), "performFullSystemServiceSetup");
  objc_msgSend(*(id *)(a1 + 136), "completeMigration");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v17 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v23[0]) = 0;
    LODWORD(v22) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Finished #AuthDatabaseMigration", v23, v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::setupAndMigrateAuthDatabase(NSString *, BOOL)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_1007DA940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007DA964()
{
  if (qword_102304A90 != -1)
    dispatch_once(&qword_102304A90, &stru_102154008);
  return qword_102304A88;
}

void sub_1007DA9A4(id a1)
{
  qword_102304A88 = &off_10221FCC8;
}

void *sub_1007DA9C8(void *a1, int a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  id v17;

  if (!a2)
    return a1;
  if (qword_102304A90 != -1)
    dispatch_once(&qword_102304A90, &stru_102154008);
  v3 = objc_msgSend((id)qword_102304A88, "objectForKey:", a1);
  if (!v3)
    return a1;
  v4 = v3;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v15 = objc_msgSend(a1, "UTF8String");
    v16 = 2082;
    v17 = objc_msgSend(v4, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#authsync translating %{public}s to %{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    v10 = 136446466;
    v11 = objc_msgSend(a1, "UTF8String");
    v12 = 2082;
    v13 = objc_msgSend(v4, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#authsync translating %{public}s to %{public}s", &v10, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "NSString *getTranslatedClientKey(NSString *, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v4;
}

id sub_1007DAC08(uint64_t a1)
{
  id result;

  if (qword_102304AA0 != -1)
    dispatch_once(&qword_102304AA0, &stru_102154028);
  result = objc_msgSend((id)qword_102304A98, "valueForKey:", a1);
  if (!result)
    return (id)a1;
  return result;
}

void sub_1007DAC64(id a1)
{
  id v1;
  _QWORD v2[2];
  _QWORD v3[2];

  v2[0] = CFSTR("com.apple.NanoMaps");
  v2[1] = CFSTR("com.apple.weather.watchapp");
  v3[0] = CFSTR("com.apple.Maps");
  v3[1] = CFSTR("com.apple.weather");
  qword_102304A98 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
  v1 = (id)qword_102304A98;
}

CLCompanionSyncAuthObject *sub_1007DACF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  CLCompanionSyncAuthObject *v8;
  uint64_t *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  _QWORD v15[6];

  v8 = objc_alloc_init(CLCompanionSyncAuthObject);
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  -[CLCompanionSyncAuthObject setClientKey:](v8, "setClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  -[CLCompanionSyncAuthObject setClearClient:](v8, "setClearClient:", a3);
  -[CLCompanionSyncAuthObject setOperationType:](v8, "setOperationType:", a4);
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      return v8;
    a2 = (uint64_t *)*a2;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
    return v8;
  }
  v10 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)));
  if (!objc_msgSend(v10, "isValidCKP")
    || (objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("SuppressShowingInSettings"), v10, 0) & 1) != 0)
  {
    return 0;
  }
  v11 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v10, 0);
  if ((_DWORD)v11)
    -[CLCompanionSyncAuthObject setAuthMask:](v8, "setAuthMask:", v11);
  v12 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v10, 0xFFFFFFFFLL);
  if ((v12 & 0x80000000) == 0)
    -[CLCompanionSyncAuthObject setCorrectiveCompensationMask:](v8, "setCorrectiveCompensationMask:", v12);
  v13 = *(void **)(a1 + 136);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007DAEA0;
  v15[3] = &unk_102153D78;
  v15[4] = v8;
  v15[5] = a1;
  objc_msgSend(v13, "iterateIdentitiesRelatedToKeyPath:withBlock:", v10, v15);
  return v8;
}

id sub_1007DAEA0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id result;
  CLCompanionSyncInterestZone *v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  double v12;
  id v13;
  id v14;

  v4 = *(_QWORD *)(a1 + 40);
  result = objc_msgSend(a2, "subIdentityType");
  if ((_DWORD)result == 122)
  {
    v6 = objc_alloc_init(CLCompanionSyncInterestZone);
    -[CLCompanionSyncInterestZone setZoneIdentifier:](v6, "setZoneIdentifier:", objc_msgSend(a2, "zoneId"));
    v7 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), a2, 0);
    if ((_DWORD)v7)
      -[CLCompanionSyncInterestZone setAuthMask:](v6, "setAuthMask:", v7);
    v8 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), a2, 0);
    if ((_DWORD)v8)
      -[CLCompanionSyncInterestZone setCorrectiveCompensationMask:](v6, "setCorrectiveCompensationMask:", v8);
    v9 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Type"), a2, 0);
    if ((_DWORD)v9)
      -[CLCompanionSyncInterestZone setZoneType:](v6, "setZoneType:", v9);
    objc_msgSend(*(id *)(v4 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("Latitude"), a2, -1.0);
    if (v10 != -1.0)
      -[CLCompanionSyncInterestZone setLatitude:](v6, "setLatitude:");
    objc_msgSend(*(id *)(v4 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("Longitude"), a2, -1.0);
    if (v11 != -1.0)
      -[CLCompanionSyncInterestZone setLongitude:](v6, "setLongitude:");
    objc_msgSend(*(id *)(v4 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("Radius"), a2, -1.0);
    if (v12 != -1.0)
      -[CLCompanionSyncInterestZone setRadius:](v6, "setRadius:");
    v13 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("ServiceMaskOperator"), a2, 0xFFFFFFFFLL);
    if ((_DWORD)v13 != -1)
      -[CLCompanionSyncInterestZone setServiceMaskOperator:](v6, "setServiceMaskOperator:", v13);
    v14 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Provenance"), a2, 0xFFFFFFFFLL);
    if ((_DWORD)v14 != -1)
      -[CLCompanionSyncInterestZone setProvenance:](v6, "setProvenance:", v14);
    return objc_msgSend(*(id *)(a1 + 32), "addInterestZones:", v6);
  }
  return result;
}

id sub_1007DB094(uint64_t a1, void *a2, char a3, char a4, char a5)
{
  id v10;
  _QWORD v12[6];
  char v13;
  char v14;
  char v15;

  v10 = objc_alloc_init((Class)NSMutableArray);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007DB134;
  v12[3] = &unk_102154050;
  v13 = a5;
  v14 = a4;
  v15 = a3;
  v12[4] = v10;
  v12[5] = a1;
  objc_msgSend(a2, "enumerateObjectsUsingBlock:", v12);
  return v10;
}

void sub_1007DB134(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  CLCompanionSyncAuthObject *v7;
  _BOOL8 v8;
  char *v9;
  char *v10;
  CLCompanionSyncAuthObject *v11;
  CLCompanionSyncAuthObject *v12;
  CLCompanionSyncAuthObject *v13;
  void *__p;
  __int16 v15;
  const char *v16;
  char v17;

  v4 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48) && objc_msgSend(a2, "isEqualToString:", CFSTR("RESET")))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      __p = (void *)68289026;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#authsync Ignoring RESET from ReunionSyncList during reunion sync\"}", (uint8_t *)&__p, 0x12u);
    }
    return;
  }
  if ((objc_msgSend(a2, "isEqualToString:", &stru_1021D8FB8) & 1) == 0
    && !objc_msgSend(a2, "isEqualToString:", CFSTR("TOGGLE")))
  {
    v8 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), objc_msgSend(*(id *)(v4 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", a2)), 0) == 0;
    v9 = (char *)objc_msgSend(sub_1007DA9C8(a2, *(unsigned __int8 *)(a1 + 50)), "UTF8String");
    if (v9)
      v10 = v9;
    else
      v10 = "";
    sub_1015A2E04(&__p, v10);
    v11 = sub_1007DACF4(v4, (uint64_t *)&__p, v8, 2);
    v12 = v11;
    if (v17 < 0)
    {
      operator delete(__p);
      if (v12)
        goto LABEL_16;
    }
    else if (v11)
    {
LABEL_16:
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
      return;
    }
    v13 = objc_alloc_init(CLCompanionSyncAuthObject);
    -[CLCompanionSyncAuthObject setClientKey:](v13, "setClientKey:", a2);
    -[CLCompanionSyncAuthObject setOperationType:](v13, "setOperationType:", 3);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v13);
    return;
  }
  if (!*(_BYTE *)(a1 + 49))
  {
    v6 = sub_1001A09FC();
    v7 = objc_alloc_init(CLCompanionSyncAuthObject);
    -[CLCompanionSyncAuthObject setClientKey:](v7, "setClientKey:", sub_1007DA9C8(a2, *(unsigned __int8 *)(a1 + 50)));
    -[CLCompanionSyncAuthObject setAuthMask:](v7, "setAuthMask:", v6);
    -[CLCompanionSyncAuthObject setOperationType:](v7, "setOperationType:", 1);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
  }
}

void sub_1007DB3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007DB3EC(_QWORD *a1, void *a2, int a3)
{
  uint64_t v3;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  CLClientKeyPath *v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  void *v14;
  char v16;
  _QWORD v18[6];
  void *__p[2];
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v16 = a3;
  if (a3)
    sub_1007DB688((uint64_t)a1);
  v5 = +[NSMutableSet set](NSMutableSet, "set");
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(a2);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v10 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", sub_1007DAC08((uint64_t)objc_msgSend(v9, "clientKey")));
        objc_msgSend(v5, "addObject:", v10);
        objc_msgSend(v5, "addObject:", sub_100195B0C((uint64_t)a1, (uint64_t)v10));
        sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(v9, "clientKey"), "UTF8String"));
        LODWORD(v10) = objc_msgSend(v9, "authMask");
        v11 = objc_msgSend(v9, "correctiveCompensationMask");
        v12 = objc_msgSend(v9, "clearClient");
        v13 = v3 & 0xFFFFFFFFFFFF0000 | objc_msgSend(v9, "suppressShowingInSettings");
        v3 = v13 | 0x100;
        sub_1007DC1D8((uint64_t)a1, (uint64_t)__p, 0, v10, v11 | (unint64_t)&_mh_execute_header, v12, v13 | 0x100, 1u);
        if (v20 < 0)
          operator delete(__p[0]);
        sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(v9, "clientKey"), "UTF8String"));
        sub_1007DCD0C(a1, (uint64_t)__p, objc_msgSend(v9, "interestZones"));
        if (v20 < 0)
          operator delete(__p[0]);
      }
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v6);
  }
  if ((v16 & 1) == 0)
  {
    v14 = (void *)a1[17];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1007DD240;
    v18[3] = &unk_102153BE8;
    v18[4] = v5;
    v18[5] = a1;
    objc_msgSend(v14, "iterateAllAnchorKeyPathsWithBlock:", v18);
  }
  return sub_1007C0C44((uint64_t)a1);
}

void sub_1007DB658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007DB688(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  char *v3;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  __CFNotificationCenter *DarwinNotifyCenter;
  _QWORD *v9;
  NSString *v10;
  NSDictionary *v11;
  NSObject *v12;
  std::string *v13;
  __int128 v14;
  _BYTE *v15;
  NSString *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  _WORD v32[8];
  std::string v33;
  _QWORD v34[3];
  _QWORD v35[3];
  _BYTE buf[1624];

  if (*(_BYTE *)(a1 + 1104))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v1 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Skipping Reset, already in progress.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v33.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Skipping Reset, already in progress.", &v33, 2);
      v3 = (char *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
  else
  {
    sub_1007EF434();
    if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#warning location services settings are frozen by restrictions - resetting", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LOWORD(v33.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#warning location services settings are frozen by restrictions - resetting", &v33, 2);
        v28 = (char *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "resetting and disconnecting all clients from daemon", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v33.__r_.__value_.__l.__data_) = 0;
      LODWORD(v31) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "resetting and disconnecting all clients from daemon", &v33, v31);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    sub_1007BC48C(a1);
    sub_100090AE4(a1 + 728, *(char **)(a1 + 736));
    *(_QWORD *)(a1 + 728) = a1 + 736;
    *(_QWORD *)(a1 + 744) = 0;
    *(_QWORD *)(a1 + 736) = 0;
    sub_100090AE4(a1 + 752, *(char **)(a1 + 760));
    *(_QWORD *)(a1 + 752) = a1 + 760;
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    sub_1007C0BD8((id *)a1);
    objc_msgSend(*(id *)(a1 + 136), "performFullSystemServiceSetup");
    sub_1007C0C44(a1);
    objc_msgSend(*(id *)(a1 + 1088), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 1088), "addObjectsFromArray:", sub_1007EF4CC(a1));
    objc_msgSend(*(id *)(a1 + 128), "setArray:forKey:", *(_QWORD *)(a1 + 1088), CFSTR("ResetIdentifiers"));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "reset identifiers saved to settings", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v33.__r_.__value_.__l.__data_) = 0;
      LODWORD(v31) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "reset identifiers saved to settings", &v33, v31);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
    *(_BYTE *)(a1 + 1104) = 1;
    objc_msgSend(*(id *)(a1 + 256), "setNextFireDelay:", 65.0);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAppResetChangedNotification, 0, 0, 0);
    sub_100091C2C(a1);
    sub_10019DBAC((_BYTE *)a1);
    v35[0] = &__kCFBooleanTrue;
    v34[0] = CFSTR("IsResetEvent");
    v34[1] = CFSTR("EventSource");
    v9 = (_QWORD *)(a1 + 952);
    if (*(char *)(a1 + 975) < 0)
      v9 = (_QWORD *)*v9;
    v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
    v34[2] = CFSTR("Enabled");
    v35[1] = v10;
    v35[2] = &__kCFBooleanFalse;
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 3);
    if (qword_1022A02C0 != -1)
      dispatch_once(&qword_1022A02C0, &stru_102154588);
    v12 = qword_1022A02C8;
    if (os_log_type_enabled((os_log_t)qword_1022A02C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#resetClients #CoreAnalytics\", \"Bigswitch Analytics\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    AnalyticsSendEvent(CFSTR("com.apple.locationd.bigswitch"), v11);
    sub_1007DFC84(a1);
    objc_msgSend(*(id *)(a1 + 480), "eraseAllData");
    sub_1002A21DC(a1 + 440);
    sub_100584F4C(0, &v33);
    v13 = std::string::append(&v33, "locScoreInfoReport");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v15 = buf;
    else
      v15 = *(_BYTE **)buf;
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v33.__r_.__value_.__r.__words[0] = 0;
    if (!-[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v16, &v33))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v33.__r_.__value_.__r.__words[0];
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Got error removing checkpoint file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    sub_1007EC9D4((id *)a1);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Removed locscoreInfo, locScoreInfoReport and cleared consumption map.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021545A8);
      v32[0] = 0;
      LODWORD(v31) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "Removed locscoreInfo, locScoreInfoReport and cleared consumption map.", v32, v31);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    if (_os_feature_enabled_impl("CoreLocation", "CLSwissLocationAttribution"))
    {
      objc_msgSend(*(id *)(a1 + 544), "eraseAllData");
      sub_1002A21DC(a1 + 504);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021545A8);
      v19 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Removed locationAttributionInterval and cleared consumption map for attribution.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021545A8);
        v32[0] = 0;
        LODWORD(v31) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "Removed locationAttributionInterval and cleared consumption map for attribution.", v32, v31);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_1007D40FC(a1, v20);
    }
  }
}

void sub_1007DC19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_1007DC1D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, char a6, __int16 a7, unsigned int a8)
{
  _BOOL4 v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  int v30;
  int v31;
  NSObject *v32;
  void **v33;
  int v34;
  BOOL v35;
  int v36;
  CLClientKeyPath *v37;
  id v38;
  NSObject *v39;
  id v40;
  unsigned __int8 v41;
  id v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  unsigned int v49;
  NSObject *v50;
  void **v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  NSObject *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60[2];
  char v61;
  void *__p[2];
  char v63;
  void *v64[2];
  char v65;
  uint8_t buf[8];
  __int16 v67;
  const char *v68;
  __int16 v69;
  _BYTE v70[14];
  __int16 v71;
  int v72;
  __int16 v73;
  unsigned int v74;
  __int16 v75;
  unsigned int v76;

  if (a8 - 1 < 2)
  {
    sub_100197040();
    v16 = sub_10019DF90();
    if (a8 == 2 && v16)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        v67 = 2082;
        v68 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage on Companion received an update message\"}", buf, 0x12u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v18 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        v67 = 2082;
        v68 = "";
        v19 = "#authsync applyAuthorizationSyncMessage on Companion received an update message";
        v20 = "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage on Companion received an update message\"}";
        v21 = v18;
        v22 = 18;
LABEL_18:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v19, v20, buf, v22);
        return;
      }
      return;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v25 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0)
        v26 = a2;
      else
        v26 = *(_QWORD *)a2;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v67 = 2082;
      v68 = "";
      v69 = 2082;
      *(_QWORD *)v70 = v26;
      *(_WORD *)&v70[8] = 1026;
      *(_DWORD *)&v70[10] = a8;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage un-translated key\", \"clientKey\":%{public, location:escape_only}s, \"OperationType\":%{public}d}", buf, 0x22u);
    }
    if (!std::string::compare((const std::string *)a2, ""))
      sub_1007DD6C8(a1, a4);
    if (*(char *)(a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = *(_QWORD *)a2;
    v28 = sub_1007DAC08((uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27));
    sub_1015A2E04(v64, (char *)objc_msgSend(v28, "UTF8String"));
    v59 = a1;
    v29 = a3;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v30 = a7;
    v31 = HIBYTE(a7);
    v32 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v33 = v64;
      if (v65 < 0)
        v33 = (void **)v64[0];
      if (BYTE4(a5))
        v34 = a5;
      else
        v34 = -1;
      *(_DWORD *)buf = 68290306;
      if (v31)
        v35 = v30 == 0;
      else
        v35 = 0;
      v36 = !v35;
      *(_DWORD *)&buf[4] = 0;
      v67 = 2082;
      v68 = "";
      v69 = 2082;
      *(_QWORD *)v70 = v33;
      *(_WORD *)&v70[8] = 1026;
      *(_DWORD *)&v70[10] = a4;
      v71 = 1026;
      v72 = v34;
      v73 = 1026;
      v74 = a8;
      v75 = 1026;
      v76 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage\", \"clientKey\":%{public, location:escape_only}s, \"auth\":%{public}d, \"corrective\":%{public}d, \"OperationType\":%{public}d, \"suppressShowingInSettings\":%{public}d}", buf, 0x34u);
    }
    v37 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", v28);
    if ((a6 & 1) != 0)
    {
      v38 = objc_msgSend(*(id *)(v59 + 136), "registeredKeyPathForClientIdentifier:", v37);
      if (a8 == 2)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v39 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v67 = 2082;
          v68 = "";
          v69 = 2114;
          *(_QWORD *)v70 = v37;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync removing client; CLCompanionSyncAuthObject_CLSYChangeType_UPDATE\", \"clien"
            "t\":%{public, location:escape_only}@}",
            buf,
            0x1Cu);
        }
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v48 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v67 = 2082;
          v68 = "";
          v69 = 2114;
          *(_QWORD *)v70 = v37;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync removing client as it is received with clear field set\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        v49 = objc_msgSend(v38, "isValidCKP") ^ 1;
        if (!v29)
          LOBYTE(v49) = 1;
        if ((v49 & 1) == 0)
          v38 = objc_msgSend(v38, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29), 122);
      }
      sub_1015A2E04(__p, "ClientRemoved");
      sub_1007C0424(v59, v38, 1, (uint64_t *)__p);
      if (v63 < 0)
        operator delete(__p[0]);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v50 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v51 = v64;
        if (v65 < 0)
          v51 = (void **)v64[0];
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v67 = 2082;
        v68 = "";
        v69 = 2082;
        *(_QWORD *)v70 = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync received with clear to delete the auth on companion\", \"clientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      goto LABEL_109;
    }
    if (a4 || !v31 || !v30)
    {
      v40 = objc_msgSend(*(id *)(v59 + 136), "registeredKeyPathForClientIdentifier:", v37);
      if ((objc_msgSend(v40, "isValidCKP") & 1) == 0)
        v40 = objc_msgSend(*(id *)(v59 + 136), "registerClient:fromAuthSync:", v37, 1);
      sub_1007D4958(v59, v40, 0);
      sub_100197040();
      if (sub_100195F08())
      {
        v41 = objc_msgSend(*(id *)(v59 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("SyncedAuthorizationDecisionOnGizmo"), v40, 1);
        v42 = objc_msgSend(*(id *)(v59 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v40, 0);
        v43 = (uint64_t)v42;
        v44 = (_DWORD)v42 ? v41 : 1;
        if ((v44 & 1) == 0 && (_DWORD)v42 != a4)
        {
          v45 = sub_1007CAB7C(v59, (uint64_t)v40);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v46 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a2 + 23) >= 0)
              v47 = a2;
            else
              v47 = *(_QWORD *)a2;
            *(_DWORD *)buf = 68290306;
            *(_DWORD *)&buf[4] = 0;
            v67 = 2082;
            v68 = "";
            v69 = 1026;
            *(_DWORD *)v70 = a8;
            *(_WORD *)&v70[4] = 2082;
            *(_QWORD *)&v70[6] = v47;
            v71 = 1026;
            v72 = v43;
            v73 = 1026;
            v74 = a4;
            v75 = 1026;
            v76 = v45;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage change denied due to SyncedAuthorizationDecisionOnGizmo=false\", \"OperationType\":%{public}d, \"clientKey\":%{public, location:escape_only}s, \"oldAuth\":%{public}d, \"newAuth\":%{public}d, \"correctiveComp\":%{public}d}", buf, 0x34u);
          }
          sub_1015A2E04(buf, "AuthorizationConflictResolutionDuringAdd");
          sub_1007D4BE0(v59, a2, v29, v43, v45 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)buf);
LABEL_100:
          if ((v70[3] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          goto LABEL_109;
        }
      }
      sub_100197040();
      if (sub_10019DF90())
      {
        v53 = objc_msgSend(*(id *)(v59 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v40, 0);
        v54 = v53;
        if (v53)
        {
          if (v53 != a4)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v55 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0)
                v56 = a2;
              else
                v56 = *(_QWORD *)a2;
              *(_DWORD *)buf = 68290050;
              *(_DWORD *)&buf[4] = 0;
              v67 = 2082;
              v68 = "";
              v69 = 1026;
              *(_DWORD *)v70 = a8;
              *(_WORD *)&v70[4] = 2082;
              *(_QWORD *)&v70[6] = v56;
              v71 = 1026;
              v72 = v54;
              v73 = 1026;
              v74 = a4;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage denied due to an auth conflict\", \"OperationType\":%{public}d, \"clientKey\":%{public, location:escape_only}s, \"oldAuth\":%{public}d, \"newAuth\":%{public}d}", buf, 0x2Eu);
            }
            sub_1015A2E04(v60, "ClientRemoved-AuthConflictResolution");
            sub_1007C0424(v59, v40, 1, (uint64_t *)v60);
            if (v61 < 0)
              operator delete(v60[0]);
            sub_1015A2E04(buf, "");
            sub_100193838(v59, v40, (uint64_t)buf);
            goto LABEL_100;
          }
        }
      }
      if (a4 > 4)
        v57 = 2;
      else
        v57 = dword_101BC2274[a4];
      if (BYTE4(a5))
        v58 = a5;
      else
        v58 = 0;
      sub_1007DD8CC(v59, (uint64_t)v40, v57, v58, v52, 1, 0);
    }
LABEL_109:
    if (v65 < 0)
      operator delete(v64[0]);
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v23 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v67 = 2082;
    v68 = "";
    v69 = 1026;
    *(_DWORD *)v70 = a8;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"NotSuported #authSync applyAuthorizationSyncMessage applies syncMessage of operationTye Add or Update\", \"Received OperationType\":%{public}d}", buf, 0x18u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v24 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v67 = 2082;
    v68 = "";
    v69 = 1026;
    *(_DWORD *)v70 = a8;
    v19 = "NotSuported #authSync applyAuthorizationSyncMessage applies syncMessage of operationTye Add or Update";
    v20 = "{\"msg%{public}.0s\":\"NotSuported #authSync applyAuthorizationSyncMessage applies syncMessage of operationTye"
          " Add or Update\", \"Received OperationType\":%{public}d}";
    v21 = v24;
    v22 = 24;
    goto LABEL_18;
  }
}

void sub_1007DCC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

id sub_1007DCD0C(id result, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  NSDictionary *v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  const mach_header_64 *v14;
  id v15;
  __CFString *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  const __CFString *v20;
  void *v21;
  uint64_t v23;
  id v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[6];
  _QWORD v32[6];
  uint8_t buf[8];
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  id v39;
  _BYTE v40[128];

  v26 = (uint64_t)result;
  if (a3)
  {
    v21 = (void *)sub_1007DDD94((std::string *)a2);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
    v24 = result;
    if (result)
    {
      v25 = 0;
      v23 = *(_QWORD *)v28;
      v20 = CFSTR("Provenance");
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v28 != v23)
            objc_enumerationMutation(a3);
          v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v5);
          if (objc_msgSend(v6, "provenance", v20) == 1)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v7 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0)
                v8 = a2;
              else
                v8 = *(_QWORD *)a2;
              v9 = objc_msgSend(objc_msgSend(v6, "zoneIdentifier"), "UTF8String");
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              v34 = 2082;
              v35 = "";
              v36 = 2082;
              v37 = v8;
              v38 = 2082;
              v39 = v9;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #authsync ApplyStaticZone.\", \"Client\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            v31[0] = CFSTR("Type");
            v32[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "zoneType"));
            v31[1] = CFSTR("Latitude");
            objc_msgSend(v6, "latitude");
            v32[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v31[2] = CFSTR("Longitude");
            objc_msgSend(v6, "longitude");
            v32[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v31[3] = CFSTR("Radius");
            objc_msgSend(v6, "radius");
            v32[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v31[4] = CFSTR("ServiceMaskOperator");
            v32[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "serviceMaskOperator"));
            v31[5] = v20;
            v32[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "provenance"));
            v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 6);
            sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(v6, "zoneIdentifier"), "UTF8String"));
            v11 = sub_1007DE008(v26, a2, (std::string *)buf, v10, 2u, v21);
            if (SBYTE3(v37) < 0)
              operator delete(*(void **)buf);
          }
          else
          {
            v11 = 0;
          }
          if ((objc_msgSend(v6, "hasAuthMask") & 1) != 0
            || objc_msgSend(v6, "hasCorrectiveCompensationMask"))
          {
            if (objc_msgSend(v6, "hasCorrectiveCompensationMask"))
            {
              v12 = objc_msgSend(v6, "correctiveCompensationMask");
              v13 = v12;
              v25 = v12 >> 8;
              v14 = &_mh_execute_header;
            }
            else
            {
              v14 = 0;
              v13 = 0;
            }
            v15 = objc_msgSend(v6, "zoneIdentifier");
            if ((v11 & 1) == 0)
            {
              sub_100197040();
              if (sub_10019DF90())
                v16 = CFSTR("clpla_companion_");
              else
                v16 = CFSTR("clpla_gizmo_");
              v15 = -[__CFString stringByAppendingString:](v16, "stringByAppendingString:", v15);
            }
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v17 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0)
                v18 = a2;
              else
                v18 = *(_QWORD *)a2;
              v19 = objc_msgSend(v15, "UTF8String");
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              v34 = 2082;
              v35 = "";
              v36 = 2082;
              v37 = v18;
              v38 = 2082;
              v39 = v19;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Applying auth for SyncedZone.\", \"Client\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            v3 &= 0xFFFFFFFFFFFF0000;
            sub_1007DC1D8(v26, a2, (uint64_t)objc_msgSend(v15, "UTF8String"), objc_msgSend(v6, "authMask"), (unint64_t)v14 | v13 | (v25 << 8), (char)objc_msgSend(v6, "clearClient"), v3, 1u);
          }
          v5 = (char *)v5 + 1;
        }
        while (v24 != v5);
        result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
        v24 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1007DD21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007DD240(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  NSObject *v9;
  void *__p;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v3 = *(_QWORD *)(a1 + 40);
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) & 1) == 0)
  {
    if (objc_msgSend(a2, "isAuthLimited"))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v4 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        __p = (void *)68289282;
        v11 = 2082;
        v12 = "";
        v13 = 2114;
        v14 = a2;
        v5 = "{\"msg%{public}.0s\":\"#authsync applying fullSyncMessages; skip deletion of auth limited client\", \"clien"
             "t\":%{public, location:escape_only}@}";
        v6 = v4;
        v7 = OS_LOG_TYPE_INFO;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&__p, 0x1Cu);
      }
    }
    else if (objc_msgSend(*(id *)(v3 + 136), "isKeyPathRegisteredSystemService:", a2))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289282;
        v11 = 2082;
        v12 = "";
        v13 = 2114;
        v14 = a2;
        v5 = "{\"msg%{public}.0s\":\"#authsync applying fullSyncMessages; skip deletion of system service client\", \"cli"
             "ent\":%{public, location:escape_only}@}";
        v6 = v8;
        v7 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_12;
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        __p = (void *)68289282;
        v11 = 2082;
        v12 = "";
        v13 = 2114;
        v14 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#authsync applying fullSyncMessages; deleting client\", \"client\":%{public, location:escape_only}@}",
          (uint8_t *)&__p,
          0x1Cu);
      }
      sub_1015A2E04(&__p, (char *)objc_msgSend(objc_msgSend(a2, "legacyClientKey"), "UTF8String"));
      sub_1007DD4CC(v3, (uint64_t *)&__p);
      if (SBYTE3(v14) < 0)
        operator delete(__p);
    }
  }
}

void sub_1007DD4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007DD4CC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  char *v5;
  NSObject *v6;
  void **v7;
  uint64_t *v8;
  id v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void **v19;

  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = (char *)objc_msgSend(sub_1007DAC08((uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "UTF8String");
  sub_1015A2E04(v12, v5);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v12;
    if (v13 < 0)
      v7 = (void **)v12[0];
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessageTypeDelete\", \"clientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8)));
  sub_1015A2E04(__p, "ClientRemoved");
  sub_1007C0424(a1, v9, 0, (uint64_t *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  sub_100091C2C(a1);
  sub_10019DBAC((_BYTE *)a1);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1007DD68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1007DD6C8(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  BOOL v11;
  void *__p;
  _BYTE v13[10];
  __int16 v14;
  int v15;

  sub_1001E4804(&__p);
  v11 = a2 == 1;
  sub_10011B81C((uint64_t)__p, CFSTR("LocationServicesEnabledIn8.0"), &v11);
  v4 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v5 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_1001E4804(&__p);
  sub_100569514((uint64_t)__p);
  v7 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v8 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_1015A2E04(&__p, "com.apple.locationd.authsync");
  sub_1007BC73C(a1, (uint64_t *)&__p, 0);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289282;
    *(_WORD *)v13 = 2082;
    *(_QWORD *)&v13[2] = "";
    v14 = 1026;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"authsync: Updating location services\", \"newState\":%{public}d}", (uint8_t *)&__p, 0x18u);
  }
}

void sub_1007DD894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007DD8CC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  id v12;
  BOOL v13;
  const char *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  _BYTE __p[12];
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  const char *v28;
  _BYTE buf[12];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  const char *v33;

  v12 = sub_100195B0C(a1, a2);
  objc_msgSend(*(id *)(a1 + 224), "setNextFireDelay:", 0.3);
  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
    v13 = a7 == 0;
  else
    v13 = 1;
  if (v13)
  {
    if (a3 > 4)
    {
      v14 = "Never(because_invalid)";
      v23 = 1;
    }
    else
    {
      v23 = qword_101BC2288[a3];
      v14 = off_102154980[a3];
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v12;
      v30 = 1026;
      v31 = a3;
      v32 = 2082;
      v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Setting client: %{public}@ authorization to %{public}d (%{public}s)", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      *(_DWORD *)__p = 138543874;
      *(_QWORD *)&__p[4] = v12;
      v25 = 1026;
      v26 = a3;
      v27 = 2082;
      v28 = v14;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Setting client: %{public}@ authorization to %{public}d (%{public}s)", __p, 28);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::setClientAuthorization(CLClientKeyPath *, CLClientAuthorizationStatus, CLClientCorrectiveCompensation, const char *, BOOL, BOOL, BOOL)", "%s\n", v22);
      if (v22 != buf)
        free(v22);
    }
    if (*(_BYTE *)(a1 + 233))
    {
      v18 = (char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
      if (v18)
        v19 = v18;
      else
        v19 = "";
      sub_1015A2E04(buf, v19);
      v20 = (char *)objc_msgSend(objc_msgSend(v12, "zoneId"), "UTF8String");
      if (v20)
        v21 = v20;
      else
        v21 = "";
      sub_1015A2E04(__p, v21);
      sub_1007E2DFC(a1, (uint64_t)buf, (uint64_t)__p, 1, 0, 0, 3u, 1, *(double *)(a1 + 320), *(double *)(a1 + 328), 50.0, 1u, 0);
      if (SBYTE3(v28) < 0)
        operator delete(*(void **)__p);
      if (SBYTE3(v33) < 0)
        operator delete(*(void **)buf);
      *(_BYTE *)(a1 + 233) = 0;
      *(CLLocationCoordinate2D *)(a1 + 320) = kCLLocationCoordinate2DInvalid;
    }
    sub_1007D7F38(a1, (uint64_t)v12, v23, a4, 1, a6, a7);
    sub_10019DBAC((_BYTE *)a1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "location services settings are frozen by restrictions - denying %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      *(_DWORD *)__p = 138543362;
      *(_QWORD *)&__p[4] = v12;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "location services settings are frozen by restrictions - denying %{public}@", __p, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::setClientAuthorization(CLClientKeyPath *, CLClientAuthorizationStatus, CLClientCorrectiveCompensation, const char *, BOOL, BOOL, BOOL)", "%s\n", v16);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_1007DDD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

CFTypeRef sub_1007DDD94(std::string *a1)
{
  char *v2;
  void **v3;
  const __CFURL *v4;
  __CFBundle *v5;
  CFTypeRef v6;
  NSObject *v7;
  std::string *v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  uint64_t buf;
  __int16 v27;
  const char *v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  __CFBundle *v32;
  __int16 v33;
  CFTypeRef v34;

  sub_100204320(a1, (uint64_t)v12);
  sub_1001A8D50((uint64_t)v12);
  if (v21 >= 0)
    v2 = (char *)&v20;
  else
    v2 = (char *)v20;
  sub_1015A2E04(__p, v2);
  if (v11 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  v4 = (const __CFURL *)sub_1001AF3C4(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  if (v4)
    v5 = CFBundleCreate(kCFAllocatorDefault, v4);
  else
    v5 = 0;
  sub_100197040();
  sub_100195F08();
  if (v5)
    v6 = sub_1001ACF6C(v5);
  else
    v6 = 0;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = a1;
    else
      v8 = (std::string *)a1->__r_.__value_.__r.__words[0];
    buf = 68289794;
    v27 = 2082;
    v28 = "";
    v29 = 2082;
    v30 = v8;
    v31 = 2114;
    v32 = v5;
    v33 = 2114;
    v34 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #authsync apply zone-sync info.plist zones\", \"ClientKey\":%{public, location:escape_only}s, \"effectiveBundle\":%{public, location:escape_only}@, \"Info.plist Zones\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
  }
  if (v5)
    CFRelease(v5);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12[0]);
  return v6;
}

void sub_1007DDFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007DE008(uint64_t a1, uint64_t a2, std::string *__str, void *a4, unsigned int a5, void *a6)
{
  std::string *v8;
  NSString *v11;
  __CFString *v12;
  std::string *v13;
  NSString *v14;
  __CFString *v15;
  uint64_t v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  std::string *v20;
  id v21;
  std::string *v22;
  id v23;
  unsigned int v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  std::string *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  std::string *v43;
  std::string *v44;
  id v45;
  NSObject *v46;
  uint64_t v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  NSObject *v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string *v66;
  uint8_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  void (*v80)(uint64_t, void *, void *);
  void *v81;
  uint64_t v82;
  void *__p[2];
  char v84;
  std::string v85;
  std::string v86;
  uint8_t buf[8];
  __int16 v88;
  const char *v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  std::string *v93;
  __int16 v94;
  std::string *v95;
  __int16 v96;
  _BOOL4 v97;

  if (a5 - 3 <= 0xFFFFFFFD)
  {
    sub_101909578(a1, a2, __str);
    goto LABEL_108;
  }
  v8 = __str;
  memset(&v86, 0, sizeof(v86));
  memset(&v85, 0, sizeof(v85));
  if (a5 == 2)
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      __str = (std::string *)__str->__r_.__value_.__r.__words[0];
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __str);
    sub_100197040();
    if (sub_10019DF90())
      v12 = CFSTR("clpla_companion_");
    else
      v12 = CFSTR("clpla_gizmo_");
    std::string::assign(&v86, (const std::string::value_type *)objc_msgSend(-[__CFString stringByAppendingString:](v12, "stringByAppendingString:", v11), "UTF8String"));
    std::string::operator=(&v85, v8);
  }
  else
  {
    std::string::operator=(&v86, __str);
    if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = v8;
    else
      v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
    v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13);
    sub_100197040();
    if (sub_10019DF90())
      v15 = CFSTR("clpla_companion_");
    else
      v15 = CFSTR("clpla_gizmo_");
    std::string::assign(&v85, (const std::string::value_type *)objc_msgSend(-[__CFString stringByAppendingString:](v15, "stringByAppendingString:", v14), "UTF8String"));
  }
  if (*(char *)(a2 + 23) >= 0)
    v16 = a2;
  else
    v16 = *(_QWORD *)a2;
  v17 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)));
  v18 = objc_msgSend(v17, "isValidCKP");
  if ((v18 & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0)
      v19 = a2;
    else
      v19 = *(_QWORD *)a2;
    v17 = objc_msgSend(*(id *)(a1 + 136), "registerClient:fromAuthSync:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19)), 0);
  }
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v86;
  else
    v20 = (std::string *)v86.__r_.__value_.__r.__words[0];
  v21 = objc_msgSend(v17, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20), 122);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v85;
  else
    v22 = (std::string *)v85.__r_.__value_.__r.__words[0];
  v23 = objc_msgSend(v17, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22), 122);
  sub_1015A2E04(__p, "ClientRemoved");
  sub_1007C0424(a1, v21, 1, (uint64_t *)__p);
  if (v84 < 0)
    operator delete(__p[0]);
  v24 = objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator")), "intValue");
  v25 = objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Type")), "intValue");
  objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Latitude")), "doubleValue");
  v27 = v26;
  objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Longitude")), "doubleValue");
  v29 = v28;
  objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Radius")), "doubleValue");
  sub_1007E2DFC(a1, a2, (uint64_t)&v86, (uint64_t)v25, 0, v24, a5, 0, v27, v29, v30, 0, 0);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v85;
  else
    v31 = (std::string *)v85.__r_.__value_.__r.__words[0];
  v32 = objc_msgSend(a6, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31));
  if (v32 && (sub_1007F49B4(v32, a4) & 1) != 0)
  {
    v78 = _NSConcreteStackBlock;
    v79 = 3221225472;
    v80 = sub_1007F4C78;
    v81 = &unk_102154490;
    v82 = a1;
    if ((v18 & 1) != 0 || (objc_msgSend(*(id *)(a1 + 136), "dictionaryExistsAtKeyPath:", v23) & 1) != 0)
    {
      v33 = sub_1007F49B4(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v23), "dictionary"), a4);
      if ((v33 & 1) != 0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v41 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v42 = a2;
          else
            v42 = *(_QWORD *)a2;
          v43 = &v86;
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v43 = (std::string *)v86.__r_.__value_.__r.__words[0];
          v44 = &v85;
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v44 = (std::string *)v85.__r_.__value_.__r.__words[0];
          *(_QWORD *)buf = 68290050;
          v88 = 2082;
          v89 = "";
          v90 = 2082;
          v91 = v42;
          v92 = 2082;
          v93 = v43;
          v94 = 2082;
          v95 = v44;
          v96 = 1026;
          v97 = a5 == 2;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #reconcile Collapsing, existing entry identical. Using existing entry, deleting new entry\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
        }
        sub_1015A2E04(&v72, "ClientRemoved");
        sub_1007C0424(a1, v21, 1, (uint64_t *)&v72);
        if (SHIBYTE(v74) < 0)
          operator delete(v72);
        v45 = v23;
        if (a5 == 2)
          goto LABEL_99;
        goto LABEL_85;
      }
      if (a5 == 2)
      {
        sub_1015A2E04(&v75, "ClientRemoved");
        sub_1007C0424(a1, v23, 1, (uint64_t *)&v75);
        if (SHIBYTE(v77) < 0)
          operator delete(v75);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v51 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v52 = a2;
          else
            v52 = *(_QWORD *)a2;
          v53 = &v86;
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v53 = (std::string *)v86.__r_.__value_.__r.__words[0];
          v54 = &v85;
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v54 = (std::string *)v85.__r_.__value_.__r.__words[0];
          *(_QWORD *)buf = 68290050;
          v88 = 2082;
          v89 = "";
          v90 = 2082;
          v91 = v52;
          v92 = 2082;
          v93 = v53;
          v94 = 2082;
          v95 = v54;
          v96 = 1026;
          v97 = 1;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #reconcile existing entry for collapsing not identical. Delete existing entry\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
        }
        v45 = v21;
        v21 = v23;
LABEL_85:
        v80((uint64_t)&v78, v45, v21);
        goto LABEL_99;
      }
      sub_1019096EC(v33, v34, v35, v36, v37, v38, v39, v40, v68, v69, v70, (uint64_t)a6, (uint64_t)v72, v73, v74, (uint64_t)v75, v76, v77, (uint64_t)v78,
        v79,
        (uint64_t)v80,
        (uint64_t)v81,
        v82,
        (uint64_t)__p[0]);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.mm", 6717, "registerAndReconcileInfoPlistZone");
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v55 = qword_1022A01D8;
      v56 = os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT);
      if (v56)
      {
        if (*(char *)(a2 + 23) >= 0)
          v64 = a2;
        else
          v64 = *(_QWORD *)a2;
        v65 = &v86;
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v65 = (std::string *)v86.__r_.__value_.__r.__words[0];
        v66 = &v85;
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = (std::string *)v85.__r_.__value_.__r.__words[0];
        *(_QWORD *)buf = 68290050;
        v88 = 2082;
        v89 = "";
        v90 = 2082;
        v91 = v64;
        v92 = 2082;
        v93 = v65;
        v94 = 2082;
        v95 = v66;
        v96 = 1026;
        v97 = a5 == 2;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #reconcile existing entry for collapsing not found\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
      }
      if (a5 == 2)
      {
        v80((uint64_t)&v78, v21, v23);
        goto LABEL_99;
      }
      sub_101909834(v56, v57, v58, v59, v60, v61, v62, v63, v68, v69, v70, (uint64_t)a6, (uint64_t)v72, v73, v74, (uint64_t)v75, v76, v77, (uint64_t)v78,
        v79,
        (uint64_t)v80,
        (uint64_t)v81,
        v82,
        (uint64_t)__p[0]);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.mm", 6706, "registerAndReconcileInfoPlistZone");
    }
LABEL_108:
    __break(1u);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v46 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v47 = a2;
    else
      v47 = *(_QWORD *)a2;
    v48 = &v86;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v48 = (std::string *)v86.__r_.__value_.__r.__words[0];
    v49 = &v85;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)v85.__r_.__value_.__r.__words[0];
    *(_QWORD *)buf = 68290050;
    v88 = 2082;
    v89 = "";
    v90 = 2082;
    v91 = v47;
    v92 = 2082;
    v93 = v48;
    v94 = 2082;
    v95 = v49;
    v96 = 1026;
    v97 = a5 == 2;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#pla #reconcile registered zone not in zonesReconciliationLedger. No collapsing\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
  }
  if (a5 == 2)
  {
    v50 = 0;
    goto LABEL_100;
  }
  sub_1015A2E04(buf, "InfoPlistZoneRegistration");
  sub_1007DFBE8(a1, (uint64_t *)a2, (uint64_t *)buf);
  if (SBYTE3(v91) < 0)
    operator delete(*(void **)buf);
LABEL_99:
  v50 = 1;
LABEL_100:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  return v50;
}

void sub_1007DE930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a24 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(exception_object);
}

id sub_1007DE9DC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  CLCompanionSyncAuthObject *v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  const char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[6];
  int v19;
  id v20;
  __int16 v21;
  id v22;
  _BYTE buf[12];
  __int16 v24;
  id v25;
  char v26;

  v2 = objc_alloc_init((Class)NSMutableArray);
  sub_100197040();
  if (sub_10019DF90())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#authsync getAllAuthSync start", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#authsync getAllAuthSync start", &v19, 2);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "NSArray *CLClientManager::getAllAuthSync()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1015A2E04(buf, "");
    v4 = sub_1007DACF4(a1, (uint64_t *)buf, 0, 2);
    if (v26 < 0)
      operator delete(*(void **)buf);
    -[CLCompanionSyncAuthObject setAuthMask:](v4, "setAuthMask:", sub_1001A09FC() == 1);
    objc_msgSend(v2, "addObject:", v4);
    v5 = *(void **)(a1 + 136);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1007DEDDC;
    v18[3] = &unk_102153BE8;
    v18[4] = v2;
    v18[5] = a1;
    objc_msgSend(v5, "iterateAllAnchorKeyPathsWithBlock:", v18);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(v2, "count");
      v8 = objc_msgSend(objc_msgSend(v2, "description"), "UTF8String");
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = v7;
      v24 = 2082;
      v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#authsync getAllAuthSync finish %{public}lu: %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      v13 = objc_msgSend(v2, "count");
      v14 = objc_msgSend(objc_msgSend(v2, "description"), "UTF8String");
      v19 = 134349314;
      v20 = v13;
      v21 = 2082;
      v22 = v14;
      LODWORD(v17) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 1, "#authsync getAllAuthSync finish %{public}lu: %{public}s", &v19, v17);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "NSArray *CLClientManager::getAllAuthSync()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  return v2;
}

void sub_1007DEDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007DEDDC(uint64_t a1, void *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  CLCompanionSyncAuthObject *v6;
  void *__p[2];
  char v8;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (char *)objc_msgSend(objc_msgSend(a2, "legacyClientKey"), "UTF8String");
  if (v4)
    v5 = v4;
  else
    v5 = "";
  sub_1015A2E04(__p, v5);
  v6 = sub_1007DACF4(v3, (uint64_t *)__p, 0, 2);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
}

void sub_1007DEE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007DEE7C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  double Current;
  void *i;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __CFString *v12;
  void *v13;
  id obj;
  uint64_t v16;
  id v17;
  _QWORD v18[6];
  __CFString *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CFTypeRef v25;
  _BYTE v26[128];

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync"))
  {
    v25 = 0;
    v3 = sub_1001FD94C();
    if (sub_100219F40(v3, (uint64_t)CFSTR("CLClientManager.AssertionDueToWatchApp"), &v25))
    {
      v4 = (void *)v25;
      Current = CFAbsoluteTimeGetCurrent();
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      obj = objc_msgSend(v4, "allKeys");
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      if (v17)
      {
        v16 = *(_QWORD *)v22;
        do
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v22 != v16)
              objc_enumerationMutation(obj);
            v7 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
            v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
            v10 = (uint64_t *)qword_1023049F0;
            v9 = qword_1023049F8;
            while (v10 != (uint64_t *)v9)
            {
              v11 = *v10++;
              v19 = 0;
              v20 = 0;
              sub_100195BD4(v11, &v20, &v19);
              v12 = v19;
              objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v4, "objectForKeyedSubscript:", v7), v20);
              objc_msgSend(v8, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current), v12);
            }
            objc_msgSend(v2, "setObject:forKey:", v8, v7);
          }
          v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
        }
        while (v17);
      }
    }
  }
  else
  {
    v13 = *(void **)(a1 + 136);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1007DF0A8;
    v18[3] = &unk_102153BE8;
    v18[4] = v2;
    v18[5] = a1;
    objc_msgSend(v13, "iterateAllAnchorKeyPathsWithBlock:", v18);
  }
  return v2;
}

void sub_1007DF0A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  BOOL v5;
  BOOL v6;
  id v7;
  void *__p[2];
  char v9;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = objc_msgSend(a2, "legacyClientKey");
  sub_1015A2E04(__p, (char *)objc_msgSend(v4, "UTF8String"));
  v5 = sub_10019DCE4(v3, (unsigned __int8 *)__p);
  v6 = v5;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return;
  }
  else if (!v5)
  {
    return;
  }
  sub_1015A2E04(__p, (char *)objc_msgSend(v4, "UTF8String"));
  v7 = sub_1007DF190(v3, (uint64_t *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v7, "count"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v7, v4);
}

void sub_1007DF170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007DF190(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  id v5;
  id v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v10;
  double v11;
  __CFString *v12;
  double v13;
  NSObject *v14;
  uint64_t *v15;
  __CFString *v17;
  uint8_t buf[8];
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t *v22;

  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)));
  if ((objc_msgSend(v5, "isValidCKP") & 1) != 0)
  {
    v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    for (i = 0; i != 11; ++i)
    {
      v8 = qword_101BC1D90[i];
      if (_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync"))
      {
        if (v8 > 0xA || ((1 << v8) & 0x430) == 0)
          continue;
      }
      v17 = 0;
      *(_QWORD *)buf = 0;
      sub_100195BD4(v8, buf, &v17);
      v10 = *(_QWORD *)buf;
      objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", *(_QWORD *)buf, v5, -1.0);
      if (v11 != -1.0)
        objc_msgSend(v6, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), v10);
      v12 = v17;
      objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", v17, v5, -1.0);
      if (v13 != -1.0)
        objc_msgSend(v6, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), v12);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v15 = a2;
      else
        v15 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2082;
      v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Couldn't get nvp\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1007DF3F4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  CFAbsoluteTime Current;
  uint64_t i;
  unint64_t v12;
  uint64_t result;
  unint64_t v15;
  id v16;
  unint64_t v17;
  BOOL v18;
  NSObject *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  CLClientKeyPath *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  NSString *v41;
  __CFString *v42;
  uint64_t v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v53;

  v6 = &qword_1022A0000;
  if (qword_1022A01D0 != -1)
LABEL_57:
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68289282;
    v45 = 0;
    v46 = 2082;
    v47 = "";
    v48 = 2082;
    v49 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Merging remote location usage\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  v41 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
  Current = CFAbsoluteTimeGetCurrent();
  for (i = 0; i != 11; ++i)
  {
    v12 = qword_101BC1D90[i];
    result = _os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync");
    if ((_DWORD)result)
    {
      if (v12 > 0xA || ((1 << v12) & 0x430) == 0)
        continue;
    }
    v42 = 0;
    v43 = 0;
    sub_100195BD4(v12, &v43, &v42);
    v15 = (unint64_t)objc_msgSend(a3, "objectForKeyedSubscript:", v43);
    v16 = objc_msgSend(a3, "objectForKeyedSubscript:", v42);
    v17 = (unint64_t)v16;
    if (v15)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
    {
      if (v6[58] != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v19 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend((id)v15, "doubleValue");
        v21 = v20;
        objc_msgSend((id)v17, "doubleValue");
        *(_DWORD *)buf = 68289794;
        v45 = 0;
        v46 = 2082;
        v47 = "";
        v48 = 2050;
        v49 = v21;
        v50 = 2050;
        v51 = v22;
        v52 = 2050;
        v53 = v12;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #warning Didn't expect a start time and a stop time\", \"start time_s\":\"%{public}.09f\", \"stop time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
      }
      objc_msgSend((id)v17, "doubleValue");
      v24 = v23;
      objc_msgSend((id)v15, "doubleValue");
      if (v24 <= v25)
        v17 = 0;
      else
        v15 = 0;
    }
    if (*((char *)a2 + 23) >= 0)
      v26 = a2;
    else
      v26 = (uint64_t *)*a2;
    v27 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26));
    if (v15 | v17)
    {
      v28 = v6[58];
      if (v15)
      {
        if (v28 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v29 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a2 + 23) >= 0)
            v30 = a2;
          else
            v30 = (uint64_t *)*a2;
          objc_msgSend((id)v15, "doubleValue");
          *(_DWORD *)buf = 68289794;
          v45 = 0;
          v46 = 2082;
          v47 = "";
          v48 = 2082;
          v49 = v30;
          v6 = &qword_1022A0000;
          v50 = 2050;
          v51 = v31;
          v52 = 2050;
          v53 = v12;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Starting remote location service\", \"client\":%{public, location:escape_only}s, \"start time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
        }
        if (v12 == 10)
          sub_1001966C4(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", v41), -1, 0, 0.0);
        objc_msgSend((id)v15, "doubleValue");
        v33 = a1;
        v34 = (uint64_t)v27;
        v35 = v12;
        v36 = 1;
      }
      else
      {
        if (!v17)
        {
          sub_10190997C(v28 == -1);
          goto LABEL_57;
        }
        if (v28 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v38 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a2 + 23) >= 0)
            v39 = a2;
          else
            v39 = (uint64_t *)*a2;
          objc_msgSend((id)v17, "doubleValue");
          *(_DWORD *)buf = 68289794;
          v45 = 0;
          v46 = 2082;
          v47 = "";
          v48 = 2082;
          v49 = v39;
          v6 = &qword_1022A0000;
          v50 = 2050;
          v51 = v40;
          v52 = 2050;
          v53 = v12;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Stopping remote location service\", \"client\":%{public, location:escape_only}s, \"stop time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
        }
        objc_msgSend((id)v17, "doubleValue");
        v33 = a1;
        v34 = (uint64_t)v27;
        v35 = v12;
        v36 = 0;
      }
      v37 = 1;
    }
    else
    {
      v33 = a1;
      v34 = (uint64_t)v27;
      v35 = v12;
      v36 = 0;
      v37 = 0;
      v32 = Current;
    }
    result = sub_100194D94(v33, v34, v35, v36, v37, 1, v32);
  }
  return result;
}

id sub_1007DF8E4(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[6];

  v2 = *(void **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007DF93C;
  v4[3] = &unk_102153BE8;
  v4[4] = a2;
  v4[5] = a1;
  return objc_msgSend(v2, "iterateAllAnchorKeyPathsWithBlock:", v4);
}

void sub_1007DF93C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char *v6;
  char *v7;
  void *__p[2];
  char v9;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", objc_msgSend(a2, "legacyClientKey"));
  if (v4)
    v5 = v4;
  else
    v5 = &__NSDictionary0__struct;
  v6 = (char *)objc_msgSend(objc_msgSend(a2, "legacyClientKey"), "UTF8String");
  if (v6)
    v7 = v6;
  else
    v7 = "";
  sub_1015A2E04(__p, v7);
  sub_1007DF3F4(v3, (uint64_t *)__p, v5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1007DF9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1007DF9F0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  id v6;
  id v7;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  __CFString *v18;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;

  v3 = 0;
  while (1)
  {
    v4 = qword_101BC1D90[v3];
    if (_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync"))
    {
      if (v4 > 0xA || ((1 << v4) & 0x430) == 0)
        goto LABEL_13;
    }
    v18 = 0;
    v19 = 0;
    sub_100195BD4(v4, &v19, &v18);
    v6 = objc_msgSend(a2, "objectForKeyedSubscript:", v19);
    v7 = objc_msgSend(a2, "objectForKeyedSubscript:", v18);
    if (v6 && v7 != 0)
      break;
    if (v6)
      return 1;
LABEL_13:
    if (++v3 == 11)
      return 0;
  }
  v10 = v7;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v6, "doubleValue");
    v13 = v12;
    objc_msgSend(v10, "doubleValue");
    *(_DWORD *)buf = 68289794;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2050;
    v25 = v13;
    v26 = 2050;
    v27 = v14;
    v28 = 2050;
    v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #warning Didn't expect a start time and a stop time\", \"start time_s\":\"%{public}.09f\", \"stop time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
  }
  objc_msgSend(v10, "doubleValue");
  v16 = v15;
  objc_msgSend(v6, "doubleValue");
  return v16 <= v17;
}

id sub_1007DFBE8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  id result;
  void *v7;
  uint64_t *v8;

  sub_100197040();
  if (sub_10019DF90() || (sub_100197040(), result = (id)sub_100195F08(), (_DWORD)result))
  {
    result = sub_1007DACF4(a1, a2, 0, 1);
    if (result)
    {
      v7 = *(void **)(a1 + 1536);
      if (*((char *)a3 + 23) >= 0)
        v8 = a3;
      else
        v8 = (uint64_t *)*a3;
      return objc_msgSend(v7, "addObject:withSyncSessionReason:", result, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    }
  }
  return result;
}

void sub_1007DFC84(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100197040();
  if (sub_10019DF90())
  {
    objc_msgSend(*(id *)(a1 + 1536), "sendNotification:", 0);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#authsync sending kNotificationReset to the watch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#authsync sending kNotificationReset to the watch", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::sendResetNotification()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1007DFE24(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100197040();
  if (sub_100195F08())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#authsync received kNotificationReset from the companion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#authsync received kNotificationReset from the companion", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::receiveResetNotification()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    sub_1007DB688(a1);
  }
}

void sub_1007E0054(id a1)
{
  qword_102304AA8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLClientManagerSilo"));
}

void sub_1007E02AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E03AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E04BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E05CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E06DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E0A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100C1EE6C(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1007E0A44()
{
  operator new();
}

void sub_1007E0AD8()
{
  operator delete();
}

void sub_1007E0C40(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  NSObject *v6;
  _DWORD *v7;
  double Current;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t buf[8];
  _BYTE v16[20];

  v4 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v4, "isValidCKP") & 1) != 0)
  {
LABEL_6:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    goto LABEL_8;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v16 = 2082;
    *(_QWORD *)&v16[2] = "";
    *(_WORD *)&v16[10] = 2114;
    *(_QWORD *)&v16[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"appLaunchedByAppLifecycleManager called for unregistered app. Skipping.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    goto LABEL_6;
  }
LABEL_8:
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v16 = 2082;
    *(_QWORD *)&v16[2] = "";
    *(_WORD *)&v16[10] = 2113;
    *(_QWORD *)&v16[12] = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"app launched by CLALM\", \"Client\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  if (v4)
  {
    objc_msgSend(v4, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)&v16[8] = 0;
  }
  v14 = buf;
  v7 = sub_100199794(a1 + 440, buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v14);
  v7[12] += 500;
  if ((v16[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  Current = CFAbsoluteTimeGetCurrent();
  v9 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
  objc_msgSend(v9, "setClientKey:", objc_msgSend(v4, "clientKey"));
  objc_msgSend(v9, "setStartTime:", Current);
  objc_msgSend(v9, "setStopTime:", Current);
  objc_msgSend(*(id *)(a1 + 480), "writeSecondaryObject:toField:", v9, 1);
  if (v4)
  {
    objc_msgSend(v4, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)&v16[8] = 0;
  }
  v10 = sub_10019C4C0(a1 + 776, (const void **)buf);
  v11 = a1 + 784;
  if ((v16[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v11 != v10)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(_QWORD *)&v16[12] = v4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Faulting for logs explaining usage score increment\", \"ClientKey\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v13 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(_QWORD *)&v16[12] = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Faulting for logs explaining usage score increment", "{\"msg%{public}.0s\":\"Faulting for logs explaining usage score increment\", \"ClientKey\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
}

void sub_1007E1010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007E1074(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  _QWORD v15[5];
  char v16;
  int v17;
  uint8_t buf[1640];

  v17 = 0;
  v2 = sub_1001FD94C();
  v3 = sub_1001E4B84(v2, "SystemServiceGeneration", &v17) ^ 1;
  if (v17 < 2)
    v4 = 1;
  else
    v4 = v3;
  v5 = *(void **)(a1 + 136);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007F34B8;
  v15[3] = &unk_102154360;
  v15[4] = a1;
  v16 = v4;
  objc_msgSend(v5, "iterateAllAnchorKeyPathsWithBlock:", v15);
  if (v4 == 1)
  {
    v6 = sub_1001FD94C();
    *(_DWORD *)buf = 2;
    sub_10011B4E4(v6, "SystemServiceGeneration", buf);
    v7 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "AuthMigrate: successfully resetted all SystemService authorization mask", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "AuthMigrate: successfully resetted all SystemService authorization mask", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::performMigration()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    objc_msgSend(*(id *)(a1 + 136), "persist");
  }
  sub_100091C2C(a1);
  sub_10019DBAC((_BYTE *)a1);
  objc_msgSend(*(id *)(a1 + 1536), "considerPerformingAForcedFullSync");
  v9 = sub_1001FD94C();
  sub_1005254E4(v9);
  v10 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 944))(v10);
  return sub_1007B7470(*(_QWORD **)(a1 + 1016));
}

void sub_1007E1314(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  void *v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  uint64_t v23;

  if (*(_BYTE *)(a1 + 1104))
  {
    if ((objc_msgSend(*(id *)(a1 + 1088), "containsObject:", a2) & 1) != 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v4 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v5 = objc_msgSend(a2, "UTF8String");
        v6 = *(void **)(a1 + 1088);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)v17 = 0;
        *(_WORD *)&v17[4] = 2082;
        *(_QWORD *)&v17[6] = "";
        v18 = 2082;
        v19 = v5;
        v20 = 2114;
        v21 = v6;
        v22 = 2050;
        v23 = (int)objc_msgSend(v6, "count");
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"reset completion reporting\", \"Current Identifier\":%{public, location:escape_only}s, \"ResetIdentifiers Snapshot\":%{public, location:escape_only}@, \"Count\":%{public}ld}", buf, 0x30u);
      }
      objc_msgSend(*(id *)(a1 + 1088), "removeObject:", a2);
      objc_msgSend(*(id *)(a1 + 128), "setArray:forKey:", *(_QWORD *)(a1 + 1088), CFSTR("ResetIdentifiers"));
      if (!objc_msgSend(*(id *)(a1 + 1088), "count"))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021545A8);
        v7 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Completion reported back for all Reset registered clients", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021545A8);
          LOWORD(v14) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "Completion reported back for all Reset registered clients", &v14, 2);
          v13 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLClientManager::resetNotificationConsumedForIdentifier(NSString *)", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
        *(_BYTE *)(a1 + 1104) = 0;
        objc_msgSend(*(id *)(a1 + 256), "setNextFireDelay:", 0.0);
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 128), "setArray:forKey:", 0, CFSTR("ResetIdentifiers"));
      objc_msgSend(*(id *)(a1 + 128), "setInt:forKey:", 0, CFSTR("ResetRetrialCount"));
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v17 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Reset registration and completion reporting is un-balanced. Completion of Reset reported for unregistered identifier: %@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v14 = 138412290;
        v15 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Reset registration and completion reporting is un-balanced. Completion of Reset reported for unregistered identifier: %@", &v14, 12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLClientManager::resetNotificationConsumedForIdentifier(NSString *)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = "";
      v18 = 2082;
      v19 = objc_msgSend(a2, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Skip completion reporting. No Reset in progress\", \"Identifier\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
}

void sub_1007E18C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007E18D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    v15 = a2;
    v16 = 1026;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Setting client:%@ background indicator to %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = 138412546;
    v11 = a2;
    v12 = 1026;
    v13 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Setting client:%@ background indicator to %{public}d", &v10, 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::setClientBackgroundIndicator(CLClientKeyPath *, BOOL, const char *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return sub_1007F100C(a1, a2, a3, 1);
}

void sub_1007E1C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E1C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E1E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E1F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1007E1F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;

  v5 = sub_100195B0C(a1, a2);
  v6 = *(void **)(a1 + 136);
  if (a3)
    return objc_msgSend(v6, "setString:forKey:atKeyPath:", a3, CFSTR("Purpose"), v5);
  else
    return objc_msgSend(v6, "removeValueForKey:atKeyPath:", CFSTR("Purpose"), v5);
}

void sub_1007E2008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007E205C(id *a1, void *a2)
{
  id result;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(a2);
        sub_1007C02A0(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7)));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

NSMutableDictionary *sub_1007E21C4(uint64_t a1, uint64_t a2, int a3)
{
  id v4;
  void *v5;
  NSMutableDictionary *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  CLClientKeyPath *v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint8_t *v24;
  id v25;
  uint64_t v27;
  NSMutableDictionary *v28;
  int v29;
  id v30;
  os_log_t log;
  NSObject *loga;
  NSObject *logb;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  id v40;
  uint8_t buf[4];
  _BYTE v42[14];
  __int16 v43;
  void *v44;
  _BYTE v45[128];

  v4 = objc_msgSend(*(id *)(a1 + 136), "dictionary");
  if (v4)
  {
    v5 = v4;
    if ((_os_feature_enabled_impl("CoreLocation", "cl_pula") & 1) == 0)
    {
      v6 = objc_opt_new(NSMutableDictionary);
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
      if (!v7)
        return v6;
      v8 = v7;
      v28 = v6;
      v29 = a3;
      v9 = *(_QWORD *)v36;
LABEL_6:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v36 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v10);
        v12 = objc_msgSend(v5, "objectForKeyedSubscript:", v11);
        v14 = objc_opt_class(NSDictionary, v13);
        if ((objc_opt_isKindOfClass(v12, v14) & 1) == 0
          || (objc_msgSend(v11, "isEqualToString:", CFSTR("e:")) & 1) != 0
          || (objc_msgSend(v11, "isEqualToString:", CFSTR("p:")) & 1) != 0
          || objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", CFSTR("AnchorKeyPath"))|| objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", CFSTR("PrimaryKeyPath"))|| objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", CFSTR("AuthLimitingKeyPath"))|| !objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", CFSTR("Authorization"))&& objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", CFSTR("SuppressShowingInSettings")))
        {
          goto LABEL_15;
        }
        v15 = +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", v11);
        v16 = objc_msgSend(v5, "objectForKeyedSubscript:", v11);
        log = &v15->super;
        if (objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v15))
        {
          v17 = v16;
          if (sub_10019978C(v16) != 8
            && sub_10019782C((const __CFString *)-[NSObject bundlePath](log, "bundlePath"))
            && (!v29 || sub_100E48434(v16)))
          {
            goto LABEL_29;
          }
        }
        else
        {
          v17 = v16;
          if ((objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("Authorization"))
             || objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("SupportedAuthorizationMask"))
             || objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("SubIdentities")))
            && (!v29 || sub_100E48434(v16)))
          {
LABEL_29:
            v18 = objc_msgSend(v17, "cl_deepMutableCopy");
            v30 = objc_msgSend(-[NSObject clientAnchor](log, "clientAnchor"), "copy");
            if (v30 && v18)
            {
              sub_1007D6FA8(a1, (uint64_t)log, v18);
              if (objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("PlatformSpecificBundleId"))
                && objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("BundleId")))
              {
                objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("PlatformSpecificBundleId")), CFSTR("BundleId"));
              }
              sub_100E485D8(v18);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v28, "setObject:forKeyedSubscript:", v18, v30);
            }
            else if (v18)
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              loga = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289283;
                *(_DWORD *)v42 = 0;
                *(_WORD *)&v42[4] = 2082;
                *(_QWORD *)&v42[6] = "";
                v43 = 2113;
                v44 = v11;
                _os_log_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client CKP key is nil in CLClientManager::copyClients\", \"key\":%{private, location:escape_only}@}", buf, 0x1Cu);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102154528);
              }
              logb = qword_1022A01D8;
              if (os_signpost_enabled((os_log_t)qword_1022A01D8))
              {
                *(_DWORD *)buf = 68289283;
                *(_DWORD *)v42 = 0;
                *(_WORD *)&v42[4] = 2082;
                *(_QWORD *)&v42[6] = "";
                v43 = 2113;
                v44 = v11;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, logb, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client CKP key is nil in CLClientManager::copyClients", "{\"msg%{public}.0s\":\"Client CKP key is nil in CLClientManager::copyClients\", \"key\":%{private, location:escape_only}@}", buf, 0x1Cu);
              }
            }
            else
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v19 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
              {
                v20 = -[NSObject clientAnchor](log, "clientAnchor");
                *(_DWORD *)buf = 138477827;
                *(_QWORD *)v42 = v20;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Client record is nil in CLClientManager::copyClients for clientKey %{private}@", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102154528);
                v21 = qword_1022A01D8;
                v22 = -[NSObject clientAnchor](log, "clientAnchor");
                v39 = 138477827;
                v40 = v22;
                LODWORD(v27) = 12;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 17, "Client record is nil in CLClientManager::copyClients for clientKey %{private}@", &v39, v27);
                v24 = (uint8_t *)v23;
                sub_100512490("Generic", 1, 0, 0, "CFDictionaryRef CLClientManager::copyClients(NSString *, BOOL)", "%s\n", v23);
                if (v24 != buf)
                  free(v24);
              }
            }

          }
        }
LABEL_15:
        if (v8 == (id)++v10)
        {
          v25 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
          v8 = v25;
          if (!v25)
            return v28;
          goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

void sub_1007E290C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1007E2928(uint64_t a1, std::string *this)
{
  uint64_t v2;
  std::string::size_type size;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 768);
  if (v2)
  {
    std::string::operator=(this, (const std::string *)(*(_QWORD *)(a1 + 752) + 32));
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    if (!size)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "retrieved empty non-system location client key", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "retrieved empty non-system location client key", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLClientManager::getNonSystemLocationClientKey(std::string &)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
  }
  return v2 != 0;
}

void sub_1007E2BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E2CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E2DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1007E2DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, unsigned __int8 a12, uint64_t a13)
{
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSDictionary *v42;
  NSDictionary *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  NSDictionary *v58;
  NSErrorUserInfoKey v60;
  const __CFString *v61;
  NSErrorUserInfoKey v62;
  const __CFString *v63;
  NSErrorUserInfoKey v64;
  const __CFString *v65;
  uint8_t buf[8];
  __int16 v67;
  const char *v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  v23 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v24 = a2;
    else
      v24 = *(_QWORD *)a2;
    if (*(char *)(a3 + 23) >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    *(_DWORD *)buf = 68291331;
    *(_DWORD *)&buf[4] = 0;
    v67 = 2082;
    v68 = "";
    v69 = 2082;
    v70 = v24;
    v71 = 2050;
    v72 = a4;
    v73 = 2082;
    v74 = v25;
    v75 = 2049;
    v76 = a9;
    v77 = 2049;
    v78 = a10;
    v79 = 2050;
    v80 = a11;
    v81 = 2050;
    v82 = a5;
    v83 = 2050;
    v84 = a6;
    v85 = 2050;
    v86 = a7;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Registration for InterestZone #pla\", \"clientKey\":%{public, location:escape_only}s, \"type\":%{public, location:CLClientInterestZoneType}lld, \"zoneIdentifier\":%{public, location:escape_only}s, \"lat\":\"%{private}7f\", \"lon\":\"%{private}7f\", \"radius\":\"%{public}.3f\", \"PhenolicLocation\":%{public, location:CLClientPhenolicLocation}lld, \"ServiceMaskOperator\":%{public, location:CLClientInterestZoneServiceMaskOperator}lld, \"ProvenanceType\":%{public, location:CLClientInterestZoneProvenanceType}lld}", buf, 0x6Cu);
  }
  if (*(char *)(a2 + 23) >= 0)
    v26 = a2;
  else
    v26 = *(_QWORD *)a2;
  v27 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26)));
  if (((objc_msgSend(v27, "isValidCKP") | a12) & 1) != 0)
  {
    if ((objc_msgSend(v27, "isValidCKP") & 1) == 0)
    {
      if (*(char *)(a2 + 23) >= 0)
        v28 = a2;
      else
        v28 = *(_QWORD *)a2;
      v29 = objc_msgSend(*(id *)(a1 + 136), "registerClient:fromAuthSync:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28)), 0);
      if (*(char *)(a3 + 23) >= 0)
        v30 = a3;
      else
        v30 = *(_QWORD *)a3;
      v27 = objc_msgSend(*(id *)(a1 + 136), "registerSubIdentity:withType:forAnchorKeyPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30), 122, v29);
    }
    if ((_DWORD)a4 == 2)
    {
      objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a5, CFSTR("PhenolicLocation"), v27);
    }
    else
    {
      if ((_DWORD)a4 != 1)
      {
        v60 = NSLocalizedDescriptionKey;
        v61 = CFSTR("AuthZone registration failed. Invalid ZoneType.");
        v43 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1);
        (*(void (**)(uint64_t, NSError *))(a13 + 16))(a13, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v43));
        return;
      }
      if (a11 >= 50.0)
      {
        if (a11 > 1000.0)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v44 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a2 + 23) >= 0)
              v45 = a2;
            else
              v45 = *(_QWORD *)a2;
            if (*(char *)(a3 + 23) >= 0)
              v46 = a3;
            else
              v46 = *(_QWORD *)a3;
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            v67 = 2082;
            v68 = "";
            v69 = 2082;
            v70 = v45;
            v71 = 2082;
            v72 = v46;
            v73 = 2050;
            v74 = 0x408F400000000000;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Zone radius too large. Updated to max threshold\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s, \"MaxRadiusThreshold\":\"%{public}.3f\"}", buf, 0x30u);
          }
          a11 = 1000.0;
        }
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v31 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v32 = a2;
          else
            v32 = *(_QWORD *)a2;
          if (*(char *)(a3 + 23) >= 0)
            v33 = a3;
          else
            v33 = *(_QWORD *)a3;
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v67 = 2082;
          v68 = "";
          v69 = 2082;
          v70 = v32;
          v71 = 2082;
          v72 = v33;
          v73 = 2050;
          v74 = 0x4049000000000000;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Zone radius too small. Updated to min threshold\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s, \"MinRadiusThreshold\":\"%{public}.3f\"}", buf, 0x30u);
        }
        a11 = 50.0;
      }
      if (!sub_10011CE88(a9, a10))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v50 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
        {
          v51 = objc_msgSend(CFSTR("Registration : Invalid lat/lon."), "UTF8String");
          v52 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
          v53 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v67 = 2082;
          v68 = "";
          v69 = 2082;
          v70 = (uint64_t)v51;
          v71 = 2082;
          v72 = v52;
          v73 = 2082;
          v74 = v53;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v54 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v55 = objc_msgSend(CFSTR("Registration : Invalid lat/lon."), "UTF8String");
          if (*(char *)(a2 + 23) >= 0)
            v56 = a2;
          else
            v56 = *(_QWORD *)a2;
          if (*(char *)(a3 + 23) >= 0)
            v57 = a3;
          else
            v57 = *(_QWORD *)a3;
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v67 = 2082;
          v68 = "";
          v69 = 2082;
          v70 = (uint64_t)v55;
          v71 = 2082;
          v72 = v56;
          v73 = 2082;
          v74 = v57;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        if (a13)
        {
          v62 = NSLocalizedDescriptionKey;
          v63 = CFSTR("Registration : Invalid lat/lon.");
          v58 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
          (*(void (**)(uint64_t, NSError *))(a13 + 16))(a13, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v58));
        }
        return;
      }
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("Latitude"), v27, a9);
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("Longitude"), v27, a10);
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("Radius"), v27, a11);
    }
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a4, CFSTR("Type"), v27);
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a6, CFSTR("ServiceMaskOperator"), v27);
    objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a7, CFSTR("Provenance"), v27);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v47 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v48 = a2;
      else
        v48 = *(_QWORD *)a2;
      if (*(char *)(a3 + 23) >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v67 = 2082;
      v68 = "";
      v69 = 2082;
      v70 = v48;
      v71 = 2082;
      v72 = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"InterestZone registered\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    if (a8
      && (sub_1015A2E04(buf, "ZoneRegistration"), sub_1007DFBE8(a1, (uint64_t *)a2, (uint64_t *)buf), SBYTE3(v70) < 0))
    {
      operator delete(*(void **)buf);
      if (!a13)
        return;
    }
    else if (!a13)
    {
      return;
    }
    (*(void (**)(uint64_t, _QWORD))(a13 + 16))(a13, 0);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v34 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v35 = objc_msgSend(CFSTR("Registration : Zone already exists and overriding is not allowed."), "UTF8String");
      v36 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v37 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v67 = 2082;
      v68 = "";
      v69 = 2082;
      v70 = (uint64_t)v35;
      v71 = 2082;
      v72 = v36;
      v73 = 2082;
      v74 = v37;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v38 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v39 = objc_msgSend(CFSTR("Registration : Zone already exists and overriding is not allowed."), "UTF8String");
      if (*(char *)(a2 + 23) >= 0)
        v40 = a2;
      else
        v40 = *(_QWORD *)a2;
      if (*(char *)(a3 + 23) >= 0)
        v41 = a3;
      else
        v41 = *(_QWORD *)a3;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v67 = 2082;
      v68 = "";
      v69 = 2082;
      v70 = (uint64_t)v39;
      v71 = 2082;
      v72 = v40;
      v73 = 2082;
      v74 = v41;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    if (a13)
    {
      v64 = NSLocalizedDescriptionKey;
      v65 = CFSTR("Registration : Zone already exists and overriding is not allowed.");
      v42 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
      (*(void (**)(uint64_t, NSError *))(a13 + 16))(a13, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v42));
    }
  }
}

void sub_1007E38D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E39D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1007E3AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1007E3AE0(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  char *v11;
  char *v12;
  char *v13;
  id v14;
  uint64_t *v15;
  id v16;
  NSObject *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  NSObject *v21;
  char *v22;
  char *v23;
  char *v24;
  NSDictionary *v25;
  NSError *v26;
  NSErrorUserInfoKey v27;
  const __CFString *v28;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  uint64_t *v37;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0)
      v11 = a2;
    else
      v11 = *(char **)a2;
    if (a3[23] >= 0)
      v12 = a3;
    else
      v12 = *(char **)a3;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = v11;
    v34 = 2082;
    v35 = v12;
    v36 = 1026;
    LODWORD(v37) = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SetRelevanceForInterestZone\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdentifier\":%{public, location:escape_only}s, \"isRelevant\":%{public}hhd}", buf, 0x2Cu);
  }
  if (a2[23] >= 0)
    v13 = a2;
  else
    v13 = *(char **)a2;
  v14 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)));
  if ((objc_msgSend(v14, "isValidCKP") & 1) != 0)
  {
    if (a3[23] >= 0)
      v15 = (uint64_t *)a3;
    else
      v15 = *(uint64_t **)a3;
    v16 = objc_msgSend(v14, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15), 122);
    objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", a4, CFSTR("Relevant"), v16);
    sub_1015A2E04(buf, "");
    sub_100193838(a1, v16, (uint64_t)buf);
    if (SBYTE3(v33) < 0)
    {
      operator delete(*(void **)buf);
      if (!a5)
        return;
    }
    else if (!a5)
    {
      return;
    }
    v26 = 0;
LABEL_44:
    (*(void (**)(uint64_t, NSError *))(a5 + 16))(a5, v26);
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v17 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v18 = (char *)objc_msgSend(CFSTR("setRelevance : Zone not found."), "UTF8String");
    v19 = a2[23] >= 0 ? a2 : *(char **)a2;
    v20 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = v18;
    v34 = 2082;
    v35 = v19;
    v36 = 2082;
    v37 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v21 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v22 = (char *)objc_msgSend(CFSTR("setRelevance : Zone not found."), "UTF8String");
    if (a2[23] >= 0)
      v23 = a2;
    else
      v23 = *(char **)a2;
    if (a3[23] >= 0)
      v24 = a3;
    else
      v24 = *(char **)a3;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = v22;
    v34 = 2082;
    v35 = v23;
    v36 = 2082;
    v37 = (uint64_t *)v24;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  if (a5)
  {
    v27 = NSLocalizedDescriptionKey;
    v28 = CFSTR("setRelevance : Zone not found.");
    v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
    v26 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v25);
    goto LABEL_44;
  }
}

void sub_1007E3EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E3FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1007E4084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1007E40B8(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  NSObject *v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t *v13;
  id v14;
  void *v15;
  char *v16;
  NSString *v17;
  uint64_t *v18;
  NSError *v19;
  NSObject *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  NSObject *v24;
  char *v25;
  char *v26;
  char *v27;
  NSDictionary *v28;
  void *__p[2];
  char v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  uint64_t *v42;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  v8 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0)
      v9 = a2;
    else
      v9 = *(char **)a2;
    if (a3[23] >= 0)
      v10 = a3;
    else
      v10 = *(char **)a3;
    *(_DWORD *)buf = 68289538;
    v34 = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2082;
    v38 = v9;
    v39 = 2082;
    v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Delete InterestZone\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdentifier\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  if (a2[23] >= 0)
    v11 = a2;
  else
    v11 = *(char **)a2;
  v12 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)));
  if ((objc_msgSend(v12, "isValidCKP") & 1) != 0)
  {
    if (a3[23] >= 0)
      v13 = (uint64_t *)a3;
    else
      v13 = *(uint64_t **)a3;
    v14 = objc_msgSend(v12, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), 122);
    sub_1015A2E04(__p, "ClientRemoved");
    sub_1007C0424(a1, v14, 1, (uint64_t *)__p);
    if (v30 < 0)
      operator delete(__p[0]);
    v15 = *(void **)(a1 + 352);
    if (a2[23] >= 0)
      v16 = a2;
    else
      v16 = *(char **)a2;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16);
    if (a3[23] >= 0)
      v18 = (uint64_t *)a3;
    else
      v18 = *(uint64_t **)a3;
    objc_msgSend(v15, "stopCircularZoneMonitoringForClient:withZoneId:", v17, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
    if (a4)
    {
      v19 = 0;
LABEL_49:
      (*(void (**)(uint64_t, NSError *))(a4 + 16))(a4, v19);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v21 = (char *)objc_msgSend(CFSTR("deleteZone : Zone not found."), "UTF8String");
      v22 = a2[23] >= 0 ? a2 : *(char **)a2;
      v23 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
      *(_DWORD *)buf = 68289794;
      v34 = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2082;
      v38 = v21;
      v39 = 2082;
      v40 = v22;
      v41 = 2082;
      v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v24 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v25 = (char *)objc_msgSend(CFSTR("deleteZone : Zone not found."), "UTF8String");
      if (a2[23] >= 0)
        v26 = a2;
      else
        v26 = *(char **)a2;
      if (a3[23] >= 0)
        v27 = a3;
      else
        v27 = *(char **)a3;
      *(_DWORD *)buf = 68289794;
      v34 = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2082;
      v38 = v25;
      v39 = 2082;
      v40 = v26;
      v41 = 2082;
      v42 = (uint64_t *)v27;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    if (a4)
    {
      v31 = NSLocalizedDescriptionKey;
      v32 = CFSTR("deleteZone : Zone not found.");
      v28 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
      v19 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, v28);
      goto LABEL_49;
    }
  }
}

void sub_1007E44E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E45E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E46D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007E4724(uint64_t a1, uint64_t a2)
{
  id v3;
  _BOOL8 v4;
  void *__p[2];
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v3, "isValidCKP"))
    return 0;
  if (v3)
  {
    objc_msgSend(v3, "cppClientKey");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v7 = 0;
  }
  v4 = a1 + 760 != sub_10019C4C0(a1 + 752, (const void **)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1007E47BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E4880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002FDAA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E4970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E4984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  id v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint32_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  id v26;
  double v27;
  double v28;
  double Current;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  id v34;
  NSObject *v35;
  int v36;
  int v37;
  unsigned int v38;
  NSObject *v39;
  int v40;
  _QWORD *v41;
  void *v42[2];
  void *v43[3];
  id v44;
  uint8_t buf[8];
  __int16 v46;
  const char *v47;
  __int16 v48;
  _BYTE v49[10];
  uint64_t v50;

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v5, "isValidCKP") & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)buf = 68289026;
      v46 = 2082;
      v47 = "";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient: unknown client\"}", buf, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v21 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_QWORD *)buf = 68289026;
      v46 = 2082;
      v47 = "";
      v17 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient: unknown client";
      v18 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient: unknown client\"}";
      v19 = v21;
      v22 = 18;
LABEL_31:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v17, v18, buf, v22);
      return;
    }
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289282;
    v46 = 2082;
    v47 = "";
    v48 = 2114;
    *(_QWORD *)v49 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v44 = 0;
  if (!a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v23 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)buf = 68289282;
      v46 = 2082;
      v47 = "";
      v48 = 2114;
      *(_QWORD *)v49 = v5;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient may not take nil data\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v24 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      return;
    *(_QWORD *)buf = 68289282;
    v46 = 2082;
    v47 = "";
    v48 = 2114;
    *(_QWORD *)v49 = v5;
    v17 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient may not take nil data";
    v18 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient may not take nil data\", \""
          "Client\":%{public, location:escape_only}@}";
    goto LABEL_29;
  }
  v8 = objc_opt_class(NSDictionary, v7);
  v10 = objc_opt_class(NSString, v9);
  v12 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v8, v10, objc_opt_class(NSNumber, v11), 0), a3, &v44);
  if (!v44)
  {
    v25 = v12;
    v26 = objc_msgSend(objc_msgSend(v12, "objectsForKeys:notFoundMarker:", &off_1022204F8, +[NSNull null](NSNull, "null")), "count");
    if (v26 != objc_msgSend(&off_1022204F8, "count"))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v32 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v33 = objc_msgSend(&off_1022204F8, "count");
        *(_QWORD *)buf = 68289538;
        v46 = 2082;
        v47 = "";
        v48 = 2050;
        *(_QWORD *)v49 = v33;
        *(_WORD *)&v49[8] = 2050;
        v50 = (uint64_t)v26;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth missing one or more keys from decoded dict\", \"target\":%{public}lu, \"found\":%{public}lu}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v31 = qword_1022A01D8;
      if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
        return;
      v34 = objc_msgSend(&off_1022204F8, "count");
      *(_QWORD *)buf = 68289538;
      v46 = 2082;
      v47 = "";
      v48 = 2050;
      *(_QWORD *)v49 = v34;
      *(_WORD *)&v49[8] = 2050;
      v50 = (uint64_t)v26;
      v17 = "#TemporaryAuth missing one or more keys from decoded dict";
      v18 = "{\"msg%{public}.0s\":\"#TemporaryAuth missing one or more keys from decoded dict\", \"target\":%{public}lu, "
            "\"found\":%{public}lu}";
LABEL_50:
      v19 = v31;
      v22 = 38;
      goto LABEL_31;
    }
    if (objc_msgSend(v25, "valueForKey:", CFSTR("TransientInfoPayloadTimestamp")))
    {
      objc_msgSend(objc_msgSend(v25, "valueForKey:", CFSTR("TransientInfoPayloadTimestamp")), "doubleValue");
      v28 = v27;
      Current = CFAbsoluteTimeGetCurrent();
      if (vabdd_f64(Current, v28) <= 10.0)
      {
        v36 = objc_msgSend(objc_msgSend(v25, "valueForKey:", CFSTR("TransientInfoPayloadHasWIU")), "BOOLValue");
        v37 = objc_msgSend(objc_msgSend(v25, "valueForKey:", CFSTR("TransientInfoPayloadHasPrecise")), "BOOLValue");
        v38 = objc_msgSend(objc_msgSend(v25, "valueForKey:", CFSTR("TransientInfoPayloadInUseness")), "intValue");
        sub_1007C508C(*(void **)(a1 + 136), (uint64_t)v5, 2, v37);
        sub_1007C508C(*(void **)(a1 + 136), (uint64_t)v5, 1, v36);
        objc_msgSend(*(id *)(a1 + 136), "persist");
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v39 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          *(_QWORD *)buf = 68289794;
          v46 = 2082;
          v47 = "";
          v48 = 1026;
          *(_DWORD *)v49 = v37;
          *(_WORD *)&v49[4] = 1026;
          *(_DWORD *)&v49[6] = v38;
          LOWORD(v50) = 1026;
          *(_DWORD *)((char *)&v50 + 2) = v36;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient\", \"hasPrecise\":%{public}hhd, \"inUseInt\":%{public}d, \"hasWIU\":%{public}hhd}", buf, 0x24u);
        }
        v40 = sub_10142B050(v38);
        if (v40)
        {
          objc_msgSend(v5, "legacyClientKey");
          v41 = *(_QWORD **)(a1 + 376);
          if (v5)
            objc_msgSend(v5, "cppClientKey");
          else
            memset(v43, 0, sizeof(v43));
          sub_1015A2E04(v42, "setTemporaryAuthorizationStatusInfoForClient");
          sub_100C1F05C(v41, (uint64_t)v43, (uint64_t)v42, v40, 1, (uint64_t *)buf);
          sub_1007F35AC();
        }
        if ((v36 | v37) == 1)
        {
          sub_1015A2E04(buf, "");
          sub_100193838(a1, v5, (uint64_t)buf);
          if ((v49[3] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        return;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v30 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_QWORD *)buf = 68289538;
        v46 = 2082;
        v47 = "";
        v48 = 2050;
        *(_QWORD *)v49 = (uint64_t)Current;
        *(_WORD *)&v49[8] = 2050;
        v50 = (uint64_t)v28;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient stale info received\", \"tNow\":%{public}ld, \"sentTime\":%{public}ld}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v31 = qword_1022A01D8;
      if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
        return;
      *(_QWORD *)buf = 68289538;
      v46 = 2082;
      v47 = "";
      v48 = 2050;
      *(_QWORD *)v49 = (uint64_t)Current;
      *(_WORD *)&v49[8] = 2050;
      v50 = (uint64_t)v28;
      v17 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient stale info received";
      v18 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient stale info received\", \""
            "tNow\":%{public}ld, \"sentTime\":%{public}ld}";
      goto LABEL_50;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v35 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)buf = 68289282;
      v46 = 2082;
      v47 = "";
      v48 = 2114;
      *(_QWORD *)v49 = v5;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient failed to find a timestamp in the packaged data. Ignoring the packet\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v24 = qword_1022A01D8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
      return;
    *(_QWORD *)buf = 68289282;
    v46 = 2082;
    v47 = "";
    v48 = 2114;
    *(_QWORD *)v49 = v5;
    v17 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient failed to find a timestamp in the packaged data. I"
          "gnoring the packet";
    v18 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient failed to find a timestamp "
          "in the packaged data. Ignoring the packet\", \"Client\":%{public, location:escape_only}@}";
LABEL_29:
    v19 = v24;
    goto LABEL_30;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v14 = objc_msgSend(objc_msgSend(v44, "description"), "UTF8String");
    *(_QWORD *)buf = 68289282;
    v46 = 2082;
    v47 = "";
    v48 = 2082;
    *(_QWORD *)v49 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while decoding\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v15 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v16 = objc_msgSend(objc_msgSend(v44, "description"), "UTF8String");
    *(_QWORD *)buf = 68289282;
    v46 = 2082;
    v47 = "";
    v48 = 2082;
    *(_QWORD *)v49 = v16;
    v17 = "#TemporaryAuth encountered error while decoding";
    v18 = "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while decoding\", \"error\":%{public, location:escape_only}s}";
    v19 = v15;
LABEL_30:
    v22 = 28;
    goto LABEL_31;
  }
}

void sub_1007E5728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E58A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

NSData *sub_1007E58BC(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  unsigned int v5;
  char v6;
  int v7;
  uint64_t v8;
  double Current;
  NSDictionary *v10;
  NSObject *v11;
  NSData *v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  id v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  _QWORD v34[4];
  _QWORD v35[4];

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v3, "isValidCKP") & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = (uint64_t)v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v5 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("TemporaryAuthorization"), v3, 0);
    v21 = sub_1001985D8(*(_QWORD *)(a1 + 376), v3);
    v6 = v5;
    v7 = v5 & 1;
    v8 = sub_10142B008(&v21);
    Current = CFAbsoluteTimeGetCurrent();
    v34[0] = CFSTR("TransientInfoPayloadTimestamp");
    v35[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v34[1] = CFSTR("TransientInfoPayloadInUseness");
    v35[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
    v34[2] = CFSTR("TransientInfoPayloadHasPrecise");
    v35[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", ((unint64_t)v5 >> 1) & 1);
    v34[3] = CFSTR("TransientInfoPayloadHasWIU");
    v35[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5 & 1);
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 4);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68290050;
      v24 = 2082;
      v23 = 0;
      v25 = "";
      v26 = 2050;
      v27 = (uint64_t)Current;
      v28 = 1026;
      v29 = v8;
      v30 = 1026;
      v31 = v7;
      v32 = 1026;
      v33 = (unint64_t)(v6 & 2) >> 1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient\", \"tNow\":%{public}ld, \"inUse\":%{public}d, \"hasTempWIU\":%{public}hhd, \"hasTempPrecise\":%{public}hhd}", buf, 0x2Eu);
    }
    v20 = 0;
    v12 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v10, 1, &v20);
    if (v20)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v14 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
        *(_DWORD *)buf = 68289282;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2082;
        v27 = (uint64_t)v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while converting\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v15 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v16 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
        *(_DWORD *)buf = 68289282;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2082;
        v27 = (uint64_t)v16;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#TemporaryAuth encountered error while converting", "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while converting\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient: unknown client\"}", buf, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v18 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289026;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient: unknown client", "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient: unknown client\"}", buf, 0x12u);
    }
    return 0;
  }
  return v12;
}

void sub_1007E5EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1007E5EC0(uint64_t a1, void *a2, double a3)
{
  id v6;
  NSObject *v7;
  id v8;
  double v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  int v17;
  id v18;
  uint8_t buf[4];
  _BYTE v20[14];
  __int16 v21;
  id v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;

  v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v6, "isValidCKP") & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#appclip setting for bundle ID %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = 138412290;
      v18 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#appclip setting for bundle ID %@", &v17, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "double CLClientManager::setOrChangeAppClipAuthorizationTime(CLClientKeyPath *, double)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v8 = objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("AuthorizationRegisterTime"), v6, -1.0);
    if (v9 == -1.0)
      v9 = TMGetKernelMonotonicClock(v8);
    v10 = v9;
    objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("AuthorizationRegisterTime"), v6, v9 + a3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)v20 = 0;
      *(_WORD *)&v20[4] = 2082;
      *(_QWORD *)&v20[6] = "";
      v21 = 2114;
      v22 = v6;
      v23 = 2050;
      v24 = v10;
      v25 = 2050;
      v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#appclip setOrChangeAppClipAuthorizationTime\", \"Client\":%{public, location:escape_only}@, \"registrationTime\":\"%{public}f\", \"delta\":\"%{public}f\"}", buf, 0x30u);
    }
    objc_msgSend(*(id *)(a1 + 136), "persist");
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v20 = 0;
      *(_WORD *)&v20[4] = 2082;
      *(_QWORD *)&v20[6] = "";
      v21 = 2114;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#appclip no such client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v13 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v20 = 0;
      *(_WORD *)&v20[4] = 2082;
      *(_QWORD *)&v20[6] = "";
      v21 = 2114;
      v22 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#appclip no such client", "{\"msg%{public}.0s\":\"#appclip no such client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return -1.0;
}

id sub_1007E62D8(uint64_t a1, double a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  __int128 v14;
  void *__p[2];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[7];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  _BYTE v28[128];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#appclip looking for authorizations to clear\"}", buf, 0x12u);
  }
  v5 = +[NSMutableArray array](NSMutableArray, "array");
  v6 = *(void **)(a1 + 136);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1007F0144;
  v21[3] = &unk_102154320;
  *(double *)&v21[6] = a2;
  v21[4] = v5;
  v21[5] = a1;
  objc_msgSend(v6, "iterateAllAnchorKeyPathsWithBlock:", v21);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v28, 16);
  if (v7)
  {
    v9 = *(_QWORD *)v18;
    *(_QWORD *)&v8 = 68289282;
    v14 = v8;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v10);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v12 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v14;
          v23 = 0;
          v24 = 2082;
          v25 = "";
          v26 = 2114;
          v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#appclip removing client because it expired\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_1015A2E04(__p, "ClientRemoved");
        sub_1007C0424(a1, v11, 1, (uint64_t *)__p);
        if (v16 < 0)
          operator delete(__p[0]);
        v10 = (char *)v10 + 1;
      }
      while (v7 != v10);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v28, 16);
    }
    while (v7);
  }
  return objc_msgSend(*(id *)(a1 + 136), "persist", v14);
}

void sub_1007E6588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007E662C(uint64_t a1, void *a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;
  __int16 v10;
  id v11;
  __int16 v12;
  unsigned int v13;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289794;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "descriptor"), "platterTargetBundleIdentifier"), "UTF8String");
    v10 = 2082;
    v11 = objc_msgSend(objc_msgSend(a2, "identifier"), "UTF8String");
    v12 = 1026;
    v13 = objc_msgSend(a2, "state");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#liveActivity content update received\", \"bundleId\":%{public, location:escape_only}s, \"activityIdentifier\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)v5, 0x2Cu);
  }
  sub_100C1F194(*(_QWORD **)(a1 + 376), +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", objc_msgSend(objc_msgSend(a2, "descriptor"), "platterTargetBundleIdentifier"), 105), objc_msgSend(a2, "state") == 0);
}

void sub_1007E683C()
{
  sub_1007E6880();
}

void sub_1007E6880()
{
  operator new();
}

void sub_1007E6914()
{
  operator delete();
}

void sub_1007E6938()
{
  sub_1007E6880();
}

_QWORD *sub_1007E696C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  const char *v21;
  char *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  double v28;
  double v29;
  void *v30[2];
  char v31;
  _BYTE __p[12];
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  _BYTE buf[22];
  __int16 v38;
  uint64_t v39;

  *a1 = a2;
  *(_OWORD *)(a1 + 1) = xmmword_101BC1CF0;
  v4 = a1 + 1;
  v5 = a1 + 2;
  a1[3] = 0;
  if (a2 != 1)
  {
    if (a2)
      goto LABEL_17;
    v6 = sub_1001FD94C();
    if ((sub_1001FD98C(v6, "lastWifiImproveAccuracyNotification", v4) & 1) == 0)
      *v4 = 0xBFF0000000000000;
    sub_1001E4804(buf);
    v7 = sub_1001FD98C(*(uint64_t *)buf, "WifiImproveAccuracyNotificationInterval", v5);
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_14;
    }
LABEL_15:
    if ((v7 & 1) != 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = sub_1001FD94C();
  if ((sub_1001FD98C(v11, "lastBluetoothImproveAccuracyNotification", v4) & 1) == 0)
    *v4 = 0xBFF0000000000000;
  sub_1001E4804(buf);
  v7 = sub_1001FD98C(*(uint64_t *)buf, "BluetoothImproveAccuracyNotificationInterval", v5);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_15;
  v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v12);
  while (__stlxr(v10 - 1, v12));
LABEL_14:
  if (v10)
    goto LABEL_15;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if ((v7 & 1) == 0)
LABEL_16:
    *v5 = 0x4122750000000000;
LABEL_17:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v14 = "Unknown";
    if (a2 == 1)
      v14 = "Bluetooth";
    if (a2)
      v15 = (char *)v14;
    else
      v15 = "Wifi";
    sub_1015A2E04(__p, v15);
    if (v35 >= 0)
      v16 = __p;
    else
      v16 = *(_BYTE **)__p;
    v17 = *v4;
    v18 = *v5;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v16;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v17;
    v38 = 2048;
    v39 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "last improve accuracy notification for %s, %f, retry interval, %f", buf, 0x20u);
    if (SHIBYTE(v35) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v20 = qword_1022A01D8;
    v21 = "Unknown";
    if (a2 == 1)
      v21 = "Bluetooth";
    if (a2)
      v22 = (char *)v21;
    else
      v22 = "Wifi";
    sub_1015A2E04(v30, v22);
    if (v31 >= 0)
      v23 = v30;
    else
      v23 = (void **)v30[0];
    v24 = *v4;
    v25 = *v5;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v23;
    v33 = 2048;
    v34 = v24;
    v35 = 2048;
    v36 = v25;
    LODWORD(v28) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "last improve accuracy notification for %s, %f, retry interval, %f", __p, v28, v29);
    v27 = v26;
    if (v31 < 0)
      operator delete(v30[0]);
    sub_100512490("Generic", 1, 0, 2, "CLClientManager::ImproveAccuracyNotification::ImproveAccuracyNotification(CLClientManagerTechnology)", "%s\n", v27);
    if (v27 != buf)
      free(v27);
  }
  return a1;
}

void sub_1007E6D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007E6D58(_QWORD *a1)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  void **v5;
  uint64_t v6;
  __CFRunLoop *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  _QWORD block[5];
  _BYTE buf[12];
  char v16;
  int v17;
  _BYTE *v18;
  void *__p[2];
  char v20;

  if (a1[3])
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = "Unknown";
      if (*a1 == 1)
        v3 = "Bluetooth";
      if (*a1)
        v4 = (char *)v3;
      else
        v4 = "Wifi";
      sub_1015A2E04(__p, v4);
      if (v20 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "clear %s improve accuracy notification", buf, 0xCu);
      if (v20 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = qword_1022A01D8;
      v9 = "Unknown";
      if (*a1 == 1)
        v9 = "Bluetooth";
      if (*a1)
        v10 = (char *)v9;
      else
        v10 = "Wifi";
      sub_1015A2E04(buf, v10);
      if (v16 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v17 = 136315138;
      v18 = v11;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 2, "clear %s improve accuracy notification", (const char *)&v17);
      v13 = v12;
      if (v16 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::ImproveAccuracyNotification::clear()", "%s\n", v13);
      if (v13 != (char *)__p)
        free(v13);
    }
    v6 = a1[3];
    a1[3] = 0;
    v7 = (__CFRunLoop *)sub_100193530();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007E70F0;
    block[3] = &unk_10212ECA0;
    block[4] = v6;
    CFRunLoopPerformBlock(v7, kCFRunLoopCommonModes, block);
  }
}

void sub_1007E7010(uint64_t a1)
{
  uint64_t v1;
  __CFRunLoop *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v2 = (__CFRunLoop *)sub_100193530();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007E7080;
  block[3] = &unk_10212ECA0;
  block[4] = v1;
  CFRunLoopPerformBlock(v2, kCFRunLoopCommonModes, block);
}

void sub_1007E7080(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_1007E7090(double *a1, double a2)
{
  double v2;
  const void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  a1[1] = a2;
  v3 = a1 + 1;
  if (v2 == 0.0)
  {
    v4 = "lastWifiImproveAccuracyNotification";
    goto LABEL_5;
  }
  if (*(_QWORD *)&v2 == 1)
  {
    v4 = "lastBluetoothImproveAccuracyNotification";
LABEL_5:
    v5 = sub_1001FD94C();
    sub_10018A4CC(v5, v4, v3);
  }
  v6 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
}

void sub_1007E70F0(uint64_t a1)
{
  __CFUserNotification *v2;

  v2 = *(__CFUserNotification **)(a1 + 32);
  if (v2)
  {
    CFUserNotificationCancel(v2);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
}

void sub_1007E7128(uint64_t a1, void *a2)
{
  _QWORD *v4;
  id v5;
  NSMutableDictionary *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v15;
  void *p_p;
  NSString *v17;
  id v18;
  void *v19;
  NSString *v20;
  CLHRequestArchive *v21;
  CFAbsoluteTime v22;
  _QWORD *v23;
  id v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  const char *v38;
  void **v39;
  const char *v40;
  void **v41;
  const char *v42;
  void **v43;
  uint64_t v44;
  _QWORD v45[5];
  _QWORD v46[5];
  BOOL v47;
  _DWORD v48[2];
  __int16 v49;
  _BOOL4 v50;
  void *__p;
  _BYTE v52[32];

  v4 = (_QWORD *)sub_1007E9958(a1, "CLClientManager", a2);
  *v4 = off_102154128;
  v4[14] = &off_102154210;
  *(_QWORD *)(a1 + 120) = -[CLClientManagerStateTracker initInSilo:withIdentifier:state:]([CLClientManagerStateTracker alloc], "initInSilo:withIdentifier:state:", objc_msgSend(a2, "silo"), a1, &stru_102154248);
  v5 = objc_msgSend(objc_alloc((Class)CLSettingsMirror), "initInUniverse:", *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 240) = 0x40F5180000000000;
  *(_QWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(CLLocationCoordinate2D *)(a1 + 320) = kCLLocationCoordinate2DInvalid;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = objc_opt_new(NSMutableDictionary);
  *(_QWORD *)(a1 + 368) = 0;
  __p = (void *)a1;
  sub_1007F89EC(&__p, (_QWORD *)(a1 + 32), (_QWORD *)(a1 + 376));
  v6 = objc_opt_new(NSMutableDictionary);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = v6;
  v7 = objc_alloc((Class)NSMapTable);
  v8 = sub_100F64710();
  *(_QWORD *)(a1 + 416) = objc_msgSend(v7, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:", v8, sub_100F6479C(), 10);
  *(_QWORD *)(a1 + 432) = objc_alloc_init((Class)NSMutableDictionary);
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(_QWORD *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 592) = a1 + 600;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 1065353216;
  *(_QWORD *)(a1 + 656) = 0x403E000000000000;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = a1 + 688;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 704) = a1 + 712;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 728) = a1 + 736;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 776) = a1 + 784;
  *(_BYTE *)(a1 + 800) = sub_100515AC8();
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = a1 + 824;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = a1 + 848;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = a1 + 872;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 888) = a1 + 896;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 912) = a1 + 920;
  *(_QWORD *)(a1 + 936) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_DWORD *)(a1 + 1008) = 1065353216;
  v9 = operator new(0x40uLL);
  v9[2] = 0;
  *v9 = off_1021548F0;
  v9[1] = 0;
  v9[3] = off_102153AB0;
  v9[7] = 0;
  v9[6] = 0;
  v9[4] = a1;
  v9[5] = v9 + 6;
  *(_QWORD *)(a1 + 1016) = v9 + 3;
  *(_QWORD *)(a1 + 1024) = v9;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1054) = 0;
  *(_BYTE *)(a1 + 1062) = sub_100E44284();
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1072) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  *(_QWORD *)(a1 + 1080) = objc_alloc_init((Class)NSMutableDictionary);
  *(_QWORD *)(a1 + 1088) = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 1096) = objc_alloc_init((Class)NSMutableArray);
  *(_BYTE *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1112) = a1 + 1120;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1160) = 0xFFFF;
  *(_QWORD *)(a1 + 1172) = 0;
  *(_QWORD *)(a1 + 1164) = 0;
  __asm { FMOV            V2.2D, #-1.0 }
  *(_OWORD *)(a1 + 1180) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 1196) = _Q2;
  *(_OWORD *)(a1 + 1212) = _Q2;
  *(_OWORD *)(a1 + 1228) = _Q2;
  *(_DWORD *)(a1 + 1244) = 0;
  *(_QWORD *)(a1 + 1248) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1276) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1284) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_QWORD *)(a1 + 1480) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStatusBarIconManager"));
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_DWORD *)(a1 + 1520) = 1065353216;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_QWORD *)(a1 + 1544) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLCapabilityMonitor"), CFSTR("CLClientManager"));
  *(_QWORD *)(a1 + 1552) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLWifiTilesManager"), CFSTR("CLClientManager"));
  *(_QWORD *)(a1 + 1560) = 0;
  *(_BYTE *)(a1 + 1568) = 0;
  v47 = 0;
  v15 = sub_1001FD94C();
  sub_1001E48E4(v15, (uint64_t)CFSTR("kAuthorizationDecisionsNeedsMigration"), &v47);
  sub_100584F4C(0, (std::string *)&__p);
  if (v52[15] >= 0)
    p_p = &__p;
  else
    p_p = __p;
  v17 = -[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("clients.plist"));
  if ((v52[15] & 0x80000000) != 0)
    operator delete(__p);
  sub_1007DA498(a1, (uint64_t)v17, v47);
  if (v47)
    sub_1007E1074(a1);
  sub_1007CA328(a1);
  *(_OWORD *)(a1 + 1460) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_1007E9A1C;
  v46[3] = &unk_102154268;
  v46[4] = a1;
  objc_msgSend(*(id *)(a1 + 128), "setSettingsChangeHandler:", v46);
  *(_BYTE *)(a1 + 232) = objc_msgSend(*(id *)(a1 + 128), "BOOLForKey:defaultValue:", CFSTR("CLCM.AllowPromptRecording"), *(unsigned __int8 *)(a1 + 232));
  v18 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 256) = v18;
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_1007E9A50;
  v45[3] = &unk_10212ECA0;
  v45[4] = a1;
  objc_msgSend(v18, "setHandler:", v45);
  sub_100584F4C(0, (std::string *)&__p);
  if (v52[15] >= 0)
    v19 = &__p;
  else
    v19 = __p;
  v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19);
  if ((v52[15] & 0x80000000) != 0)
    operator delete(__p);
  v21 = -[CLHRequestArchive initWithDirectory:itemCountThresholdForAutoCleanUp:]([CLHRequestArchive alloc], "initWithDirectory:itemCountThresholdForAutoCleanUp:", -[NSString stringByAppendingPathComponent:](v20, "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "locationUtilityEventArchive")), 300);
  *(_QWORD *)(a1 + 552) = v21;
  -[CLHRequestArchive setRotationInterval:](v21, "setRotationInterval:", 86400.0);
  v22 = CFAbsoluteTimeGetCurrent() + -432000.0;
  objc_msgSend(*(id *)(a1 + 552), "pruneSecondaryDataOlderThan:", v22);
  *(_QWORD *)(a1 + 560) = objc_msgSend(sub_1007C2CF8(a1, (uint64_t)objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", v22)), "lastObject");
  sub_100197040();
  v23 = (_QWORD *)(a1 + 400);
  if (sub_1001974CC())
  {
    *v23 = objc_alloc_init((Class)STLocationStatusDomainPublisher);
    *(_QWORD *)(a1 + 408) = objc_alloc_init((Class)STBackgroundActivitiesStatusDomainPublisher);
    *(_QWORD *)(a1 + 424) = 1;
  }
  else
  {
    *v23 = 0;
    *(_QWORD *)(a1 + 408) = 0;
  }
  v24 = objc_msgSend(*(id *)(a1 + 128), "arrayForKey:defaultValue:", CFSTR("ResetIdentifiers"), 0);
  v25 = objc_msgSend(*(id *)(a1 + 128), "intForKey:defaultValue:", CFSTR("ResetRetrialCount"), 0);
  if (objc_msgSend(v24, "count"))
  {
    if (v25 > 1)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v28 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "ResetRetrialCount exhausted.", (uint8_t *)&__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LOWORD(v48[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A01D8, 2, "ResetRetrialCount exhausted.", v48, 2);
        v43 = (void **)v42;
        sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)", "%s\n", v42);
        if (v43 != &__p)
          free(v43);
      }
      objc_msgSend(*(id *)(a1 + 128), "setInt:forKey:", 0, CFSTR("ResetRetrialCount"));
      objc_msgSend(*(id *)(a1 + 128), "setArray:forKey:", 0, CFSTR("ResetIdentifiers"));
    }
    else
    {
      v26 = (v25 + 1);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v27 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289538;
        *(_WORD *)v52 = 2082;
        *(_QWORD *)&v52[2] = "";
        *(_WORD *)&v52[10] = 2050;
        *(_QWORD *)&v52[12] = (int)v26;
        *(_WORD *)&v52[20] = 2114;
        *(_QWORD *)&v52[22] = v24;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incomplete Reset, trying again\", \"ResetRetrialCount\":%{public}ld, \"Pending ResetIdentifiers\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x26u);
      }
      objc_msgSend(*(id *)(a1 + 128), "setInt:forKey:", v26, CFSTR("ResetRetrialCount"));
      objc_msgSend(*(id *)(a1 + 256), "setNextFireDelay:", 115.0);
    }
  }
  v29 = *(void **)(a1 + 136);
  __p = _NSConcreteStackBlock;
  *(_QWORD *)v52 = 3221225472;
  *(_QWORD *)&v52[8] = sub_1007BCEE4;
  *(_QWORD *)&v52[16] = &unk_102153AE8;
  *(_QWORD *)&v52[24] = a1;
  objc_msgSend(v29, "iterateAllAnchorKeyPathsWithBlock:", &__p);
  v30 = *(void **)(a1 + 136);
  __p = _NSConcreteStackBlock;
  *(_QWORD *)v52 = 3221225472;
  *(_QWORD *)&v52[8] = sub_1007BD7A8;
  *(_QWORD *)&v52[16] = &unk_102153AE8;
  *(_QWORD *)&v52[24] = a1;
  objc_msgSend(v30, "iterateAllAnchorKeyPathsWithBlock:", &__p);
  sub_100197040();
  if (sub_10019DF90() || (sub_100197040(), sub_100195F08()))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v31 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#authsync initializing sync store", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v48[0]) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#authsync initializing sync store", v48, v44);
      v41 = (void **)v40;
      sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)", "%s\n", v40);
      if (v41 != &__p)
        free(v41);
    }
    *(_QWORD *)(a1 + 1536) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLAuthSyncManager"));
    *(_QWORD *)(a1 + 1528) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLUsageSyncManager"));
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v32 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    sub_100197040();
    v33 = sub_100195F08();
    sub_100197040();
    v34 = sub_10019DF90();
    LODWORD(__p) = 67240448;
    HIDWORD(__p) = v33;
    *(_WORD *)v52 = 1026;
    *(_DWORD *)&v52[2] = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#authsync isWatch: %{public}d, isCompanion: %{public}d", (uint8_t *)&__p, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v35 = qword_1022A01D8;
    sub_100197040();
    v36 = sub_100195F08();
    sub_100197040();
    v37 = sub_10019DF90();
    v48[0] = 67240448;
    v48[1] = v36;
    v49 = 1026;
    v50 = v37;
    LODWORD(v44) = 14;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v35, 1, "#authsync isWatch: %{public}d, isCompanion: %{public}d", v48, v44);
    v39 = (void **)v38;
    sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)", "%s\n", v38);
    if (v39 != &__p)
      free(v39);
  }
  sub_1012B2C64();
}

void sub_1007E947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char **a13, _QWORD **a14, _QWORD **a15, char **a16, _QWORD **a17, _QWORD **a18, char **a19, char **a20,char **a21,char **a22,char **a23,uint64_t a24,_QWORD **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = *(_QWORD *)(v35 + 1560);
  *(_QWORD *)(v35 + 1560) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_1002A1C94(v35 + 1488);
  sub_1002A1C94(v35 + 1328);
  sub_100090AE4(v35 + 1112, *a13);
  STACK[0x2D0] = a31;
  sub_1007F8B88((void ***)&STACK[0x2D0]);
  sub_100261F44(a30);
  sub_1007F8B50(v35 + 976);
  if (*(char *)(v35 + 975) < 0)
    operator delete(*a12);
  sub_100008848(v35 + 912, *a14);
  sub_100008848(v35 + 888, *a15);
  sub_100090AE4(v35 + 864, *a16);
  sub_100008848(v35 + 840, *a17);
  sub_100008848(v35 + 816, *a18);
  sub_100090AE4(a35, *a19);
  sub_100090AE4(v35 + 752, *a20);
  sub_100090AE4(v35 + 728, *a21);
  sub_100090AE4(v35 + 704, *a22);
  sub_100090AE4(v35 + 680, *a23);
  sub_1002A1C94(a24);
  sub_1007F8B08(a26, *a25);
  sub_1002A1C94(a29);
  sub_1002A1C94(a27);
  sub_100261F44(a28);
  sub_1007F05A4((uint64_t *)(v36 + 32), 0);
  v40 = *v37;
  *v37 = 0;
  if (v40)
    sub_1006B3398((uint64_t)v37, v40);
  v41 = *(_QWORD *)(v35 + 216);
  *(_QWORD *)(v35 + 216) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(v35 + 208);
  *(_QWORD *)(v35 + 208) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD *)(v35 + 200);
  *(_QWORD *)(v35 + 200) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(v35 + 192);
  *(_QWORD *)(v35 + 192) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(v35 + 184);
  *(_QWORD *)(v35 + 184) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(v35 + 176);
  *(_QWORD *)(v35 + 176) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(v35 + 168);
  *(_QWORD *)(v35 + 168) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(v35 + 160);
  *(_QWORD *)(v35 + 160) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *(_QWORD *)(v35 + 152);
  *(_QWORD *)(v35 + 152) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  sub_1007ED9E4(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_1007E9958(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102154810;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1007E99D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1007E99F4(id a1, CLClientManagerStateTracker *a2)
{
  -[CLClientManagerStateTracker setLocationServicesEnabledStatus:](a2, "setLocationServicesEnabledStatus:", sub_10019CFA0());
}

id sub_1007E9A1C(uint64_t a1)
{
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(a1 + 32);
  result = objc_msgSend(*(id *)(v1 + 128), "BOOLForKey:defaultValue:", CFSTR("CLCM.AllowPromptRecording"), *(unsigned __int8 *)(v1 + 232));
  *(_BYTE *)(v1 + 232) = (_BYTE)result;
  return result;
}

void sub_1007E9A50(uint64_t a1)
{
  sub_1007E9A58(*(_QWORD *)(a1 + 32));
}

void sub_1007E9A58(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  id v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  int v32;
  void *v33;
  uint8_t buf[4];
  void *v35;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ResetTimer fired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v32) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "ResetTimer fired", &v32, 2);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onResetTimer()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v3 = objc_msgSend(*(id *)(a1 + 128), "arrayForKey:defaultValue:", CFSTR("ResetIdentifiers"), 0);
  v4 = v3;
  if (*(_BYTE *)(a1 + 1104))
  {
    *(_BYTE *)(a1 + 1104) = 0;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v35 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Reset registration and completion reporting is un-balanced. Completion not reported for clients: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v32 = 138412290;
      v33 = v4;
      LODWORD(v26) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Reset registration and completion reporting is un-balanced. Completion not reported for clients: %@", &v32, v26);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::onResetTimer()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    objc_msgSend(*(id *)(a1 + 128), "setArray:forKey:", 0, CFSTR("ResetIdentifiers"));
LABEL_13:
    objc_msgSend(*(id *)(a1 + 128), "setInt:forKey:", 0, CFSTR("ResetRetrialCount"));
    return;
  }
  if (!objc_msgSend(v3, "count"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Reset registration and completion reporting is balanced for all clients.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v32) = 0;
      LODWORD(v26) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Reset registration and completion reporting is balanced for all clients.", &v32, v26);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onResetTimer()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    goto LABEL_13;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#reset-retry completing pending reset.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v32) = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#reset-retry completing pending reset.", &v32, v26);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onResetTimer()", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v7 = sub_1007EF4CC(a1);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v8 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v28;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v4);
        v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v11);
        if ((objc_msgSend(v7, "containsObject:", v12) & 1) == 0)
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021545A8);
          v13 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v35 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#reset-retry - service with identifier: %@ never checked in to retry handling reset after crash", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021545A8);
            v32 = 138412290;
            v33 = v12;
            LODWORD(v26) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "#reset-retry - service with identifier: %@ never checked in to retry handling reset after crash", &v32, v26);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 0, "void CLClientManager::onResetTimer()", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v16 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      v9 = v16;
    }
    while (v16);
  }
  sub_1007DB688(a1);
}

void sub_1007EA1E4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLClientManager::onDarwinNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_1007F291C(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1007EA394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007EA3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLClientManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_1007EA54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007EA568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLClientManager::onRestrictionsChangedNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onRestrictionsChangedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onRestrictionsChangedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007F5BB4;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1007EA768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007EA788(uint64_t a1, int token)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t state64;
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 32);
  state64 = 0;
  notify_get_state(token, &state64);
  if (state64)
  {
    *(_BYTE *)(v2 + 1061) = 1;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#AuthPrompt screen locked", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#AuthPrompt screen locked", &v13, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_1007EABB4(v2, 0, 0);
  }
  else
  {
    *(_BYTE *)(v2 + 1059) = 1;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Trial period #reprompt capacitor charged", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Trial period #reprompt capacitor charged", &v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    *(_BYTE *)(v2 + 1061) = 0;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#AuthPrompt screen unlocked", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#AuthPrompt screen unlocked", &v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1007EABB4(uint64_t a1, int a2, void *a3)
{
  uint64_t v3;
  uint64_t *v7;
  const __CFString *v8;
  __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  __CFRunLoop *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD block[5];
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;

  v3 = *(_QWORD *)(a1 + 272);
  if (v3)
  {
    v7 = (uint64_t *)(a1 + 272);
    if (a3 && (objc_msgSend(a3, "isEqual:", *(_QWORD *)(v3 + 8)) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(*v7 + 8);
        *(_DWORD *)buf = 68289538;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2114;
        v24 = v17;
        v25 = 2114;
        v26 = a3;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt skip Teardown Inflight Prompt - actual and expected inflight client does not match\", \"ActualInflightClient\":%{public, location:escape_only}@, \"ExpectedInflightClient\":%{public, location:escape_only}@}", buf, 0x26u);
      }
    }
    else
    {
      v8 = CFSTR("TearDown SPI Invocation");
      if (a2 == 1)
        v8 = CFSTR("Squatting threshold(15 min) expired");
      if (a2)
        v9 = (__CFString *)v8;
      else
        v9 = CFSTR("ScreenLock enabled");
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(*v7 + 8);
        v12 = (void *)*(unsigned int *)*v7;
        *(_DWORD *)buf = 68289794;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2114;
        v24 = v11;
        v25 = 2050;
        v26 = v12;
        v27 = 2082;
        v28 = -[__CFString UTF8String](v9, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Teardown Inflight Prompt\", \"Client\":%{public, location:escape_only}@, \"PromptType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"Teardown Reason\":%{public, location:escape_only}s}", buf, 0x30u);
      }
      v13 = (unsigned int *)*v7;
      v14 = *(_QWORD *)(*v7 + 48);
      if (v14)
      {
        v15 = (__CFRunLoop *)sub_100193530();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1007F059C;
        block[3] = &unk_10212ECA0;
        block[4] = v14;
        CFRunLoopPerformBlock(v15, kCFRunLoopCommonModes, block);
        v13 = (unsigned int *)*v7;
      }
      sub_1002355A0(v13, (uint64_t)v9);
      sub_1007F05A4(v7, 0);
      *(_DWORD *)(a1 + 312) = 0;
    }
  }
}

void sub_1007EAE38(uint64_t a1, int token)
{
  uint64_t v2;
  uint64_t state;
  uint64_t v4;
  uint64_t state64;

  v2 = *(_QWORD *)(a1 + 32);
  state64 = 0;
  state = notify_get_state(token, &state64);
  v4 = state64;
  *(_BYTE *)(v2 + 1060) = state64 != 0;
  if (v4 == 1)
  {
    if (!*(_BYTE *)(v2 + 488))
    {
      sub_1007D2BE4(state, *(void **)(v2 + 480), v2 + 440);
      *(_BYTE *)(v2 + 488) = 1;
    }
    sub_1007EAEB0(v2);
    *(_BYTE *)(v2 + 1059) = 0;
  }
}

void sub_1007EAEB0(uint64_t a1)
{
  NSObject *v1;
  uint64_t *v2;
  char *v3;
  NSObject *v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  unsigned int *v13;
  uint64_t v14;
  std::string::size_type v15;
  NSObject *v16;
  unsigned int *v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t *v20;
  CLClientKeyPath *v21;
  CLClientManagerAuthorizationContext *v22;
  CLClientManagerAuthorizationContext *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  std::string *v27;
  __int128 v28;
  _BYTE *v29;
  NSString *v30;
  NSDate *v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  CFAbsoluteTime Current;
  NSObject *v39;
  NSObject *v40;
  const char *v41;
  void *v42;
  NSData *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  CLClientKeyPath *v55;
  CLClientManagerAuthorizationContext *v56;
  uint64_t v57;
  unsigned int v58;
  const char *v59;
  NSObject *v60;
  uint32_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  const char *v67;
  char *v68;
  BOOL v69;
  NSObject *v70;
  uint64_t v71;
  const char *v72;
  char *v73;
  const char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[7];
  void *v81[2];
  char v82;
  _BYTE v83[72];
  _WORD v84[8];
  std::string v85;
  void *__p[2];
  char v87;
  _BYTE v88[72];
  _BYTE buf[28];
  __int16 v90;
  std::string::size_type v91;

  sub_100197040();
  if (sub_100195F08())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Should never be executed in this context", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v85.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Should never be executed in this context", &v85, 2);
      v7 = (char *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v6);
LABEL_10:
      if (v7 != buf)
        free(v7);
      return;
    }
    return;
  }
  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v9 = "{\"msg%{public}.0s\":\"Dropping #provisional upgrade and #reprompt notification. Restrictions enabled\"}";
    v10 = v8;
    v11 = 18;
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 272))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v13 = *(unsigned int **)(a1 + 272);
      v14 = *((_QWORD *)v13 + 1);
      v15 = *v13;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v14;
      v90 = 2050;
      v91 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"We should not get springboard.homescreenunlocked events when we have inflight prompt authorization request\", \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v16 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v17 = *(unsigned int **)(a1 + 272);
      v18 = *((_QWORD *)v17 + 1);
      v19 = *v17;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v18;
      v90 = 2050;
      v91 = v19;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "We should not get springboard.homescreenunlocked events when we have inflight prompt authorization request", "{\"msg%{public}.0s\":\"We should not get springboard.homescreenunlocked events when we have inflight prompt authorization request\", \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
    }
    return;
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v20 = *(uint64_t **)(a1 + 264);
    if (v20)
    {
      if (*((char *)v20 + 23) < 0)
        v20 = (uint64_t *)*v20;
      v21 = +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
      v22 = sub_1000B9630(a1, (uint64_t)v21, &xmmword_101C17478);
      v23 = v22;
      if (!v22 || -[CLClientManagerAuthorizationContext registrationResult](v22, "registrationResult") != 8)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v24 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v21;
        v90 = 1026;
        LODWORD(v91) = -[CLClientManagerAuthorizationContext registrationResult](v23, "registrationResult");
        v9 = "{\"msg%{public}.0s\":\"Dropping #provisional authorization upgrade because target is no longer Provisionall"
             "y Always authorized\", \"Client\":%{public, location:escape_only}@, \"RegistrationResult\":%{public}d}";
        v10 = v24;
        v11 = 34;
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
        return;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v1 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v21;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Creating #provisional authorization upgrade notification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      if (!*(_QWORD *)(a1 + 272))
      {
        sub_1015A2E04(__p, "");
        sub_1007F5908((uint64_t)v88, 8, (uint64_t)v21, 0, (__int128 *)__p);
        sub_1007BDDB4(a1, (uint64_t)v21, 0, (uint64_t)v88, 0);
        sub_100235568((uint64_t)v88);
        if (v87 < 0)
          operator delete(__p[0]);
        return;
      }
      sub_101909F5C();
    }
    else
    {
      sub_101909DE8();
    }
    goto LABEL_151;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = &qword_1022A0000;
  v25 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#IncidentalPrompt presenting, transitioned to homescreen.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v85.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#IncidentalPrompt presenting, transitioned to homescreen.", &v85, 2);
    v73 = (char *)v72;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v72);
    if (v73 != buf)
      free(v73);
  }
  if (sub_1007C0FDC(a1, 0) || !*(_BYTE *)(a1 + 1059))
    return;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v26 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Trial period #reprompt capacitor fired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v85.__r_.__value_.__l.__data_) = 0;
    LODWORD(v76) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Trial period #reprompt capacitor fired", &v85, v76);
    v75 = (char *)v74;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v74);
    if (v75 != buf)
      free(v75);
  }
  sub_100584F4C(0, &v85);
  v27 = std::string::append(&v85, "locScoreInfoReport");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0)
    v29 = buf;
  else
    v29 = *(_BYTE **)buf;
  v30 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", v30))
  {
    v85.__r_.__value_.__r.__words[0] = 0;
    v31 = -[NSDictionary fileModificationDate](-[NSFileManager attributesOfItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "attributesOfItemAtPath:error:", v30, &v85), "fileModificationDate");
    if (v85.__r_.__value_.__r.__words[0])
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v32 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v85.__r_.__value_.__r.__words[0];
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not get modification date of #reprompt file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v33 = qword_1022A01D8;
      if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
        goto LABEL_73;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v85.__r_.__value_.__r.__words[0];
      v34 = "Could not get modification date of #reprompt file";
      v35 = "{\"msg%{public}.0s\":\"Could not get modification date of #reprompt file\", \"Error\":%{public, location:escape_only}@}";
      goto LABEL_71;
    }
    if (-[NSDate compare:](v31, "compare:", -[NSDate dateByAddingTimeInterval:](+[NSDate date](NSDate, "date"), "dateByAddingTimeInterval:", -432000.0)) == NSOrderedAscending)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v62 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_73;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v59 = "{\"msg%{public}.0s\":\"#reprompt data is over 5 days old.\"}";
      v60 = v62;
      v61 = 18;
    }
    else
    {
      v43 = +[NSData dataWithContentsOfFile:options:error:](NSData, "dataWithContentsOfFile:options:error:", v30, 8, &v85);
      if (!v43 || v85.__r_.__value_.__r.__words[0])
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v63 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2113;
          *(_QWORD *)&buf[20] = v43;
          v90 = 2114;
          v91 = v85.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not read checkpointed #reprompt data\", \"Data\":%{private, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v64 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          goto LABEL_73;
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2113;
        *(_QWORD *)&buf[20] = v43;
        v90 = 2114;
        v91 = v85.__r_.__value_.__r.__words[0];
        v34 = "Could not read checkpointed #reprompt data";
        v35 = "{\"msg%{public}.0s\":\"Could not read checkpointed #reprompt data\", \"Data\":%{private, location:escape_o"
              "nly}@, \"Error\":%{public, location:escape_only}@}";
        v36 = v64;
        v37 = 38;
        goto LABEL_72;
      }
      v45 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v43, &v85);
      if (!v45 || v85.__r_.__value_.__r.__words[0])
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v65 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v85.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not configure unarchiver with checkpointed #reprompt data\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v33 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          goto LABEL_73;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v85.__r_.__value_.__r.__words[0];
        v34 = "Could not configure unarchiver with checkpointed #reprompt data";
        v35 = "{\"msg%{public}.0s\":\"Could not configure unarchiver with checkpointed #reprompt data\", \"Error\":%{publ"
              "ic, location:escape_only}@}";
LABEL_71:
        v36 = v33;
        v37 = 28;
LABEL_72:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v34, v35, buf, v37);
        goto LABEL_73;
      }
      v79 = objc_opt_class(NSArray, v44);
      v78 = objc_opt_class(NSString, v46);
      v48 = objc_opt_class(NSDictionary, v47);
      v50 = objc_opt_class(NSData, v49);
      v52 = objc_opt_class(CLUsageReportCoordinate, v51);
      v54 = objc_msgSend(v45, "decodeObjectOfClasses:forKey:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v79, v78, v48, v50, v52, objc_opt_class(NSNumber, v53), 0), NSKeyedArchiveRootObjectKey);

      if (!v54)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v66 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "Could not unarchive checkpointed #reprompt data", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v84[0] = 0;
          LODWORD(v77) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Could not unarchive checkpointed #reprompt data", v84, v77);
          v68 = (char *)v67;
          sub_100512490("Generic", 1, 0, 0, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v67);
          if (v68 != buf)
            free(v68);
        }
        goto LABEL_73;
      }
      v1 = objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("ClientKey"));
      v55 = +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", v1);
      v56 = sub_1000B9630(a1, (uint64_t)v55, &xmmword_101C17478);
      v3 = (char *)v56;
      if (v56 && !-[CLClientManagerAuthorizationContext registrationResult](v56, "registrationResult"))
      {
        if (*(_BYTE *)(a1 + 280))
        {
          sub_101909C74();
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        v3 = "";
        sub_1015A2E04(v81, "");
        sub_1007F5908((uint64_t)v83, 6, (uint64_t)v55, 0, (__int128 *)v81);
        v69 = sub_1007BDDB4(a1, (uint64_t)v55, 0, (uint64_t)v83, (uint64_t)v54);
        sub_100235568((uint64_t)v83);
        if (v82 < 0)
          operator delete(v81[0]);
        if (v69)
        {
          if (qword_1022A01D0 == -1)
          {
LABEL_134:
            v70 = v2[59];
            if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              return;
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = v3;
            *(_WORD *)&buf[18] = 2114;
            *(_QWORD *)&buf[20] = v1;
            v9 = "{\"msg%{public}.0s\":\"Creating trial period #reprompt notification\", \"ClientKey\":%{public, location:escape_only}@}";
            v10 = v70;
            v11 = 28;
            goto LABEL_17;
          }
LABEL_152:
          dispatch_once(&qword_1022A01D0, &stru_102154528);
          goto LABEL_134;
        }
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v71 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
LABEL_73:
          -[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v30, 0);
          return;
        }
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v1;
        v59 = "{\"msg%{public}.0s\":\"#Warning Could not post #reprompt\", \"ClientKey\":%{public, location:escape_only}@}";
        v60 = v71;
        v61 = 28;
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v57 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_73;
        v58 = objc_msgSend(v3, "transientAwareRegistrationResult");
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v1;
        v90 = 1026;
        LODWORD(v91) = v58;
        v59 = "{\"msg%{public}.0s\":\"Dropping checkpointed #reprompt data because target is no longer Always authorized\""
              ", \"ClientKey\":%{public, location:escape_only}@, \"RegistrationResult\":%{public}d}";
        v60 = v57;
        v61 = 34;
      }
    }
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, v59, buf, v61);
    goto LABEL_73;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v85.__r_.__value_.__r.__words[0] = 0x410FA40000000000;
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)buf, "ClientRepromptAlwaysNotificationInterval", &v85);
  sub_100261F44((uint64_t)buf);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v39 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v85.__r_.__value_.__r.__words[0];
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Commencing #reprompt iteration\", \"Interval\":\"%{public}f\"}", buf, 0x1Cu);
  }
  if (*(double *)&v85.__r_.__value_.__l.__data_ >= 0.0)
  {
    v42 = *(void **)(a1 + 136);
    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3221225472;
    v80[2] = sub_1007F05EC;
    v80[3] = &unk_102154340;
    v80[4] = a1;
    *(CFAbsoluteTime *)&v80[5] = Current;
    v80[6] = v85.__r_.__value_.__r.__words[0];
    objc_msgSend(v42, "iterateAllAnchorKeyPathsWithBlock:", v80);
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v40 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Not iterating for #reprompt: disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v84[0] = 0;
    LODWORD(v76) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Not iterating for #reprompt: disabled", v84, v76);
    v7 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v41);
    goto LABEL_10;
  }
}

void sub_1007EC2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  sub_100235568((uint64_t)&a31);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1007EC334(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLClientManager::onDataProtectionManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007D4FA4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007EC4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007EC50C(uint64_t a1)
{
  return sub_1007C72C0(*(_QWORD *)(a1 + 32));
}

uint64_t *sub_1007EC514(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  std::istream::sentry::sentry(&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1007EC6C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1007EC694);
  }
  __cxa_rethrow();
}

void sub_1007EC72C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1007EC740(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(const char **)(v1 + 264);
    if (v3)
    {
      if (v3[23] < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "nobody";
    }
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Ending #provisional intermediation reign guarantee due to staleness\", \"king\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  v4 = *(_QWORD *)(v1 + 288);
  if (v4)
  {
    (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, 0);

    *(_QWORD *)(v1 + 288) = 0;
  }
}

void sub_1007EC860(uint64_t a1)
{
  void **v1;
  void *v3;
  void *v4;
  id v5;
  _Unwind_Exception *v6;
  _QWORD v7[6];
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(__n128 *, __n128 *);
  void (*v13)(uint64_t);
  void *v14;
  _QWORD v15[3];
  _QWORD v16[5];
  void **v17;

  if (*(_QWORD *)(a1 + 336))
  {
    v6 = (_Unwind_Exception *)sub_10190A0D0();
    _Block_object_dispose(&v9, 8);
    v17 = v1;
    sub_1007F8ED4(&v17);
    _Unwind_Resume(v6);
  }
  v3 = *(void **)(a1 + 136);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1007EDA58;
  v16[3] = &unk_102153AE8;
  v16[4] = a1;
  objc_msgSend(v3, "iterateAllAnchorKeyPathsWithBlock:", v16);
  v9 = 0;
  v10 = &v9;
  v11 = 0x4812000000;
  v12 = sub_1007EDA74;
  v13 = sub_1007EDA98;
  v14 = &unk_102080316;
  memset(v15, 0, sizeof(v15));
  v4 = *(void **)(a1 + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007EDAC0;
  v8[3] = &unk_102153C10;
  v8[4] = &v9;
  v8[5] = a1;
  objc_msgSend(v4, "iterateAllAnchorKeyPathsWithBlock:", v8);
  if (v10[6] != v10[7])
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
    *(_QWORD *)(a1 + 336) = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1007EE028;
    v7[3] = &unk_1021542F8;
    v7[4] = &v9;
    v7[5] = a1;
    objc_msgSend(v5, "setHandler:", v7);
    objc_msgSend(*(id *)(a1 + 336), "setNextFireDelay:", 10.0);
  }
  _Block_object_dispose(&v9, 8);
  v17 = (void **)v15;
  sub_1007F8ED4(&v17);
}

id sub_1007EC9D4(id *a1)
{
  NSObject *v2;
  CLHRequestArchive *v3;
  std::string *v4;
  __int128 v5;
  uint8_t *v6;
  id *v7;
  double Current;
  id v9;
  const char *v11;
  uint8_t *v12;
  std::string v13;
  uint8_t buf[16];
  int64_t v15;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resetting LocationConsumptionScoreInfoArchive", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    LOWORD(v13.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Resetting LocationConsumptionScoreInfoArchive", &v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::reloadLocationConsumptionScoreInfoArchive()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }

  v3 = [CLHRequestArchive alloc];
  sub_100584F4C(0, &v13);
  v4 = std::string::append(&v13, "locScoreInfo/");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)buf = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v15 >= 0)
    v6 = buf;
  else
    v6 = *(uint8_t **)buf;
  a1[60] = -[CLHRequestArchive initWithDirectory:itemCountThresholdForAutoCleanUp:](v3, "initWithDirectory:itemCountThresholdForAutoCleanUp:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), 150);
  if (SHIBYTE(v15) < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  objc_msgSend(a1[60], "setRotationInterval:", -1.0);
  v7 = a1 + 60;
  sub_1007D3250((uint64_t)a1, (uint64_t)a1[60], (uint64_t)(a1 + 55));
  a1[62] = objc_msgSend(objc_msgSend(a1[4], "vendor"), "proxyForService:forClient:", CFSTR("CLRoutineMonitor"), CFSTR("CLClientManager"));
  Current = CFAbsoluteTimeGetCurrent();
  v9 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
  objc_msgSend(v9, "setClientKey:", CFSTR("com.apple.locationd.all-location-clients-stop"));
  objc_msgSend(v9, "setStopTime:", Current);
  objc_msgSend(v9, "setScore:", 0);
  return objc_msgSend(*v7, "writeSecondaryObject:toField:", v9, 1);
}

void sub_1007ECCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007ECCE8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  const char *v4;
  uint8_t *v5;
  _QWORD handler[5];
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering coreanalytics activity", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Registering coreanalytics activity", v7, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::registerAnalyticsCollectActivity()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1007F3818;
  handler[3] = &unk_102144B48;
  handler[4] = v3;
  xpc_activity_register("com.apple.locationd.CLClientManager.coreanalytics", XPC_ACTIVITY_CHECK_IN, handler);
}

_BYTE *sub_1007ECED8(uint64_t a1)
{
  return sub_1007ECEE0(*(_QWORD *)(a1 + 32));
}

_BYTE *sub_1007ECEE0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void **v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(void **)(a1 + 136);
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_1007F19C8;
  v9 = &unk_102154360;
  v10 = a1;
  LOBYTE(v11) = 1;
  objc_msgSend(v2, "iterateAllAnchorKeyPathsWithBlock:", &v6);
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBTLEFenceManager"));
  v4 = *(void **)(a1 + 136);
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_1007BD1C8;
  v9 = &unk_102153BE8;
  v10 = (uint64_t)v3;
  v11 = a1;
  objc_msgSend(v4, "iterateAllAnchorKeyPathsWithBlock:", &v6);
  sub_1007BD58C(a1);
  sub_1007EE080(a1, 0);
  return sub_10019DBAC((_BYTE *)a1);
}

void sub_1007ECFB0(uint64_t a1, CLConnection **a2, CLConnectionMessage **a3)
{
  uint64_t v4;
  CLConnection *v5;
  CLConnectionMessage *v6;
  CLConnectionMessage *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  CLConnectionMessage *v12[2];
  _QWORD v13[6];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  *a2 = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007ED09C;
  v13[3] = &unk_102143528;
  v13[4] = v4;
  v13[5] = v5;
  CLConnection::setDisconnectionHandler(v5, v13);
  v6 = *a3;
  v7 = a3[1];
  v12[0] = v6;
  v12[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)((char *)v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_1000B7D74(v4, v5, v12);
  if (v7)
  {
    v10 = (unint64_t *)((char *)v7 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v7 + 16))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
  }
}

void sub_1007ED088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007ED09C(uint64_t a1)
{
  sub_100209F54(*(_QWORD *)(a1 + 32), *(CLConnection **)(a1 + 40));
}

void sub_1007ED0A8(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLClientManager::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007F2B2C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007ED260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007ED280(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLClientManager::onWifiServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007F2B84(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007ED438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007ED458(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLClientManager::onBluetoothServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onBluetoothServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onBluetoothServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007F32F8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007ED610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007ED630(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLClientManager::onStatusBarNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onStatusBarNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onStatusBarNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007F2D40(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007ED7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_1007ED808(uint64_t a1)
{
  return sub_1007E62D8(*(_QWORD *)(a1 + 32), 14400.0);
}

void sub_1007ED818(id a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAuthorizationStatusChangedNotification, 0, 0, 0);
}

id sub_1007ED844(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#liveActivity invoking update handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#liveActivity invoking update handler", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 32), "handleLiveActivityUpdate:", a2);
}

uint64_t sub_1007ED9E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102154810;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1007F8C14(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

id sub_1007EDA58(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "removeValueForKey:atKeyPath:", CFSTR("InUseLevel"), a2);
}

__n128 sub_1007EDA74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1007EDA98(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_1007F8ED4(&v1);
}

void sub_1007EDAC0(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t *v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  std::string v26;
  void *v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string __p;
  _QWORD v34[2];
  uint64_t v35;
  _BYTE v36[128];
  uint64_t buf;
  __int16 v38;
  const char *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;

  v4 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(v4 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("BackgroundLocationTimeStarted"), a2, 0.0);
  v6 = v5;
  objc_msgSend(*(id *)(v4 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("BackgroundLocationTimeStopped"), a2, 0.0);
  if (v6 <= v7)
  {
    v11 = objc_msgSend(objc_msgSend(*(id *)(v4 + 136), "dictionaryForKey:atKeyPath:defaultValue:", CFSTR("DIC"), a2, 0), "objectForKey:", objc_msgSend(&off_10221B630, "stringValue"));
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v30;
LABEL_10:
      v14 = 0;
      while (1)
      {
        if (*(_QWORD *)v30 != v13)
          objc_enumerationMutation(v11);
        v15 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v14);
        if (objc_msgSend(objc_msgSend(objc_msgSend(v11, "objectForKeyedSubscript:", v15), "objectForKey:", CFSTR("IsSessionActive")), "BOOLValue"))break;
        if (v12 == (id)++v14)
        {
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
          if (v12)
            goto LABEL_10;
          goto LABEL_16;
        }
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = objc_msgSend(v15, "UTF8String");
        buf = 68289538;
        v38 = 2082;
        v39 = "";
        v40 = 2114;
        v41 = a2;
        v42 = 2082;
        v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Active BackgroundActivitySession, taking temporary crash-grace OnGoingTxn CLInUseAssertion\", \"clientKeyPath\":%{public, location:escape_only}@, \"DicKey\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      }
      v19 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
      v20 = *(_QWORD **)(v4 + 376);
      if (a2)
      {
        objc_msgSend(a2, "cppClientKey");
      }
      else
      {
        v27[0] = 0;
        v27[1] = 0;
        v28 = 0;
      }
      sub_1015A2E04(&v26, "crash-grace-OGT");
      sub_1001FA3D8(&v26, v20, (uint64_t)v27, 4, &buf);
      v24 = v19[7];
      if (v24 >= v19[8])
      {
        v25 = sub_1007F8F44(v19 + 6, (__int128 *)&buf);
      }
      else
      {
        sub_1001FA140((_OWORD *)v19[7], (__int128 *)&buf);
        v25 = v24 + 80;
        v19[7] = v24 + 80;
      }
      v19[7] = v25;
      sub_100C1EE6C(&buf);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28) < 0)
      {
        v23 = v27[0];
        goto LABEL_42;
      }
    }
    else
    {
LABEL_16:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289282;
        v38 = 2082;
        v39 = "";
        v40 = 2114;
        v41 = a2;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No BackgroundLocation or BackgroundActivitySession found. No crash-grace CLInUseAssertion\", \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289282;
      v38 = 2082;
      v39 = "";
      v40 = 2114;
      v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Ongoing background location, taking temporary crash-grace DUE CLInUseAssertion\", \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
    v9 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
    v10 = *(_QWORD **)(v4 + 376);
    if (a2)
    {
      objc_msgSend(a2, "cppClientKey");
    }
    else
    {
      v34[0] = 0;
      v34[1] = 0;
      v35 = 0;
    }
    sub_1015A2E04(&__p, "crash-grace-DUE");
    sub_1001FA3D8(&__p, v10, (uint64_t)v34, 5, &buf);
    v21 = v9[7];
    if (v21 >= v9[8])
    {
      v22 = sub_1007F8F44(v9 + 6, (__int128 *)&buf);
    }
    else
    {
      sub_1001FA140((_OWORD *)v9[7], (__int128 *)&buf);
      v22 = v21 + 80;
      v9[7] = v21 + 80;
    }
    v9[7] = v22;
    sub_100C1EE6C(&buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35) < 0)
    {
      v23 = (void *)v34[0];
LABEL_42:
      operator delete(v23);
    }
  }
}

void sub_1007EDF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  sub_100C1EE6C(v40 - 208);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_1007EE028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(v2 + 48);
  for (i = *(_QWORD *)(v2 + 56); i != v4; i = sub_100C1EE6C(i - 80))
    ;
  *(_QWORD *)(v2 + 56) = v4;
  objc_msgSend(*(id *)(v1 + 336), "invalidate");

  *(_QWORD *)(v1 + 336) = 0;
}

void sub_1007EE080(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  uint8_t *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  _QWORD v22[5];
  _DWORD v23[2];
  __int16 v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  int v33;

  v4 = objc_msgSend(*(id *)(a1 + 120), "locationRestricted");
  v5 = sub_1000A42B0();
  v6 = v5;
  v7 = sub_1007F166C(v5, a2);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    v29 = v6 != 0;
    v30 = 1024;
    v31 = v7;
    v32 = 1024;
    v33 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Location services available %d; parental controls enabled %d (refresh %d)",
      buf,
      0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v23[0] = 67109632;
    v23[1] = v6 != 0;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Location services available %d; parental controls enabled %d (refresh %d)",
      v23,
      20,
      v21);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkRestrictions(BOOL)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (v6)
    v9 = v7;
  else
    v9 = 1;
  objc_msgSend(*(id *)(a1 + 120), "setLocationRestricted:", v9);
  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#warning location is restricted; freezing client states",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v23[0]) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#warning location is restricted; freezing client states",
        v23,
        v20);
LABEL_39:
      v17 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkRestrictions(BOOL)", "%s\n", v11);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "location is not restricted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v23[0]) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "location is not restricted", v23, v20);
      goto LABEL_39;
    }
  }
  if (a2 && v4 != objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Applying #restrictions change to all clients", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v23[0]) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Applying #restrictions change to all clients", v23, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkRestrictions(BOOL)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v14 = *(void **)(a1 + 136);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1007F1954;
    v22[3] = &unk_102153AE8;
    v22[4] = a1;
    objc_msgSend(v14, "iterateAllAnchorKeyPathsWithBlock:", v22);
  }
}

uint64_t sub_1007EE614(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *j;
  void *v15;
  id v16;
  uint64_t v17;
  void *k;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void **v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];

  *(_QWORD *)a1 = off_102154128;
  *(_QWORD *)(a1 + 112) = &off_102154210;
  *(_QWORD *)(*(_QWORD *)(a1 + 1016) + 8) = 0;
  sub_100932B84(*(_QWORD *)(a1 + 376));

  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  objc_msgSend(*(id *)(a1 + 336), "invalidate");

  *(_QWORD *)(a1 + 336) = 0;
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 672));

  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  objc_msgSend(*(id *)(a1 + 344), "invalidate");

  *(_QWORD *)(a1 + 344) = 0;
  objc_msgSend(*(id *)(a1 + 352), "invalidate");

  *(_QWORD *)(a1 + 352) = 0;
  objc_msgSend(*(id *)(a1 + 256), "invalidate");

  *(_QWORD *)(a1 + 256) = 0;
  objc_msgSend(*(id *)(a1 + 224), "invalidate");

  *(_QWORD *)(a1 + 224) = 0;
  objc_msgSend(*(id *)(a1 + 408), "invalidate");

  *(_QWORD *)(a1 + 408) = 0;
  objc_msgSend(*(id *)(a1 + 400), "invalidate");

  *(_QWORD *)(a1 + 400) = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v2 = *(void **)(a1 + 576);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v62 != v4)
          objc_enumerationMutation(v2);
        v6 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
        objc_msgSend(objc_msgSend(*(id *)(a1 + 576), "objectForKeyedSubscript:", v6), "invalidate");

        objc_msgSend(*(id *)(a1 + 576), "setObject:forKeyedSubscript:", 0, v6);
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
    }
    while (v3);
  }
  v7 = *(_QWORD **)(a1 + 592);
  if (v7 != (_QWORD *)(a1 + 600))
  {
    do
    {
      sub_1007F9198(v7 + 7, 0);
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      v7 = v9;
    }
    while (v9 != (_QWORD *)(a1 + 600));
  }
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v11 = *(void **)(a1 + 392);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v58;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(_QWORD *)v58 != v13)
          objc_enumerationMutation(v11);
        dispatch_source_cancel(*(dispatch_source_t *)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)j));
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
    }
    while (v12);
  }

  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  objc_msgSend(*(id *)(a1 + 368), "invalidate");

  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v15 = *(void **)(a1 + 432);
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v54;
    do
    {
      for (k = 0; k != v16; k = (char *)k + 1)
      {
        if (*(_QWORD *)v54 != v17)
          objc_enumerationMutation(v15);
        objc_msgSend(objc_msgSend(*(id *)(a1 + 432), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)k)), "end");
      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
    }
    while (v16);
  }

  *(_QWORD *)(a1 + 432) = 0;
  objc_msgSend(*(id *)(a1 + 296), "invalidate");

  *(_QWORD *)(a1 + 296) = 0;
  if (*(_QWORD *)(a1 + 248))
  {
    sub_10190A244(v19, v20, v21, v22, v23, v24, v25, v26, v49, v50, v51, v52, v53, *((uint64_t *)&v53 + 1), v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v56,
      *((uint64_t *)&v56 + 1),
      v57,
      *((uint64_t *)&v57 + 1),
      v58,
      *((uint64_t *)&v58 + 1));
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.mm", 2434, "~CLClientManager");
    __break(1u);
  }
  v27 = *(_DWORD *)(a1 + 1064);
  if (v27)
    notify_cancel(v27);
  v28 = *(_DWORD *)(a1 + 1068);
  if (v28)
    notify_cancel(v28);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, CFSTR("com.apple.locationd/Restrictions"), 0);
  v30 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);

  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  sub_1007F8BC8(a1 + 1032, *(_QWORD **)(a1 + 1032));
  objc_msgSend(*(id *)(a1 + 1544), "stopMonitoringCapabilityChangeForClient:", CLISP_ME_TOKEN);

  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1552) = 0;

  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1088) = 0;

  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;

  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 120) = 0;

  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 480) = 0;

  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 544) = 0;

  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  objc_msgSend(*(id *)(a1 + 144), "invalidate");

  *(_QWORD *)(a1 + 144) = 0;
  objc_msgSend(*(id *)(a1 + 136), "persist");

  *(_QWORD *)(a1 + 136) = 0;
  v37 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  sub_1002A1C94(a1 + 1488);
  sub_1002A1C94(a1 + 1328);
  sub_100090AE4(a1 + 1112, *(char **)(a1 + 1120));
  v65 = (void **)(a1 + 1032);
  sub_1007F8B88(&v65);
  sub_100261F44(a1 + 1016);
  sub_1007F8B50(a1 + 976);
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  sub_100008848(a1 + 912, *(_QWORD **)(a1 + 920));
  sub_100008848(a1 + 888, *(_QWORD **)(a1 + 896));
  sub_100090AE4(a1 + 864, *(char **)(a1 + 872));
  sub_100008848(a1 + 840, *(_QWORD **)(a1 + 848));
  sub_100008848(a1 + 816, *(_QWORD **)(a1 + 824));
  sub_100090AE4(a1 + 776, *(char **)(a1 + 784));
  sub_100090AE4(a1 + 752, *(char **)(a1 + 760));
  sub_100090AE4(a1 + 728, *(char **)(a1 + 736));
  sub_100090AE4(a1 + 704, *(char **)(a1 + 712));
  sub_100090AE4(a1 + 680, *(char **)(a1 + 688));
  sub_1002A1C94(a1 + 616);
  sub_1007F8B08(a1 + 592, *(_QWORD **)(a1 + 600));
  sub_1002A1C94(a1 + 504);
  sub_1002A1C94(a1 + 440);
  sub_100261F44(a1 + 376);
  sub_1007F05A4((uint64_t *)(a1 + 272), 0);
  v38 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v38)
    sub_1006B3398(a1 + 264, v38);
  v39 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  sub_1007ED9E4(a1);
  return a1;
}

void sub_1007EEE00(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007EEE3C(uint64_t a1)
{
  return sub_1007EE614(a1 - 112);
}

void sub_1007EEE44(uint64_t a1)
{
  sub_1007EE614(a1);
  operator delete();
}

void sub_1007EEE68(uint64_t a1)
{
  sub_1007EE614(a1 - 112);
  operator delete();
}

const __CFString *sub_1007EEE90(__CFString *filePath)
{
  const __CFURL *v2;
  const __CFURL *v3;
  CFBundleRef v4;
  __CFBundle *v5;
  uint64_t v6;
  const __CFString *v7;
  const __CFString *v8;
  NSObject *v9;
  _BYTE *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  _BYTE buf[12];
  char v23;
  int v24;
  _BYTE *v25;
  _BYTE __p[12];
  char v27;

  if (!filePath)
    return 0;
  v2 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, filePath, kCFURLPOSIXPathStyle, 1u);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFBundleCreate(kCFAllocatorDefault, v2);
  if (v4)
  {
    v5 = v4;
    v6 = sub_1001AC584();
    v7 = (const __CFString *)_kCFBundleDisplayNameKey;
    v8 = sub_1001AC5C4(v6, v5, _kCFBundleDisplayNameKey, 0);
    if (!v8)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1001A486C(v7, (uint64_t)__p);
        v10 = v27 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning could not get localized string '%{public}s'!", buf, 0xCu);
        if (v27 < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v15 = qword_1022A01D8;
        sub_1001A486C(v7, (uint64_t)buf);
        if (v23 >= 0)
          v16 = buf;
        else
          v16 = *(_BYTE **)buf;
        v24 = 136446210;
        v25 = v16;
        v17 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 0, "#warning could not get localized string '%{public}s'!", &v24, 12);
        if (v23 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "CFStringRef _copyDisplayNameFromBundlePath(CFStringRef)", "%s\n", v17);
        if (v17 != __p)
          free(v17);
      }
      v11 = sub_1001AC584();
      v8 = sub_1001AC5C4(v11, v5, kCFBundleNameKey, 0);
      if (!v8)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v12 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v13 = -[__CFString UTF8String](filePath, "UTF8String");
          *(_DWORD *)__p = 136446210;
          *(_QWORD *)&__p[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.",
            __p,
            0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v18 = qword_1022A01D8;
          v19 = -[__CFString UTF8String](filePath, "UTF8String");
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v19;
          LODWORD(v21) = 12;
          v20 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 17, "could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.",
                          buf,
                          v21);
          sub_100512490("Generic", 1, 0, 0, "CFStringRef _copyDisplayNameFromBundlePath(CFStringRef)", "%s\n", v20);
          if (v20 != __p)
            free(v20);
        }
        v8 = 0;
      }
    }
    CFRelease(v5);
  }
  else
  {
    v8 = 0;
  }
  CFRelease(v3);
  return v8;
}

void sub_1007EF2B8(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;
  _QWORD handler[5];

  if (!*(_QWORD *)(a1 + 664))
    *(_QWORD *)(a1 + 664) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLClientManager.unsubscribeGrace");
  v2 = *(NSObject **)(a1 + 672);
  if (v2)
  {
    v3 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 656) * 1000000000.0));
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(*(double *)(a1 + 656) * 0.5 * 1000000000.0));
  }
  else
  {
    v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
    *(_QWORD *)(a1 + 672) = v4;
    v5 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 656) * 1000000000.0));
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(*(double *)(a1 + 656) * 0.5 * 1000000000.0));
    v6 = *(NSObject **)(a1 + 672);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1007EF40C;
    handler[3] = &unk_10212ECA0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 672));
  }
}

void sub_1007EF40C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);

  *(_QWORD *)(v1 + 664) = 0;
}

void sub_1007EF434()
{
  CLOSTransaction *v0;
  dispatch_time_t v1;
  _QWORD block[5];

  v0 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLClientManager.privacyReset");
  v1 = dispatch_time(0, 300000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007EF4C4;
  block[3] = &unk_10212BB58;
  block[4] = v0;
  dispatch_after(v1, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1007EF4C4(uint64_t a1)
{

}

id sub_1007EF4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  NSObject *v8;
  id v10;
  _QWORD *v11;
  void **v12;
  NSObject *v13;
  void **v14;
  void **v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  void **v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  void **v30;
  uint8_t buf[4];
  _BYTE v32[14];
  __int16 v33;
  id v34;

  v3 = *(_QWORD *)(a1 + 64);
  v1 = a1 + 64;
  v2 = v3;
  if (!v3)
    goto LABEL_11;
  v4 = v1;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < 0;
    if (v5 >= 0)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 != v1 && *(int *)(v4 + 32) <= 0 && *(_QWORD *)(v4 + 56))
  {
    v10 = objc_alloc_init((Class)NSMutableSet);
    v11 = *(_QWORD **)(v4 + 40);
    if (v11 != (_QWORD *)(v4 + 48))
    {
      do
      {
        if (*((char *)v11 + 63) < 0)
        {
          sub_100115CE4(__p, (void *)v11[5], v11[6]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v11 + 5);
          v28 = v11[7];
        }
        if (SHIBYTE(v28) < 0)
        {
          if (!__p[1])
          {
LABEL_43:
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v18 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)v32 = 0;
              *(_WORD *)&v32[4] = 2082;
              *(_QWORD *)&v32[6] = "";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Found registered client for kNotificationReset with empty resetIdentifier\"}", buf, 0x12u);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
            }
            v19 = qword_1022A01D8;
            if (os_signpost_enabled((os_log_t)qword_1022A01D8))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)v32 = 0;
              *(_WORD *)&v32[4] = 2082;
              *(_QWORD *)&v32[6] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Found registered client for kNotificationReset with empty resetIdentifier", "{\"msg%{public}.0s\":\"Found registered client for kNotificationReset with empty resetIdentifier\"}", buf, 0x12u);
            }
            goto LABEL_54;
          }
          v12 = (void **)__p[0];
        }
        else
        {
          if (!HIBYTE(v28))
            goto LABEL_43;
          v12 = __p;
        }
        if (objc_msgSend(&off_102220510, "containsObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v13 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            if (v28 >= 0)
              v14 = __p;
            else
              v14 = (void **)__p[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)v32 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Skip un-tracked resetIdentifier: %s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            if (v28 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v29 = 136315138;
            v30 = v15;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Skip un-tracked resetIdentifier: %s", (const char *)&v29);
            v17 = (uint8_t *)v16;
            sub_100512490("Generic", 1, 0, 2, "NSArray *CLClientManager::resetIdentifiersForRegisteredClients()", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
        }
        else
        {
          if (v28 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          objc_msgSend(v10, "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
        }
LABEL_54:
        if (SHIBYTE(v28) < 0)
          operator delete(__p[0]);
        v21 = (_QWORD *)v11[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v11[2];
            v23 = *v22 == (_QWORD)v11;
            v11 = v22;
          }
          while (!v23);
        }
        v11 = v22;
      }
      while (v22 != (_QWORD *)(v4 + 48));
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v24 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v32 = 0;
      *(_WORD *)&v32[4] = 2082;
      *(_QWORD *)&v32[6] = "";
      v33 = 2114;
      v34 = v10;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetched reset-identifiers\", \"ResetIdentifiers\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return objc_msgSend(v10, "allObjects");
  }
  else
  {
LABEL_11:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "No registered clients for kNotificationReset.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "No registered clients for kNotificationReset.", __p, 2);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "NSArray *CLClientManager::resetIdentifiersForRegisteredClients()", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    return 0;
  }
}

void sub_1007EFAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007EFAFC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v5;
  __CFString *v6;
  NSObject *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  const char *v12;
  char *v13;
  __CFString *v14;
  uint64_t v15;
  int v16;
  id v17;
  __int16 v18;
  char *v19;
  _BYTE buf[12];
  __int16 v21;
  char *v22;
  char v23;

  v5 = sub_100195B0C(a1, a2);
  v14 = 0;
  v15 = 0;
  sub_100195BD4(a3, &v15, &v14);
  if ((objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", v15, v5) & 1) == 0)
  {
    v6 = v14;
    if ((objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", v14, v5) & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", v6, v5, 14406267.0);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = off_102153B38[a3];
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v5;
        v21 = 2080;
        v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Service: client, %@, type, %s, marked as used", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v11 = off_102153B38[a3];
        v16 = 138412546;
        v17 = v5;
        v18 = 2080;
        v19 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Service: client, %@, type, %s, marked as used", &v16, 22);
        v13 = (char *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markClientServiceUsed(CLClientKeyPath *, CLClientServiceType)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
  }
  if (!_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync")
    || a3 <= 0xA && ((1 << a3) & 0x430) != 0)
  {
    v9 = (char *)objc_msgSend(objc_msgSend(v5, "legacyClientKey"), "UTF8String");
    if (v9)
      v10 = v9;
    else
      v10 = "";
    sub_1015A2E04(buf, v10);
    sub_10019DC1C(a1, buf);
    if (v23 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_1007EFDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007EFDD8(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 136);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007EFE30;
  v3[3] = &unk_102153AE8;
  v3[4] = a1;
  return objc_msgSend(v1, "iterateAllAnchorKeyPathsWithBlock:", v3);
}

uint64_t sub_1007EFE30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  double Current;

  v3 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  do
  {
    v5 = qword_101BC1D90[v3];
    result = _os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync");
    if ((_DWORD)result)
    {
      if (v5 > 0xA || ((1 << v5) & 0x430) == 0)
        break;
    }
    Current = CFAbsoluteTimeGetCurrent();
    result = sub_100194D94(v4, a2, v5, 0, 0, 1, Current);
    ++v3;
  }
  while (v3 != 11);
  return result;
}

id sub_1007EFEE8(uint64_t a1, uint64_t a2)
{
  id v3;
  id result;
  NSObject *v5;
  unsigned int i;
  uint64_t v7;
  double Current;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v3, "isValidCKP");
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9[0] = 68289282;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"clearing regions for client\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v9, 0x1Cu);
    }
    for (i = 0; i != 4; ++i)
    {
      v7 = sub_1007BD564(i);
      Current = CFAbsoluteTimeGetCurrent();
      result = (id)sub_100194D94(a1, (uint64_t)v3, v7, 0, 0, 0, Current);
    }
  }
  return result;
}

id sub_1007F0028(uint64_t a1, uint64_t a2)
{
  id v3;
  id result;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v3, "isValidCKP");
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2114;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"clearing significant location change for client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x1Cu);
    }
    return objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("SignificantTimeStarted"), v3);
  }
  return result;
}

void sub_1007F0144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  _BYTE v20[32];
  double v21;
  __int128 v22;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = TMGetRTCResetCount();
  objc_msgSend(*(id *)(v4 + 136), "doubleForKey:atKeyPath:defaultValue:", CFSTR("AuthorizationRegisterTime"), a2, -1.0);
  v7 = v6;
  if ((objc_msgSend(*(id *)(v4 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), a2, 0) & 1) != 0)
  {
    if (v7 == -1.0)
      return;
  }
  else
  {
    if (objc_msgSend(*(id *)(v4 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("SupportedAuthorizationMask"), a2, 0))v8 = v7 == -1.0;
    else
      v8 = 1;
    if (v8)
      return;
  }
  v9 = TMGetKernelMonotonicClock();
  if (v9 < v7)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      goto LABEL_27;
    v19 = 68289794;
    *(_WORD *)v20 = 2082;
    *(_QWORD *)&v20[2] = "";
    *(_WORD *)&v20[10] = 2114;
    *(_QWORD *)&v20[12] = a2;
    *(_WORD *)&v20[20] = 2050;
    *(double *)&v20[22] = v9;
    *(_WORD *)&v20[30] = 2050;
    v21 = v7;
    v11 = "{\"msg%{public}.0s\":\"#warning #appclip entry has TMMonotonicClock registration time in the future??\", \"Cli"
          "ent\":%{public, location:escape_only}@, \"now\":\"%{public}f\", \"timeGivenAuth\":\"%{public}f\"}";
    v12 = v10;
    v13 = OS_LOG_TYPE_INFO;
    v14 = 48;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v19, v14);
LABEL_27:
    objc_msgSend(*(id *)(a1 + 32), "addObject:", a2, v19, *(_OWORD *)v20, *(_OWORD *)&v20[16], *(_QWORD *)&v21, v22);
    return;
  }
  if (v5)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v19 = 68289282;
      *(_WORD *)v20 = 2082;
      *(_QWORD *)&v20[2] = "";
      *(_WORD *)&v20[10] = 1026;
      *(_DWORD *)&v20[12] = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#appclip detected RTC reset count > 1\", \"rtcResetCount\":%{public}u}", (uint8_t *)&v19, 0x18u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v16 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v19 = 68289282;
      *(_WORD *)v20 = 2082;
      *(_QWORD *)&v20[2] = "";
      *(_WORD *)&v20[10] = 1026;
      *(_DWORD *)&v20[12] = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#appclip detected RTC reset count > 1", "{\"msg%{public}.0s\":\"#appclip detected RTC reset count > 1\", \"rtcResetCount\":%{public}u}", (uint8_t *)&v19, 0x18u);
    }
    goto LABEL_27;
  }
  if (v9 - v7 > *(double *)(a1 + 48))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      goto LABEL_27;
    v19 = 68290050;
    *(_WORD *)v20 = 2082;
    *(_QWORD *)&v20[2] = "";
    *(_WORD *)&v20[10] = 2114;
    *(_QWORD *)&v20[12] = a2;
    *(_WORD *)&v20[20] = 2050;
    *(double *)&v20[22] = v9;
    *(_WORD *)&v20[30] = 2050;
    v21 = v7;
    LOWORD(v22) = 2050;
    *(double *)((char *)&v22 + 2) = v9 - v7;
    v11 = "{\"msg%{public}.0s\":\"#appclip client authorization has gone on long enough! PURGE!\", \"Client\":%{public, l"
          "ocation:escape_only}@, \"now\":\"%{public}f\", \"timeGivenAuth\":\"%{public}f\", \"delta\":\"%{public}f\"}";
    v12 = v17;
    v13 = OS_LOG_TYPE_DEBUG;
    v14 = 58;
    goto LABEL_13;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v18 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v19 = 68289794;
    *(_WORD *)v20 = 2082;
    *(_QWORD *)&v20[2] = "";
    *(_WORD *)&v20[10] = 2114;
    *(_QWORD *)&v20[12] = a2;
    *(_WORD *)&v20[20] = 2050;
    *(double *)&v20[22] = v9;
    *(_WORD *)&v20[30] = 2050;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#appclip client is spared from the PURGE... for now\", \"Client\":%{public, location:escape_only}@, \"now\":\"%{public}f\", \"timeGivenAuth\":\"%{public}f\"}", (uint8_t *)&v19, 0x30u);
  }
}

uint64_t sub_1007F059C(uint64_t a1)
{
  return CFUserNotificationCancel(*(CFUserNotificationRef *)(a1 + 32));
}

uint64_t sub_1007F05A4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100235568(result);
    operator delete();
  }
  return result;
}

double sub_1007F05E0(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 272) + 64);
}

void sub_1007F05EC(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  double v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  double v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t buf[8];
  _BYTE v26[20];
  __int16 v27;
  _BYTE v28[10];
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(*(id *)(v6 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), a2, 0);
  if (v7 == 4)
  {
    v8 = objc_msgSend(*(id *)(v6 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("ConsumptionPeriodBegin"), a2, 0);
    if (v8)
    {
      v9 = (*(double *)(a1 + 40) - (double)v8) / *(double *)(a1 + 48);
      if (v9 < 1.0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v10 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v26 = 2082;
          *(_QWORD *)&v26[2] = "";
          *(_WORD *)&v26[10] = 2114;
          *(_QWORD *)&v26[12] = a2;
          v27 = 2050;
          *(double *)v28 = v9;
          v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client with consumptionPeriodElapsed < 1.0\", \"Client\":%{"
                "public, location:escape_only}@, \"consumptionPeriodElapsed\":\"%{public}f\"}";
          v12 = v10;
          v13 = 38;
LABEL_23:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v11, buf, v13);
          return;
        }
        return;
      }
      if ((objc_msgSend(*(id *)(v6 + 136), "isKeyPathRegisteredSystemService:", a2) & 1) != 0
        || sub_1001B873C(v6, a2))
      {
        objc_msgSend(*(id *)(v6 + 136), "setDouble:forKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), a2, CFAbsoluteTimeGetCurrent() + 31536000.0);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v16 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          return;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v26 = 2082;
        *(_QWORD *)&v26[2] = "";
        *(_WORD *)&v26[10] = 2114;
        *(_QWORD *)&v26[12] = a2;
        v11 = "{\"msg%{public}.0s\":\"denying #reprompt for System Service\", \"Client\":%{public, location:escape_only}@}";
      }
      else
      {
        if (a2)
        {
          objc_msgSend(a2, "cppClientKey");
        }
        else
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)v26 = 0;
          *(_QWORD *)&v26[8] = 0;
        }
        v24 = buf;
        v17 = *((_DWORD *)sub_100199794(v6 + 440, buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v24) + 12);
        if ((v26[15] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (v17)
        {
          v18 = objc_msgSend(*(id *)(v6 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("ConsumptionCoolingRate"), a2, 0);
          v19 = objc_msgSend(*(id *)(v6 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("NextConsumptionThresholdScore"), a2, 0x7FFFFFFFLL);
          if (*(double *)(a1 + 48) == 259200.0)
          {
            if (v18 > 2)
              v18 = 0;
            v20 = pow(dbl_101BC1E88[v18], v9) * (double)v17;
            if (v20 <= (double)v19)
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v21 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 68289794;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)v26 = 2082;
                *(_QWORD *)&v26[2] = "";
                *(_WORD *)&v26[10] = 2114;
                *(_QWORD *)&v26[12] = a2;
                v27 = 1026;
                *(_DWORD *)v28 = v19;
                *(_WORD *)&v28[4] = 1026;
                *(_DWORD *)&v28[6] = (int)v20;
                v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client, threshold not reached\", \"Client\":%{public,"
                      " location:escape_only}@, \"nextConsumptionThresholdScore\":%{public}d, \"exponentiatedScore\":%{public}d}";
                v12 = v21;
                v13 = 40;
                goto LABEL_23;
              }
              return;
            }
          }
          else
          {
            v20 = -1.0;
          }
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v22 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            v23 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 68290818;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v26 = 2082;
            *(_QWORD *)&v26[2] = "";
            *(_WORD *)&v26[10] = 2114;
            *(_QWORD *)&v26[12] = a2;
            v27 = 2050;
            *(_QWORD *)v28 = v23;
            *(_WORD *)&v28[8] = 2050;
            v29 = v9;
            v30 = 1026;
            v31 = v17;
            v32 = 1026;
            v33 = v18;
            v34 = 2050;
            v35 = v20;
            v36 = 1026;
            v37 = v19;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Getting #reprompt info for client\", \"clientKeyPath\":%{public, location:escape_only}@, \"effectiveTrialRepromptInterval\":\"%{public}f\", \"consumptionPeriodsElapsed\":\"%{public}f\", \"runningScore\":%{public}d, \"curCooling\":%{public}d, \"exponentiatedScore\":\"%{public}f\", \"exponentiatedScoreThreshold\":%{public}d}", buf, 0x4Cu);
          }
          objc_msgSend(*(id *)(v6 + 136), "setDouble:forKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), a2, CFAbsoluteTimeGetCurrent());
          objc_msgSend(*(id *)(v6 + 136), "setInt:forKey:atKeyPath:", (int)(float)((float)v17 + (float)v17), CFSTR("NextNextConsumptionThresholdScore"), a2);
          objc_msgSend(*(id *)(v6 + 136), "persist");
          sub_1007F0CF4(v6, (uint64_t)a2);
          *a3 = 1;
          return;
        }
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v16 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          return;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v26 = 2082;
        *(_QWORD *)&v26[2] = "";
        *(_WORD *)&v26[10] = 2114;
        *(_QWORD *)&v26[12] = a2;
        v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client with no consumption score\", \"Client\":%{public, loca"
              "tion:escape_only}@}";
      }
    }
    else
    {
      objc_msgSend(*(id *)(v6 + 136), "setDouble:forKey:atKeyPath:", CFSTR("ConsumptionPeriodBegin"), a2, CFAbsoluteTimeGetCurrent());
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        return;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v26 = 2082;
      *(_QWORD *)&v26[2] = "";
      *(_WORD *)&v26[10] = 2114;
      *(_QWORD *)&v26[12] = a2;
      v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client without consumptionPeriodBegin\", \"Client\":%{public, l"
            "ocation:escape_only}@}";
    }
    v12 = v16;
    v13 = 28;
    goto LABEL_23;
  }
  v14 = v7;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v15 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    *(_WORD *)&v26[10] = 2114;
    *(_QWORD *)&v26[12] = a2;
    v27 = 1026;
    *(_DWORD *)v28 = v14;
    v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client without Always auth\", \"Client\":%{public, location:escap"
          "e_only}@, \"Auth\":%{public}d}";
    v12 = v15;
    v13 = 34;
    goto LABEL_23;
  }
}

void sub_1007F0CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F0CF4(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  NSMutableArray *v6;
  void *v7;
  double Current;
  NSObject *v9;
  void *v10;
  _QWORD v11[6];
  _QWORD v12[5];
  _QWORD v13[5];
  CLOSTransaction *v14;
  uint64_t buf;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;

  v4 = objc_autoreleasePoolPush();
  v5 = sub_100196E90(a1, a2);
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3052000000;
  v13[3] = sub_100206D6C;
  v13[4] = sub_100207B20;
  v14 = 0;
  v14 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "com.apple.locationd.reading-score-archive");
  v6 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0);
  v7 = *(void **)(a1 + 480);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007F3AF8;
  v12[3] = &unk_102154420;
  v12[4] = v6;
  sub_1007C3040(v7, (uint64_t)v5, (uint64_t)v12);
  if (v6 && -[NSMutableArray count](v6, "count"))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289282;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#reprompt preparePromptFromConsumptionScore\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
    v10 = *(void **)(a1 + 496);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1007F3B48;
    v11[3] = &unk_102154448;
    v11[4] = v5;
    v11[5] = v13;
    objc_msgSend(v10, "getStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:withReply:", v6, v11, Current + -259200.0, Current, 300.0);
  }
  _Block_object_dispose(v13, 8);
  objc_autoreleasePoolPop(v4);
}

void sub_1007F0F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1007F0F54(const void *a1, uint64_t a2)
{
  _QWORD v5[6];

  CFRetain(a1);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007F5BC0;
  v5[3] = &unk_102154608;
  v5[4] = a1;
  v5[5] = a2;
  return objc_msgSend((id)qword_102304AD0, "doAsync:", v5);
}

void sub_1007F0FC0(uint64_t a1, CFTypeRef cf, double a3)
{
  const void *v6;

  if (cf)
    CFRetain(cf);
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 48) = cf;
  *(double *)(a1 + 64) = a3;
}

uint64_t sub_1007F100C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v6;
  uint64_t result;
  unsigned int v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;

  if (a4)
  {
    v6 = sub_100195B0C(a1, a2);
  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
    result = (uint64_t)objc_msgSend(v6, "isValidCKP");
    if (!(_DWORD)result)
      return result;
  }
  v8 = objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("BackgroundIndicatorEnabled"), v6, 0);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68289794;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2114;
    v14 = v6;
    v15 = 1026;
    v16 = v8;
    v17 = 2050;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update client background indicator enabled\", \"Client\":%{public, location:escape_only}@, \"old\":%{public}d, \"new\":%{public}lu}", (uint8_t *)v10, 0x2Cu);
  }
  objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", a3, CFSTR("BackgroundIndicatorEnabled"), v6);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  sub_1007F2168(a1, (uint64_t)v6);
  return 1;
}

id sub_1007F119C(uint64_t a1, uint64_t a2)
{
  id v3;
  id result;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v3, "isValidCKP");
  if ((_DWORD)result)
    return (id)((objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), v3, 0) & 6) != 0);
  return result;
}

void sub_1007F11F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v6;
  uint64_t *v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v6, "isValidCKP"))
  {
    if (*((char *)a3 + 23) >= 0)
      v7 = a3;
    else
      v7 = (uint64_t *)*a3;
    objc_msgSend(*(id *)(a1 + 136), "setString:forKey:atKeyPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), CFSTR("AuthorizationPurposeKey"), v6);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"setClientAuthorizationPurposeKey for an app we don't have an entry for\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v9 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setClientAuthorizationPurposeKey for an app we don't have an entry for", "{\"msg%{public}.0s\":\"setClientAuthorizationPurposeKey for an app we don't have an entry for\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

id sub_1007F1400(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100196E90(a1, a2);
  v4 = objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("AuthorizationUpgradeAvailable"), v3, 1);
  objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", 0, CFSTR("AuthorizationUpgradeAvailable"), v3);
  objc_msgSend(*(id *)(a1 + 136), "persist");
  return v4;
}

id sub_1007F1470(uint64_t a1, uint64_t a2, int a3, int a4)
{
  id v7;
  void *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *p_p;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  uint64_t v27;
  uint64_t v28;

  v7 = sub_100196E90(a1, a2);
  if (objc_msgSend(v7, "isAuthSharingSubIdentity"))
    v7 = objc_msgSend(v7, "anchorKeyPath");
  v8 = *(void **)(a1 + 136);
  if (!a3)
  {
    objc_msgSend(v8, "setBool:forKey:atKeyPath:", 1, CFSTR("ProvisionalMonitoring"), v7);
    objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("ProvisionalMonitoringBegin"), v7, CFAbsoluteTimeGetCurrent());
    return objc_msgSend(*(id *)(a1 + 136), "persist");
  }
  objc_msgSend(v8, "removeValueForKey:atKeyPath:", CFSTR("ProvisionalMonitoring"), v7);
  objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("ProvisionalMonitoringBegin"), v7);
  objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", 0, CFSTR("AuthorizationUpgradeAvailable"), v7);
  v9 = *(unsigned __int8 **)(a1 + 264);
  if (v9)
  {
    if (v7)
    {
      objc_msgSend(v7, "cppClientKey");
      LODWORD(v7) = HIBYTE(v28);
      v10 = v27;
    }
    else
    {
      v10 = 0;
      __p = 0;
      v27 = 0;
      v28 = 0;
    }
    v11 = v9[23];
    if ((v11 & 0x80u) == 0)
      v12 = v9[23];
    else
      v12 = *((_QWORD *)v9 + 1);
    if ((char)v7 >= 0)
      v10 = v7;
    if (v12 != v10)
    {
      v21 = 0;
      if ((v7 & 0x80) == 0)
        goto LABEL_31;
      goto LABEL_34;
    }
    if ((char)v7 >= 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if ((v11 & 0x80) != 0)
    {
      v21 = memcmp(*(const void **)v9, p_p, *((_QWORD *)v9 + 1)) == 0;
    }
    else
    {
      if (!v9[23])
      {
        v21 = 1;
        if ((v7 & 0x80) == 0)
        {
LABEL_31:
          if (!v21)
            return objc_msgSend(*(id *)(a1 + 136), "persist");
LABEL_35:
          v22 = (uint64_t *)(a1 + 264);
          if (a4)
          {
            v23 = *(_QWORD *)(a1 + 288);
            if (v23)
            {
              (*(void (**)(uint64_t, _QWORD))(v23 + 16))(v23, 0);

              *(_QWORD *)(a1 + 288) = 0;
            }
          }
          v24 = *v22;
          *v22 = 0;
          if (v24)
            sub_1006B3398(a1 + 264, v24);
          *(_BYTE *)(a1 + 280) = 0;
          return objc_msgSend(*(id *)(a1 + 136), "persist");
        }
LABEL_34:
        operator delete(__p);
        if (!v21)
          return objc_msgSend(*(id *)(a1 + 136), "persist");
        goto LABEL_35;
      }
      v14 = v11 - 1;
      do
      {
        v16 = *v9++;
        v15 = v16;
        v18 = *p_p++;
        v17 = v18;
        v20 = v14-- != 0;
        v21 = v15 == v17;
      }
      while (v15 == v17 && v20);
    }
    if ((v7 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_34;
  }
  return objc_msgSend(*(id *)(a1 + 136), "persist");
}

BOOL sub_1007F166C(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  _BOOL8 v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v13;
  _WORD v14[7];
  BOOL v15;
  _BYTE v16[136];
  std::string v17;
  uint8_t buf[1632];
  char v19[32];

  strcpy(v19, "SBParentalControlsCapabilities");
  memset(&v17, 0, sizeof(v17));
  sub_1005695B4((uint64_t)v16, CFSTR("com.apple.springboard"), 1, (uint64_t)CFSTR("mobile"));
  v15 = 0;
  if (a2)
    sub_100569514((uint64_t)v16);
  v3 = sub_1001E4874((uint64_t)v16, "SBParentalControlsEnabled", &v15);
  if (v15)
    v4 = v3;
  else
    v4 = 0;
  if (v4 == 1 && (v5 = sub_10000CA44((uint64_t)v16, v19), v15 = 0, v5 >= 1))
  {
    v6 = 0;
    do
    {
      if (!sub_1000BCB64((uint64_t)v16, v19, &v17))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v7 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "NameValuePair::get failed despite our bounds checking", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v14[0] = 0;
          LODWORD(v13) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "NameValuePair::get failed despite our bounds checking", v14, v13);
          v11 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLClientManager::areParentalControlsEnabled(BOOL)", "%s\n", v10);
          if (v11 != buf)
            free(v11);
        }
      }
      v8 = std::string::compare(&v17, "location");
      v9 = v8 == 0;
      v15 = v8 == 0;
      if (!v8)
        break;
      ++v6;
    }
    while (v6 < v5);
  }
  else
  {
    v9 = 0;
  }
  sub_100569628(v16);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1007F191C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_100569628(&a13);
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1007F1954(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 32);
  sub_1015A2E04(__p, "");
  sub_100193838(v3, a2, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1007F19AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F19C8(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  const char *v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint8_t *v26;
  _QWORD v27[5];
  void *v28[2];
  void *v29[2];
  __int128 v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  id v41;
  uint8_t buf[4];
  _BYTE v43[14];
  __int16 v44;
  void *v45;

  v4 = *(_QWORD *)(a1 + 32);
  sub_1007BCEF0(v4, (uint64_t)a2, 10);
  sub_1007BCEF0(v4, (uint64_t)a2, 4);
  v5 = objc_msgSend(*(id *)(v4 + 392), "objectForKeyedSubscript:", a2);
  if (v5)
  {
    dispatch_source_cancel(v5);
    objc_msgSend(*(id *)(v4 + 392), "removeObjectForKey:", a2);
  }
  sub_10019E180(v4, *(void **)(v4 + 480), (_QWORD *)(v4 + 440), a2);
  if (_os_feature_enabled_impl("CoreLocation", "CLSwissLocationAttribution"))
    sub_10019E180(v4, *(void **)(v4 + 544), (_QWORD *)(v4 + 504), a2);
  v6 = sub_1007BCEF0(v4, (uint64_t)a2, 5);
  if (objc_opt_class(BKSProcessAssertion, v7) && v6 && *(_BYTE *)(a1 + 40))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v43 = 0;
      *(_WORD *)&v43[4] = 2082;
      *(_QWORD *)&v43[6] = "";
      v44 = 2114;
      v45 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Resuming client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (a2)
    {
      objc_msgSend(a2, "clientName");
    }
    else
    {
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      *(_OWORD *)v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      *(_OWORD *)v31 = 0u;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)v29 = 0u;
    }
    if (objc_msgSend(a2, "bundleId"))
    {
      v9 = objc_msgSend(a2, "bundleId");
      v10 = objc_msgSend(objc_alloc((Class)BKSProcessAssertion), "initWithBundleIdentifier:flags:reason:name:", v9, 1, 2, CFSTR("locationd-resume-on-crash"));
      v11 = objc_msgSend(v10, "acquire");
      if (v10)
      {
        if ((v11 & 1) != 0)
        {
          v12 = *(void **)(v4 + 40);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_1007F20BC;
          v27[3] = &unk_10212BB58;
          v27[4] = v10;
          objc_msgSend(v12, "afterInterval:async:", v27, 10.0);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v21 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v22 = objc_msgSend(v9, "UTF8String");
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v43 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#warning Failed to resume '%{public}s': assertion not acquired", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v23 = qword_1022A01D8;
            v24 = objc_msgSend(v9, "UTF8String");
            v40 = 136446210;
            v41 = v24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "#warning Failed to resume '%{public}s': assertion not acquired", &v40, 12);
            v26 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkLocationStopped(BOOL)_block_invoke", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }

        }
        goto LABEL_43;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        v17 = objc_msgSend(v9, "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v43 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to resume '%{public}s': init failure", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_43;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v18 = qword_1022A01D8;
      v19 = objc_msgSend(v9, "UTF8String");
      v40 = 136446210;
      v41 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 16, "Failed to resume '%{public}s': init failure", &v40, 12);
      v15 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::checkLocationStopped(BOOL)_block_invoke", "%s\n", v20);
      if (v15 == buf)
        goto LABEL_43;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v13 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Non-app client is was a background client?", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_43;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Non-app client is was a background client?", &v40, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::checkLocationStopped(BOOL)_block_invoke", "%s\n", v14);
      if (v15 == buf)
        goto LABEL_43;
    }
    free(v15);
LABEL_43:
    if (SHIBYTE(v38) < 0)
      operator delete(*((void **)&v37 + 1));
    if (SBYTE7(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v35) < 0)
      operator delete(*((void **)&v34 + 1));
    if (SHIBYTE(v33) < 0)
      operator delete(v32[1]);
    if (SHIBYTE(v32[0]) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[1]);
    if (SHIBYTE(v29[0]) < 0)
      operator delete(v28[0]);
  }
}

void sub_1007F2078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007F20BC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_1007F20E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *__p[2];
  char v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(*(id *)(v3 + 136), "isKeyPathRegisteredSystemService:", a2))
  {
    sub_1015A2E04(__p, "");
    sub_100193838(v3, a2, (uint64_t)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_1007F214C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F2168(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = sub_100196E90(a1, a2);
  v4 = sub_1000B96A4(a1, (uint64_t)v3);
  v5 = *(_QWORD **)(a1 + 816);
  v6 = (_QWORD *)(a1 + 824);
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      if (objc_msgSend(sub_1001948D4(v5[5], 0), "isEqual:", v3))
        sub_1000B98C8(v5[5], v7);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v6);
  }
}

NSDictionary *sub_1007F2210(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  _QWORD v9[8];
  _QWORD v10[8];

  v2 = *(_QWORD *)(a1 + 48);
  -[NSDate timeIntervalSinceReferenceDate](-[NSDictionary fileModificationDate](-[NSFileManager attributesOfItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager", 0), "attributesOfItemAtPath:error:", *(_QWORD *)(a1 + 32), &v8), "fileModificationDate"), "timeIntervalSinceReferenceDate");
  v4 = 0.0;
  if (v3 > 0.0)
  {
    v5 = v3;
    objc_msgSend(*(id *)(v2 + 40), "currentLatchedAbsoluteTimestamp");
    v4 = v6 - v5;
  }
  v9[0] = CFSTR("ClientKey");
  v10[0] = objc_msgSend(*(id *)(a1 + 40), "legacyClientKey");
  v9[1] = CFSTR("KeepAsIs");
  v10[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v9[2] = CFSTR("RepromptAge");
  v10[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4);
  v9[3] = CFSTR("PriorCooling");
  v10[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v9[4] = CFSTR("PriorThreshold");
  v10[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v9[5] = CFSTR("NewCooling");
  v10[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64));
  v9[6] = CFSTR("NewThreshold");
  v10[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  v9[7] = CFSTR("CurrentUsage");
  v10[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 8);
}

id sub_1007F23A4(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "subIdentityType");
  if ((_DWORD)result == 122)
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1007F23E4(uint64_t a1, const char *a2)
{
  NSObject *v3;
  const char *v4;
  NSURL *v5;
  NSURL *v6;
  NSObject *global_queue;
  NSObject *v8;
  const char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD block[5];
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "";
    if (a2)
      v4 = a2;
    *(_DWORD *)buf = 136446210;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "open preferences with url, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = "";
    if (a2)
      v9 = a2;
    v14 = 136446210;
    v15 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "open preferences with url, %{public}s", &v14, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::openPreferences(const char *const)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  v5 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  if (v5)
  {
    v6 = v5;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007F2760;
    block[3] = &unk_10212BB58;
    block[4] = v6;
    dispatch_async(global_queue, block);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't create Preferences URL, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v14 = 136446210;
      v15 = a2;
      LODWORD(v12) = 12;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't create Preferences URL, %{public}s", &v14, v12);
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::openPreferences(const char *const)", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_1007F2760(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v2 = objc_autoreleasePoolPush();
  if ((objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openSensitiveURL:withOptions:", *(_QWORD *)(a1 + 32), 0) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "could not launch Preferences", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "could not launch Preferences", v5, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::openPreferences(const char *const)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1007F291C(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v10[4];
  uint8_t buf[8];
  char v12;

  if (*a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v5 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v6 = *a3;
      v10[0] = 67240192;
      v10[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Unknown notification: %{public}d", v10, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLClientManager::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    sub_1015A2E04(buf, "com.apple.locationd.darwin_notification");
    sub_1007BC73C(a1, (uint64_t *)buf, 1);
    if (v12 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_1007F2B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F2B2C(uint64_t result, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  int v5;
  double *i;
  double Current;

  if (*a3 == 8)
  {
    v4 = result;
    v5 = *a4;
    *(_BYTE *)(result + 1056) = v5;
    if (!v5)
    {
      for (i = *(double **)(result + 1032); i != *(double **)(v4 + 1040); i += 4)
      {
        Current = CFAbsoluteTimeGetCurrent();
        result = sub_1007E7090(i, Current);
      }
    }
  }
  return result;
}

void sub_1007F2B84(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  _QWORD *i;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  if (*a3 == 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *a4;
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wifi power state\", \"power\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
    v8 = *a4;
    *(_BYTE *)(a1 + 1057) = v8 ^ 1;
    if (v8)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wifi enabled\"}", (uint8_t *)&v11, 0x12u);
      }
      for (i = *(_QWORD **)(a1 + 1032); i != *(_QWORD **)(a1 + 1040); i += 4)
      {
        if (!*i)
        {
          sub_1007E6D58(i);
          return;
        }
      }
    }
  }
}

void sub_1007F2D40(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  int v11;
  int v12;
  const void **v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  int v24;
  _OWORD v25[2];
  int v26;
  _QWORD v27[6];
  char v28;
  _OWORD *v29;
  uint64_t v30;
  const void **v31;
  const void **v32;
  const void **v33;
  uint64_t v34;
  const void **buf;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  _BYTE v44[18];
  __int16 v45;
  uint64_t v46;

  sub_100197040();
  if (sub_1001974CC())
  {
    v7 = *a3;
    if (*a3 == 2)
    {
      if (*a4 != 7)
        sub_10190A3F8();
      v8 = 8;
    }
    else if (v7 == 1)
    {
      if (*a4 != 4)
        sub_10190A3D0();
      v8 = 4;
    }
    else
    {
      if (v7)
        goto LABEL_15;
      if (*a4 != 3)
        sub_10190A3A8();
      v8 = 2;
    }
    if (*((_BYTE *)a4 + 4))
      v9 = *(_QWORD *)(a1 + 424) | v8;
    else
      v9 = *(_QWORD *)(a1 + 424) & ~v8;
    *(_QWORD *)(a1 + 424) = v9;
    v10 = *(void **)(a1 + 400);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1007F31BC;
    v27[3] = &unk_1021543D0;
    v27[4] = (v9 >> 2) & 2 | v9;
    v27[5] = v8;
    objc_msgSend(v10, "updateVolatileData:completion:", v27, 0);
  }
LABEL_15:
  if ((_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync") & 1) == 0)
  {
    if (*a3 || *a4 != 3)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v18 = *a3;
        v19 = *a4;
        v42 = 68289538;
        v43 = 2082;
        *(_QWORD *)v44 = "";
        *(_WORD *)&v44[8] = 2050;
        *(_QWORD *)&v44[10] = v18;
        v45 = 2050;
        v46 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim unsupported system system service notification for entity\", \"notification\":%{public, location:CLStatusBarIconManager_Type::Notification}lld, \"entityClass\":%{public, location:CLStatusBarIconManager_Type::EntityClass}lld}", (uint8_t *)&v42, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v20 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v21 = *a3;
        v22 = *a4;
        v42 = 68289538;
        v43 = 2082;
        *(_QWORD *)v44 = "";
        *(_WORD *)&v44[8] = 2050;
        *(_QWORD *)&v44[10] = v21;
        v45 = 2050;
        v46 = v22;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sbim unsupported system system service notification for entity", "{\"msg%{public}.0s\":\"#sbim unsupported system system service notification for entity\", \"notification\":%{public, location:CLStatusBarIconManager_Type::Notification}lld, \"entityClass\":%{public, location:CLStatusBarIconManager_Type::EntityClass}lld}", (uint8_t *)&v42, 0x26u);
      }
    }
    else
    {
      v11 = *(unsigned __int8 *)(a1 + 1062);
      v12 = *((unsigned __int8 *)a4 + 4);
      *(_BYTE *)(a1 + 1062) = v12;
      if (v11 != v12)
      {
        sub_1007F91D4((uint64_t)&v42, a1 + 1488);
        memset(v25, 0, sizeof(v25));
        v26 = 1065353216;
        memset(v23, 0, sizeof(v23));
        v24 = 1065353216;
        v13 = *(const void ***)(a1 + 1504);
        v33 = 0;
        v34 = *(_QWORD *)&v44[6];
        v31 = 0;
        v32 = v13;
        v29 = v25;
        v30 = 0;
        sub_1007F9248((unsigned __int8 *)&v34, &v33, &v32, &v31, (uint64_t *)&v29, (uint64_t)&v28, &buf);
        v14 = *(_QWORD *)(a1 + 1504);
        v33 = 0;
        v34 = v14;
        v31 = 0;
        v32 = *(const void ***)&v44[6];
        v29 = v23;
        v30 = 0;
        sub_1007F9248((unsigned __int8 *)&v34, &v33, &v32, &v31, (uint64_t *)&v29, (uint64_t)&v28, &buf);
        sub_1007F31F8(a1, (uint64_t)v25);
        sub_1007F3278((id)a1, (uint64_t)v23);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v15 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(unsigned __int8 *)(a1 + 1062);
          buf = (const void **)68289538;
          v36 = 2082;
          v37 = "";
          v38 = 1026;
          v39 = v11;
          v40 = 1026;
          v41 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim system service switch state changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
        }
        sub_1002A1C94((uint64_t)v23);
        sub_1002A1C94((uint64_t)v25);
        sub_1002A1C94((uint64_t)&v42);
      }
    }
  }
}

void sub_1007F3190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_1002A1C94((uint64_t)&a9);
  sub_1002A1C94((uint64_t)&a15);
  sub_1002A1C94(v15 - 112);
  _Unwind_Resume(a1);
}

id sub_1007F31BC(uint64_t a1, void *a2, void *a3)
{
  objc_msgSend(a2, "setActiveDisplayModes:", *(_QWORD *)(a1 + 32));
  return objc_msgSend(a3, "setUserInitiated:", *(_QWORD *)(a1 + 40) == 2);
}

NSDictionary *sub_1007F31F8(uint64_t a1, uint64_t a2)
{
  NSDictionary *result;
  uint64_t *v5;
  NSDictionary *v6;
  _QWORD *v7;

  result = +[NSDictionary dictionary](NSDictionary, "dictionary");
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = result;
    do
    {
      v7 = v5 + 2;
      if (*((char *)v5 + 39) < 0)
        v7 = (_QWORD *)*v7;
      result = (NSDictionary *)objc_msgSend(*(id *)(a1 + 1528), "client:didChangeUsageData:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), v6);
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return result;
}

id sub_1007F3278(id result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    v3 = (uint64_t)result;
    do
    {
      v4 = (uint64_t)(v2 + 2);
      if (*((char *)v2 + 39) < 0)
        v4 = v2[2];
      result = objc_msgSend(*(id *)(v3 + 1528), "client:didChangeUsageData:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), sub_1007DF190(v3, v2 + 2));
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_1007F32F8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  _QWORD *i;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  if (*a3 == 9)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a4 + 113);
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"bluetooth power state\", \"power\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
    v8 = *(unsigned __int8 *)(a4 + 113);
    *(_BYTE *)(a1 + 1058) = v8 ^ 1;
    if (v8)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"bluetooth enabled\"}", (uint8_t *)&v11, 0x12u);
      }
      for (i = *(_QWORD **)(a1 + 1032); i != *(_QWORD **)(a1 + 1040); i += 4)
      {
        if (*i == 1)
        {
          sub_1007E6D58(i);
          return;
        }
      }
    }
  }
}

id sub_1007F34B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id result;
  _QWORD v7[5];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1007F357C;
  v7[3] = &unk_102153FC0;
  v7[4] = v4;
  result = objc_msgSend(v5, "iterateIdentitiesRelatedToKeyPath:withBlock:", a2, v7);
  if (*(_BYTE *)(a1 + 40))
  {
    result = objc_msgSend(*(id *)(v4 + 136), "isKeyPathRegisteredSystemService:", a2);
    if ((_DWORD)result)
    {
      result = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), a2, 0);
      if ((_DWORD)result == 4)
        return objc_msgSend(*(id *)(v4 + 136), "removeValueForKey:atKeyPath:", CFSTR("Authorization"), a2);
    }
  }
  return result;
}

id sub_1007F357C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  sub_1007EFEE8(v3, a2);
  return sub_1007F0028(v3, a2);
}

void sub_1007F35AC()
{
  operator new();
}

void sub_1007F35FC()
{
  operator delete();
}

id sub_1007F3620(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id result;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  id *v11;
  void *__p[2];
  char v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(id *)(a1 + 32);
  result = objc_msgSend(*(id *)(v2 + 576), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  if (v3 == result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient releasing in use assertion\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*(_BYTE *)(a1 + 64))
    {
      v7 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "legacyClientKey"), "UTF8String");
      if (v7)
        v8 = v7;
      else
        v8 = "";
      sub_1015A2E04(__p, v8);
      sub_1007C1BA4(v2, (uint64_t *)__p);
      if (v13 < 0)
        operator delete(__p[0]);
      objc_msgSend(*(id *)(v2 + 584), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
      sub_1007C1A8C();
    }
    sub_1015A2E04(buf, (char *)objc_msgSend(*(id *)(a1 + 48), "UTF8String"));
    sub_1007F945C((uint64_t **)(v2 + 592), (const void **)buf);
    if (SBYTE3(v18) < 0)
      operator delete(*(void **)buf);
    v10 = *(_QWORD *)(a1 + 40);
    v9 = (_QWORD *)(a1 + 40);
    objc_msgSend(objc_msgSend(*(id *)(v2 + 576), "objectForKeyedSubscript:", v10), "invalidate");
    v11 = (id *)(v2 + 576);

    return objc_msgSend(*v11, "setObject:forKeyedSubscript:", 0, *v9);
  }
  return result;
}

void sub_1007F37E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F3818(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  state = xpc_activity_get_state(activity);
  if (state)
  {
    if (state == 2)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v4 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "coreanalytics activity run", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v10[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "coreanalytics activity run", v10, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::registerAnalyticsCollectActivity()_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      objc_msgSend(*(id *)(a1 + 32), "triggerAnalyticsCollect");
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "coreanalytics activity check-in", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "coreanalytics activity check-in", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::registerAnalyticsCollectActivity()_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

id sub_1007F3AF8(uint64_t a1, double a2, double a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", -[CLInterval initWithStart:end:]([CLInterval alloc], "initWithStart:end:", a2, a3));
}

id sub_1007F3B48(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6;
  uint64_t v7;
  NSData *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  _BYTE *v15;
  NSString *v16;
  NSObject *v17;
  uint64_t v18;
  id result;
  std::string __p;
  uint64_t v21;
  _BYTE buf[28];
  __int16 v23;
  uint64_t v24;
  _QWORD v25[4];
  _QWORD v26[4];

  v6 = objc_msgSend(a2, "count");
  v7 = objc_msgSend(a3, "count") + v6;
  v25[0] = CFSTR("ClientKey");
  v26[0] = objc_msgSend(*(id *)(a1 + 32), "clientKey");
  v25[1] = CFSTR("LocationCount");
  v26[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7);
  v26[2] = a2;
  v25[2] = CFSTR("Locations");
  v25[3] = CFSTR("Launches");
  v26[3] = a3;
  v21 = 0;
  v8 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 4), 1, &v21);
  if (!v8 || v21)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v10;
      v23 = 2114;
      v24 = v21;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not archive checkpoint data\", \"Client\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v12;
      v23 = 2114;
      v24 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not archive checkpoint data", "{\"msg%{public}.0s\":\"Could not archive checkpoint data\", \"Client\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v8 = 0;
  }
  sub_100584F4C(0, &__p);
  v13 = std::string::append(&__p, "locScoreInfoReport");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0)
    v15 = buf;
  else
    v15 = *(_BYTE **)buf;
  v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!-[NSData writeToFile:options:error:](v8, "writeToFile:options:error:", v16, 805306369, &v21))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v18;
      v23 = 2114;
      v24 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Could not serialize reprompt checkpoint data\", \"Client\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
  }
  result = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = 0;
  return result;
}

void sub_1007F3F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_1007F3F3C(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  _BOOL8 result;
  id v27;
  const char *v28;
  const char *v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  uint32_t v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  id v44;
  NSObject *v45;
  id v46;
  NSObject *v47;
  id v48;
  int v49;
  int v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  void *v56;

  v2 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Type"));
  if (v2)
  {
    v4 = v2;
    v5 = objc_opt_class(NSNumber, v3);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    {
      if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator")))
      {
        v6 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator"));
        if (!v6
          || (v8 = v6, v9 = objc_opt_class(NSNumber, v7), (objc_opt_isKindOfClass(v8, v9) & 1) == 0))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v34 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)objc_msgSend(CFSTR("ServiceMaskOperator"), "UTF8String");
            v55 = 2114;
            v56 = a1;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v49, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v35 = qword_1022A01D8;
          result = os_signpost_enabled((os_log_t)qword_1022A01D8);
          if (result)
          {
            v36 = objc_msgSend(CFSTR("ServiceMaskOperator"), "UTF8String");
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)v36;
            v55 = 2114;
            v56 = a1;
            v28 = "invalid zone config";
            v29 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{"
                  "public, location:escape_only}@}";
            v32 = v35;
            goto LABEL_29;
          }
          return result;
        }
      }
      v10 = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Type")), "intValue");
      if (v10 == 2)
      {
        v37 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("PhenolicLocation"));
        if (!v37
          || (v39 = v37, v40 = objc_opt_class(NSNumber, v38), (objc_opt_isKindOfClass(v39, v40) & 1) == 0))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v45 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)objc_msgSend(CFSTR("PhenolicLocation"), "UTF8String");
            v55 = 2114;
            v56 = a1;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v49, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v25 = qword_1022A01D8;
          result = os_signpost_enabled((os_log_t)qword_1022A01D8);
          if (result)
          {
            v46 = objc_msgSend(CFSTR("PhenolicLocation"), "UTF8String");
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)v46;
            v55 = 2114;
            v56 = a1;
            v28 = "invalid zone config";
            v29 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{"
                  "public, location:escape_only}@}";
            goto LABEL_28;
          }
          return result;
        }
      }
      else
      {
        v11 = v10;
        if (v10 != 1)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v41 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v49 = 68289282;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2050;
            v54 = v11;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"value-type validation of Info.plist zone received un-recongnised zone type\", \"ZoneType\":%{public, location:CLClientInterestZoneType}lld}", (uint8_t *)&v49, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v42 = qword_1022A01D8;
          result = os_signpost_enabled((os_log_t)qword_1022A01D8);
          if (result)
          {
            v49 = 68289282;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2050;
            v54 = v11;
            v28 = "value-type validation of Info.plist zone received un-recongnised zone type";
            v29 = "{\"msg%{public}.0s\":\"value-type validation of Info.plist zone received un-recongnised zone type\", \""
                  "ZoneType\":%{public, location:CLClientInterestZoneType}lld}";
            v32 = v42;
            v33 = 28;
            goto LABEL_30;
          }
          return result;
        }
        v12 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Latitude"));
        if (!v12
          || (v14 = v12, v15 = objc_opt_class(NSNumber, v13), (objc_opt_isKindOfClass(v14, v15) & 1) == 0))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v43 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)objc_msgSend(CFSTR("Latitude"), "UTF8String");
            v55 = 2114;
            v56 = a1;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v49, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v25 = qword_1022A01D8;
          result = os_signpost_enabled((os_log_t)qword_1022A01D8);
          if (result)
          {
            v44 = objc_msgSend(CFSTR("Latitude"), "UTF8String");
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)v44;
            v55 = 2114;
            v56 = a1;
            v28 = "invalid zone config";
            v29 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{"
                  "public, location:escape_only}@}";
            goto LABEL_28;
          }
          return result;
        }
        v16 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Longitude"));
        if (!v16
          || (v18 = v16, v19 = objc_opt_class(NSNumber, v17), (objc_opt_isKindOfClass(v18, v19) & 1) == 0))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v47 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)objc_msgSend(CFSTR("Longitude"), "UTF8String");
            v55 = 2114;
            v56 = a1;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v49, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v25 = qword_1022A01D8;
          result = os_signpost_enabled((os_log_t)qword_1022A01D8);
          if (result)
          {
            v48 = objc_msgSend(CFSTR("Longitude"), "UTF8String");
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)v48;
            v55 = 2114;
            v56 = a1;
            v28 = "invalid zone config";
            v29 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{"
                  "public, location:escape_only}@}";
            goto LABEL_28;
          }
          return result;
        }
        v20 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Radius"));
        if (!v20
          || (v22 = v20, v23 = objc_opt_class(NSNumber, v21), (objc_opt_isKindOfClass(v22, v23) & 1) == 0))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v24 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
          {
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)objc_msgSend(CFSTR("Radius"), "UTF8String");
            v55 = 2114;
            v56 = a1;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v49, 0x26u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
          }
          v25 = qword_1022A01D8;
          result = os_signpost_enabled((os_log_t)qword_1022A01D8);
          if (result)
          {
            v27 = objc_msgSend(CFSTR("Radius"), "UTF8String");
            v49 = 68289538;
            v50 = 0;
            v51 = 2082;
            v52 = "";
            v53 = 2082;
            v54 = (unint64_t)v27;
            v55 = 2114;
            v56 = a1;
            v28 = "invalid zone config";
            v29 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{"
                  "public, location:escape_only}@}";
LABEL_28:
            v32 = v25;
LABEL_29:
            v33 = 38;
LABEL_30:
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v28, v29, (uint8_t *)&v49, v33);
            return 0;
          }
          return result;
        }
      }
      return 1;
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v30 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    v49 = 68289538;
    v50 = 0;
    v51 = 2082;
    v52 = "";
    v53 = 2082;
    v54 = (unint64_t)objc_msgSend(CFSTR("Type"), "UTF8String");
    v55 = 2114;
    v56 = a1;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v49, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v25 = qword_1022A01D8;
  result = os_signpost_enabled((os_log_t)qword_1022A01D8);
  if (result)
  {
    v31 = objc_msgSend(CFSTR("Type"), "UTF8String");
    v49 = 68289538;
    v50 = 0;
    v51 = 2082;
    v52 = "";
    v53 = 2082;
    v54 = (unint64_t)v31;
    v55 = 2114;
    v56 = a1;
    v28 = "invalid zone config";
    v29 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, "
          "location:escape_only}@}";
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1007F49B4(void *a1, void *a2)
{
  NSObject *v4;
  _UNKNOWN **v5;
  _BOOL4 v6;
  _UNKNOWN **v7;
  _UNKNOWN **v8;
  _BOOL4 v9;
  _UNKNOWN **v10;
  unsigned int v11;
  _UNKNOWN **v12;
  _BOOL4 v13;
  _UNKNOWN **v14;
  _UNKNOWN **v15;
  _BOOL4 v16;
  _UNKNOWN **v17;
  unsigned int v18;
  _UNKNOWN **v19;
  _BOOL4 v20;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  _BOOL4 v23;
  _UNKNOWN **v24;
  unsigned int v25;
  _UNKNOWN **v26;
  _BOOL4 v27;
  _UNKNOWN **v28;
  _UNKNOWN **v29;
  _BOOL4 v30;
  _UNKNOWN **v31;
  unsigned int v32;
  _UNKNOWN **v33;
  _UNKNOWN **v34;
  _UNKNOWN **v35;
  _UNKNOWN **v36;
  _DWORD v38[2];
  __int16 v39;
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v38[0] = 68289538;
    v38[1] = 0;
    v39 = 2082;
    v40 = "";
    v41 = 2114;
    v42 = a1;
    v43 = 2114;
    v44 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"check #pla zones are identical\", \"Zone1\":%{public, location:escape_only}@, \"Zone2\":%{public, location:escape_only}@}", (uint8_t *)v38, 0x26u);
  }
  v5 = (_UNKNOWN **)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Type"));
  if (v5)
    v6 = 1;
  else
    v6 = CFSTR("ServiceMaskOperator") != CFSTR("Type");
  if (v6)
    v7 = v5;
  else
    v7 = &off_10221B660;
  v8 = (_UNKNOWN **)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Type"));
  if (v8)
    v9 = 1;
  else
    v9 = CFSTR("ServiceMaskOperator") != CFSTR("Type");
  if (v9)
    v10 = v8;
  else
    v10 = &off_10221B660;
  v11 = objc_msgSend(v7, "isEqual:", v10);
  v12 = (_UNKNOWN **)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Latitude"));
  if (v12)
    v13 = 1;
  else
    v13 = CFSTR("ServiceMaskOperator") != CFSTR("Latitude");
  if (v13)
    v14 = v12;
  else
    v14 = &off_10221B660;
  v15 = (_UNKNOWN **)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Latitude"));
  if (v15)
    v16 = 1;
  else
    v16 = CFSTR("ServiceMaskOperator") != CFSTR("Latitude");
  if (v16)
    v17 = v15;
  else
    v17 = &off_10221B660;
  v18 = objc_msgSend(v14, "isEqual:", v17);
  v19 = (_UNKNOWN **)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Longitude"));
  if (v19)
    v20 = 1;
  else
    v20 = CFSTR("ServiceMaskOperator") != CFSTR("Longitude");
  if (v20)
    v21 = v19;
  else
    v21 = &off_10221B660;
  v22 = (_UNKNOWN **)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Longitude"));
  if (v22)
    v23 = 1;
  else
    v23 = CFSTR("ServiceMaskOperator") != CFSTR("Longitude");
  if (v23)
    v24 = v22;
  else
    v24 = &off_10221B660;
  v25 = objc_msgSend(v21, "isEqual:", v24);
  v26 = (_UNKNOWN **)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Radius"));
  if (v26)
    v27 = 1;
  else
    v27 = CFSTR("ServiceMaskOperator") != CFSTR("Radius");
  if (v27)
    v28 = v26;
  else
    v28 = &off_10221B660;
  v29 = (_UNKNOWN **)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Radius"));
  if (v29)
    v30 = 1;
  else
    v30 = CFSTR("ServiceMaskOperator") != CFSTR("Radius");
  if (v30)
    v31 = v29;
  else
    v31 = &off_10221B660;
  v32 = objc_msgSend(v28, "isEqual:", v31);
  v33 = (_UNKNOWN **)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator"));
  if (v33)
    v34 = v33;
  else
    v34 = &off_10221B660;
  v35 = (_UNKNOWN **)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator"));
  if (v35)
    v36 = v35;
  else
    v36 = &off_10221B660;
  return v11 & v18 & v25 & v32 & objc_msgSend(v34, "isEqual:", v36);
}

void sub_1007F4C78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  char *v12;
  void *__p[2];
  char v14;
  int v15;
  id v16;
  __int16 v17;
  id v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  id v22;

  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v5 + 136), "migrateDictionaryAtKeyPath:toKeyPath:forceMigrationOnAuthCollision:", a2, a3, 1);
  sub_1015A2E04(__p, "ClientRemoved");
  sub_1007C0424(v5, a2, 1, (uint64_t *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  objc_msgSend(*(id *)(v5 + 136), "setInt:forKey:atKeyPath:", 1, CFSTR("Provenance"), a3);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    v7 = objc_msgSend(a2, "legacyClientKey");
    v8 = objc_msgSend(a3, "legacyClientKey");
    *(_DWORD *)buf = 138412546;
    v20 = v7;
    v21 = 2112;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#pla #reconcile SyncedInfoPlistZone:%@ collapsed to :%@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    v10 = objc_msgSend(a2, "legacyClientKey");
    v11 = objc_msgSend(a3, "legacyClientKey");
    v15 = 138412546;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "#pla #reconcile SyncedInfoPlistZone:%@ collapsed to :%@", &v15, 22);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::registerAndReconcileInfoPlistZone(const std::string &, const std::string &, NSDictionary *, CLClientInterestZoneProvenanceType, NSDictionary *)_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
}

void sub_1007F4ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F4EFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 408);
}

void sub_1007F4F04()
{
  operator new();
}

void sub_1007F4FB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

BOOL sub_1007F4FF0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021545E8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1007F5270(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1007F81E8(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1007F531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007F5330(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021545E8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021545E8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021545E8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021545E8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1007F58DC(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1007F5908(uint64_t a1, int a2, uint64_t a3, void *a4, __int128 *a5)
{
  __int128 v7;
  id v8;
  id v9;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v7 = *a5;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  v8 = objc_msgSend(a4, "copy");
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v8)
    *(_QWORD *)(a1 + 40) = objc_msgSend(&stru_102154568, "copy");
  v9 = *(id *)(a1 + 8);
  return a1;
}

void sub_1007F5998(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1007F59B8(id a1)
{
  qword_1022A02C8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "LocationMetrics");
}

void sub_1007F59E4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1007F5A10(id a1)
{
  qword_102304AB8 = (uint64_t)os_log_create("com.apple.greentea", "location");
}

id sub_1007F5A3C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "proxyForService:", CFSTR("CLClientManager"));
  qword_102304AD0 = (uint64_t)result;
  return result;
}

uint64_t sub_1007F5A68(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1007F5AC8(a1, a2);
  return a1;
}

void sub_1007F5AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F5AC8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100235654(a1);
  v4 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)a2 = v4;
  LOBYTE(v4) = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a2 + 4) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 32) = v6;
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v9;
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v10;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v11;
  *(_QWORD *)&v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v7;
  return a1;
}

void sub_1007F5B88(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1007F5BB4(uint64_t a1)
{
  sub_1007EE080(*(_QWORD *)(a1 + 32), 1);
}

void sub_1007F5BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  __CFRunLoop *v12;
  _QWORD block[5];
  _WORD v14[8];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 272);
  if (v4 && *(_QWORD *)(v4 + 48) == *(_QWORD *)(a1 + 32))
  {
    sub_1007CAD68(a2, *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 40) & 3;
      v7 = *(_QWORD *)(a2 + 272);
      v8 = v7 != 0;
      v9 = *(_QWORD *)(a1 + 32);
      if (v7)
        v7 = *(_QWORD *)(v7 + 48);
      *(_DWORD *)buf = 68290050;
      v17 = 2082;
      v16 = 0;
      v18 = "";
      v19 = 1026;
      v20 = v6;
      v21 = 1026;
      v22 = v8;
      v23 = 2114;
      v24 = v9;
      v25 = 2114;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt #Thunk CFUserNotification\", \"ResponseFlag\":%{public}d, \"HasInflightAuthPromptRequest\":%{public}hhd, \"ThunkCFUN\":%{public, location:escape_only}@, \"InflightCFUN\":%{public, location:escape_only}@}", buf, 0x32u);
    }
    if ((~*(_DWORD *)(a1 + 40) & 3) != 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#AuthPrompt #Thunk InflightAuthPromptRequest has unexpected state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v14[0] = 0;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "#AuthPrompt #Thunk InflightAuthPromptRequest has unexpected state", v14, 2);
        sub_100512490("Generic", 1, 0, 0, "void thunkDeliverCFUserNotificationUnified(CFUserNotificationRef, CFOptionFlags)_block_invoke", "%s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
    }
  }
  v12 = (__CFRunLoop *)sub_100193530();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007F5E9C;
  block[3] = &unk_10212ECA0;
  block[4] = *(_QWORD *)(a1 + 32);
  CFRunLoopPerformBlock(v12, kCFRunLoopCommonModes, block);
}

void sub_1007F5E9C(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_1007F5EA4(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t sub_1007F5EAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      sub_100311C38(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1007F5F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A1C94(v1);
  _Unwind_Resume(a1);
}

void sub_1007F5F24(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1007F5F24(a1, *a2);
    sub_1007F5F24(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_1007F5F6C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    sub_1000145B0(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    sub_1007F6060((uint64_t)v16, 0);
  }
  return v11;
}

void sub_1007F6060(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100261F44((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

id sub_1007F60A4(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void **v5;
  id v6;
  void *__p[2];
  char v9;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v3, "isValidCKP"))
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 8) + 136);
  sub_100223FC8(__p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = objc_msgSend(v4, "hasValueForKey:atKeyPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), v3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1007F6150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F616C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1007F61B0((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_1007F61B0(uint64_t a1)
{
  sub_1007F61EC(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1007F61EC(uint64_t a1)
{
  void *v2;

  sub_1007F6224(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1007F6224(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (std::__shared_weak_count *)v2[4];
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1007F6264(uint64_t a1, _QWORD *__p)
{
  std::__shared_weak_count *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (std::__shared_weak_count *)__p[4];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1007F62AC(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x140uLL);
  sub_1007F632C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1007F64F8((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007F6318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007F632C(_QWORD *a1, void **a2, void **a3, void **a4, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_102154638;
  a1[1] = 0;
  sub_1007F63F0((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007F6384(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007F6398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102154638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F63AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102154638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F63E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1007F63F0(uint64_t a1, uint64_t a2, void **a3, void **a4, void **a5, uint64_t a6)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11[2];
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  uint64_t v15;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a6;
    v12 = *(_QWORD *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a6 + 24), *(_QWORD *)(a6 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a6 + 24);
    v14 = *(_QWORD *)(a6 + 40);
  }
  v15 = *(_QWORD *)(a6 + 48);
  sub_100223F88(a2, v8, v9, v10, (uint64_t)v11);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1007F64CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F64F8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

id sub_1007F65A8(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void **v5;
  id v6;
  void *__p[2];
  char v9;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v3, "isValidCKP"))
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 8) + 136);
  sub_100ED01A0(__p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = objc_msgSend(v4, "hasValueForKey:atKeyPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), v3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1007F6654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F6670(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 __p;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  CLClientManagerAuthorizationContext *v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  _UNKNOWN **v60;
  id v61;
  uint8_t buf[8];
  _BYTE v63[30];
  char v64;

  v5 = sub_100196E90((uint64_t)a1, a2);
  v61 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    objc_msgSend(v5, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v63 = 0;
    *(_QWORD *)&v63[8] = 0;
  }
  v58 = buf;
  v6 = sub_1001ABAB4((uint64_t)(a1 + 122), buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v58) + 40;
  if ((v63[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = &v60;
  v7 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v58 = 0;
  v59 = 0;
  v8 = (std::__shared_weak_count *)v7[4];
  if (v8
    && (v9 = std::__shared_weak_count::lock(v8), (v59 = v9) != 0)
    && (v10 = v9, v11 = (void *)v7[3], (v58 = (uint8_t *)v11) != 0))
  {
    if (v12)
    {
      *(_QWORD *)buf = v12;
      *(_QWORD *)v63 = v10;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)v63 = 0;
    }
    v32 = sub_1002B7674((uint64_t)a3, (__int128 *)buf);
    v40 = *(std::__shared_weak_count **)v63;
    if (*(_QWORD *)v63)
    {
      v41 = (unint64_t *)(*(_QWORD *)v63 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (!*a3)
    {
      sub_101908F38(v32, v33, v34, v35, v36, v37, v38, v39, v46, v47, v48, v49, v50, (uint64_t)v51, v52, *((uint64_t *)&v52 + 1), __p, *((uint64_t *)&__p + 1), v54,
        v55,
        *((uint64_t *)&v55 + 1),
        v56,
        (uint64_t)v57,
        (uint64_t)v58);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.h", 360, "getOrCreatePersistentSubscriptionForClient");
      __break(1u);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289538;
      *(_WORD *)v63 = 2082;
      *(_QWORD *)&v63[2] = "";
      *(_WORD *)&v63[10] = 2082;
      *(_QWORD *)&v63[12] = (unint64_t)"18CLPushSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      *(_WORD *)&v63[20] = 2114;
      *(_QWORD *)&v63[22] = v61;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v57 = sub_10019EE88((uint64_t)a1, (uint64_t)v61, &xmmword_101C17478);
    if (v61)
    {
      objc_msgSend(v61, "cppClientKey");
    }
    else
    {
      v55 = 0uLL;
      v56 = 0;
    }
    sub_100ED01A0(&__p);
    sub_1002354C4((char *)buf, &v55, &__p, (uint64_t)v60);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
    sub_1007F6B88(a1 + 4, (uint64_t *)&v57, (uint64_t *)&v61, (uint64_t)buf, &v52);
    sub_1002B7674((uint64_t)a3, &v52);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_QWORD *)&v52 = &v60;
    v19 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)&v52);
    v21 = (_QWORD *)*a3;
    v20 = a3[1];
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)v19[4];
    v19[3] = v21;
    v19[4] = v20;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
    v25 = (_QWORD *)*a3;
    v26 = a1[128];
    v50 = a1[127];
    v51 = (std::__shared_weak_count *)v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    sub_100224578(v25, &v50);
    v29 = v51;
    if (v51)
    {
      v30 = (unint64_t *)&v51->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v64 < 0)
      operator delete(*(void **)&v63[16]);
    if ((v63[15] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1007F6AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_100261F44((uint64_t)&a30);
  sub_100261F44(v30);
  _Unwind_Resume(a1);
}

void sub_1007F6B88(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x118uLL);
  sub_1007F6C08(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1007F64F8((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007F6BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007F6C08(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_102154688;
  a1[1] = 0;
  sub_1007F6CCC((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007F6C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007F6C74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102154688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F6C88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102154688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F6CBC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1007F6CCC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  uint64_t v15;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a6;
    v12 = *(_QWORD *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a6 + 24), *(_QWORD *)(a6 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a6 + 24);
    v14 = *(_QWORD *)(a6 + 40);
  }
  v15 = *(_QWORD *)(a6 + 48);
  sub_100ECF6EC(a2, v8, v9, v10, v11);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1007F6DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F6DD4(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 __p;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  CLClientManagerAuthorizationContext *v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  _UNKNOWN **v60;
  id v61;
  uint8_t buf[8];
  _BYTE v63[30];
  char v64;

  v5 = sub_100196E90((uint64_t)a1, a2);
  v61 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    objc_msgSend(v5, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v63 = 0;
    *(_QWORD *)&v63[8] = 0;
  }
  v58 = buf;
  v6 = sub_1001ABAB4((uint64_t)(a1 + 122), buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v58) + 40;
  if ((v63[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = &v60;
  v7 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v58 = 0;
  v59 = 0;
  v8 = (std::__shared_weak_count *)v7[4];
  if (v8
    && (v9 = std::__shared_weak_count::lock(v8), (v59 = v9) != 0)
    && (v10 = v9, v11 = (void *)v7[3], (v58 = (uint8_t *)v11) != 0))
  {
    if (v12)
    {
      *(_QWORD *)buf = v12;
      *(_QWORD *)v63 = v10;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)v63 = 0;
    }
    v32 = sub_1002B7674((uint64_t)a3, (__int128 *)buf);
    v40 = *(std::__shared_weak_count **)v63;
    if (*(_QWORD *)v63)
    {
      v41 = (unint64_t *)(*(_QWORD *)v63 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (!*a3)
    {
      sub_101908F38(v32, v33, v34, v35, v36, v37, v38, v39, v46, v47, v48, v49, v50, (uint64_t)v51, v52, *((uint64_t *)&v52 + 1), __p, *((uint64_t *)&__p + 1), v54,
        v55,
        *((uint64_t *)&v55 + 1),
        v56,
        (uint64_t)v57,
        (uint64_t)v58);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.h", 360, "getOrCreatePersistentSubscriptionForClient");
      __break(1u);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289538;
      *(_WORD *)v63 = 2082;
      *(_QWORD *)&v63[2] = "";
      *(_WORD *)&v63[10] = 2082;
      *(_QWORD *)&v63[12] = (unint64_t)"24CLTranscriptSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      *(_WORD *)&v63[20] = 2114;
      *(_QWORD *)&v63[22] = v61;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v57 = sub_10019EE88((uint64_t)a1, (uint64_t)v61, &xmmword_101C17478);
    if (v61)
    {
      objc_msgSend(v61, "cppClientKey");
    }
    else
    {
      v55 = 0uLL;
      v56 = 0;
    }
    sub_1000920A0(&__p);
    sub_1002354C4((char *)buf, &v55, &__p, (uint64_t)v60);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
    sub_1007F72EC(a1 + 4, (uint64_t *)&v57, (uint64_t *)&v61, (uint64_t)buf, &v52);
    sub_1002B7674((uint64_t)a3, &v52);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_QWORD *)&v52 = &v60;
    v19 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)&v52);
    v21 = (_QWORD *)*a3;
    v20 = a3[1];
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)v19[4];
    v19[3] = v21;
    v19[4] = v20;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
    v25 = (_QWORD *)*a3;
    v26 = a1[128];
    v50 = a1[127];
    v51 = (std::__shared_weak_count *)v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    sub_100224578(v25, &v50);
    v29 = v51;
    if (v51)
    {
      v30 = (unint64_t *)&v51->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v64 < 0)
      operator delete(*(void **)&v63[16]);
    if ((v63[15] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1007F7248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_100261F44((uint64_t)&a30);
  sub_100261F44(v30);
  _Unwind_Resume(a1);
}

void sub_1007F72EC(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x190uLL);
  sub_1007F736C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1007F64F8((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007F7358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007F736C(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_1021546D8;
  a1[1] = 0;
  sub_1007F7430((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007F73C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007F73D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021546D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F73EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021546D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F7420(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1007F7430(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  uint64_t v15;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a6;
    v12 = *(_QWORD *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a6 + 24), *(_QWORD *)(a6 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a6 + 24);
    v14 = *(_QWORD *)(a6 + 40);
  }
  v15 = *(_QWORD *)(a6 + 48);
  sub_100E51D5C(a2, v8, v9, v10, v11);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1007F750C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007F7538(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void **v5;
  id v6;
  void *__p[2];
  char v9;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v3, "isValidCKP"))
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 8) + 136);
  sub_101001FEC(__p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = objc_msgSend(v4, "hasValueForKey:atKeyPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), v3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1007F75E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007F7600(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F76A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F772C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7740(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F77CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F77E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7880(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7920(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F79AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F79C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7A60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7B00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7BA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7C40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7CE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7D80(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_OWORD *sub_1007F7E20(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 6) = v8;
    *((_QWORD *)v6 + 7) = v9;
    sub_1000145B0(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1007F7EB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1007F7F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1007F7F50(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1007F7FA4(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1007F7FA4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1007F61B0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_1007F7FE0(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *(_QWORD *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    v5 = 5381;
    do
    {
      v3 = v5;
      v6 = *v4++;
      v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v3;
    if (v3 >= *(_QWORD *)&v7)
      v10 = v3 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v3;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v13 == v3)
      {
        if (sub_100270DE8(v12[2], *a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
        }
        else
        {
          v13 &= *(_QWORD *)&v7 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_1007F80F0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_1000592D8(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    sub_1007F6264((uint64_t)&v6, v3);
  return v2;
}

uint64_t sub_1007F8138(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1007F8194((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_1007F8194(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1007A26B8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1007F81D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007A28B0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1007F81E8@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0xD8uLL);
  result = sub_1007F8240((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1007F822C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F8240(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102154728;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1001AF190((char *)(a1 + 24), (__int128 *)a2);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 184);
  return a1;
}

void sub_1007F8284(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007F8298(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102154728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F82AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102154728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F82E0(uint64_t a1)
{
  return sub_100010174(a1 + 24);
}

void sub_1007F82EC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1007F8318(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x200uLL);
  sub_1007F8398(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1007F64F8((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007F8384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007F8398(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_102154798;
  a1[1] = 0;
  sub_1007F845C((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007F83F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007F8404(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102154798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F8418(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102154798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F844C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1007F845C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  uint64_t v15;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a6;
    v12 = *(_QWORD *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a6 + 24), *(_QWORD *)(a6 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a6 + 24);
    v14 = *(_QWORD *)(a6 + 40);
  }
  v15 = *(_QWORD *)(a6 + 48);
  sub_101001550(a2, v8, v9, v10, v11);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1007F8538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1007F8564@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1007F85B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F85C4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_1002A1D84(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1007F8620(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A1C94(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1007F8638(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1007F86CC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_1007F86CC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007F8754(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1007F8770(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1007F8818((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1007F88A8((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1007F8818@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1007F8890(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007F88A8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1007F88A8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1007F88EC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1007F88EC(uint64_t a1)
{
  sub_1007F9198((uint64_t *)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1007F892C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_100C1EE6C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1007F8960(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_100010174(result);
    operator delete();
  }
  return result;
}

void sub_1007F8994(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021548F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F89A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021548F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F89DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1007F89EC(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xB8uLL);
  sub_1007F8A54(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1007F64F8((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_1007F8A40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1007F8A54(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;

  a1[2] = 0;
  *a1 = off_102154940;
  a1[1] = 0;
  v4 = a1 + 3;
  if (*a2)
    v5 = *a2 + 112;
  else
    v5 = 0;
  sub_100C1EF10(v4, v5, *a3);
  return a1;
}

void sub_1007F8AA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007F8AB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102154940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007F8AC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102154940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1007F8AFC(uint64_t a1)
{
  return sub_100C1F058(a1 + 24);
}

void sub_1007F8B08(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1007F8B08(a1, *a2);
    sub_1007F8B08(a1, a2[1]);
    sub_1007F88EC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1007F8B50(uint64_t a1)
{
  void *v2;

  sub_1007F7FA4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1007F8B88(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1007F8BC8((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

void sub_1007F8BC8(uint64_t a1, _QWORD *a2)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a1 + 8); i != a2; sub_1007E6D58(i))
    i -= 4;
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_1007F8C14(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1007F8C14(a1, *a2);
    sub_1007F8C14(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 8));
    sub_1007A28B0((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_1007F8C6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1007F8CE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1007F8CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v10;
      v9 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_1007F8D68((uint64_t)v12);
  return a6;
}

uint64_t sub_1007F8D68(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1007F8D9C((uint64_t *)a1);
  return a1;
}

_QWORD *sub_1007F8D9C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_1007F8E10(v4, (uint64_t)v14, (uint64_t)v9);
}

_QWORD *sub_1007F8E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  for (result = *(_QWORD **)(a2 + 32); result != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    sub_1007E6D58(result);
    result = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32);
  }
  return result;
}

uint64_t sub_1007F8E60(uint64_t a1)
{
  sub_1007F8E94(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1007F8E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 32;
    sub_1007E6D58((_QWORD *)(v4 - 32));
  }
}

void sub_1007F8ED4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100C1EE6C(v4 - 80);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1007F8F44(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _OWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002952D4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[80 * v4];
  v16 = &v10[80 * v9];
  sub_1001FA140(v14, a2);
  v15 = v14 + 80;
  sub_1007F9048(a1, &v13);
  v11 = a1[1];
  sub_1007F914C((uint64_t)&v13);
  return v11;
}

void sub_1007F9034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1007F914C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F9048(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1007F90BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1007F90BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;

  v10 = 0;
  v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    v12 = (_OWORD *)(v11 + v10);
    v10 -= 80;
    sub_1001FA140(v12, (__int128 *)(v10 + a3));
  }
  return a6;
}

uint64_t sub_1007F914C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_100C1EE6C(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1007F9198(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100C1EE6C();
    operator delete();
  }
  return result;
}

uint64_t sub_1007F91D4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_100311C38(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1007F9230(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A1C94(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1007F9248@<X0>(unsigned __int8 *result@<X0>, const void ***a2@<X1>, const void ***a3@<X2>, const void ***a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  const void **v9;
  const void **v10;
  const void **v13;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(const void ***)result;
  v10 = *a2;
  if (*(const void ***)result == *a2)
  {
LABEL_14:
    v19 = *a5;
LABEL_15:
    v20 = a5[1];
    goto LABEL_16;
  }
  v13 = *a3;
  if (*a3 != *a4)
  {
    v16 = result;
    while (!sub_100279008(a6, v9 + 2, v13 + 2))
    {
      result = (unsigned __int8 *)sub_100279008(a6, *a3 + 2, (const void **)(*(_QWORD *)v16 + 16));
      v18 = (unsigned __int8 *)a3;
      if ((result & 1) == 0)
      {
        result = *(unsigned __int8 **)v16;
        v17 = v16;
        v18 = (unsigned __int8 *)a3;
        goto LABEL_8;
      }
LABEL_9:
      *(_QWORD *)v18 = **(_QWORD **)v18;
      v9 = *(const void ***)v16;
      v10 = *a2;
      if (*(const void ***)v16 == *a2)
        goto LABEL_14;
      v13 = *a3;
      if (*a3 == *a4)
        goto LABEL_11;
    }
    result = sub_100311C38(*a5, (unsigned __int8 *)(*(_QWORD *)v16 + 16), *(_QWORD *)v16 + 16);
    a5[1] = (uint64_t)result;
    v17 = (unsigned __int8 *)(a5 + 1);
    v18 = v16;
LABEL_8:
    *(_QWORD *)v17 = *(_QWORD *)result;
    goto LABEL_9;
  }
LABEL_11:
  v19 = *a5;
  if (v9 == v10)
    goto LABEL_15;
  do
  {
    result = sub_100311C38(v19, (unsigned __int8 *)v9 + 16, (uint64_t)(v9 + 2));
    v9 = (const void **)*v9;
  }
  while (v9 != v10);
  v20 = *(_QWORD *)result;
  v9 = v10;
LABEL_16:
  *a7 = v9;
  a7[1] = (const void **)v19;
  a7[2] = (const void **)v20;
  return result;
}

_OWORD *sub_1007F939C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_10019C424((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    sub_1000145B0(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_1007F88A8((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t sub_1007F945C(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10019C4C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_1007F88EC((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

id sub_1007F94B4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BC2225 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BC2225 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLClientManager_Type::RegInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1007F9860()
{
  operator new();
}

void sub_1007F98FC()
{
  operator delete();
}

uint64_t sub_1007F9920(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_100010174(result);
    operator delete();
  }
  return result;
}

BOOL sub_1007F9954()
{
  return os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_1007F9968()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 472), OS_LOG_TYPE_INFO);
}

BOOL sub_1007F9978()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 472));
}

BOOL sub_1007F9A04()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 472));
}

uint64_t sub_1007F9A28()
{
  uint64_t v0;

  return sub_100026CC8(v0);
}

void sub_1007F9A30()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BC1D20;
      v1[3] = unk_101BC1D30;
      v1[4] = xmmword_101BC1D40;
      v1[0] = xmmword_101BC1D00;
      v1[1] = unk_101BC1D10;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1007F9B04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

NSArray *sub_1007F9B1C()
{
  uint64_t i;
  _QWORD *v1;
  NSArray *result;
  _QWORD v3[3];
  const __CFString *v4;
  _QWORD v5[3];

  sub_1015A2E04(v3, "com.apple.findmy.people");
  sub_1015A2E04(&v4, "com.apple.findmy.devices");
  sub_1015A2E04(v5, "com.apple.findmy.items");
  sub_1007F5EAC((uint64_t)qword_1023049C8, (unsigned __int8 *)v3, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v5[i + 2]) < 0)
      operator delete((void *)v5[i]);
  }
  __cxa_atexit((void (*)(void *))sub_1007B61AC, qword_1023049C8, (void *)&_mh_execute_header);
  qword_1023049F8 = 0;
  unk_102304A00 = 0;
  qword_1023049F0 = 0;
  v1 = operator new(8uLL);
  qword_1023049F0 = (uint64_t)v1;
  *v1 = 10;
  qword_1023049F8 = (uint64_t)(v1 + 1);
  unk_102304A00 = v1 + 1;
  __cxa_atexit((void (*)(void *))sub_1007B61B0, &qword_1023049F0, (void *)&_mh_execute_header);
  v3[0] = CFSTR("LocationTimeStarted");
  v3[1] = CFSTR("SignificantTimeStarted");
  v3[2] = CFSTR("RangeTimeStarted");
  v4 = CFSTR("BeaconRegionTimeStarted");
  result = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 4);
  qword_102304A08 = (uint64_t)result;
  return result;
}

void sub_1007F9CA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0)
      operator delete(*(void **)(v1 + v3 + 48));
    v3 -= 24;
    if (v3 == -72)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_1007F9D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1021549B8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_101BC22F0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 175) = 0;
  *(_OWORD *)(a1 + 184) = xmmword_101BC2300;
  sub_100270E34(a1 + 200, a3);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v4 = objc_alloc_init((Class)MADownloadOptions);
  *(_QWORD *)(a1 + 232) = v4;
  objc_msgSend(v4, "setDiscretionary:", 0);
  objc_msgSend(*(id *)(a1 + 232), "setAllowsCellularAccess:", 1);
  objc_msgSend(*(id *)(a1 + 232), "setAllowsExpensiveAccess:", 1);
  objc_msgSend(*(id *)(a1 + 232), "setRequiresPowerPluggedIn:", 0);
  v13 = 0;
  sub_1001E4804(&v11);
  v5 = sub_10052655C(v11, "MADownloadTimeout", &v13);
  v6 = v5;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (v5)
LABEL_6:
    objc_msgSend(*(id *)(a1 + 232), "setTimeoutIntervalForResource:", v13);
LABEL_7:
  *(_QWORD *)(a1 + 240) = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "vendor"), "proxyForService:", CFSTR("CLAnalyticsLogger"));
  return a1;
}

void sub_1007F9E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  v7 = *(_QWORD **)(v2 + 224);
  if (v7 == v3)
  {
    v8 = 4;
    v7 = v3;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  if (*(char *)(v2 + 103) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F9EF8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021549B8;

  *(_QWORD *)(a1 + 232) = 0;
  objc_msgSend(*(id *)(a1 + 144), "invalidate");

  *(_QWORD *)(a1 + 144) = 0;
  objc_msgSend(*(id *)(a1 + 152), "invalidate");

  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v2 = *(_QWORD **)(a1 + 224);
  if (v2 == (_QWORD *)(a1 + 200))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 200);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void *sub_1007F9FC0(void *result)
{
  void *v1;
  unint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  char *v6;
  _DWORD v7[2];
  __int16 v8;
  id v9;
  uint8_t buf[4];
  unsigned int v11;
  __int16 v12;
  id v13;

  if (result)
  {
    v1 = result;
    v2 = (unint64_t)objc_msgSend(result, "state");
    if (v2 >= 7)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v3 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240451;
        v11 = objc_msgSend(v1, "state");
        v12 = 2113;
        v13 = objc_msgSend(v1, "attributes");
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLMA,isAssetOnDisk,asset has unexpected state,%{public}d,attributes,%{private}@", buf, 0x12u);
      }
      v4 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v5 = qword_1022A02A8;
        v7[0] = 67240451;
        v7[1] = objc_msgSend(v1, "state");
        v8 = 2113;
        v9 = objc_msgSend(v1, "attributes");
        v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "#CLMA,isAssetOnDisk,asset has unexpected state,%{public}d,attributes,%{private}@", v7, 18);
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLMobileAsset::isAssetOnDisk(MAAsset *)", "%s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
        return 0;
      }
    }
    else
    {
      return (void *)((0x6Cu >> v2) & 1);
    }
  }
  return result;
}

void *sub_1007FA1D8(void *result)
{
  void *v1;
  unint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[2];
  __int16 v9;
  id v10;
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  id v14;

  if (result)
  {
    v1 = result;
    v2 = (unint64_t)objc_msgSend(result, "state");
    if (v2 >= 7)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v3 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240451;
        v12 = objc_msgSend(v1, "state");
        v13 = 2113;
        v14 = objc_msgSend(v1, "attributes");
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLMA,isAssetPreInstalled,asset has unexpected state,%{public}d,attributes,%{private}@", buf, 0x12u);
      }
      v4 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v5 = qword_1022A02A8;
        v8[0] = 67240451;
        v8[1] = objc_msgSend(v1, "state");
        v9 = 2113;
        v10 = objc_msgSend(v1, "attributes");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "#CLMA,isAssetPreInstalled,asset has unexpected state,%{public}d,attributes,%{private}@", v8, 18);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLMobileAsset::isAssetPreInstalled(MAAsset *)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
        return 0;
      }
    }
    else
    {
      return (void *)((0x60u >> v2) & 1);
    }
  }
  return result;
}

void *sub_1007FA3F0(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    result = sub_1007F9FC0(result);
    if ((_DWORD)result)
      return (void *)(sub_1007FA1D8(v1) ^ 1);
  }
  return result;
}

uint64_t sub_1007FA424(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  objc_class *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  const char *v22;
  const char *v23;
  uint8_t *v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  objc_class *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  const char *v41;
  uint8_t buf[4];
  const char *v43;
  _BYTE v44[128];

  if (result)
  {
    result = (uint64_t)objc_msgSend(objc_msgSend((id)result, "attributes"), "objectForKey:", a2);
    if (result)
    {
      v5 = (void *)result;
      v6 = objc_opt_class(NSString, v4);
      if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
      {
        return (uint64_t)objc_msgSend(a3, "isEqualToString:", v5);
      }
      else
      {
        v8 = objc_opt_class(NSArray, v7);
        if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
        {
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          result = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          if (result)
          {
            v10 = (id)result;
            v11 = *(_QWORD *)v37;
            do
            {
              for (i = 0; i != v10; i = (char *)i + 1)
              {
                if (*(_QWORD *)v37 != v11)
                  objc_enumerationMutation(v5);
                v13 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
                v14 = objc_opt_class(NSString, v9);
                if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
                {
                  if ((objc_msgSend(a3, "isEqualToString:", v13) & 1) != 0)
                    return 1;
                }
                else
                {
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_102154B58);
                  v15 = qword_1022A02A8;
                  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                  {
                    v17 = (objc_class *)objc_opt_class(v13, v16);
                    v18 = -[NSString UTF8String](NSStringFromClass(v17), "UTF8String");
                    *(_DWORD *)buf = 136446210;
                    v43 = v18;
                    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLMA,hasAttribute,unexpected attribute type in array,%{public}s", buf, 0xCu);
                  }
                  if (sub_1001BFF7C(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A02A0 != -1)
                      dispatch_once(&qword_1022A02A0, &stru_102154B58);
                    v20 = qword_1022A02A8;
                    v21 = (objc_class *)objc_opt_class(v13, v19);
                    v22 = -[NSString UTF8String](NSStringFromClass(v21), "UTF8String");
                    v40 = 136446210;
                    v41 = v22;
                    LODWORD(v35) = 12;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 16, "#CLMA,hasAttribute,unexpected attribute type in array,%{public}s", &v40, v35);
                    v24 = (uint8_t *)v23;
                    sub_100512490("Generic", 1, 0, 0, "static BOOL CLMobileAsset::hasAttribute(MAAsset *, NSString *, NSString *)", "%s\n", v23);
                    if (v24 != buf)
                      free(v24);
                  }
                }
              }
              v25 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
              v10 = v25;
              result = 0;
            }
            while (v10);
          }
        }
        else
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102154B58);
          v26 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            v28 = (objc_class *)objc_opt_class(v5, v27);
            *(_DWORD *)buf = 136446210;
            v43 = -[NSString UTF8String](NSStringFromClass(v28), "UTF8String");
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#CLMA,hasAttribute,unexpected attribute type,%{public}s", buf, 0xCu);
          }
          v29 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v29)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_102154B58);
            v31 = qword_1022A02A8;
            v32 = (objc_class *)objc_opt_class(v5, v30);
            v40 = 136446210;
            v41 = -[NSString UTF8String](NSStringFromClass(v32), "UTF8String");
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 16, "#CLMA,hasAttribute,unexpected attribute type,%{public}s", &v40, 12);
            v34 = (uint8_t *)v33;
            sub_100512490("Generic", 1, 0, 0, "static BOOL CLMobileAsset::hasAttribute(MAAsset *, NSString *, NSString *)", "%s\n", v33);
            if (v34 != buf)
              free(v34);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1007FA8C8(void *a1)
{
  id v1;
  id v2;

  if (a1
    && (v1 = objc_msgSend(a1, "attributes"), (v2 = objc_msgSend(v1, "objectForKey:", ASAttributeContentVersion)) != 0))
  {
    return (uint64_t)objc_msgSend(v2, "intValue");
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1007FA8FC(void *a1)
{
  id v1;
  id v2;

  if (a1
    && (v1 = objc_msgSend(a1, "attributes"),
        (v2 = objc_msgSend(v1, "objectForKey:", ASAttributeCompatibilityVersion)) != 0))
  {
    return (uint64_t)objc_msgSend(v2, "intValue");
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_1007FA930(__int128 *a1, void *a2)
{
  _QWORD v3[4];
  __int128 __p;
  uint64_t v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1007FA9E8;
  v3[3] = &unk_102154A08;
  if (*((char *)a1 + 23) < 0)
  {
    sub_100115CE4(&__p, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __p = *a1;
    v5 = *((_QWORD *)a1 + 2);
  }
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v3);
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
}

void sub_1007FA9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007FA9E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  size_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  void *__p[2];
  uint64_t v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[24];
  uint64_t v32;

  v6 = objc_opt_class(NSDictionary, a2);
  if ((objc_opt_isKindOfClass(a3, v6) & 1) != 0)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = objc_msgSend(a2, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}s%{private}s dict", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v20 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v20 = (_QWORD *)*v20;
      v21 = qword_1022A02A8;
      v25 = 136446467;
      v26 = v20;
      v27 = 2081;
      v28 = objc_msgSend(a2, "UTF8String");
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "%{public}s%{private}s dict", &v25, 22);
      sub_100512490("Generic", 1, 0, 2, "static void CLMobileAsset::printDict(std::string, NSDictionary *)_block_invoke", "%s\n", v22);
      if (v22 != buf)
        free(v22);
    }
    if (*(char *)(a1 + 55) >= 0)
      v9 = *(unsigned __int8 *)(a1 + 55);
    else
      v9 = *(_QWORD *)(a1 + 40);
    v10 = buf;
    sub_100259584((uint64_t)buf, v9 + 3);
    if (buf[23] < 0)
      v10 = *(_BYTE **)buf;
    if (v9)
    {
      v13 = *(char **)(a1 + 32);
      v12 = (char *)(a1 + 32);
      v11 = v13;
      if (v12[23] >= 0)
        v14 = v12;
      else
        v14 = v11;
      memmove(v10, v14, v9);
    }
    *(_DWORD *)&v10[v9] = 2105376;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_100115CE4(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)buf;
      v24 = *(_QWORD *)&buf[16];
    }
    sub_1007FA930(__p, a3);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v15 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v16 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v16 = (_QWORD *)*v16;
      *(_DWORD *)buf = 136446723;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = objc_msgSend(a2, "UTF8String");
      *(_WORD *)&buf[22] = 2113;
      v32 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%{public}s%{private}s = %{private}@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v17 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v17 = (_QWORD *)*v17;
      v18 = qword_1022A02A8;
      v25 = 136446723;
      v26 = v17;
      v27 = 2081;
      v28 = objc_msgSend(a2, "UTF8String");
      v29 = 2113;
      v30 = a3;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "%{public}s%{private}s = %{private}@", &v25, 32);
      sub_100512490("Generic", 1, 0, 2, "static void CLMobileAsset::printDict(std::string, NSDictionary *)_block_invoke", "%s\n", v19);
      if (v19 != buf)
        free(v19);
    }
  }
}

void sub_1007FAE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1007FAE9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  id v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  uint64_t v29;
  id v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  id v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[5];
  _QWORD v52[5];
  _BYTE v53[38];
  _BYTE buf[1634];

  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "MACatalogDownloadOnStartup", (BOOL *)(a1 + 176));
  v2 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v3 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1001E4804(buf);
  sub_1005262B4(*(uint64_t *)buf, "MACatalogDownloadInterval", (_QWORD *)(a1 + 184));
  v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1001E4804(buf);
  sub_1005262B4(*(uint64_t *)buf, "MAAgressiveCatalogDownloadInterval", (_QWORD *)(a1 + 192));
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v11 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v13 = *(unsigned __int8 *)(a1 + 176);
    v14 = *(_QWORD *)(a1 + 184);
    v15 = *(_QWORD *)(a1 + 192);
    *(_DWORD *)buf = 136381443;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v13;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v14;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog update check settings,downloadOnStatup,%{public}d,interval,%{public}lld,agressiveInterval,%{public}lld", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v37 = qword_1022A02A8;
    v38 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v39 = *(unsigned __int8 *)(a1 + 176);
    v40 = *(_QWORD *)(a1 + 184);
    v41 = *(_QWORD *)(a1 + 192);
    *(_DWORD *)v53 = 136381443;
    *(_QWORD *)&v53[4] = v38;
    *(_WORD *)&v53[12] = 1026;
    *(_DWORD *)&v53[14] = v39;
    *(_WORD *)&v53[18] = 2050;
    *(_QWORD *)&v53[20] = v40;
    *(_WORD *)&v53[28] = 2050;
    *(_QWORD *)&v53[30] = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#CLMA,%{private}s,catalog update check settings,downloadOnStatup,%{public}d,interval,%{public}lld,agressiveInterval,%{public}lld", v53, 38);
    v43 = (char *)v42;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  sub_1001E4804(buf);
  sub_1005262B4(*(uint64_t *)buf, "MAFirstPurgeCheckDelay", (_QWORD *)(a1 + 32));
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_1001E4804(buf);
  sub_1005262B4(*(uint64_t *)buf, "MAPurgeCheckInterval", (_QWORD *)(a1 + 40));
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v22 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v23 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136381187;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v24;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge check settings,delay,%{public}lld,interval,%{public}lld", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v44 = qword_1022A02A8;
    v45 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v46 = *(_QWORD *)(a1 + 32);
    v47 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)v53 = 136381187;
    *(_QWORD *)&v53[4] = v45;
    *(_WORD *)&v53[12] = 2050;
    *(_QWORD *)&v53[14] = v46;
    *(_WORD *)&v53[22] = 2050;
    *(_QWORD *)&v53[24] = v47;
    LODWORD(v50) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "#CLMA,%{private}s,asset purge check settings,delay,%{public}lld,interval,%{public}lld", v53, v50);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  sub_1015A2E04(buf, "com.apple.locationd.MACatalogDownload.");
  v26 = std::string::append((std::string *)buf, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 56), "UTF8String"));
  v27 = v26->__r_.__value_.__r.__words[0];
  *(_QWORD *)v53 = v26->__r_.__value_.__l.__size_;
  *(_QWORD *)&v53[7] = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v29 = *(_QWORD *)v53;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 95) = *(_QWORD *)&v53[7];
  *(_BYTE *)(a1 + 103) = v28;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_1007FB5F4(a1);
  v30 = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "silo"), "newTimer");
  *(_QWORD *)(a1 + 144) = v30;
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_1007FC1D4;
  v52[3] = &unk_10212ECA0;
  v52[4] = a1;
  objc_msgSend(v30, "setHandler:", v52);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 1);
  if (*(_BYTE *)(a1 + 176))
    sub_1007FCBCC(a1);
  else
    sub_1007FC7E8(a1);
  sub_1015A2E04(buf, "com.apple.locationd.AssetPurge.");
  v31 = std::string::append((std::string *)buf, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 56), "UTF8String"));
  v32 = v31->__r_.__value_.__r.__words[0];
  *(_QWORD *)v53 = v31->__r_.__value_.__l.__size_;
  *(_QWORD *)&v53[7] = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  v34 = *(_QWORD *)v53;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)&v53[7];
  *(_BYTE *)(a1 + 31) = v33;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_1007FD010(a1);
  v35 = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "silo"), "newTimer");
  *(_QWORD *)(a1 + 152) = v35;
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_1007FD314;
  v51[3] = &unk_10212ECA0;
  v51[4] = a1;
  objc_msgSend(v35, "setHandler:", v51);
  return objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 600.0);
}

void sub_1007FB5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_100261F44((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1007FB5F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  NSObject *v6;
  id v7;
  int v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  _QWORD v53[2];
  int v54;
  id v55;
  uint8_t buf[4];
  id v57;

  v2 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
  sub_100119F3C(v53);
  v3 = sub_1001FD94C();
  v4 = (_QWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v4 = (_QWORD *)*v4;
  if (sub_100219D08(v3, (uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), v53))
  {
    v5 = sub_1001FD9FC((uint64_t)v53, (uint64_t)CFSTR("kLastAttemptedCatalogDownloadKey"), (void *)(a1 + 104));
    if ((v5 & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v6 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v7 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v57 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last attempted catalog download", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v26 = qword_1022A02A8;
        v27 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v54 = 136380675;
        v55 = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 16, "#CLMA,%{private}s,cache did not contain time of last attempted catalog download", &v54, 12);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
    if ((sub_1001FD9FC((uint64_t)v53, (uint64_t)CFSTR("kLastSuccessfulCatalogDownloadKey"), (void *)(a1 + 112)) & 1) != 0)
    {
      v8 = v5 ^ 1;
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v11 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v12 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v57 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last successful catalog download", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v30 = qword_1022A02A8;
        v31 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v54 = 136380675;
        v55 = v31;
        LODWORD(v50) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 16, "#CLMA,%{private}s,cache did not contain time of last successful catalog download", &v54, v50);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v8 = 1;
    }
    if ((sub_1001FD9FC((uint64_t)v53, (uint64_t)CFSTR("kLastAttemptedAssetDownloadKey"), (void *)(a1 + 120)) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v13 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v14 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v57 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last attempted asset download", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v34 = qword_1022A02A8;
        v35 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v54 = 136380675;
        v55 = v35;
        LODWORD(v50) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 16, "#CLMA,%{private}s,cache did not contain time of last attempted asset download", &v54, v50);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      v8 = 1;
    }
    if ((sub_1001FD9FC((uint64_t)v53, (uint64_t)CFSTR("kLastSuccessfulAssetDownloadKey"), (void *)(a1 + 128)) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v16 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v57 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last successful asset download", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v38 = qword_1022A02A8;
        v39 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v54 = 136380675;
        v55 = v39;
        LODWORD(v50) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 16, "#CLMA,%{private}s,cache did not contain time of last successful asset download", &v54, v50);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      v8 = 1;
    }
    if ((sub_1001FD9FC((uint64_t)v53, (uint64_t)CFSTR("kLastDownloadNotTriggeredKey"), (void *)(a1 + 160)) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v17 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v18 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v57 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last download not triggered AWD", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v42 = qword_1022A02A8;
        v43 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v54 = 136380675;
        v55 = v43;
        LODWORD(v50) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 16, "#CLMA,%{private}s,cache did not contain time of last download not triggered AWD", &v54, v50);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      v8 = 1;
    }
    if ((sub_1001FD9FC((uint64_t)v53, (uint64_t)CFSTR("kLastVersionReportingAwdKey"), (void *)(a1 + 168)) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v19 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v20 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v57 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last version reporting AWD", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v46 = qword_1022A02A8;
        v47 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v54 = 136380675;
        v55 = v47;
        LODWORD(v50) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 16, "#CLMA,%{private}s,cache did not contain time of last version reporting AWD", &v54, v50);
        v49 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
      v8 = 1;
    }
    sub_1015A2E04(__p, "loaded");
    sub_1007FD7D4(a1, (uint64_t *)__p);
    if ((v52 & 0x80000000) == 0)
    {
      if (!v8)
        return sub_10011A5A8(v53);
      goto LABEL_56;
    }
    operator delete(__p[0]);
    if (v8)
LABEL_56:
      sub_1007FD68C((char *)a1);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      v57 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,no download stats available", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v22 = qword_1022A02A8;
      v23 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v54 = 136380675;
      v55 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#CLMA,%{private}s,no download stats available", &v54, 12);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    sub_1007FD68C((char *)a1);
  }
  return sub_10011A5A8(v53);
}

void sub_1007FC148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

id sub_1007FC1D4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  CFAbsoluteTime v10;
  NSObject *v11;
  id v12;
  void *v13;
  double v14;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  id v32;
  uint8_t buf[4];
  id v34;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
    *(_DWORD *)buf = 136380675;
    v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,agressive download check timer fired", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v18 = qword_1022A02A8;
    v19 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
    v31 = 136380675;
    v32 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#CLMA,%{private}s,agressive download check timer fired", &v31, 12);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (*(_BYTE *)(v1 + 136))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,agressive download already scheduled", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v6 = qword_1022A02A8;
      v7 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
      v31 = 136380675;
      v32 = v7;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#CLMA,%{private}s,agressive download already scheduled", &v31, v30);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
LABEL_23:
    v13 = *(void **)(v1 + 144);
    v14 = 1.79769313e308;
    return objc_msgSend(v13, "setNextFireDelay:", v14);
  }
  v10 = (double)*(uint64_t *)(v1 + 192);
  if (CFAbsoluteTimeGetCurrent() - *(double *)(v1 + 112) > v10)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v11 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,time to switch to agressive downloads", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v22 = qword_1022A02A8;
      v23 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
      v31 = 136380675;
      v32 = v23;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#CLMA,%{private}s,time to switch to agressive downloads", &v31, v30);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    sub_1007FC7E8(v1);
    goto LABEL_23;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v16 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
    *(_DWORD *)buf = 136380675;
    v34 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,not time to switch to agressive downloads", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v26 = qword_1022A02A8;
    v27 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
    v31 = 136380675;
    v32 = v27;
    LODWORD(v30) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#CLMA,%{private}s,not time to switch to agressive downloads", &v31, v30);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  v13 = *(void **)(v1 + 144);
  v14 = (double)(*(_QWORD *)(v1 + 184) / 2);
  return objc_msgSend(v13, "setNextFireDelay:", v14);
}

id sub_1007FC7E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  double v5;
  CFAbsoluteTime Current;
  int64_t v7;
  CFAbsoluteTime v8;
  xpc_object_t v9;
  NSObject *v10;
  id v11;
  int v12;
  const char *v13;
  double v14;
  uint64_t v16;
  id v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  _QWORD handler[5];
  int v22;
  id v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int64_t v27;
  __int16 v28;
  int64_t v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int64_t v35;
  __int16 v36;
  int64_t v37;

  v2 = *(_QWORD *)(a1 + 184);
  if (v2 >= 0)
    v3 = *(_QWORD *)(a1 + 184);
  else
    v3 = v2 + 1;
  v4 = v3 >> 1;
  if (*(double *)(a1 + 104) == 0.0)
  {
    v7 = 0;
  }
  else
  {
    v5 = *(double *)(a1 + 104) + (double)(3 * v2 / 4);
    Current = CFAbsoluteTimeGetCurrent();
    v7 = (uint64_t)(v5 - Current) & ~((uint64_t)(v5 - Current) >> 63);
  }
  v8 = (double)*(uint64_t *)(a1 + 192);
  *(_BYTE *)(a1 + 136) = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 112) > v8;
  v9 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_string(v9, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, *(_BYTE *)(a1 + 136) == 0);
  xpc_dictionary_set_string(v9, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v9, XPC_ACTIVITY_DELAY, v7);
  xpc_dictionary_set_int64(v9, XPC_ACTIVITY_GRACE_PERIOD, v4);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v10 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v12 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 136381443;
    v31 = v11;
    v32 = 1026;
    v33 = v12;
    v34 = 2050;
    v35 = v7;
    v36 = 2050;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,registering catalog download activity,agressiveDownload,%{public}d,delay,%{public}lld,gracePeriod,%{public}lld", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v16 = qword_1022A02A8;
    v17 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v18 = *(unsigned __int8 *)(a1 + 136);
    v22 = 136381443;
    v23 = v17;
    v24 = 1026;
    v25 = v18;
    v26 = 2050;
    v27 = v7;
    v28 = 2050;
    v29 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#CLMA,%{private}s,registering catalog download activity,agressiveDownload,%{public}d,delay,%{public}lld,gracePeriod,%{public}lld", &v22, 38);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::registerCatalogDownloadActivity()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v13 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v13 = *(const char **)v13;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1007FDA54;
  handler[3] = &unk_102154A38;
  handler[4] = a1;
  xpc_activity_register(v13, v9, handler);
  xpc_release(v9);
  v14 = (double)(v7 + v4);
  if (*(_BYTE *)(a1 + 136))
    v14 = 1.79769313e308;
  return objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", v14);
}

void sub_1007FCBCC(uint64_t a1)
{
  CFAbsoluteTime Current;
  CFAbsoluteTime *v3;
  CFAbsoluteTime *v4;
  double v5;
  double v6;
  double v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[6];
  uint64_t v20;
  CFAbsoluteTime *v21;
  uint64_t v22;
  __n128 (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  void *v25;
  char v26;
  unint64_t v27;
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *__p;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  id v62;
  __int16 v63;
  id v64;
  uint8_t buf[4];
  id v66;
  __int16 v67;
  id v68;

  if (!*(_BYTE *)(a1 + 177))
  {
    *(_BYTE *)(a1 + 177) = 1;
    v20 = 0;
    v21 = (CFAbsoluteTime *)&v20;
    v23 = sub_100206D7C;
    v24 = sub_100207B2C;
    v22 = 0x14812000000;
    v25 = &unk_102080316;
    v27 = 0xBFF0000000000000;
    *(_OWORD *)v28 = 0u;
    v29 = 0u;
    v30 = 0;
    v31 = -1;
    v32 = -2;
    v33 = -1;
    v34 = -1;
    v35 = -1;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v40 = -1;
    v41 = -1;
    v39 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v47 = -1;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v53 = -1;
    v54 = 0;
    __p = 0;
    v56 = 0;
    v58 = -1;
    v59 = -1;
    v57 = 0;
    v60 = 0;
    v26 = 1;
    Current = CFAbsoluteTimeGetCurrent();
    v3 = v21;
    v21[7] = Current;
    std::string::assign((std::string *)(v3 + 8), "com.apple.locationd");
    v4 = v21;
    *((_DWORD *)v21 + 23) = *(_DWORD *)(a1 + 72);
    v5 = v4[7];
    if (v5 > 0.0)
    {
      v6 = *(double *)(a1 + 104);
      if (v6 > 0.0)
        *((_DWORD *)v4 + 29) = llround((v5 - v6) / 86400.0);
    }
    if (v5 > 0.0)
    {
      v7 = *(double *)(a1 + 112);
      if (v7 > 0.0)
        *((_DWORD *)v4 + 30) = llround((v5 - v7) / 86400.0);
    }
    *((_BYTE *)v4 + 132) = *(_BYTE *)(a1 + 136);
    v8 = objc_msgSend(*(id *)(a1 + 232), "description");
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v11 = objc_msgSend(v8, "UTF8String");
      *(_DWORD *)buf = 136380931;
      v66 = v10;
      v67 = 2081;
      v68 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,starting catalog download with options,%{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v14 = qword_1022A02A8;
      v15 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v16 = objc_msgSend(v8, "UTF8String");
      v61 = 136380931;
      v62 = v15;
      v63 = 2081;
      v64 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLMA,%{private}s,starting catalog download with options,%{private}s", &v61, 22);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 232);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1007FDE50;
    v19[3] = &unk_102154A88;
    v19[4] = &v20;
    v19[5] = a1;
    +[MAAsset startCatalogDownload:options:then:](MAAsset, "startCatalogDownload:options:then:", v12, v13, v19);
    *(CFAbsoluteTime *)(a1 + 104) = CFAbsoluteTimeGetCurrent();
    sub_1007FD68C((char *)a1);
    _Block_object_dispose(&v20, 8);
    if (SHIBYTE(v57) < 0)
      operator delete(__p);
    if (SHIBYTE(v51) < 0)
      operator delete(v49);
    if (SHIBYTE(v45) < 0)
      operator delete(v43);
    if (SHIBYTE(v39) < 0)
      operator delete(v37);
    if (SBYTE7(v29) < 0)
      operator delete(v28[0]);
  }
}

void sub_1007FCFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  sub_1007FDDE0(v10 + 48);
  _Unwind_Resume(a1);
}

void sub_1007FD010(uint64_t a1)
{
  xpc_object_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _QWORD handler[5];
  int v17;
  id v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(_QWORD *)(a1 + 40));
  xpc_dictionary_set_string(v2, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(_QWORD *)(a1 + 32));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(_QWORD *)(a1 + 40) / 2);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6 >= 0)
      v7 = *(_QWORD *)(a1 + 40);
    else
      v7 = v6 + 1;
    *(_DWORD *)buf = 136381443;
    v26 = v4;
    v27 = 2050;
    v28 = v5;
    v29 = 2050;
    v30 = v7 >> 1;
    v31 = 2050;
    v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,registering asset purge activity,delay,%{public}lld,gracePeriod,%{public}lld,interval,%{public}lld", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v9 = qword_1022A02A8;
    v10 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v12 >= 0)
      v13 = *(_QWORD *)(a1 + 40);
    else
      v13 = v12 + 1;
    v17 = 136381443;
    v18 = v10;
    v19 = 2050;
    v20 = v11;
    v21 = 2050;
    v22 = v13 >> 1;
    v23 = 2050;
    v24 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#CLMA,%{private}s,registering asset purge activity,delay,%{public}lld,gracePeriod,%{public}lld,interval,%{public}lld", &v17, 42);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::registerAssetPurgeActivity()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v8 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v8 = *(const char **)v8;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100800E40;
  handler[3] = &unk_102154A38;
  handler[4] = a1;
  xpc_activity_register(v8, v2, handler);
  xpc_release(v2);
}

id sub_1007FD314(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
    *(_DWORD *)buf = 136380675;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,periodic AWD timer fired", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(v1 + 56), "UTF8String");
    v9 = 136380675;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLMA,%{private}s,periodic AWD timer fired", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1007FD4D8(v1);
}

id sub_1007FD4D8(uint64_t a1)
{
  double Current;
  int v3;
  unint64_t v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  double v10;
  int v11;
  unint64_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;

  Current = CFAbsoluteTimeGetCurrent();
  sub_1001E4804(&v20);
  v22 = 0;
  v3 = sub_100526244(v20, "DownloadNotTriggeredPeriod", &v22);
  LODWORD(v4) = v22;
  v5 = (double)v4;
  v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = vabdd_f64(Current, *(double *)(a1 + 112));
  if (v3)
    v10 = v5;
  else
    v10 = 604800.0;
  if (v9 > v10 && vabdd_f64(Current, *(double *)(a1 + 160)) > v10)
  {
    sub_100801CC0(a1);
    *(CFAbsoluteTime *)(a1 + 160) = CFAbsoluteTimeGetCurrent();
    sub_1007FD68C((char *)a1);
  }
  sub_1001E4804(&v20);
  v22 = 0;
  v11 = sub_100526244(v20, "VersionReportingPeriod", &v22);
  LODWORD(v12) = v22;
  v13 = (double)v12;
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = vabdd_f64(Current, *(double *)(a1 + 168));
  if (v11)
    v18 = v13;
  else
    v18 = 604800.0;
  if (v17 > v18)
  {
    sub_10080243C(a1);
    *(CFAbsoluteTime *)(a1 + 168) = CFAbsoluteTimeGetCurrent();
    sub_1007FD68C((char *)a1);
  }
  return objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 86400.0);
}

void sub_1007FD674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007FD68C(char *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  _BYTE v8[16];

  sub_100119F3C(v8);
  sub_10018A534((uint64_t)v8, CFSTR("kLastAttemptedCatalogDownloadKey"), a1 + 104);
  sub_10018A534((uint64_t)v8, CFSTR("kLastSuccessfulCatalogDownloadKey"), a1 + 112);
  sub_10018A534((uint64_t)v8, CFSTR("kLastAttemptedAssetDownloadKey"), a1 + 120);
  sub_10018A534((uint64_t)v8, CFSTR("kLastSuccessfulAssetDownloadKey"), a1 + 128);
  sub_10018A534((uint64_t)v8, CFSTR("kLastDownloadNotTriggeredKey"), a1 + 160);
  sub_10018A534((uint64_t)v8, CFSTR("kLastVersionReportingAwdKey"), a1 + 168);
  v2 = sub_1001FD94C();
  v3 = a1 + 80;
  if (a1[103] < 0)
    v3 = (_QWORD *)*v3;
  sub_1000CAE4C(v2, (const __CFString *)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), (uint64_t)v8);
  v4 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
  sub_1015A2E04(__p, "wrote");
  sub_1007FD7D4((uint64_t)a1, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return sub_10011A5A8(v8);
}

void sub_1007FD7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_10011A5A8(&a16);
  _Unwind_Resume(a1);
}

void sub_1007FD7D4(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  id v24;
  __int16 v25;
  uint64_t *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  id v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v6 = a2;
    if (*((char *)a2 + 23) < 0)
      v6 = (uint64_t *)*a2;
    v7 = *(_QWORD *)(a1 + 104);
    v8 = *(_QWORD *)(a1 + 112);
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(_QWORD *)(a1 + 128);
    v11 = *(_QWORD *)(a1 + 160);
    v12 = *(_QWORD *)(a1 + 168);
    *(_DWORD *)buf = 136382467;
    v40 = v5;
    v41 = 2082;
    v42 = v6;
    v43 = 2050;
    v44 = v7;
    v45 = 2050;
    v46 = v8;
    v47 = 2050;
    v48 = v9;
    v49 = 2050;
    v50 = v10;
    v51 = 2050;
    v52 = v11;
    v53 = 2050;
    v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,%{public}s,catalog download stats cache,lastAttemptedCatalogDownload,%{public}.1f,lastSuccessfulCatalogDownload,%{public}.1f,lastAttemptedAssetDownload,%{public}.1f,lastSuccessfulAssetDownload,%{public}.1f,lastDownloadNotTriggeredAwd,%{public}.1f,lastVersionReportingAwd,%{public}.1f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v13 = qword_1022A02A8;
    v14 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v15 = *(_QWORD *)(a1 + 104);
    v16 = *(_QWORD *)(a1 + 112);
    v17 = *(_QWORD *)(a1 + 120);
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_QWORD *)(a1 + 160);
    v20 = *(_QWORD *)(a1 + 168);
    v23 = 136382467;
    v24 = v14;
    v25 = 2082;
    v26 = a2;
    v27 = 2050;
    v28 = v15;
    v29 = 2050;
    v30 = v16;
    v31 = 2050;
    v32 = v17;
    v33 = 2050;
    v34 = v18;
    v35 = 2050;
    v36 = v19;
    v37 = 2050;
    v38 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "#CLMA,%{private}s,%{public}s,catalog download stats cache,lastAttemptedCatalogDownload,%{public}.1f,lastSuccessfulCatalogDownload,%{public}.1f,lastAttemptedAssetDownload,%{public}.1f,lastSuccessfulAssetDownload,%{public}.1f,lastDownloadNotTriggeredAwd,%{public}.1f,lastVersionReportingAwd,%{public}.1f", &v23, 82);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::printCachedDownloadStats(std::string)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_1007FDA54(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2;
  xpc_activity_state_t state;
  NSObject *v4;
  id v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint8_t *v17;
  _QWORD block[5];
  int v19;
  id v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  int v26;

  v2 = *(_QWORD *)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download activity handler triggered", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v10 = qword_1022A02A8;
      v11 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v19 = 136380675;
      v20 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#CLMA,%{private}s,catalog download activity handler triggered", &v19, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::registerCatalogDownloadActivity()_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v6 = objc_msgSend(objc_msgSend(*(id *)(v2 + 48), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007FDDD8;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v6, block);
  }
  else
  {
    v7 = state;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      *(_DWORD *)buf = 136380931;
      v24 = v9;
      v25 = 1026;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download activity handler triggered with unexpected state %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v14 = qword_1022A02A8;
      v15 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v19 = 136380931;
      v20 = v15;
      v21 = 1026;
      v22 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLMA,%{private}s,catalog download activity handler triggered with unexpected state %{public}d", &v19, 18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::registerCatalogDownloadActivity()_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_1007FDDD8(uint64_t a1)
{
  sub_1007FCBCC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1007FDDE0(uint64_t a1)
{
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1007FDE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFAbsoluteTime Current;
  NSObject *v6;
  _QWORD v7[8];

  v4 = *(_QWORD *)(a1 + 40);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = objc_msgSend(objc_msgSend(*(id *)(v4 + 48), "silo"), "queue");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1007FDEE4;
  v7[3] = &unk_102154A60;
  v7[4] = *(_QWORD *)(a1 + 32);
  v7[5] = v4;
  v7[6] = a2;
  *(CFAbsoluteTime *)&v7[7] = Current;
  dispatch_async(v6, v7);
}

void sub_1007FDEE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t i;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  id v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  uint64_t v44[3];
  char *v45;
  _BYTE *v46;
  char *v47;
  _BYTE v48[14];
  _BYTE v49[6];
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  _BYTE buf[14];
  _BYTE v57[6];
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  _DWORD v62[24];
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 177) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 108) = v3;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112) = vcvtpd_s64_f64(*(double *)(a1 + 56)- *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 56));
  if (v3)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)v57 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download failed with error %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v32 = qword_1022A02A8;
      v33 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v34 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v48 = 136380931;
      *(_QWORD *)&v48[4] = v33;
      *(_WORD *)&v48[12] = 1026;
      *(_DWORD *)v49 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "#CLMA,%{private}s,catalog download failed with error %{public}d", v48, 18);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88) = 2;
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download succeeded", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v37 = qword_1022A02A8;
      v38 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      *(_DWORD *)v48 = 136380675;
      *(_QWORD *)&v48[4] = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#CLMA,%{private}s,catalog download succeeded", v48, 12);
      v40 = (char *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88) = 1;
    *(CFAbsoluteTime *)(v2 + 112) = CFAbsoluteTimeGetCurrent();
    sub_1007FD68C((char *)v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 56))(v2, 2);
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 112);
  *(_DWORD *)buf = 147;
  *(_DWORD *)&buf[8] = v10;
  v62[0] = 0;
  v11 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 116);
  v62[2] = 148;
  v62[4] = v11;
  v62[10] = 0;
  v12 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 120);
  v62[12] = 149;
  v62[14] = v12;
  v62[20] = 0;
  LOBYTE(v12) = *(_BYTE *)(*(_QWORD *)(v9 + 8) + 132);
  v62[22] = 150;
  v63 = v12;
  v64 = 7;
  v13 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 108);
  v65 = 151;
  v66 = v13;
  v67 = 0;
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 92);
  v68 = 152;
  v69 = v9;
  v70 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  *(_QWORD *)v48 = &v45;
  v48[8] = 0;
  v45 = (char *)operator new(0xF0uLL);
  v46 = v45;
  v47 = v45 + 240;
  v46 = (_BYTE *)sub_1006AB40C((uint64_t)&v47, (uint64_t)buf, (uint64_t)&v71, (uint64_t)v45);
  for (i = 208; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v15 = *(void **)(v2 + 240);
  memset(v44, 0, sizeof(v44));
  sub_1006AB68C(v44, (uint64_t)v45, (uint64_t)v46, 0xCCCCCCCCCCCCCCCDLL * ((v46 - v45) >> 3));
  objc_msgSend(v15, "setMeasurements:", sub_1006A7590(v44));
  *(_QWORD *)buf = v44;
  sub_1006AB5A0((void ***)buf);
  v16 = *(void **)(v2 + 240);
  if (byte_102311287 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102311270, *((unint64_t *)&xmmword_102311270 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102311270;
    v43 = unk_102311280;
  }
  objc_msgSend(v16, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v17 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v19 = *(_DWORD *)(v18 + 116);
    v20 = *(_DWORD *)(v18 + 120);
    v21 = *(unsigned __int8 *)(v18 + 132);
    v23 = *(_DWORD *)(v18 + 108);
    v22 = *(_DWORD *)(v18 + 112);
    LODWORD(v18) = *(_DWORD *)(v18 + 92);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = v22;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v19;
    *(_WORD *)v57 = 1026;
    *(_DWORD *)&v57[2] = v20;
    v58 = 1026;
    v59 = v21;
    v60 = 1026;
    v61 = v23;
    LOWORD(v62[0]) = 1026;
    *(_DWORD *)((char *)v62 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,CatalogDownload,MACatalogDownloadDuration,%{public}d,MACatalogDownloadDaysSinceLastAttempt,%{public}d,MACatalogDownloadDaysSinceLastSuccess,%{public}d,MACatalogDownloadAggressiveCriteriaUsed,%{public}d,MACatalogDownloadResult,%{public}d,MACatalogDownloadAssetType,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v25 = *(_DWORD *)(v24 + 116);
    v26 = *(_DWORD *)(v24 + 120);
    v27 = *(unsigned __int8 *)(v24 + 132);
    v29 = *(_DWORD *)(v24 + 108);
    v28 = *(_DWORD *)(v24 + 112);
    LODWORD(v24) = *(_DWORD *)(v24 + 92);
    *(_DWORD *)v48 = 67241472;
    *(_DWORD *)&v48[4] = v28;
    *(_WORD *)&v48[8] = 1026;
    *(_DWORD *)&v48[10] = v25;
    *(_WORD *)v49 = 1026;
    *(_DWORD *)&v49[2] = v26;
    v50 = 1026;
    v51 = v27;
    v52 = 1026;
    v53 = v29;
    v54 = 1026;
    v55 = v24;
    LODWORD(v41) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#CLMA,#careport,CatalogDownload,MACatalogDownloadDuration,%{public}d,MACatalogDownloadDaysSinceLastAttempt,%{public}d,MACatalogDownloadDaysSinceLastSuccess,%{public}d,MACatalogDownloadAggressiveCriteriaUsed,%{public}d,MACatalogDownloadResult,%{public}d,MACatalogDownloadAssetType,%{public}d", v48, v41);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()_block_invoke", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  sub_1007FC7E8(v2);
  *(_QWORD *)buf = &v45;
  sub_1006AB5A0((void ***)buf);
}

void sub_1007FE61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30)
{
  a30 = &a21;
  sub_1006AB5A0((void ***)&a30);
  _Unwind_Resume(a1);
}

id sub_1007FE6A8(__int128 *a1)
{
  id v1;
  _QWORD v3[4];
  __int128 __p;
  uint64_t v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1008027F0;
  v3[3] = &unk_102154B78;
  if (*((char *)a1 + 23) < 0)
  {
    sub_100115CE4(&__p, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __p = *a1;
    v5 = *((_QWORD *)a1 + 2);
  }
  v1 = objc_msgSend(v3, "copy");
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
  return v1;
}

void sub_1007FE748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007FE764(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = a2;
  if (a2 < 7)
    return dword_101BC2320[a2];
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLMA,assetStatePrecedence,asset has unexpected state,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v8[0] = 67240192;
    v8[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLMA,assetStatePrecedence,asset has unexpected state,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "uint32_t CLMobileAsset::assetStatePrecedence(MAAssetState)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

id sub_1007FE930(uint64_t a1, void *a2, unint64_t a3, _DWORD *a4)
{
  int v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  int v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  NSObject *v15;
  id v16;
  id v17;
  unsigned int v18;
  id v19;
  id v20;
  signed int v21;
  uint64_t v22;
  id v23;
  id v24;
  unsigned int v25;
  id v26;
  const char *v27;
  uint8_t *v28;
  id v29;
  uint64_t v30;
  BOOL v31;
  id v32;
  NSObject *v33;
  id v34;
  id v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  unsigned int v41;
  id v42;
  const char *v43;
  uint8_t *v44;
  NSObject *v45;
  id v46;
  id v47;
  NSObject *v48;
  id v49;
  uint64_t v51;
  id v52;
  id v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  id v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  void *v61;
  _DWORD *v62;
  int v63;
  id obj;
  uint64_t v66;
  int v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  id v74;
  __int16 v75;
  _BYTE v76[14];
  __int16 v77;
  id v78;
  uint8_t v79[128];
  uint8_t buf[4];
  id v81;
  __int16 v82;
  _BYTE v83[14];
  __int16 v84;
  id v85;

  v5 = a3;
  v6 = a2;
  if (a3 > 9 || ((1 << a3) & 0x205) == 0)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v48 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v49 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      *(_DWORD *)buf = 136381187;
      v81 = v49;
      v82 = 1026;
      *(_DWORD *)v83 = v5;
      *(_WORD *)&v83[4] = 2113;
      *(_QWORD *)&v83[6] = objc_msgSend(v6, "queryParams");
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset query failed with error %{public}d,queryParams,%{private}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v56 = qword_1022A02A8;
      v57 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v73 = 136381187;
      v74 = v57;
      v75 = 1026;
      *(_DWORD *)v76 = v5;
      *(_WORD *)&v76[4] = 2113;
      *(_QWORD *)&v76[6] = objc_msgSend(v6, "queryParams");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 0, "#CLMA,%{private}s,asset query failed with error %{public}d,queryParams,%{private}@", &v73, 28);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
    v32 = 0;
    *a4 = 1;
    return v32;
  }
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  obj = objc_msgSend(a2, "results");
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
  if (!v7)
    goto LABEL_38;
  v8 = v7;
  v61 = v6;
  v62 = a4;
  v9 = 0;
  v10 = -1;
  v11 = *(_QWORD *)v70;
  v66 = ASAttributeContentVersion;
  v12 = -1;
  v67 = -1;
  do
  {
    v13 = 0;
    v63 = v12;
    v68 = v12 + 1;
    do
    {
      if (*(_QWORD *)v70 != v11)
        objc_enumerationMutation(obj);
      v14 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)v13);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v17 = objc_msgSend(v14, "assetId");
        v18 = objc_msgSend(v14, "state");
        v19 = objc_msgSend(v14, "attributes");
        *(_DWORD *)buf = 136381443;
        v81 = v16;
        v82 = 2113;
        *(_QWORD *)v83 = v17;
        *(_WORD *)&v83[8] = 1025;
        *(_DWORD *)&v83[10] = v18;
        v84 = 2113;
        v85 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102154B58);
        v22 = qword_1022A02A8;
        v23 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
        v24 = objc_msgSend(v14, "assetId");
        v25 = objc_msgSend(v14, "state");
        v26 = objc_msgSend(v14, "attributes");
        v73 = 136381443;
        v74 = v23;
        v75 = 2113;
        *(_QWORD *)v76 = v24;
        *(_WORD *)&v76[8] = 1025;
        *(_DWORD *)&v76[10] = v25;
        v77 = 2113;
        v78 = v26;
        LODWORD(v60) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#CLMA,%{private}s,assetID,%{private}@,state,%{private}d,attributes,%{private}@", &v73, v60);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
        if (!v14)
        {
LABEL_21:
          v21 = -1;
          goto LABEL_22;
        }
      }
      else if (!v14)
      {
        goto LABEL_21;
      }
      v20 = objc_msgSend(objc_msgSend(v14, "attributes"), "objectForKey:", v66);
      if (!v20)
        goto LABEL_21;
      v21 = objc_msgSend(v20, "intValue");
LABEL_22:
      if (v21 > v10
        || v21 == v10
        && (v29 = objc_msgSend(v14, "state"),
            v30 = sub_1007FE764((uint64_t)v29, (unint64_t)v29),
            v30 > sub_1007FE764(v30, (unint64_t)v9)))
      {
        v67 = v68 + (_DWORD)v13;
        v9 = objc_msgSend(v14, "state");
        v10 = v21;
      }
      v13 = (char *)v13 + 1;
    }
    while (v8 != v13);
    v12 = v63 + (_DWORD)v8;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
  }
  while (v8);
  v31 = v10 == -1;
  v6 = v61;
  a4 = v62;
  if (!v31)
  {
    *v62 = 0;
    v32 = objc_msgSend(objc_msgSend(v61, "results"), "objectAtIndex:", v67);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v33 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v34 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v35 = objc_msgSend(v32, "assetId");
      v36 = objc_msgSend(v32, "state");
      v37 = objc_msgSend(v32, "attributes");
      *(_DWORD *)buf = 136381443;
      v81 = v34;
      v82 = 2113;
      *(_QWORD *)v83 = v35;
      *(_WORD *)&v83[8] = 1025;
      *(_DWORD *)&v83[10] = v36;
      v84 = 2113;
      v85 = v37;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,found latest asset for query,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v38 = qword_1022A02A8;
      v39 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v40 = objc_msgSend(v32, "assetId");
      v41 = objc_msgSend(v32, "state");
      v42 = objc_msgSend(v32, "attributes");
      v73 = 136381443;
      v74 = v39;
      v75 = 2113;
      *(_QWORD *)v76 = v40;
      *(_WORD *)&v76[8] = 1025;
      *(_DWORD *)&v76[10] = v41;
      v77 = 2113;
      v78 = v42;
      LODWORD(v60) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 0, "#CLMA,%{private}s,found latest asset for query,assetID,%{private}@,state,%{private}d,attributes,%{private}@", &v73, v60);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    return v32;
  }
LABEL_38:
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v45 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v46 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v47 = objc_msgSend(v6, "queryParams");
    *(_DWORD *)buf = 136380931;
    v81 = v46;
    v82 = 2113;
    *(_QWORD *)v83 = v47;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,failed to find a suitable asset in the query results,queryParams,%{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v51 = qword_1022A02A8;
    v52 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v53 = objc_msgSend(v6, "queryParams");
    v73 = 136380931;
    v74 = v52;
    v75 = 2113;
    *(_QWORD *)v76 = v53;
    LODWORD(v60) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 0, "#CLMA,%{private}s,failed to find a suitable asset in the query results,queryParams,%{private}@", &v73, v60);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  v32 = 0;
  *a4 = 2;
  return v32;
}

void sub_1007FF270(char *a1, void *a2)
{
  id v4;
  id v5;
  unsigned int v6;
  NSObject *v7;
  id v8;
  CFAbsoluteTime Current;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  const char *v30;
  uint8_t *v31;
  _QWORD v32[7];
  unsigned int v33;
  int v34;
  _QWORD v35[6];
  unsigned int v36;
  int v37;
  int v38;
  id v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  _BYTE v46[32];
  void (*v47)(uint64_t);
  void *v48;
  char v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void *__p;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint8_t buf[4];
  id v85;
  __int16 v86;
  unsigned int v87;
  __int16 v88;
  id v89;
  __int16 v90;
  id v91;

  if (a2
    && (v4 = objc_msgSend(a2, "attributes"), (v5 = objc_msgSend(v4, "objectForKey:", ASAttributeContentVersion)) != 0))
  {
    v6 = objc_msgSend(v5, "intValue");
  }
  else
  {
    v6 = -1;
  }
  if (sub_1007F9FC0(a2))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(*((id *)a1 + 7), "UTF8String");
      *(_DWORD *)buf = 136381187;
      v85 = v8;
      v86 = 1026;
      v87 = v6;
      v88 = 2113;
      v89 = objc_msgSend(a2, "attributes");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset is already downloaded,version,%{public}d,attributes,%{private}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v22 = qword_1022A02A8;
      v23 = objc_msgSend(*((id *)a1 + 7), "UTF8String");
      *(_DWORD *)v46 = 136381187;
      *(_QWORD *)&v46[4] = v23;
      *(_WORD *)&v46[12] = 1026;
      *(_DWORD *)&v46[14] = v6;
      *(_WORD *)&v46[18] = 2113;
      *(_QWORD *)&v46[20] = objc_msgSend(a2, "attributes");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#CLMA,%{private}s,asset is already downloaded,version,%{public}d,attributes,%{private}@", v46, 28);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    (*(void (**)(char *, void *))(*(_QWORD *)a1 + 72))(a1, a2);
  }
  else
  {
    *(_QWORD *)v46 = 0;
    *(_QWORD *)&v46[8] = v46;
    *(_QWORD *)&v46[16] = 0x14812000000;
    *(_QWORD *)&v46[24] = sub_100206D7C;
    v47 = sub_100207B2C;
    v48 = &unk_102080316;
    v50 = 0xBFF0000000000000;
    v51 = 0u;
    v52 = 0u;
    v54 = -1;
    v53 = 0;
    v55 = -2;
    v56 = -1;
    v57 = -1;
    v58 = -1;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v63 = -1;
    v64 = -1;
    v62 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = -1;
    v70 = -1;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v76 = -1;
    v77 = 0;
    __p = 0;
    v79 = 0;
    v81 = -1;
    v82 = -1;
    v80 = 0;
    v83 = 0;
    v49 = 1;
    Current = CFAbsoluteTimeGetCurrent();
    v10 = *(_QWORD *)&v46[8];
    *(CFAbsoluteTime *)(*(_QWORD *)&v46[8] + 56) = Current;
    std::string::assign((std::string *)(v10 + 64), "com.apple.locationd");
    v11 = *(_QWORD *)&v46[8];
    *(_DWORD *)(*(_QWORD *)&v46[8] + 92) = *((_DWORD *)a1 + 18);
    v12 = *(double *)(v11 + 56);
    if (v12 > 0.0)
    {
      v13 = *((double *)a1 + 15);
      if (v13 > 0.0)
        *(_DWORD *)(v11 + 124) = llround((v12 - v13) / 86400.0);
    }
    if (v12 > 0.0)
    {
      v14 = *((double *)a1 + 16);
      if (v14 > 0.0)
        *(_DWORD *)(v11 + 128) = llround((v12 - v14) / 86400.0);
    }
    (*(void (**)(char *, void *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, v11 + 48);
    v37 = -1;
    (*(void (**)(char *, void *, int *))(*(_QWORD *)a1 + 48))(a1, a2, &v37);
    v15 = objc_msgSend(*((id *)a1 + 29), "description");
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v16 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = objc_msgSend(*((id *)a1 + 7), "UTF8String");
      v18 = objc_msgSend(v15, "UTF8String");
      v19 = objc_msgSend(a2, "attributes");
      *(_DWORD *)buf = 136381443;
      v85 = v17;
      v86 = 1026;
      v87 = v6;
      v88 = 2081;
      v89 = v18;
      v90 = 2113;
      v91 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,preparing to download asset,version,%{public}d,options,%{private}s,attributes,%{private}@", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v26 = qword_1022A02A8;
      v27 = objc_msgSend(*((id *)a1 + 7), "UTF8String");
      v28 = objc_msgSend(v15, "UTF8String");
      v29 = objc_msgSend(a2, "attributes");
      v38 = 136381443;
      v39 = v27;
      v40 = 1026;
      v41 = v6;
      v42 = 2081;
      v43 = v28;
      v44 = 2113;
      v45 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#CLMA,%{private}s,preparing to download asset,version,%{public}d,options,%{private}s,attributes,%{private}@", &v38, 38);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_1007FF97C;
    v35[3] = &unk_102154AB0;
    v36 = v6;
    v35[4] = a2;
    v35[5] = a1;
    objc_msgSend(a2, "attachProgressCallBack:", v35);
    v20 = a2;
    a1[178] = 1;
    v21 = *((_QWORD *)a1 + 29);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1007FFBF8;
    v32[3] = &unk_102154B00;
    v32[5] = v46;
    v32[6] = a1;
    v32[4] = a2;
    v33 = v6;
    v34 = v37;
    objc_msgSend(a2, "startDownload:then:", v21, v32);
    *((CFAbsoluteTime *)a1 + 15) = CFAbsoluteTimeGetCurrent();
    sub_1007FD68C(a1);
    _Block_object_dispose(v46, 8);
    if (SHIBYTE(v80) < 0)
      operator delete(__p);
    if (SHIBYTE(v74) < 0)
      operator delete(v72);
    if (SHIBYTE(v68) < 0)
      operator delete(v66);
    if (SHIBYTE(v62) < 0)
      operator delete(v60);
    if (SBYTE7(v52) < 0)
      operator delete((void *)v51);
  }
}

void sub_1007FF938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  _Block_object_dispose(&a33, 8);
  sub_1007FDDE0((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_1007FF97C(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  int v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  id v20;
  __int16 v21;
  int v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;
  __int16 v27;
  id v28;
  uint8_t buf[4];
  id v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;

  v4 = *(_QWORD *)(a1 + 40);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v6 = objc_msgSend(*(id *)(v4 + 56), "UTF8String");
    v7 = *(_DWORD *)(a1 + 48);
    v8 = objc_msgSend(a2, "totalWritten");
    v9 = objc_msgSend(a2, "totalExpected");
    v10 = objc_msgSend(*(id *)(a1 + 32), "attributes");
    *(_DWORD *)buf = 136381699;
    v30 = v6;
    v31 = 1026;
    v32 = v7;
    v33 = 2050;
    v34 = v8;
    v35 = 2050;
    v36 = v9;
    v37 = 2113;
    v38 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#CLMA,%{private}s,download progress for asset,version,%{public}d,totalWritten,%{public}lld,totalExpected,%{public}lld,attributes,%{private}@", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v11 = qword_1022A02A8;
    v12 = objc_msgSend(*(id *)(v4 + 56), "UTF8String");
    v13 = *(_DWORD *)(a1 + 48);
    v14 = objc_msgSend(a2, "totalWritten");
    v15 = objc_msgSend(a2, "totalExpected");
    v16 = objc_msgSend(*(id *)(a1 + 32), "attributes");
    v19 = 136381699;
    v20 = v12;
    v21 = 1026;
    v22 = v13;
    v23 = 2050;
    v24 = v14;
    v25 = 2050;
    v26 = v15;
    v27 = 2113;
    v28 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "#CLMA,%{private}s,download progress for asset,version,%{public}d,totalWritten,%{public}lld,totalExpected,%{public}lld,attributes,%{private}@", &v19, 48);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

void sub_1007FFBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFAbsoluteTime Current;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  CFAbsoluteTime v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 48);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = objc_msgSend(objc_msgSend(*(id *)(v4 + 48), "silo"), "queue");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007FFC90;
  v8[3] = &unk_102154AD8;
  v10 = v4;
  v11 = a2;
  v9 = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  v12 = Current;
  v13 = v7;
  dispatch_async(v6, v8);
}

void sub_1007FFC90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  int v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  id v10;
  int v11;
  id v12;
  id v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t i;
  void *v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void **v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  void **v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  id v44;
  int v45;
  int v46;
  id v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  id v51;
  int v52;
  id v53;
  id v54;
  const char *v55;
  char *v56;
  uint64_t v57;
  void *__dst[2];
  uint64_t v59;
  uint64_t v60[3];
  char *v61;
  _BYTE *v62;
  char *v63;
  void *v64[2];
  uint64_t v65;
  void **v66;
  char v67;
  int v68;
  _BYTE __p[34];
  __int16 v70;
  void **v71;
  _BYTE buf[14];
  _BYTE v73[6];
  _BYTE v74[18];
  __int16 v75;
  void **v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  uint64_t v95;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v2 + 178) = 0;
  v3 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 108) = v3;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 112) = vcvtpd_s64_f64(*(double *)(a1 + 64)- *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 56));
  if (v3)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v6 = *(_DWORD *)(a1 + 72);
      v7 = *(_QWORD *)(a1 + 56);
      v8 = objc_msgSend(*(id *)(a1 + 32), "attributes");
      *(_DWORD *)buf = 136381443;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)v73 = v6;
      *(_WORD *)&v73[4] = 1025;
      *(_DWORD *)v74 = v7;
      *(_WORD *)&v74[4] = 2113;
      *(_QWORD *)&v74[6] = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset download failed,version,%{public}d,result,%{private}d,attributes,%{private}@", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v43 = qword_1022A02A8;
      v44 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v45 = *(_DWORD *)(a1 + 72);
      v46 = *(_DWORD *)(a1 + 56);
      v47 = objc_msgSend(*(id *)(a1 + 32), "attributes");
      v68 = 136381443;
      *(_QWORD *)__p = v44;
      *(_WORD *)&__p[8] = 1026;
      *(_DWORD *)&__p[10] = v45;
      *(_WORD *)&__p[14] = 1025;
      *(_DWORD *)&__p[16] = v46;
      *(_WORD *)&__p[20] = 2113;
      *(_QWORD *)&__p[22] = v47;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 0, "#CLMA,%{private}s,asset download failed,version,%{public}d,result,%{private}d,attributes,%{private}@", &v68, 34);
      v49 = (char *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 88) = 4;
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v11 = *(_DWORD *)(a1 + 72);
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "getLocalUrl"), "absoluteString"), "UTF8String");
      v13 = objc_msgSend(*(id *)(a1 + 32), "attributes");
      *(_DWORD *)buf = 136381443;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)v73 = v11;
      *(_WORD *)&v73[4] = 2081;
      *(_QWORD *)v74 = v12;
      *(_WORD *)&v74[8] = 2113;
      *(_QWORD *)&v74[10] = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset download completed successfully,version,%{public}d,URL,%{private}s,attributes,%{private}@", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v50 = qword_1022A02A8;
      v51 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v52 = *(_DWORD *)(a1 + 72);
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "getLocalUrl"), "absoluteString"), "UTF8String");
      v54 = objc_msgSend(*(id *)(a1 + 32), "attributes");
      v68 = 136381443;
      *(_QWORD *)__p = v51;
      *(_WORD *)&__p[8] = 1026;
      *(_DWORD *)&__p[10] = v52;
      *(_WORD *)&__p[14] = 2081;
      *(_QWORD *)&__p[16] = v53;
      *(_WORD *)&__p[24] = 2113;
      *(_QWORD *)&__p[26] = v54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "#CLMA,%{private}s,asset download completed successfully,version,%{public}d,URL,%{private}s,attributes,%{private}@", &v68, 38);
      v56 = (char *)v55;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 88) = 3;
    *(CFAbsoluteTime *)(v2 + 128) = CFAbsoluteTimeGetCurrent();
    sub_1007FD68C((char *)v2);
    if (objc_msgSend(*(id *)(a1 + 32), "refreshState"))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 72))(v2, *(_QWORD *)(a1 + 32));
  }
  sub_10080066C(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 104), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 100), (uint64_t)v64);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_DWORD *)(*(_QWORD *)(v14 + 8) + 112);
  *(_DWORD *)buf = 153;
  *(_DWORD *)&buf[8] = v15;
  *(_DWORD *)&v74[12] = 0;
  v16 = *(_DWORD *)(*(_QWORD *)(v14 + 8) + 124);
  LODWORD(v76) = 154;
  v77 = v16;
  v78 = 0;
  v17 = *(_DWORD *)(*(_QWORD *)(v14 + 8) + 128);
  v79 = 155;
  v80 = v17;
  v81 = 0;
  v18 = *(_DWORD *)(*(_QWORD *)(v14 + 8) + 108);
  v82 = 156;
  v83 = v18;
  v84 = 0;
  LOBYTE(v14) = *(_BYTE *)(*(_QWORD *)(v14 + 8) + 133);
  v85 = 157;
  v86 = v14;
  v19 = *(_DWORD *)(a1 + 76);
  v87 = 7;
  v88 = 158;
  v89 = v19;
  v90 = 0;
  v68 = 159;
  if (SHIBYTE(v65) < 0)
  {
    sub_100115CE4(&__p[4], v64[0], (unint64_t)v64[1]);
    v20 = v68;
  }
  else
  {
    *(_OWORD *)&__p[4] = *(_OWORD *)v64;
    *(_QWORD *)&__p[20] = v65;
    v20 = 159;
  }
  v91 = v20;
  v92 = *(_OWORD *)&__p[4];
  v93 = *(_QWORD *)&__p[20];
  memset(&__p[4], 0, 24);
  v94 = 6;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v66 = (void **)&v61;
  v67 = 0;
  v61 = (char *)operator new(0x118uLL);
  v62 = v61;
  v63 = v61 + 280;
  v62 = (_BYTE *)sub_1006AB40C((uint64_t)&v63, (uint64_t)buf, (uint64_t)&v95, (uint64_t)v61);
  for (i = 248; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  if ((__p[27] & 0x80000000) != 0)
    operator delete(*(void **)&__p[4]);
  v22 = *(void **)(v2 + 240);
  memset(v60, 0, sizeof(v60));
  sub_1006AB68C(v60, (uint64_t)v61, (uint64_t)v62, 0xCCCCCCCCCCCCCCCDLL * ((v62 - v61) >> 3));
  objc_msgSend(v22, "setMeasurements:", sub_1006A7590(v60));
  *(_QWORD *)buf = v60;
  sub_1006AB5A0((void ***)buf);
  v23 = *(void **)(v2 + 240);
  if (byte_10231129F < 0)
  {
    sub_100115CE4(__dst, (void *)xmmword_102311288, *((unint64_t *)&xmmword_102311288 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_102311288;
    v59 = unk_102311298;
  }
  objc_msgSend(v23, "submitEvent:", sub_1007FE6A8((__int128 *)__dst));
  if (SHIBYTE(v59) < 0)
    operator delete(__dst[0]);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v24 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v26 = *(_DWORD *)(v25 + 124);
    v27 = *(_DWORD *)(v25 + 128);
    v29 = *(_DWORD *)(v25 + 108);
    v28 = *(_DWORD *)(v25 + 112);
    v30 = *(unsigned __int8 *)(v25 + 133);
    v31 = *(_DWORD *)(a1 + 76);
    v32 = v64;
    if (v65 < 0)
      v32 = (void **)v64[0];
    *(_DWORD *)buf = 67241730;
    *(_DWORD *)&buf[4] = v28;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v26;
    *(_WORD *)v73 = 1026;
    *(_DWORD *)&v73[2] = v27;
    *(_WORD *)v74 = 1026;
    *(_DWORD *)&v74[2] = v29;
    *(_WORD *)&v74[6] = 1026;
    *(_DWORD *)&v74[8] = v30;
    *(_WORD *)&v74[12] = 1026;
    *(_DWORD *)&v74[14] = v31;
    v75 = 2082;
    v76 = v32;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,AssetDownload,MAAssetDownloadDuration,%{public}d,MAAssetDownloadDaysSinceLastAttempt,%{public}d,MAAssetDownloadDaysSinceLastSuccess,%{public}d,MAAssetDownloadResult,%{public}d,MAAssetDownloadGenericAssetUsed,%{public}d,MAAssetDownloadAssetComponent,%{public}d,MAAssetDownloadAssetVersion,%{public}s", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v34 = *(_DWORD *)(v33 + 124);
    v35 = *(_DWORD *)(v33 + 128);
    v37 = *(_DWORD *)(v33 + 108);
    v36 = *(_DWORD *)(v33 + 112);
    v38 = *(unsigned __int8 *)(v33 + 133);
    v39 = *(_DWORD *)(a1 + 76);
    v40 = v64;
    if (v65 < 0)
      v40 = (void **)v64[0];
    v68 = 67241730;
    *(_DWORD *)__p = v36;
    *(_WORD *)&__p[4] = 1026;
    *(_DWORD *)&__p[6] = v34;
    *(_WORD *)&__p[10] = 1026;
    *(_DWORD *)&__p[12] = v35;
    *(_WORD *)&__p[16] = 1026;
    *(_DWORD *)&__p[18] = v37;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)&__p[24] = v38;
    *(_WORD *)&__p[28] = 1026;
    *(_DWORD *)&__p[30] = v39;
    v70 = 2082;
    v71 = v40;
    LODWORD(v57) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#CLMA,#careport,AssetDownload,MAAssetDownloadDuration,%{public}d,MAAssetDownloadDaysSinceLastAttempt,%{public}d,MAAssetDownloadDaysSinceLastSuccess,%{public}d,MAAssetDownloadResult,%{public}d,MAAssetDownloadGenericAssetUsed,%{public}d,MAAssetDownloadAssetComponent,%{public}d,MAAssetDownloadAssetVersion,%{public}s", &v68, v57);
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }

  *(_QWORD *)buf = &v61;
  sub_1006AB5A0((void ***)buf);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
}

